
mb_working_airbrakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019eb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0801a080  0801a080  0002a080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ad00  0801ad00  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ad00  0801ad00  0002ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad08  0801ad08  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ad08  0801ad08  0002ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ad0c  0801ad0c  0002ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801ad10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028d44  200001fc  0801af0c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20028f40  0801af0c  00038f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043767  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000081b9  00000000  00000000  00073993  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002878  00000000  00000000  0007bb50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024d8  00000000  00000000  0007e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000325ae  00000000  00000000  000808a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c134  00000000  00000000  000b2e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001052e4  00000000  00000000  000def82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b220  00000000  00000000  001e42e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a068 	.word	0x0801a068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801a068 	.word	0x0801a068

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e03c      	b.n	8000fc8 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d102      	bne.n	8000f62 <calculateCRC+0x2a>
      c = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e00e      	b.n	8000f80 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <calculateCRC+0x6c>
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <calculateCRC+0x7e>
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1de      	bne.n	8000f80 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbbd      	blt.n	8000f4e <calculateCRC+0x16>
  }
  return crc;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EnableMotor>:

osStatus_t EnableMotor(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800100a:	2306      	movs	r3, #6
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f957 	bl	80012d0 <WriteCommand>
 8001022:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93b 	bl	80012d0 <WriteCommand>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 8001062:	2341      	movs	r3, #65	; 0x41
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9b1 	bl	80013d8 <ReadCommand>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b37      	cmp	r3, #55	; 0x37
 800107c:	d104      	bne.n	8001088 <EnableMotor+0xa8>
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d101      	bne.n	8001088 <EnableMotor+0xa8>
		status = osOK;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800108a:	4618      	mov	r0, r3
 800108c:	3738      	adds	r7, #56	; 0x38
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b08a      	sub	sp, #40	; 0x28
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f900 	bl	80012d0 <WriteCommand>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	141b      	asrs	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	f107 011c 	add.w	r1, r7, #28
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f8d5 	bl	80012d0 <WriteCommand>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8bd 	bl	80012d0 <WriteCommand>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001170:	230f      	movs	r3, #15
 8001172:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	f107 011c 	add.w	r1, r7, #28
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8a5 	bl	80012d0 <WriteCommand>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001192:	b580      	push	{r7, lr}
 8001194:	b08c      	sub	sp, #48	; 0x30
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011aa:	2381      	movs	r3, #129	; 0x81
 80011ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	141b      	asrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f874 	bl	80012d0 <WriteCommand>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 80011f0:	2383      	movs	r3, #131	; 0x83
 80011f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f851 	bl	80012d0 <WriteCommand>
 800122e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001236:	2384      	movs	r3, #132	; 0x84
 8001238:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	141b      	asrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001262:	f107 0210 	add.w	r2, r7, #16
 8001266:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82e 	bl	80012d0 <WriteCommand>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800128e:	2360      	movs	r3, #96	; 0x60
 8001290:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f897 	bl	80013d8 <ReadCommand>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012b4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012b6:	7d3b      	ldrb	r3, [r7, #20]
 80012b8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012ba:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 80012c0:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

	return status;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80012f4:	2302      	movs	r3, #2
 80012f6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80012f8:	2368      	movs	r3, #104	; 0x68
 80012fa:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80012fc:	2304      	movs	r3, #4
 80012fe:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	f107 021e 	add.w	r2, r7, #30
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6851      	ldr	r1, [r2, #4]
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	8912      	ldrh	r2, [r2, #8]
 8001358:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fde7 	bl	8000f38 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800136e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	230a      	movs	r3, #10
 8001388:	220e      	movs	r2, #14
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <WriteCommand+0x104>)
 800138c:	f009 ffe4 	bl	800b358 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2214      	movs	r2, #20
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <WriteCommand+0x104>)
 8001398:	f00a f86f 	bl	800b47a <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3306      	adds	r3, #6
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <WriteCommand+0xf8>
		status = osOK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200089f0 	.word	0x200089f0

080013d8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80013ec:	2302      	movs	r3, #2
 80013ee:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80013f4:	2302      	movs	r3, #2
 80013f6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80013f8:	2301      	movs	r3, #1
 80013fa:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	8892      	ldrh	r2, [r2, #4]
 8001424:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2106      	movs	r1, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd81 	bl	8000f38 <calculateCRC>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	230a      	movs	r3, #10
 8001450:	220a      	movs	r2, #10
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <ReadCommand+0xc4>)
 8001454:	f009 ff80 	bl	800b358 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001458:	230a      	movs	r3, #10
 800145a:	2214      	movs	r2, #20
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <ReadCommand+0xc4>)
 8001460:	f00a f80b 	bl	800b47a <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3307      	adds	r3, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3306      	adds	r3, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3305      	adds	r3, #5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <ReadCommand+0xb8>
		status = osOK;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001490:	69fb      	ldr	r3, [r7, #28]

}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200089f0 	.word	0x200089f0

080014a0 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <init_coeff+0xac>)
 80014ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014b2:	4611      	mov	r1, r2
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 fb5c 	bl	8017b74 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 80014bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <init_coeff+0xb0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	4611      	mov	r1, r2
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	461a      	mov	r2, r3
 80014ca:	f016 fb53 	bl	8017b74 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 80014ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <init_coeff+0xb4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	4611      	mov	r1, r2
 80014d8:	23f8      	movs	r3, #248	; 0xf8
 80014da:	461a      	mov	r2, r3
 80014dc:	f016 fb4a 	bl	8017b74 <memcpy>
    const double coeff3[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000201990562985250001943459993472837845, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000001332599818626039970897811441571004127947, -0.000000000000000000000000000000000000000000000000000000000000000000000000000002625348546949809937078012282342904976127723, -0.000000000000000000000000000000000000000000000000000000000000000000000000000223727864461865003520661187439024600181539219, 0.000000000000000000000000000000000000000000000000000000000000000000000004464195222526840028513420957475197151241051746408, 0.000000000000000000000000000000000000000000000000000000000000000000002338983169198669858723678827906894927557002243871494, -0.000000000000000000000000000000000000000000000000000000000000000006912415560184160441989718978305120773037706865961972544, -0.000000000000000000000000000000000000000000000000000000000000010413732827001500036314706101719078643859924602095189421307, 0.000000000000000000000000000000000000000000000000000000000004189409028079520254470994017178321308860178893443967174876530, 0.000000000000000000000000000000000000000000000000000000025614354369933901616993599242485723226984402693215380015245905534, 0.000000000000000000000000000000000000000000000000000017039378494863200873938147795841770460467212292535660899037298363934, -0.000000000000000000000000000000000000000000000000037663076028431798602138861411457291136403355675991877262622158500780707, -0.000000000000000000000000000000000000000000000072815926705972796875656513613119001981820983531065325656503321875845255363, 0.000000000000000000000000000000000000000000018447501014541900178687391898845575613515392446088612401903946378298107262645, 0.000000000000000000000000000000000000000176710198155264991511205517529206838994318948056972059471650682635785295572654346, 0.000000000000000000000000000000000000071835866121803100252160509096347173382186418680093242878723576924609687822100523993, -0.000000000000000000000000000000000372820534942092984478403688654843534473731172425786204417355750076042081268496098051327, -0.000000000000000000000000000000252989602976263993127475788776422100805568474814989995701968345433265389187102987512967278, 0.000000000000000000000000000905170223509092071927497805678691252483018558288891743135588951403590113244795878344461925735, 0.000000000000000000000000194552177016366997577807228355801877291823980823471641161670560613928052107191035702271619811654, -0.000000000000000000002437371278037870091434718374663516278393545732460725671800379210640841165513847954571247100830078125, 0.000000000000000003555223129133779670528346764370006160828520346391329667867786668011831352487206459045410156250000000000, -0.000000000000002840735214777100016456280482905011509609210628574116341837907384615391492843627929687500000000000000000000, 0.000000000001463938313075189970311027401823124891380722978340145346010103821754455566406250000000000000000000000000000000, -0.000000000508757921832193008510020092773898023330580997480865335091948509216308593750000000000000000000000000000000000000, 0.000000119452175202401992986544132166470966183169366559013724327087402343750000000000000000000000000000000000000000000000, -0.000018465109600443501075908714348372541280696168541908264160156250000000000000000000000000000000000000000000000000000000, 0.001785007556170990035068757428859953506616875529289245605468750000000000000000000000000000000000000000000000000000000000, -0.101366848874935994162527208573010284453630447387695312500000000000000000000000000000000000000000000000000000000000000000, 3.838048220048389858050086331786587834358215332031250000000000000000000000000000000000000000000000000000000000000000000000, 3.453560767076920168250353526673279702663421630859375000000000000000000000000000000000000000000000000000000000000000000000};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <init_coeff+0xb8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	4611      	mov	r1, r2
 80014ea:	23f8      	movs	r3, #248	; 0xf8
 80014ec:	461a      	mov	r2, r3
 80014ee:	f016 fb41 	bl	8017b74 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3340      	adds	r3, #64	; 0x40
 80014f8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fb38 	bl	8017b74 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800150c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4618      	mov	r0, r3
 8001514:	f016 fb2e 	bl	8017b74 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001520:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4618      	mov	r0, r3
 8001528:	f016 fb24 	bl	8017b74 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4618      	mov	r0, r3
 800153c:	f016 fb1a 	bl	8017b74 <memcpy>
}
 8001540:	bf00      	nop
 8001542:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0801a080 	.word	0x0801a080
 8001550:	0801a178 	.word	0x0801a178
 8001554:	0801a270 	.word	0x0801a270
 8001558:	0801a368 	.word	0x0801a368
 800155c:	00000000 	.word	0x00000000

08001560 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	ed2d 8b02 	vpush	{d8}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	f040 80cd 	bne.w	8001714 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 800157e:	2b01      	cmp	r3, #1
 8001580:	d004      	beq.n	800158c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b02      	cmp	r3, #2
 8001588:	f040 80c4 	bne.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001596:	a36c      	add	r3, pc, #432	; (adr r3, 8001748 <compute_control_input+0x1e8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff fabe 	bl	8000b1c <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b6 	beq.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ad 	beq.w	8001714 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f913 	bl	80017e6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa15 	bl	80019f0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80015cc:	461d      	mov	r5, r3
 80015ce:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	4631      	mov	r1, r6
 80015e8:	f7ff f826 	bl	8000638 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4698      	mov	r8, r3
 80015f2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffc2 	bl	8000588 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7ff f814 	bl	8000638 <__aeabi_dmul>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	4640      	mov	r0, r8
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fe54 	bl	80002c8 <__aeabi_dsub>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4698      	mov	r8, r3
 8001626:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	a345      	add	r3, pc, #276	; (adr r3, 8001750 <compute_control_input+0x1f0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fe43 	bl	80002c8 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fff5 	bl	8000638 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe35 	bl	80002c8 <__aeabi_dsub>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4625      	mov	r5, r4
 8001664:	461c      	mov	r4, r3
                + control_data->control_input);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fe28 	bl	80002cc <__adddf3>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa88 	bl	8000b98 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f016 fea8 	bl	80183f0 <fminf>
 80016a0:	eef0 7a40 	vmov.f32	s15, s0
 80016a4:	eef0 0a67 	vmov.f32	s1, s15
 80016a8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001740 <compute_control_input+0x1e0>
 80016ac:	f016 fe85 	bl	80183ba <fmaxf>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f944 	bl	8001948 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	ed93 8a06 	vldr	s16, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001744 <compute_control_input+0x1e4>
 80016d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f016 fe80 	bl	80183f0 <fminf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	eeb0 0a48 	vmov.f32	s0, s16
 80016fc:	f016 fe5d 	bl	80183ba <fmaxf>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f993 	bl	8001a38 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001712:	e00d      	b.n	8001730 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f81f 	bl	8001758 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f85e 	bl	80017e6 <evaluate_polyfit>
            compute_reference_error(control_data);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f960 	bl	80019f0 <compute_reference_error>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	ecbd 8b02 	vpop	{d8}
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	bf00      	nop
 8001740:	00000000 	.word	0x00000000
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fe19999 	.word	0x3fe19999
 8001750:	e41d1d5e 	.word	0xe41d1d5e
 8001754:	3fdfc917 	.word	0x3fdfc917

08001758 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe3 	bl	8001758 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe75 	bl	80014a0 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00d      	b.n	80017d8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3305      	adds	r3, #5
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	441a      	add	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	ddee      	ble.n	80017bc <control_data_init+0x38>
    }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}

080017e6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 80017e6:	b5b0      	push	{r4, r5, r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00d      	b.n	800181c <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3305      	adds	r3, #5
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	441a      	add	r2, r3
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2b02      	cmp	r3, #2
 8001820:	ddee      	ble.n	8001800 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e07b      	b.n	800192c <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fea5 	bl	8000588 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1c3 031e 	rsb	r3, r3, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe8b 	bl	8000564 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ec43 2b11 	vmov	d1, r2, r3
 8001856:	ec45 4b10 	vmov	d0, r4, r5
 800185a:	f016 fe01 	bl	8018460 <pow>
 800185e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3308      	adds	r3, #8
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fd21 	bl	80002cc <__adddf3>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3327      	adds	r3, #39	; 0x27
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd08 	bl	80002cc <__adddf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3346      	adds	r3, #70	; 0x46
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018de:	f7fe feab 	bl	8000638 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcef 	bl	80002cc <__adddf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3365      	adds	r3, #101	; 0x65
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7fe fcd7 	bl	80002cc <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b1e      	cmp	r3, #30
 8001930:	dd80      	ble.n	8001834 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001936:	f7ff f92f 	bl	8000b98 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	615a      	str	r2, [r3, #20]
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}

08001948 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe17 	bl	8000588 <__aeabi_f2d>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	a11f      	add	r1, pc, #124	; (adr r1, 80019e0 <compute_antiwindup_boundaries+0x98>)
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	f7fe fcae 	bl	80002c8 <__aeabi_dsub>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	4618      	mov	r0, r3
 8001972:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001974:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <compute_antiwindup_boundaries+0xa0>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f907 	bl	8000b98 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001990:	ee00 3a10 	vmov	s0, r3
 8001994:	f016 fd11 	bl	80183ba <fmaxf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdee 	bl	8000588 <__aeabi_f2d>
 80019ac:	a30c      	add	r3, pc, #48	; (adr r3, 80019e0 <compute_antiwindup_boundaries+0x98>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7ff f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	7417f6de 	.word	0x7417f6de
 80019e4:	4095dc93 	.word	0x4095dc93
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f747ae1 	.word	0x3f747ae1

080019f0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80019fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d504      	bpl.n	8001a12 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 8001a10:	e00a      	b.n	8001a28 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a80 <check_apogee_approach_phase+0x48>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f863 	bl	8000b1c <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8c1b      	ldrh	r3, [r3, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8c1b      	ldrh	r3, [r3, #32]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d903      	bls.n	8001a78 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fb99999 	.word	0x3fb99999

08001a88 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001a90:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001ab0 <init_env+0x28>
 8001a94:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f80d 	bl	8001ab8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001a9e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f82c 	bl	8001b00 <update_env>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	47c5e680 	.word	0x47c5e680
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd5d 	bl	8000588 <__aeabi_f2d>
 8001ace:	a30a      	add	r3, pc, #40	; (adr r3, 8001af8 <calibrate_env+0x40>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fbfa 	bl	80002cc <__adddf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f7ff f85a 	bl	8000b98 <__aeabi_d2f>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	66666666 	.word	0x66666666
 8001afc:	40711266 	.word	0x40711266

08001b00 <update_env>:

void update_env(env_t *env, float T) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	a317      	add	r3, pc, #92	; (adr r3, 8001b70 <update_env+0x70>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fbd8 	bl	80002cc <__adddf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7ff f838 	bl	8000b98 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	a30f      	add	r3, pc, #60	; (adr r3, 8001b78 <update_env+0x78>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7ff f825 	bl	8000b98 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001b54:	ee00 3a10 	vmov	s0, r3
 8001b58:	f016 fe4c 	bl	80187f4 <powf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	66666666 	.word	0x66666666
 8001b74:	40711266 	.word	0x40711266
 8001b78:	8c1557b7 	.word	0x8c1557b7
 8001b7c:	40791e2f 	.word	0x40791e2f

08001b80 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001b8c:	edd7 7a00 	vldr	s15, [r7]
 8001b90:	eef0 6ae7 	vabs.f32	s13, s15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	ee07 3a90 	vmov	s15, r3
}
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e043      	b.n	8001c54 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcd3 	bl	8000588 <__aeabi_f2d>
 8001be2:	a322      	add	r3, pc, #136	; (adr r3, 8001c6c <pressure2altitudeAGL+0xb4>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4625      	mov	r5, r4
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c0a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001c68 <pressure2altitudeAGL+0xb0>
 8001c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c12:	f016 fdef 	bl	80187f4 <powf>
 8001c16:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	f7fe ffa7 	bl	8000b98 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbb7      	blt.n	8001bcc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	3e42c4dc 	.word	0x3e42c4dc
 8001c6c:	76c8b439 	.word	0x76c8b439
 8001c70:	3f7a9fbe 	.word	0x3f7a9fbe
 8001c74:	00000000 	.word	0x00000000

08001c78 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e047      	b.n	8001d20 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	ed93 8a00 	vldr	s16, [r3]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6b 	bl	8000588 <__aeabi_f2d>
 8001cb2:	a323      	add	r3, pc, #140	; (adr r3, 8001d40 <altitudeAGL2pressure+0xc8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4625      	mov	r5, r4
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fdd9 	bl	800088c <__aeabi_ddiv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <altitudeAGL2pressure+0xc0>)
 8001ce8:	f7fe faee 	bl	80002c8 <__aeabi_dsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f7fe ff50 	bl	8000b98 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001d3c <altitudeAGL2pressure+0xc4>
 8001cfe:	ee00 3a10 	vmov	s0, r3
 8001d02:	f016 fd77 	bl	80187f4 <powf>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d10:	4413      	add	r3, r2
 8001d12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbb3      	blt.n	8001c90 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	ecbd 8b02 	vpop	{d8}
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	40a83d87 	.word	0x40a83d87
 8001d40:	76c8b439 	.word	0x76c8b439
 8001d44:	3f7a9fbe 	.word	0x3f7a9fbe

08001d48 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fc15 	bl	8000588 <__aeabi_f2d>
 8001d5e:	a323      	add	r3, pc, #140	; (adr r3, 8001dec <altitude_gradient+0xa4>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	461c      	mov	r4, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fc07 	bl	8000588 <__aeabi_f2d>
 8001d7a:	a31e      	add	r3, pc, #120	; (adr r3, 8001df4 <altitude_gradient+0xac>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc5a 	bl	8000638 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fd7e 	bl	800088c <__aeabi_ddiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4625      	mov	r5, r4
 8001d96:	461c      	mov	r4, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001da6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001de8 <altitude_gradient+0xa0>
 8001daa:	eeb0 0a66 	vmov.f32	s0, s13
 8001dae:	f016 fd21 	bl	80187f4 <powf>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fc38 	bl	8000638 <__aeabi_dmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f7fe fee2 	bl	8000b98 <__aeabi_d2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ee07 3a90 	vmov	s15, r3
}
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	bf4f4ec9 	.word	0xbf4f4ec9
 8001dec:	640f3ea7 	.word	0x640f3ea7
 8001df0:	c071f0fd 	.word	0xc071f0fd
 8001df4:	51eb851f 	.word	0x51eb851f
 8001df8:	40239eb8 	.word	0x40239eb8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f200 80a6 	bhi.w	8001f64 <detect_flight_phase+0x164>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <detect_flight_phase+0x20>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001f65 	.word	0x08001f65
 8001e28:	08001e83 	.word	0x08001e83
 8001e2c:	08001ecd 	.word	0x08001ecd
 8001e30:	08001f17 	.word	0x08001f17
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002000 <detect_flight_phase+0x200>
 8001e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dc00      	bgt.n	8001e58 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001e56:	e087      	b.n	8001f68 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dd79      	ble.n	8001f68 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	721a      	strb	r2, [r3, #8]
        break;
 8001e80:	e072      	b.n	8001f68 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002000 <detect_flight_phase+0x200>
 8001e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d400      	bmi.n	8001ea2 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001ea0:	e064      	b.n	8001f6c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	dd56      	ble.n	8001f6c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	721a      	strb	r2, [r3, #8]
        break;
 8001eca:	e04f      	b.n	8001f6c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002000 <detect_flight_phase+0x200>
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d400      	bmi.n	8001eec <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001eea:	e041      	b.n	8001f70 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	dd33      	ble.n	8001f70 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	721a      	strb	r2, [r3, #8]
        break;
 8001f14:	e02c      	b.n	8001f70 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002000 <detect_flight_phase+0x200>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d400      	bmi.n	8001f3a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001f38:	e01c      	b.n	8001f74 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25a      	sxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	dd0e      	ble.n	8001f74 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	721a      	strb	r2, [r3, #8]
        break;
 8001f62:	e007      	b.n	8001f74 <detect_flight_phase+0x174>

        default:
        break;
 8001f64:	bf00      	nop
 8001f66:	e006      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f68:	bf00      	nop
 8001f6a:	e004      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e002      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f74:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002000 <detect_flight_phase+0x200>
 8001f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdf6 	bl	8001b80 <mach_number>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <detect_flight_phase+0x1f0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fdc9 	bl	8000b44 <__aeabi_dcmpge>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001fbe:	e013      	b.n	8001fe8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fadf 	bl	8000588 <__aeabi_f2d>
 8001fca:	a30b      	add	r3, pc, #44	; (adr r3, 8001ff8 <detect_flight_phase+0x1f8>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fdb8 	bl	8000b44 <__aeabi_dcmpge>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	705a      	strb	r2, [r3, #1]
}
 8001fe0:	e002      	b.n	8001fe8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	3ff4cccc 	.word	0x3ff4cccc
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fe99999 	.word	0x3fe99999
 8002000:	447a0000 	.word	0x447a0000

08002004 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800203c:	4b45      	ldr	r3, [pc, #276]	; (8002154 <reset_kf_state+0x120>)
 800203e:	f107 040c 	add.w	r4, r7, #12
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <reset_kf_state+0x124>)
 8002052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <reset_kf_state+0x124>)
 800205e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002062:	ca07      	ldmia	r2, {r0, r1, r2}
 8002064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f107 010c 	add.w	r1, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	4618      	mov	r0, r3
 8002072:	f015 fd7f 	bl	8017b74 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3348      	adds	r3, #72	; 0x48
 800207a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800207e:	220c      	movs	r2, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f015 fd77 	bl	8017b74 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3354      	adds	r3, #84	; 0x54
 800208a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800208e:	220c      	movs	r2, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f015 fd6f 	bl	8017b74 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <reset_kf_state+0x128>)
 80020b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020b4:	461d      	mov	r5, r3
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020be:	682b      	ldr	r3, [r5, #0]
 80020c0:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80020c8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80020cc:	220c      	movs	r2, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f015 fd50 	bl	8017b74 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80020da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f015 fd47 	bl	8017b74 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	33b4      	adds	r3, #180	; 0xb4
 80020ea:	2204      	movs	r2, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f015 fd4b 	bl	8017b8a <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	33b8      	adds	r3, #184	; 0xb8
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f015 fd44 	bl	8017b8a <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002108:	220c      	movs	r2, #12
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f015 fd3c 	bl	8017b8a <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002118:	2203      	movs	r2, #3
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f015 fd34 	bl	8017b8a <memset>
    kf_state->num_z_active = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	2103      	movs	r1, #3
 8002132:	2003      	movs	r0, #3
 8002134:	f000 fd48 	bl	8002bc8 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2101      	movs	r1, #1
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd3f 	bl	8002bc8 <transpose>
}
 800214a:	bf00      	nop
 800214c:	37c0      	adds	r7, #192	; 0xc0
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	0801a460 	.word	0x0801a460
 8002158:	0801a484 	.word	0x0801a484
 800215c:	0801a490 	.word	0x0801a490

08002160 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002176:	2201      	movs	r2, #1
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	2103      	movs	r1, #3
 8002182:	2003      	movs	r0, #3
 8002184:	f000 ff4a 	bl	800301c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800219a:	2200      	movs	r2, #0
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	460a      	mov	r2, r1
 80021a4:	2101      	movs	r1, #1
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 ff38 	bl	800301c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80021ba:	2101      	movs	r1, #1
 80021bc:	9102      	str	r1, [sp, #8]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe8d 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	33b4      	adds	r3, #180	; 0xb4
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80021de:	2101      	movs	r1, #1
 80021e0:	9102      	str	r1, [sp, #8]
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	2101      	movs	r1, #1
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fe7b 	bl	8002ee8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002202:	2101      	movs	r1, #1
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4603      	mov	r3, r0
 800220c:	2203      	movs	r2, #3
 800220e:	2103      	movs	r1, #3
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fe69 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002226:	2100      	movs	r1, #0
 8002228:	9102      	str	r1, [sp, #8]
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4603      	mov	r3, r0
 8002230:	2203      	movs	r2, #3
 8002232:	2101      	movs	r1, #1
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fe57 	bl	8002ee8 <matmul>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	336c      	adds	r3, #108	; 0x6c
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f015 fc99 	bl	8017b8a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e01e      	b.n	800229c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	336c      	adds	r3, #108	; 0x6c
 800227e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	33b8      	adds	r3, #184	; 0xb8
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	dddd      	ble.n	800225e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3390      	adds	r3, #144	; 0x90
 80022ac:	2103      	movs	r1, #3
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 fc8a 	bl	8002bc8 <transpose>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022d6:	2201      	movs	r2, #1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 fe9a 	bl	800301c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fce3 	bl	8002cc6 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8002312:	2101      	movs	r1, #1
 8002314:	9102      	str	r1, [sp, #8]
 8002316:	9201      	str	r2, [sp, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	2203      	movs	r2, #3
 800231e:	2103      	movs	r1, #3
 8002320:	2003      	movs	r0, #3
 8002322:	f000 fde1 	bl	8002ee8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7011 	add.w	r0, r3, #580	; 0x244
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3390      	adds	r3, #144	; 0x90
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002336:	2101      	movs	r1, #1
 8002338:	9102      	str	r1, [sp, #8]
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	2203      	movs	r2, #3
 8002342:	2103      	movs	r1, #3
 8002344:	2003      	movs	r0, #3
 8002346:	f000 fdcf 	bl	8002ee8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	2103      	movs	r1, #3
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fcda 	bl	8002d1c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f015 fc09 	bl	8017b8a <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002384:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002494 <kf_update+0x1d8>
 8002388:	461a      	mov	r2, r3
 800238a:	2003      	movs	r0, #3
 800238c:	f001 f812 	bl	80033b4 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3390      	adds	r3, #144	; 0x90
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80023a0:	2101      	movs	r1, #1
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	2203      	movs	r2, #3
 80023ac:	2103      	movs	r1, #3
 80023ae:	2003      	movs	r0, #3
 80023b0:	f000 fd9a 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 80023c6:	2101      	movs	r1, #1
 80023c8:	9102      	str	r1, [sp, #8]
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4603      	mov	r3, r0
 80023d0:	2203      	movs	r2, #3
 80023d2:	2103      	movs	r1, #3
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fd87 	bl	8002ee8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023ec:	2201      	movs	r2, #1
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	2103      	movs	r1, #3
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fe0f 	bl	800301c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fc2d 	bl	8002c70 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800241c:	4619      	mov	r1, r3
 800241e:	2003      	movs	r0, #3
 8002420:	f000 fb86 	bl	8002b30 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	336c      	adds	r3, #108	; 0x6c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002434:	2101      	movs	r1, #1
 8002436:	9102      	str	r1, [sp, #8]
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	2203      	movs	r2, #3
 8002440:	2103      	movs	r1, #3
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fd50 	bl	8002ee8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	2103      	movs	r1, #3
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fcce 	bl	8002e02 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002478:	2101      	movs	r1, #1
 800247a:	9102      	str	r1, [sp, #8]
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	2203      	movs	r2, #3
 8002484:	2103      	movs	r1, #3
 8002486:	2003      	movs	r0, #3
 8002488:	f000 fd2e 	bl	8002ee8 <matmul>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	38d1b717 	.word	0x38d1b717

08002498 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80024a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002530 <update_state_est_data+0x98>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002530 <update_state_est_data+0x98>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002530 <update_state_est_data+0x98>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80024f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002530 <update_state_est_data+0x98>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 2a90 	vmov	r2, s15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002530 <update_state_est_data+0x98>
 8002514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	447a0000 	.word	0x447a0000
 8002534:	00000000 	.word	0x00000000

08002538 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b095      	sub	sp, #84	; 0x54
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	e09a      	b.n	8002682 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3308      	adds	r3, #8
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	3308      	adds	r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4299      	cmp	r1, r3
 8002572:	d92b      	bls.n	80025cc <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	3362      	adds	r3, #98	; 0x62
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	4413      	add	r3, r2
 8002596:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3304      	adds	r3, #4
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80025b8:	440b      	add	r3, r1
 80025ba:	3b20      	subs	r3, #32
 80025bc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 80025be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e01d      	b.n	8002608 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	3362      	adds	r3, #98	; 0x62
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f2:	4413      	add	r3, r2
 80025f4:	3b20      	subs	r3, #32
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80025fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	4413      	add	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4299      	cmp	r1, r3
 800262e:	d916      	bls.n	800265e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800264a:	440b      	add	r3, r1
 800264c:	3b30      	subs	r3, #48	; 0x30
 800264e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002650:	f107 0214 	add.w	r2, r7, #20
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	4413      	add	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e00e      	b.n	800267c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002666:	4413      	add	r3, r2
 8002668:	3b30      	subs	r3, #48	; 0x30
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002670:	f107 0214 	add.w	r2, r7, #20
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	3301      	adds	r3, #1
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	2b02      	cmp	r3, #2
 8002686:	f77f af61 	ble.w	800254c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002696:	461a      	mov	r2, r3
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f975 	bl	8002988 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800269e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4619      	mov	r1, r3
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f96d 	bl	8002988 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	4619      	mov	r1, r3
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f965 	bl	8002988 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e049      	b.n	8002778 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002702:	f107 0214 	add.w	r2, r7, #20
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800271e:	4413      	add	r3, r2
 8002720:	3b30      	subs	r3, #48	; 0x30
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	3301      	adds	r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800273e:	4413      	add	r3, r2
 8002740:	3b20      	subs	r3, #32
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d010      	beq.n	8002772 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002758:	4413      	add	r3, r2
 800275a:	3b20      	subs	r3, #32
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	3301      	adds	r3, #1
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	2b02      	cmp	r3, #2
 800277c:	ddb2      	ble.n	80026e4 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	2103      	movs	r1, #3
 8002796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002798:	f7ff fa0e 	bl	8001bb8 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd21      	ble.n	80027e6 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	a313      	add	r3, pc, #76	; (adr r3, 8002818 <process_measurements+0x2e0>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd7b 	bl	80002c8 <__aeabi_dsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	4618      	mov	r0, r3
 80027d8:	4621      	mov	r1, r4
 80027da:	f7fe f9dd 	bl	8000b98 <__aeabi_d2f>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd0f      	ble.n	800280c <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 8002802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002808:	f7ff f97a 	bl	8001b00 <update_env>
    }
} 
 800280c:	bf00      	nop
 800280e:	374c      	adds	r7, #76	; 0x4c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	40239eb8 	.word	0x40239eb8

08002820 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b091      	sub	sp, #68	; 0x44
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b05      	cmp	r3, #5
 8002836:	d823      	bhi.n	8002880 <select_noise_models+0x60>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <select_noise_models+0x20>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859
 8002844:	08002859 	.word	0x08002859
 8002848:	08002863 	.word	0x08002863
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002877 	.word	0x08002877
 8002854:	08002859 	.word	0x08002859
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <select_noise_models+0x148>)
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <select_noise_models+0x14c>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002860:	e00e      	b.n	8002880 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <select_noise_models+0x150>)
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <select_noise_models+0x154>)
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800286a:	e009      	b.n	8002880 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <select_noise_models+0x158>)
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <select_noise_models+0x15c>)
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002874:	e004      	b.n	8002880 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <select_noise_models+0x160>)
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <select_noise_models+0x164>)
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800287e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	e01b      	b.n	80028be <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002888:	f7fd fe7e 	bl	8000588 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002960 <select_noise_models+0x140>
 8002894:	ec44 3b10 	vmov	d0, r3, r4
 8002898:	f015 fde2 	bl	8018460 <pow>
 800289c:	ec54 3b10 	vmov	r3, r4, d0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f978 	bl	8000b98 <__aeabi_d2f>
 80028a8:	4601      	mov	r1, r0
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3316      	adds	r3, #22
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	3301      	adds	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dde0      	ble.n	8002886 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80028ca:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 80028cc:	2301      	movs	r3, #1
 80028ce:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80028d0:	f107 0114 	add.w	r1, r7, #20
 80028d4:	f107 0218 	add.w	r2, r7, #24
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	2101      	movs	r1, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f9c8 	bl	8001c78 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa29 	bl	8001d48 <altitude_gradient>
 80028f6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80028fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	eef0 7ae7 	vabs.f32	s15, s15
 800290a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e01a      	b.n	800294a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f7fd fe37 	bl	8000588 <__aeabi_f2d>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002960 <select_noise_models+0x140>
 8002922:	ec44 3b10 	vmov	d0, r3, r4
 8002926:	f015 fd9b 	bl	8018460 <pow>
 800292a:	ec54 3b10 	vmov	r3, r4, d0
 800292e:	4618      	mov	r0, r3
 8002930:	4621      	mov	r1, r4
 8002932:	f7fe f931 	bl	8000b98 <__aeabi_d2f>
 8002936:	4601      	mov	r1, r0
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	33b8      	adds	r3, #184	; 0xb8
 8002942:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	3301      	adds	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	dde1      	ble.n	8002914 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	373c      	adds	r7, #60	; 0x3c
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	00000000 	.word	0x00000000
 8002964:	40000000 	.word	0x40000000
 8002968:	3c97e316 	.word	0x3c97e316
 800296c:	3fef3b64 	.word	0x3fef3b64
 8002970:	3fa01965 	.word	0x3fa01965
 8002974:	41500000 	.word	0x41500000
 8002978:	3f1e3737 	.word	0x3f1e3737
 800297c:	40ec28f6 	.word	0x40ec28f6
 8002980:	3ffa41cc 	.word	0x3ffa41cc
 8002984:	40795810 	.word	0x40795810

08002988 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e017      	b.n	80029d4 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbe3      	blt.n	80029a4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd0a      	ble.n	80029f8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e033      	b.n	8002a6c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02a      	beq.n	8002a66 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fdae 	bl	8000588 <__aeabi_f2d>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002b28 <sensor_elimination_by_stdev+0x1a0>
 8002a34:	ec44 3b10 	vmov	d0, r3, r4
 8002a38:	f015 fd12 	bl	8018460 <pow>
 8002a3c:	ec56 5b10 	vmov	r5, r6, d0
 8002a40:	69b8      	ldr	r0, [r7, #24]
 8002a42:	f7fd fda1 	bl	8000588 <__aeabi_f2d>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4631      	mov	r1, r6
 8002a52:	f7fd fc3b 	bl	80002cc <__adddf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	f7fe f89b 	bl	8000b98 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbc7      	blt.n	8002a04 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd1a      	ble.n	8002ab0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a8c:	ee16 0a90 	vmov	r0, s13
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	ec44 3b10 	vmov	d0, r3, r4
 8002a9c:	f015 fe50 	bl	8018740 <sqrt>
 8002aa0:	ec54 3b10 	vmov	r3, r4, d0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f7fe f876 	bl	8000b98 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e02f      	b.n	8002b16 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d026      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	eef0 7ae7 	vabs.f32	s15, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fd53 	bl	8000588 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	f7fd fd4e 	bl	8000588 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f7fd fbec 	bl	80002cc <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fe f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3301      	adds	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbcb      	blt.n	8002ab6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8002b1e:	bf00      	nop
 8002b20:	372c      	adds	r7, #44	; 0x2c
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40000000 	.word	0x40000000

08002b30 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002b30:	b490      	push	{r4, r7}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	1e43      	subs	r3, r0, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	0154      	lsls	r4, r2, #5
 8002b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b56:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e02b      	b.n	8002bb6 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e021      	b.n	8002ba8 <eye+0x78>
            if (i == j){
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <eye+0x58>
				A[i][j] = 1;
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fb03 f302 	mul.w	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	441a      	add	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fb03 f302 	mul.w	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbd9      	blt.n	8002b64 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbcf      	blt.n	8002b5e <eye+0x2e>
			}
        }
    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc90      	pop	{r4, r7}
 8002bc6:	4770      	bx	lr

08002bc8 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002bc8:	b4b0      	push	{r4, r5, r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	1e43      	subs	r3, r0, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	0154      	lsls	r4, r2, #5
 8002bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	68fd      	ldr	r5, [r7, #12]
 8002bf6:	1e6b      	subs	r3, r5, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0154      	lsls	r4, r2, #5
 8002c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c10:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e022      	b.n	8002c5e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e018      	b.n	8002c50 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fb03 f302 	mul.w	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fb03 f301 	mul.w	r3, r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbe2      	blt.n	8002c1e <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbd8      	blt.n	8002c18 <transpose+0x50>
		}
	}
}
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bcb0      	pop	{r4, r5, r7}
 8002c6e:	4770      	bx	lr

08002c70 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e016      	b.n	8002cb2 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbe4      	blt.n	8002c84 <vecadd+0x14>
	}
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e016      	b.n	8002d08 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbe4      	blt.n	8002cda <vecsub+0x14>
	}
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002d1c:	b4f0      	push	{r4, r5, r6, r7}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	1e43      	subs	r3, r0, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	68bd      	ldr	r5, [r7, #8]
 8002d4a:	1e6b      	subs	r3, r5, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	462b      	mov	r3, r5
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0154      	lsls	r4, r2, #5
 8002d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d64:	014b      	lsls	r3, r1, #5
 8002d66:	68be      	ldr	r6, [r7, #8]
 8002d68:	1e73      	subs	r3, r6, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4633      	mov	r3, r6
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e032      	b.n	8002df0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	e028      	b.n	8002de2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002d90:	4602      	mov	r2, r0
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fb03 f302 	mul.w	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	462a      	mov	r2, r5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	441a      	add	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fb03 f302 	mul.w	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	441a      	add	r2, r3
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	3301      	adds	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbd2      	blt.n	8002d90 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbc8      	blt.n	8002d8a <matadd+0x6e>
        }
    }
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8002e00:	4770      	bx	lr

08002e02 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002e02:	b4f0      	push	{r4, r5, r6, r7}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	1e43      	subs	r3, r0, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0154      	lsls	r4, r2, #5
 8002e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e2c:	014b      	lsls	r3, r1, #5
 8002e2e:	68bd      	ldr	r5, [r7, #8]
 8002e30:	1e6b      	subs	r3, r5, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	462b      	mov	r3, r5
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	68be      	ldr	r6, [r7, #8]
 8002e4e:	1e73      	subs	r3, r6, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	4633      	mov	r3, r6
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0154      	lsls	r4, r2, #5
 8002e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e68:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e032      	b.n	8002ed6 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e028      	b.n	8002ec8 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fb03 f302 	mul.w	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	441a      	add	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fb03 f302 	mul.w	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fb03 f302 	mul.w	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	441a      	add	r2, r3
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbd2      	blt.n	8002e76 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbc8      	blt.n	8002e70 <matsub+0x6e>
        }
    }
}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ee6:	4770      	bx	lr

08002ee8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08d      	sub	sp, #52	; 0x34
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6178      	str	r0, [r7, #20]
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	60fa      	str	r2, [r7, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	693e      	ldr	r6, [r7, #16]
 8002ef8:	1e73      	subs	r3, r6, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	4633      	mov	r3, r6
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	0154      	lsls	r4, r2, #5
 8002f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f34:	014b      	lsls	r3, r1, #5
 8002f36:	68fd      	ldr	r5, [r7, #12]
 8002f38:	1e6b      	subs	r3, r5, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	0154      	lsls	r4, r2, #5
 8002f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f52:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002f54:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f6c:	f014 fe0d 	bl	8017b8a <memset>
	}
	for(int i = 0; i < m; i++){
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e04a      	b.n	800300c <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	e040      	b.n	8002ffe <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	e036      	b.n	8002ff0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002f82:	4632      	mov	r2, r6
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fb03 f302 	mul.w	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	441a      	add	r2, r3
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	fb03 f302 	mul.w	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	fb03 f302 	mul.w	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fb03 f302 	mul.w	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fda:	441a      	add	r2, r3
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	3301      	adds	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbc4      	blt.n	8002f82 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbba      	blt.n	8002f7c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbb0      	blt.n	8002f76 <matmul+0x8e>
            }
        }
    }
}
 8003014:	bf00      	nop
 8003016:	3734      	adds	r7, #52	; 0x34
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	68bd      	ldr	r5, [r7, #8]
 800302c:	1e6b      	subs	r3, r5, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	462b      	mov	r3, r5
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003046:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003048:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f014 fd96 	bl	8017b8a <memset>
	}
	for(int i = 0; i < m; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e02e      	b.n	80030c2 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e024      	b.n	80030b4 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800306a:	462a      	mov	r2, r5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fb03 f302 	mul.w	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	441a      	add	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	4413      	add	r3, r2
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbd6      	blt.n	800306a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbcc      	blt.n	8003064 <matvecprod+0x48>
        }
    }
}
 80030ca:	bf00      	nop
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}

080030d2 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	; 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e01d      	b.n	8003122 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d102      	bne.n	80030fc <lower_triangular_inverse+0x2a>
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e076      	b.n	80031ea <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbdd      	blt.n	80030e6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e052      	b.n	80031e0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e041      	b.n	80031c8 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e01b      	b.n	800318c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	ed97 7a03 	vldr	s14, [r7, #12]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	429a      	cmp	r2, r3
 8003192:	dbdf      	blt.n	8003154 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb1 7a67 	vneg.f32	s14, s15
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	3301      	adds	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbb9      	blt.n	8003144 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dba8      	blt.n	800313a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	372c      	adds	r7, #44	; 0x2c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80031f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031fc:	b08b      	sub	sp, #44	; 0x2c
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	68fe      	ldr	r6, [r7, #12]
 8003208:	1e73      	subs	r3, r6, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4633      	mov	r3, r6
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0154      	lsls	r4, r2, #5
 800321e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003222:	014b      	lsls	r3, r1, #5
 8003224:	68fd      	ldr	r5, [r7, #12]
 8003226:	1e6b      	subs	r3, r5, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	462b      	mov	r3, r5
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	0154      	lsls	r4, r2, #5
 800323c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003240:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f014 fc9a 	bl	8017b8a <memset>
    for (int i = 0; i < n; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e09f      	b.n	800339c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e093      	b.n	800338a <cholesky+0x192>
            float s = 0;
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e022      	b.n	80032b4 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800326e:	462a      	mov	r2, r5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fb03 f302 	mul.w	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	441a      	add	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	462a      	mov	r2, r5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fb03 f302 	mul.w	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	441a      	add	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbd8      	blt.n	800326e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d116      	bne.n	80032f2 <cholesky+0xfa>
 80032c4:	4632      	mov	r2, r6
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	fb03 f302 	mul.w	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	441a      	add	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	f015 fbe8 	bl	8018abc <sqrtf>
 80032ec:	ee10 1a10 	vmov	r1, s0
 80032f0:	e03d      	b.n	800336e <cholesky+0x176>
 80032f2:	462a      	mov	r2, r5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fb03 f302 	mul.w	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	441a      	add	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f93d 	bl	8000588 <__aeabi_f2d>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	4925      	ldr	r1, [pc, #148]	; (80033b0 <cholesky+0x1b8>)
 800331c:	f7fd fab6 	bl	800088c <__aeabi_ddiv>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4698      	mov	r8, r3
 8003326:	46a1      	mov	r9, r4
 8003328:	4632      	mov	r2, r6
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fb03 f302 	mul.w	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	441a      	add	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a08 	vldr	s15, [r7, #32]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ee17 0a90 	vmov	r0, s15
 800334c:	f7fd f91c 	bl	8000588 <__aeabi_f2d>
 8003350:	4603      	mov	r3, r0
 8003352:	460c      	mov	r4, r1
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	4640      	mov	r0, r8
 800335a:	4649      	mov	r1, r9
 800335c:	f7fd f96c 	bl	8000638 <__aeabi_dmul>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	f7fd fc16 	bl	8000b98 <__aeabi_d2f>
 800336c:	4601      	mov	r1, r0
 800336e:	462a      	mov	r2, r5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fb03 f302 	mul.w	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	441a      	add	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f6ff af66 	blt.w	8003262 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f6ff af5b 	blt.w	800325c <cholesky+0x64>
        }
}
 80033a6:	bf00      	nop
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b0:	3ff00000 	.word	0x3ff00000

080033b4 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	b090      	sub	sp, #64	; 0x40
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	ed87 0a00 	vstr	s0, [r7]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0154      	lsls	r4, r2, #5
 80033dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e0:	014b      	lsls	r3, r1, #5
 80033e2:	68fd      	ldr	r5, [r7, #12]
 80033e4:	1e6b      	subs	r3, r5, #1
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	462b      	mov	r3, r5
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033fe:	014b      	lsls	r3, r1, #5
 8003400:	466b      	mov	r3, sp
 8003402:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	68fe      	ldr	r6, [r7, #12]
 8003408:	1e43      	subs	r3, r0, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0154      	lsls	r4, r2, #5
 800341e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003422:	014b      	lsls	r3, r1, #5
 8003424:	4603      	mov	r3, r0
 8003426:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800342a:	1e73      	subs	r3, r6, #1
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	4633      	mov	r3, r6
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	fb03 fe02 	mul.w	lr, r3, r2
 8003440:	fb01 fc04 	mul.w	ip, r1, r4
 8003444:	44f4      	add	ip, lr
 8003446:	fba1 3403 	umull	r3, r4, r1, r3
 800344a:	eb0c 0204 	add.w	r2, ip, r4
 800344e:	4614      	mov	r4, r2
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	0162      	lsls	r2, r4, #5
 800345a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4633      	mov	r3, r6
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	fb03 fe02 	mul.w	lr, r3, r2
 8003472:	fb01 fc04 	mul.w	ip, r1, r4
 8003476:	44f4      	add	ip, lr
 8003478:	fba1 3403 	umull	r3, r4, r1, r3
 800347c:	eb0c 0204 	add.w	r2, ip, r4
 8003480:	4614      	mov	r4, r2
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	0162      	lsls	r2, r4, #5
 800348c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	4603      	mov	r3, r0
 8003494:	4632      	mov	r2, r6
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3303      	adds	r3, #3
 800349e:	3307      	adds	r3, #7
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	ebad 0d03 	sub.w	sp, sp, r3
 80034a8:	466b      	mov	r3, sp
 80034aa:	3303      	adds	r3, #3
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	f014 fb57 	bl	8017b74 <memcpy>
    for (int i = 0; i < n; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	e022      	b.n	8003512 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 80034cc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d4:	fb01 f103 	mul.w	r1, r1, r3
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 6a00 	vldr	s13, [r7]
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	fb01 f103 	mul.w	r1, r1, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	440b      	add	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	3301      	adds	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	dbd8      	blt.n	80034cc <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	68fe      	ldr	r6, [r7, #12]
 800351e:	466b      	mov	r3, sp
 8003520:	469a      	mov	sl, r3
 8003522:	1e43      	subs	r3, r0, #1
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0154      	lsls	r4, r2, #5
 8003538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353c:	014b      	lsls	r3, r1, #5
 800353e:	4603      	mov	r3, r0
 8003540:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003544:	1e73      	subs	r3, r6, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4633      	mov	r3, r6
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	fb03 fe02 	mul.w	lr, r3, r2
 800355a:	fb01 fc04 	mul.w	ip, r1, r4
 800355e:	44f4      	add	ip, lr
 8003560:	fba1 3403 	umull	r3, r4, r1, r3
 8003564:	eb0c 0204 	add.w	r2, ip, r4
 8003568:	4614      	mov	r4, r2
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	0162      	lsls	r2, r4, #5
 8003574:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4633      	mov	r3, r6
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	fb03 fe02 	mul.w	lr, r3, r2
 800358c:	fb01 fc04 	mul.w	ip, r1, r4
 8003590:	44f4      	add	ip, lr
 8003592:	fba1 3403 	umull	r3, r4, r1, r3
 8003596:	eb0c 0204 	add.w	r2, ip, r4
 800359a:	4614      	mov	r4, r2
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	0162      	lsls	r2, r4, #5
 80035a6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	4603      	mov	r3, r0
 80035ae:	4632      	mov	r2, r6
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3303      	adds	r3, #3
 80035b8:	3307      	adds	r3, #7
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	ebad 0d03 	sub.w	sp, sp, r3
 80035c2:	466b      	mov	r3, sp
 80035c4:	3303      	adds	r3, #3
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fe10 	bl	80031f8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd78 	bl	80030d2 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f014 faca 	bl	8017b8a <memset>
    for(int i = 0; i < n; i++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fa:	e04e      	b.n	800369a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	e044      	b.n	800368c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	4293      	cmp	r3, r2
 8003608:	bfb8      	it	lt
 800360a:	4613      	movlt	r3, r2
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e036      	b.n	800367e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003610:	462a      	mov	r2, r5
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	441a      	add	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003630:	fb01 f103 	mul.w	r1, r1, r3
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	440b      	add	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003648:	fb01 f103 	mul.w	r1, r1, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	440b      	add	r3, r1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	462a      	mov	r2, r5
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	fb03 f302 	mul.w	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	441a      	add	r2, r3
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	3301      	adds	r3, #1
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	dbc4      	blt.n	8003610 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbb6      	blt.n	8003602 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3301      	adds	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbac      	blt.n	80035fc <cholesky_inverse+0x248>
 80036a2:	46d5      	mov	sp, sl
 80036a4:	46cd      	mov	sp, r9
            }
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	3740      	adds	r7, #64	; 0x40
 80036aa:	46bd      	mov	sp, r7
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036b0 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	210a      	movs	r1, #10
 80036c2:	4618      	mov	r0, r3
 80036c4:	f00f ff3c 	bl	8013540 <osMutexAcquire>
 80036c8:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <AcquireMutex+0x2a>
		custom_mutex->counter++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
	}

	return status;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f00f ff83 	bl	80135fc <osMutexRelease>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex, const void* global_data, const void* local_data, int32_t size){
 8003700:	b580      	push	{r7, lr}
 8003702:	b0a0      	sub	sp, #128	; 0x80
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	2264      	movs	r2, #100	; 0x64
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f014 fa37 	bl	8017b8a <memset>
	uint32_t counter = custom_mutex->counter;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003728:	2300      	movs	r3, #0
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	e01b      	b.n	8003766 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f014 fa1c 	bl	8017b74 <memcpy>
		if(custom_mutex->counter == counter){
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <ReadMutex+0x5a>
			memcpy(local_data, &buffer[0], size);
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f014 fa10 	bl	8017b74 <memcpy>
			status = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003758:	e008      	b.n	800376c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003762:	3301      	adds	r3, #1
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	2b04      	cmp	r3, #4
 800376a:	dde0      	ble.n	800372e <ReadMutex+0x2e>
	}
	return status;
 800376c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800376e:	4618      	mov	r0, r3
 8003770:	3780      	adds	r7, #128	; 0x80
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 5; i < 5; i++){
 80037a8:	2305      	movs	r3, #5
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e07b      	b.n	80038a6 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80038c0 <ReadMutexStateEst+0x148>
 80037d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80038c4 <ReadMutexStateEst+0x14c>
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	429a      	cmp	r2, r3
 8003804:	d149      	bne.n	800389a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	6939      	ldr	r1, [r7, #16]
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4403      	add	r3, r0
 800382c:	3304      	adds	r3, #4
 800382e:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3308      	adds	r3, #8
 8003844:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe9d 	bl	8000588 <__aeabi_f2d>
 800384e:	a31a      	add	r3, pc, #104	; (adr r3, 80038b8 <ReadMutexStateEst+0x140>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	4619      	mov	r1, r3
 800385e:	4622      	mov	r2, r4
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1e5c      	subs	r4, r3, #1
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	f7fd f996 	bl	8000b98 <__aeabi_d2f>
 800386c:	4601      	mov	r1, r0
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1b1b      	subs	r3, r3, r4
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	6a39      	ldr	r1, [r7, #32]
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	333c      	adds	r3, #60	; 0x3c
 8003892:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003898:	e008      	b.n	80038ac <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 5; i < 5; i++){
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3301      	adds	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	dd80      	ble.n	80037ae <ReadMutexStateEst+0x36>
	}


	return status;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3734      	adds	r7, #52	; 0x34
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f
 80038bc:	40239eb8 	.word	0x40239eb8
 80038c0:	44800000 	.word	0x44800000
 80038c4:	42c80000 	.word	0x42c80000

080038c8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b0b3      	sub	sp, #204	; 0xcc
 80038cc:	af06      	add	r7, sp, #24
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
 80038d6:	4613      	mov	r3, r2
 80038d8:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	2296      	movs	r2, #150	; 0x96
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f014 f951 	bl	8017b8a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	7aba      	ldrb	r2, [r7, #10]
 80038ec:	f107 0010 	add.w	r0, r7, #16
 80038f0:	9202      	str	r2, [sp, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <logSensor+0x138>)
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	f014 fa05 	bl	8017d0c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003902:	7abb      	ldrb	r3, [r7, #10]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <logSensor+0x46>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d01d      	beq.n	8003948 <logSensor+0x80>
 800390c:	e055      	b.n	80039ba <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc79 	bl	8000210 <strlen>
 800391e:	4602      	mov	r2, r0
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	1898      	adds	r0, r3, r2
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <logSensor+0x13c>)
 8003940:	2196      	movs	r1, #150	; 0x96
 8003942:	f014 f9e3 	bl	8017d0c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003946:	e04e      	b.n	80039e6 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fc5c 	bl	8000210 <strlen>
 8003958:	4602      	mov	r2, r0
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003968:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003972:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003978:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800397c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800397e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003986:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800398c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003990:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800399a:	461e      	mov	r6, r3
 800399c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	9604      	str	r6, [sp, #16]
 80039a6:	9503      	str	r5, [sp, #12]
 80039a8:	9402      	str	r4, [sp, #8]
 80039aa:	9101      	str	r1, [sp, #4]
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	4663      	mov	r3, ip
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <logSensor+0x140>)
 80039b2:	2196      	movs	r1, #150	; 0x96
 80039b4:	f014 f9aa 	bl	8017d0c <sniprintf>
	}
		break;
 80039b8:	e015      	b.n	80039e6 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc26 	bl	8000210 <strlen>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4413      	add	r3, r2
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <logSensor+0x144>)
 80039ce:	461d      	mov	r5, r3
 80039d0:	4614      	mov	r4, r2
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	6028      	str	r0, [r5, #0]
 80039d6:	6069      	str	r1, [r5, #4]
 80039d8:	60aa      	str	r2, [r5, #8]
 80039da:	60eb      	str	r3, [r5, #12]
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	6128      	str	r0, [r5, #16]
 80039e0:	7923      	ldrb	r3, [r4, #4]
 80039e2:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80039e4:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <logSensor+0x148>)
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f107 0110 	add.w	r1, r7, #16
 80039ee:	2300      	movs	r3, #0
 80039f0:	2200      	movs	r2, #0
 80039f2:	f010 f86b 	bl	8013acc <osMessageQueuePut>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	37b4      	adds	r7, #180	; 0xb4
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a00:	0801a4b4 	.word	0x0801a4b4
 8003a04:	0801a4c4 	.word	0x0801a4c4
 8003a08:	0801a4d4 	.word	0x0801a4d4
 8003a0c:	0801a4f4 	.word	0x0801a4f4
 8003a10:	2001ccfc 	.word	0x2001ccfc

08003a14 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ac      	sub	sp, #176	; 0xb0
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	2296      	movs	r2, #150	; 0x96
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f014 f8ad 	bl	8017b8a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 8003a30:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8003a32:	f107 0010 	add.w	r0, r7, #16
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <logRocketState+0x4c>)
 8003a40:	2196      	movs	r1, #150	; 0x96
 8003a42:	f014 f963 	bl	8017d0c <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <logRocketState+0x50>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f107 0110 	add.w	r1, r7, #16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2200      	movs	r2, #0
 8003a52:	f010 f83b 	bl	8013acc <osMessageQueuePut>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	37a8      	adds	r7, #168	; 0xa8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0801a50c 	.word	0x0801a50c
 8003a64:	2001ccfc 	.word	0x2001ccfc

08003a68 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8003a68:	b084      	sub	sp, #16
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b0ac      	sub	sp, #176	; 0xb0
 8003a6e:	af04      	add	r7, sp, #16
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	2296      	movs	r2, #150	; 0x96
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f014 f881 	bl	8017b8a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, ESTIMATOR_VAR,
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a90:	f107 0008 	add.w	r0, r7, #8
 8003a94:	9202      	str	r2, [sp, #8]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2303      	movs	r3, #3
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <logEstimatorVar+0x60>)
 8003aa0:	2196      	movs	r1, #150	; 0x96
 8003aa2:	f014 f933 	bl	8017d0c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <logEstimatorVar+0x64>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0108 	add.w	r1, r7, #8
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f010 f80b 	bl	8013acc <osMessageQueuePut>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	37a0      	adds	r7, #160	; 0xa0
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac2:	b004      	add	sp, #16
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0801a518 	.word	0x0801a518
 8003acc:	2001ccfc 	.word	0x2001ccfc

08003ad0 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0ae      	sub	sp, #184	; 0xb8
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	2296      	movs	r2, #150	; 0x96
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f014 f84f 	bl	8017b8a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8003aec:	f107 0010 	add.w	r0, r7, #16
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2304      	movs	r3, #4
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <logControllerOutput+0x54>)
 8003b04:	2196      	movs	r1, #150	; 0x96
 8003b06:	f014 f901 	bl	8017d0c <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <logControllerOutput+0x58>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f107 0110 	add.w	r1, r7, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	2200      	movs	r2, #0
 8003b16:	f00f ffd9 	bl	8013acc <osMessageQueuePut>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	37a8      	adds	r7, #168	; 0xa8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0801a528 	.word	0x0801a528
 8003b28:	2001ccfc 	.word	0x2001ccfc

08003b2c <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0ae      	sub	sp, #184	; 0xb8
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	2296      	movs	r2, #150	; 0x96
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f014 f822 	bl	8017b8a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 8003b46:	f107 0010 	add.w	r0, r7, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	2305      	movs	r3, #5
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <logMotor+0x50>)
 8003b5a:	2196      	movs	r1, #150	; 0x96
 8003b5c:	f014 f8d6 	bl	8017d0c <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <logMotor+0x54>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	f107 0110 	add.w	r1, r7, #16
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f00f ffae 	bl	8013acc <osMessageQueuePut>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	37a8      	adds	r7, #168	; 0xa8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0801a518 	.word	0x0801a518
 8003b80:	2001ccfc 	.word	0x2001ccfc

08003b84 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003b84:	b40f      	push	{r0, r1, r2, r3}
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8003b90:	79fb      	ldrb	r3, [r7, #7]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	b004      	add	sp, #16
 8003b9e:	4770      	bx	lr

08003ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b0a5      	sub	sp, #148	; 0x94
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ba6:	f001 fee6 	bl	8005976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003baa:	f000 f98b 	bl	8003ec4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <main+0x23c>)
 8003bb0:	4a8b      	ldr	r2, [pc, #556]	; (8003de0 <main+0x240>)
 8003bb2:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003bb4:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <main+0x23c>)
 8003bb6:	4a8b      	ldr	r2, [pc, #556]	; (8003de4 <main+0x244>)
 8003bb8:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003bba:	488b      	ldr	r0, [pc, #556]	; (8003de8 <main+0x248>)
 8003bbc:	f7fd ff64 	bl	8001a88 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8003bc0:	488a      	ldr	r0, [pc, #552]	; (8003dec <main+0x24c>)
 8003bc2:	f7fe fa1f 	bl	8002004 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc6:	f000 fb67 	bl	8004298 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bca:	f000 fb3f 	bl	800424c <MX_DMA_Init>
  MX_SPI3_Init();
 8003bce:	f000 fa9d 	bl	800410c <MX_SPI3_Init>
  MX_SPI1_Init();
 8003bd2:	f000 fa2b 	bl	800402c <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8003bd6:	f000 fa09 	bl	8003fec <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8003bda:	f000 fa5f 	bl	800409c <MX_SPI2_Init>
  MX_FATFS_Init();
 8003bde:	f00a fc81 	bl	800e4e4 <MX_FATFS_Init>
  MX_UART7_Init();
 8003be2:	f000 fafb 	bl	80041dc <MX_UART7_Init>
  MX_UART4_Init();
 8003be6:	f000 fac9 	bl	800417c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003bea:	f013 fa2f 	bl	801704c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003bee:	f00f fa3b 	bl	8013068 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	; (8003df0 <main+0x250>)
 8003bf4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8003bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8003bfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00f fc02 	bl	801340c <osMutexNew>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <main+0x254>)
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <main+0x258>)
 8003c10:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003c1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00f fbf4 	bl	801340c <osMutexNew>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <main+0x25c>)
 8003c28:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003c2a:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <main+0x260>)
 8003c2c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003c36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f00f fbe6 	bl	801340c <osMutexNew>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b70      	ldr	r3, [pc, #448]	; (8003e04 <main+0x264>)
 8003c44:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <main+0x268>)
 8003c48:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00f fbd8 	bl	801340c <osMutexNew>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <main+0x26c>)
 8003c60:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <main+0x270>)
 8003c64:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00f fbca 	bl	801340c <osMutexNew>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <main+0x274>)
 8003c7c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 8003c7e:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <main+0x278>)
 8003c80:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00f fbbc 	bl	801340c <osMutexNew>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <main+0x27c>)
 8003c98:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003c9a:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <main+0x280>)
 8003c9c:	f107 0420 	add.w	r4, r7, #32
 8003ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003ca6:	f107 0320 	add.w	r3, r7, #32
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00f fbae 	bl	801340c <osMutexNew>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <main+0x284>)
 8003cb4:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <main+0x288>)
 8003cb8:	f107 0410 	add.w	r4, r7, #16
 8003cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f00f fba0 	bl	801340c <osMutexNew>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <main+0x28c>)
 8003cd0:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <main+0x290>)
 8003cd4:	463c      	mov	r4, r7
 8003cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f00f fb94 	bl	801340c <osMutexNew>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <main+0x294>)
 8003ce8:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 8003cea:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <main+0x254>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <main+0x298>)
 8003cf0:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8003cf2:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <main+0x25c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <main+0x29c>)
 8003cf8:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8003cfa:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <main+0x264>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <main+0x2a0>)
 8003d00:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <main+0x284>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <main+0x2a4>)
 8003d08:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <main+0x27c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <main+0x2a8>)
 8003d10:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <main+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <main+0x2ac>)
 8003d18:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <main+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <main+0x2b0>)
 8003d20:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003d22:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <main+0x28c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <main+0x2b4>)
 8003d28:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8003d2a:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <main+0x294>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <main+0x2b8>)
 8003d30:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <main+0x24c>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8003d38:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <main+0x24c>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <main+0x2bc>)
 8003d40:	229b      	movs	r2, #155	; 0x9b
 8003d42:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2196      	movs	r1, #150	; 0x96
 8003d48:	2080      	movs	r0, #128	; 0x80
 8003d4a:	f00f fe39 	bl	80139c0 <osMessageQueueNew>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <main+0x2c0>)
 8003d52:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d54:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <main+0x2c4>)
 8003d56:	2100      	movs	r1, #0
 8003d58:	4843      	ldr	r0, [pc, #268]	; (8003e68 <main+0x2c8>)
 8003d5a:	f00f fa43 	bl	80131e4 <osThreadNew>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <main+0x2cc>)
 8003d62:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <main+0x2d0>)
 8003d66:	2100      	movs	r1, #0
 8003d68:	4842      	ldr	r0, [pc, #264]	; (8003e74 <main+0x2d4>)
 8003d6a:	f00f fa3b 	bl	80131e4 <osThreadNew>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <main+0x2d8>)
 8003d72:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003d74:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <main+0x2dc>)
 8003d76:	2100      	movs	r1, #0
 8003d78:	4841      	ldr	r0, [pc, #260]	; (8003e80 <main+0x2e0>)
 8003d7a:	f00f fa33 	bl	80131e4 <osThreadNew>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <main+0x2e4>)
 8003d82:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <main+0x2e8>)
 8003d86:	2100      	movs	r1, #0
 8003d88:	4840      	ldr	r0, [pc, #256]	; (8003e8c <main+0x2ec>)
 8003d8a:	f00f fa2b 	bl	80131e4 <osThreadNew>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <main+0x2f0>)
 8003d92:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003d94:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <main+0x2f4>)
 8003d96:	2100      	movs	r1, #0
 8003d98:	483f      	ldr	r0, [pc, #252]	; (8003e98 <main+0x2f8>)
 8003d9a:	f00f fa23 	bl	80131e4 <osThreadNew>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <main+0x2fc>)
 8003da2:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003da4:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <main+0x300>)
 8003da6:	2100      	movs	r1, #0
 8003da8:	483e      	ldr	r0, [pc, #248]	; (8003ea4 <main+0x304>)
 8003daa:	f00f fa1b 	bl	80131e4 <osThreadNew>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <main+0x308>)
 8003db2:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8003db4:	4a3d      	ldr	r2, [pc, #244]	; (8003eac <main+0x30c>)
 8003db6:	2100      	movs	r1, #0
 8003db8:	483d      	ldr	r0, [pc, #244]	; (8003eb0 <main+0x310>)
 8003dba:	f00f fa13 	bl	80131e4 <osThreadNew>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <main+0x314>)
 8003dc2:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <main+0x318>)
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	483c      	ldr	r0, [pc, #240]	; (8003ebc <main+0x31c>)
 8003dca:	f00f fa0b 	bl	80131e4 <osThreadNew>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <main+0x320>)
 8003dd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dd4:	f00f f99e 	bl	8013114 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <main+0x238>
 8003dda:	bf00      	nop
 8003ddc:	e0042000 	.word	0xe0042000
 8003de0:	07e01bff 	.word	0x07e01bff
 8003de4:	00070003 	.word	0x00070003
 8003de8:	200002ac 	.word	0x200002ac
 8003dec:	200002bc 	.word	0x200002bc
 8003df0:	0801a5c8 	.word	0x0801a5c8
 8003df4:	20010aec 	.word	0x20010aec
 8003df8:	0801a5e8 	.word	0x0801a5e8
 8003dfc:	2001ed00 	.word	0x2001ed00
 8003e00:	0801a608 	.word	0x0801a608
 8003e04:	20008b60 	.word	0x20008b60
 8003e08:	0801a630 	.word	0x0801a630
 8003e0c:	20010ad8 	.word	0x20010ad8
 8003e10:	0801a658 	.word	0x0801a658
 8003e14:	20026cf8 	.word	0x20026cf8
 8003e18:	0801a678 	.word	0x0801a678
 8003e1c:	20010ae8 	.word	0x20010ae8
 8003e20:	0801a6a0 	.word	0x0801a6a0
 8003e24:	20010adc 	.word	0x20010adc
 8003e28:	0801a6c4 	.word	0x0801a6c4
 8003e2c:	20008b5c 	.word	0x20008b5c
 8003e30:	0801a6e8 	.word	0x0801a6e8
 8003e34:	20008b64 	.word	0x20008b64
 8003e38:	20010a70 	.word	0x20010a70
 8003e3c:	20026d00 	.word	0x20026d00
 8003e40:	20010ae0 	.word	0x20010ae0
 8003e44:	20008b70 	.word	0x20008b70
 8003e48:	20008984 	.word	0x20008984
 8003e4c:	20010a60 	.word	0x20010a60
 8003e50:	20010af0 	.word	0x20010af0
 8003e54:	20008ad0 	.word	0x20008ad0
 8003e58:	20008b68 	.word	0x20008b68
 8003e5c:	20014b54 	.word	0x20014b54
 8003e60:	2001ccfc 	.word	0x2001ccfc
 8003e64:	0801aa1c 	.word	0x0801aa1c
 8003e68:	08004375 	.word	0x08004375
 8003e6c:	20008980 	.word	0x20008980
 8003e70:	0801aa40 	.word	0x0801aa40
 8003e74:	080054a5 	.word	0x080054a5
 8003e78:	20010a6c 	.word	0x20010a6c
 8003e7c:	0801aa64 	.word	0x0801aa64
 8003e80:	08004b35 	.word	0x08004b35
 8003e84:	20026cfc 	.word	0x20026cfc
 8003e88:	0801aa88 	.word	0x0801aa88
 8003e8c:	080052b1 	.word	0x080052b1
 8003e90:	20008b78 	.word	0x20008b78
 8003e94:	0801aaac 	.word	0x0801aaac
 8003e98:	08004f1d 	.word	0x08004f1d
 8003e9c:	20008a70 	.word	0x20008a70
 8003ea0:	0801aad0 	.word	0x0801aad0
 8003ea4:	08004d7d 	.word	0x08004d7d
 8003ea8:	20010a68 	.word	0x20010a68
 8003eac:	0801aaf4 	.word	0x0801aaf4
 8003eb0:	08004c9d 	.word	0x08004c9d
 8003eb4:	20010a78 	.word	0x20010a78
 8003eb8:	0801ab18 	.word	0x0801ab18
 8003ebc:	08005759 	.word	0x08005759
 8003ec0:	2001ac14 	.word	0x2001ac14

08003ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b0b4      	sub	sp, #208	; 0xd0
 8003ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ece:	2230      	movs	r2, #48	; 0x30
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f013 fe59 	bl	8017b8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	2284      	movs	r2, #132	; 0x84
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f013 fe4a 	bl	8017b8a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f46:	2304      	movs	r3, #4
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f4c:	23a8      	movs	r3, #168	; 0xa8
 8003f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f52:	2302      	movs	r3, #2
 8003f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f58:	2307      	movs	r3, #7
 8003f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fd78 	bl	8007a58 <HAL_RCC_OscConfig>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f6e:	f000 fa1d 	bl	80043ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f72:	230f      	movs	r3, #15
 8003f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f98:	2105      	movs	r1, #5
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 f800 	bl	8007fa0 <HAL_RCC_ClockConfig>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003fa6:	f000 fa01 	bl	80043ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <SystemClock_Config+0x124>)
 8003fac:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 fa14 	bl	80083f4 <HAL_RCCEx_PeriphCLKConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8003fd2:	f000 f9eb 	bl	80043ac <Error_Handler>
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	37d0      	adds	r7, #208	; 0xd0
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	00a01200 	.word	0x00a01200

08003fec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <MX_SDMMC1_SD_Init+0x3c>)
 8003ff4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004004:	2200      	movs	r2, #0
 8004006:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004016:	2200      	movs	r2, #0
 8004018:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	20008ad8 	.word	0x20008ad8
 8004028:	40012c00 	.word	0x40012c00

0800402c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <MX_SPI1_Init+0x68>)
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <MX_SPI1_Init+0x6c>)
 8004034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <MX_SPI1_Init+0x68>)
 8004038:	2200      	movs	r2, #0
 800403a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <MX_SPI1_Init+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <MX_SPI1_Init+0x68>)
 8004044:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <MX_SPI1_Init+0x68>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <MX_SPI1_Init+0x68>)
 8004052:	2200      	movs	r2, #0
 8004054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <MX_SPI1_Init+0x68>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <MX_SPI1_Init+0x68>)
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_SPI1_Init+0x68>)
 8004064:	2200      	movs	r2, #0
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <MX_SPI1_Init+0x68>)
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_SPI1_Init+0x68>)
 8004070:	2207      	movs	r2, #7
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <MX_SPI1_Init+0x68>)
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_SPI1_Init+0x68>)
 800407c:	2200      	movs	r2, #0
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <MX_SPI1_Init+0x68>)
 8004082:	f006 f863 	bl	800a14c <HAL_SPI_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800408c:	f000 f98e 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2001cc98 	.word	0x2001cc98
 8004098:	40013000 	.word	0x40013000

0800409c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <MX_SPI2_Init+0x68>)
 80040a2:	4a19      	ldr	r2, [pc, #100]	; (8004108 <MX_SPI2_Init+0x6c>)
 80040a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <MX_SPI2_Init+0x68>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <MX_SPI2_Init+0x68>)
 80040b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <MX_SPI2_Init+0x68>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <MX_SPI2_Init+0x68>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <MX_SPI2_Init+0x68>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <MX_SPI2_Init+0x68>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <MX_SPI2_Init+0x68>)
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <MX_SPI2_Init+0x68>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <MX_SPI2_Init+0x68>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <MX_SPI2_Init+0x68>)
 80040f2:	f006 f82b 	bl	800a14c <HAL_SPI_Init>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80040fc:	f000 f956 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2000898c 	.word	0x2000898c
 8004108:	40003800 	.word	0x40003800

0800410c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <MX_SPI3_Init+0x68>)
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <MX_SPI3_Init+0x6c>)
 8004114:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <MX_SPI3_Init+0x68>)
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <MX_SPI3_Init+0x68>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <MX_SPI3_Init+0x68>)
 8004124:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004128:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <MX_SPI3_Init+0x68>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <MX_SPI3_Init+0x68>)
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <MX_SPI3_Init+0x68>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <MX_SPI3_Init+0x68>)
 800413e:	2200      	movs	r2, #0
 8004140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <MX_SPI3_Init+0x68>)
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <MX_SPI3_Init+0x68>)
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <MX_SPI3_Init+0x68>)
 8004150:	2207      	movs	r2, #7
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <MX_SPI3_Init+0x68>)
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <MX_SPI3_Init+0x68>)
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004160:	4804      	ldr	r0, [pc, #16]	; (8004174 <MX_SPI3_Init+0x68>)
 8004162:	f005 fff3 	bl	800a14c <HAL_SPI_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800416c:	f000 f91e 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200109fc 	.word	0x200109fc
 8004178:	40003c00 	.word	0x40003c00

0800417c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <MX_UART4_Init+0x58>)
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <MX_UART4_Init+0x5c>)
 8004184:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <MX_UART4_Init+0x58>)
 8004188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800418c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <MX_UART4_Init+0x58>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <MX_UART4_Init+0x58>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <MX_UART4_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <MX_UART4_Init+0x58>)
 80041a2:	220c      	movs	r2, #12
 80041a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <MX_UART4_Init+0x58>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <MX_UART4_Init+0x58>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <MX_UART4_Init+0x58>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <MX_UART4_Init+0x58>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <MX_UART4_Init+0x58>)
 80041c0:	f007 f87c 	bl	800b2bc <HAL_UART_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80041ca:	f000 f8ef 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2001cc18 	.word	0x2001cc18
 80041d8:	40004c00 	.word	0x40004c00

080041dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <MX_UART7_Init+0x68>)
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <MX_UART7_Init+0x6c>)
 80041e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <MX_UART7_Init+0x68>)
 80041e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <MX_UART7_Init+0x68>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <MX_UART7_Init+0x68>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <MX_UART7_Init+0x68>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <MX_UART7_Init+0x68>)
 8004202:	220c      	movs	r2, #12
 8004204:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <MX_UART7_Init+0x68>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800420c:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <MX_UART7_Init+0x68>)
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <MX_UART7_Init+0x68>)
 8004214:	2200      	movs	r2, #0
 8004216:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <MX_UART7_Init+0x68>)
 800421a:	2230      	movs	r2, #48	; 0x30
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <MX_UART7_Init+0x68>)
 8004220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <MX_UART7_Init+0x68>)
 8004228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800422e:	4805      	ldr	r0, [pc, #20]	; (8004244 <MX_UART7_Init+0x68>)
 8004230:	f007 f844 	bl	800b2bc <HAL_UART_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_UART7_Init+0x62>
  {
    Error_Handler();
 800423a:	f000 f8b7 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200089f0 	.word	0x200089f0
 8004248:	40007800 	.word	0x40007800

0800424c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <MX_DMA_Init+0x48>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <MX_DMA_Init+0x48>)
 8004258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <MX_DMA_Init+0x48>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2105      	movs	r1, #5
 800426e:	203b      	movs	r0, #59	; 0x3b
 8004270:	f001 fc88 	bl	8005b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004274:	203b      	movs	r0, #59	; 0x3b
 8004276:	f001 fca1 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800427a:	2200      	movs	r2, #0
 800427c:	2105      	movs	r1, #5
 800427e:	2045      	movs	r0, #69	; 0x45
 8004280:	f001 fc80 	bl	8005b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004284:	2045      	movs	r0, #69	; 0x45
 8004286:	f001 fc99 	bl	8005bbc <HAL_NVIC_EnableIRQ>

}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800

08004298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429e:	f107 031c 	add.w	r3, r7, #28
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <MX_GPIO_Init+0xd4>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a2e      	ldr	r2, [pc, #184]	; (800436c <MX_GPIO_Init+0xd4>)
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <MX_GPIO_Init+0xd4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <MX_GPIO_Init+0xd4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a28      	ldr	r2, [pc, #160]	; (800436c <MX_GPIO_Init+0xd4>)
 80042cc:	f043 0304 	orr.w	r3, r3, #4
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <MX_GPIO_Init+0xd4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <MX_GPIO_Init+0xd4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a22      	ldr	r2, [pc, #136]	; (800436c <MX_GPIO_Init+0xd4>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <MX_GPIO_Init+0xd4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <MX_GPIO_Init+0xd4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <MX_GPIO_Init+0xd4>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <MX_GPIO_Init+0xd4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <MX_GPIO_Init+0xd4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <MX_GPIO_Init+0xd4>)
 8004314:	f043 0310 	orr.w	r3, r3, #16
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <MX_GPIO_Init+0xd4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <MX_GPIO_Init+0xd4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <MX_GPIO_Init+0xd4>)
 800432c:	f043 0308 	orr.w	r3, r3, #8
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <MX_GPIO_Init+0xd4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800433e:	2200      	movs	r2, #0
 8004340:	2108      	movs	r1, #8
 8004342:	480b      	ldr	r0, [pc, #44]	; (8004370 <MX_GPIO_Init+0xd8>)
 8004344:	f002 f996 	bl	8006674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004348:	2308      	movs	r3, #8
 800434a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434c:	2301      	movs	r3, #1
 800434e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004358:	f107 031c 	add.w	r3, r7, #28
 800435c:	4619      	mov	r1, r3
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <MX_GPIO_Init+0xd8>)
 8004360:	f001 ffde 	bl	8006320 <HAL_GPIO_Init>

}
 8004364:	bf00      	nop
 8004366:	3730      	adds	r7, #48	; 0x30
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	40020800 	.word	0x40020800

08004374 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800437c:	f012 fe66 	bl	801704c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004380:	2001      	movs	r0, #1
 8004382:	f00e ffd5 	bl	8013330 <osDelay>
 8004386:	e7fb      	b.n	8004380 <StartDefaultTask+0xc>

08004388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800439a:	f001 faf9 	bl	8005990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000

080043ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_MspInit+0x4c>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_MspInit+0x4c>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_MspInit+0x4c>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_MspInit+0x4c>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_MspInit+0x4c>)
 80043e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e4:	6453      	str	r3, [r2, #68]	; 0x44
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_MspInit+0x4c>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	210f      	movs	r1, #15
 80043f6:	f06f 0001 	mvn.w	r0, #1
 80043fa:	f001 fbc3 	bl	8005b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800

0800440c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a65      	ldr	r2, [pc, #404]	; (80045c0 <HAL_SD_MspInit+0x1b4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	f040 80c3 	bne.w	80045b6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	4a63      	ldr	r2, [pc, #396]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800443a:	6453      	str	r3, [r2, #68]	; 0x44
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004448:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6313      	str	r3, [r2, #48]	; 0x30
 8004454:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004460:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	4a57      	ldr	r2, [pc, #348]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6313      	str	r3, [r2, #48]	; 0x30
 800446c:	4b55      	ldr	r3, [pc, #340]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004478:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800447c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800448a:	230c      	movs	r3, #12
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	484c      	ldr	r0, [pc, #304]	; (80045c8 <HAL_SD_MspInit+0x1bc>)
 8004496:	f001 ff43 	bl	8006320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800449a:	2304      	movs	r3, #4
 800449c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	2302      	movs	r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a6:	2303      	movs	r3, #3
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044aa:	230c      	movs	r3, #12
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	4619      	mov	r1, r3
 80044b4:	4845      	ldr	r0, [pc, #276]	; (80045cc <HAL_SD_MspInit+0x1c0>)
 80044b6:	f001 ff33 	bl	8006320 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044bc:	4a45      	ldr	r2, [pc, #276]	; (80045d4 <HAL_SD_MspInit+0x1c8>)
 80044be:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80044c0:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044c6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c8:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d4:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044da:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044dc:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044e2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044e4:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80044ec:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044ee:	2220      	movs	r2, #32
 80044f0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044fa:	2204      	movs	r2, #4
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004500:	2203      	movs	r2, #3
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004506:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800450c:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 800450e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004514:	482e      	ldr	r0, [pc, #184]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004516:	f001 fb5f 	bl	8005bd8 <HAL_DMA_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8004520:	f7ff ff44 	bl	80043ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
 800452a:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_SD_MspInit+0x1d0>)
 8004534:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800453c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800454c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004550:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004558:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800455c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004560:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004570:	2204      	movs	r2, #4
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004576:	2203      	movs	r2, #3
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800457c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004584:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800458a:	4813      	ldr	r0, [pc, #76]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800458c:	f001 fb24 	bl	8005bd8 <HAL_DMA_Init>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8004596:	f7ff ff09 	bl	80043ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c
 80045a0:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2105      	movs	r1, #5
 80045aa:	2031      	movs	r0, #49	; 0x31
 80045ac:	f001 faea 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045b0:	2031      	movs	r0, #49	; 0x31
 80045b2:	f001 fb03 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045b6:	bf00      	nop
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	20014bb4 	.word	0x20014bb4
 80045d4:	40026458 	.word	0x40026458
 80045d8:	20026c3c 	.word	0x20026c3c
 80045dc:	400264a0 	.word	0x400264a0

080045e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	; 0x38
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_SPI_MspInit+0x1c0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d131      	bne.n	8004666 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004602:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b65      	ldr	r3, [pc, #404]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8004632:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004644:	2305      	movs	r3, #5
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464c:	4619      	mov	r1, r3
 800464e:	4856      	ldr	r0, [pc, #344]	; (80047a8 <HAL_SPI_MspInit+0x1c8>)
 8004650:	f001 fe66 	bl	8006320 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004654:	2200      	movs	r2, #0
 8004656:	2105      	movs	r1, #5
 8004658:	2023      	movs	r0, #35	; 0x23
 800465a:	f001 fa93 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800465e:	2023      	movs	r0, #35	; 0x23
 8004660:	f001 faac 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004664:	e097      	b.n	8004796 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a50      	ldr	r2, [pc, #320]	; (80047ac <HAL_SPI_MspInit+0x1cc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d131      	bne.n	80046d4 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004670:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
 800467c:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	6313      	str	r3, [r2, #48]	; 0x30
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	2303      	movs	r3, #3
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046b2:	2305      	movs	r3, #5
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ba:	4619      	mov	r1, r3
 80046bc:	483c      	ldr	r0, [pc, #240]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 80046be:	f001 fe2f 	bl	8006320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2105      	movs	r1, #5
 80046c6:	2024      	movs	r0, #36	; 0x24
 80046c8:	f001 fa5c 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046cc:	2024      	movs	r0, #36	; 0x24
 80046ce:	f001 fa75 	bl	8005bbc <HAL_NVIC_EnableIRQ>
}
 80046d2:	e060      	b.n	8004796 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a36      	ldr	r2, [pc, #216]	; (80047b4 <HAL_SPI_MspInit+0x1d4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d15b      	bne.n	8004796 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004726:	2310      	movs	r3, #16
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004736:	2306      	movs	r3, #6
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473e:	4619      	mov	r1, r3
 8004740:	4819      	ldr	r0, [pc, #100]	; (80047a8 <HAL_SPI_MspInit+0x1c8>)
 8004742:	f001 fded 	bl	8006320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004746:	2304      	movs	r3, #4
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004752:	2303      	movs	r3, #3
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004756:	2307      	movs	r3, #7
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475e:	4619      	mov	r1, r3
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 8004762:	f001 fddd 	bl	8006320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004766:	2318      	movs	r3, #24
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004772:	2303      	movs	r3, #3
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004776:	2306      	movs	r3, #6
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477e:	4619      	mov	r1, r3
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 8004782:	f001 fdcd 	bl	8006320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2105      	movs	r1, #5
 800478a:	2033      	movs	r0, #51	; 0x33
 800478c:	f001 f9fa 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004790:	2033      	movs	r0, #51	; 0x33
 8004792:	f001 fa13 	bl	8005bbc <HAL_NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3738      	adds	r7, #56	; 0x38
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40013000 	.word	0x40013000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40003c00 	.word	0x40003c00

080047b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 031c 	add.w	r3, r7, #28
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <HAL_UART_MspInit+0xf8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d130      	bne.n	800483c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800480a:	2303      	movs	r3, #3
 800480c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	2302      	movs	r3, #2
 8004810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800481a:	2308      	movs	r3, #8
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	4824      	ldr	r0, [pc, #144]	; (80048b8 <HAL_UART_MspInit+0x100>)
 8004826:	f001 fd7b 	bl	8006320 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2105      	movs	r1, #5
 800482e:	2034      	movs	r0, #52	; 0x34
 8004830:	f001 f9a8 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004834:	2034      	movs	r0, #52	; 0x34
 8004836:	f001 f9c1 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800483a:	e035      	b.n	80048a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==UART7)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_UART_MspInit+0x104>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d130      	bne.n	80048a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004864:	f043 0310 	orr.w	r3, r3, #16
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004876:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004884:	2303      	movs	r3, #3
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004888:	2308      	movs	r3, #8
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	480b      	ldr	r0, [pc, #44]	; (80048c0 <HAL_UART_MspInit+0x108>)
 8004894:	f001 fd44 	bl	8006320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	2105      	movs	r1, #5
 800489c:	2052      	movs	r0, #82	; 0x52
 800489e:	f001 f971 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80048a2:	2052      	movs	r0, #82	; 0x52
 80048a4:	f001 f98a 	bl	8005bbc <HAL_NVIC_EnableIRQ>
}
 80048a8:	bf00      	nop
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40004c00 	.word	0x40004c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40007800 	.word	0x40007800
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	; 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80048d4:	2200      	movs	r2, #0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	2019      	movs	r0, #25
 80048da:	f001 f953 	bl	8005b84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80048de:	2019      	movs	r0, #25
 80048e0:	f001 f96c 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80048e4:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <HAL_InitTick+0xa0>)
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_InitTick+0xa0>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6453      	str	r3, [r2, #68]	; 0x44
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_InitTick+0xa0>)
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048fc:	f107 0210 	add.w	r2, r7, #16
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f003 fd42 	bl	8008390 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800490c:	f003 fd2c 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 8004910:	4603      	mov	r3, r0
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <HAL_InitTick+0xa4>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9b      	lsrs	r3, r3, #18
 8004920:	3b01      	subs	r3, #1
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_InitTick+0xa8>)
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_InitTick+0xac>)
 8004928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_InitTick+0xa8>)
 800492c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004930:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_InitTick+0xa8>)
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_InitTick+0xa8>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_InitTick+0xa8>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004944:	4809      	ldr	r0, [pc, #36]	; (800496c <HAL_InitTick+0xa8>)
 8004946:	f006 fa54 	bl	800adf2 <HAL_TIM_Base_Init>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004950:	4806      	ldr	r0, [pc, #24]	; (800496c <HAL_InitTick+0xa8>)
 8004952:	f006 fa83 	bl	800ae5c <HAL_TIM_Base_Start_IT>
 8004956:	4603      	mov	r3, r0
 8004958:	e000      	b.n	800495c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	3730      	adds	r7, #48	; 0x30
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	431bde83 	.word	0x431bde83
 800496c:	20026d08 	.word	0x20026d08
 8004970:	40010000 	.word	0x40010000

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004986:	e7fe      	b.n	8004986 <HardFault_Handler+0x4>

08004988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498c:	e7fe      	b.n	800498c <MemManage_Handler+0x4>

0800498e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004992:	e7fe      	b.n	8004992 <BusFault_Handler+0x4>

08004994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004998:	e7fe      	b.n	8004998 <UsageFault_Handler+0x4>

0800499a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80049ae:	f006 fa7f 	bl	800aeb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20026d08 	.word	0x20026d08

080049bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <SPI1_IRQHandler+0x10>)
 80049c2:	f005 fdad 	bl	800a520 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	2001cc98 	.word	0x2001cc98

080049d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <SPI2_IRQHandler+0x10>)
 80049d6:	f005 fda3 	bl	800a520 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000898c 	.word	0x2000898c

080049e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <SDMMC1_IRQHandler+0x10>)
 80049ea:	f004 fb2b 	bl	8009044 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20008ad8 	.word	0x20008ad8

080049f8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80049fc:	4802      	ldr	r0, [pc, #8]	; (8004a08 <SPI3_IRQHandler+0x10>)
 80049fe:	f005 fd8f 	bl	800a520 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200109fc 	.word	0x200109fc

08004a0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004a10:	4802      	ldr	r0, [pc, #8]	; (8004a1c <UART4_IRQHandler+0x10>)
 8004a12:	f006 fea1 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2001cc18 	.word	0x2001cc18

08004a20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004a24:	4802      	ldr	r0, [pc, #8]	; (8004a30 <DMA2_Stream3_IRQHandler+0x10>)
 8004a26:	f001 fa07 	bl	8005e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20014bb4 	.word	0x20014bb4

08004a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a38:	4802      	ldr	r0, [pc, #8]	; (8004a44 <OTG_FS_IRQHandler+0x10>)
 8004a3a:	f001 ff94 	bl	8006966 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20028b38 	.word	0x20028b38

08004a48 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <DMA2_Stream6_IRQHandler+0x10>)
 8004a4e:	f001 f9f3 	bl	8005e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20026c3c 	.word	0x20026c3c

08004a5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <UART7_IRQHandler+0x10>)
 8004a62:	f006 fe79 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200089f0 	.word	0x200089f0

08004a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <_sbrk+0x50>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <_sbrk+0x16>
		heap_end = &end;
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <_sbrk+0x50>)
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <_sbrk+0x54>)
 8004a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <_sbrk+0x50>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <_sbrk+0x50>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	466a      	mov	r2, sp
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d907      	bls.n	8004aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a9a:	f013 f831 	bl	8017b00 <__errno>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	e006      	b.n	8004ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <_sbrk+0x50>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <_sbrk+0x50>)
 8004ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200003c8 	.word	0x200003c8
 8004ac4:	20028f40 	.word	0x20028f40

08004ac8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <SystemInit+0x5c>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <SystemInit+0x5c>)
 8004ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <SystemInit+0x60>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <SystemInit+0x60>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <SystemInit+0x60>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <SystemInit+0x60>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	490d      	ldr	r1, [pc, #52]	; (8004b28 <SystemInit+0x60>)
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <SystemInit+0x64>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <SystemInit+0x60>)
 8004afc:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <SystemInit+0x68>)
 8004afe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <SystemInit+0x60>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <SystemInit+0x60>)
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <SystemInit+0x60>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <SystemInit+0x5c>)
 8004b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b18:	609a      	str	r2, [r3, #8]
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	fef6ffff 	.word	0xfef6ffff
 8004b30:	24003010 	.word	0x24003010

08004b34 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8004b40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	4618      	mov	r0, r3
 8004b52:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004b56:	461a      	mov	r2, r3
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f013 f816 	bl	8017b8a <memset>
    control_data_init(&control_data);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc fe0e 	bl	8001784 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004b68:	f00e fb0a 	bl	8013180 <osKernelGetTickCount>
 8004b6c:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8004b70:	f00e fb2e 	bl	80131d0 <osKernelGetTickFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <vTaskController+0x148>)
 8004b78:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004b82:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8004b86:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8004b90:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8004b94:	233c      	movs	r3, #60	; 0x3c
 8004b96:	493a      	ldr	r1, [pc, #232]	; (8004c80 <vTaskController+0x14c>)
 8004b98:	483a      	ldr	r0, [pc, #232]	; (8004c84 <vTaskController+0x150>)
 8004b9a:	f7fe fdb1 	bl	8003700 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <vTaskController+0x14c>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004baa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c88 <vTaskController+0x154>
 8004bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <vTaskController+0x14c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004c88 <vTaskController+0x154>
 8004bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8004bd6:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004bda:	233c      	movs	r3, #60	; 0x3c
 8004bdc:	492b      	ldr	r1, [pc, #172]	; (8004c8c <vTaskController+0x158>)
 8004bde:	482c      	ldr	r0, [pc, #176]	; (8004c90 <vTaskController+0x15c>)
 8004be0:	f7fe fd8e 	bl	8003700 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8004be4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fcb6 	bl	8001560 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8004bf4:	4827      	ldr	r0, [pc, #156]	; (8004c94 <vTaskController+0x160>)
 8004bf6:	f7fe fd5b 	bl	80036b0 <AcquireMutex>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d110      	bne.n	8004c22 <vTaskController+0xee>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004c88 <vTaskController+0x154>
 8004c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c14:	ee17 2a90 	vmov	r2, s15
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <vTaskController+0x164>)
 8004c1a:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8004c1c:	481d      	ldr	r0, [pc, #116]	; (8004c94 <vTaskController+0x160>)
 8004c1e:	f7fe fd61 	bl	80036e4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8004c22:	f00e faad 	bl	8013180 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004c88 <vTaskController+0x154>
 8004c32:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c36:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c42:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004c88 <vTaskController+0x154>
 8004c46:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c4a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c56:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004c88 <vTaskController+0x154>
 8004c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c62:	ee17 3a90 	vmov	r3, s15
 8004c66:	ee16 2a10 	vmov	r2, s12
 8004c6a:	ee16 1a90 	vmov	r1, s13
 8004c6e:	f7fe ff2f 	bl	8003ad0 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8004c72:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004c76:	f00e fb89 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 8004c7a:	e782      	b.n	8004b82 <vTaskController+0x4e>
 8004c7c:	51eb851f 	.word	0x51eb851f
 8004c80:	2000026c 	.word	0x2000026c
 8004c84:	20010af0 	.word	0x20010af0
 8004c88:	447a0000 	.word	0x447a0000
 8004c8c:	200002bc 	.word	0x200002bc
 8004c90:	20008984 	.word	0x20008984
 8004c94:	20010a60 	.word	0x20010a60
 8004c98:	200002a8 	.word	0x200002a8

08004c9c <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b09f      	sub	sp, #124	; 0x7c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004ca4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd f9a5 	bl	8002004 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8004cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cbe:	223c      	movs	r2, #60	; 0x3c
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f012 ff61 	bl	8017b8a <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc fedb 	bl	8001a88 <init_env>
	init_env(&environment);
 8004cd2:	f107 0318 	add.w	r3, r7, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc fed6 	bl	8001a88 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004cdc:	f00e fa50 	bl	8013180 <osKernelGetTickCount>
 8004ce0:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004ce2:	f00e fa75 	bl	80131d0 <osKernelGetTickFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <vTaskFSM+0xc4>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf6:	4413      	add	r3, r2
 8004cf8:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8004cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cfe:	233c      	movs	r3, #60	; 0x3c
 8004d00:	4918      	ldr	r1, [pc, #96]	; (8004d64 <vTaskFSM+0xc8>)
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <vTaskFSM+0xcc>)
 8004d04:	f7fe fcfc 	bl	8003700 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8004d08:	f107 0218 	add.w	r2, r7, #24
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	4917      	ldr	r1, [pc, #92]	; (8004d6c <vTaskFSM+0xd0>)
 8004d10:	4817      	ldr	r0, [pc, #92]	; (8004d70 <vTaskFSM+0xd4>)
 8004d12:	f7fe fcf5 	bl	8003700 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8004d16:	f107 0218 	add.w	r2, r7, #24
 8004d1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd f86c 	bl	8001e00 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004d28:	4812      	ldr	r0, [pc, #72]	; (8004d74 <vTaskFSM+0xd8>)
 8004d2a:	f7fe fcc1 	bl	80036b0 <AcquireMutex>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <vTaskFSM+0xae>
			global_flight_phase_detection = flight_phase_detection;
 8004d34:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <vTaskFSM+0xdc>)
 8004d36:	461c      	mov	r4, r3
 8004d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8004d44:	480b      	ldr	r0, [pc, #44]	; (8004d74 <vTaskFSM+0xd8>)
 8004d46:	f7fe fccd 	bl	80036e4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8004d4a:	f00e fa19 	bl	8013180 <osKernelGetTickCount>
 8004d4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d54:	f7fe fe5e 	bl	8003a14 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8004d58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004d5a:	f00e fb17 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 8004d5e:	e7c8      	b.n	8004cf2 <vTaskFSM+0x56>
 8004d60:	51eb851f 	.word	0x51eb851f
 8004d64:	2000026c 	.word	0x2000026c
 8004d68:	20010af0 	.word	0x20010af0
 8004d6c:	200002ac 	.word	0x200002ac
 8004d70:	20008b70 	.word	0x20008b70
 8004d74:	20008984 	.word	0x20008984
 8004d78:	200002bc 	.word	0x200002bc

08004d7c <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes();


void vTaskMotorCont(void *argument) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b090      	sub	sp, #64	; 0x40
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 8004d88:	239b      	movs	r3, #155	; 0x9b
 8004d8a:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8004d9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004da0:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 2000;
 8004da8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8004dae:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <vTaskMotorCont+0x158>)
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8004db2:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <vTaskMotorCont+0x158>)
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t measured_motor_position = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 8004dc2:	e003      	b.n	8004dcc <vTaskMotorCont+0x50>
		osDelay(1000);
 8004dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dc8:	f00e fab2 	bl	8013330 <osDelay>
	while(EnableMotor() != osOK){
 8004dcc:	f7fc f908 	bl	8000fe0 <EnableMotor>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f6      	bne.n	8004dc4 <vTaskMotorCont+0x48>
	};

	while(SetPositionMode(position_mode) != osOK){
 8004dd6:	e003      	b.n	8004de0 <vTaskMotorCont+0x64>
		osDelay(1000);
 8004dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ddc:	f00e faa8 	bl	8013330 <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8004de0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fc f954 	bl	8001092 <SetPositionMode>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f3      	bne.n	8004dd8 <vTaskMotorCont+0x5c>
	};

	if (position_mode == 0x01) {
 8004df0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <vTaskMotorCont+0x88>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfe:	f7fc f9c8 	bl	8001192 <ConfigurePPM>
 8004e02:	6378      	str	r0, [r7, #52]	; 0x34
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004e04:	f00e f9bc 	bl	8013180 <osKernelGetTickCount>
 8004e08:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004e0a:	f00e f9e1 	bl	80131d0 <osKernelGetTickFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <vTaskMotorCont+0x15c>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 8004e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	4413      	add	r3, r2
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc fa2a 	bl	8001280 <GetPosition>
 8004e2c:	6378      	str	r0, [r7, #52]	; 0x34

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004e2e:	f107 021f 	add.w	r2, r7, #31
 8004e32:	2301      	movs	r3, #1
 8004e34:	4929      	ldr	r1, [pc, #164]	; (8004edc <vTaskMotorCont+0x160>)
 8004e36:	482a      	ldr	r0, [pc, #168]	; (8004ee0 <vTaskMotorCont+0x164>)
 8004e38:	f7fe fc62 	bl	8003700 <ReadMutex>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8004e3c:	f107 0210 	add.w	r2, r7, #16
 8004e40:	230c      	movs	r3, #12
 8004e42:	4928      	ldr	r1, [pc, #160]	; (8004ee4 <vTaskMotorCont+0x168>)
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <vTaskMotorCont+0x16c>)
 8004e46:	f7fe fc5b 	bl	8003700 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8004e4a:	f107 020c 	add.w	r2, r7, #12
 8004e4e:	2304      	movs	r3, #4
 8004e50:	4926      	ldr	r1, [pc, #152]	; (8004eec <vTaskMotorCont+0x170>)
 8004e52:	4827      	ldr	r0, [pc, #156]	; (8004ef0 <vTaskMotorCont+0x174>)
 8004e54:	f7fe fc54 	bl	8003700 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e62:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ef4 <vTaskMotorCont+0x178>
 8004e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e6a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004ef8 <vTaskMotorCont+0x17c>
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e76:	ee17 3a90 	vmov	r3, s15
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Check Bounds */
		if(desired_motor_position > -2){
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	db02      	blt.n	8004e8a <vTaskMotorCont+0x10e>
			desired_motor_position = -2;
 8004e84:	f06f 0301 	mvn.w	r3, #1
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if(desired_motor_position < -135){
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f113 0f87 	cmn.w	r3, #135	; 0x87
 8004e90:	da02      	bge.n	8004e98 <vTaskMotorCont+0x11c>
			desired_motor_position = -135;
 8004e92:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8004e98:	7c3b      	ldrb	r3, [r7, #16]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d103      	bne.n	8004ea6 <vTaskMotorCont+0x12a>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 8004e9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ea0:	f7fc f91c 	bl	80010dc <MoveToPositionPPM>
 8004ea4:	e002      	b.n	8004eac <vTaskMotorCont+0x130>
		}
		else{
			MoveToPositionPPM(0);
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f7fc f918 	bl	80010dc <MoveToPositionPPM>
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 8004eac:	7c3b      	ldrb	r3, [r7, #16]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d104      	bne.n	8004ebc <vTaskMotorCont+0x140>
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
 8004eb4:	2b9d      	cmp	r3, #157	; 0x9d
 8004eb6:	d101      	bne.n	8004ebc <vTaskMotorCont+0x140>
			testairbrakes();
 8004eb8:	f000 f820 	bl	8004efc <testairbrakes>
		}



		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8004ebc:	f00e f960 	bl	8013180 <osKernelGetTickCount>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec6:	f7fe fe31 	bl	8003b2c <logMotor>


		osDelayUntil(tick_count);
 8004eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ecc:	f00e fa5e 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 8004ed0:	e7a3      	b.n	8004e1a <vTaskMotorCont+0x9e>
 8004ed2:	bf00      	nop
 8004ed4:	000186a0 	.word	0x000186a0
 8004ed8:	cccccccd 	.word	0xcccccccd
 8004edc:	20014b54 	.word	0x20014b54
 8004ee0:	20008b68 	.word	0x20008b68
 8004ee4:	200002bc 	.word	0x200002bc
 8004ee8:	20008984 	.word	0x20008984
 8004eec:	200002a8 	.word	0x200002a8
 8004ef0:	20010a60 	.word	0x20010a60
 8004ef4:	447a0000 	.word	0x447a0000
 8004ef8:	c30c0000 	.word	0xc30c0000

08004efc <testairbrakes>:
	}
}

void testairbrakes(){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	MoveToPositionPPM(-150);
 8004f00:	f06f 0095 	mvn.w	r0, #149	; 0x95
 8004f04:	f7fc f8ea 	bl	80010dc <MoveToPositionPPM>
	HAL_Delay(1000);
 8004f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f0c:	f000 fd60 	bl	80059d0 <HAL_Delay>
	MoveToPositionPPM(0);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fc f8e3 	bl	80010dc <MoveToPositionPPM>
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004f1c:	b5b0      	push	{r4, r5, r7, lr}
 8004f1e:	b0cc      	sub	sp, #304	; 0x130
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f2c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004f38:	48c3      	ldr	r0, [pc, #780]	; (8005248 <vTaskSdCard+0x32c>)
 8004f3a:	f7fe fe23 	bl	8003b84 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8004f3e:	48c3      	ldr	r0, [pc, #780]	; (800524c <vTaskSdCard+0x330>)
 8004f40:	f7fe fe20 	bl	8003b84 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004f44:	2201      	movs	r2, #1
 8004f46:	49c2      	ldr	r1, [pc, #776]	; (8005250 <vTaskSdCard+0x334>)
 8004f48:	48c2      	ldr	r0, [pc, #776]	; (8005254 <vTaskSdCard+0x338>)
 8004f4a:	f00d f80d 	bl	8011f68 <f_mount>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8004f54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004f5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f60:	4619      	mov	r1, r3
 8004f62:	48bd      	ldr	r0, [pc, #756]	; (8005258 <vTaskSdCard+0x33c>)
 8004f64:	f7fe fe0e 	bl	8003b84 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8004f68:	4bbc      	ldr	r3, [pc, #752]	; (800525c <vTaskSdCard+0x340>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8004f6e:	2064      	movs	r0, #100	; 0x64
 8004f70:	f00e f9de 	bl	8013330 <osDelay>
		}
	} while (res != FR_OK);
 8004f74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e3      	bne.n	8004f44 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8004f7c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80a9 	bne.w	80050d8 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8004f86:	48b6      	ldr	r0, [pc, #728]	; (8005260 <vTaskSdCard+0x344>)
 8004f88:	f7fe fdfc 	bl	8003b84 <UsbPrint>

		unsigned int file_number = 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8004f92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004f96:	f107 0008 	add.w	r0, r7, #8
 8004f9a:	4bb2      	ldr	r3, [pc, #712]	; (8005264 <vTaskSdCard+0x348>)
 8004f9c:	4aac      	ldr	r2, [pc, #688]	; (8005250 <vTaskSdCard+0x334>)
 8004f9e:	f00d ff9b 	bl	8012ed8 <f_findfirst>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8004fa8:	e02b      	b.n	8005002 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004faa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004fae:	3b30      	subs	r3, #48	; 0x30
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004fb6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004fba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	18ca      	adds	r2, r1, r3
 8004fc8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004fcc:	3b30      	subs	r3, #48	; 0x30
 8004fce:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004fd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8004fd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d204      	bcs.n	8004fec <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8004fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8004fec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ff0:	f107 0308 	add.w	r3, r7, #8
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f00d ff46 	bl	8012e88 <f_findnext>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005002:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <vTaskSdCard+0xf6>
 800500a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8005012:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d006      	beq.n	8005028 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 800501a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800501e:	4619      	mov	r1, r3
 8005020:	4891      	ldr	r0, [pc, #580]	; (8005268 <vTaskSdCard+0x34c>)
 8005022:	f7fe fdaf 	bl	8003b84 <UsbPrint>
					res);
			goto resetSDCard;
 8005026:	e78a      	b.n	8004f3e <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8005028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800502c:	4a8f      	ldr	r2, [pc, #572]	; (800526c <vTaskSdCard+0x350>)
 800502e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8005034:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005038:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <vTaskSdCard+0x354>)
 800503a:	fba3 2301 	umull	r2, r3, r3, r1
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	1aca      	subs	r2, r1, r3
 800504a:	b2d3      	uxtb	r3, r2
 800504c:	3330      	adds	r3, #48	; 0x30
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8005054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005058:	4a85      	ldr	r2, [pc, #532]	; (8005270 <vTaskSdCard+0x354>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	08d9      	lsrs	r1, r3, #3
 8005060:	4b83      	ldr	r3, [pc, #524]	; (8005270 <vTaskSdCard+0x354>)
 8005062:	fba3 2301 	umull	r2, r3, r3, r1
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	1aca      	subs	r2, r1, r3
 8005072:	b2d3      	uxtb	r3, r2
 8005074:	3330      	adds	r3, #48	; 0x30
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 800507c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005080:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <vTaskSdCard+0x358>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0959      	lsrs	r1, r3, #5
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <vTaskSdCard+0x354>)
 800508a:	fba3 2301 	umull	r2, r3, r3, r1
 800508e:	08da      	lsrs	r2, r3, #3
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	1aca      	subs	r2, r1, r3
 800509a:	b2d3      	uxtb	r3, r2
 800509c:	3330      	adds	r3, #48	; 0x30
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 80050a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a8:	4619      	mov	r1, r3
 80050aa:	4873      	ldr	r0, [pc, #460]	; (8005278 <vTaskSdCard+0x35c>)
 80050ac:	f7fe fd6a 	bl	8003b84 <UsbPrint>

		res = f_closedir(&dj);
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f00d fe79 	bl	8012dac <f_closedir>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80050c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80050c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050cc:	4619      	mov	r1, r3
 80050ce:	486b      	ldr	r0, [pc, #428]	; (800527c <vTaskSdCard+0x360>)
 80050d0:	f7fe fd58 	bl	8003b84 <UsbPrint>
			goto resetSDCard;
 80050d4:	bf00      	nop
 80050d6:	e732      	b.n	8004f3e <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 80050d8:	4869      	ldr	r0, [pc, #420]	; (8005280 <vTaskSdCard+0x364>)
 80050da:	f7fe fd53 	bl	8003b84 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80050de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050e2:	2212      	movs	r2, #18
 80050e4:	4619      	mov	r1, r3
 80050e6:	4867      	ldr	r0, [pc, #412]	; (8005284 <vTaskSdCard+0x368>)
 80050e8:	f00c ffa2 	bl	8012030 <f_open>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 80050f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d006      	beq.n	8005108 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 80050fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050fe:	4619      	mov	r1, r3
 8005100:	4861      	ldr	r0, [pc, #388]	; (8005288 <vTaskSdCard+0x36c>)
 8005102:	f7fe fd3f 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005106:	e71a      	b.n	8004f3e <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8005108:	4860      	ldr	r0, [pc, #384]	; (800528c <vTaskSdCard+0x370>)
 800510a:	f7fe fd3b 	bl	8003b84 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800510e:	4b5d      	ldr	r3, [pc, #372]	; (8005284 <vTaskSdCard+0x368>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	485b      	ldr	r0, [pc, #364]	; (8005284 <vTaskSdCard+0x368>)
 8005116:	f00d fb7d 	bl	8012814 <f_lseek>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8005120:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8005128:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800512c:	4619      	mov	r1, r3
 800512e:	4858      	ldr	r0, [pc, #352]	; (8005290 <vTaskSdCard+0x374>)
 8005130:	f7fe fd28 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005134:	e703      	b.n	8004f3e <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 800513c:	4b55      	ldr	r3, [pc, #340]	; (8005294 <vTaskSdCard+0x378>)
 800513e:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8005142:	461d      	mov	r5, r3
 8005144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800514c:	c407      	stmia	r4!, {r0, r1, r2}
 800514e:	8023      	strh	r3, [r4, #0]
 8005150:	3402      	adds	r4, #2
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	7023      	strb	r3, [r4, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8005162:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb f852 	bl	8000210 <strlen>
 800516c:	4602      	mov	r2, r0
 800516e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8005172:	4b49      	ldr	r3, [pc, #292]	; (8005298 <vTaskSdCard+0x37c>)
 8005174:	4843      	ldr	r0, [pc, #268]	; (8005284 <vTaskSdCard+0x368>)
 8005176:	f00d f920 	bl	80123ba <f_write>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8005180:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8005188:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800518c:	4619      	mov	r1, r3
 800518e:	4843      	ldr	r0, [pc, #268]	; (800529c <vTaskSdCard+0x380>)
 8005190:	f7fe fcf8 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005194:	e6d3      	b.n	8004f3e <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8005196:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800519a:	2296      	movs	r2, #150	; 0x96
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f012 fcf3 	bl	8017b8a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80051a4:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <vTaskSdCard+0x384>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	2200      	movs	r2, #0
 80051b2:	f00e fcff 	bl	8013bb4 <osMessageQueueGet>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f3      	bne.n	80051a4 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 80051bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb f825 	bl	8000210 <strlen>
 80051c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 80051ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80051d2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80051d6:	4b30      	ldr	r3, [pc, #192]	; (8005298 <vTaskSdCard+0x37c>)
 80051d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80051dc:	4829      	ldr	r0, [pc, #164]	; (8005284 <vTaskSdCard+0x368>)
 80051de:	f00d f8ec 	bl	80123ba <f_write>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 80051e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 80051f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051f4:	4619      	mov	r1, r3
 80051f6:	4829      	ldr	r0, [pc, #164]	; (800529c <vTaskSdCard+0x380>)
 80051f8:	f7fe fcc4 	bl	8003b84 <UsbPrint>
							res);
					goto resetSDCard;
 80051fc:	e69f      	b.n	8004f3e <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	3301      	adds	r3, #1
 8005204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	2b7f      	cmp	r3, #127	; 0x7f
 800520e:	ddc9      	ble.n	80051a4 <vTaskSdCard+0x288>
				msgCounter = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8005216:	4823      	ldr	r0, [pc, #140]	; (80052a4 <vTaskSdCard+0x388>)
 8005218:	f7fe fcb4 	bl	8003b84 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800521c:	2108      	movs	r1, #8
 800521e:	4822      	ldr	r0, [pc, #136]	; (80052a8 <vTaskSdCard+0x38c>)
 8005220:	f001 fa41 	bl	80066a6 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8005224:	4817      	ldr	r0, [pc, #92]	; (8005284 <vTaskSdCard+0x368>)
 8005226:	f00d fa6c 	bl	8012702 <f_sync>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8005230:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0b5      	beq.n	80051a4 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8005238:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800523c:	4619      	mov	r1, r3
 800523e:	481b      	ldr	r0, [pc, #108]	; (80052ac <vTaskSdCard+0x390>)
 8005240:	f7fe fca0 	bl	8003b84 <UsbPrint>
					goto resetSDCard;
 8005244:	e67b      	b.n	8004f3e <vTaskSdCard+0x22>
 8005246:	bf00      	nop
 8005248:	0801a6f8 	.word	0x0801a6f8
 800524c:	0801a720 	.word	0x0801a720
 8005250:	0801a744 	.word	0x0801a744
 8005254:	20026f78 	.word	0x20026f78
 8005258:	0801a748 	.word	0x0801a748
 800525c:	20000464 	.word	0x20000464
 8005260:	0801a774 	.word	0x0801a774
 8005264:	0801a798 	.word	0x0801a798
 8005268:	0801a7a4 	.word	0x0801a7a4
 800526c:	0801a7dc 	.word	0x0801a7dc
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	51eb851f 	.word	0x51eb851f
 8005278:	0801a7e8 	.word	0x0801a7e8
 800527c:	0801a80c 	.word	0x0801a80c
 8005280:	0801a83c 	.word	0x0801a83c
 8005284:	20026d48 	.word	0x20026d48
 8005288:	0801a860 	.word	0x0801a860
 800528c:	0801a88c 	.word	0x0801a88c
 8005290:	0801a8b4 	.word	0x0801a8b4
 8005294:	0801a958 	.word	0x0801a958
 8005298:	200271ac 	.word	0x200271ac
 800529c:	0801a8e4 	.word	0x0801a8e4
 80052a0:	2001ccfc 	.word	0x2001ccfc
 80052a4:	0801a910 	.word	0x0801a910
 80052a8:	40020800 	.word	0x40020800
 80052ac:	0801a930 	.word	0x0801a930

080052b0 <vTaskSensRead>:
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };
uint32_t counter = 0;

void vTaskSensRead(void *argument) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80052b8:	f00d ff62 	bl	8013180 <osKernelGetTickCount>
 80052bc:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80052be:	f00d ff87 	bl	80131d0 <osKernelGetTickFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <vTaskSensRead+0x68>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80052d2:	2220      	movs	r2, #32
 80052d4:	4911      	ldr	r1, [pc, #68]	; (800531c <vTaskSensRead+0x6c>)
 80052d6:	4812      	ldr	r0, [pc, #72]	; (8005320 <vTaskSensRead+0x70>)
 80052d8:	f004 ffca 	bl	800a270 <HAL_SPI_Receive_IT>



	for (;;) {
		tick_count += tick_update;
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80052e4:	4a0d      	ldr	r2, [pc, #52]	; (800531c <vTaskSensRead+0x6c>)
 80052e6:	490f      	ldr	r1, [pc, #60]	; (8005324 <vTaskSensRead+0x74>)
 80052e8:	480f      	ldr	r0, [pc, #60]	; (8005328 <vTaskSensRead+0x78>)
 80052ea:	f000 f83b 	bl	8005364 <ReadDataSB>
		}
		sb3_data.imu.acc_x = counter;
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <vTaskSensRead+0x7c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	b21a      	sxth	r2, r3
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <vTaskSensRead+0x6c>)
 80052f6:	825a      	strh	r2, [r3, #18]
		/* Log Data */
//		logSensor(tick_count, 1, BARO, &sb1_data.baro);
//		logSensor(tick_count, 1, IMU, &sb1_data.imu);
//		logSensor(tick_count, 2, BARO, &sb2_data.baro);
//		logSensor(tick_count, 2, IMU, &sb2_data.imu);
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <vTaskSensRead+0x6c>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	2103      	movs	r1, #3
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7fe fae2 	bl	80038c8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <vTaskSensRead+0x80>)
 8005306:	2202      	movs	r2, #2
 8005308:	2103      	movs	r1, #3
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7fe fadc 	bl	80038c8 <logSensor>

		/* Periodic Update */
		osDelayUntil(tick_count);
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f00e f83b 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 8005316:	e7e1      	b.n	80052dc <vTaskSensRead+0x2c>
 8005318:	51eb851f 	.word	0x51eb851f
 800531c:	2000040c 	.word	0x2000040c
 8005320:	200109fc 	.word	0x200109fc
 8005324:	200003ec 	.word	0x200003ec
 8005328:	200003cc 	.word	0x200003cc
 800532c:	2000042c 	.word	0x2000042c
 8005330:	20000418 	.word	0x20000418

08005334 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 800533c:	2220      	movs	r2, #32
 800533e:	4906      	ldr	r1, [pc, #24]	; (8005358 <HAL_SPI_RxCpltCallback+0x24>)
 8005340:	4806      	ldr	r0, [pc, #24]	; (800535c <HAL_SPI_RxCpltCallback+0x28>)
 8005342:	f004 ff95 	bl	800a270 <HAL_SPI_Receive_IT>
	counter++;
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_SPI_RxCpltCallback+0x2c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <HAL_SPI_RxCpltCallback+0x2c>)
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	2000040c 	.word	0x2000040c
 800535c:	200109fc 	.word	0x200109fc
 8005360:	2000042c 	.word	0x2000042c

08005364 <ReadDataSB>:


/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum(sb1);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f861 	bl	8005438 <calculate_checksum>
 8005376:	4603      	mov	r3, r0
 8005378:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 800537a:	4826      	ldr	r0, [pc, #152]	; (8005414 <ReadDataSB+0xb0>)
 800537c:	f7fe f998 	bl	80036b0 <AcquireMutex>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10e      	bne.n	80053a4 <ReadDataSB+0x40>
			sb1_baro = sb3->baro;
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <ReadDataSB+0xb4>)
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	ca07      	ldmia	r2, {r0, r1, r2}
 800538c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3->imu;
 8005390:	4a22      	ldr	r2, [pc, #136]	; (800541c <ReadDataSB+0xb8>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4614      	mov	r4, r2
 8005396:	330c      	adds	r3, #12
 8005398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800539a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 800539e:	481d      	ldr	r0, [pc, #116]	; (8005414 <ReadDataSB+0xb0>)
 80053a0:	f7fe f9a0 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum(sb2);
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f000 f847 	bl	8005438 <calculate_checksum>
 80053aa:	4603      	mov	r3, r0
 80053ac:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 80053ae:	481c      	ldr	r0, [pc, #112]	; (8005420 <ReadDataSB+0xbc>)
 80053b0:	f7fe f97e 	bl	80036b0 <AcquireMutex>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10e      	bne.n	80053d8 <ReadDataSB+0x74>
			sb2_baro = sb3->baro;
 80053ba:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <ReadDataSB+0xc0>)
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	ca07      	ldmia	r2, {r0, r1, r2}
 80053c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3->imu;
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <ReadDataSB+0xc4>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4614      	mov	r4, r2
 80053ca:	330c      	adds	r3, #12
 80053cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 80053d2:	4813      	ldr	r0, [pc, #76]	; (8005420 <ReadDataSB+0xbc>)
 80053d4:	f7fe f986 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum(sb3);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f82d 	bl	8005438 <calculate_checksum>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 80053e2:	4812      	ldr	r0, [pc, #72]	; (800542c <ReadDataSB+0xc8>)
 80053e4:	f7fe f964 	bl	80036b0 <AcquireMutex>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10e      	bne.n	800540c <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <ReadDataSB+0xcc>)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80053f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 80053f8:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <ReadDataSB+0xd0>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4614      	mov	r4, r2
 80053fe:	330c      	adds	r3, #12
 8005400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8005406:	4809      	ldr	r0, [pc, #36]	; (800542c <ReadDataSB+0xc8>)
 8005408:	f7fe f96c 	bl	80036e4 <ReleaseMutex>
		}
//	}
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd90      	pop	{r4, r7, pc}
 8005414:	20010a70 	.word	0x20010a70
 8005418:	20000218 	.word	0x20000218
 800541c:	20000224 	.word	0x20000224
 8005420:	20026d00 	.word	0x20026d00
 8005424:	20000234 	.word	0x20000234
 8005428:	20000240 	.word	0x20000240
 800542c:	20010ae0 	.word	0x20010ae0
 8005430:	20000250 	.word	0x20000250
 8005434:	2000025c 	.word	0x2000025c

08005438 <calculate_checksum>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum(sb_data_t *sb_data){
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4413      	add	r3, r2
 800544e:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4413      	add	r3, r2
 800545a:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4413      	add	r3, r2
 8005466:	b2da      	uxtb	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	4413      	add	r3, r2
 8005472:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4413      	add	r3, r2
 800547e:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4413      	add	r3, r2
 800548a:	b2da      	uxtb	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	4413      	add	r3, r2
 8005496:	b2db      	uxtb	r3, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <vTaskStateEst>:

void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory);


void vTaskStateEst(void *argument) {
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a6:	f2ad 5db4 	subw	sp, sp, #1460	; 0x5b4
 80054aa:	af0c      	add	r7, sp, #48	; 0x30
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 80054b0:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fc fae7 	bl	8001a88 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 80054ba:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80054be:	2278      	movs	r2, #120	; 0x78
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f012 fb61 	bl	8017b8a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 80054c8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80054cc:	4618      	mov	r0, r3
 80054ce:	2378      	movs	r3, #120	; 0x78
 80054d0:	461a      	mov	r2, r3
 80054d2:	2100      	movs	r1, #0
 80054d4:	f012 fb59 	bl	8017b8a <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 80054d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fc fda9 	bl	8002034 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 80054e2:	f107 0318 	add.w	r3, r7, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	23b0      	movs	r3, #176	; 0xb0
 80054ea:	461a      	mov	r2, r3
 80054ec:	2100      	movs	r1, #0
 80054ee:	f012 fb4c 	bl	8017b8a <memset>
	extrapolation_rolling_memory.memory_length = 0;
 80054f2:	f107 0318 	add.w	r3, r7, #24
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	6053      	str	r3, [r2, #4]
 8005506:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc fd79 	bl	8002004 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 8005512:	f107 030b 	add.w	r3, r7, #11
 8005516:	229b      	movs	r2, #155	; 0x9b
 8005518:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 800551a:	f107 0318 	add.w	r3, r7, #24
 800551e:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 8005522:	f107 010c 	add.w	r1, r7, #12
 8005526:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 800552a:	f7fd f979 	bl	8002820 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800552e:	f00d fe27 	bl	8013180 <osKernelGetTickCount>
 8005532:	f8c7 057c 	str.w	r0, [r7, #1404]	; 0x57c
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8005536:	f00d fe4b 	bl	80131d0 <osKernelGetTickFreq>
 800553a:	4602      	mov	r2, r0
 800553c:	4b64      	ldr	r3, [pc, #400]	; (80056d0 <vTaskStateEst+0x22c>)
 800553e:	fba3 2302 	umull	r2, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

	for (;;) {
		tick_count += tick_update;
 8005548:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800554c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8005550:	4413      	add	r3, r2
 8005552:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8005556:	f107 020b 	add.w	r2, r7, #11
 800555a:	2301      	movs	r3, #1
 800555c:	495d      	ldr	r1, [pc, #372]	; (80056d4 <vTaskStateEst+0x230>)
 800555e:	485e      	ldr	r0, [pc, #376]	; (80056d8 <vTaskStateEst+0x234>)
 8005560:	f7fe f8ce 	bl	8003700 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10d      	bne.n	800558a <vTaskStateEst+0xe6>
 800556e:	4b59      	ldr	r3, [pc, #356]	; (80056d4 <vTaskStateEst+0x230>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b9c      	cmp	r3, #156	; 0x9c
 8005574:	d109      	bne.n	800558a <vTaskStateEst+0xe6>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800557e:	f107 010c 	add.w	r1, r7, #12
 8005582:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8005586:	f000 f8c5 	bl	8005714 <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 800558a:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800558e:	2301      	movs	r3, #1
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	4a51      	ldr	r2, [pc, #324]	; (80056dc <vTaskStateEst+0x238>)
 8005596:	4952      	ldr	r1, [pc, #328]	; (80056e0 <vTaskStateEst+0x23c>)
 8005598:	4852      	ldr	r0, [pc, #328]	; (80056e4 <vTaskStateEst+0x240>)
 800559a:	f7fe f8ed 	bl	8003778 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 800559e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80055a2:	2302      	movs	r3, #2
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	4a4f      	ldr	r2, [pc, #316]	; (80056e8 <vTaskStateEst+0x244>)
 80055aa:	4950      	ldr	r1, [pc, #320]	; (80056ec <vTaskStateEst+0x248>)
 80055ac:	4850      	ldr	r0, [pc, #320]	; (80056f0 <vTaskStateEst+0x24c>)
 80055ae:	f7fe f8e3 	bl	8003778 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 80055b2:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80055b6:	2303      	movs	r3, #3
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	4a4d      	ldr	r2, [pc, #308]	; (80056f4 <vTaskStateEst+0x250>)
 80055be:	494e      	ldr	r1, [pc, #312]	; (80056f8 <vTaskStateEst+0x254>)
 80055c0:	484e      	ldr	r0, [pc, #312]	; (80056fc <vTaskStateEst+0x258>)
 80055c2:	f7fe f8d9 	bl	8003778 <ReadMutexStateEst>

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 80055c6:	f107 020c 	add.w	r2, r7, #12
 80055ca:	230c      	movs	r3, #12
 80055cc:	494c      	ldr	r1, [pc, #304]	; (8005700 <vTaskStateEst+0x25c>)
 80055ce:	484d      	ldr	r0, [pc, #308]	; (8005704 <vTaskStateEst+0x260>)
 80055d0:	f7fe f896 	bl	8003700 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 80055d4:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80055d8:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80055dc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80055e0:	f107 0318 	add.w	r3, r7, #24
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4603      	mov	r3, r0
 80055ee:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 80055f2:	f7fc ffa1 	bl	8002538 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 80055fe:	f107 010c 	add.w	r1, r7, #12
 8005602:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8005606:	f7fd f90b 	bl	8002820 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 800560a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800560e:	4618      	mov	r0, r3
 8005610:	f7fc fda6 	bl	8002160 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8005614:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005618:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd0a      	ble.n	8005636 <vTaskStateEst+0x192>
			select_kf_observation_matrices(&kf_state);
 8005620:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005624:	4618      	mov	r0, r3
 8005626:	f7fc fe0c 	bl	8002242 <select_kf_observation_matrices>
			kf_update(&kf_state);
 800562a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800562e:	4618      	mov	r0, r3
 8005630:	f7fc fe44 	bl	80022bc <kf_update>
 8005634:	e00a      	b.n	800564c <vTaskStateEst+0x1a8>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8005636:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800563a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800563e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005642:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8005646:	ca07      	ldmia	r2, {r0, r1, r2}
 8005648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 800564c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005650:	4618      	mov	r0, r3
 8005652:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005656:	2278      	movs	r2, #120	; 0x78
 8005658:	4619      	mov	r1, r3
 800565a:	f012 fa8b 	bl	8017b74 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 800565e:	482a      	ldr	r0, [pc, #168]	; (8005708 <vTaskStateEst+0x264>)
 8005660:	f7fe f826 	bl	80036b0 <AcquireMutex>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d108      	bne.n	800567c <vTaskStateEst+0x1d8>
			update_state_est_data(&state_est_data_global, &kf_state);
 800566a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800566e:	4619      	mov	r1, r3
 8005670:	4826      	ldr	r0, [pc, #152]	; (800570c <vTaskStateEst+0x268>)
 8005672:	f7fc ff11 	bl	8002498 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8005676:	4824      	ldr	r0, [pc, #144]	; (8005708 <vTaskStateEst+0x264>)
 8005678:	f7fe f834 	bl	80036e4 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 800567c:	4821      	ldr	r0, [pc, #132]	; (8005704 <vTaskStateEst+0x260>)
 800567e:	f7fe f817 	bl	80036b0 <AcquireMutex>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <vTaskStateEst+0x1f8>
			global_env = env;
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <vTaskStateEst+0x26c>)
 800568a:	461c      	mov	r4, r3
 800568c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8005696:	481b      	ldr	r0, [pc, #108]	; (8005704 <vTaskStateEst+0x260>)
 8005698:	f7fe f824 	bl	80036e4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 800569c:	f00d fd70 	bl	8013180 <osKernelGetTickCount>
 80056a0:	4684      	mov	ip, r0
 80056a2:	4e1a      	ldr	r6, [pc, #104]	; (800570c <vTaskStateEst+0x268>)
 80056a4:	466d      	mov	r5, sp
 80056a6:	f106 040c 	add.w	r4, r6, #12
 80056aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80056b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80056ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80056be:	4660      	mov	r0, ip
 80056c0:	f7fe f9d2 	bl	8003a68 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80056c4:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 80056c8:	f00d fe60 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 80056cc:	e73c      	b.n	8005548 <vTaskStateEst+0xa4>
 80056ce:	bf00      	nop
 80056d0:	51eb851f 	.word	0x51eb851f
 80056d4:	20014b54 	.word	0x20014b54
 80056d8:	20008b68 	.word	0x20008b68
 80056dc:	20000224 	.word	0x20000224
 80056e0:	20000218 	.word	0x20000218
 80056e4:	20010a70 	.word	0x20010a70
 80056e8:	20000240 	.word	0x20000240
 80056ec:	20000234 	.word	0x20000234
 80056f0:	20026d00 	.word	0x20026d00
 80056f4:	2000025c 	.word	0x2000025c
 80056f8:	20000250 	.word	0x20000250
 80056fc:	20010ae0 	.word	0x20010ae0
 8005700:	200002bc 	.word	0x200002bc
 8005704:	20008984 	.word	0x20008984
 8005708:	20010af0 	.word	0x20010af0
 800570c:	2000026c 	.word	0x2000026c
 8005710:	200002ac 	.word	0x200002ac

08005714 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory){
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
	reset_flight_phase_detection(flight_phase_detection);
 8005722:	68b8      	ldr	r0, [r7, #8]
 8005724:	f7fc fc6e 	bl	8002004 <reset_flight_phase_detection>
	reset_kf_state(kf_state);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7fc fc83 	bl	8002034 <reset_kf_state>
	init_env(environment);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc f9aa 	bl	8001a88 <init_env>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	23b0      	movs	r3, #176	; 0xb0
 800573a:	461a      	mov	r2, r3
 800573c:	2100      	movs	r1, #0
 800573e:	f012 fa24 	bl	8017b8a <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7fd f869 	bl	8002820 <select_noise_models>
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <vTaskXbee>:
command_xbee_t local_command_xbee;

command_e local_command;
bool new_command = false;

void vTaskXbee(void *argument) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b0b2      	sub	sp, #200	; 0xc8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	int32_t controller_output;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8005760:	f107 030c 	add.w	r3, r7, #12
 8005764:	2270      	movs	r2, #112	; 0x70
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f012 fa0e 	bl	8017b8a <memset>
	telemetry_send.flight_phase = IDLE;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	telemetry_send.mach_regime = SUBSONIC;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t rx = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

	/* Command struct */
	local_command = IDLE_COMMAND;
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <vTaskXbee+0x16c>)
 8005782:	229b      	movs	r2, #155	; 0x9b
 8005784:	701a      	strb	r2, [r3, #0]
	local_command_xbee = IDLE_XBEE_DATA;
 8005786:	4b50      	ldr	r3, [pc, #320]	; (80058c8 <vTaskXbee+0x170>)
 8005788:	4a50      	ldr	r2, [pc, #320]	; (80058cc <vTaskXbee+0x174>)
 800578a:	6810      	ldr	r0, [r2, #0]
 800578c:	6018      	str	r0, [r3, #0]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800578e:	f00d fcf7 	bl	8013180 <osKernelGetTickCount>
 8005792:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	tick_update = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8005796:	f00d fd1b 	bl	80131d0 <osKernelGetTickFreq>
 800579a:	4602      	mov	r2, r0
 800579c:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <vTaskXbee+0x178>)
 800579e:	fba3 2302 	umull	r2, r3, r3, r2
 80057a2:	08db      	lsrs	r3, r3, #3
 80057a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	HAL_UART_Receive_IT(&huart4, (uint8_t*) &local_command, sizeof(local_command));
 80057a8:	2201      	movs	r2, #1
 80057aa:	4946      	ldr	r1, [pc, #280]	; (80058c4 <vTaskXbee+0x16c>)
 80057ac:	4849      	ldr	r0, [pc, #292]	; (80058d4 <vTaskXbee+0x17c>)
 80057ae:	f005 ff31 	bl	800b614 <HAL_UART_Receive_IT>

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80057b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057ba:	4413      	add	r3, r2
 80057bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		/* Write command in Global Command Variable */
		if(AcquireMutex(&command_mutex) == osOK){
 80057c0:	4845      	ldr	r0, [pc, #276]	; (80058d8 <vTaskXbee+0x180>)
 80057c2:	f7fd ff75 	bl	80036b0 <AcquireMutex>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <vTaskXbee+0x82>
			global_telemetry_command = local_command;
 80057cc:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <vTaskXbee+0x16c>)
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	4b42      	ldr	r3, [pc, #264]	; (80058dc <vTaskXbee+0x184>)
 80057d2:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 80057d4:	4840      	ldr	r0, [pc, #256]	; (80058d8 <vTaskXbee+0x180>)
 80057d6:	f7fd ff85 	bl	80036e4 <ReleaseMutex>
		}
		if(new_command){
 80057da:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <vTaskXbee+0x188>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <vTaskXbee+0x96>
			local_command = IDLE_COMMAND;
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <vTaskXbee+0x16c>)
 80057e4:	229b      	movs	r2, #155	; 0x9b
 80057e6:	701a      	strb	r2, [r3, #0]
			new_command = false;
 80057e8:	4b3d      	ldr	r3, [pc, #244]	; (80058e0 <vTaskXbee+0x188>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
		}

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &telemetry_send.sb1.baro, sizeof(sb1_baro));
 80057ee:	f107 020c 	add.w	r2, r7, #12
 80057f2:	230c      	movs	r3, #12
 80057f4:	493b      	ldr	r1, [pc, #236]	; (80058e4 <vTaskXbee+0x18c>)
 80057f6:	483c      	ldr	r0, [pc, #240]	; (80058e8 <vTaskXbee+0x190>)
 80057f8:	f7fd ff82 	bl	8003700 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &telemetry_send.sb1.imu, sizeof(sb1_imu));
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	f103 020c 	add.w	r2, r3, #12
 8005804:	2310      	movs	r3, #16
 8005806:	4939      	ldr	r1, [pc, #228]	; (80058ec <vTaskXbee+0x194>)
 8005808:	4837      	ldr	r0, [pc, #220]	; (80058e8 <vTaskXbee+0x190>)
 800580a:	f7fd ff79 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_baro, &telemetry_send.sb2.baro, sizeof(sb2_baro));
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	f103 0220 	add.w	r2, r3, #32
 8005816:	230c      	movs	r3, #12
 8005818:	4935      	ldr	r1, [pc, #212]	; (80058f0 <vTaskXbee+0x198>)
 800581a:	4836      	ldr	r0, [pc, #216]	; (80058f4 <vTaskXbee+0x19c>)
 800581c:	f7fd ff70 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_imu, &telemetry_send.sb2.imu, sizeof(sb2_imu));
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005828:	2310      	movs	r3, #16
 800582a:	4933      	ldr	r1, [pc, #204]	; (80058f8 <vTaskXbee+0x1a0>)
 800582c:	4831      	ldr	r0, [pc, #196]	; (80058f4 <vTaskXbee+0x19c>)
 800582e:	f7fd ff67 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_baro, &telemetry_send.sb3.baro, sizeof(sb3_baro));
 8005832:	f107 030c 	add.w	r3, r7, #12
 8005836:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800583a:	230c      	movs	r3, #12
 800583c:	492f      	ldr	r1, [pc, #188]	; (80058fc <vTaskXbee+0x1a4>)
 800583e:	4830      	ldr	r0, [pc, #192]	; (8005900 <vTaskXbee+0x1a8>)
 8005840:	f7fd ff5e 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_imu, &telemetry_send.sb3.imu, sizeof(sb3_imu));
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800584c:	2310      	movs	r3, #16
 800584e:	492d      	ldr	r1, [pc, #180]	; (8005904 <vTaskXbee+0x1ac>)
 8005850:	482b      	ldr	r0, [pc, #172]	; (8005900 <vTaskXbee+0x1a8>)
 8005852:	f7fd ff55 	bl	8003700 <ReadMutex>

		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8005856:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800585a:	233c      	movs	r3, #60	; 0x3c
 800585c:	492a      	ldr	r1, [pc, #168]	; (8005908 <vTaskXbee+0x1b0>)
 800585e:	482b      	ldr	r0, [pc, #172]	; (800590c <vTaskXbee+0x1b4>)
 8005860:	f7fd ff4e 	bl	8003700 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &controller_output, sizeof(controller_output));
 8005864:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005868:	2304      	movs	r3, #4
 800586a:	4929      	ldr	r1, [pc, #164]	; (8005910 <vTaskXbee+0x1b8>)
 800586c:	4829      	ldr	r0, [pc, #164]	; (8005914 <vTaskXbee+0x1bc>)
 800586e:	f7fd ff47 	bl	8003700 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 8005872:	f107 030c 	add.w	r3, r7, #12
 8005876:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800587a:	2301      	movs	r3, #1
 800587c:	4926      	ldr	r1, [pc, #152]	; (8005918 <vTaskXbee+0x1c0>)
 800587e:	4827      	ldr	r0, [pc, #156]	; (800591c <vTaskXbee+0x1c4>)
 8005880:	f7fd ff3e 	bl	8003700 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.mach_regime, &telemetry_send.mach_regime, sizeof(global_flight_phase_detection.mach_regime));
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800588c:	2301      	movs	r3, #1
 800588e:	4924      	ldr	r1, [pc, #144]	; (8005920 <vTaskXbee+0x1c8>)
 8005890:	4822      	ldr	r0, [pc, #136]	; (800591c <vTaskXbee+0x1c4>)
 8005892:	f7fd ff35 	bl	8003700 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 8005896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800589a:	66fb      	str	r3, [r7, #108]	; 0x6c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 800589c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a0:	673b      	str	r3, [r7, #112]	; 0x70
		telemetry_send.ts = osKernelGetTickCount();
 80058a2:	f00d fc6d 	bl	8013180 <osKernelGetTickCount>
 80058a6:	4603      	mov	r3, r0
 80058a8:	677b      	str	r3, [r7, #116]	; 0x74

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart4, (uint8_t*) &telemetry_send, sizeof(telemetry_send), HAL_MAX_DELAY);
 80058aa:	f107 010c 	add.w	r1, r7, #12
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	2270      	movs	r2, #112	; 0x70
 80058b4:	4807      	ldr	r0, [pc, #28]	; (80058d4 <vTaskXbee+0x17c>)
 80058b6:	f005 fd4f 	bl	800b358 <HAL_UART_Transmit>



		/* Sleep */
		osDelayUntil(tick_count);
 80058ba:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80058be:	f00d fd65 	bl	801338c <osDelayUntil>
		tick_count += tick_update;
 80058c2:	e776      	b.n	80057b2 <vTaskXbee+0x5a>
 80058c4:	200271b0 	.word	0x200271b0
 80058c8:	200271b4 	.word	0x200271b4
 80058cc:	0801ab54 	.word	0x0801ab54
 80058d0:	cccccccd 	.word	0xcccccccd
 80058d4:	2001cc18 	.word	0x2001cc18
 80058d8:	20008b68 	.word	0x20008b68
 80058dc:	20014b54 	.word	0x20014b54
 80058e0:	20000430 	.word	0x20000430
 80058e4:	20000218 	.word	0x20000218
 80058e8:	20010a70 	.word	0x20010a70
 80058ec:	20000224 	.word	0x20000224
 80058f0:	20000234 	.word	0x20000234
 80058f4:	20026d00 	.word	0x20026d00
 80058f8:	20000240 	.word	0x20000240
 80058fc:	20000250 	.word	0x20000250
 8005900:	20010ae0 	.word	0x20010ae0
 8005904:	2000025c 	.word	0x2000025c
 8005908:	2000026c 	.word	0x2000026c
 800590c:	20010af0 	.word	0x20010af0
 8005910:	200002a8 	.word	0x200002a8
 8005914:	20010a60 	.word	0x20010a60
 8005918:	200002bc 	.word	0x200002bc
 800591c:	20008984 	.word	0x20008984
 8005920:	200002bd 	.word	0x200002bd

08005924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800595c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800592a:	e003      	b.n	8005934 <LoopCopyDataInit>

0800592c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800592e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005932:	3104      	adds	r1, #4

08005934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005934:	480b      	ldr	r0, [pc, #44]	; (8005964 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800593a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800593c:	d3f6      	bcc.n	800592c <CopyDataInit>
  ldr  r2, =_sbss
 800593e:	4a0b      	ldr	r2, [pc, #44]	; (800596c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005940:	e002      	b.n	8005948 <LoopFillZerobss>

08005942 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005944:	f842 3b04 	str.w	r3, [r2], #4

08005948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800594a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800594c:	d3f9      	bcc.n	8005942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800594e:	f7ff f8bb 	bl	8004ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005952:	f012 f8db 	bl	8017b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005956:	f7fe f923 	bl	8003ba0 <main>
  bx  lr    
 800595a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800595c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005960:	0801ad10 	.word	0x0801ad10
  ldr  r0, =_sdata
 8005964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005968:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800596c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8005970:	20028f40 	.word	0x20028f40

08005974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005974:	e7fe      	b.n	8005974 <ADC_IRQHandler>

08005976 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800597a:	2003      	movs	r0, #3
 800597c:	f000 f8f7 	bl	8005b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005980:	2000      	movs	r0, #0
 8005982:	f7fe ff9f 	bl	80048c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005986:	f7fe fd19 	bl	80043bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_IncTick+0x20>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_IncTick+0x24>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4413      	add	r3, r2
 80059a0:	4a04      	ldr	r2, [pc, #16]	; (80059b4 <HAL_IncTick+0x24>)
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000008 	.word	0x20000008
 80059b4:	200271b8 	.word	0x200271b8

080059b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  return uwTick;
 80059bc:	4b03      	ldr	r3, [pc, #12]	; (80059cc <HAL_GetTick+0x14>)
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	200271b8 	.word	0x200271b8

080059d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7ff ffee 	bl	80059b8 <HAL_GetTick>
 80059dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d005      	beq.n	80059f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_Delay+0x40>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059f6:	bf00      	nop
 80059f8:	f7ff ffde 	bl	80059b8 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d8f7      	bhi.n	80059f8 <HAL_Delay+0x28>
  {
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000008 	.word	0x20000008

08005a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <__NVIC_SetPriorityGrouping+0x40>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a30:	4013      	ands	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <__NVIC_SetPriorityGrouping+0x44>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <__NVIC_SetPriorityGrouping+0x40>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	60d3      	str	r3, [r2, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00
 8005a58:	05fa0000 	.word	0x05fa0000

08005a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <__NVIC_GetPriorityGrouping+0x18>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	f003 0307 	and.w	r3, r3, #7
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	db0b      	blt.n	8005aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	f003 021f 	and.w	r2, r3, #31
 8005a90:	4907      	ldr	r1, [pc, #28]	; (8005ab0 <__NVIC_EnableIRQ+0x38>)
 8005a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2001      	movs	r0, #1
 8005a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	e000e100 	.word	0xe000e100

08005ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db0a      	blt.n	8005ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	490c      	ldr	r1, [pc, #48]	; (8005b00 <__NVIC_SetPriority+0x4c>)
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	0112      	lsls	r2, r2, #4
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005adc:	e00a      	b.n	8005af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4908      	ldr	r1, [pc, #32]	; (8005b04 <__NVIC_SetPriority+0x50>)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	3b04      	subs	r3, #4
 8005aec:	0112      	lsls	r2, r2, #4
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	440b      	add	r3, r1
 8005af2:	761a      	strb	r2, [r3, #24]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000e100 	.word	0xe000e100
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f1c3 0307 	rsb	r3, r3, #7
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	bf28      	it	cs
 8005b26:	2304      	movcs	r3, #4
 8005b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d902      	bls.n	8005b38 <NVIC_EncodePriority+0x30>
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3b03      	subs	r3, #3
 8005b36:	e000      	b.n	8005b3a <NVIC_EncodePriority+0x32>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43da      	mvns	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b50:	f04f 31ff 	mov.w	r1, #4294967295
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	43d9      	mvns	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b60:	4313      	orrs	r3, r2
         );
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff4c 	bl	8005a14 <__NVIC_SetPriorityGrouping>
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b96:	f7ff ff61 	bl	8005a5c <__NVIC_GetPriorityGrouping>
 8005b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	6978      	ldr	r0, [r7, #20]
 8005ba2:	f7ff ffb1 	bl	8005b08 <NVIC_EncodePriority>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff80 	bl	8005ab4 <__NVIC_SetPriority>
}
 8005bb4:	bf00      	nop
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff54 	bl	8005a78 <__NVIC_EnableIRQ>
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005be4:	f7ff fee8 	bl	80059b8 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e099      	b.n	8005d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c14:	e00f      	b.n	8005c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c16:	f7ff fecf 	bl	80059b8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d908      	bls.n	8005c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e078      	b.n	8005d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e8      	bne.n	8005c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <HAL_DMA_Init+0x158>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d107      	bne.n	8005ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d117      	bne.n	8005cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00e      	beq.n	8005cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 faa5 	bl	800622c <DMA_CheckFifoParam>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2240      	movs	r2, #64	; 0x40
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e016      	b.n	8005d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa5c 	bl	80061c0 <DMA_CalcBaseAndBitshift>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d10:	223f      	movs	r2, #63	; 0x3f
 8005d12:	409a      	lsls	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	f010803f 	.word	0xf010803f

08005d34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_DMA_Start_IT+0x26>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e048      	b.n	8005dec <HAL_DMA_Start_IT+0xb8>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d137      	bne.n	8005dde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f9ee 	bl	8006164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	223f      	movs	r2, #63	; 0x3f
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0216 	orr.w	r2, r2, #22
 8005da2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005db2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0208 	orr.w	r2, r2, #8
 8005dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e005      	b.n	8005dea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
 8005de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d004      	beq.n	8005e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2280      	movs	r2, #128	; 0x80
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e00c      	b.n	8005e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2205      	movs	r2, #5
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e44:	4b92      	ldr	r3, [pc, #584]	; (8006090 <HAL_DMA_IRQHandler+0x258>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a92      	ldr	r2, [pc, #584]	; (8006094 <HAL_DMA_IRQHandler+0x25c>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	0a9b      	lsrs	r3, r3, #10
 8005e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	2208      	movs	r2, #8
 8005e64:	409a      	lsls	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d013      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0204 	bic.w	r2, r2, #4
 8005e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	2208      	movs	r2, #8
 8005e92:	409a      	lsls	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9c:	f043 0201 	orr.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d012      	beq.n	8005eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	f043 0202 	orr.w	r2, r3, #2
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	2204      	movs	r2, #4
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	2204      	movs	r2, #4
 8005efe:	409a      	lsls	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	f043 0204 	orr.w	r2, r3, #4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	2210      	movs	r2, #16
 8005f16:	409a      	lsls	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d043      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03c      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f32:	2210      	movs	r2, #16
 8005f34:	409a      	lsls	r2, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d018      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d108      	bne.n	8005f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d024      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
 8005f66:	e01f      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
 8005f78:	e016      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d107      	bne.n	8005f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0208 	bic.w	r2, r2, #8
 8005f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	2220      	movs	r2, #32
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 808e 	beq.w	80060d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8086 	beq.w	80060d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fce:	2220      	movs	r2, #32
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d136      	bne.n	8006050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0216 	bic.w	r2, r2, #22
 8005ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <HAL_DMA_IRQHandler+0x1da>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0208 	bic.w	r2, r2, #8
 8006020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	223f      	movs	r2, #63	; 0x3f
 8006028:	409a      	lsls	r2, r3
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006042:	2b00      	cmp	r3, #0
 8006044:	d07d      	beq.n	8006142 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
        }
        return;
 800604e:	e078      	b.n	8006142 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01c      	beq.n	8006098 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d108      	bne.n	800607e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	2b00      	cmp	r3, #0
 8006072:	d030      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e02b      	b.n	80060d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d027      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
 800608e:	e022      	b.n	80060d6 <HAL_DMA_IRQHandler+0x29e>
 8006090:	20000000 	.word	0x20000000
 8006094:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0210 	bic.w	r2, r2, #16
 80060b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d032      	beq.n	8006144 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d022      	beq.n	8006130 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2205      	movs	r2, #5
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3301      	adds	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	429a      	cmp	r2, r3
 800610c:	d307      	bcc.n	800611e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f2      	bne.n	8006102 <HAL_DMA_IRQHandler+0x2ca>
 800611c:	e000      	b.n	8006120 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800611e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e000      	b.n	8006144 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006142:	bf00      	nop
    }
  }
}
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop

0800614c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d108      	bne.n	80061a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061a2:	e007      	b.n	80061b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	3b10      	subs	r3, #16
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <DMA_CalcBaseAndBitshift+0x60>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061da:	4a12      	ldr	r2, [pc, #72]	; (8006224 <DMA_CalcBaseAndBitshift+0x64>)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d908      	bls.n	8006200 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <DMA_CalcBaseAndBitshift+0x68>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	659a      	str	r2, [r3, #88]	; 0x58
 80061fe:	e006      	b.n	800620e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <DMA_CalcBaseAndBitshift+0x68>)
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	aaaaaaab 	.word	0xaaaaaaab
 8006224:	0801ab58 	.word	0x0801ab58
 8006228:	fffffc00 	.word	0xfffffc00

0800622c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11f      	bne.n	8006286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d855      	bhi.n	80062f8 <DMA_CheckFifoParam+0xcc>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <DMA_CheckFifoParam+0x28>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006265 	.word	0x08006265
 8006258:	08006277 	.word	0x08006277
 800625c:	08006265 	.word	0x08006265
 8006260:	080062f9 	.word	0x080062f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d045      	beq.n	80062fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006274:	e042      	b.n	80062fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800627e:	d13f      	bne.n	8006300 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006284:	e03c      	b.n	8006300 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	d121      	bne.n	80062d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d836      	bhi.n	8006304 <DMA_CheckFifoParam+0xd8>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <DMA_CheckFifoParam+0x70>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062b3 	.word	0x080062b3
 80062a4:	080062ad 	.word	0x080062ad
 80062a8:	080062c5 	.word	0x080062c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
      break;
 80062b0:	e02f      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d024      	beq.n	8006308 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c2:	e021      	b.n	8006308 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062cc:	d11e      	bne.n	800630c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062d2:	e01b      	b.n	800630c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d902      	bls.n	80062e0 <DMA_CheckFifoParam+0xb4>
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d003      	beq.n	80062e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062de:	e018      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e015      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00e      	beq.n	8006310 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      break;
 80062f6:	e00b      	b.n	8006310 <DMA_CheckFifoParam+0xe4>
      break;
 80062f8:	bf00      	nop
 80062fa:	e00a      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;
 80062fc:	bf00      	nop
 80062fe:	e008      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;
 8006300:	bf00      	nop
 8006302:	e006      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;
 8006304:	bf00      	nop
 8006306:	e004      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;
 8006308:	bf00      	nop
 800630a:	e002      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;   
 800630c:	bf00      	nop
 800630e:	e000      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
      break;
 8006310:	bf00      	nop
    }
  } 
  
  return status; 
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	e175      	b.n	800662c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006340:	2201      	movs	r2, #1
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4013      	ands	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	f040 8164 	bne.w	8006626 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d00b      	beq.n	800637e <HAL_GPIO_Init+0x5e>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d007      	beq.n	800637e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006372:	2b11      	cmp	r3, #17
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b12      	cmp	r3, #18
 800637c:	d130      	bne.n	80063e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	2203      	movs	r2, #3
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4013      	ands	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063b4:	2201      	movs	r2, #1
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	f003 0201 	and.w	r2, r3, #1
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	2203      	movs	r2, #3
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4313      	orrs	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d003      	beq.n	8006420 <HAL_GPIO_Init+0x100>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b12      	cmp	r3, #18
 800641e:	d123      	bne.n	8006468 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	08da      	lsrs	r2, r3, #3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3208      	adds	r2, #8
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	220f      	movs	r2, #15
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4013      	ands	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	4313      	orrs	r3, r2
 8006458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	08da      	lsrs	r2, r3, #3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3208      	adds	r2, #8
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	2203      	movs	r2, #3
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4013      	ands	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 0203 	and.w	r2, r3, #3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80be 	beq.w	8006626 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <HAL_GPIO_Init+0x320>)
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	4a64      	ldr	r2, [pc, #400]	; (8006640 <HAL_GPIO_Init+0x320>)
 80064b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064b4:	6453      	str	r3, [r2, #68]	; 0x44
 80064b6:	4b62      	ldr	r3, [pc, #392]	; (8006640 <HAL_GPIO_Init+0x320>)
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80064c2:	4a60      	ldr	r2, [pc, #384]	; (8006644 <HAL_GPIO_Init+0x324>)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	3302      	adds	r3, #2
 80064ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	220f      	movs	r2, #15
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4013      	ands	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_GPIO_Init+0x328>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d037      	beq.n	800655e <HAL_GPIO_Init+0x23e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a56      	ldr	r2, [pc, #344]	; (800664c <HAL_GPIO_Init+0x32c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_GPIO_Init+0x23a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a55      	ldr	r2, [pc, #340]	; (8006650 <HAL_GPIO_Init+0x330>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02b      	beq.n	8006556 <HAL_GPIO_Init+0x236>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a54      	ldr	r2, [pc, #336]	; (8006654 <HAL_GPIO_Init+0x334>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d025      	beq.n	8006552 <HAL_GPIO_Init+0x232>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a53      	ldr	r2, [pc, #332]	; (8006658 <HAL_GPIO_Init+0x338>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01f      	beq.n	800654e <HAL_GPIO_Init+0x22e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a52      	ldr	r2, [pc, #328]	; (800665c <HAL_GPIO_Init+0x33c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d019      	beq.n	800654a <HAL_GPIO_Init+0x22a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a51      	ldr	r2, [pc, #324]	; (8006660 <HAL_GPIO_Init+0x340>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_GPIO_Init+0x226>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a50      	ldr	r2, [pc, #320]	; (8006664 <HAL_GPIO_Init+0x344>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00d      	beq.n	8006542 <HAL_GPIO_Init+0x222>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4f      	ldr	r2, [pc, #316]	; (8006668 <HAL_GPIO_Init+0x348>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <HAL_GPIO_Init+0x21e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4e      	ldr	r2, [pc, #312]	; (800666c <HAL_GPIO_Init+0x34c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_GPIO_Init+0x21a>
 8006536:	2309      	movs	r3, #9
 8006538:	e012      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800653a:	230a      	movs	r3, #10
 800653c:	e010      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800653e:	2308      	movs	r3, #8
 8006540:	e00e      	b.n	8006560 <HAL_GPIO_Init+0x240>
 8006542:	2307      	movs	r3, #7
 8006544:	e00c      	b.n	8006560 <HAL_GPIO_Init+0x240>
 8006546:	2306      	movs	r3, #6
 8006548:	e00a      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800654a:	2305      	movs	r3, #5
 800654c:	e008      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800654e:	2304      	movs	r3, #4
 8006550:	e006      	b.n	8006560 <HAL_GPIO_Init+0x240>
 8006552:	2303      	movs	r3, #3
 8006554:	e004      	b.n	8006560 <HAL_GPIO_Init+0x240>
 8006556:	2302      	movs	r3, #2
 8006558:	e002      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_GPIO_Init+0x240>
 800655e:	2300      	movs	r3, #0
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	f002 0203 	and.w	r2, r2, #3
 8006566:	0092      	lsls	r2, r2, #2
 8006568:	4093      	lsls	r3, r2
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006570:	4934      	ldr	r1, [pc, #208]	; (8006644 <HAL_GPIO_Init+0x324>)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	3302      	adds	r3, #2
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800657e:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <HAL_GPIO_Init+0x350>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065a2:	4a33      	ldr	r2, [pc, #204]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065cc:	4a28      	ldr	r2, [pc, #160]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <HAL_GPIO_Init+0x350>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <HAL_GPIO_Init+0x350>)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	f67f ae86 	bls.w	8006340 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006634:	bf00      	nop
 8006636:	3724      	adds	r7, #36	; 0x24
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40023800 	.word	0x40023800
 8006644:	40013800 	.word	0x40013800
 8006648:	40020000 	.word	0x40020000
 800664c:	40020400 	.word	0x40020400
 8006650:	40020800 	.word	0x40020800
 8006654:	40020c00 	.word	0x40020c00
 8006658:	40021000 	.word	0x40021000
 800665c:	40021400 	.word	0x40021400
 8006660:	40021800 	.word	0x40021800
 8006664:	40021c00 	.word	0x40021c00
 8006668:	40022000 	.word	0x40022000
 800666c:	40022400 	.word	0x40022400
 8006670:	40013c00 	.word	0x40013c00

08006674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	807b      	strh	r3, [r7, #2]
 8006680:	4613      	mov	r3, r2
 8006682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006684:	787b      	ldrb	r3, [r7, #1]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006690:	e003      	b.n	800669a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	041a      	lsls	r2, r3, #16
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	619a      	str	r2, [r3, #24]
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	041a      	lsls	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80066c6:	e002      	b.n	80066ce <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066c8:	887a      	ldrh	r2, [r7, #2]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	619a      	str	r2, [r3, #24]
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066dc:	b08f      	sub	sp, #60	; 0x3c
 80066de:	af0a      	add	r7, sp, #40	; 0x28
 80066e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e116      	b.n	800691a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f010 fea8 	bl	801745c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2203      	movs	r2, #3
 8006710:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f006 fcc3 	bl	800d0b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	687e      	ldr	r6, [r7, #4]
 8006738:	466d      	mov	r5, sp
 800673a:	f106 0410 	add.w	r4, r6, #16
 800673e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006746:	e894 0003 	ldmia.w	r4, {r0, r1}
 800674a:	e885 0003 	stmia.w	r5, {r0, r1}
 800674e:	1d33      	adds	r3, r6, #4
 8006750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006752:	6838      	ldr	r0, [r7, #0]
 8006754:	f006 fba4 	bl	800cea0 <USB_CoreInit>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e0d7      	b.n	800691a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f006 fcb1 	bl	800d0d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
 800677a:	e04a      	b.n	8006812 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800677c:	7bfa      	ldrb	r2, [r7, #15]
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	333d      	adds	r3, #61	; 0x3d
 800678c:	2201      	movs	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006790:	7bfa      	ldrb	r2, [r7, #15]
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	333c      	adds	r3, #60	; 0x3c
 80067a0:	7bfa      	ldrb	r2, [r7, #15]
 80067a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067a4:	7bfa      	ldrb	r2, [r7, #15]
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	b298      	uxth	r0, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	3342      	adds	r3, #66	; 0x42
 80067b8:	4602      	mov	r2, r0
 80067ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067bc:	7bfa      	ldrb	r2, [r7, #15]
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	333f      	adds	r3, #63	; 0x3f
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067d0:	7bfa      	ldrb	r2, [r7, #15]
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	3344      	adds	r3, #68	; 0x44
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067e4:	7bfa      	ldrb	r2, [r7, #15]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	3348      	adds	r3, #72	; 0x48
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067f8:	7bfa      	ldrb	r2, [r7, #15]
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	3350      	adds	r3, #80	; 0x50
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	3301      	adds	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d3af      	bcc.n	800677c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e044      	b.n	80068ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006838:	7bfa      	ldrb	r2, [r7, #15]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800684e:	7bfa      	ldrb	r2, [r7, #15]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800687a:	7bfa      	ldrb	r2, [r7, #15]
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006890:	7bfa      	ldrb	r2, [r7, #15]
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	1a9b      	subs	r3, r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	3301      	adds	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	7bfa      	ldrb	r2, [r7, #15]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3b5      	bcc.n	8006822 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	687e      	ldr	r6, [r7, #4]
 80068be:	466d      	mov	r5, sp
 80068c0:	f106 0410 	add.w	r4, r6, #16
 80068c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80068d4:	1d33      	adds	r3, r6, #4
 80068d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f006 fc27 	bl	800d12c <USB_DevInit>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e014      	b.n	800691a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	2b01      	cmp	r3, #1
 8006906:	d102      	bne.n	800690e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 f881 	bl	8007a10 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f007 fc76 	bl	800e204 <USB_DevDisconnect>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006922 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_PCD_Start+0x16>
 8006934:	2302      	movs	r3, #2
 8006936:	e012      	b.n	800695e <HAL_PCD_Start+0x3c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f007 fc45 	bl	800e1d4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f006 fba0 	bl	800d094 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006966:	b590      	push	{r4, r7, lr}
 8006968:	b08d      	sub	sp, #52	; 0x34
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f007 fcec 	bl	800e35a <USB_GetMode>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 83ca 	bne.w	800711e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f007 fc50 	bl	800e234 <USB_ReadInterrupts>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 83c0 	beq.w	800711c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f007 fc47 	bl	800e234 <USB_ReadInterrupts>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d107      	bne.n	80069c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f002 0202 	and.w	r2, r2, #2
 80069be:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f007 fc35 	bl	800e234 <USB_ReadInterrupts>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d161      	bne.n	8006a98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0210 	bic.w	r2, r2, #16
 80069e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f003 020f 	and.w	r2, r3, #15
 80069f0:	4613      	mov	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	3304      	adds	r3, #4
 8006a02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	0c5b      	lsrs	r3, r3, #17
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d124      	bne.n	8006a5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d035      	beq.n	8006a88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6a38      	ldr	r0, [r7, #32]
 8006a30:	f007 faad 	bl	800df8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a40:	441a      	add	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a52:	441a      	add	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	619a      	str	r2, [r3, #24]
 8006a58:	e016      	b.n	8006a88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	0c5b      	lsrs	r3, r3, #17
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d110      	bne.n	8006a88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6a38      	ldr	r0, [r7, #32]
 8006a72:	f007 fa8c 	bl	800df8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a82:	441a      	add	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0210 	orr.w	r2, r2, #16
 8006a96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f007 fbc9 	bl	800e234 <USB_ReadInterrupts>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006aac:	d16e      	bne.n	8006b8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f007 fbcf 	bl	800e25a <USB_ReadDevAllOutEpInterrupt>
 8006abc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006abe:	e062      	b.n	8006b86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d057      	beq.n	8006b7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f007 fbf4 	bl	800e2c2 <USB_ReadDevOutEPInterrupt>
 8006ada:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	461a      	mov	r2, r3
 8006af4:	2301      	movs	r3, #1
 8006af6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fdde 	bl	80076bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	2308      	movs	r3, #8
 8006b1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fed8 	bl	80078d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	461a      	mov	r2, r3
 8006b58:	2320      	movs	r3, #32
 8006b5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	461a      	mov	r2, r3
 8006b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d199      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f007 fb4f 	bl	800e234 <USB_ReadInterrupts>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba0:	f040 80c0 	bne.w	8006d24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f007 fb70 	bl	800e28e <USB_ReadDevAllInEpInterrupt>
 8006bae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006bb4:	e0b2      	b.n	8006d1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80a7 	beq.w	8006d10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f007 fb96 	bl	800e2fe <USB_ReadDevInEPInterrupt>
 8006bd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d057      	beq.n	8006c8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	2201      	movs	r2, #1
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bfe:	4013      	ands	r3, r2
 8006c00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2301      	movs	r3, #1
 8006c12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d132      	bne.n	8006c82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	3348      	adds	r3, #72	; 0x48
 8006c2c:	6819      	ldr	r1, [r3, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4403      	add	r3, r0
 8006c3c:	3344      	adds	r3, #68	; 0x44
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4419      	add	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4403      	add	r3, r0
 8006c50:	3348      	adds	r3, #72	; 0x48
 8006c52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d113      	bne.n	8006c82 <HAL_PCD_IRQHandler+0x31c>
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	3350      	adds	r3, #80	; 0x50
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d108      	bne.n	8006c82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	f007 fb9f 	bl	800e3c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f010 fc6a 	bl	8017562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc48 	bl	80075a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	3301      	adds	r3, #1
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f47f af49 	bne.w	8006bb6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f007 fa83 	bl	800e234 <USB_ReadInterrupts>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d38:	d122      	bne.n	8006d80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d108      	bne.n	8006d6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f010 fe4c 	bl	8017a00 <HAL_PCDEx_LPM_Callback>
 8006d68:	e002      	b.n	8006d70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f010 fc70 	bl	8017650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695a      	ldr	r2, [r3, #20]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f007 fa55 	bl	800e234 <USB_ReadInterrupts>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d94:	d112      	bne.n	8006dbc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d102      	bne.n	8006dac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f010 fc2c 	bl	8017604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006dba:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f007 fa37 	bl	800e234 <USB_ReadInterrupts>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd0:	d121      	bne.n	8006e16 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006de0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d111      	bne.n	8006e10 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	f003 020f 	and.w	r2, r3, #15
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006e06:	2101      	movs	r1, #1
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f010 fdf9 	bl	8017a00 <HAL_PCDEx_LPM_Callback>
 8006e0e:	e002      	b.n	8006e16 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f010 fbf7 	bl	8017604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f007 fa0a 	bl	800e234 <USB_ReadInterrupts>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	f040 80c7 	bne.w	8006fbc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2110      	movs	r1, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f006 fadd 	bl	800d408 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e52:	e056      	b.n	8006f02 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	461a      	mov	r2, r3
 8006e62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e86:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ea6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006efa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	3301      	adds	r3, #1
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d3a3      	bcc.n	8006e54 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006f1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d016      	beq.n	8006f56 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f38:	f043 030b 	orr.w	r3, r3, #11
 8006f3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f4e:	f043 030b 	orr.w	r3, r3, #11
 8006f52:	6453      	str	r3, [r2, #68]	; 0x44
 8006f54:	e015      	b.n	8006f82 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5c:	695a      	ldr	r2, [r3, #20]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	4619      	mov	r1, r3
 8006f66:	f242 032b 	movw	r3, #8235	; 0x202b
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7c:	f043 030b 	orr.w	r3, r3, #11
 8006f80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f007 fa0a 	bl	800e3c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f007 f937 	bl	800e234 <USB_ReadInterrupts>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd0:	d124      	bne.n	800701c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f007 f9ce 	bl	800e378 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f006 fa72 	bl	800d4ca <USB_GetDevSpeed>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681c      	ldr	r4, [r3, #0]
 8006ff2:	f001 f999 	bl	8008328 <HAL_RCC_GetHCLKFreq>
 8006ff6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	4620      	mov	r0, r4
 8007002:	f005 ffa5 	bl	800cf50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f010 fad3 	bl	80175b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800701a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f007 f907 	bl	800e234 <USB_ReadInterrupts>
 8007026:	4603      	mov	r3, r0
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b08      	cmp	r3, #8
 800702e:	d10a      	bne.n	8007046 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f010 fab0 	bl	8017596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f002 0208 	and.w	r2, r2, #8
 8007044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f007 f8f2 	bl	800e234 <USB_ReadInterrupts>
 8007050:	4603      	mov	r3, r0
 8007052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705a:	d10f      	bne.n	800707c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f010 fb12 	bl	8017690 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800707a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4618      	mov	r0, r3
 8007082:	f007 f8d7 	bl	800e234 <USB_ReadInterrupts>
 8007086:	4603      	mov	r3, r0
 8007088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800708c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007090:	d10f      	bne.n	80070b2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	b2db      	uxtb	r3, r3
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f010 fae5 	bl	801766c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695a      	ldr	r2, [r3, #20]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f007 f8bc 	bl	800e234 <USB_ReadInterrupts>
 80070bc:	4603      	mov	r3, r0
 80070be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c6:	d10a      	bne.n	80070de <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f010 faf3 	bl	80176b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695a      	ldr	r2, [r3, #20]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f007 f8a6 	bl	800e234 <USB_ReadInterrupts>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d115      	bne.n	800711e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f010 fae3 	bl	80176d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	e000      	b.n	800711e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800711c:	bf00      	nop
    }
  }
}
 800711e:	3734      	adds	r7, #52	; 0x34
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}

08007124 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_PCD_SetAddress+0x1a>
 800713a:	2302      	movs	r3, #2
 800713c:	e013      	b.n	8007166 <HAL_PCD_SetAddress+0x42>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f007 f816 	bl	800e188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	4608      	mov	r0, r1
 8007178:	4611      	mov	r1, r2
 800717a:	461a      	mov	r2, r3
 800717c:	4603      	mov	r3, r0
 800717e:	70fb      	strb	r3, [r7, #3]
 8007180:	460b      	mov	r3, r1
 8007182:	803b      	strh	r3, [r7, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800718c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	da0f      	bge.n	80071b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	f003 020f 	and.w	r2, r3, #15
 800719a:	4613      	mov	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	3338      	adds	r3, #56	; 0x38
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	4413      	add	r3, r2
 80071a8:	3304      	adds	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	705a      	strb	r2, [r3, #1]
 80071b2:	e00f      	b.n	80071d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	f003 020f 	and.w	r2, r3, #15
 80071ba:	4613      	mov	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071e0:	883a      	ldrh	r2, [r7, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	78ba      	ldrb	r2, [r7, #2]
 80071ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071fe:	78bb      	ldrb	r3, [r7, #2]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d102      	bne.n	800720a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_PCD_EP_Open+0xaa>
 8007214:	2302      	movs	r3, #2
 8007216:	e00e      	b.n	8007236 <HAL_PCD_EP_Open+0xc8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68f9      	ldr	r1, [r7, #12]
 8007226:	4618      	mov	r0, r3
 8007228:	f006 f974 	bl	800d514 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007234:	7afb      	ldrb	r3, [r7, #11]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800724a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800724e:	2b00      	cmp	r3, #0
 8007250:	da0f      	bge.n	8007272 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	1a9b      	subs	r3, r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	3338      	adds	r3, #56	; 0x38
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	3304      	adds	r3, #4
 8007268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	705a      	strb	r2, [r3, #1]
 8007270:	e00f      	b.n	8007292 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 020f 	and.w	r2, r3, #15
 8007278:	4613      	mov	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	3304      	adds	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_PCD_EP_Close+0x6e>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e00e      	b.n	80072ca <HAL_PCD_EP_Close+0x8c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f006 f9b2 	bl	800d624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	460b      	mov	r3, r1
 80072e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	3304      	adds	r3, #4
 80072fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2200      	movs	r2, #0
 800730c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2200      	movs	r2, #0
 8007312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	b2da      	uxtb	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	f006 fc95 	bl	800dc74 <USB_EP0StartXfer>
 800734a:	e008      	b.n	800735e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	f006 fa3f 	bl	800d7dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	f003 020f 	and.w	r2, r3, #15
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800738a:	681b      	ldr	r3, [r3, #0]
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	460b      	mov	r3, r1
 80073a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073a8:	7afb      	ldrb	r3, [r7, #11]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	3338      	adds	r3, #56	; 0x38
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2200      	movs	r2, #0
 80073d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2201      	movs	r2, #1
 80073d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d102      	bne.n	80073f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	f006 fc33 	bl	800dc74 <USB_EP0StartXfer>
 800740e:	e008      	b.n	8007422 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	f006 f9dd 	bl	800d7dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d901      	bls.n	800744a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e050      	b.n	80074ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800744a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da0f      	bge.n	8007472 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	3338      	adds	r3, #56	; 0x38
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	3304      	adds	r3, #4
 8007468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	705a      	strb	r2, [r3, #1]
 8007470:	e00d      	b.n	800748e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4413      	add	r3, r2
 8007484:	3304      	adds	r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	b2da      	uxtb	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_PCD_EP_SetStall+0x82>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e01e      	b.n	80074ec <HAL_PCD_EP_SetStall+0xc0>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	4618      	mov	r0, r3
 80074be:	f006 fd8f 	bl	800dfe0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	b2d9      	uxtb	r1, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074dc:	461a      	mov	r2, r3
 80074de:	f006 ff6f 	bl	800e3c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	f003 020f 	and.w	r2, r3, #15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d901      	bls.n	8007512 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e042      	b.n	8007598 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007516:	2b00      	cmp	r3, #0
 8007518:	da0f      	bge.n	800753a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	f003 020f 	and.w	r2, r3, #15
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	3338      	adds	r3, #56	; 0x38
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	705a      	strb	r2, [r3, #1]
 8007538:	e00f      	b.n	800755a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	4613      	mov	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_PCD_EP_ClrStall+0x86>
 8007576:	2302      	movs	r3, #2
 8007578:	e00e      	b.n	8007598 <HAL_PCD_EP_ClrStall+0xa4>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	4618      	mov	r0, r3
 800758a:	f006 fd97 	bl	800e0bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	3338      	adds	r3, #56	; 0x38
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	3304      	adds	r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d901      	bls.n	80075d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e06c      	b.n	80076b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d902      	bls.n	80075f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	3303      	adds	r3, #3
 80075f8:	089b      	lsrs	r3, r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075fc:	e02b      	b.n	8007656 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	429a      	cmp	r2, r3
 8007612:	d902      	bls.n	800761a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3303      	adds	r3, #3
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68d9      	ldr	r1, [r3, #12]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007632:	b2db      	uxtb	r3, r3
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4603      	mov	r3, r0
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	f006 fc73 	bl	800df24 <USB_WritePacket>

    ep->xfer_buff  += len;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	b29b      	uxth	r3, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	429a      	cmp	r2, r3
 800766a:	d809      	bhi.n	8007680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	699a      	ldr	r2, [r3, #24]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007674:	429a      	cmp	r2, r3
 8007676:	d203      	bcs.n	8007680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1be      	bne.n	80075fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d811      	bhi.n	80076b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	2201      	movs	r2, #1
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	6939      	ldr	r1, [r7, #16]
 80076a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ac:	4013      	ands	r3, r2
 80076ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	333c      	adds	r3, #60	; 0x3c
 80076d4:	3304      	adds	r3, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	f040 80a0 	bne.w	8007834 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d015      	beq.n	800772a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a72      	ldr	r2, [pc, #456]	; (80078cc <PCD_EP_OutXfrComplete_int+0x210>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f240 80dd 	bls.w	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80d7 	beq.w	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	461a      	mov	r2, r3
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	6093      	str	r3, [r2, #8]
 8007728:	e0cb      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	461a      	mov	r2, r3
 8007742:	2320      	movs	r3, #32
 8007744:	6093      	str	r3, [r2, #8]
 8007746:	e0bc      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 80b7 	bne.w	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a5d      	ldr	r2, [pc, #372]	; (80078cc <PCD_EP_OutXfrComplete_int+0x210>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d90f      	bls.n	800777c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007778:	6093      	str	r3, [r2, #8]
 800777a:	e0a2      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800778e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	0159      	lsls	r1, r3, #5
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	440b      	add	r3, r1
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80077a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4403      	add	r3, r0
 80077b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80077b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4403      	add	r3, r0
 80077da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4419      	add	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	4613      	mov	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4403      	add	r3, r0
 80077f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d114      	bne.n	8007826 <PCD_EP_OutXfrComplete_int+0x16a>
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d108      	bne.n	8007826 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800781e:	461a      	mov	r2, r3
 8007820:	2101      	movs	r1, #1
 8007822:	f006 fdcd 	bl	800e3c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f00f fe7d 	bl	801752c <HAL_PCD_DataOutStageCallback>
 8007832:	e046      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a26      	ldr	r2, [pc, #152]	; (80078d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d124      	bne.n	8007886 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	461a      	mov	r2, r3
 8007854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007858:	6093      	str	r3, [r2, #8]
 800785a:	e032      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	461a      	mov	r2, r3
 8007874:	2320      	movs	r3, #32
 8007876:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f00f fe54 	bl	801752c <HAL_PCD_DataOutStageCallback>
 8007884:	e01d      	b.n	80078c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d114      	bne.n	80078b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ae:	461a      	mov	r2, r3
 80078b0:	2100      	movs	r1, #0
 80078b2:	f006 fd85 	bl	800e3c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f00f fe35 	bl	801752c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	4f54300a 	.word	0x4f54300a
 80078d0:	4f54310a 	.word	0x4f54310a

080078d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	333c      	adds	r3, #60	; 0x3c
 80078ec:	3304      	adds	r3, #4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a15      	ldr	r2, [pc, #84]	; (800795c <PCD_EP_OutSetupPacket_int+0x88>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d90e      	bls.n	8007928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007910:	2b00      	cmp	r3, #0
 8007912:	d009      	beq.n	8007928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007920:	461a      	mov	r2, r3
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f00f fded 	bl	8017508 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4a0a      	ldr	r2, [pc, #40]	; (800795c <PCD_EP_OutSetupPacket_int+0x88>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d90c      	bls.n	8007950 <PCD_EP_OutSetupPacket_int+0x7c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d108      	bne.n	8007950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007948:	461a      	mov	r2, r3
 800794a:	2101      	movs	r1, #1
 800794c:	f006 fd38 	bl	800e3c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	4f54300a 	.word	0x4f54300a

08007960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
 800796c:	4613      	mov	r3, r2
 800796e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800797e:	883b      	ldrh	r3, [r7, #0]
 8007980:	0419      	lsls	r1, r3, #16
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	430a      	orrs	r2, r1
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
 800798c:	e028      	b.n	80079e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e00d      	b.n	80079be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	3340      	adds	r3, #64	; 0x40
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	3301      	adds	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d3ec      	bcc.n	80079a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079c8:	883b      	ldrh	r3, [r7, #0]
 80079ca:	0418      	lsls	r0, r3, #16
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4302      	orrs	r2, r0
 80079d8:	3340      	adds	r3, #64	; 0x40
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	887a      	ldrh	r2, [r7, #2]
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <HAL_PCDEx_ActivateLPM+0x44>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	10000003 	.word	0x10000003

08007a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a60:	2300      	movs	r3, #0
 8007a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e291      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8087 	beq.w	8007b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a7c:	4b96      	ldr	r3, [pc, #600]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f003 030c 	and.w	r3, r3, #12
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d00c      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a88:	4b93      	ldr	r3, [pc, #588]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 030c 	and.w	r3, r3, #12
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d112      	bne.n	8007aba <HAL_RCC_OscConfig+0x62>
 8007a94:	4b90      	ldr	r3, [pc, #576]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa0:	d10b      	bne.n	8007aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa2:	4b8d      	ldr	r3, [pc, #564]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d06c      	beq.n	8007b88 <HAL_RCC_OscConfig+0x130>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d168      	bne.n	8007b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e26b      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x7a>
 8007ac4:	4b84      	ldr	r3, [pc, #528]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a83      	ldr	r2, [pc, #524]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	e02e      	b.n	8007b30 <HAL_RCC_OscConfig+0xd8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCC_OscConfig+0x9c>
 8007ada:	4b7f      	ldr	r3, [pc, #508]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a7e      	ldr	r2, [pc, #504]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	4b7c      	ldr	r3, [pc, #496]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a7b      	ldr	r2, [pc, #492]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	e01d      	b.n	8007b30 <HAL_RCC_OscConfig+0xd8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCC_OscConfig+0xc0>
 8007afe:	4b76      	ldr	r3, [pc, #472]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a75      	ldr	r2, [pc, #468]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	4b73      	ldr	r3, [pc, #460]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a72      	ldr	r2, [pc, #456]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e00b      	b.n	8007b30 <HAL_RCC_OscConfig+0xd8>
 8007b18:	4b6f      	ldr	r3, [pc, #444]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a6e      	ldr	r2, [pc, #440]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	4b6c      	ldr	r3, [pc, #432]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a6b      	ldr	r2, [pc, #428]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d013      	beq.n	8007b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fd ff3e 	bl	80059b8 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b40:	f7fd ff3a 	bl	80059b8 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	; 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e21f      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b52:	4b61      	ldr	r3, [pc, #388]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0xe8>
 8007b5e:	e014      	b.n	8007b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fd ff2a 	bl	80059b8 <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b68:	f7fd ff26 	bl	80059b8 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e20b      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b7a:	4b57      	ldr	r3, [pc, #348]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0x110>
 8007b86:	e000      	b.n	8007b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d069      	beq.n	8007c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b96:	4b50      	ldr	r3, [pc, #320]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ba2:	4b4d      	ldr	r3, [pc, #308]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d11c      	bne.n	8007be8 <HAL_RCC_OscConfig+0x190>
 8007bae:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d116      	bne.n	8007be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bba:	4b47      	ldr	r3, [pc, #284]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x17a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d001      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e1df      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd2:	4b41      	ldr	r3, [pc, #260]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	493d      	ldr	r1, [pc, #244]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007be6:	e040      	b.n	8007c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d023      	beq.n	8007c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bf0:	4b39      	ldr	r3, [pc, #228]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a38      	ldr	r2, [pc, #224]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfc:	f7fd fedc 	bl	80059b8 <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c04:	f7fd fed8 	bl	80059b8 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e1bd      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c16:	4b30      	ldr	r3, [pc, #192]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c22:	4b2d      	ldr	r3, [pc, #180]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4929      	ldr	r1, [pc, #164]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	600b      	str	r3, [r1, #0]
 8007c36:	e018      	b.n	8007c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c38:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fd feb8 	bl	80059b8 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c4c:	f7fd feb4 	bl	80059b8 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e199      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c5e:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d038      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d019      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c7e:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8a:	f7fd fe95 	bl	80059b8 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c92:	f7fd fe91 	bl	80059b8 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e176      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x23a>
 8007cb0:	e01a      	b.n	8007ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb6:	4a08      	ldr	r2, [pc, #32]	; (8007cd8 <HAL_RCC_OscConfig+0x280>)
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cbe:	f7fd fe7b 	bl	80059b8 <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cc4:	e00a      	b.n	8007cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cc6:	f7fd fe77 	bl	80059b8 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d903      	bls.n	8007cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e15c      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
 8007cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cdc:	4b91      	ldr	r3, [pc, #580]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ee      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80a4 	beq.w	8007e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cf6:	4b8b      	ldr	r3, [pc, #556]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10d      	bne.n	8007d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d02:	4b88      	ldr	r3, [pc, #544]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	4a87      	ldr	r2, [pc, #540]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d0e:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d1e:	4b82      	ldr	r3, [pc, #520]	; (8007f28 <HAL_RCC_OscConfig+0x4d0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d118      	bne.n	8007d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d2a:	4b7f      	ldr	r3, [pc, #508]	; (8007f28 <HAL_RCC_OscConfig+0x4d0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a7e      	ldr	r2, [pc, #504]	; (8007f28 <HAL_RCC_OscConfig+0x4d0>)
 8007d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d36:	f7fd fe3f 	bl	80059b8 <HAL_GetTick>
 8007d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d3c:	e008      	b.n	8007d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3e:	f7fd fe3b 	bl	80059b8 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b64      	cmp	r3, #100	; 0x64
 8007d4a:	d901      	bls.n	8007d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e120      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d50:	4b75      	ldr	r3, [pc, #468]	; (8007f28 <HAL_RCC_OscConfig+0x4d0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d106      	bne.n	8007d72 <HAL_RCC_OscConfig+0x31a>
 8007d64:	4b6f      	ldr	r3, [pc, #444]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	4a6e      	ldr	r2, [pc, #440]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d70:	e02d      	b.n	8007dce <HAL_RCC_OscConfig+0x376>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10c      	bne.n	8007d94 <HAL_RCC_OscConfig+0x33c>
 8007d7a:	4b6a      	ldr	r3, [pc, #424]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7e:	4a69      	ldr	r2, [pc, #420]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	6713      	str	r3, [r2, #112]	; 0x70
 8007d86:	4b67      	ldr	r3, [pc, #412]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	4a66      	ldr	r2, [pc, #408]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d8c:	f023 0304 	bic.w	r3, r3, #4
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70
 8007d92:	e01c      	b.n	8007dce <HAL_RCC_OscConfig+0x376>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b05      	cmp	r3, #5
 8007d9a:	d10c      	bne.n	8007db6 <HAL_RCC_OscConfig+0x35e>
 8007d9c:	4b61      	ldr	r3, [pc, #388]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	4a60      	ldr	r2, [pc, #384]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007da2:	f043 0304 	orr.w	r3, r3, #4
 8007da6:	6713      	str	r3, [r2, #112]	; 0x70
 8007da8:	4b5e      	ldr	r3, [pc, #376]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dac:	4a5d      	ldr	r2, [pc, #372]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007dae:	f043 0301 	orr.w	r3, r3, #1
 8007db2:	6713      	str	r3, [r2, #112]	; 0x70
 8007db4:	e00b      	b.n	8007dce <HAL_RCC_OscConfig+0x376>
 8007db6:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	4a5a      	ldr	r2, [pc, #360]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc2:	4b58      	ldr	r3, [pc, #352]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	4a57      	ldr	r2, [pc, #348]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007dc8:	f023 0304 	bic.w	r3, r3, #4
 8007dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d015      	beq.n	8007e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd6:	f7fd fdef 	bl	80059b8 <HAL_GetTick>
 8007dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ddc:	e00a      	b.n	8007df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dde:	f7fd fdeb 	bl	80059b8 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e0ce      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df4:	4b4b      	ldr	r3, [pc, #300]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ee      	beq.n	8007dde <HAL_RCC_OscConfig+0x386>
 8007e00:	e014      	b.n	8007e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e02:	f7fd fdd9 	bl	80059b8 <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e08:	e00a      	b.n	8007e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e0a:	f7fd fdd5 	bl	80059b8 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e0b8      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e20:	4b40      	ldr	r3, [pc, #256]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1ee      	bne.n	8007e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d105      	bne.n	8007e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e32:	4b3c      	ldr	r3, [pc, #240]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	4a3b      	ldr	r2, [pc, #236]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80a4 	beq.w	8007f90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e48:	4b36      	ldr	r3, [pc, #216]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f003 030c 	and.w	r3, r3, #12
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d06b      	beq.n	8007f2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d149      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5c:	4b31      	ldr	r3, [pc, #196]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a30      	ldr	r2, [pc, #192]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fd fda6 	bl	80059b8 <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e70:	f7fd fda2 	bl	80059b8 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e087      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e82:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f0      	bne.n	8007e70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69da      	ldr	r2, [r3, #28]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	019b      	lsls	r3, r3, #6
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007eb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ebc:	4b19      	ldr	r3, [pc, #100]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fd fd76 	bl	80059b8 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed0:	f7fd fd72 	bl	80059b8 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e057      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee2:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x478>
 8007eee:	e04f      	b.n	8007f90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a0b      	ldr	r2, [pc, #44]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fd fd5c 	bl	80059b8 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f04:	f7fd fd58 	bl	80059b8 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e03d      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f16:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <HAL_RCC_OscConfig+0x4cc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x4ac>
 8007f22:	e035      	b.n	8007f90 <HAL_RCC_OscConfig+0x538>
 8007f24:	40023800 	.word	0x40023800
 8007f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <HAL_RCC_OscConfig+0x544>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d028      	beq.n	8007f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d121      	bne.n	8007f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d11a      	bne.n	8007f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d111      	bne.n	8007f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	3b01      	subs	r3, #1
 8007f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d107      	bne.n	8007f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40023800 	.word	0x40023800

08007fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0d0      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fb8:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d910      	bls.n	8007fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fc6:	4b67      	ldr	r3, [pc, #412]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f023 020f 	bic.w	r2, r3, #15
 8007fce:	4965      	ldr	r1, [pc, #404]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd6:	4b63      	ldr	r3, [pc, #396]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d001      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0b8      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d020      	beq.n	8008036 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008000:	4b59      	ldr	r3, [pc, #356]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4a58      	ldr	r2, [pc, #352]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800800a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008018:	4b53      	ldr	r3, [pc, #332]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4a52      	ldr	r2, [pc, #328]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800801e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008024:	4b50      	ldr	r3, [pc, #320]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	494d      	ldr	r1, [pc, #308]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d040      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d107      	bne.n	800805a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804a:	4b47      	ldr	r3, [pc, #284]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d115      	bne.n	8008082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e07f      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d107      	bne.n	8008072 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008062:	4b41      	ldr	r3, [pc, #260]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e073      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008072:	4b3d      	ldr	r3, [pc, #244]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e06b      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008082:	4b39      	ldr	r3, [pc, #228]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f023 0203 	bic.w	r2, r3, #3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	4936      	ldr	r1, [pc, #216]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008090:	4313      	orrs	r3, r2
 8008092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008094:	f7fd fc90 	bl	80059b8 <HAL_GetTick>
 8008098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800809a:	e00a      	b.n	80080b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800809c:	f7fd fc8c 	bl	80059b8 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e053      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b2:	4b2d      	ldr	r3, [pc, #180]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 020c 	and.w	r2, r3, #12
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d1eb      	bne.n	800809c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080c4:	4b27      	ldr	r3, [pc, #156]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d210      	bcs.n	80080f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080d2:	4b24      	ldr	r3, [pc, #144]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f023 020f 	bic.w	r2, r3, #15
 80080da:	4922      	ldr	r1, [pc, #136]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4313      	orrs	r3, r2
 80080e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e2:	4b20      	ldr	r3, [pc, #128]	; (8008164 <HAL_RCC_ClockConfig+0x1c4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e032      	b.n	800815a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4916      	ldr	r1, [pc, #88]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800810e:	4313      	orrs	r3, r2
 8008110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	490e      	ldr	r1, [pc, #56]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800812e:	4313      	orrs	r3, r2
 8008130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008132:	f000 f821 	bl	8008178 <HAL_RCC_GetSysClockFreq>
 8008136:	4601      	mov	r1, r0
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <HAL_RCC_ClockConfig+0x1c8>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	091b      	lsrs	r3, r3, #4
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	4a0a      	ldr	r2, [pc, #40]	; (800816c <HAL_RCC_ClockConfig+0x1cc>)
 8008144:	5cd3      	ldrb	r3, [r2, r3]
 8008146:	fa21 f303 	lsr.w	r3, r1, r3
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <HAL_RCC_ClockConfig+0x1d0>)
 800814c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800814e:	4b09      	ldr	r3, [pc, #36]	; (8008174 <HAL_RCC_ClockConfig+0x1d4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7fc fbb6 	bl	80048c4 <HAL_InitTick>

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40023c00 	.word	0x40023c00
 8008168:	40023800 	.word	0x40023800
 800816c:	0801ab3c 	.word	0x0801ab3c
 8008170:	20000000 	.word	0x20000000
 8008174:	20000004 	.word	0x20000004

08008178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	2300      	movs	r3, #0
 8008188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800818e:	4b63      	ldr	r3, [pc, #396]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 030c 	and.w	r3, r3, #12
 8008196:	2b04      	cmp	r3, #4
 8008198:	d007      	beq.n	80081aa <HAL_RCC_GetSysClockFreq+0x32>
 800819a:	2b08      	cmp	r3, #8
 800819c:	d008      	beq.n	80081b0 <HAL_RCC_GetSysClockFreq+0x38>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 80b4 	bne.w	800830c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081a4:	4b5e      	ldr	r3, [pc, #376]	; (8008320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80081a6:	60bb      	str	r3, [r7, #8]
      break;
 80081a8:	e0b3      	b.n	8008312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081aa:	4b5e      	ldr	r3, [pc, #376]	; (8008324 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80081ac:	60bb      	str	r3, [r7, #8]
      break;
 80081ae:	e0b0      	b.n	8008312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081b0:	4b5a      	ldr	r3, [pc, #360]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081ba:	4b58      	ldr	r3, [pc, #352]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04a      	beq.n	800825c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081c6:	4b55      	ldr	r3, [pc, #340]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	099b      	lsrs	r3, r3, #6
 80081cc:	f04f 0400 	mov.w	r4, #0
 80081d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	ea03 0501 	and.w	r5, r3, r1
 80081dc:	ea04 0602 	and.w	r6, r4, r2
 80081e0:	4629      	mov	r1, r5
 80081e2:	4632      	mov	r2, r6
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	f04f 0400 	mov.w	r4, #0
 80081ec:	0154      	lsls	r4, r2, #5
 80081ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081f2:	014b      	lsls	r3, r1, #5
 80081f4:	4619      	mov	r1, r3
 80081f6:	4622      	mov	r2, r4
 80081f8:	1b49      	subs	r1, r1, r5
 80081fa:	eb62 0206 	sbc.w	r2, r2, r6
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	f04f 0400 	mov.w	r4, #0
 8008206:	0194      	lsls	r4, r2, #6
 8008208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800820c:	018b      	lsls	r3, r1, #6
 800820e:	1a5b      	subs	r3, r3, r1
 8008210:	eb64 0402 	sbc.w	r4, r4, r2
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	00e2      	lsls	r2, r4, #3
 800821e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008222:	00d9      	lsls	r1, r3, #3
 8008224:	460b      	mov	r3, r1
 8008226:	4614      	mov	r4, r2
 8008228:	195b      	adds	r3, r3, r5
 800822a:	eb44 0406 	adc.w	r4, r4, r6
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	0262      	lsls	r2, r4, #9
 8008238:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800823c:	0259      	lsls	r1, r3, #9
 800823e:	460b      	mov	r3, r1
 8008240:	4614      	mov	r4, r2
 8008242:	4618      	mov	r0, r3
 8008244:	4621      	mov	r1, r4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	461a      	mov	r2, r3
 800824e:	4623      	mov	r3, r4
 8008250:	f7f8 fcf2 	bl	8000c38 <__aeabi_uldivmod>
 8008254:	4603      	mov	r3, r0
 8008256:	460c      	mov	r4, r1
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	e049      	b.n	80082f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800825c:	4b2f      	ldr	r3, [pc, #188]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	099b      	lsrs	r3, r3, #6
 8008262:	f04f 0400 	mov.w	r4, #0
 8008266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	ea03 0501 	and.w	r5, r3, r1
 8008272:	ea04 0602 	and.w	r6, r4, r2
 8008276:	4629      	mov	r1, r5
 8008278:	4632      	mov	r2, r6
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	f04f 0400 	mov.w	r4, #0
 8008282:	0154      	lsls	r4, r2, #5
 8008284:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008288:	014b      	lsls	r3, r1, #5
 800828a:	4619      	mov	r1, r3
 800828c:	4622      	mov	r2, r4
 800828e:	1b49      	subs	r1, r1, r5
 8008290:	eb62 0206 	sbc.w	r2, r2, r6
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	f04f 0400 	mov.w	r4, #0
 800829c:	0194      	lsls	r4, r2, #6
 800829e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082a2:	018b      	lsls	r3, r1, #6
 80082a4:	1a5b      	subs	r3, r3, r1
 80082a6:	eb64 0402 	sbc.w	r4, r4, r2
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	00e2      	lsls	r2, r4, #3
 80082b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082b8:	00d9      	lsls	r1, r3, #3
 80082ba:	460b      	mov	r3, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	195b      	adds	r3, r3, r5
 80082c0:	eb44 0406 	adc.w	r4, r4, r6
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	02a2      	lsls	r2, r4, #10
 80082ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082d2:	0299      	lsls	r1, r3, #10
 80082d4:	460b      	mov	r3, r1
 80082d6:	4614      	mov	r4, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	4621      	mov	r1, r4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f04f 0400 	mov.w	r4, #0
 80082e2:	461a      	mov	r2, r3
 80082e4:	4623      	mov	r3, r4
 80082e6:	f7f8 fca7 	bl	8000c38 <__aeabi_uldivmod>
 80082ea:	4603      	mov	r3, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	3301      	adds	r3, #1
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	60bb      	str	r3, [r7, #8]
      break;
 800830a:	e002      	b.n	8008312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800830e:	60bb      	str	r3, [r7, #8]
      break;
 8008310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008312:	68bb      	ldr	r3, [r7, #8]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	00f42400 	.word	0x00f42400
 8008324:	007a1200 	.word	0x007a1200

08008328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800832c:	4b03      	ldr	r3, [pc, #12]	; (800833c <HAL_RCC_GetHCLKFreq+0x14>)
 800832e:	681b      	ldr	r3, [r3, #0]
}
 8008330:	4618      	mov	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000000 	.word	0x20000000

08008340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008344:	f7ff fff0 	bl	8008328 <HAL_RCC_GetHCLKFreq>
 8008348:	4601      	mov	r1, r0
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	0a9b      	lsrs	r3, r3, #10
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	4a03      	ldr	r2, [pc, #12]	; (8008364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008356:	5cd3      	ldrb	r3, [r2, r3]
 8008358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40023800 	.word	0x40023800
 8008364:	0801ab4c 	.word	0x0801ab4c

08008368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800836c:	f7ff ffdc 	bl	8008328 <HAL_RCC_GetHCLKFreq>
 8008370:	4601      	mov	r1, r0
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	0b5b      	lsrs	r3, r3, #13
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	4a03      	ldr	r2, [pc, #12]	; (800838c <HAL_RCC_GetPCLK2Freq+0x24>)
 800837e:	5cd3      	ldrb	r3, [r2, r3]
 8008380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008384:	4618      	mov	r0, r3
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40023800 	.word	0x40023800
 800838c:	0801ab4c 	.word	0x0801ab4c

08008390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	220f      	movs	r2, #15
 800839e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083a0:	4b12      	ldr	r3, [pc, #72]	; (80083ec <HAL_RCC_GetClockConfig+0x5c>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0203 	and.w	r2, r3, #3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <HAL_RCC_GetClockConfig+0x5c>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80083b8:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <HAL_RCC_GetClockConfig+0x5c>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80083c4:	4b09      	ldr	r3, [pc, #36]	; (80083ec <HAL_RCC_GetClockConfig+0x5c>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	08db      	lsrs	r3, r3, #3
 80083ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <HAL_RCC_GetClockConfig+0x60>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 020f 	and.w	r2, r3, #15
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	601a      	str	r2, [r3, #0]
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40023800 	.word	0x40023800
 80083f0:	40023c00 	.word	0x40023c00

080083f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d012      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800841c:	4b69      	ldr	r3, [pc, #420]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	4a68      	ldr	r2, [pc, #416]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008422:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008426:	6093      	str	r3, [r2, #8]
 8008428:	4b66      	ldr	r3, [pc, #408]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008430:	4964      	ldr	r1, [pc, #400]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008432:	4313      	orrs	r3, r2
 8008434:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800843e:	2301      	movs	r3, #1
 8008440:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d017      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800844e:	4b5d      	ldr	r3, [pc, #372]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845c:	4959      	ldr	r1, [pc, #356]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845e:	4313      	orrs	r3, r2
 8008460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846c:	d101      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800846e:	2301      	movs	r3, #1
 8008470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800847a:	2301      	movs	r3, #1
 800847c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d017      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800848a:	4b4e      	ldr	r3, [pc, #312]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008490:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	494a      	ldr	r1, [pc, #296]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a8:	d101      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80084b6:	2301      	movs	r3, #1
 80084b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80084c6:	2301      	movs	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 808b 	beq.w	80085ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d8:	4b3a      	ldr	r3, [pc, #232]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	4a39      	ldr	r2, [pc, #228]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e2:	6413      	str	r3, [r2, #64]	; 0x40
 80084e4:	4b37      	ldr	r3, [pc, #220]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084f0:	4b35      	ldr	r3, [pc, #212]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a34      	ldr	r2, [pc, #208]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084fc:	f7fd fa5c 	bl	80059b8 <HAL_GetTick>
 8008500:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008504:	f7fd fa58 	bl	80059b8 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b64      	cmp	r3, #100	; 0x64
 8008510:	d901      	bls.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e31e      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008516:	4b2c      	ldr	r3, [pc, #176]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008522:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d035      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	429a      	cmp	r2, r3
 800853e:	d02e      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008540:	4b20      	ldr	r3, [pc, #128]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800854a:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008554:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008556:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008560:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008562:	4a18      	ldr	r2, [pc, #96]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008568:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	d114      	bne.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008574:	f7fd fa20 	bl	80059b8 <HAL_GetTick>
 8008578:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800857a:	e00a      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800857c:	f7fd fa1c 	bl	80059b8 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	f241 3288 	movw	r2, #5000	; 0x1388
 800858a:	4293      	cmp	r3, r2
 800858c:	d901      	bls.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e2e0      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008592:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0ee      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085aa:	d111      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085ba:	400b      	ands	r3, r1
 80085bc:	4901      	ldr	r1, [pc, #4]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
 80085c2:	e00b      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80085c4:	40023800 	.word	0x40023800
 80085c8:	40007000 	.word	0x40007000
 80085cc:	0ffffcff 	.word	0x0ffffcff
 80085d0:	4bac      	ldr	r3, [pc, #688]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	4aab      	ldr	r2, [pc, #684]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085da:	6093      	str	r3, [r2, #8]
 80085dc:	4ba9      	ldr	r3, [pc, #676]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085e8:	49a6      	ldr	r1, [pc, #664]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085fa:	4ba2      	ldr	r3, [pc, #648]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008600:	4aa0      	ldr	r2, [pc, #640]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008606:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800860a:	4b9e      	ldr	r3, [pc, #632]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800860c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	499b      	ldr	r1, [pc, #620]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008616:	4313      	orrs	r3, r2
 8008618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008628:	4b96      	ldr	r3, [pc, #600]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008636:	4993      	ldr	r1, [pc, #588]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008638:	4313      	orrs	r3, r2
 800863a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800864a:	4b8e      	ldr	r3, [pc, #568]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008658:	498a      	ldr	r1, [pc, #552]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800866c:	4b85      	ldr	r3, [pc, #532]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867a:	4982      	ldr	r1, [pc, #520]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800867c:	4313      	orrs	r3, r2
 800867e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800868e:	4b7d      	ldr	r3, [pc, #500]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	4979      	ldr	r1, [pc, #484]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086b0:	4b74      	ldr	r3, [pc, #464]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b6:	f023 0203 	bic.w	r2, r3, #3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	4971      	ldr	r1, [pc, #452]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086d2:	4b6c      	ldr	r3, [pc, #432]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	f023 020c 	bic.w	r2, r3, #12
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e0:	4968      	ldr	r1, [pc, #416]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086f4:	4b63      	ldr	r3, [pc, #396]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008702:	4960      	ldr	r1, [pc, #384]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008704:	4313      	orrs	r3, r2
 8008706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008716:	4b5b      	ldr	r3, [pc, #364]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	4957      	ldr	r1, [pc, #348]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008738:	4b52      	ldr	r3, [pc, #328]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	494f      	ldr	r1, [pc, #316]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008748:	4313      	orrs	r3, r2
 800874a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800875a:	4b4a      	ldr	r3, [pc, #296]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800875c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008760:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	4946      	ldr	r1, [pc, #280]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008782:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878a:	493e      	ldr	r1, [pc, #248]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800878c:	4313      	orrs	r3, r2
 800878e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ac:	4935      	ldr	r1, [pc, #212]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087c0:	4b30      	ldr	r3, [pc, #192]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ce:	492d      	ldr	r1, [pc, #180]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d011      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087e2:	4b28      	ldr	r3, [pc, #160]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f0:	4924      	ldr	r1, [pc, #144]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008800:	d101      	bne.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008802:	2301      	movs	r3, #1
 8008804:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008812:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008818:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008820:	4918      	ldr	r1, [pc, #96]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008834:	4b13      	ldr	r3, [pc, #76]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008844:	490f      	ldr	r1, [pc, #60]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d005      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885a:	f040 80d8 	bne.w	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a08      	ldr	r2, [pc, #32]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886a:	f7fd f8a5 	bl	80059b8 <HAL_GetTick>
 800886e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008870:	e00a      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008872:	f7fd f8a1 	bl	80059b8 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b64      	cmp	r3, #100	; 0x64
 800887e:	d903      	bls.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e167      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008884:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008888:	4bad      	ldr	r3, [pc, #692]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1ee      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d021      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d11d      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088a8:	4ba5      	ldr	r3, [pc, #660]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088b6:	4ba2      	ldr	r3, [pc, #648]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088bc:	0e1b      	lsrs	r3, r3, #24
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	019a      	lsls	r2, r3, #6
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	431a      	orrs	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	071b      	lsls	r3, r3, #28
 80088dc:	4998      	ldr	r1, [pc, #608]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088f8:	d00a      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008902:	2b00      	cmp	r3, #0
 8008904:	d02e      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890e:	d129      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008910:	4b8b      	ldr	r3, [pc, #556]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	0c1b      	lsrs	r3, r3, #16
 8008918:	f003 0303 	and.w	r3, r3, #3
 800891c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800891e:	4b88      	ldr	r3, [pc, #544]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008924:	0f1b      	lsrs	r3, r3, #28
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	019a      	lsls	r2, r3, #6
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	041b      	lsls	r3, r3, #16
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	431a      	orrs	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	071b      	lsls	r3, r3, #28
 8008944:	497e      	ldr	r1, [pc, #504]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800894c:	4b7c      	ldr	r3, [pc, #496]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800894e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008952:	f023 021f 	bic.w	r2, r3, #31
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	3b01      	subs	r3, #1
 800895c:	4978      	ldr	r1, [pc, #480]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01d      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008970:	4b73      	ldr	r3, [pc, #460]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008976:	0e1b      	lsrs	r3, r3, #24
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800897e:	4b70      	ldr	r3, [pc, #448]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008984:	0f1b      	lsrs	r3, r3, #28
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	019a      	lsls	r2, r3, #6
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	431a      	orrs	r2, r3
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	431a      	orrs	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	071b      	lsls	r3, r3, #28
 80089a4:	4966      	ldr	r1, [pc, #408]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d011      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	019a      	lsls	r2, r3, #6
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	041b      	lsls	r3, r3, #16
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	061b      	lsls	r3, r3, #24
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	071b      	lsls	r3, r3, #28
 80089d4:	495a      	ldr	r1, [pc, #360]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089dc:	4b58      	ldr	r3, [pc, #352]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a57      	ldr	r2, [pc, #348]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e8:	f7fc ffe6 	bl	80059b8 <HAL_GetTick>
 80089ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089ee:	e008      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089f0:	f7fc ffe2 	bl	80059b8 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b64      	cmp	r3, #100	; 0x64
 80089fc:	d901      	bls.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e0a8      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a02:	4b4f      	ldr	r3, [pc, #316]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0f0      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	f040 809e 	bne.w	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a16:	4b4a      	ldr	r3, [pc, #296]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a49      	ldr	r2, [pc, #292]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a22:	f7fc ffc9 	bl	80059b8 <HAL_GetTick>
 8008a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a28:	e008      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a2a:	f7fc ffc5 	bl	80059b8 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b64      	cmp	r3, #100	; 0x64
 8008a36:	d901      	bls.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e08b      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a3c:	4b40      	ldr	r3, [pc, #256]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a48:	d0ef      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d009      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d02e      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d12a      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a72:	4b33      	ldr	r3, [pc, #204]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a80:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a86:	0f1b      	lsrs	r3, r3, #28
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	019a      	lsls	r2, r3, #6
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	041b      	lsls	r3, r3, #16
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	071b      	lsls	r3, r3, #28
 8008aa6:	4926      	ldr	r1, [pc, #152]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008aae:	4b24      	ldr	r3, [pc, #144]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	3b01      	subs	r3, #1
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	491f      	ldr	r1, [pc, #124]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d022      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008adc:	d11d      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ade:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	0e1b      	lsrs	r3, r3, #24
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af2:	0f1b      	lsrs	r3, r3, #28
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	019a      	lsls	r2, r3, #6
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	041b      	lsls	r3, r3, #16
 8008b06:	431a      	orrs	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	061b      	lsls	r3, r3, #24
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	071b      	lsls	r3, r3, #28
 8008b12:	490b      	ldr	r1, [pc, #44]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b26:	f7fc ff47 	bl	80059b8 <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b2c:	e00a      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b2e:	f7fc ff43 	bl	80059b8 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b64      	cmp	r3, #100	; 0x64
 8008b3a:	d903      	bls.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e009      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008b40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b50:	d1ed      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3720      	adds	r7, #32
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40023800 	.word	0x40023800

08008b60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e022      	b.n	8008bb8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fb fc41 	bl	800440c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f814 	bl	8008bc0 <HAL_SD_InitCard>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e00a      	b.n	8008bb8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bc0:	b5b0      	push	{r4, r5, r7, lr}
 8008bc2:	b08e      	sub	sp, #56	; 0x38
 8008bc4:	af04      	add	r7, sp, #16
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008bdc:	2376      	movs	r3, #118	; 0x76
 8008bde:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681d      	ldr	r5, [r3, #0]
 8008be4:	466c      	mov	r4, sp
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bf2:	f107 0308 	add.w	r3, r7, #8
 8008bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f003 fbe9 	bl	800c3d0 <SDMMC_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e03b      	b.n	8008c88 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c1e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f003 fc1d 	bl	800c464 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c38:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 ffca 	bl	8009bd4 <SD_PowerON>
 8008c40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e013      	b.n	8008c88 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fee9 	bl	8009a38 <SD_InitCard>
 8008c66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	; 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bdb0      	pop	{r4, r5, r7, pc}

08008c90 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08c      	sub	sp, #48	; 0x30
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d107      	bne.n	8008cb8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0cc      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	f040 80c5 	bne.w	8008e50 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d907      	bls.n	8008cea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e0b3      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2203      	movs	r2, #3
 8008cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	4a53      	ldr	r2, [pc, #332]	; (8008e5c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008d10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	4a52      	ldr	r2, [pc, #328]	; (8008e60 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008d18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	2200      	movs	r2, #0
 8008d20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3380      	adds	r3, #128	; 0x80
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	025b      	lsls	r3, r3, #9
 8008d34:	089b      	lsrs	r3, r3, #2
 8008d36:	f7fc fffd 	bl	8005d34 <HAL_DMA_Start_IT>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d017      	beq.n	8008d70 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008d4e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a43      	ldr	r2, [pc, #268]	; (8008e64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e070      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0208 	orr.w	r2, r2, #8
 8008d7e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d002      	beq.n	8008d8e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	025b      	lsls	r3, r3, #9
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d96:	4618      	mov	r0, r3
 8008d98:	f003 fbf8 	bl	800c58c <SDMMC_CmdBlockLength>
 8008d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00f      	beq.n	8008dc4 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a2e      	ldr	r2, [pc, #184]	; (8008e64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	431a      	orrs	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e046      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	025b      	lsls	r3, r3, #9
 8008dce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008dd0:	2390      	movs	r3, #144	; 0x90
 8008dd2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f107 0210 	add.w	r2, r7, #16
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f003 fba2 	bl	800c534 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d90a      	bls.n	8008e0c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2282      	movs	r2, #130	; 0x82
 8008dfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e02:	4618      	mov	r0, r3
 8008e04:	f003 fc06 	bl	800c614 <SDMMC_CmdReadMultiBlock>
 8008e08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008e0a:	e009      	b.n	8008e20 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2281      	movs	r2, #129	; 0x81
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f003 fbd9 	bl	800c5d0 <SDMMC_CmdReadSingleBlock>
 8008e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d012      	beq.n	8008e4c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a0e      	ldr	r2, [pc, #56]	; (8008e64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e002      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e000      	b.n	8008e52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008e50:	2302      	movs	r3, #2
  }
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3730      	adds	r7, #48	; 0x30
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	08009847 	.word	0x08009847
 8008e60:	080098b9 	.word	0x080098b9
 8008e64:	004005ff 	.word	0x004005ff

08008e68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08c      	sub	sp, #48	; 0x30
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d107      	bne.n	8008e90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e0cf      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	f040 80c8 	bne.w	800902e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d907      	bls.n	8008ec2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e0b6      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 021a 	orr.w	r2, r2, #26
 8008ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	4a54      	ldr	r2, [pc, #336]	; (8009038 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	4a53      	ldr	r2, [pc, #332]	; (800903c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008ef0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d002      	beq.n	8008f08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	025b      	lsls	r3, r3, #9
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f10:	4618      	mov	r0, r3
 8008f12:	f003 fb3b 	bl	800c58c <SDMMC_CmdBlockLength>
 8008f16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00f      	beq.n	8008f3e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a47      	ldr	r2, [pc, #284]	; (8009040 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e078      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d90a      	bls.n	8008f5a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	22a0      	movs	r2, #160	; 0xa0
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f50:	4618      	mov	r0, r3
 8008f52:	f003 fba3 	bl	800c69c <SDMMC_CmdWriteMultiBlock>
 8008f56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f58:	e009      	b.n	8008f6e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2290      	movs	r2, #144	; 0x90
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f66:	4618      	mov	r0, r3
 8008f68:	f003 fb76 	bl	800c658 <SDMMC_CmdWriteSingleBlock>
 8008f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d012      	beq.n	8008f9a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a31      	ldr	r2, [pc, #196]	; (8009040 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	431a      	orrs	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e04a      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0208 	orr.w	r2, r2, #8
 8008fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3380      	adds	r3, #128	; 0x80
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	025b      	lsls	r3, r3, #9
 8008fbc:	089b      	lsrs	r3, r3, #2
 8008fbe:	f7fc feb9 	bl	8005d34 <HAL_DMA_Start_IT>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01a      	beq.n	8008ffe <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 021a 	bic.w	r2, r2, #26
 8008fd6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a18      	ldr	r2, [pc, #96]	; (8009040 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e018      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8009002:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	025b      	lsls	r3, r3, #9
 8009008:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800900a:	2390      	movs	r3, #144	; 0x90
 800900c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009012:	2300      	movs	r3, #0
 8009014:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009016:	2301      	movs	r3, #1
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f107 0210 	add.w	r2, r7, #16
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f003 fa85 	bl	800c534 <SDMMC_ConfigData>

      return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
  }
}
 8009030:	4618      	mov	r0, r3
 8009032:	3730      	adds	r7, #48	; 0x30
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	0800981d 	.word	0x0800981d
 800903c:	080098b9 	.word	0x080098b9
 8009040:	004005ff 	.word	0x004005ff

08009044 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_SD_IRQHandler+0x2e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 ffc8 	bl	800a000 <SD_Read_IT>
 8009070:	e153      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 808d 	beq.w	800919c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800908a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4ba3      	ldr	r3, [pc, #652]	; (8009324 <HAL_SD_IRQHandler+0x2e0>)
 8009098:	400b      	ands	r3, r1
 800909a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d039      	beq.n	800912a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <HAL_SD_IRQHandler+0x86>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f003 fb06 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 80090d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d008      	beq.n	80090ee <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f921 	bl	8009330 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <HAL_SD_IRQHandler+0xd6>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f005 fa88 	bl	800e630 <HAL_SD_RxCpltCallback>
 8009120:	e0fb      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f005 fa7a 	bl	800e61c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009128:	e0f7      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 80f2 	beq.w	800931a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f003 facb 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 800914a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8e6 	bl	8009330 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	f040 80d5 	bne.w	800931a <HAL_SD_IRQHandler+0x2d6>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 80cf 	bne.w	800931a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0208 	bic.w	r2, r2, #8
 800918a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f005 fa41 	bl	800e61c <HAL_SD_TxCpltCallback>
}
 800919a:	e0be      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <HAL_SD_IRQHandler+0x178>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 ff74 	bl	800a0a2 <SD_Write_IT>
 80091ba:	e0ae      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 80a7 	beq.w	800931a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	f043 0202 	orr.w	r2, r3, #2
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	f043 0208 	orr.w	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	f043 0220 	orr.w	r2, r3, #32
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922c:	f043 0210 	orr.w	r2, r3, #16
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f240 523a 	movw	r2, #1338	; 0x53a
 800923c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800924c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f003 fa44 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009258:	4602      	mov	r2, r0
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 0308 	and.w	r3, r3, #8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f857 	bl	8009330 <HAL_SD_ErrorCallback>
}
 8009282:	e04a      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928a:	2b00      	cmp	r3, #0
 800928c:	d045      	beq.n	800931a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <HAL_SD_IRQHandler+0x25e>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d011      	beq.n	80092c6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a6:	4a20      	ldr	r2, [pc, #128]	; (8009328 <HAL_SD_IRQHandler+0x2e4>)
 80092a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fc fda0 	bl	8005df4 <HAL_DMA_Abort_IT>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d02f      	beq.n	800931a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fb4c 	bl	800995c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80092c4:	e029      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <HAL_SD_IRQHandler+0x296>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d011      	beq.n	80092fe <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	4a13      	ldr	r2, [pc, #76]	; (800932c <HAL_SD_IRQHandler+0x2e8>)
 80092e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fc fd84 	bl	8005df4 <HAL_DMA_Abort_IT>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d013      	beq.n	800931a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fb67 	bl	80099ca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80092fc:	e00d      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f005 f978 	bl	800e608 <HAL_SD_AbortCallback>
}
 8009318:	e7ff      	b.n	800931a <HAL_SD_IRQHandler+0x2d6>
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	ffff3ec5 	.word	0xffff3ec5
 8009328:	0800995d 	.word	0x0800995d
 800932c:	080099cb 	.word	0x080099cb

08009330 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	0f9b      	lsrs	r3, r3, #30
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	0e9b      	lsrs	r3, r3, #26
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009370:	0e1b      	lsrs	r3, r3, #24
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	b2da      	uxtb	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800939a:	b2da      	uxtb	r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a4:	0d1b      	lsrs	r3, r3, #20
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c2:	0bdb      	lsrs	r3, r3, #15
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d4:	0b9b      	lsrs	r3, r3, #14
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e6:	0b5b      	lsrs	r3, r3, #13
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f8:	0b1b      	lsrs	r3, r3, #12
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	b2da      	uxtb	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2200      	movs	r2, #0
 800940a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009410:	2b00      	cmp	r3, #0
 8009412:	d163      	bne.n	80094dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800941e:	4013      	ands	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009424:	0f92      	lsrs	r2, r2, #30
 8009426:	431a      	orrs	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009430:	0edb      	lsrs	r3, r3, #27
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	b2da      	uxtb	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009442:	0e1b      	lsrs	r3, r3, #24
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	b2da      	uxtb	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009454:	0d5b      	lsrs	r3, r3, #21
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	b2da      	uxtb	r2, r3
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009466:	0c9b      	lsrs	r3, r3, #18
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	b2da      	uxtb	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009478:	0bdb      	lsrs	r3, r3, #15
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0307 	and.w	r3, r3, #7
 8009480:	b2da      	uxtb	r2, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	7e1b      	ldrb	r3, [r3, #24]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	3302      	adds	r3, #2
 800949c:	2201      	movs	r2, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094a6:	fb02 f203 	mul.w	r2, r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	7a1b      	ldrb	r3, [r3, #8]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	2201      	movs	r2, #1
 80094ba:	409a      	lsls	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80094c8:	0a52      	lsrs	r2, r2, #9
 80094ca:	fb02 f203 	mul.w	r2, r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094d8:	661a      	str	r2, [r3, #96]	; 0x60
 80094da:	e031      	b.n	8009540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d11d      	bne.n	8009520 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	431a      	orrs	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	3301      	adds	r3, #1
 8009500:	029a      	lsls	r2, r3, #10
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009514:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	661a      	str	r2, [r3, #96]	; 0x60
 800951e:	e00f      	b.n	8009540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a58      	ldr	r2, [pc, #352]	; (8009688 <HAL_SD_GetCardCSD+0x344>)
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e09d      	b.n	800967c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009544:	0b9b      	lsrs	r3, r3, #14
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	b2da      	uxtb	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	09db      	lsrs	r3, r3, #7
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956e:	b2da      	uxtb	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009578:	0fdb      	lsrs	r3, r3, #31
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009584:	0f5b      	lsrs	r3, r3, #29
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	b2da      	uxtb	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	0e9b      	lsrs	r3, r3, #26
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a8:	0d9b      	lsrs	r3, r3, #22
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	0d5b      	lsrs	r3, r3, #21
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d6:	0c1b      	lsrs	r3, r3, #16
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	0bdb      	lsrs	r3, r3, #15
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fe:	0b9b      	lsrs	r3, r3, #14
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009612:	0b5b      	lsrs	r3, r3, #13
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009626:	0b1b      	lsrs	r3, r3, #12
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963a:	0a9b      	lsrs	r3, r3, #10
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	b2da      	uxtb	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	b2da      	uxtb	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	004005ff 	.word	0x004005ff

0800968c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80096e4:	b5b0      	push	{r4, r5, r7, lr}
 80096e6:	b08e      	sub	sp, #56	; 0x38
 80096e8:	af04      	add	r7, sp, #16
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2203      	movs	r2, #3
 80096f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d02e      	beq.n	800975c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009704:	d106      	bne.n	8009714 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
 8009712:	e029      	b.n	8009768 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800971a:	d10a      	bne.n	8009732 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb0f 	bl	8009d40 <SD_WideBus_Enable>
 8009722:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	639a      	str	r2, [r3, #56]	; 0x38
 8009730:	e01a      	b.n	8009768 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb4c 	bl	8009dd6 <SD_WideBus_Disable>
 800973e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	639a      	str	r2, [r3, #56]	; 0x38
 800974c:	e00c      	b.n	8009768 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
 800975a:	e005      	b.n	8009768 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a18      	ldr	r2, [pc, #96]	; (80097d8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009776:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e024      	b.n	80097ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681d      	ldr	r5, [r3, #0]
 80097aa:	466c      	mov	r4, sp
 80097ac:	f107 0318 	add.w	r3, r7, #24
 80097b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097be:	4628      	mov	r0, r5
 80097c0:	f002 fe06 	bl	800c3d0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3728      	adds	r7, #40	; 0x28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bdb0      	pop	{r4, r5, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	004005ff 	.word	0x004005ff

080097dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa7e 	bl	8009cf0 <SD_SendStatus>
 80097f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	0a5b      	lsrs	r3, r3, #9
 800980c:	f003 030f 	and.w	r3, r3, #15
 8009810:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009812:	693b      	ldr	r3, [r7, #16]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009838:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009858:	2b82      	cmp	r3, #130	; 0x82
 800985a:	d111      	bne.n	8009880 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f002 ff3d 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009866:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d008      	beq.n	8009880 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fd58 	bl	8009330 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0208 	bic.w	r2, r2, #8
 800988e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f240 523a 	movw	r2, #1338	; 0x53a
 8009898:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f004 fec1 	bl	800e630 <HAL_SD_RxCpltCallback>
#endif
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fc fc40 	bl	800614c <HAL_DMA_GetError>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d03e      	beq.n	8009950 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d002      	beq.n	80098ee <SD_DMAError+0x36>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d12d      	bne.n	800994a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a19      	ldr	r2, [pc, #100]	; (8009958 <SD_DMAError+0xa0>)
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009904:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009912:	6978      	ldr	r0, [r7, #20]
 8009914:	f7ff ff62 	bl	80097dc <HAL_SD_GetCardState>
 8009918:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b06      	cmp	r3, #6
 800991e:	d002      	beq.n	8009926 <SD_DMAError+0x6e>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b05      	cmp	r3, #5
 8009924:	d10a      	bne.n	800993c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f002 fed8 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009930:	4602      	mov	r2, r0
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	431a      	orrs	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2200      	movs	r2, #0
 8009948:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800994a:	6978      	ldr	r0, [r7, #20]
 800994c:	f7ff fcf0 	bl	8009330 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009950:	bf00      	nop
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	004005ff 	.word	0x004005ff

0800995c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009972:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff ff31 	bl	80097dc <HAL_SD_GetCardState>
 800997a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b06      	cmp	r3, #6
 800998e:	d002      	beq.n	8009996 <SD_DMATxAbort+0x3a>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b05      	cmp	r3, #5
 8009994:	d10a      	bne.n	80099ac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f002 fea0 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 80099a0:	4602      	mov	r2, r0
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	431a      	orrs	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f004 fe27 	bl	800e608 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80099ba:	e002      	b.n	80099c2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fcb7 	bl	8009330 <HAL_SD_ErrorCallback>
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fefa 	bl	80097dc <HAL_SD_GetCardState>
 80099e8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b06      	cmp	r3, #6
 80099fc:	d002      	beq.n	8009a04 <SD_DMARxAbort+0x3a>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b05      	cmp	r3, #5
 8009a02:	d10a      	bne.n	8009a1a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 fe69 	bl	800c6e0 <SDMMC_CmdStopTransfer>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	431a      	orrs	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d103      	bne.n	8009a2a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f004 fdf0 	bl	800e608 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a28:	e002      	b.n	8009a30 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff fc80 	bl	8009330 <HAL_SD_ErrorCallback>
}
 8009a30:	bf00      	nop
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a38:	b5b0      	push	{r4, r5, r7, lr}
 8009a3a:	b094      	sub	sp, #80	; 0x50
 8009a3c:	af04      	add	r7, sp, #16
 8009a3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009a40:	2301      	movs	r3, #1
 8009a42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f002 fd1a 	bl	800c482 <SDMMC_GetPowerState>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a58:	e0b7      	b.n	8009bca <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d02f      	beq.n	8009ac2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f002 ff45 	bl	800c8f6 <SDMMC_CmdSendCID>
 8009a6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <SD_InitCard+0x40>
    {
      return errorstate;
 8009a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a76:	e0a8      	b.n	8009bca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f002 fd45 	bl	800c50e <SDMMC_GetResponse>
 8009a84:	4602      	mov	r2, r0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2104      	movs	r1, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 fd3c 	bl	800c50e <SDMMC_GetResponse>
 8009a96:	4602      	mov	r2, r0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2108      	movs	r1, #8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f002 fd33 	bl	800c50e <SDMMC_GetResponse>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	210c      	movs	r1, #12
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f002 fd2a 	bl	800c50e <SDMMC_GetResponse>
 8009aba:	4602      	mov	r2, r0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d00d      	beq.n	8009ae6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f107 020e 	add.w	r2, r7, #14
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 ff4b 	bl	800c970 <SDMMC_CmdSetRelAdd>
 8009ada:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_InitCard+0xae>
    {
      return errorstate;
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae4:	e071      	b.n	8009bca <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d036      	beq.n	8009b5c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009aee:	89fb      	ldrh	r3, [r7, #14]
 8009af0:	461a      	mov	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f002 ff15 	bl	800c932 <SDMMC_CmdSendCSD>
 8009b08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	e05a      	b.n	8009bca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 fcf7 	bl	800c50e <SDMMC_GetResponse>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 fcee 	bl	800c50e <SDMMC_GetResponse>
 8009b32:	4602      	mov	r2, r0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2108      	movs	r1, #8
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f002 fce5 	bl	800c50e <SDMMC_GetResponse>
 8009b44:	4602      	mov	r2, r0
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	210c      	movs	r1, #12
 8009b50:	4618      	mov	r0, r3
 8009b52:	f002 fcdc 	bl	800c50e <SDMMC_GetResponse>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2104      	movs	r1, #4
 8009b62:	4618      	mov	r0, r3
 8009b64:	f002 fcd3 	bl	800c50e <SDMMC_GetResponse>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	0d1a      	lsrs	r2, r3, #20
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b70:	f107 0310 	add.w	r3, r7, #16
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff fbe4 	bl	8009344 <HAL_SD_GetCardCSD>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b86:	e020      	b.n	8009bca <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6819      	ldr	r1, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	f04f 0400 	mov.w	r4, #0
 8009b96:	461a      	mov	r2, r3
 8009b98:	4623      	mov	r3, r4
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	f002 fdc2 	bl	800c724 <SDMMC_CmdSelDesel>
 8009ba0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <SD_InitCard+0x174>
  {
    return errorstate;
 8009ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009baa:	e00e      	b.n	8009bca <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681d      	ldr	r5, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	466c      	mov	r4, sp
 8009bb4:	f103 0210 	add.w	r2, r3, #16
 8009bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f002 fc04 	bl	800c3d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3740      	adds	r7, #64	; 0x40
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009bd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	2300      	movs	r3, #0
 8009be6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f002 fdbc 	bl	800c76a <SDMMC_CmdGoIdleState>
 8009bf2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <SD_PowerON+0x2a>
  {
    return errorstate;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	e072      	b.n	8009ce4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f002 fdcf 	bl	800c7a6 <SDMMC_CmdOperCond>
 8009c08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00d      	beq.n	8009c2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f002 fda5 	bl	800c76a <SDMMC_CmdGoIdleState>
 8009c20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	e05b      	b.n	8009ce4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d137      	bne.n	8009caa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f002 fdcf 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009c46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d02d      	beq.n	8009caa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c52:	e047      	b.n	8009ce4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f002 fdc2 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009c60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <SD_PowerON+0x98>
    {
      return errorstate;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	e03b      	b.n	8009ce4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	491e      	ldr	r1, [pc, #120]	; (8009cec <SD_PowerON+0x118>)
 8009c72:	4618      	mov	r0, r3
 8009c74:	f002 fdd8 	bl	800c828 <SDMMC_CmdAppOperCommand>
 8009c78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c84:	e02e      	b.n	8009ce4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f002 fc3e 	bl	800c50e <SDMMC_GetResponse>
 8009c92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	0fdb      	lsrs	r3, r3, #31
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <SD_PowerON+0xcc>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e000      	b.n	8009ca2 <SD_PowerON+0xce>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	613b      	str	r3, [r7, #16]

    count++;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d802      	bhi.n	8009cba <SD_PowerON+0xe6>
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0cc      	beq.n	8009c54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d902      	bls.n	8009cca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cc8:	e00c      	b.n	8009ce4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8009cda:	e002      	b.n	8009ce2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	c1100000 	.word	0xc1100000

08009cf0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d04:	e018      	b.n	8009d38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f002 fe4d 	bl	800c9b2 <SDMMC_CmdSendStatus>
 8009d18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	e009      	b.n	8009d38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 fbef 	bl	800c50e <SDMMC_GetResponse>
 8009d30:	4602      	mov	r2, r0
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f002 fbd9 	bl	800c50e <SDMMC_GetResponse>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d66:	d102      	bne.n	8009d6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d6c:	e02f      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d6e:	f107 030c 	add.w	r3, r7, #12
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f879 	bl	8009e6c <SD_FindSCR>
 8009d7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	e023      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01c      	beq.n	8009dca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f002 fd21 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009da2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	e00f      	b.n	8009dce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 fd5b 	bl	800c870 <SDMMC_CmdBusWidth>
 8009dba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	e003      	b.n	8009dce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e001      	b.n	8009dce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f002 fb8e 	bl	800c50e <SDMMC_GetResponse>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dfc:	d102      	bne.n	8009e04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e02:	e02f      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e04:	f107 030c 	add.w	r3, r7, #12
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f82e 	bl	8009e6c <SD_FindSCR>
 8009e10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	e023      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01c      	beq.n	8009e60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f002 fcd6 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009e38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	e00f      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f002 fd10 	bl	800c870 <SDMMC_CmdBusWidth>
 8009e50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	e003      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e001      	b.n	8009e64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e6c:	b590      	push	{r4, r7, lr}
 8009e6e:	b08f      	sub	sp, #60	; 0x3c
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e76:	f7fb fd9f 	bl	80059b8 <HAL_GetTick>
 8009e7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009e80:	2300      	movs	r3, #0
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2108      	movs	r1, #8
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fb7a 	bl	800c58c <SDMMC_CmdBlockLength>
 8009e98:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	e0a9      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f002 fc97 	bl	800c7e4 <SDMMC_CmdAppCommand>
 8009eb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	e09a      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ec8:	2308      	movs	r3, #8
 8009eca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ecc:	2330      	movs	r3, #48	; 0x30
 8009ece:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f107 0210 	add.w	r2, r7, #16
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f002 fb24 	bl	800c534 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fcdf 	bl	800c8b4 <SDMMC_CmdSendSCR>
 8009ef6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d022      	beq.n	8009f44 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	e07a      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00e      	beq.n	8009f2e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	f107 0208 	add.w	r2, r7, #8
 8009f1c:	18d4      	adds	r4, r2, r3
 8009f1e:	4608      	mov	r0, r1
 8009f20:	f002 fa82 	bl	800c428 <SDMMC_ReadFIFO>
 8009f24:	4603      	mov	r3, r0
 8009f26:	6023      	str	r3, [r4, #0]
      index++;
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f2e:	f7fb fd43 	bl	80059b8 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3c:	d102      	bne.n	8009f44 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f42:	e059      	b.n	8009ff8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4a:	f240 432a 	movw	r3, #1066	; 0x42a
 8009f4e:	4013      	ands	r3, r2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0d6      	beq.n	8009f02 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	f003 0308 	and.w	r3, r3, #8
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2208      	movs	r2, #8
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f6a:	2308      	movs	r3, #8
 8009f6c:	e044      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2202      	movs	r2, #2
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f84:	2302      	movs	r3, #2
 8009f86:	e037      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d005      	beq.n	8009fa2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009f9e:	2320      	movs	r3, #32
 8009fa0:	e02a      	b.n	8009ff8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009faa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	061a      	lsls	r2, r3, #24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	0a1b      	lsrs	r3, r3, #8
 8009fbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	0e1b      	lsrs	r3, r3, #24
 8009fc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	601a      	str	r2, [r3, #0]
    scr++;
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	061a      	lsls	r2, r3, #24
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	021b      	lsls	r3, r3, #8
 8009fdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fe0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	0e1b      	lsrs	r3, r3, #24
 8009ff0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	373c      	adds	r7, #60	; 0x3c
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd90      	pop	{r4, r7, pc}

0800a000 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d03f      	beq.n	800a09a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
 800a01e:	e033      	b.n	800a088 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f002 f9ff 	bl	800c428 <SDMMC_ReadFIFO>
 800a02a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3301      	adds	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	3b01      	subs	r3, #1
 800a054:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	0c1b      	lsrs	r3, r3, #16
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3b01      	subs	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	0e1b      	lsrs	r3, r3, #24
 800a070:	b2da      	uxtb	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3b01      	subs	r3, #1
 800a080:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	3301      	adds	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b07      	cmp	r3, #7
 800a08c:	d9c8      	bls.n	800a020 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a09a:	bf00      	nop
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d043      	beq.n	800a144 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e037      	b.n	800a132 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	021a      	lsls	r2, r3, #8
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	041a      	lsls	r2, r3, #16
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3b01      	subs	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	061a      	lsls	r2, r3, #24
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3301      	adds	r3, #1
 800a114:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	3b01      	subs	r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f107 0208 	add.w	r2, r7, #8
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f002 f98b 	bl	800c442 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	3301      	adds	r3, #1
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b07      	cmp	r3, #7
 800a136:	d9c4      	bls.n	800a0c2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e084      	b.n	800a268 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fa fa31 	bl	80045e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2202      	movs	r2, #2
 800a182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a194:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a19e:	d902      	bls.n	800a1a6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e002      	b.n	800a1ac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1b4:	d007      	beq.n	800a1c6 <HAL_SPI_Init+0x7a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1be:	d002      	beq.n	800a1c6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1d6:	d903      	bls.n	800a1e0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	631a      	str	r2, [r3, #48]	; 0x30
 800a1de:	e002      	b.n	800a1e6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	ea42 0103 	orr.w	r1, r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	f003 0204 	and.w	r2, r3, #4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	ea42 0103 	orr.w	r1, r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	430a      	orrs	r2, r1
 800a246:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	69da      	ldr	r2, [r3, #28]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a256:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	4613      	mov	r3, r2
 800a27c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d110      	bne.n	800a2ac <HAL_SPI_Receive_IT+0x3c>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a292:	d10b      	bne.n	800a2ac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2204      	movs	r2, #4
 800a298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f88c 	bl	800a3c0 <HAL_SPI_TransmitReceive_IT>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	e081      	b.n	800a3b0 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <HAL_SPI_Receive_IT+0x4a>
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e07a      	b.n	800a3b0 <HAL_SPI_Receive_IT+0x140>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d002      	beq.n	800a2d4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a2d2:	e068      	b.n	800a3a6 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <HAL_SPI_Receive_IT+0x70>
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a2e4:	e05f      	b.n	800a3a6 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2204      	movs	r2, #4
 800a2ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	88fa      	ldrh	r2, [r7, #6]
 800a2fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a32a:	d90b      	bls.n	800a344 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a33a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4a1e      	ldr	r2, [pc, #120]	; (800a3b8 <HAL_SPI_Receive_IT+0x148>)
 800a340:	64da      	str	r2, [r3, #76]	; 0x4c
 800a342:	e00a      	b.n	800a35a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a352:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a19      	ldr	r2, [pc, #100]	; (800a3bc <HAL_SPI_Receive_IT+0x14c>)
 800a358:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a362:	d107      	bne.n	800a374 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a372:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a382:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	d008      	beq.n	800a3a4 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	e000      	b.n	800a3a6 <HAL_SPI_Receive_IT+0x136>
  }

error :
 800a3a4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0800a9d9 	.word	0x0800a9d9
 800a3bc:	0800a989 	.word	0x0800a989

0800a3c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <HAL_SPI_TransmitReceive_IT+0x20>
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e091      	b.n	800a504 <HAL_SPI_TransmitReceive_IT+0x144>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3f6:	7dbb      	ldrb	r3, [r7, #22]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d00d      	beq.n	800a418 <HAL_SPI_TransmitReceive_IT+0x58>
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a402:	d106      	bne.n	800a412 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <HAL_SPI_TransmitReceive_IT+0x52>
 800a40c:	7dbb      	ldrb	r3, [r7, #22]
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d002      	beq.n	800a418 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a412:	2302      	movs	r3, #2
 800a414:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a416:	e070      	b.n	800a4fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d005      	beq.n	800a42a <HAL_SPI_TransmitReceive_IT+0x6a>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <HAL_SPI_TransmitReceive_IT+0x6a>
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d102      	bne.n	800a430 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a42e:	e064      	b.n	800a4fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d003      	beq.n	800a444 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2205      	movs	r2, #5
 800a440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	887a      	ldrh	r2, [r7, #2]
 800a454:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	887a      	ldrh	r2, [r7, #2]
 800a45a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	887a      	ldrh	r2, [r7, #2]
 800a466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	887a      	ldrh	r2, [r7, #2]
 800a46e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a47a:	d906      	bls.n	800a48a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4a24      	ldr	r2, [pc, #144]	; (800a510 <HAL_SPI_TransmitReceive_IT+0x150>)
 800a480:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4a23      	ldr	r2, [pc, #140]	; (800a514 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a486:	651a      	str	r2, [r3, #80]	; 0x50
 800a488:	e005      	b.n	800a496 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4a22      	ldr	r2, [pc, #136]	; (800a518 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a48e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a22      	ldr	r2, [pc, #136]	; (800a51c <HAL_SPI_TransmitReceive_IT+0x15c>)
 800a494:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a49e:	d802      	bhi.n	800a4a6 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a4a0:	887b      	ldrh	r3, [r7, #2]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d908      	bls.n	800a4b8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	e007      	b.n	800a4c8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a4c6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a4d6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	d008      	beq.n	800a4f8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	e000      	b.n	800a4fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800a4f8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
}
 800a504:	4618      	mov	r0, r3
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	0800a8c3 	.word	0x0800a8c3
 800a514:	0800a929 	.word	0x0800a929
 800a518:	0800a773 	.word	0x0800a773
 800a51c:	0800a831 	.word	0x0800a831

0800a520 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	099b      	lsrs	r3, r3, #6
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10f      	bne.n	800a564 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	099b      	lsrs	r3, r3, #6
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	4798      	blx	r3
    return;
 800a562:	e0d8      	b.n	800a716 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00a      	beq.n	800a586 <HAL_SPI_IRQHandler+0x66>
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	09db      	lsrs	r3, r3, #7
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
    return;
 800a584:	e0c7      	b.n	800a716 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	095b      	lsrs	r3, r3, #5
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10c      	bne.n	800a5ac <HAL_SPI_IRQHandler+0x8c>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	099b      	lsrs	r3, r3, #6
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <HAL_SPI_IRQHandler+0x8c>
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	0a1b      	lsrs	r3, r3, #8
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80b5 	beq.w	800a716 <HAL_SPI_IRQHandler+0x1f6>
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	095b      	lsrs	r3, r3, #5
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 80ae 	beq.w	800a716 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	099b      	lsrs	r3, r3, #6
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d023      	beq.n	800a60e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d011      	beq.n	800a5f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5d6:	f043 0204 	orr.w	r2, r3, #4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	e00b      	b.n	800a60e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	613b      	str	r3, [r7, #16]
 800a60a:	693b      	ldr	r3, [r7, #16]
        return;
 800a60c:	e083      	b.n	800a716 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d014      	beq.n	800a644 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a61e:	f043 0201 	orr.w	r2, r3, #1
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00c      	beq.n	800a66a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a654:	f043 0208 	orr.w	r2, r3, #8
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a65c:	2300      	movs	r3, #0
 800a65e:	60bb      	str	r3, [r7, #8]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	60bb      	str	r3, [r7, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d050      	beq.n	800a714 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a680:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <HAL_SPI_IRQHandler+0x17e>
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d034      	beq.n	800a708 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0203 	bic.w	r2, r2, #3
 800a6ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d011      	beq.n	800a6da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ba:	4a18      	ldr	r2, [pc, #96]	; (800a71c <HAL_SPI_IRQHandler+0x1fc>)
 800a6bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fb fb96 	bl	8005df4 <HAL_DMA_Abort_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d016      	beq.n	800a710 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e6:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <HAL_SPI_IRQHandler+0x1fc>)
 800a6e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fb fb80 	bl	8005df4 <HAL_DMA_Abort_IT>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a706:	e003      	b.n	800a710 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f813 	bl	800a734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a70e:	e000      	b.n	800a712 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a710:	bf00      	nop
    return;
 800a712:	bf00      	nop
 800a714:	bf00      	nop
  }
}
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	0800a749 	.word	0x0800a749

0800a720 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a754:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff ffe5 	bl	800a734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a76a:	bf00      	nop
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a780:	b29b      	uxth	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	d923      	bls.n	800a7ce <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a790:	b292      	uxth	r2, r2
 800a792:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	1c9a      	adds	r2, r3, #2
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b02      	subs	r3, #2
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d11f      	bne.n	800a7fc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7ca:	605a      	str	r2, [r3, #4]
 800a7cc:	e016      	b.n	800a7fc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f103 020c 	add.w	r2, r3, #12
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	b2d2      	uxtb	r2, r2
 800a7de:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a802:	b29b      	uxth	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10f      	bne.n	800a828 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a816:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d102      	bne.n	800a828 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa73 	bl	800ad0e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d912      	bls.n	800a868 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	881a      	ldrh	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	1c9a      	adds	r2, r3, #2
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b02      	subs	r3, #2
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a866:	e012      	b.n	800a88e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	330c      	adds	r3, #12
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a884:	b29b      	uxth	r3, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a892:	b29b      	uxth	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d110      	bne.n	800a8ba <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fa2a 	bl	800ad0e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d4:	b292      	uxth	r2, r2
 800a8d6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8dc:	1c9a      	adds	r2, r3, #2
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10f      	bne.n	800a920 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a90e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a914:	b29b      	uxth	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f9f7 	bl	800ad0e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	881a      	ldrh	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	1c9a      	adds	r2, r3, #2
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a958:	b29b      	uxth	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d110      	bne.n	800a980 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a96c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a974:	b29b      	uxth	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9c7 	bl	800ad0e <SPI_CloseRxTx_ISR>
    }
  }
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f103 020c 	add.w	r2, r3, #12
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f9e1 	bl	800ad92 <SPI_CloseRx_ISR>
  }
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	b292      	uxth	r2, r2
 800a9ec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	1c9a      	adds	r2, r3, #2
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f9bb 	bl	800ad92 <SPI_CloseRx_ISR>
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa34:	e04c      	b.n	800aad0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3c:	d048      	beq.n	800aad0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aa3e:	f7fa ffbb 	bl	80059b8 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d902      	bls.n	800aa54 <SPI_WaitFlagStateUntilTimeout+0x30>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d13d      	bne.n	800aad0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa6c:	d111      	bne.n	800aa92 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa76:	d004      	beq.n	800aa82 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa80:	d107      	bne.n	800aa92 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa9a:	d10f      	bne.n	800aabc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e00f      	b.n	800aaf0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4013      	ands	r3, r2
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	429a      	cmp	r2, r3
 800aade:	bf0c      	ite	eq
 800aae0:	2301      	moveq	r3, #1
 800aae2:	2300      	movne	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	461a      	mov	r2, r3
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d1a3      	bne.n	800aa36 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ab06:	e057      	b.n	800abb8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab0e:	d106      	bne.n	800ab1e <SPI_WaitFifoStateUntilTimeout+0x26>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d103      	bne.n	800ab1e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d048      	beq.n	800abb8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ab26:	f7fa ff47 	bl	80059b8 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d902      	bls.n	800ab3c <SPI_WaitFifoStateUntilTimeout+0x44>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d13d      	bne.n	800abb8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab54:	d111      	bne.n	800ab7a <SPI_WaitFifoStateUntilTimeout+0x82>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5e:	d004      	beq.n	800ab6a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab68:	d107      	bne.n	800ab7a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab82:	d10f      	bne.n	800aba4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aba2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e008      	b.n	800abca <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d19f      	bne.n	800ab08 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af02      	add	r7, sp, #8
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abe6:	d111      	bne.n	800ac0c <SPI_EndRxTransaction+0x3a>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abf0:	d004      	beq.n	800abfc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abfa:	d107      	bne.n	800ac0c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac0a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2200      	movs	r2, #0
 800ac14:	2180      	movs	r1, #128	; 0x80
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7ff ff04 	bl	800aa24 <SPI_WaitFlagStateUntilTimeout>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac26:	f043 0220 	orr.w	r2, r3, #32
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e023      	b.n	800ac7a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac3a:	d11d      	bne.n	800ac78 <SPI_EndRxTransaction+0xa6>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac44:	d004      	beq.n	800ac50 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4e:	d113      	bne.n	800ac78 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f7ff ff4b 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d007      	beq.n	800ac78 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac6c:	f043 0220 	orr.w	r2, r3, #32
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e000      	b.n	800ac7a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b086      	sub	sp, #24
 800ac86:	af02      	add	r7, sp, #8
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff ff2c 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acaa:	f043 0220 	orr.w	r2, r3, #32
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e027      	b.n	800ad06 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2200      	movs	r2, #0
 800acbe:	2180      	movs	r1, #128	; 0x80
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff feaf 	bl	800aa24 <SPI_WaitFlagStateUntilTimeout>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d007      	beq.n	800acdc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd0:	f043 0220 	orr.w	r2, r3, #32
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e014      	b.n	800ad06 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f7ff ff05 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf8:	f043 0220 	orr.w	r2, r3, #32
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e000      	b.n	800ad06 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ad16:	f7fa fe4f 	bl	80059b8 <HAL_GetTick>
 800ad1a:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f022 0220 	bic.w	r2, r2, #32
 800ad2a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	2164      	movs	r1, #100	; 0x64
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ffa6 	bl	800ac82 <SPI_EndRxTxTransaction>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad40:	f043 0220 	orr.w	r2, r3, #32
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d115      	bne.n	800ad7c <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d107      	bne.n	800ad6c <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7fa fae5 	bl	8005334 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ad6a:	e00e      	b.n	800ad8a <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fcd3 	bl	800a720 <HAL_SPI_TxRxCpltCallback>
}
 800ad7a:	e006      	b.n	800ad8a <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff fcd5 	bl	800a734 <HAL_SPI_ErrorCallback>
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ada8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800adaa:	f7fa fe05 	bl	80059b8 <HAL_GetTick>
 800adae:	4603      	mov	r3, r0
 800adb0:	461a      	mov	r2, r3
 800adb2:	2164      	movs	r1, #100	; 0x64
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff0c 	bl	800abd2 <SPI_EndRxTransaction>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc4:	f043 0220 	orr.w	r2, r3, #32
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7fa faa9 	bl	8005334 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ade2:	e002      	b.n	800adea <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff fca5 	bl	800a734 <HAL_SPI_ErrorCallback>
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e01d      	b.n	800ae40 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f815 	bl	800ae48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2202      	movs	r2, #2
 800ae22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f000 f985 	bl	800b140 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0201 	orr.w	r2, r2, #1
 800ae72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <HAL_TIM_Base_Start_IT+0x50>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b06      	cmp	r3, #6
 800ae84:	d00b      	beq.n	800ae9e <HAL_TIM_Base_Start_IT+0x42>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae8c:	d007      	beq.n	800ae9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f042 0201 	orr.w	r2, r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	00010007 	.word	0x00010007

0800aeb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d122      	bne.n	800af0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f003 0302 	and.w	r3, r3, #2
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d11b      	bne.n	800af0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0202 	mvn.w	r2, #2
 800aedc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f905 	bl	800b102 <HAL_TIM_IC_CaptureCallback>
 800aef8:	e005      	b.n	800af06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f8f7 	bl	800b0ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f908 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b04      	cmp	r3, #4
 800af18:	d122      	bne.n	800af60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b04      	cmp	r3, #4
 800af26:	d11b      	bne.n	800af60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0204 	mvn.w	r2, #4
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2202      	movs	r2, #2
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f8db 	bl	800b102 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f8cd 	bl	800b0ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f8de 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0308 	and.w	r3, r3, #8
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d122      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0308 	and.w	r3, r3, #8
 800af78:	2b08      	cmp	r3, #8
 800af7a:	d11b      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0208 	mvn.w	r2, #8
 800af84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2204      	movs	r2, #4
 800af8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f003 0303 	and.w	r3, r3, #3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8b1 	bl	800b102 <HAL_TIM_IC_CaptureCallback>
 800afa0:	e005      	b.n	800afae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f8a3 	bl	800b0ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8b4 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	d122      	bne.n	800b008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0310 	and.w	r3, r3, #16
 800afcc:	2b10      	cmp	r3, #16
 800afce:	d11b      	bne.n	800b008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0210 	mvn.w	r2, #16
 800afd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2208      	movs	r2, #8
 800afde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f887 	bl	800b102 <HAL_TIM_IC_CaptureCallback>
 800aff4:	e005      	b.n	800b002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f879 	bl	800b0ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f88a 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b01      	cmp	r3, #1
 800b014:	d10e      	bne.n	800b034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	2b01      	cmp	r3, #1
 800b022:	d107      	bne.n	800b034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f06f 0201 	mvn.w	r2, #1
 800b02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7f9 f9aa 	bl	8004388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03e:	2b80      	cmp	r3, #128	; 0x80
 800b040:	d10e      	bne.n	800b060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04c:	2b80      	cmp	r3, #128	; 0x80
 800b04e:	d107      	bne.n	800b060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f91a 	bl	800b294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b06e:	d10e      	bne.n	800b08e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07a:	2b80      	cmp	r3, #128	; 0x80
 800b07c:	d107      	bne.n	800b08e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f90d 	bl	800b2a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	d10e      	bne.n	800b0ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	d107      	bne.n	800b0ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f838 	bl	800b12a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d10e      	bne.n	800b0e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	d107      	bne.n	800b0e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f06f 0220 	mvn.w	r2, #32
 800b0de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f8cd 	bl	800b280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b10a:	bf00      	nop
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
	...

0800b140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a40      	ldr	r2, [pc, #256]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d013      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b15e:	d00f      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a3d      	ldr	r2, [pc, #244]	; (800b258 <TIM_Base_SetConfig+0x118>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d00b      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a3c      	ldr	r2, [pc, #240]	; (800b25c <TIM_Base_SetConfig+0x11c>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d007      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a3b      	ldr	r2, [pc, #236]	; (800b260 <TIM_Base_SetConfig+0x120>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d003      	beq.n	800b180 <TIM_Base_SetConfig+0x40>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a3a      	ldr	r2, [pc, #232]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d108      	bne.n	800b192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a2f      	ldr	r2, [pc, #188]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d02b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a0:	d027      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <TIM_Base_SetConfig+0x118>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d023      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a2b      	ldr	r2, [pc, #172]	; (800b25c <TIM_Base_SetConfig+0x11c>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d01f      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <TIM_Base_SetConfig+0x120>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d01b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a29      	ldr	r2, [pc, #164]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d017      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a28      	ldr	r2, [pc, #160]	; (800b268 <TIM_Base_SetConfig+0x128>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d013      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a27      	ldr	r2, [pc, #156]	; (800b26c <TIM_Base_SetConfig+0x12c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d00f      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a26      	ldr	r2, [pc, #152]	; (800b270 <TIM_Base_SetConfig+0x130>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00b      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a25      	ldr	r2, [pc, #148]	; (800b274 <TIM_Base_SetConfig+0x134>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d007      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a24      	ldr	r2, [pc, #144]	; (800b278 <TIM_Base_SetConfig+0x138>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d003      	beq.n	800b1f2 <TIM_Base_SetConfig+0xb2>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a23      	ldr	r2, [pc, #140]	; (800b27c <TIM_Base_SetConfig+0x13c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d108      	bne.n	800b204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <TIM_Base_SetConfig+0x114>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d003      	beq.n	800b238 <TIM_Base_SetConfig+0xf8>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a0c      	ldr	r2, [pc, #48]	; (800b264 <TIM_Base_SetConfig+0x124>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d103      	bne.n	800b240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	691a      	ldr	r2, [r3, #16]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	615a      	str	r2, [r3, #20]
}
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	40010000 	.word	0x40010000
 800b258:	40000400 	.word	0x40000400
 800b25c:	40000800 	.word	0x40000800
 800b260:	40000c00 	.word	0x40000c00
 800b264:	40010400 	.word	0x40010400
 800b268:	40014000 	.word	0x40014000
 800b26c:	40014400 	.word	0x40014400
 800b270:	40014800 	.word	0x40014800
 800b274:	40001800 	.word	0x40001800
 800b278:	40001c00 	.word	0x40001c00
 800b27c:	40002000 	.word	0x40002000

0800b280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e040      	b.n	800b350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7f9 fa6a 	bl	80047b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2224      	movs	r2, #36	; 0x24
 800b2e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb7c 	bl	800b9f8 <UART_SetConfig>
 800b300:	4603      	mov	r3, r0
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e022      	b.n	800b350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fe1a 	bl	800bf4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0201 	orr.w	r2, r2, #1
 800b346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fea1 	bl	800c090 <UART_CheckIdleState>
 800b34e:	4603      	mov	r3, r0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	4613      	mov	r3, r2
 800b366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	d17f      	bne.n	800b470 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_UART_Transmit+0x24>
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e078      	b.n	800b472 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b386:	2b01      	cmp	r3, #1
 800b388:	d101      	bne.n	800b38e <HAL_UART_Transmit+0x36>
 800b38a:	2302      	movs	r3, #2
 800b38c:	e071      	b.n	800b472 <HAL_UART_Transmit+0x11a>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2221      	movs	r2, #33	; 0x21
 800b3a0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b3a2:	f7fa fb09 	bl	80059b8 <HAL_GetTick>
 800b3a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	88fa      	ldrh	r2, [r7, #6]
 800b3ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	88fa      	ldrh	r2, [r7, #6]
 800b3b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c0:	d108      	bne.n	800b3d4 <HAL_UART_Transmit+0x7c>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d104      	bne.n	800b3d4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	e003      	b.n	800b3dc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b3e4:	e02c      	b.n	800b440 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2180      	movs	r1, #128	; 0x80
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 fe7c 	bl	800c0ee <UART_WaitOnFlagUntilTimeout>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e038      	b.n	800b472 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10b      	bne.n	800b41e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	3302      	adds	r3, #2
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	e007      	b.n	800b42e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	3301      	adds	r3, #1
 800b42c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b434:	b29b      	uxth	r3, r3
 800b436:	3b01      	subs	r3, #1
 800b438:	b29a      	uxth	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b446:	b29b      	uxth	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1cc      	bne.n	800b3e6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2200      	movs	r2, #0
 800b454:	2140      	movs	r1, #64	; 0x40
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 fe49 	bl	800c0ee <UART_WaitOnFlagUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e005      	b.n	800b472 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2220      	movs	r2, #32
 800b46a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3720      	adds	r7, #32
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b08a      	sub	sp, #40	; 0x28
 800b47e:	af02      	add	r7, sp, #8
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	603b      	str	r3, [r7, #0]
 800b486:	4613      	mov	r3, r2
 800b488:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b48e:	2b20      	cmp	r3, #32
 800b490:	f040 80ba 	bne.w	800b608 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <HAL_UART_Receive+0x26>
 800b49a:	88fb      	ldrh	r3, [r7, #6]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0b2      	b.n	800b60a <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UART_Receive+0x38>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e0ab      	b.n	800b60a <HAL_UART_Receive+0x190>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2222      	movs	r2, #34	; 0x22
 800b4c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b4c6:	f7fa fa77 	bl	80059b8 <HAL_GetTick>
 800b4ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	88fa      	ldrh	r2, [r7, #6]
 800b4d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	88fa      	ldrh	r2, [r7, #6]
 800b4d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e4:	d10e      	bne.n	800b504 <HAL_UART_Receive+0x8a>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <HAL_UART_Receive+0x80>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b4f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b4f8:	e02d      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	22ff      	movs	r2, #255	; 0xff
 800b4fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b502:	e028      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10d      	bne.n	800b528 <HAL_UART_Receive+0xae>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d104      	bne.n	800b51e <HAL_UART_Receive+0xa4>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	22ff      	movs	r2, #255	; 0xff
 800b518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b51c:	e01b      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	227f      	movs	r2, #127	; 0x7f
 800b522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b526:	e016      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b530:	d10d      	bne.n	800b54e <HAL_UART_Receive+0xd4>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d104      	bne.n	800b544 <HAL_UART_Receive+0xca>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	227f      	movs	r2, #127	; 0x7f
 800b53e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b542:	e008      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	223f      	movs	r2, #63	; 0x3f
 800b548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b54c:	e003      	b.n	800b556 <HAL_UART_Receive+0xdc>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b55c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b566:	d108      	bne.n	800b57a <HAL_UART_Receive+0x100>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d104      	bne.n	800b57a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	e003      	b.n	800b582 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b58a:	e032      	b.n	800b5f2 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2200      	movs	r2, #0
 800b594:	2120      	movs	r1, #32
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 fda9 	bl	800c0ee <UART_WaitOnFlagUntilTimeout>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e031      	b.n	800b60a <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	8a7b      	ldrh	r3, [r7, #18]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	61bb      	str	r3, [r7, #24]
 800b5c4:	e00c      	b.n	800b5e0 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	8a7b      	ldrh	r3, [r7, #18]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1c6      	bne.n	800b58c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2220      	movs	r2, #32
 800b602:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	e000      	b.n	800b60a <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800b608:	2302      	movs	r3, #2
  }
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	4613      	mov	r3, r2
 800b620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b626:	2b20      	cmp	r3, #32
 800b628:	f040 808a 	bne.w	800b740 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <HAL_UART_Receive_IT+0x24>
 800b632:	88fb      	ldrh	r3, [r7, #6]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e082      	b.n	800b742 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b642:	2b01      	cmp	r3, #1
 800b644:	d101      	bne.n	800b64a <HAL_UART_Receive_IT+0x36>
 800b646:	2302      	movs	r3, #2
 800b648:	e07b      	b.n	800b742 <HAL_UART_Receive_IT+0x12e>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	88fa      	ldrh	r2, [r7, #6]
 800b65c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	88fa      	ldrh	r2, [r7, #6]
 800b664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b676:	d10e      	bne.n	800b696 <HAL_UART_Receive_IT+0x82>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <HAL_UART_Receive_IT+0x78>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b68a:	e02d      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b694:	e028      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10d      	bne.n	800b6ba <HAL_UART_Receive_IT+0xa6>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <HAL_UART_Receive_IT+0x9c>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	22ff      	movs	r2, #255	; 0xff
 800b6aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6ae:	e01b      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	227f      	movs	r2, #127	; 0x7f
 800b6b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6b8:	e016      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6c2:	d10d      	bne.n	800b6e0 <HAL_UART_Receive_IT+0xcc>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <HAL_UART_Receive_IT+0xc2>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	227f      	movs	r2, #127	; 0x7f
 800b6d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6d4:	e008      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	223f      	movs	r2, #63	; 0x3f
 800b6da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6de:	e003      	b.n	800b6e8 <HAL_UART_Receive_IT+0xd4>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2222      	movs	r2, #34	; 0x22
 800b6f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689a      	ldr	r2, [r3, #8]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0201 	orr.w	r2, r2, #1
 800b702:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70c:	d107      	bne.n	800b71e <HAL_UART_Receive_IT+0x10a>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d103      	bne.n	800b71e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4a0d      	ldr	r2, [pc, #52]	; (800b750 <HAL_UART_Receive_IT+0x13c>)
 800b71a:	661a      	str	r2, [r3, #96]	; 0x60
 800b71c:	e002      	b.n	800b724 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4a0c      	ldr	r2, [pc, #48]	; (800b754 <HAL_UART_Receive_IT+0x140>)
 800b722:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b73a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e000      	b.n	800b742 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b740:	2302      	movs	r3, #2
  }
}
 800b742:	4618      	mov	r0, r3
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	0800c329 	.word	0x0800c329
 800b754:	0800c283 	.word	0x0800c283

0800b758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b77e:	4013      	ands	r3, r2
 800b780:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d113      	bne.n	800b7b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00e      	beq.n	800b7b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d009      	beq.n	800b7b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 8100 	beq.w	800b9a6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	4798      	blx	r3
      }
      return;
 800b7ae:	e0fa      	b.n	800b9a6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 80d5 	beq.w	800b962 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 80ca 	beq.w	800b962 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x9e>
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ee:	f043 0201 	orr.w	r2, r3, #1
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	f003 0302 	and.w	r3, r3, #2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00e      	beq.n	800b81e <HAL_UART_IRQHandler+0xc6>
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d009      	beq.n	800b81e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2202      	movs	r2, #2
 800b810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b816:	f043 0204 	orr.w	r2, r3, #4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00e      	beq.n	800b846 <HAL_UART_IRQHandler+0xee>
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2204      	movs	r2, #4
 800b838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b83e:	f043 0202 	orr.w	r2, r3, #2
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d013      	beq.n	800b878 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b00      	cmp	r3, #0
 800b858:	d104      	bne.n	800b864 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b860:	2b00      	cmp	r3, #0
 800b862:	d009      	beq.n	800b878 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2208      	movs	r2, #8
 800b86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b870:	f043 0208 	orr.w	r2, r3, #8
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00f      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x14a>
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00a      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89a:	f043 0220 	orr.w	r2, r3, #32
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d07f      	beq.n	800b9aa <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00c      	beq.n	800b8ce <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8d2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8de:	2b40      	cmp	r3, #64	; 0x40
 800b8e0:	d004      	beq.n	800b8ec <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d031      	beq.n	800b950 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fc79 	bl	800c1e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fc:	2b40      	cmp	r3, #64	; 0x40
 800b8fe:	d123      	bne.n	800b948 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b90e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d013      	beq.n	800b940 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91c:	4a26      	ldr	r2, [pc, #152]	; (800b9b8 <HAL_UART_IRQHandler+0x260>)
 800b91e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b924:	4618      	mov	r0, r3
 800b926:	f7fa fa65 	bl	8005df4 <HAL_DMA_Abort_IT>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d016      	beq.n	800b95e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b93a:	4610      	mov	r0, r2
 800b93c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93e:	e00e      	b.n	800b95e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f84f 	bl	800b9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b946:	e00a      	b.n	800b95e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f84b 	bl	800b9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b94e:	e006      	b.n	800b95e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f847 	bl	800b9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b95c:	e025      	b.n	800b9aa <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b95e:	bf00      	nop
    return;
 800b960:	e023      	b.n	800b9aa <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00d      	beq.n	800b988 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b972:	2b00      	cmp	r3, #0
 800b974:	d008      	beq.n	800b988 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d017      	beq.n	800b9ae <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	4798      	blx	r3
    }
    return;
 800b986:	e012      	b.n	800b9ae <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00e      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x258>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d009      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc57 	bl	800c250 <UART_EndTransmit_IT>
    return;
 800b9a2:	bf00      	nop
 800b9a4:	e004      	b.n	800b9b0 <HAL_UART_IRQHandler+0x258>
      return;
 800b9a6:	bf00      	nop
 800b9a8:	e002      	b.n	800b9b0 <HAL_UART_IRQHandler+0x258>
    return;
 800b9aa:	bf00      	nop
 800b9ac:	e000      	b.n	800b9b0 <HAL_UART_IRQHandler+0x258>
    return;
 800b9ae:	bf00      	nop
  }

}
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0800c225 	.word	0x0800c225

0800b9bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ba00:	2300      	movs	r3, #0
 800ba02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689a      	ldr	r2, [r3, #8]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	431a      	orrs	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	69db      	ldr	r3, [r3, #28]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	4bb1      	ldr	r3, [pc, #708]	; (800bcec <UART_SetConfig+0x2f4>)
 800ba28:	4013      	ands	r3, r2
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6812      	ldr	r2, [r2, #0]
 800ba2e:	6939      	ldr	r1, [r7, #16]
 800ba30:	430b      	orrs	r3, r1
 800ba32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a9f      	ldr	r2, [pc, #636]	; (800bcf0 <UART_SetConfig+0x2f8>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d121      	bne.n	800babc <UART_SetConfig+0xc4>
 800ba78:	4b9e      	ldr	r3, [pc, #632]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800ba7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d816      	bhi.n	800bab4 <UART_SetConfig+0xbc>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <UART_SetConfig+0x94>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800ba9d 	.word	0x0800ba9d
 800ba90:	0800baa9 	.word	0x0800baa9
 800ba94:	0800baa3 	.word	0x0800baa3
 800ba98:	0800baaf 	.word	0x0800baaf
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e151      	b.n	800bd46 <UART_SetConfig+0x34e>
 800baa2:	2302      	movs	r3, #2
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e14e      	b.n	800bd46 <UART_SetConfig+0x34e>
 800baa8:	2304      	movs	r3, #4
 800baaa:	77fb      	strb	r3, [r7, #31]
 800baac:	e14b      	b.n	800bd46 <UART_SetConfig+0x34e>
 800baae:	2308      	movs	r3, #8
 800bab0:	77fb      	strb	r3, [r7, #31]
 800bab2:	e148      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bab4:	2310      	movs	r3, #16
 800bab6:	77fb      	strb	r3, [r7, #31]
 800bab8:	bf00      	nop
 800baba:	e144      	b.n	800bd46 <UART_SetConfig+0x34e>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a8d      	ldr	r2, [pc, #564]	; (800bcf8 <UART_SetConfig+0x300>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d134      	bne.n	800bb30 <UART_SetConfig+0x138>
 800bac6:	4b8b      	ldr	r3, [pc, #556]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bacc:	f003 030c 	and.w	r3, r3, #12
 800bad0:	2b0c      	cmp	r3, #12
 800bad2:	d829      	bhi.n	800bb28 <UART_SetConfig+0x130>
 800bad4:	a201      	add	r2, pc, #4	; (adr r2, 800badc <UART_SetConfig+0xe4>)
 800bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bada:	bf00      	nop
 800badc:	0800bb11 	.word	0x0800bb11
 800bae0:	0800bb29 	.word	0x0800bb29
 800bae4:	0800bb29 	.word	0x0800bb29
 800bae8:	0800bb29 	.word	0x0800bb29
 800baec:	0800bb1d 	.word	0x0800bb1d
 800baf0:	0800bb29 	.word	0x0800bb29
 800baf4:	0800bb29 	.word	0x0800bb29
 800baf8:	0800bb29 	.word	0x0800bb29
 800bafc:	0800bb17 	.word	0x0800bb17
 800bb00:	0800bb29 	.word	0x0800bb29
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb29 	.word	0x0800bb29
 800bb0c:	0800bb23 	.word	0x0800bb23
 800bb10:	2300      	movs	r3, #0
 800bb12:	77fb      	strb	r3, [r7, #31]
 800bb14:	e117      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb16:	2302      	movs	r3, #2
 800bb18:	77fb      	strb	r3, [r7, #31]
 800bb1a:	e114      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	77fb      	strb	r3, [r7, #31]
 800bb20:	e111      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb22:	2308      	movs	r3, #8
 800bb24:	77fb      	strb	r3, [r7, #31]
 800bb26:	e10e      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	77fb      	strb	r3, [r7, #31]
 800bb2c:	bf00      	nop
 800bb2e:	e10a      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a71      	ldr	r2, [pc, #452]	; (800bcfc <UART_SetConfig+0x304>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d120      	bne.n	800bb7c <UART_SetConfig+0x184>
 800bb3a:	4b6e      	ldr	r3, [pc, #440]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb44:	2b10      	cmp	r3, #16
 800bb46:	d00f      	beq.n	800bb68 <UART_SetConfig+0x170>
 800bb48:	2b10      	cmp	r3, #16
 800bb4a:	d802      	bhi.n	800bb52 <UART_SetConfig+0x15a>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <UART_SetConfig+0x164>
 800bb50:	e010      	b.n	800bb74 <UART_SetConfig+0x17c>
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d005      	beq.n	800bb62 <UART_SetConfig+0x16a>
 800bb56:	2b30      	cmp	r3, #48	; 0x30
 800bb58:	d009      	beq.n	800bb6e <UART_SetConfig+0x176>
 800bb5a:	e00b      	b.n	800bb74 <UART_SetConfig+0x17c>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	77fb      	strb	r3, [r7, #31]
 800bb60:	e0f1      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb62:	2302      	movs	r3, #2
 800bb64:	77fb      	strb	r3, [r7, #31]
 800bb66:	e0ee      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	77fb      	strb	r3, [r7, #31]
 800bb6c:	e0eb      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e0e8      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb74:	2310      	movs	r3, #16
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	bf00      	nop
 800bb7a:	e0e4      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a5f      	ldr	r2, [pc, #380]	; (800bd00 <UART_SetConfig+0x308>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d120      	bne.n	800bbc8 <UART_SetConfig+0x1d0>
 800bb86:	4b5b      	ldr	r3, [pc, #364]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb90:	2b40      	cmp	r3, #64	; 0x40
 800bb92:	d00f      	beq.n	800bbb4 <UART_SetConfig+0x1bc>
 800bb94:	2b40      	cmp	r3, #64	; 0x40
 800bb96:	d802      	bhi.n	800bb9e <UART_SetConfig+0x1a6>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d005      	beq.n	800bba8 <UART_SetConfig+0x1b0>
 800bb9c:	e010      	b.n	800bbc0 <UART_SetConfig+0x1c8>
 800bb9e:	2b80      	cmp	r3, #128	; 0x80
 800bba0:	d005      	beq.n	800bbae <UART_SetConfig+0x1b6>
 800bba2:	2bc0      	cmp	r3, #192	; 0xc0
 800bba4:	d009      	beq.n	800bbba <UART_SetConfig+0x1c2>
 800bba6:	e00b      	b.n	800bbc0 <UART_SetConfig+0x1c8>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	77fb      	strb	r3, [r7, #31]
 800bbac:	e0cb      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	77fb      	strb	r3, [r7, #31]
 800bbb2:	e0c8      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e0c5      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bbba:	2308      	movs	r3, #8
 800bbbc:	77fb      	strb	r3, [r7, #31]
 800bbbe:	e0c2      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	77fb      	strb	r3, [r7, #31]
 800bbc4:	bf00      	nop
 800bbc6:	e0be      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a4d      	ldr	r2, [pc, #308]	; (800bd04 <UART_SetConfig+0x30c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d124      	bne.n	800bc1c <UART_SetConfig+0x224>
 800bbd2:	4b48      	ldr	r3, [pc, #288]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe0:	d012      	beq.n	800bc08 <UART_SetConfig+0x210>
 800bbe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe6:	d802      	bhi.n	800bbee <UART_SetConfig+0x1f6>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d007      	beq.n	800bbfc <UART_SetConfig+0x204>
 800bbec:	e012      	b.n	800bc14 <UART_SetConfig+0x21c>
 800bbee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf2:	d006      	beq.n	800bc02 <UART_SetConfig+0x20a>
 800bbf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbf8:	d009      	beq.n	800bc0e <UART_SetConfig+0x216>
 800bbfa:	e00b      	b.n	800bc14 <UART_SetConfig+0x21c>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	77fb      	strb	r3, [r7, #31]
 800bc00:	e0a1      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc02:	2302      	movs	r3, #2
 800bc04:	77fb      	strb	r3, [r7, #31]
 800bc06:	e09e      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc08:	2304      	movs	r3, #4
 800bc0a:	77fb      	strb	r3, [r7, #31]
 800bc0c:	e09b      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc0e:	2308      	movs	r3, #8
 800bc10:	77fb      	strb	r3, [r7, #31]
 800bc12:	e098      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc14:	2310      	movs	r3, #16
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	bf00      	nop
 800bc1a:	e094      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a39      	ldr	r2, [pc, #228]	; (800bd08 <UART_SetConfig+0x310>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d124      	bne.n	800bc70 <UART_SetConfig+0x278>
 800bc26:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc34:	d012      	beq.n	800bc5c <UART_SetConfig+0x264>
 800bc36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc3a:	d802      	bhi.n	800bc42 <UART_SetConfig+0x24a>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d007      	beq.n	800bc50 <UART_SetConfig+0x258>
 800bc40:	e012      	b.n	800bc68 <UART_SetConfig+0x270>
 800bc42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc46:	d006      	beq.n	800bc56 <UART_SetConfig+0x25e>
 800bc48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc4c:	d009      	beq.n	800bc62 <UART_SetConfig+0x26a>
 800bc4e:	e00b      	b.n	800bc68 <UART_SetConfig+0x270>
 800bc50:	2301      	movs	r3, #1
 800bc52:	77fb      	strb	r3, [r7, #31]
 800bc54:	e077      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc56:	2302      	movs	r3, #2
 800bc58:	77fb      	strb	r3, [r7, #31]
 800bc5a:	e074      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	77fb      	strb	r3, [r7, #31]
 800bc60:	e071      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc62:	2308      	movs	r3, #8
 800bc64:	77fb      	strb	r3, [r7, #31]
 800bc66:	e06e      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc68:	2310      	movs	r3, #16
 800bc6a:	77fb      	strb	r3, [r7, #31]
 800bc6c:	bf00      	nop
 800bc6e:	e06a      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a25      	ldr	r2, [pc, #148]	; (800bd0c <UART_SetConfig+0x314>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d124      	bne.n	800bcc4 <UART_SetConfig+0x2cc>
 800bc7a:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bc84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc88:	d012      	beq.n	800bcb0 <UART_SetConfig+0x2b8>
 800bc8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8e:	d802      	bhi.n	800bc96 <UART_SetConfig+0x29e>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <UART_SetConfig+0x2ac>
 800bc94:	e012      	b.n	800bcbc <UART_SetConfig+0x2c4>
 800bc96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc9a:	d006      	beq.n	800bcaa <UART_SetConfig+0x2b2>
 800bc9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bca0:	d009      	beq.n	800bcb6 <UART_SetConfig+0x2be>
 800bca2:	e00b      	b.n	800bcbc <UART_SetConfig+0x2c4>
 800bca4:	2300      	movs	r3, #0
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e04d      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e04a      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bcb0:	2304      	movs	r3, #4
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	e047      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	77fb      	strb	r3, [r7, #31]
 800bcba:	e044      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	bf00      	nop
 800bcc2:	e040      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a11      	ldr	r2, [pc, #68]	; (800bd10 <UART_SetConfig+0x318>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d139      	bne.n	800bd42 <UART_SetConfig+0x34a>
 800bcce:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <UART_SetConfig+0x2fc>)
 800bcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bcd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcdc:	d027      	beq.n	800bd2e <UART_SetConfig+0x336>
 800bcde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce2:	d817      	bhi.n	800bd14 <UART_SetConfig+0x31c>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01c      	beq.n	800bd22 <UART_SetConfig+0x32a>
 800bce8:	e027      	b.n	800bd3a <UART_SetConfig+0x342>
 800bcea:	bf00      	nop
 800bcec:	efff69f3 	.word	0xefff69f3
 800bcf0:	40011000 	.word	0x40011000
 800bcf4:	40023800 	.word	0x40023800
 800bcf8:	40004400 	.word	0x40004400
 800bcfc:	40004800 	.word	0x40004800
 800bd00:	40004c00 	.word	0x40004c00
 800bd04:	40005000 	.word	0x40005000
 800bd08:	40011400 	.word	0x40011400
 800bd0c:	40007800 	.word	0x40007800
 800bd10:	40007c00 	.word	0x40007c00
 800bd14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd18:	d006      	beq.n	800bd28 <UART_SetConfig+0x330>
 800bd1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bd1e:	d009      	beq.n	800bd34 <UART_SetConfig+0x33c>
 800bd20:	e00b      	b.n	800bd3a <UART_SetConfig+0x342>
 800bd22:	2300      	movs	r3, #0
 800bd24:	77fb      	strb	r3, [r7, #31]
 800bd26:	e00e      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e00b      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bd2e:	2304      	movs	r3, #4
 800bd30:	77fb      	strb	r3, [r7, #31]
 800bd32:	e008      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bd34:	2308      	movs	r3, #8
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	e005      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bd3a:	2310      	movs	r3, #16
 800bd3c:	77fb      	strb	r3, [r7, #31]
 800bd3e:	bf00      	nop
 800bd40:	e001      	b.n	800bd46 <UART_SetConfig+0x34e>
 800bd42:	2310      	movs	r3, #16
 800bd44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd4e:	d17f      	bne.n	800be50 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bd50:	7ffb      	ldrb	r3, [r7, #31]
 800bd52:	2b08      	cmp	r3, #8
 800bd54:	d85c      	bhi.n	800be10 <UART_SetConfig+0x418>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <UART_SetConfig+0x364>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bda1 	.word	0x0800bda1
 800bd64:	0800bdc1 	.word	0x0800bdc1
 800bd68:	0800be11 	.word	0x0800be11
 800bd6c:	0800bdd9 	.word	0x0800bdd9
 800bd70:	0800be11 	.word	0x0800be11
 800bd74:	0800be11 	.word	0x0800be11
 800bd78:	0800be11 	.word	0x0800be11
 800bd7c:	0800bdf9 	.word	0x0800bdf9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd80:	f7fc fade 	bl	8008340 <HAL_RCC_GetPCLK1Freq>
 800bd84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	005a      	lsls	r2, r3, #1
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	085b      	lsrs	r3, r3, #1
 800bd90:	441a      	add	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	61bb      	str	r3, [r7, #24]
        break;
 800bd9e:	e03a      	b.n	800be16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bda0:	f7fc fae2 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 800bda4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	005a      	lsls	r2, r3, #1
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	085b      	lsrs	r3, r3, #1
 800bdb0:	441a      	add	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	61bb      	str	r3, [r7, #24]
        break;
 800bdbe:	e02a      	b.n	800be16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	085a      	lsrs	r2, r3, #1
 800bdc6:	4b5f      	ldr	r3, [pc, #380]	; (800bf44 <UART_SetConfig+0x54c>)
 800bdc8:	4413      	add	r3, r2
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	6852      	ldr	r2, [r2, #4]
 800bdce:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	61bb      	str	r3, [r7, #24]
        break;
 800bdd6:	e01e      	b.n	800be16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdd8:	f7fc f9ce 	bl	8008178 <HAL_RCC_GetSysClockFreq>
 800bddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	005a      	lsls	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	441a      	add	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	61bb      	str	r3, [r7, #24]
        break;
 800bdf6:	e00e      	b.n	800be16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	61bb      	str	r3, [r7, #24]
        break;
 800be0e:	e002      	b.n	800be16 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	75fb      	strb	r3, [r7, #23]
        break;
 800be14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b0f      	cmp	r3, #15
 800be1a:	d916      	bls.n	800be4a <UART_SetConfig+0x452>
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be22:	d212      	bcs.n	800be4a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	b29b      	uxth	r3, r3
 800be28:	f023 030f 	bic.w	r3, r3, #15
 800be2c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	085b      	lsrs	r3, r3, #1
 800be32:	b29b      	uxth	r3, r3
 800be34:	f003 0307 	and.w	r3, r3, #7
 800be38:	b29a      	uxth	r2, r3
 800be3a:	897b      	ldrh	r3, [r7, #10]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	897a      	ldrh	r2, [r7, #10]
 800be46:	60da      	str	r2, [r3, #12]
 800be48:	e070      	b.n	800bf2c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	75fb      	strb	r3, [r7, #23]
 800be4e:	e06d      	b.n	800bf2c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800be50:	7ffb      	ldrb	r3, [r7, #31]
 800be52:	2b08      	cmp	r3, #8
 800be54:	d859      	bhi.n	800bf0a <UART_SetConfig+0x512>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0x464>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be9f 	.word	0x0800be9f
 800be64:	0800bebd 	.word	0x0800bebd
 800be68:	0800bf0b 	.word	0x0800bf0b
 800be6c:	0800bed5 	.word	0x0800bed5
 800be70:	0800bf0b 	.word	0x0800bf0b
 800be74:	0800bf0b 	.word	0x0800bf0b
 800be78:	0800bf0b 	.word	0x0800bf0b
 800be7c:	0800bef3 	.word	0x0800bef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be80:	f7fc fa5e 	bl	8008340 <HAL_RCC_GetPCLK1Freq>
 800be84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	085a      	lsrs	r2, r3, #1
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	441a      	add	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	fbb2 f3f3 	udiv	r3, r2, r3
 800be98:	b29b      	uxth	r3, r3
 800be9a:	61bb      	str	r3, [r7, #24]
        break;
 800be9c:	e038      	b.n	800bf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be9e:	f7fc fa63 	bl	8008368 <HAL_RCC_GetPCLK2Freq>
 800bea2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	085a      	lsrs	r2, r3, #1
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	441a      	add	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	61bb      	str	r3, [r7, #24]
        break;
 800beba:	e029      	b.n	800bf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	085a      	lsrs	r2, r3, #1
 800bec2:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <UART_SetConfig+0x550>)
 800bec4:	4413      	add	r3, r2
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6852      	ldr	r2, [r2, #4]
 800beca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bece:	b29b      	uxth	r3, r3
 800bed0:	61bb      	str	r3, [r7, #24]
        break;
 800bed2:	e01d      	b.n	800bf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bed4:	f7fc f950 	bl	8008178 <HAL_RCC_GetSysClockFreq>
 800bed8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	085a      	lsrs	r2, r3, #1
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	441a      	add	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800beec:	b29b      	uxth	r3, r3
 800beee:	61bb      	str	r3, [r7, #24]
        break;
 800bef0:	e00e      	b.n	800bf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	085b      	lsrs	r3, r3, #1
 800bef8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	61bb      	str	r3, [r7, #24]
        break;
 800bf08:	e002      	b.n	800bf10 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	75fb      	strb	r3, [r7, #23]
        break;
 800bf0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b0f      	cmp	r3, #15
 800bf14:	d908      	bls.n	800bf28 <UART_SetConfig+0x530>
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1c:	d204      	bcs.n	800bf28 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	e001      	b.n	800bf2c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	01e84800 	.word	0x01e84800
 800bf48:	00f42400 	.word	0x00f42400

0800bf4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00a      	beq.n	800bf76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	f003 0302 	and.w	r3, r3, #2
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00a      	beq.n	800bf98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	430a      	orrs	r2, r1
 800bf96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00a      	beq.n	800bfba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	430a      	orrs	r2, r1
 800bfb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	f003 0308 	and.w	r3, r3, #8
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	f003 0310 	and.w	r3, r3, #16
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00a      	beq.n	800bffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	f003 0320 	and.w	r3, r3, #32
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01a      	beq.n	800c062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c04a:	d10a      	bne.n	800c062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	605a      	str	r2, [r3, #4]
  }
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af02      	add	r7, sp, #8
 800c096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c09e:	f7f9 fc8b 	bl	80059b8 <HAL_GetTick>
 800c0a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0308 	and.w	r3, r3, #8
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d10e      	bne.n	800c0d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f814 	bl	800c0ee <UART_WaitOnFlagUntilTimeout>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e00a      	b.n	800c0e6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2220      	movs	r2, #32
 800c0d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	603b      	str	r3, [r7, #0]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0fe:	e05d      	b.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c106:	d059      	beq.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c108:	f7f9 fc56 	bl	80059b8 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	d302      	bcc.n	800c11e <UART_WaitOnFlagUntilTimeout+0x30>
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d11b      	bne.n	800c156 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c12c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689a      	ldr	r2, [r3, #8]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 0201 	bic.w	r2, r2, #1
 800c13c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2220      	movs	r2, #32
 800c142:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2220      	movs	r2, #32
 800c148:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e042      	b.n	800c1dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d02b      	beq.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c16e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c172:	d123      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c17c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c18c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 0201 	bic.w	r2, r2, #1
 800c19c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e00f      	b.n	800c1dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	69da      	ldr	r2, [r3, #28]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2301      	moveq	r3, #1
 800c1ce:	2300      	movne	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d092      	beq.n	800c100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c1fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0201 	bic.w	r2, r2, #1
 800c20a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2220      	movs	r2, #32
 800c210:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff fbce 	bl	800b9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c266:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2220      	movs	r2, #32
 800c26c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fba1 	bl	800b9bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c27a:	bf00      	nop
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b084      	sub	sp, #16
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c290:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c296:	2b22      	cmp	r3, #34	; 0x22
 800c298:	d13a      	bne.n	800c310 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c2a2:	89bb      	ldrh	r3, [r7, #12]
 800c2a4:	b2d9      	uxtb	r1, r3
 800c2a6:	89fb      	ldrh	r3, [r7, #14]
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ae:	400a      	ands	r2, r1
 800c2b0:	b2d2      	uxtb	r2, r2
 800c2b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d121      	bne.n	800c320 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c2ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689a      	ldr	r2, [r3, #8]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0201 	bic.w	r2, r2, #1
 800c2fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2220      	movs	r2, #32
 800c300:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff fb61 	bl	800b9d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c30e:	e007      	b.n	800c320 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 0208 	orr.w	r2, r2, #8
 800c31e:	619a      	str	r2, [r3, #24]
}
 800c320:	bf00      	nop
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c336:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c33c:	2b22      	cmp	r3, #34	; 0x22
 800c33e:	d13a      	bne.n	800c3b6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c346:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c34e:	89ba      	ldrh	r2, [r7, #12]
 800c350:	89fb      	ldrh	r3, [r7, #14]
 800c352:	4013      	ands	r3, r2
 800c354:	b29a      	uxth	r2, r3
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35e:	1c9a      	adds	r2, r3, #2
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	b29a      	uxth	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d121      	bne.n	800c3c6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c390:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2220      	movs	r2, #32
 800c3a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff fb0e 	bl	800b9d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3b4:	e007      	b.n	800c3c6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f042 0208 	orr.w	r2, r2, #8
 800c3c4:	619a      	str	r2, [r3, #24]
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	f107 001c 	add.w	r0, r7, #28
 800c3de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c3e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c3ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c3ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c3f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c3f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c3fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	4b07      	ldr	r3, [pc, #28]	; (800c424 <SDMMC_Init+0x54>)
 800c408:	4013      	ands	r3, r2
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	b004      	add	sp, #16
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	ffff8100 	.word	0xffff8100

0800c428 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c436:	4618      	mov	r0, r3
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2203      	movs	r2, #3
 800c470:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c472:	2002      	movs	r0, #2
 800c474:	f7f9 faac 	bl	80059d0 <HAL_Delay>
  
  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f003 0303 	and.w	r3, r3, #3
}
 800c492:	4618      	mov	r0, r3
 800c494:	370c      	adds	r7, #12
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
	...

0800c4a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c4c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c4ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <SDMMC_SendCommand+0x50>)
 800c4d8:	4013      	ands	r3, r2
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	fffff000 	.word	0xfffff000

0800c4f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	b2db      	uxtb	r3, r3
}
 800c502:	4618      	mov	r0, r3
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c50e:	b480      	push	{r7}
 800c510:	b085      	sub	sp, #20
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3314      	adds	r3, #20
 800c51c:	461a      	mov	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	4413      	add	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
}  
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c55a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c560:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c566:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0

}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c59a:	2310      	movs	r3, #16
 800c59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ac:	f107 0308 	add.w	r3, r7, #8
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff ff74 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5bc:	2110      	movs	r1, #16
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa42 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3720      	adds	r7, #32
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c5de:	2311      	movs	r3, #17
 800c5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5e2:	2340      	movs	r3, #64	; 0x40
 800c5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5f0:	f107 0308 	add.w	r3, r7, #8
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff ff52 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c600:	2111      	movs	r1, #17
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa20 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c60a:	69fb      	ldr	r3, [r7, #28]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3720      	adds	r7, #32
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c622:	2312      	movs	r3, #18
 800c624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c626:	2340      	movs	r3, #64	; 0x40
 800c628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c62a:	2300      	movs	r3, #0
 800c62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c634:	f107 0308 	add.w	r3, r7, #8
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff30 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c640:	f241 3288 	movw	r2, #5000	; 0x1388
 800c644:	2112      	movs	r1, #18
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f9fe 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c64e:	69fb      	ldr	r3, [r7, #28]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c666:	2318      	movs	r3, #24
 800c668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c66a:	2340      	movs	r3, #64	; 0x40
 800c66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c678:	f107 0308 	add.w	r3, r7, #8
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ff0e 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c684:	f241 3288 	movw	r2, #5000	; 0x1388
 800c688:	2118      	movs	r1, #24
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f9dc 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c6aa:	2319      	movs	r3, #25
 800c6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff feec 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6cc:	2119      	movs	r1, #25
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f9ba 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3720      	adds	r7, #32
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6fe:	f107 0308 	add.w	r3, r7, #8
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fecb 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c70a:	4a05      	ldr	r2, [pc, #20]	; (800c720 <SDMMC_CmdStopTransfer+0x40>)
 800c70c:	210c      	movs	r1, #12
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f99a 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c716:	69fb      	ldr	r3, [r7, #28]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	05f5e100 	.word	0x05f5e100

0800c724 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08a      	sub	sp, #40	; 0x28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c734:	2307      	movs	r3, #7
 800c736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c738:	2340      	movs	r3, #64	; 0x40
 800c73a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c73c:	2300      	movs	r3, #0
 800c73e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c744:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c746:	f107 0310 	add.w	r3, r7, #16
 800c74a:	4619      	mov	r1, r3
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f7ff fea7 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c752:	f241 3288 	movw	r2, #5000	; 0x1388
 800c756:	2107      	movs	r1, #7
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f975 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c75e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c762:	4618      	mov	r0, r3
 800c764:	3728      	adds	r7, #40	; 0x28
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b088      	sub	sp, #32
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c77a:	2300      	movs	r3, #0
 800c77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c77e:	2300      	movs	r3, #0
 800c780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c788:	f107 0308 	add.w	r3, r7, #8
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff fe86 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f92f 	bl	800c9f8 <SDMMC_GetCmdError>
 800c79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c79c:	69fb      	ldr	r3, [r7, #28]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b088      	sub	sp, #32
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c7ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b8:	2340      	movs	r3, #64	; 0x40
 800c7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff fe67 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fb18 	bl	800ce08 <SDMMC_GetCmdResp7>
 800c7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7da:	69fb      	ldr	r3, [r7, #28]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c7f2:	2337      	movs	r3, #55	; 0x37
 800c7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7f6:	2340      	movs	r3, #64	; 0x40
 800c7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c804:	f107 0308 	add.w	r3, r7, #8
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe48 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c810:	f241 3288 	movw	r2, #5000	; 0x1388
 800c814:	2137      	movs	r1, #55	; 0x37
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f916 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c81e:	69fb      	ldr	r3, [r7, #28]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <SDMMC_CmdAppOperCommand+0x44>)
 800c836:	4313      	orrs	r3, r2
 800c838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c83a:	2329      	movs	r3, #41	; 0x29
 800c83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c83e:	2340      	movs	r3, #64	; 0x40
 800c840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c842:	2300      	movs	r3, #0
 800c844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c84c:	f107 0308 	add.w	r3, r7, #8
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff fe24 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fa27 	bl	800ccac <SDMMC_GetCmdResp3>
 800c85e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c860:	69fb      	ldr	r3, [r7, #28]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3720      	adds	r7, #32
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	80100000 	.word	0x80100000

0800c870 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c87e:	2306      	movs	r3, #6
 800c880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c882:	2340      	movs	r3, #64	; 0x40
 800c884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c886:	2300      	movs	r3, #0
 800c888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c890:	f107 0308 	add.w	r3, r7, #8
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7ff fe02 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a0:	2106      	movs	r1, #6
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f8d0 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3720      	adds	r7, #32
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c8c0:	2333      	movs	r3, #51	; 0x33
 800c8c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8c4:	2340      	movs	r3, #64	; 0x40
 800c8c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8d2:	f107 0308 	add.w	r3, r7, #8
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff fde1 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c8de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8e2:	2133      	movs	r1, #51	; 0x33
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f8af 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c8ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ec:	69fb      	ldr	r3, [r7, #28]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3720      	adds	r7, #32
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b088      	sub	sp, #32
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c902:	2302      	movs	r3, #2
 800c904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c906:	23c0      	movs	r3, #192	; 0xc0
 800c908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c90a:	2300      	movs	r3, #0
 800c90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c914:	f107 0308 	add.w	r3, r7, #8
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fdc0 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f97d 	bl	800cc20 <SDMMC_GetCmdResp2>
 800c926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c928:	69fb      	ldr	r3, [r7, #28]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b088      	sub	sp, #32
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c940:	2309      	movs	r3, #9
 800c942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c944:	23c0      	movs	r3, #192	; 0xc0
 800c946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff fda1 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f95e 	bl	800cc20 <SDMMC_GetCmdResp2>
 800c964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c97e:	2303      	movs	r3, #3
 800c980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff fd82 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	2103      	movs	r1, #3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f9bd 	bl	800cd20 <SDMMC_GetCmdResp6>
 800c9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a8:	69fb      	ldr	r3, [r7, #28]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3720      	adds	r7, #32
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b088      	sub	sp, #32
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c9c0:	230d      	movs	r3, #13
 800c9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff fd61 	bl	800c4a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e2:	210d      	movs	r1, #13
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f82f 	bl	800ca48 <SDMMC_GetCmdResp1>
 800c9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ec:	69fb      	ldr	r3, [r7, #28]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3720      	adds	r7, #32
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c9f8:	b490      	push	{r4, r7}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <SDMMC_GetCmdError+0x48>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a0f      	ldr	r2, [pc, #60]	; (800ca44 <SDMMC_GetCmdError+0x4c>)
 800ca06:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0a:	0a5b      	lsrs	r3, r3, #9
 800ca0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca14:	4623      	mov	r3, r4
 800ca16:	1e5c      	subs	r4, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d102      	bne.n	800ca22 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca20:	e009      	b.n	800ca36 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0f2      	beq.n	800ca14 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	22c5      	movs	r2, #197	; 0xc5
 800ca32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bc90      	pop	{r4, r7}
 800ca3e:	4770      	bx	lr
 800ca40:	20000000 	.word	0x20000000
 800ca44:	10624dd3 	.word	0x10624dd3

0800ca48 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca48:	b590      	push	{r4, r7, lr}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	460b      	mov	r3, r1
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca56:	4b6f      	ldr	r3, [pc, #444]	; (800cc14 <SDMMC_GetCmdResp1+0x1cc>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a6f      	ldr	r2, [pc, #444]	; (800cc18 <SDMMC_GetCmdResp1+0x1d0>)
 800ca5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca60:	0a5b      	lsrs	r3, r3, #9
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca68:	4623      	mov	r3, r4
 800ca6a:	1e5c      	subs	r4, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca74:	e0c9      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0f0      	beq.n	800ca68 <SDMMC_GetCmdResp1+0x20>
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1eb      	bne.n	800ca68 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d004      	beq.n	800caa6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caa2:	2304      	movs	r3, #4
 800caa4:	e0b1      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d004      	beq.n	800cabc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cab8:	2301      	movs	r3, #1
 800caba:	e0a6      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	22c5      	movs	r2, #197	; 0xc5
 800cac0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff fd16 	bl	800c4f4 <SDMMC_GetCommandResponse>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	7afb      	ldrb	r3, [r7, #11]
 800cace:	4293      	cmp	r3, r2
 800cad0:	d001      	beq.n	800cad6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e099      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cad6:	2100      	movs	r1, #0
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fd18 	bl	800c50e <SDMMC_GetResponse>
 800cade:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	4b4e      	ldr	r3, [pc, #312]	; (800cc1c <SDMMC_GetCmdResp1+0x1d4>)
 800cae4:	4013      	ands	r3, r2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800caea:	2300      	movs	r3, #0
 800caec:	e08d      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da02      	bge.n	800cafa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800caf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800caf8:	e087      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	e080      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb12:	2380      	movs	r3, #128	; 0x80
 800cb14:	e079      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb24:	e071      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb34:	e069      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb44:	e061      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb54:	e059      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb64:	e051      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb74:	e049      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb84:	e041      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb94:	e039      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cba4:	e031      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbb4:	e029      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbc4:	e021      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbd4:	e019      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cbe4:	e011      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cbf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbf4:	e009      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f003 0308 	and.w	r3, r3, #8
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc04:	e001      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	371c      	adds	r7, #28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd90      	pop	{r4, r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20000000 	.word	0x20000000
 800cc18:	10624dd3 	.word	0x10624dd3
 800cc1c:	fdffe008 	.word	0xfdffe008

0800cc20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cc20:	b490      	push	{r4, r7}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc28:	4b1e      	ldr	r3, [pc, #120]	; (800cca4 <SDMMC_GetCmdResp2+0x84>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a1e      	ldr	r2, [pc, #120]	; (800cca8 <SDMMC_GetCmdResp2+0x88>)
 800cc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc32:	0a5b      	lsrs	r3, r3, #9
 800cc34:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc3c:	4623      	mov	r3, r4
 800cc3e:	1e5c      	subs	r4, r3, #1
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc48:	e026      	b.n	800cc98 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0f0      	beq.n	800cc3c <SDMMC_GetCmdResp2+0x1c>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1eb      	bne.n	800cc3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2204      	movs	r2, #4
 800cc74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc76:	2304      	movs	r3, #4
 800cc78:	e00e      	b.n	800cc98 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d004      	beq.n	800cc90 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e003      	b.n	800cc98 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	22c5      	movs	r2, #197	; 0xc5
 800cc94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bc90      	pop	{r4, r7}
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20000000 	.word	0x20000000
 800cca8:	10624dd3 	.word	0x10624dd3

0800ccac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ccac:	b490      	push	{r4, r7}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccb4:	4b18      	ldr	r3, [pc, #96]	; (800cd18 <SDMMC_GetCmdResp3+0x6c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a18      	ldr	r2, [pc, #96]	; (800cd1c <SDMMC_GetCmdResp3+0x70>)
 800ccba:	fba2 2303 	umull	r2, r3, r2, r3
 800ccbe:	0a5b      	lsrs	r3, r3, #9
 800ccc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccc8:	4623      	mov	r3, r4
 800ccca:	1e5c      	subs	r4, r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccd4:	e01b      	b.n	800cd0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccda:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d0f0      	beq.n	800ccc8 <SDMMC_GetCmdResp3+0x1c>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1eb      	bne.n	800ccc8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	f003 0304 	and.w	r3, r3, #4
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2204      	movs	r2, #4
 800cd00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd02:	2304      	movs	r3, #4
 800cd04:	e003      	b.n	800cd0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	22c5      	movs	r2, #197	; 0xc5
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bc90      	pop	{r4, r7}
 800cd16:	4770      	bx	lr
 800cd18:	20000000 	.word	0x20000000
 800cd1c:	10624dd3 	.word	0x10624dd3

0800cd20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd2e:	4b34      	ldr	r3, [pc, #208]	; (800ce00 <SDMMC_GetCmdResp6+0xe0>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a34      	ldr	r2, [pc, #208]	; (800ce04 <SDMMC_GetCmdResp6+0xe4>)
 800cd34:	fba2 2303 	umull	r2, r3, r2, r3
 800cd38:	0a5b      	lsrs	r3, r3, #9
 800cd3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd42:	4623      	mov	r3, r4
 800cd44:	1e5c      	subs	r4, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd4e:	e052      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0f0      	beq.n	800cd42 <SDMMC_GetCmdResp6+0x22>
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1eb      	bne.n	800cd42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6e:	f003 0304 	and.w	r3, r3, #4
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d004      	beq.n	800cd80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2204      	movs	r2, #4
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd7c:	2304      	movs	r3, #4
 800cd7e:	e03a      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd84:	f003 0301 	and.w	r3, r3, #1
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e02f      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f7ff fbac 	bl	800c4f4 <SDMMC_GetCommandResponse>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	461a      	mov	r2, r3
 800cda0:	7afb      	ldrb	r3, [r7, #11]
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d001      	beq.n	800cdaa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e025      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	22c5      	movs	r2, #197	; 0xc5
 800cdae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff fbab 	bl	800c50e <SDMMC_GetResponse>
 800cdb8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d106      	bne.n	800cdd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	0c1b      	lsrs	r3, r3, #16
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e011      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cde0:	e009      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdf0:	e001      	b.n	800cdf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	371c      	adds	r7, #28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd90      	pop	{r4, r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20000000 	.word	0x20000000
 800ce04:	10624dd3 	.word	0x10624dd3

0800ce08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ce08:	b490      	push	{r4, r7}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce10:	4b21      	ldr	r3, [pc, #132]	; (800ce98 <SDMMC_GetCmdResp7+0x90>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a21      	ldr	r2, [pc, #132]	; (800ce9c <SDMMC_GetCmdResp7+0x94>)
 800ce16:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1a:	0a5b      	lsrs	r3, r3, #9
 800ce1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce24:	4623      	mov	r3, r4
 800ce26:	1e5c      	subs	r4, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce30:	e02c      	b.n	800ce8c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0f0      	beq.n	800ce24 <SDMMC_GetCmdResp7+0x1c>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1eb      	bne.n	800ce24 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d004      	beq.n	800ce62 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce5e:	2304      	movs	r3, #4
 800ce60:	e014      	b.n	800ce8c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e009      	b.n	800ce8c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2240      	movs	r2, #64	; 0x40
 800ce88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ce8a:	2300      	movs	r3, #0
  
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bc90      	pop	{r4, r7}
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20000000 	.word	0x20000000
 800ce9c:	10624dd3 	.word	0x10624dd3

0800cea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cea0:	b084      	sub	sp, #16
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	f107 001c 	add.w	r0, r7, #28
 800ceae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d120      	bne.n	800cefa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68da      	ldr	r2, [r3, #12]
 800cec8:	4b20      	ldr	r3, [pc, #128]	; (800cf4c <USB_CoreInit+0xac>)
 800ceca:	4013      	ands	r3, r2
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d105      	bne.n	800ceee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 fac4 	bl	800e47c <USB_CoreReset>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]
 800cef8:	e010      	b.n	800cf1c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f001 fab8 	bl	800e47c <USB_CoreReset>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d10b      	bne.n	800cf3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	f043 0206 	orr.w	r2, r3, #6
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f043 0220 	orr.w	r2, r3, #32
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf46:	b004      	add	sp, #16
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	ffbdffbf 	.word	0xffbdffbf

0800cf50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d165      	bne.n	800d030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4a41      	ldr	r2, [pc, #260]	; (800d06c <USB_SetTurnaroundTime+0x11c>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d906      	bls.n	800cf7a <USB_SetTurnaroundTime+0x2a>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	4a40      	ldr	r2, [pc, #256]	; (800d070 <USB_SetTurnaroundTime+0x120>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d802      	bhi.n	800cf7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cf74:	230f      	movs	r3, #15
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	e062      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	4a3c      	ldr	r2, [pc, #240]	; (800d070 <USB_SetTurnaroundTime+0x120>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d906      	bls.n	800cf90 <USB_SetTurnaroundTime+0x40>
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	4a3b      	ldr	r2, [pc, #236]	; (800d074 <USB_SetTurnaroundTime+0x124>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d802      	bhi.n	800cf90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cf8a:	230e      	movs	r3, #14
 800cf8c:	617b      	str	r3, [r7, #20]
 800cf8e:	e057      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	4a38      	ldr	r2, [pc, #224]	; (800d074 <USB_SetTurnaroundTime+0x124>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d906      	bls.n	800cfa6 <USB_SetTurnaroundTime+0x56>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4a37      	ldr	r2, [pc, #220]	; (800d078 <USB_SetTurnaroundTime+0x128>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d802      	bhi.n	800cfa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cfa0:	230d      	movs	r3, #13
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e04c      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	4a33      	ldr	r2, [pc, #204]	; (800d078 <USB_SetTurnaroundTime+0x128>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d906      	bls.n	800cfbc <USB_SetTurnaroundTime+0x6c>
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	4a32      	ldr	r2, [pc, #200]	; (800d07c <USB_SetTurnaroundTime+0x12c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d802      	bhi.n	800cfbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cfb6:	230c      	movs	r3, #12
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e041      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	4a2f      	ldr	r2, [pc, #188]	; (800d07c <USB_SetTurnaroundTime+0x12c>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d906      	bls.n	800cfd2 <USB_SetTurnaroundTime+0x82>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	4a2e      	ldr	r2, [pc, #184]	; (800d080 <USB_SetTurnaroundTime+0x130>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d802      	bhi.n	800cfd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cfcc:	230b      	movs	r3, #11
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	e036      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	4a2a      	ldr	r2, [pc, #168]	; (800d080 <USB_SetTurnaroundTime+0x130>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d906      	bls.n	800cfe8 <USB_SetTurnaroundTime+0x98>
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	4a29      	ldr	r2, [pc, #164]	; (800d084 <USB_SetTurnaroundTime+0x134>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d802      	bhi.n	800cfe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cfe2:	230a      	movs	r3, #10
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	e02b      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4a26      	ldr	r2, [pc, #152]	; (800d084 <USB_SetTurnaroundTime+0x134>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d906      	bls.n	800cffe <USB_SetTurnaroundTime+0xae>
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	4a25      	ldr	r2, [pc, #148]	; (800d088 <USB_SetTurnaroundTime+0x138>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d802      	bhi.n	800cffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cff8:	2309      	movs	r3, #9
 800cffa:	617b      	str	r3, [r7, #20]
 800cffc:	e020      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	4a21      	ldr	r2, [pc, #132]	; (800d088 <USB_SetTurnaroundTime+0x138>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d906      	bls.n	800d014 <USB_SetTurnaroundTime+0xc4>
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	4a20      	ldr	r2, [pc, #128]	; (800d08c <USB_SetTurnaroundTime+0x13c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d802      	bhi.n	800d014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d00e:	2308      	movs	r3, #8
 800d010:	617b      	str	r3, [r7, #20]
 800d012:	e015      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	4a1d      	ldr	r2, [pc, #116]	; (800d08c <USB_SetTurnaroundTime+0x13c>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d906      	bls.n	800d02a <USB_SetTurnaroundTime+0xda>
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	4a1c      	ldr	r2, [pc, #112]	; (800d090 <USB_SetTurnaroundTime+0x140>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d802      	bhi.n	800d02a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d024:	2307      	movs	r3, #7
 800d026:	617b      	str	r3, [r7, #20]
 800d028:	e00a      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d02a:	2306      	movs	r3, #6
 800d02c:	617b      	str	r3, [r7, #20]
 800d02e:	e007      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d102      	bne.n	800d03c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d036:	2309      	movs	r3, #9
 800d038:	617b      	str	r3, [r7, #20]
 800d03a:	e001      	b.n	800d040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d03c:	2309      	movs	r3, #9
 800d03e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	68da      	ldr	r2, [r3, #12]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	029b      	lsls	r3, r3, #10
 800d054:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d058:	431a      	orrs	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	00d8acbf 	.word	0x00d8acbf
 800d070:	00e4e1bf 	.word	0x00e4e1bf
 800d074:	00f423ff 	.word	0x00f423ff
 800d078:	0106737f 	.word	0x0106737f
 800d07c:	011a499f 	.word	0x011a499f
 800d080:	01312cff 	.word	0x01312cff
 800d084:	014ca43f 	.word	0x014ca43f
 800d088:	016e35ff 	.word	0x016e35ff
 800d08c:	01a6ab1f 	.word	0x01a6ab1f
 800d090:	01e847ff 	.word	0x01e847ff

0800d094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f043 0201 	orr.w	r2, r3, #1
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b083      	sub	sp, #12
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	f023 0201 	bic.w	r2, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d106      	bne.n	800d104 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	60da      	str	r2, [r3, #12]
 800d102:	e00b      	b.n	800d11c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	60da      	str	r2, [r3, #12]
 800d116:	e001      	b.n	800d11c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e003      	b.n	800d124 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d11c:	2032      	movs	r0, #50	; 0x32
 800d11e:	f7f8 fc57 	bl	80059d0 <HAL_Delay>

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d12c:	b084      	sub	sp, #16
 800d12e:	b580      	push	{r7, lr}
 800d130:	b086      	sub	sp, #24
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
 800d14a:	e009      	b.n	800d160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	3340      	adds	r3, #64	; 0x40
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4413      	add	r3, r2
 800d156:	2200      	movs	r2, #0
 800d158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	3301      	adds	r3, #1
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b0e      	cmp	r3, #14
 800d164:	d9f2      	bls.n	800d14c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d11c      	bne.n	800d1a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d17a:	f043 0302 	orr.w	r3, r3, #2
 800d17e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e005      	b.n	800d1b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	680b      	ldr	r3, [r1, #0]
 800d1d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d10c      	bne.n	800d1f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d1de:	2100      	movs	r1, #0
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f959 	bl	800d498 <USB_SetDevSpeed>
 800d1e6:	e018      	b.n	800d21a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d1e8:	2101      	movs	r1, #1
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f954 	bl	800d498 <USB_SetDevSpeed>
 800d1f0:	e013      	b.n	800d21a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d10c      	bne.n	800d212 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d104      	bne.n	800d208 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d1fe:	2100      	movs	r1, #0
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f949 	bl	800d498 <USB_SetDevSpeed>
 800d206:	e008      	b.n	800d21a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d208:	2101      	movs	r1, #1
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f944 	bl	800d498 <USB_SetDevSpeed>
 800d210:	e003      	b.n	800d21a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d212:	2103      	movs	r1, #3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f93f 	bl	800d498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d21a:	2110      	movs	r1, #16
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f8f3 	bl	800d408 <USB_FlushTxFifo>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f911 	bl	800d454 <USB_FlushRxFifo>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d242:	461a      	mov	r2, r3
 800d244:	2300      	movs	r3, #0
 800d246:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24e:	461a      	mov	r2, r3
 800d250:	2300      	movs	r3, #0
 800d252:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d25a:	461a      	mov	r2, r3
 800d25c:	2300      	movs	r3, #0
 800d25e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d260:	2300      	movs	r3, #0
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	e043      	b.n	800d2ee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	015a      	lsls	r2, r3, #5
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4413      	add	r3, r2
 800d26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d27c:	d118      	bne.n	800d2b0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d290:	461a      	mov	r2, r3
 800d292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	e013      	b.n	800d2c2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	015a      	lsls	r2, r3, #5
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	e008      	b.n	800d2c2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	461a      	mov	r2, r3
 800d2be:	2300      	movs	r3, #0
 800d2c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d3b7      	bcc.n	800d266 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	613b      	str	r3, [r7, #16]
 800d2fa:	e043      	b.n	800d384 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d312:	d118      	bne.n	800d346 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	461a      	mov	r2, r3
 800d328:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	e013      	b.n	800d358 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	015a      	lsls	r2, r3, #5
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	4413      	add	r3, r2
 800d338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d33c:	461a      	mov	r2, r3
 800d33e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d342:	6013      	str	r3, [r2, #0]
 800d344:	e008      	b.n	800d358 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d352:	461a      	mov	r2, r3
 800d354:	2300      	movs	r3, #0
 800d356:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d364:	461a      	mov	r2, r3
 800d366:	2300      	movs	r3, #0
 800d368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	4413      	add	r3, r2
 800d372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d376:	461a      	mov	r2, r3
 800d378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d37c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3301      	adds	r3, #1
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d3b7      	bcc.n	800d2fc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d39a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d39e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d3ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	f043 0210 	orr.w	r2, r3, #16
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	699a      	ldr	r2, [r3, #24]
 800d3c4:	4b0e      	ldr	r3, [pc, #56]	; (800d400 <USB_DevInit+0x2d4>)
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d005      	beq.n	800d3de <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	f043 0208 	orr.w	r2, r3, #8
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d105      	bne.n	800d3f0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	699a      	ldr	r2, [r3, #24]
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <USB_DevInit+0x2d8>)
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3fc:	b004      	add	sp, #16
 800d3fe:	4770      	bx	lr
 800d400:	803c3800 	.word	0x803c3800
 800d404:	40000004 	.word	0x40000004

0800d408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	019b      	lsls	r3, r3, #6
 800d41a:	f043 0220 	orr.w	r2, r3, #32
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3301      	adds	r3, #1
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4a09      	ldr	r2, [pc, #36]	; (800d450 <USB_FlushTxFifo+0x48>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d901      	bls.n	800d434 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e006      	b.n	800d442 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	f003 0320 	and.w	r3, r3, #32
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	d0f0      	beq.n	800d422 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	00030d40 	.word	0x00030d40

0800d454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2210      	movs	r2, #16
 800d464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3301      	adds	r3, #1
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4a09      	ldr	r2, [pc, #36]	; (800d494 <USB_FlushRxFifo+0x40>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d901      	bls.n	800d478 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d474:	2303      	movs	r3, #3
 800d476:	e006      	b.n	800d486 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	f003 0310 	and.w	r3, r3, #16
 800d480:	2b10      	cmp	r3, #16
 800d482:	d0f0      	beq.n	800d466 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	00030d40 	.word	0x00030d40

0800d498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	68f9      	ldr	r1, [r7, #12]
 800d4b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b087      	sub	sp, #28
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f003 0306 	and.w	r3, r3, #6
 800d4e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	75fb      	strb	r3, [r7, #23]
 800d4ee:	e00a      	b.n	800d506 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d002      	beq.n	800d4fc <USB_GetDevSpeed+0x32>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b06      	cmp	r3, #6
 800d4fa:	d102      	bne.n	800d502 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	75fb      	strb	r3, [r7, #23]
 800d500:	e001      	b.n	800d506 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d502:	230f      	movs	r3, #15
 800d504:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d139      	bne.n	800d5a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d536:	69da      	ldr	r2, [r3, #28]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	f003 030f 	and.w	r3, r3, #15
 800d540:	2101      	movs	r1, #1
 800d542:	fa01 f303 	lsl.w	r3, r1, r3
 800d546:	b29b      	uxth	r3, r3
 800d548:	68f9      	ldr	r1, [r7, #12]
 800d54a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d54e:	4313      	orrs	r3, r2
 800d550:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d153      	bne.n	800d610 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	015a      	lsls	r2, r3, #5
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	4413      	add	r3, r2
 800d570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	78db      	ldrb	r3, [r3, #3]
 800d582:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d584:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	059b      	lsls	r3, r3, #22
 800d58a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d58c:	431a      	orrs	r2, r3
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	0159      	lsls	r1, r3, #5
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	440b      	add	r3, r1
 800d596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59a:	4619      	mov	r1, r3
 800d59c:	4b20      	ldr	r3, [pc, #128]	; (800d620 <USB_ActivateEndpoint+0x10c>)
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	600b      	str	r3, [r1, #0]
 800d5a2:	e035      	b.n	800d610 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5aa:	69da      	ldr	r2, [r3, #28]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 030f 	and.w	r3, r3, #15
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ba:	041b      	lsls	r3, r3, #16
 800d5bc:	68f9      	ldr	r1, [r7, #12]
 800d5be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	015a      	lsls	r2, r3, #5
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d119      	bne.n	800d610 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	015a      	lsls	r2, r3, #5
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	78db      	ldrb	r3, [r3, #3]
 800d5f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5f8:	430b      	orrs	r3, r1
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	0159      	lsls	r1, r3, #5
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	440b      	add	r3, r1
 800d604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d608:	4619      	mov	r1, r3
 800d60a:	4b05      	ldr	r3, [pc, #20]	; (800d620 <USB_ActivateEndpoint+0x10c>)
 800d60c:	4313      	orrs	r3, r2
 800d60e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	10008000 	.word	0x10008000

0800d624 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d161      	bne.n	800d704 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d656:	d11f      	bne.n	800d698 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	015a      	lsls	r2, r3, #5
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	4413      	add	r3, r2
 800d660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	0151      	lsls	r1, r2, #5
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	440a      	add	r2, r1
 800d66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d676:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	015a      	lsls	r2, r3, #5
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	4413      	add	r3, r2
 800d680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	0151      	lsls	r1, r2, #5
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	440a      	add	r2, r1
 800d68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d696:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 030f 	and.w	r3, r3, #15
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	43db      	mvns	r3, r3
 800d6b2:	68f9      	ldr	r1, [r7, #12]
 800d6b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6c2:	69da      	ldr	r2, [r3, #28]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f003 030f 	and.w	r3, r3, #15
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	43db      	mvns	r3, r3
 800d6d6:	68f9      	ldr	r1, [r7, #12]
 800d6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6dc:	4013      	ands	r3, r2
 800d6de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	0159      	lsls	r1, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	440b      	add	r3, r1
 800d6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4b35      	ldr	r3, [pc, #212]	; (800d7d4 <USB_DeactivateEndpoint+0x1b0>)
 800d6fe:	4013      	ands	r3, r2
 800d700:	600b      	str	r3, [r1, #0]
 800d702:	e060      	b.n	800d7c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d71a:	d11f      	bne.n	800d75c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	0151      	lsls	r1, r2, #5
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	440a      	add	r2, r1
 800d732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d73a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	015a      	lsls	r2, r3, #5
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	4413      	add	r3, r2
 800d744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	0151      	lsls	r1, r2, #5
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	440a      	add	r2, r1
 800d752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d75a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	f003 030f 	and.w	r3, r3, #15
 800d76c:	2101      	movs	r1, #1
 800d76e:	fa01 f303 	lsl.w	r3, r1, r3
 800d772:	041b      	lsls	r3, r3, #16
 800d774:	43db      	mvns	r3, r3
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d77c:	4013      	ands	r3, r2
 800d77e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d786:	69da      	ldr	r2, [r3, #28]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	f003 030f 	and.w	r3, r3, #15
 800d790:	2101      	movs	r1, #1
 800d792:	fa01 f303 	lsl.w	r3, r1, r3
 800d796:	041b      	lsls	r3, r3, #16
 800d798:	43db      	mvns	r3, r3
 800d79a:	68f9      	ldr	r1, [r7, #12]
 800d79c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	0159      	lsls	r1, r3, #5
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	440b      	add	r3, r1
 800d7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7be:	4619      	mov	r1, r3
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <USB_DeactivateEndpoint+0x1b4>)
 800d7c2:	4013      	ands	r3, r2
 800d7c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	ec337800 	.word	0xec337800
 800d7d8:	eff37800 	.word	0xeff37800

0800d7dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08a      	sub	sp, #40	; 0x28
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	785b      	ldrb	r3, [r3, #1]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	f040 8163 	bne.w	800dac4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d132      	bne.n	800d86c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	015a      	lsls	r2, r3, #5
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	4413      	add	r3, r2
 800d80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d812:	691a      	ldr	r2, [r3, #16]
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	0159      	lsls	r1, r3, #5
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	440b      	add	r3, r1
 800d81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d820:	4619      	mov	r1, r3
 800d822:	4ba5      	ldr	r3, [pc, #660]	; (800dab8 <USB_EPStartXfer+0x2dc>)
 800d824:	4013      	ands	r3, r2
 800d826:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	015a      	lsls	r2, r3, #5
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	4413      	add	r3, r2
 800d830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	0151      	lsls	r1, r2, #5
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	440a      	add	r2, r1
 800d83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	015a      	lsls	r2, r3, #5
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	4413      	add	r3, r2
 800d850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d854:	691a      	ldr	r2, [r3, #16]
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	0159      	lsls	r1, r3, #5
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	440b      	add	r3, r1
 800d85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d862:	4619      	mov	r1, r3
 800d864:	4b95      	ldr	r3, [pc, #596]	; (800dabc <USB_EPStartXfer+0x2e0>)
 800d866:	4013      	ands	r3, r2
 800d868:	610b      	str	r3, [r1, #16]
 800d86a:	e074      	b.n	800d956 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	015a      	lsls	r2, r3, #5
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	4413      	add	r3, r2
 800d874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d878:	691a      	ldr	r2, [r3, #16]
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	0159      	lsls	r1, r3, #5
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	440b      	add	r3, r1
 800d882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d886:	4619      	mov	r1, r3
 800d888:	4b8c      	ldr	r3, [pc, #560]	; (800dabc <USB_EPStartXfer+0x2e0>)
 800d88a:	4013      	ands	r3, r2
 800d88c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d89a:	691a      	ldr	r2, [r3, #16]
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	0159      	lsls	r1, r3, #5
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	440b      	add	r3, r1
 800d8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4b83      	ldr	r3, [pc, #524]	; (800dab8 <USB_EPStartXfer+0x2dc>)
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8bc:	691a      	ldr	r2, [r3, #16]
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6959      	ldr	r1, [r3, #20]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	440b      	add	r3, r1
 800d8c8:	1e59      	subs	r1, r3, #1
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800d8d2:	04d9      	lsls	r1, r3, #19
 800d8d4:	4b7a      	ldr	r3, [pc, #488]	; (800dac0 <USB_EPStartXfer+0x2e4>)
 800d8d6:	400b      	ands	r3, r1
 800d8d8:	69b9      	ldr	r1, [r7, #24]
 800d8da:	0148      	lsls	r0, r1, #5
 800d8dc:	69f9      	ldr	r1, [r7, #28]
 800d8de:	4401      	add	r1, r0
 800d8e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	015a      	lsls	r2, r3, #5
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f4:	691a      	ldr	r2, [r3, #16]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	695b      	ldr	r3, [r3, #20]
 800d8fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8fe:	69b9      	ldr	r1, [r7, #24]
 800d900:	0148      	lsls	r0, r1, #5
 800d902:	69f9      	ldr	r1, [r7, #28]
 800d904:	4401      	add	r1, r0
 800d906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d90a:	4313      	orrs	r3, r2
 800d90c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	78db      	ldrb	r3, [r3, #3]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d11f      	bne.n	800d956 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	69ba      	ldr	r2, [r7, #24]
 800d926:	0151      	lsls	r1, r2, #5
 800d928:	69fa      	ldr	r2, [r7, #28]
 800d92a:	440a      	add	r2, r1
 800d92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d930:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d934:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	015a      	lsls	r2, r3, #5
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	4413      	add	r3, r2
 800d93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	0151      	lsls	r1, r2, #5
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	440a      	add	r2, r1
 800d94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d954:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d14b      	bne.n	800d9f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	691b      	ldr	r3, [r3, #16]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d009      	beq.n	800d978 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	015a      	lsls	r2, r3, #5
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	4413      	add	r3, r2
 800d96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d970:	461a      	mov	r2, r3
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	78db      	ldrb	r3, [r3, #3]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d128      	bne.n	800d9d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d110      	bne.n	800d9b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	4413      	add	r3, r2
 800d998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	0151      	lsls	r1, r2, #5
 800d9a2:	69fa      	ldr	r2, [r7, #28]
 800d9a4:	440a      	add	r2, r1
 800d9a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9ae:	6013      	str	r3, [r2, #0]
 800d9b0:	e00f      	b.n	800d9d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	015a      	lsls	r2, r3, #5
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	69ba      	ldr	r2, [r7, #24]
 800d9c2:	0151      	lsls	r1, r2, #5
 800d9c4:	69fa      	ldr	r2, [r7, #28]
 800d9c6:	440a      	add	r2, r1
 800d9c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	69ba      	ldr	r2, [r7, #24]
 800d9e2:	0151      	lsls	r1, r2, #5
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	440a      	add	r2, r1
 800d9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	e133      	b.n	800dc5c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	015a      	lsls	r2, r3, #5
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	69ba      	ldr	r2, [r7, #24]
 800da04:	0151      	lsls	r1, r2, #5
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	440a      	add	r2, r1
 800da0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	78db      	ldrb	r3, [r3, #3]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d015      	beq.n	800da48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 811b 	beq.w	800dc5c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	2101      	movs	r1, #1
 800da38:	fa01 f303 	lsl.w	r3, r1, r3
 800da3c:	69f9      	ldr	r1, [r7, #28]
 800da3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da42:	4313      	orrs	r3, r2
 800da44:	634b      	str	r3, [r1, #52]	; 0x34
 800da46:	e109      	b.n	800dc5c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da54:	2b00      	cmp	r3, #0
 800da56:	d110      	bne.n	800da7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	0151      	lsls	r1, r2, #5
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	440a      	add	r2, r1
 800da6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	e00f      	b.n	800da9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	4413      	add	r3, r2
 800da82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	69ba      	ldr	r2, [r7, #24]
 800da8a:	0151      	lsls	r1, r2, #5
 800da8c:	69fa      	ldr	r2, [r7, #28]
 800da8e:	440a      	add	r2, r1
 800da90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	68d9      	ldr	r1, [r3, #12]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	781a      	ldrb	r2, [r3, #0]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	b298      	uxth	r0, r3
 800daa8:	79fb      	ldrb	r3, [r7, #7]
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	4603      	mov	r3, r0
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	f000 fa38 	bl	800df24 <USB_WritePacket>
 800dab4:	e0d2      	b.n	800dc5c <USB_EPStartXfer+0x480>
 800dab6:	bf00      	nop
 800dab8:	e007ffff 	.word	0xe007ffff
 800dabc:	fff80000 	.word	0xfff80000
 800dac0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	0159      	lsls	r1, r3, #5
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	440b      	add	r3, r1
 800dada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dade:	4619      	mov	r1, r3
 800dae0:	4b61      	ldr	r3, [pc, #388]	; (800dc68 <USB_EPStartXfer+0x48c>)
 800dae2:	4013      	ands	r3, r2
 800dae4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	4413      	add	r3, r2
 800daee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf2:	691a      	ldr	r2, [r3, #16]
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	0159      	lsls	r1, r3, #5
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	440b      	add	r3, r1
 800dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db00:	4619      	mov	r1, r3
 800db02:	4b5a      	ldr	r3, [pc, #360]	; (800dc6c <USB_EPStartXfer+0x490>)
 800db04:	4013      	ands	r3, r2
 800db06:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	695b      	ldr	r3, [r3, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d123      	bne.n	800db58 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	4413      	add	r3, r2
 800db18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db1c:	691a      	ldr	r2, [r3, #16]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db26:	69b9      	ldr	r1, [r7, #24]
 800db28:	0148      	lsls	r0, r1, #5
 800db2a:	69f9      	ldr	r1, [r7, #28]
 800db2c:	4401      	add	r1, r0
 800db2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db32:	4313      	orrs	r3, r2
 800db34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	015a      	lsls	r2, r3, #5
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	4413      	add	r3, r2
 800db3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	69ba      	ldr	r2, [r7, #24]
 800db46:	0151      	lsls	r1, r2, #5
 800db48:	69fa      	ldr	r2, [r7, #28]
 800db4a:	440a      	add	r2, r1
 800db4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db54:	6113      	str	r3, [r2, #16]
 800db56:	e033      	b.n	800dbc0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	695a      	ldr	r2, [r3, #20]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	4413      	add	r3, r2
 800db62:	1e5a      	subs	r2, r3, #1
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	fbb2 f3f3 	udiv	r3, r2, r3
 800db6c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	015a      	lsls	r2, r3, #5
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	4413      	add	r3, r2
 800db76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db7a:	691a      	ldr	r2, [r3, #16]
 800db7c:	8afb      	ldrh	r3, [r7, #22]
 800db7e:	04d9      	lsls	r1, r3, #19
 800db80:	4b3b      	ldr	r3, [pc, #236]	; (800dc70 <USB_EPStartXfer+0x494>)
 800db82:	400b      	ands	r3, r1
 800db84:	69b9      	ldr	r1, [r7, #24]
 800db86:	0148      	lsls	r0, r1, #5
 800db88:	69f9      	ldr	r1, [r7, #28]
 800db8a:	4401      	add	r1, r0
 800db8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db90:	4313      	orrs	r3, r2
 800db92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	015a      	lsls	r2, r3, #5
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	4413      	add	r3, r2
 800db9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba0:	691a      	ldr	r2, [r3, #16]
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	8af9      	ldrh	r1, [r7, #22]
 800dba8:	fb01 f303 	mul.w	r3, r1, r3
 800dbac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbb0:	69b9      	ldr	r1, [r7, #24]
 800dbb2:	0148      	lsls	r0, r1, #5
 800dbb4:	69f9      	ldr	r1, [r7, #28]
 800dbb6:	4401      	add	r1, r0
 800dbb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d10d      	bne.n	800dbe2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d009      	beq.n	800dbe2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	68d9      	ldr	r1, [r3, #12]
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	015a      	lsls	r2, r3, #5
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	4413      	add	r3, r2
 800dbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbde:	460a      	mov	r2, r1
 800dbe0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	78db      	ldrb	r3, [r3, #3]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d128      	bne.n	800dc3c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d110      	bne.n	800dc1c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	69ba      	ldr	r2, [r7, #24]
 800dc0a:	0151      	lsls	r1, r2, #5
 800dc0c:	69fa      	ldr	r2, [r7, #28]
 800dc0e:	440a      	add	r2, r1
 800dc10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	e00f      	b.n	800dc3c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	4413      	add	r3, r2
 800dc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	0151      	lsls	r1, r2, #5
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	440a      	add	r2, r1
 800dc32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	015a      	lsls	r2, r3, #5
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	4413      	add	r3, r2
 800dc44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	69ba      	ldr	r2, [r7, #24]
 800dc4c:	0151      	lsls	r1, r2, #5
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	440a      	add	r2, r1
 800dc52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	fff80000 	.word	0xfff80000
 800dc6c:	e007ffff 	.word	0xe007ffff
 800dc70:	1ff80000 	.word	0x1ff80000

0800dc74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	785b      	ldrb	r3, [r3, #1]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	f040 80cd 	bne.w	800de30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	695b      	ldr	r3, [r3, #20]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d132      	bne.n	800dd04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	015a      	lsls	r2, r3, #5
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	4413      	add	r3, r2
 800dca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcaa:	691a      	ldr	r2, [r3, #16]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	0159      	lsls	r1, r3, #5
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	440b      	add	r3, r1
 800dcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4b98      	ldr	r3, [pc, #608]	; (800df1c <USB_EP0StartXfer+0x2a8>)
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	015a      	lsls	r2, r3, #5
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	0151      	lsls	r1, r2, #5
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	440a      	add	r2, r1
 800dcd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	0159      	lsls	r1, r3, #5
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	440b      	add	r3, r1
 800dcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4b88      	ldr	r3, [pc, #544]	; (800df20 <USB_EP0StartXfer+0x2ac>)
 800dcfe:	4013      	ands	r3, r2
 800dd00:	610b      	str	r3, [r1, #16]
 800dd02:	e04e      	b.n	800dda2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd10:	691a      	ldr	r2, [r3, #16]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	0159      	lsls	r1, r3, #5
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	440b      	add	r3, r1
 800dd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4b7f      	ldr	r3, [pc, #508]	; (800df20 <USB_EP0StartXfer+0x2ac>)
 800dd22:	4013      	ands	r3, r2
 800dd24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd32:	691a      	ldr	r2, [r3, #16]
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	0159      	lsls	r1, r3, #5
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	440b      	add	r3, r1
 800dd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd40:	4619      	mov	r1, r3
 800dd42:	4b76      	ldr	r3, [pc, #472]	; (800df1c <USB_EP0StartXfer+0x2a8>)
 800dd44:	4013      	ands	r3, r2
 800dd46:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	695a      	ldr	r2, [r3, #20]
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d903      	bls.n	800dd5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	689a      	ldr	r2, [r3, #8]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	015a      	lsls	r2, r3, #5
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	4413      	add	r3, r2
 800dd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	0151      	lsls	r1, r2, #5
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	440a      	add	r2, r1
 800dd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd88:	691a      	ldr	r2, [r3, #16]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd92:	6939      	ldr	r1, [r7, #16]
 800dd94:	0148      	lsls	r0, r1, #5
 800dd96:	6979      	ldr	r1, [r7, #20]
 800dd98:	4401      	add	r1, r0
 800dd9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d11e      	bne.n	800dde6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d009      	beq.n	800ddc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	015a      	lsls	r2, r3, #5
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	0151      	lsls	r1, r2, #5
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	440a      	add	r2, r1
 800ddda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	e092      	b.n	800df0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	015a      	lsls	r2, r3, #5
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	4413      	add	r3, r2
 800ddee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d07e      	beq.n	800df0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	f003 030f 	and.w	r3, r3, #15
 800de1e:	2101      	movs	r1, #1
 800de20:	fa01 f303 	lsl.w	r3, r1, r3
 800de24:	6979      	ldr	r1, [r7, #20]
 800de26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de2a:	4313      	orrs	r3, r2
 800de2c:	634b      	str	r3, [r1, #52]	; 0x34
 800de2e:	e06d      	b.n	800df0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	015a      	lsls	r2, r3, #5
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	4413      	add	r3, r2
 800de38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de3c:	691a      	ldr	r2, [r3, #16]
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	0159      	lsls	r1, r3, #5
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	440b      	add	r3, r1
 800de46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de4a:	4619      	mov	r1, r3
 800de4c:	4b34      	ldr	r3, [pc, #208]	; (800df20 <USB_EP0StartXfer+0x2ac>)
 800de4e:	4013      	ands	r3, r2
 800de50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	015a      	lsls	r2, r3, #5
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	4413      	add	r3, r2
 800de5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5e:	691a      	ldr	r2, [r3, #16]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	0159      	lsls	r1, r3, #5
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	440b      	add	r3, r1
 800de68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de6c:	4619      	mov	r1, r3
 800de6e:	4b2b      	ldr	r3, [pc, #172]	; (800df1c <USB_EP0StartXfer+0x2a8>)
 800de70:	4013      	ands	r3, r2
 800de72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	689a      	ldr	r2, [r3, #8]
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	015a      	lsls	r2, r3, #5
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	4413      	add	r3, r2
 800de8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	0151      	lsls	r1, r2, #5
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	440a      	add	r2, r1
 800de9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dea2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	015a      	lsls	r2, r3, #5
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	4413      	add	r3, r2
 800deac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb0:	691a      	ldr	r2, [r3, #16]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800deba:	6939      	ldr	r1, [r7, #16]
 800debc:	0148      	lsls	r0, r1, #5
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	4401      	add	r1, r0
 800dec2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dec6:	4313      	orrs	r3, r2
 800dec8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d10d      	bne.n	800deec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d009      	beq.n	800deec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	68d9      	ldr	r1, [r3, #12]
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	015a      	lsls	r2, r3, #5
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	4413      	add	r3, r2
 800dee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee8:	460a      	mov	r2, r1
 800deea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	0151      	lsls	r1, r2, #5
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	440a      	add	r2, r1
 800df02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	e007ffff 	.word	0xe007ffff
 800df20:	fff80000 	.word	0xfff80000

0800df24 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800df24:	b480      	push	{r7}
 800df26:	b089      	sub	sp, #36	; 0x24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4611      	mov	r1, r2
 800df30:	461a      	mov	r2, r3
 800df32:	460b      	mov	r3, r1
 800df34:	71fb      	strb	r3, [r7, #7]
 800df36:	4613      	mov	r3, r2
 800df38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800df42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	d11a      	bne.n	800df80 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800df4a:	88bb      	ldrh	r3, [r7, #4]
 800df4c:	3303      	adds	r3, #3
 800df4e:	089b      	lsrs	r3, r3, #2
 800df50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df52:	2300      	movs	r3, #0
 800df54:	61bb      	str	r3, [r7, #24]
 800df56:	e00f      	b.n	800df78 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	031a      	lsls	r2, r3, #12
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df64:	461a      	mov	r2, r3
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	3304      	adds	r3, #4
 800df70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	3301      	adds	r3, #1
 800df76:	61bb      	str	r3, [r7, #24]
 800df78:	69ba      	ldr	r2, [r7, #24]
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d3eb      	bcc.n	800df58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3724      	adds	r7, #36	; 0x24
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df8e:	b480      	push	{r7}
 800df90:	b089      	sub	sp, #36	; 0x24
 800df92:	af00      	add	r7, sp, #0
 800df94:	60f8      	str	r0, [r7, #12]
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	4613      	mov	r3, r2
 800df9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dfa4:	88fb      	ldrh	r3, [r7, #6]
 800dfa6:	3303      	adds	r3, #3
 800dfa8:	089b      	lsrs	r3, r3, #2
 800dfaa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]
 800dfb0:	e00b      	b.n	800dfca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	601a      	str	r2, [r3, #0]
    pDest++;
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	61bb      	str	r3, [r7, #24]
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d3ef      	bcc.n	800dfb2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800dfd2:	69fb      	ldr	r3, [r7, #28]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3724      	adds	r7, #36	; 0x24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	785b      	ldrb	r3, [r3, #1]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d12c      	bne.n	800e056 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	015a      	lsls	r2, r3, #5
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	4413      	add	r3, r2
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	db12      	blt.n	800e034 <USB_EPSetStall+0x54>
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00f      	beq.n	800e034 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	015a      	lsls	r2, r3, #5
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	4413      	add	r3, r2
 800e01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	0151      	lsls	r1, r2, #5
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	440a      	add	r2, r1
 800e02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e02e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e032:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	0151      	lsls	r1, r2, #5
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	440a      	add	r2, r1
 800e04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e04e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	e02b      	b.n	800e0ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	015a      	lsls	r2, r3, #5
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	4413      	add	r3, r2
 800e05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	db12      	blt.n	800e08e <USB_EPSetStall+0xae>
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00f      	beq.n	800e08e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	015a      	lsls	r2, r3, #5
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4413      	add	r3, r2
 800e076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	0151      	lsls	r1, r2, #5
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	440a      	add	r2, r1
 800e084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e08c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	015a      	lsls	r2, r3, #5
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	4413      	add	r3, r2
 800e096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	0151      	lsls	r1, r2, #5
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d128      	bne.n	800e12a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	015a      	lsls	r2, r3, #5
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	4413      	add	r3, r2
 800e0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	0151      	lsls	r1, r2, #5
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	440a      	add	r2, r1
 800e0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	78db      	ldrb	r3, [r3, #3]
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d003      	beq.n	800e108 <USB_EPClearStall+0x4c>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	78db      	ldrb	r3, [r3, #3]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d138      	bne.n	800e17a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	0151      	lsls	r1, r2, #5
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	440a      	add	r2, r1
 800e11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	e027      	b.n	800e17a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	015a      	lsls	r2, r3, #5
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4413      	add	r3, r2
 800e132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	0151      	lsls	r1, r2, #5
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	440a      	add	r2, r1
 800e140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e148:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	78db      	ldrb	r3, [r3, #3]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d003      	beq.n	800e15a <USB_EPClearStall+0x9e>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	78db      	ldrb	r3, [r3, #3]
 800e156:	2b02      	cmp	r3, #2
 800e158:	d10f      	bne.n	800e17a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	015a      	lsls	r2, r3, #5
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4413      	add	r3, r2
 800e162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	0151      	lsls	r1, r2, #5
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	440a      	add	r2, r1
 800e170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e178:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e1aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	011b      	lsls	r3, r3, #4
 800e1b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e1bc:	68f9      	ldr	r1, [r7, #12]
 800e1be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1ee:	f023 0302 	bic.w	r3, r3, #2
 800e1f2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e1f4:	2003      	movs	r0, #3
 800e1f6:	f7f7 fbeb 	bl	80059d0 <HAL_Delay>

  return HAL_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e21e:	f043 0302 	orr.w	r3, r3, #2
 800e222:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e224:	2003      	movs	r0, #3
 800e226:	f7f7 fbd3 	bl	80059d0 <HAL_Delay>

  return HAL_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	4013      	ands	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e24c:	68fb      	ldr	r3, [r7, #12]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3714      	adds	r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b085      	sub	sp, #20
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e276:	69db      	ldr	r3, [r3, #28]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	4013      	ands	r3, r2
 800e27c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	0c1b      	lsrs	r3, r3, #16
}
 800e282:	4618      	mov	r0, r3
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2a0:	699b      	ldr	r3, [r3, #24]
 800e2a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2aa:	69db      	ldr	r3, [r3, #28]
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	b29b      	uxth	r3, r3
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b085      	sub	sp, #20
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e2d2:	78fb      	ldrb	r3, [r7, #3]
 800e2d4:	015a      	lsls	r2, r3, #5
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	4413      	add	r3, r2
 800e2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e8:	695b      	ldr	r3, [r3, #20]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2fe:	b480      	push	{r7}
 800e300:	b087      	sub	sp, #28
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	460b      	mov	r3, r1
 800e308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e320:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e322:	78fb      	ldrb	r3, [r7, #3]
 800e324:	f003 030f 	and.w	r3, r3, #15
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	fa22 f303 	lsr.w	r3, r2, r3
 800e32e:	01db      	lsls	r3, r3, #7
 800e330:	b2db      	uxtb	r3, r3
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	4313      	orrs	r3, r2
 800e336:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e338:	78fb      	ldrb	r3, [r7, #3]
 800e33a:	015a      	lsls	r2, r3, #5
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	4413      	add	r3, r2
 800e340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	4013      	ands	r3, r2
 800e34a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e34c:	68bb      	ldr	r3, [r7, #8]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr

0800e35a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b083      	sub	sp, #12
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	f003 0301 	and.w	r3, r3, #1
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
	...

0800e378 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e392:	4619      	mov	r1, r3
 800e394:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <USB_ActivateSetup+0x44>)
 800e396:	4013      	ands	r3, r2
 800e398:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	fffff800 	.word	0xfffff800

0800e3c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b087      	sub	sp, #28
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	607a      	str	r2, [r7, #4]
 800e3cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	333c      	adds	r3, #60	; 0x3c
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	4a26      	ldr	r2, [pc, #152]	; (800e478 <USB_EP0_OutStart+0xb8>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d90a      	bls.n	800e3fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3f4:	d101      	bne.n	800e3fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	e037      	b.n	800e46a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e400:	461a      	mov	r2, r3
 800e402:	2300      	movs	r3, #0
 800e404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	697a      	ldr	r2, [r7, #20]
 800e424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e428:	f043 0318 	orr.w	r3, r3, #24
 800e42c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e43c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e440:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e442:	7afb      	ldrb	r3, [r7, #11]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d10f      	bne.n	800e468 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44e:	461a      	mov	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e462:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	4f54300a 	.word	0x4f54300a

0800e47c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e484:	2300      	movs	r3, #0
 800e486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3301      	adds	r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	4a13      	ldr	r2, [pc, #76]	; (800e4e0 <USB_CoreReset+0x64>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d901      	bls.n	800e49a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e01b      	b.n	800e4d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	daf2      	bge.n	800e488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	f043 0201 	orr.w	r2, r3, #1
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <USB_CoreReset+0x64>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d901      	bls.n	800e4c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e006      	b.n	800e4d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d0f0      	beq.n	800e4b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	00030d40 	.word	0x00030d40

0800e4e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e4e8:	4904      	ldr	r1, [pc, #16]	; (800e4fc <MX_FATFS_Init+0x18>)
 800e4ea:	4805      	ldr	r0, [pc, #20]	; (800e500 <MX_FATFS_Init+0x1c>)
 800e4ec:	f004 fd5e 	bl	8012fac <FATFS_LinkDriver>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	4b03      	ldr	r3, [pc, #12]	; (800e504 <MX_FATFS_Init+0x20>)
 800e4f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e4f8:	bf00      	nop
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	200271c0 	.word	0x200271c0
 800e500:	0801ab60 	.word	0x0801ab60
 800e504:	200271bc 	.word	0x200271bc

0800e508 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e508:	b480      	push	{r7}
 800e50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e50c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e50e:	4618      	mov	r0, r3
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e522:	f000 f896 	bl	800e652 <BSP_SD_IsDetected>
 800e526:	4603      	mov	r3, r0
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d001      	beq.n	800e530 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e52c:	2302      	movs	r3, #2
 800e52e:	e012      	b.n	800e556 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e530:	480b      	ldr	r0, [pc, #44]	; (800e560 <BSP_SD_Init+0x48>)
 800e532:	f7fa fb15 	bl	8008b60 <HAL_SD_Init>
 800e536:	4603      	mov	r3, r0
 800e538:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d109      	bne.n	800e554 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e544:	4806      	ldr	r0, [pc, #24]	; (800e560 <BSP_SD_Init+0x48>)
 800e546:	f7fb f8cd 	bl	80096e4 <HAL_SD_ConfigWideBusOperation>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e554:	79fb      	ldrb	r3, [r7, #7]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	20008ad8 	.word	0x20008ad8

0800e564 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	68f9      	ldr	r1, [r7, #12]
 800e57a:	4806      	ldr	r0, [pc, #24]	; (800e594 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e57c:	f7fa fb88 	bl	8008c90 <HAL_SD_ReadBlocks_DMA>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20008ad8 	.word	0x20008ad8

0800e598 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	68f9      	ldr	r1, [r7, #12]
 800e5ae:	4806      	ldr	r0, [pc, #24]	; (800e5c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e5b0:	f7fa fc5a 	bl	8008e68 <HAL_SD_WriteBlocks_DMA>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20008ad8 	.word	0x20008ad8

0800e5cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e5d0:	4805      	ldr	r0, [pc, #20]	; (800e5e8 <BSP_SD_GetCardState+0x1c>)
 800e5d2:	f7fb f903 	bl	80097dc <HAL_SD_GetCardState>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b04      	cmp	r3, #4
 800e5da:	bf14      	ite	ne
 800e5dc:	2301      	movne	r3, #1
 800e5de:	2300      	moveq	r3, #0
 800e5e0:	b2db      	uxtb	r3, r3
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	20008ad8 	.word	0x20008ad8

0800e5ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	4803      	ldr	r0, [pc, #12]	; (800e604 <BSP_SD_GetCardInfo+0x18>)
 800e5f8:	f7fb f848 	bl	800968c <HAL_SD_GetCardInfo>
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20008ad8 	.word	0x20008ad8

0800e608 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e610:	f000 f818 	bl	800e644 <BSP_SD_AbortCallback>
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e624:	f000 f998 	bl	800e958 <BSP_SD_WriteCpltCallback>
}
 800e628:	bf00      	nop
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e638:	f000 f9a0 	bl	800e97c <BSP_SD_ReadCpltCallback>
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e644:	b480      	push	{r7}
 800e646:	af00      	add	r7, sp, #0

}
 800e648:	bf00      	nop
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e652:	b480      	push	{r7}
 800e654:	b083      	sub	sp, #12
 800e656:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e658:	2301      	movs	r3, #1
 800e65a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	b2db      	uxtb	r3, r3
}
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800e674:	f004 fd84 	bl	8013180 <osKernelGetTickCount>
 800e678:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800e67a:	e006      	b.n	800e68a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e67c:	f7ff ffa6 	bl	800e5cc <BSP_SD_GetCardState>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e686:	2300      	movs	r3, #0
 800e688:	e009      	b.n	800e69e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800e68a:	f004 fd79 	bl	8013180 <osKernelGetTickCount>
 800e68e:	4602      	mov	r2, r0
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	429a      	cmp	r2, r3
 800e698:	d8f0      	bhi.n	800e67c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e69a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e6b2:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <SD_CheckStatus+0x38>)
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6b8:	f7ff ff88 	bl	800e5cc <BSP_SD_GetCardState>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d107      	bne.n	800e6d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e6c2:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <SD_CheckStatus+0x38>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f023 0301 	bic.w	r3, r3, #1
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <SD_CheckStatus+0x38>)
 800e6d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e6d2:	4b03      	ldr	r3, [pc, #12]	; (800e6e0 <SD_CheckStatus+0x38>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	b2db      	uxtb	r3, r3
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20000009 	.word	0x20000009

0800e6e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e6ee:	4b1c      	ldr	r3, [pc, #112]	; (800e760 <SD_initialize+0x7c>)
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e6f4:	f004 fcec 	bl	80130d0 <osKernelGetState>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d129      	bne.n	800e752 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e6fe:	f7ff ff0b 	bl	800e518 <BSP_SD_Init>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d107      	bne.n	800e718 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff ffcc 	bl	800e6a8 <SD_CheckStatus>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	4b12      	ldr	r3, [pc, #72]	; (800e760 <SD_initialize+0x7c>)
 800e716:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e718:	4b11      	ldr	r3, [pc, #68]	; (800e760 <SD_initialize+0x7c>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d017      	beq.n	800e752 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800e722:	4b10      	ldr	r3, [pc, #64]	; (800e764 <SD_initialize+0x80>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d107      	bne.n	800e73a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e72a:	2200      	movs	r2, #0
 800e72c:	2102      	movs	r1, #2
 800e72e:	200a      	movs	r0, #10
 800e730:	f005 f946 	bl	80139c0 <osMessageQueueNew>
 800e734:	4602      	mov	r2, r0
 800e736:	4b0b      	ldr	r3, [pc, #44]	; (800e764 <SD_initialize+0x80>)
 800e738:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800e73a:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <SD_initialize+0x80>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d107      	bne.n	800e752 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800e742:	4b07      	ldr	r3, [pc, #28]	; (800e760 <SD_initialize+0x7c>)
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	b2db      	uxtb	r3, r3
 800e748:	f043 0301 	orr.w	r3, r3, #1
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	4b04      	ldr	r3, [pc, #16]	; (800e760 <SD_initialize+0x7c>)
 800e750:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e752:	4b03      	ldr	r3, [pc, #12]	; (800e760 <SD_initialize+0x7c>)
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	b2db      	uxtb	r3, r3
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	20000009 	.word	0x20000009
 800e764:	20000434 	.word	0x20000434

0800e768 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff ff97 	bl	800e6a8 <SD_CheckStatus>
 800e77a:	4603      	mov	r3, r0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60b9      	str	r1, [r7, #8]
 800e78c:	607a      	str	r2, [r7, #4]
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	4603      	mov	r3, r0
 800e792:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e798:	f247 5030 	movw	r0, #30000	; 0x7530
 800e79c:	f7ff ff66 	bl	800e66c <SD_CheckStatusWithTimeout>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	da01      	bge.n	800e7aa <SD_read+0x26>
  {
    return res;
 800e7a6:	7ffb      	ldrb	r3, [r7, #31]
 800e7a8:	e02f      	b.n	800e80a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	6879      	ldr	r1, [r7, #4]
 800e7ae:	68b8      	ldr	r0, [r7, #8]
 800e7b0:	f7ff fed8 	bl	800e564 <BSP_SD_ReadBlocks_DMA>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800e7b8:	7fbb      	ldrb	r3, [r7, #30]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d124      	bne.n	800e808 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e7be:	4b15      	ldr	r3, [pc, #84]	; (800e814 <SD_read+0x90>)
 800e7c0:	6818      	ldr	r0, [r3, #0]
 800e7c2:	f107 0112 	add.w	r1, r7, #18
 800e7c6:	f247 5330 	movw	r3, #30000	; 0x7530
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f005 f9f2 	bl	8013bb4 <osMessageQueueGet>
 800e7d0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d117      	bne.n	800e808 <SD_read+0x84>
 800e7d8:	8a7b      	ldrh	r3, [r7, #18]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d114      	bne.n	800e808 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800e7de:	f004 fccf 	bl	8013180 <osKernelGetTickCount>
 800e7e2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e7e4:	e007      	b.n	800e7f6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e7e6:	f7ff fef1 	bl	800e5cc <BSP_SD_GetCardState>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <SD_read+0x72>
              {
                res = RES_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e7f4:	e008      	b.n	800e808 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e7f6:	f004 fcc3 	bl	8013180 <osKernelGetTickCount>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	f247 522f 	movw	r2, #29999	; 0x752f
 800e804:	4293      	cmp	r3, r2
 800e806:	d9ee      	bls.n	800e7e6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e808:	7ffb      	ldrb	r3, [r7, #31]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3720      	adds	r7, #32
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	20000434 	.word	0x20000434

0800e818 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e82c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e830:	f7ff ff1c 	bl	800e66c <SD_CheckStatusWithTimeout>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	da01      	bge.n	800e83e <SD_write+0x26>
  {
    return res;
 800e83a:	7ffb      	ldrb	r3, [r7, #31]
 800e83c:	e02d      	b.n	800e89a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	6879      	ldr	r1, [r7, #4]
 800e842:	68b8      	ldr	r0, [r7, #8]
 800e844:	f7ff fea8 	bl	800e598 <BSP_SD_WriteBlocks_DMA>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d124      	bne.n	800e898 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e84e:	4b15      	ldr	r3, [pc, #84]	; (800e8a4 <SD_write+0x8c>)
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	f107 0112 	add.w	r1, r7, #18
 800e856:	f247 5330 	movw	r3, #30000	; 0x7530
 800e85a:	2200      	movs	r2, #0
 800e85c:	f005 f9aa 	bl	8013bb4 <osMessageQueueGet>
 800e860:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d117      	bne.n	800e898 <SD_write+0x80>
 800e868:	8a7b      	ldrh	r3, [r7, #18]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d114      	bne.n	800e898 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800e86e:	f004 fc87 	bl	8013180 <osKernelGetTickCount>
 800e872:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e874:	e007      	b.n	800e886 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e876:	f7ff fea9 	bl	800e5cc <BSP_SD_GetCardState>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <SD_write+0x6e>
          {
            res = RES_OK;
 800e880:	2300      	movs	r3, #0
 800e882:	77fb      	strb	r3, [r7, #31]
            break;
 800e884:	e008      	b.n	800e898 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e886:	f004 fc7b 	bl	8013180 <osKernelGetTickCount>
 800e88a:	4602      	mov	r2, r0
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	1ad3      	subs	r3, r2, r3
 800e890:	f247 522f 	movw	r2, #29999	; 0x752f
 800e894:	4293      	cmp	r3, r2
 800e896:	d9ee      	bls.n	800e876 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800e898:	7ffb      	ldrb	r3, [r7, #31]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3720      	adds	r7, #32
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20000434 	.word	0x20000434

0800e8a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b08c      	sub	sp, #48	; 0x30
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	603a      	str	r2, [r7, #0]
 800e8b2:	71fb      	strb	r3, [r7, #7]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e8be:	4b25      	ldr	r3, [pc, #148]	; (800e954 <SD_ioctl+0xac>)
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <SD_ioctl+0x28>
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	e03c      	b.n	800e94a <SD_ioctl+0xa2>

  switch (cmd)
 800e8d0:	79bb      	ldrb	r3, [r7, #6]
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	d834      	bhi.n	800e940 <SD_ioctl+0x98>
 800e8d6:	a201      	add	r2, pc, #4	; (adr r2, 800e8dc <SD_ioctl+0x34>)
 800e8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8dc:	0800e8ed 	.word	0x0800e8ed
 800e8e0:	0800e8f5 	.word	0x0800e8f5
 800e8e4:	0800e90d 	.word	0x0800e90d
 800e8e8:	0800e927 	.word	0x0800e927
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e8f2:	e028      	b.n	800e946 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e8f4:	f107 030c 	add.w	r3, r7, #12
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff fe77 	bl	800e5ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e904:	2300      	movs	r3, #0
 800e906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e90a:	e01c      	b.n	800e946 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e90c:	f107 030c 	add.w	r3, r7, #12
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff fe6b 	bl	800e5ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	b29a      	uxth	r2, r3
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e91e:	2300      	movs	r3, #0
 800e920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e924:	e00f      	b.n	800e946 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7ff fe5e 	bl	800e5ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	0a5a      	lsrs	r2, r3, #9
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e93e:	e002      	b.n	800e946 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e940:	2304      	movs	r3, #4
 800e942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3730      	adds	r7, #48	; 0x30
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20000009 	.word	0x20000009

0800e958 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800e95e:	2302      	movs	r3, #2
 800e960:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e962:	4b05      	ldr	r3, [pc, #20]	; (800e978 <BSP_SD_WriteCpltCallback+0x20>)
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	1db9      	adds	r1, r7, #6
 800e968:	2300      	movs	r3, #0
 800e96a:	2200      	movs	r2, #0
 800e96c:	f005 f8ae 	bl	8013acc <osMessageQueuePut>
#endif
}
 800e970:	bf00      	nop
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	20000434 	.word	0x20000434

0800e97c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800e982:	2301      	movs	r3, #1
 800e984:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e986:	4b05      	ldr	r3, [pc, #20]	; (800e99c <BSP_SD_ReadCpltCallback+0x20>)
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	1db9      	adds	r1, r7, #6
 800e98c:	2300      	movs	r3, #0
 800e98e:	2200      	movs	r2, #0
 800e990:	f005 f89c 	bl	8013acc <osMessageQueuePut>
#endif
}
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20000434 	.word	0x20000434

0800e9a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e9ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e9b0:	f009 f8d0 	bl	8017b54 <malloc>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d105      	bne.n	800e9ca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	e066      	b.n	800ea98 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7c1b      	ldrb	r3, [r3, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d119      	bne.n	800ea0e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e9da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9de:	2202      	movs	r2, #2
 800e9e0:	2181      	movs	r1, #129	; 0x81
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f008 fee9 	bl	80177ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e9ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f008 fedf 	bl	80177ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2210      	movs	r2, #16
 800ea08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ea0c:	e016      	b.n	800ea3c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea0e:	2340      	movs	r3, #64	; 0x40
 800ea10:	2202      	movs	r2, #2
 800ea12:	2181      	movs	r1, #129	; 0x81
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f008 fed0 	bl	80177ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea20:	2340      	movs	r3, #64	; 0x40
 800ea22:	2202      	movs	r2, #2
 800ea24:	2101      	movs	r1, #1
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f008 fec7 	bl	80177ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2210      	movs	r2, #16
 800ea38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	2203      	movs	r2, #3
 800ea40:	2182      	movs	r1, #130	; 0x82
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f008 feb9 	bl	80177ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7c1b      	ldrb	r3, [r3, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ea78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f008 ff8a 	bl	8017998 <USBD_LL_PrepareReceive>
 800ea84:	e007      	b.n	800ea96 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ea8c:	2340      	movs	r3, #64	; 0x40
 800ea8e:	2101      	movs	r1, #1
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f008 ff81 	bl	8017998 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eab0:	2181      	movs	r1, #129	; 0x81
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f008 fea7 	bl	8017806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eabe:	2101      	movs	r1, #1
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f008 fea0 	bl	8017806 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eace:	2182      	movs	r1, #130	; 0x82
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f008 fe98 	bl	8017806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00e      	beq.n	800eb0e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb00:	4618      	mov	r0, r3
 800eb02:	f009 f82f 	bl	8017b64 <free>
    pdev->pClassData = NULL;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb32:	2300      	movs	r3, #0
 800eb34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d03a      	beq.n	800ebb8 <USBD_CDC_Setup+0xa0>
 800eb42:	2b20      	cmp	r3, #32
 800eb44:	f040 8097 	bne.w	800ec76 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	88db      	ldrh	r3, [r3, #6]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d029      	beq.n	800eba4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	b25b      	sxtb	r3, r3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	da11      	bge.n	800eb7e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800eb66:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	88d2      	ldrh	r2, [r2, #6]
 800eb6c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800eb6e:	6939      	ldr	r1, [r7, #16]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	88db      	ldrh	r3, [r3, #6]
 800eb74:	461a      	mov	r2, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f001 fa97 	bl	80100aa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800eb7c:	e082      	b.n	800ec84 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	785a      	ldrb	r2, [r3, #1]
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	88db      	ldrh	r3, [r3, #6]
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800eb94:	6939      	ldr	r1, [r7, #16]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	88db      	ldrh	r3, [r3, #6]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 fab0 	bl	8010102 <USBD_CtlPrepareRx>
    break;
 800eba2:	e06f      	b.n	800ec84 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	7850      	ldrb	r0, [r2, #1]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	6839      	ldr	r1, [r7, #0]
 800ebb4:	4798      	blx	r3
    break;
 800ebb6:	e065      	b.n	800ec84 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	785b      	ldrb	r3, [r3, #1]
 800ebbc:	2b0b      	cmp	r3, #11
 800ebbe:	d84f      	bhi.n	800ec60 <USBD_CDC_Setup+0x148>
 800ebc0:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <USBD_CDC_Setup+0xb0>)
 800ebc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc6:	bf00      	nop
 800ebc8:	0800ebf9 	.word	0x0800ebf9
 800ebcc:	0800ec6f 	.word	0x0800ec6f
 800ebd0:	0800ec61 	.word	0x0800ec61
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec61 	.word	0x0800ec61
 800ebdc:	0800ec61 	.word	0x0800ec61
 800ebe0:	0800ec61 	.word	0x0800ec61
 800ebe4:	0800ec61 	.word	0x0800ec61
 800ebe8:	0800ec61 	.word	0x0800ec61
 800ebec:	0800ec61 	.word	0x0800ec61
 800ebf0:	0800ec21 	.word	0x0800ec21
 800ebf4:	0800ec49 	.word	0x0800ec49
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d107      	bne.n	800ec12 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec02:	f107 030c 	add.w	r3, r7, #12
 800ec06:	2202      	movs	r2, #2
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 fa4d 	bl	80100aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec10:	e030      	b.n	800ec74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f001 f9d7 	bl	800ffc8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec1e:	e029      	b.n	800ec74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec26:	2b03      	cmp	r3, #3
 800ec28:	d107      	bne.n	800ec3a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ec2a:	f107 030f 	add.w	r3, r7, #15
 800ec2e:	2201      	movs	r2, #1
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f001 fa39 	bl	80100aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec38:	e01c      	b.n	800ec74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 f9c3 	bl	800ffc8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec42:	2303      	movs	r3, #3
 800ec44:	75fb      	strb	r3, [r7, #23]
      break;
 800ec46:	e015      	b.n	800ec74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d00f      	beq.n	800ec72 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ec52:	6839      	ldr	r1, [r7, #0]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f001 f9b7 	bl	800ffc8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ec5e:	e008      	b.n	800ec72 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ec60:	6839      	ldr	r1, [r7, #0]
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f001 f9b0 	bl	800ffc8 <USBD_CtlError>
      ret = USBD_FAIL;
 800ec68:	2303      	movs	r3, #3
 800ec6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec6c:	e002      	b.n	800ec74 <USBD_CDC_Setup+0x15c>
      break;
 800ec6e:	bf00      	nop
 800ec70:	e008      	b.n	800ec84 <USBD_CDC_Setup+0x16c>
      break;
 800ec72:	bf00      	nop
    }
    break;
 800ec74:	e006      	b.n	800ec84 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 f9a5 	bl	800ffc8 <USBD_CtlError>
    ret = USBD_FAIL;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	75fb      	strb	r3, [r7, #23]
    break;
 800ec82:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop

0800ec90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eca2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e049      	b.n	800ed46 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ecba:	78fa      	ldrb	r2, [r7, #3]
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	440b      	add	r3, r1
 800ecc8:	3318      	adds	r3, #24
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d029      	beq.n	800ed24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ecd0:	78fa      	ldrb	r2, [r7, #3]
 800ecd2:	6879      	ldr	r1, [r7, #4]
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	4413      	add	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	440b      	add	r3, r1
 800ecde:	3318      	adds	r3, #24
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	78f9      	ldrb	r1, [r7, #3]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	460b      	mov	r3, r1
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	1a5b      	subs	r3, r3, r1
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4403      	add	r3, r0
 800ecf0:	3344      	adds	r3, #68	; 0x44
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ecf8:	fb03 f301 	mul.w	r3, r3, r1
 800ecfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d110      	bne.n	800ed24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ed02:	78fa      	ldrb	r2, [r7, #3]
 800ed04:	6879      	ldr	r1, [r7, #4]
 800ed06:	4613      	mov	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	440b      	add	r3, r1
 800ed10:	3318      	adds	r3, #24
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed16:	78f9      	ldrb	r1, [r7, #3]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f008 fe1a 	bl	8017956 <USBD_LL_Transmit>
 800ed22:	e00f      	b.n	800ed44 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ed40:	78fa      	ldrb	r2, [r7, #3]
 800ed42:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d101      	bne.n	800ed70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e015      	b.n	800ed9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f008 fe30 	bl	80179da <USBD_LL_GetRxDataSize>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ed96:	4611      	mov	r1, r2
 800ed98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edb2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d015      	beq.n	800edea <USBD_CDC_EP0_RxReady+0x46>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800edc4:	2bff      	cmp	r3, #255	; 0xff
 800edc6:	d010      	beq.n	800edea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800edd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800edde:	b292      	uxth	r2, r2
 800ede0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	22ff      	movs	r2, #255	; 0xff
 800ede6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2243      	movs	r2, #67	; 0x43
 800ee00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ee02:	4b03      	ldr	r3, [pc, #12]	; (800ee10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	20000094 	.word	0x20000094

0800ee14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2243      	movs	r2, #67	; 0x43
 800ee20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ee22:	4b03      	ldr	r3, [pc, #12]	; (800ee30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr
 800ee30:	20000050 	.word	0x20000050

0800ee34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2243      	movs	r2, #67	; 0x43
 800ee40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ee42:	4b03      	ldr	r3, [pc, #12]	; (800ee50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	200000d8 	.word	0x200000d8

0800ee54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	220a      	movs	r2, #10
 800ee60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ee62:	4b03      	ldr	r3, [pc, #12]	; (800ee70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	2000000c 	.word	0x2000000c

0800ee74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ee84:	2303      	movs	r3, #3
 800ee86:	e004      	b.n	800ee92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b087      	sub	sp, #28
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	60b9      	str	r1, [r7, #8]
 800eea8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	371c      	adds	r7, #28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eee0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3714      	adds	r7, #20
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ef12:	2303      	movs	r3, #3
 800ef14:	e016      	b.n	800ef44 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7c1b      	ldrb	r3, [r3, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d109      	bne.n	800ef32 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef28:	2101      	movs	r1, #1
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f008 fd34 	bl	8017998 <USBD_LL_PrepareReceive>
 800ef30:	e007      	b.n	800ef42 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef38:	2340      	movs	r3, #64	; 0x40
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f008 fd2b 	bl	8017998 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4613      	mov	r3, r2
 800ef58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d101      	bne.n	800ef64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e025      	b.n	800efb0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d003      	beq.n	800ef76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d003      	beq.n	800ef96 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	79fa      	ldrb	r2, [r7, #7]
 800efa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f008 fba1 	bl	80176ec <USBD_LL_Init>
 800efaa:	4603      	mov	r3, r0
 800efac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800efae:	7dfb      	ldrb	r3, [r7, #23]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3718      	adds	r7, #24
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efc2:	2300      	movs	r3, #0
 800efc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d101      	bne.n	800efd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800efcc:	2303      	movs	r3, #3
 800efce:	e010      	b.n	800eff2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe0:	f107 020e 	add.w	r2, r7, #14
 800efe4:	4610      	mov	r0, r2
 800efe6:	4798      	blx	r3
 800efe8:	4602      	mov	r2, r0
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f008 fbbe 	bl	8017784 <USBD_LL_Start>
 800f008:	4603      	mov	r3, r0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f012:	b480      	push	{r7}
 800f014:	b083      	sub	sp, #12
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f034:	2303      	movs	r3, #3
 800f036:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d009      	beq.n	800f056 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	78fa      	ldrb	r2, [r7, #3]
 800f04c:	4611      	mov	r1, r2
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	4798      	blx	r3
 800f052:	4603      	mov	r3, r0
 800f054:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f056:	7bfb      	ldrb	r3, [r7, #15]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	460b      	mov	r3, r1
 800f06a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f072:	2b00      	cmp	r3, #0
 800f074:	d007      	beq.n	800f086 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	78fa      	ldrb	r2, [r7, #3]
 800f080:	4611      	mov	r1, r2
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	4798      	blx	r3
  }

  return USBD_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 ff56 	bl	800ff54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f0c4:	f003 031f 	and.w	r3, r3, #31
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d00e      	beq.n	800f0ea <USBD_LL_SetupStage+0x5a>
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d302      	bcc.n	800f0d6 <USBD_LL_SetupStage+0x46>
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d014      	beq.n	800f0fe <USBD_LL_SetupStage+0x6e>
 800f0d4:	e01d      	b.n	800f112 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fa18 	bl	800f514 <USBD_StdDevReq>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f0e8:	e020      	b.n	800f12c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fa7c 	bl	800f5f0 <USBD_StdItfReq>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f0fc:	e016      	b.n	800f12c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f104:	4619      	mov	r1, r3
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fab8 	bl	800f67c <USBD_StdEPReq>
 800f10c:	4603      	mov	r3, r0
 800f10e:	73fb      	strb	r3, [r7, #15]
      break;
 800f110:	e00c      	b.n	800f12c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f008 fb8f 	bl	8017844 <USBD_LL_StallEP>
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]
      break;
 800f12a:	bf00      	nop
  }

  return ret;
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b086      	sub	sp, #24
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	460b      	mov	r3, r1
 800f140:	607a      	str	r2, [r7, #4]
 800f142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f144:	7afb      	ldrb	r3, [r7, #11]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d137      	bne.n	800f1ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f150:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d14a      	bne.n	800f1f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	689a      	ldr	r2, [r3, #8]
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	429a      	cmp	r2, r3
 800f166:	d913      	bls.n	800f190 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	689a      	ldr	r2, [r3, #8]
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	1ad2      	subs	r2, r2, r3
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	68da      	ldr	r2, [r3, #12]
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	4293      	cmp	r3, r2
 800f180:	bf28      	it	cs
 800f182:	4613      	movcs	r3, r2
 800f184:	461a      	mov	r2, r3
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 ffd7 	bl	801013c <USBD_CtlContinueRx>
 800f18e:	e030      	b.n	800f1f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00a      	beq.n	800f1b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d105      	bne.n	800f1b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f000 ffd3 	bl	801015e <USBD_CtlSendStatus>
 800f1b8:	e01b      	b.n	800f1f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d013      	beq.n	800f1ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f1cc:	2b03      	cmp	r3, #3
 800f1ce:	d10e      	bne.n	800f1ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	7afa      	ldrb	r2, [r7, #11]
 800f1da:	4611      	mov	r1, r2
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	4798      	blx	r3
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f1e4:	7dfb      	ldrb	r3, [r7, #23]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d003      	beq.n	800f1f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f1ea:	7dfb      	ldrb	r3, [r7, #23]
 800f1ec:	e002      	b.n	800f1f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f1ee:	2303      	movs	r3, #3
 800f1f0:	e000      	b.n	800f1f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	460b      	mov	r3, r1
 800f206:	607a      	str	r2, [r7, #4]
 800f208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f20a:	7afb      	ldrb	r3, [r7, #11]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d16a      	bne.n	800f2e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3314      	adds	r3, #20
 800f214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d155      	bne.n	800f2cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	689a      	ldr	r2, [r3, #8]
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d914      	bls.n	800f256 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	689a      	ldr	r2, [r3, #8]
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	1ad2      	subs	r2, r2, r3
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	461a      	mov	r2, r3
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 ff4c 	bl	80100e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f248:	2300      	movs	r3, #0
 800f24a:	2200      	movs	r2, #0
 800f24c:	2100      	movs	r1, #0
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f008 fba2 	bl	8017998 <USBD_LL_PrepareReceive>
 800f254:	e03a      	b.n	800f2cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	68da      	ldr	r2, [r3, #12]
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d11c      	bne.n	800f29c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	685a      	ldr	r2, [r3, #4]
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d316      	bcc.n	800f29c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f278:	429a      	cmp	r2, r3
 800f27a:	d20f      	bcs.n	800f29c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f27c:	2200      	movs	r2, #0
 800f27e:	2100      	movs	r1, #0
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 ff2d 	bl	80100e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f28e:	2300      	movs	r3, #0
 800f290:	2200      	movs	r2, #0
 800f292:	2100      	movs	r1, #0
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f008 fb7f 	bl	8017998 <USBD_LL_PrepareReceive>
 800f29a:	e017      	b.n	800f2cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00a      	beq.n	800f2be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f2ae:	2b03      	cmp	r3, #3
 800f2b0:	d105      	bne.n	800f2be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2be:	2180      	movs	r1, #128	; 0x80
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f008 fabf 	bl	8017844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 ff5c 	bl	8010184 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d123      	bne.n	800f31e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fe9b 	bl	800f012 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f2e4:	e01b      	b.n	800f31e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2ec:	695b      	ldr	r3, [r3, #20]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d013      	beq.n	800f31a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d10e      	bne.n	800f31a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f302:	695b      	ldr	r3, [r3, #20]
 800f304:	7afa      	ldrb	r2, [r7, #11]
 800f306:	4611      	mov	r1, r2
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	4798      	blx	r3
 800f30c:	4603      	mov	r3, r0
 800f30e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f310:	7dfb      	ldrb	r3, [r7, #23]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f316:	7dfb      	ldrb	r3, [r7, #23]
 800f318:	e002      	b.n	800f320 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f31a:	2303      	movs	r3, #3
 800f31c:	e000      	b.n	800f320 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f354:	2b00      	cmp	r3, #0
 800f356:	d009      	beq.n	800f36c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	6852      	ldr	r2, [r2, #4]
 800f364:	b2d2      	uxtb	r2, r2
 800f366:	4611      	mov	r1, r2
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f36c:	2340      	movs	r3, #64	; 0x40
 800f36e:	2200      	movs	r2, #0
 800f370:	2100      	movs	r1, #0
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f008 fa21 	bl	80177ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2240      	movs	r2, #64	; 0x40
 800f384:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f388:	2340      	movs	r3, #64	; 0x40
 800f38a:	2200      	movs	r2, #0
 800f38c:	2180      	movs	r1, #128	; 0x80
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f008 fa13 	bl	80177ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2240      	movs	r2, #64	; 0x40
 800f39e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	78fa      	ldrb	r2, [r7, #3]
 800f3ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	370c      	adds	r7, #12
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b083      	sub	sp, #12
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2204      	movs	r2, #4
 800f3e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f402:	2b04      	cmp	r3, #4
 800f404:	d105      	bne.n	800f412 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f42e:	2b03      	cmp	r3, #3
 800f430:	d10b      	bne.n	800f44a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f438:	69db      	ldr	r3, [r3, #28]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d005      	beq.n	800f44a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f444:	69db      	ldr	r3, [r3, #28]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	460b      	mov	r3, r1
 800f478:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f47a:	2300      	movs	r3, #0
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr

0800f49e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d009      	beq.n	800f4cc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	6852      	ldr	r2, [r2, #4]
 800f4c4:	b2d2      	uxtb	r2, r2
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	4798      	blx	r3
  }

  return USBD_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f4d6:	b480      	push	{r7}
 800f4d8:	b087      	sub	sp, #28
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f4f4:	8a3b      	ldrh	r3, [r7, #16]
 800f4f6:	021b      	lsls	r3, r3, #8
 800f4f8:	b21a      	sxth	r2, r3
 800f4fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	b21b      	sxth	r3, r3
 800f502:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f504:	89fb      	ldrh	r3, [r7, #14]
}
 800f506:	4618      	mov	r0, r3
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
	...

0800f514 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f51e:	2300      	movs	r3, #0
 800f520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f52a:	2b20      	cmp	r3, #32
 800f52c:	d004      	beq.n	800f538 <USBD_StdDevReq+0x24>
 800f52e:	2b40      	cmp	r3, #64	; 0x40
 800f530:	d002      	beq.n	800f538 <USBD_StdDevReq+0x24>
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <USBD_StdDevReq+0x38>
 800f536:	e050      	b.n	800f5da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	4798      	blx	r3
 800f546:	4603      	mov	r3, r0
 800f548:	73fb      	strb	r3, [r7, #15]
    break;
 800f54a:	e04b      	b.n	800f5e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	2b09      	cmp	r3, #9
 800f552:	d83c      	bhi.n	800f5ce <USBD_StdDevReq+0xba>
 800f554:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <USBD_StdDevReq+0x48>)
 800f556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55a:	bf00      	nop
 800f55c:	0800f5b1 	.word	0x0800f5b1
 800f560:	0800f5c5 	.word	0x0800f5c5
 800f564:	0800f5cf 	.word	0x0800f5cf
 800f568:	0800f5bb 	.word	0x0800f5bb
 800f56c:	0800f5cf 	.word	0x0800f5cf
 800f570:	0800f58f 	.word	0x0800f58f
 800f574:	0800f585 	.word	0x0800f585
 800f578:	0800f5cf 	.word	0x0800f5cf
 800f57c:	0800f5a7 	.word	0x0800f5a7
 800f580:	0800f599 	.word	0x0800f599
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f9ce 	bl	800f928 <USBD_GetDescriptor>
      break;
 800f58c:	e024      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f58e:	6839      	ldr	r1, [r7, #0]
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fb5d 	bl	800fc50 <USBD_SetAddress>
      break;
 800f596:	e01f      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fb9a 	bl	800fcd4 <USBD_SetConfig>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f5a4:	e018      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 fc37 	bl	800fe1c <USBD_GetConfig>
      break;
 800f5ae:	e013      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fc66 	bl	800fe84 <USBD_GetStatus>
      break;
 800f5b8:	e00e      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f5ba:	6839      	ldr	r1, [r7, #0]
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 fc94 	bl	800feea <USBD_SetFeature>
      break;
 800f5c2:	e009      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fca3 	bl	800ff12 <USBD_ClrFeature>
      break;
 800f5cc:	e004      	b.n	800f5d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fcf9 	bl	800ffc8 <USBD_CtlError>
      break;
 800f5d6:	bf00      	nop
    }
    break;
 800f5d8:	e004      	b.n	800f5e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fcf3 	bl	800ffc8 <USBD_CtlError>
    break;
 800f5e2:	bf00      	nop
  }

  return ret;
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop

0800f5f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f606:	2b20      	cmp	r3, #32
 800f608:	d003      	beq.n	800f612 <USBD_StdItfReq+0x22>
 800f60a:	2b40      	cmp	r3, #64	; 0x40
 800f60c:	d001      	beq.n	800f612 <USBD_StdItfReq+0x22>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d12a      	bne.n	800f668 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f618:	3b01      	subs	r3, #1
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d81d      	bhi.n	800f65a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	889b      	ldrh	r3, [r3, #4]
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b01      	cmp	r3, #1
 800f626:	d813      	bhi.n	800f650 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	4798      	blx	r3
 800f636:	4603      	mov	r3, r0
 800f638:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	88db      	ldrh	r3, [r3, #6]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d110      	bne.n	800f664 <USBD_StdItfReq+0x74>
 800f642:	7bfb      	ldrb	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10d      	bne.n	800f664 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fd88 	bl	801015e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f64e:	e009      	b.n	800f664 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fcb8 	bl	800ffc8 <USBD_CtlError>
      break;
 800f658:	e004      	b.n	800f664 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 fcb3 	bl	800ffc8 <USBD_CtlError>
      break;
 800f662:	e000      	b.n	800f666 <USBD_StdItfReq+0x76>
      break;
 800f664:	bf00      	nop
    }
    break;
 800f666:	e004      	b.n	800f672 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fcac 	bl	800ffc8 <USBD_CtlError>
    break;
 800f670:	bf00      	nop
  }

  return ret;
 800f672:	7bfb      	ldrb	r3, [r7, #15]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	889b      	ldrh	r3, [r3, #4]
 800f68e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f698:	2b20      	cmp	r3, #32
 800f69a:	d004      	beq.n	800f6a6 <USBD_StdEPReq+0x2a>
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	d002      	beq.n	800f6a6 <USBD_StdEPReq+0x2a>
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <USBD_StdEPReq+0x3e>
 800f6a4:	e135      	b.n	800f912 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	6839      	ldr	r1, [r7, #0]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	4798      	blx	r3
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f6b8:	e130      	b.n	800f91c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	785b      	ldrb	r3, [r3, #1]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d03e      	beq.n	800f740 <USBD_StdEPReq+0xc4>
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d002      	beq.n	800f6cc <USBD_StdEPReq+0x50>
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d077      	beq.n	800f7ba <USBD_StdEPReq+0x13e>
 800f6ca:	e11c      	b.n	800f906 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d002      	beq.n	800f6dc <USBD_StdEPReq+0x60>
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d015      	beq.n	800f706 <USBD_StdEPReq+0x8a>
 800f6da:	e02b      	b.n	800f734 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00c      	beq.n	800f6fc <USBD_StdEPReq+0x80>
 800f6e2:	7bbb      	ldrb	r3, [r7, #14]
 800f6e4:	2b80      	cmp	r3, #128	; 0x80
 800f6e6:	d009      	beq.n	800f6fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f008 f8a9 	bl	8017844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6f2:	2180      	movs	r1, #128	; 0x80
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f008 f8a5 	bl	8017844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f6fa:	e020      	b.n	800f73e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f6fc:	6839      	ldr	r1, [r7, #0]
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fc62 	bl	800ffc8 <USBD_CtlError>
        break;
 800f704:	e01b      	b.n	800f73e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	885b      	ldrh	r3, [r3, #2]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d10e      	bne.n	800f72c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f70e:	7bbb      	ldrb	r3, [r7, #14]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00b      	beq.n	800f72c <USBD_StdEPReq+0xb0>
 800f714:	7bbb      	ldrb	r3, [r7, #14]
 800f716:	2b80      	cmp	r3, #128	; 0x80
 800f718:	d008      	beq.n	800f72c <USBD_StdEPReq+0xb0>
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	88db      	ldrh	r3, [r3, #6]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d104      	bne.n	800f72c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f722:	7bbb      	ldrb	r3, [r7, #14]
 800f724:	4619      	mov	r1, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f008 f88c 	bl	8017844 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fd16 	bl	801015e <USBD_CtlSendStatus>

        break;
 800f732:	e004      	b.n	800f73e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fc46 	bl	800ffc8 <USBD_CtlError>
        break;
 800f73c:	bf00      	nop
      }
      break;
 800f73e:	e0e7      	b.n	800f910 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f746:	2b02      	cmp	r3, #2
 800f748:	d002      	beq.n	800f750 <USBD_StdEPReq+0xd4>
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d015      	beq.n	800f77a <USBD_StdEPReq+0xfe>
 800f74e:	e02d      	b.n	800f7ac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f750:	7bbb      	ldrb	r3, [r7, #14]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00c      	beq.n	800f770 <USBD_StdEPReq+0xf4>
 800f756:	7bbb      	ldrb	r3, [r7, #14]
 800f758:	2b80      	cmp	r3, #128	; 0x80
 800f75a:	d009      	beq.n	800f770 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f75c:	7bbb      	ldrb	r3, [r7, #14]
 800f75e:	4619      	mov	r1, r3
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f008 f86f 	bl	8017844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f766:	2180      	movs	r1, #128	; 0x80
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f008 f86b 	bl	8017844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f76e:	e023      	b.n	800f7b8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fc28 	bl	800ffc8 <USBD_CtlError>
        break;
 800f778:	e01e      	b.n	800f7b8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	885b      	ldrh	r3, [r3, #2]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d119      	bne.n	800f7b6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f782:	7bbb      	ldrb	r3, [r7, #14]
 800f784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f78c:	7bbb      	ldrb	r3, [r7, #14]
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f008 f876 	bl	8017882 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fce1 	bl	801015e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	4798      	blx	r3
        }
        break;
 800f7aa:	e004      	b.n	800f7b6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f7ac:	6839      	ldr	r1, [r7, #0]
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fc0a 	bl	800ffc8 <USBD_CtlError>
        break;
 800f7b4:	e000      	b.n	800f7b8 <USBD_StdEPReq+0x13c>
        break;
 800f7b6:	bf00      	nop
      }
      break;
 800f7b8:	e0aa      	b.n	800f910 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d002      	beq.n	800f7ca <USBD_StdEPReq+0x14e>
 800f7c4:	2b03      	cmp	r3, #3
 800f7c6:	d032      	beq.n	800f82e <USBD_StdEPReq+0x1b2>
 800f7c8:	e097      	b.n	800f8fa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d007      	beq.n	800f7e0 <USBD_StdEPReq+0x164>
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
 800f7d2:	2b80      	cmp	r3, #128	; 0x80
 800f7d4:	d004      	beq.n	800f7e0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 fbf5 	bl	800ffc8 <USBD_CtlError>
          break;
 800f7de:	e091      	b.n	800f904 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	da0b      	bge.n	800f800 <USBD_StdEPReq+0x184>
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	4413      	add	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	3310      	adds	r3, #16
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	e00b      	b.n	800f818 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f800:	7bbb      	ldrb	r3, [r7, #14]
 800f802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f806:	4613      	mov	r3, r2
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	4413      	add	r3, r2
 800f816:	3304      	adds	r3, #4
 800f818:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	2200      	movs	r2, #0
 800f81e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2202      	movs	r2, #2
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fc3f 	bl	80100aa <USBD_CtlSendData>
        break;
 800f82c:	e06a      	b.n	800f904 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f82e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f832:	2b00      	cmp	r3, #0
 800f834:	da11      	bge.n	800f85a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f836:	7bbb      	ldrb	r3, [r7, #14]
 800f838:	f003 020f 	and.w	r2, r3, #15
 800f83c:	6879      	ldr	r1, [r7, #4]
 800f83e:	4613      	mov	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4413      	add	r3, r2
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	440b      	add	r3, r1
 800f848:	3324      	adds	r3, #36	; 0x24
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d117      	bne.n	800f880 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fbb8 	bl	800ffc8 <USBD_CtlError>
            break;
 800f858:	e054      	b.n	800f904 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f85a:	7bbb      	ldrb	r3, [r7, #14]
 800f85c:	f003 020f 	and.w	r2, r3, #15
 800f860:	6879      	ldr	r1, [r7, #4]
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	440b      	add	r3, r1
 800f86c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f870:	881b      	ldrh	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d104      	bne.n	800f880 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fba5 	bl	800ffc8 <USBD_CtlError>
            break;
 800f87e:	e041      	b.n	800f904 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f884:	2b00      	cmp	r3, #0
 800f886:	da0b      	bge.n	800f8a0 <USBD_StdEPReq+0x224>
 800f888:	7bbb      	ldrb	r3, [r7, #14]
 800f88a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f88e:	4613      	mov	r3, r2
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	4413      	add	r3, r2
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	3310      	adds	r3, #16
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	4413      	add	r3, r2
 800f89c:	3304      	adds	r3, #4
 800f89e:	e00b      	b.n	800f8b8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4413      	add	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f8ba:	7bbb      	ldrb	r3, [r7, #14]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <USBD_StdEPReq+0x24a>
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	2b80      	cmp	r3, #128	; 0x80
 800f8c4:	d103      	bne.n	800f8ce <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	e00e      	b.n	800f8ec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f007 fff4 	bl	80178c0 <USBD_LL_IsStallEP>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	e002      	b.n	800f8ec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 fbd9 	bl	80100aa <USBD_CtlSendData>
          break;
 800f8f8:	e004      	b.n	800f904 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f8fa:	6839      	ldr	r1, [r7, #0]
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 fb63 	bl	800ffc8 <USBD_CtlError>
        break;
 800f902:	bf00      	nop
      }
      break;
 800f904:	e004      	b.n	800f910 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fb5d 	bl	800ffc8 <USBD_CtlError>
      break;
 800f90e:	bf00      	nop
    }
    break;
 800f910:	e004      	b.n	800f91c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 fb57 	bl	800ffc8 <USBD_CtlError>
    break;
 800f91a:	bf00      	nop
  }

  return ret;
 800f91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3710      	adds	r7, #16
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
	...

0800f928 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f932:	2300      	movs	r3, #0
 800f934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f93a:	2300      	movs	r3, #0
 800f93c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	885b      	ldrh	r3, [r3, #2]
 800f942:	0a1b      	lsrs	r3, r3, #8
 800f944:	b29b      	uxth	r3, r3
 800f946:	3b01      	subs	r3, #1
 800f948:	2b0e      	cmp	r3, #14
 800f94a:	f200 8152 	bhi.w	800fbf2 <USBD_GetDescriptor+0x2ca>
 800f94e:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <USBD_GetDescriptor+0x2c>)
 800f950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f954:	0800f9c5 	.word	0x0800f9c5
 800f958:	0800f9dd 	.word	0x0800f9dd
 800f95c:	0800fa1d 	.word	0x0800fa1d
 800f960:	0800fbf3 	.word	0x0800fbf3
 800f964:	0800fbf3 	.word	0x0800fbf3
 800f968:	0800fb93 	.word	0x0800fb93
 800f96c:	0800fbbf 	.word	0x0800fbbf
 800f970:	0800fbf3 	.word	0x0800fbf3
 800f974:	0800fbf3 	.word	0x0800fbf3
 800f978:	0800fbf3 	.word	0x0800fbf3
 800f97c:	0800fbf3 	.word	0x0800fbf3
 800f980:	0800fbf3 	.word	0x0800fbf3
 800f984:	0800fbf3 	.word	0x0800fbf3
 800f988:	0800fbf3 	.word	0x0800fbf3
 800f98c:	0800f991 	.word	0x0800f991
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f996:	69db      	ldr	r3, [r3, #28]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00b      	beq.n	800f9b4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	7c12      	ldrb	r2, [r2, #16]
 800f9a8:	f107 0108 	add.w	r1, r7, #8
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
 800f9b0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f9b2:	e126      	b.n	800fc02 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fb06 	bl	800ffc8 <USBD_CtlError>
      err++;
 800f9bc:	7afb      	ldrb	r3, [r7, #11]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	72fb      	strb	r3, [r7, #11]
    break;
 800f9c2:	e11e      	b.n	800fc02 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	7c12      	ldrb	r2, [r2, #16]
 800f9d0:	f107 0108 	add.w	r1, r7, #8
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	4798      	blx	r3
 800f9d8:	60f8      	str	r0, [r7, #12]
    break;
 800f9da:	e112      	b.n	800fc02 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7c1b      	ldrb	r3, [r3, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10d      	bne.n	800fa00 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ec:	f107 0208 	add.w	r2, r7, #8
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	4798      	blx	r3
 800f9f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f9fe:	e100      	b.n	800fc02 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa08:	f107 0208 	add.w	r2, r7, #8
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	4798      	blx	r3
 800fa10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3301      	adds	r3, #1
 800fa16:	2202      	movs	r2, #2
 800fa18:	701a      	strb	r2, [r3, #0]
    break;
 800fa1a:	e0f2      	b.n	800fc02 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	885b      	ldrh	r3, [r3, #2]
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b05      	cmp	r3, #5
 800fa24:	f200 80ac 	bhi.w	800fb80 <USBD_GetDescriptor+0x258>
 800fa28:	a201      	add	r2, pc, #4	; (adr r2, 800fa30 <USBD_GetDescriptor+0x108>)
 800fa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2e:	bf00      	nop
 800fa30:	0800fa49 	.word	0x0800fa49
 800fa34:	0800fa7d 	.word	0x0800fa7d
 800fa38:	0800fab1 	.word	0x0800fab1
 800fa3c:	0800fae5 	.word	0x0800fae5
 800fa40:	0800fb19 	.word	0x0800fb19
 800fa44:	0800fb4d 	.word	0x0800fb4d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00b      	beq.n	800fa6c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	7c12      	ldrb	r2, [r2, #16]
 800fa60:	f107 0108 	add.w	r1, r7, #8
 800fa64:	4610      	mov	r0, r2
 800fa66:	4798      	blx	r3
 800fa68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa6a:	e091      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 faaa 	bl	800ffc8 <USBD_CtlError>
        err++;
 800fa74:	7afb      	ldrb	r3, [r7, #11]
 800fa76:	3301      	adds	r3, #1
 800fa78:	72fb      	strb	r3, [r7, #11]
      break;
 800fa7a:	e089      	b.n	800fb90 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00b      	beq.n	800faa0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	7c12      	ldrb	r2, [r2, #16]
 800fa94:	f107 0108 	add.w	r1, r7, #8
 800fa98:	4610      	mov	r0, r2
 800fa9a:	4798      	blx	r3
 800fa9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa9e:	e077      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fa90 	bl	800ffc8 <USBD_CtlError>
        err++;
 800faa8:	7afb      	ldrb	r3, [r7, #11]
 800faaa:	3301      	adds	r3, #1
 800faac:	72fb      	strb	r3, [r7, #11]
      break;
 800faae:	e06f      	b.n	800fb90 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00b      	beq.n	800fad4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	7c12      	ldrb	r2, [r2, #16]
 800fac8:	f107 0108 	add.w	r1, r7, #8
 800facc:	4610      	mov	r0, r2
 800face:	4798      	blx	r3
 800fad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fad2:	e05d      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fad4:	6839      	ldr	r1, [r7, #0]
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fa76 	bl	800ffc8 <USBD_CtlError>
        err++;
 800fadc:	7afb      	ldrb	r3, [r7, #11]
 800fade:	3301      	adds	r3, #1
 800fae0:	72fb      	strb	r3, [r7, #11]
      break;
 800fae2:	e055      	b.n	800fb90 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00b      	beq.n	800fb08 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	7c12      	ldrb	r2, [r2, #16]
 800fafc:	f107 0108 	add.w	r1, r7, #8
 800fb00:	4610      	mov	r0, r2
 800fb02:	4798      	blx	r3
 800fb04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb06:	e043      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb08:	6839      	ldr	r1, [r7, #0]
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 fa5c 	bl	800ffc8 <USBD_CtlError>
        err++;
 800fb10:	7afb      	ldrb	r3, [r7, #11]
 800fb12:	3301      	adds	r3, #1
 800fb14:	72fb      	strb	r3, [r7, #11]
      break;
 800fb16:	e03b      	b.n	800fb90 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb1e:	695b      	ldr	r3, [r3, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00b      	beq.n	800fb3c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb2a:	695b      	ldr	r3, [r3, #20]
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	7c12      	ldrb	r2, [r2, #16]
 800fb30:	f107 0108 	add.w	r1, r7, #8
 800fb34:	4610      	mov	r0, r2
 800fb36:	4798      	blx	r3
 800fb38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb3a:	e029      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 fa42 	bl	800ffc8 <USBD_CtlError>
        err++;
 800fb44:	7afb      	ldrb	r3, [r7, #11]
 800fb46:	3301      	adds	r3, #1
 800fb48:	72fb      	strb	r3, [r7, #11]
      break;
 800fb4a:	e021      	b.n	800fb90 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00b      	beq.n	800fb70 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb5e:	699b      	ldr	r3, [r3, #24]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	7c12      	ldrb	r2, [r2, #16]
 800fb64:	f107 0108 	add.w	r1, r7, #8
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
 800fb6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb6e:	e00f      	b.n	800fb90 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fa28 	bl	800ffc8 <USBD_CtlError>
        err++;
 800fb78:	7afb      	ldrb	r3, [r7, #11]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	72fb      	strb	r3, [r7, #11]
      break;
 800fb7e:	e007      	b.n	800fb90 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 fa20 	bl	800ffc8 <USBD_CtlError>
      err++;
 800fb88:	7afb      	ldrb	r3, [r7, #11]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fb8e:	bf00      	nop
    }
    break;
 800fb90:	e037      	b.n	800fc02 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7c1b      	ldrb	r3, [r3, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d109      	bne.n	800fbae <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fba2:	f107 0208 	add.w	r2, r7, #8
 800fba6:	4610      	mov	r0, r2
 800fba8:	4798      	blx	r3
 800fbaa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fbac:	e029      	b.n	800fc02 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fbae:	6839      	ldr	r1, [r7, #0]
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fa09 	bl	800ffc8 <USBD_CtlError>
      err++;
 800fbb6:	7afb      	ldrb	r3, [r7, #11]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	72fb      	strb	r3, [r7, #11]
    break;
 800fbbc:	e021      	b.n	800fc02 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	7c1b      	ldrb	r3, [r3, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10d      	bne.n	800fbe2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	f107 0208 	add.w	r2, r7, #8
 800fbd2:	4610      	mov	r0, r2
 800fbd4:	4798      	blx	r3
 800fbd6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	2207      	movs	r2, #7
 800fbde:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fbe0:	e00f      	b.n	800fc02 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 f9ef 	bl	800ffc8 <USBD_CtlError>
      err++;
 800fbea:	7afb      	ldrb	r3, [r7, #11]
 800fbec:	3301      	adds	r3, #1
 800fbee:	72fb      	strb	r3, [r7, #11]
    break;
 800fbf0:	e007      	b.n	800fc02 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800fbf2:	6839      	ldr	r1, [r7, #0]
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f9e7 	bl	800ffc8 <USBD_CtlError>
    err++;
 800fbfa:	7afb      	ldrb	r3, [r7, #11]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	72fb      	strb	r3, [r7, #11]
    break;
 800fc00:	bf00      	nop
  }

  if (err != 0U)
 800fc02:	7afb      	ldrb	r3, [r7, #11]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11e      	bne.n	800fc46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	88db      	ldrh	r3, [r3, #6]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d016      	beq.n	800fc3e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800fc10:	893b      	ldrh	r3, [r7, #8]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00e      	beq.n	800fc34 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	88da      	ldrh	r2, [r3, #6]
 800fc1a:	893b      	ldrh	r3, [r7, #8]
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	bf28      	it	cs
 800fc20:	4613      	movcs	r3, r2
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc26:	893b      	ldrh	r3, [r7, #8]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	68f9      	ldr	r1, [r7, #12]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fa3c 	bl	80100aa <USBD_CtlSendData>
 800fc32:	e009      	b.n	800fc48 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f9c6 	bl	800ffc8 <USBD_CtlError>
 800fc3c:	e004      	b.n	800fc48 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 fa8d 	bl	801015e <USBD_CtlSendStatus>
 800fc44:	e000      	b.n	800fc48 <USBD_GetDescriptor+0x320>
    return;
 800fc46:	bf00      	nop
    }
  }
}
 800fc48:	3710      	adds	r7, #16
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop

0800fc50 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	889b      	ldrh	r3, [r3, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d130      	bne.n	800fcc4 <USBD_SetAddress+0x74>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	88db      	ldrh	r3, [r3, #6]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d12c      	bne.n	800fcc4 <USBD_SetAddress+0x74>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	885b      	ldrh	r3, [r3, #2]
 800fc6e:	2b7f      	cmp	r3, #127	; 0x7f
 800fc70:	d828      	bhi.n	800fcc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	885b      	ldrh	r3, [r3, #2]
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc84:	2b03      	cmp	r3, #3
 800fc86:	d104      	bne.n	800fc92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800fc88:	6839      	ldr	r1, [r7, #0]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f99c 	bl	800ffc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc90:	e01c      	b.n	800fccc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7bfa      	ldrb	r2, [r7, #15]
 800fc96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc9a:	7bfb      	ldrb	r3, [r7, #15]
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f007 fe3a 	bl	8017918 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fa5a 	bl	801015e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fcaa:	7bfb      	ldrb	r3, [r7, #15]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d004      	beq.n	800fcba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcb8:	e008      	b.n	800fccc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcc2:	e003      	b.n	800fccc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fcc4:	6839      	ldr	r1, [r7, #0]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f97e 	bl	800ffc8 <USBD_CtlError>
  }
}
 800fccc:	bf00      	nop
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcde:	2300      	movs	r3, #0
 800fce0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	885b      	ldrh	r3, [r3, #2]
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	4b4b      	ldr	r3, [pc, #300]	; (800fe18 <USBD_SetConfig+0x144>)
 800fcea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fcec:	4b4a      	ldr	r3, [pc, #296]	; (800fe18 <USBD_SetConfig+0x144>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d905      	bls.n	800fd00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f966 	bl	800ffc8 <USBD_CtlError>
    return USBD_FAIL;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	e087      	b.n	800fe10 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d002      	beq.n	800fd10 <USBD_SetConfig+0x3c>
 800fd0a:	2b03      	cmp	r3, #3
 800fd0c:	d025      	beq.n	800fd5a <USBD_SetConfig+0x86>
 800fd0e:	e071      	b.n	800fdf4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fd10:	4b41      	ldr	r3, [pc, #260]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01c      	beq.n	800fd52 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800fd18:	4b3f      	ldr	r3, [pc, #252]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd22:	4b3d      	ldr	r3, [pc, #244]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7ff f97d 	bl	800f028 <USBD_SetClassConfig>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fd32:	7bfb      	ldrb	r3, [r7, #15]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 f944 	bl	800ffc8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fd40:	e065      	b.n	800fe0e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa0b 	bl	801015e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2203      	movs	r2, #3
 800fd4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fd50:	e05d      	b.n	800fe0e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 fa03 	bl	801015e <USBD_CtlSendStatus>
    break;
 800fd58:	e059      	b.n	800fe0e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fd5a:	4b2f      	ldr	r3, [pc, #188]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d112      	bne.n	800fd88 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2202      	movs	r2, #2
 800fd66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800fd6a:	4b2b      	ldr	r3, [pc, #172]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	461a      	mov	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd74:	4b28      	ldr	r3, [pc, #160]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7ff f970 	bl	800f060 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f9ec 	bl	801015e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fd86:	e042      	b.n	800fe0e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800fd88:	4b23      	ldr	r3, [pc, #140]	; (800fe18 <USBD_SetConfig+0x144>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d02a      	beq.n	800fdec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7ff f95e 	bl	800f060 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fda4:	4b1c      	ldr	r3, [pc, #112]	; (800fe18 <USBD_SetConfig+0x144>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdae:	4b1a      	ldr	r3, [pc, #104]	; (800fe18 <USBD_SetConfig+0x144>)
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff f937 	bl	800f028 <USBD_SetClassConfig>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800fdbe:	7bfb      	ldrb	r3, [r7, #15]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00f      	beq.n	800fde4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800fdc4:	6839      	ldr	r1, [r7, #0]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f8fe 	bl	800ffc8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff f943 	bl	800f060 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2202      	movs	r2, #2
 800fdde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fde2:	e014      	b.n	800fe0e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 f9ba 	bl	801015e <USBD_CtlSendStatus>
    break;
 800fdea:	e010      	b.n	800fe0e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 f9b6 	bl	801015e <USBD_CtlSendStatus>
    break;
 800fdf2:	e00c      	b.n	800fe0e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800fdf4:	6839      	ldr	r1, [r7, #0]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f8e6 	bl	800ffc8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdfc:	4b06      	ldr	r3, [pc, #24]	; (800fe18 <USBD_SetConfig+0x144>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff f92c 	bl	800f060 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fe08:	2303      	movs	r3, #3
 800fe0a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0c:	bf00      	nop
  }

  return ret;
 800fe0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	20000438 	.word	0x20000438

0800fe1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	88db      	ldrh	r3, [r3, #6]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d004      	beq.n	800fe38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f8c9 	bl	800ffc8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fe36:	e021      	b.n	800fe7c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	db17      	blt.n	800fe72 <USBD_GetConfig+0x56>
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	dd02      	ble.n	800fe4c <USBD_GetConfig+0x30>
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d00b      	beq.n	800fe62 <USBD_GetConfig+0x46>
 800fe4a:	e012      	b.n	800fe72 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	3308      	adds	r3, #8
 800fe56:	2201      	movs	r2, #1
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f925 	bl	80100aa <USBD_CtlSendData>
      break;
 800fe60:	e00c      	b.n	800fe7c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	3304      	adds	r3, #4
 800fe66:	2201      	movs	r2, #1
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 f91d 	bl	80100aa <USBD_CtlSendData>
      break;
 800fe70:	e004      	b.n	800fe7c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f8a7 	bl	800ffc8 <USBD_CtlError>
      break;
 800fe7a:	bf00      	nop
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe94:	3b01      	subs	r3, #1
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d81e      	bhi.n	800fed8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	88db      	ldrh	r3, [r3, #6]
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d004      	beq.n	800feac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f88f 	bl	800ffc8 <USBD_CtlError>
      break;
 800feaa:	e01a      	b.n	800fee2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d005      	beq.n	800fec8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	f043 0202 	orr.w	r2, r3, #2
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	330c      	adds	r3, #12
 800fecc:	2202      	movs	r2, #2
 800fece:	4619      	mov	r1, r3
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 f8ea 	bl	80100aa <USBD_CtlSendData>
    break;
 800fed6:	e004      	b.n	800fee2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800fed8:	6839      	ldr	r1, [r7, #0]
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 f874 	bl	800ffc8 <USBD_CtlError>
    break;
 800fee0:	bf00      	nop
  }
}
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b082      	sub	sp, #8
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	885b      	ldrh	r3, [r3, #2]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d106      	bne.n	800ff0a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2201      	movs	r2, #1
 800ff00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 f92a 	bl	801015e <USBD_CtlSendStatus>
  }
}
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b082      	sub	sp, #8
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff22:	3b01      	subs	r3, #1
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d80b      	bhi.n	800ff40 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	885b      	ldrh	r3, [r3, #2]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d10c      	bne.n	800ff4a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 f910 	bl	801015e <USBD_CtlSendStatus>
      }
      break;
 800ff3e:	e004      	b.n	800ff4a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f840 	bl	800ffc8 <USBD_CtlError>
      break;
 800ff48:	e000      	b.n	800ff4c <USBD_ClrFeature+0x3a>
      break;
 800ff4a:	bf00      	nop
  }
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	781a      	ldrb	r2, [r3, #0]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	781a      	ldrb	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f7ff faa9 	bl	800f4d6 <SWAPBYTE>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	3301      	adds	r3, #1
 800ff96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f7ff fa9c 	bl	800f4d6 <SWAPBYTE>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f7ff fa8f 	bl	800f4d6 <SWAPBYTE>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	461a      	mov	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	80da      	strh	r2, [r3, #6]
}
 800ffc0:	bf00      	nop
 800ffc2:	3710      	adds	r7, #16
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffd2:	2180      	movs	r1, #128	; 0x80
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f007 fc35 	bl	8017844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffda:	2100      	movs	r1, #0
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f007 fc31 	bl	8017844 <USBD_LL_StallEP>
}
 800ffe2:	bf00      	nop
 800ffe4:	3708      	adds	r7, #8
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b086      	sub	sp, #24
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fff6:	2300      	movs	r3, #0
 800fff8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d036      	beq.n	801006e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010004:	6938      	ldr	r0, [r7, #16]
 8010006:	f000 f836 	bl	8010076 <USBD_GetLen>
 801000a:	4603      	mov	r3, r0
 801000c:	3301      	adds	r3, #1
 801000e:	b29b      	uxth	r3, r3
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010018:	7dfb      	ldrb	r3, [r7, #23]
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	4413      	add	r3, r2
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	7812      	ldrb	r2, [r2, #0]
 8010022:	701a      	strb	r2, [r3, #0]
  idx++;
 8010024:	7dfb      	ldrb	r3, [r7, #23]
 8010026:	3301      	adds	r3, #1
 8010028:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	4413      	add	r3, r2
 8010030:	2203      	movs	r2, #3
 8010032:	701a      	strb	r2, [r3, #0]
  idx++;
 8010034:	7dfb      	ldrb	r3, [r7, #23]
 8010036:	3301      	adds	r3, #1
 8010038:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801003a:	e013      	b.n	8010064 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801003c:	7dfb      	ldrb	r3, [r7, #23]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	4413      	add	r3, r2
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	7812      	ldrb	r2, [r2, #0]
 8010046:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	3301      	adds	r3, #1
 801004c:	613b      	str	r3, [r7, #16]
    idx++;
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	3301      	adds	r3, #1
 8010052:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010054:	7dfb      	ldrb	r3, [r7, #23]
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	4413      	add	r3, r2
 801005a:	2200      	movs	r2, #0
 801005c:	701a      	strb	r2, [r3, #0]
    idx++;
 801005e:	7dfb      	ldrb	r3, [r7, #23]
 8010060:	3301      	adds	r3, #1
 8010062:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1e7      	bne.n	801003c <USBD_GetString+0x52>
 801006c:	e000      	b.n	8010070 <USBD_GetString+0x86>
    return;
 801006e:	bf00      	nop
  }
}
 8010070:	3718      	adds	r7, #24
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010076:	b480      	push	{r7}
 8010078:	b085      	sub	sp, #20
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010086:	e005      	b.n	8010094 <USBD_GetLen+0x1e>
  {
    len++;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	3301      	adds	r3, #1
 801008c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	3301      	adds	r3, #1
 8010092:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d1f5      	bne.n	8010088 <USBD_GetLen+0x12>
  }

  return len;
 801009c:	7bfb      	ldrb	r3, [r7, #15]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2202      	movs	r2, #2
 80100ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	2100      	movs	r1, #0
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f007 fc40 	bl	8017956 <USBD_LL_Transmit>

  return USBD_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	2100      	movs	r1, #0
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f007 fc2f 	bl	8017956 <USBD_LL_Transmit>

  return USBD_OK;
 80100f8:	2300      	movs	r3, #0
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2203      	movs	r2, #3
 8010112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	2100      	movs	r1, #0
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f007 fc33 	bl	8017998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	2100      	movs	r1, #0
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f007 fc22 	bl	8017998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b082      	sub	sp, #8
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2204      	movs	r2, #4
 801016a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801016e:	2300      	movs	r3, #0
 8010170:	2200      	movs	r2, #0
 8010172:	2100      	movs	r1, #0
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f007 fbee 	bl	8017956 <USBD_LL_Transmit>

  return USBD_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2205      	movs	r2, #5
 8010190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010194:	2300      	movs	r3, #0
 8010196:	2200      	movs	r2, #0
 8010198:	2100      	movs	r1, #0
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f007 fbfc 	bl	8017998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
	...

080101ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	4603      	mov	r3, r0
 80101b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	4a08      	ldr	r2, [pc, #32]	; (80101dc <disk_status+0x30>)
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	79fa      	ldrb	r2, [r7, #7]
 80101c4:	4905      	ldr	r1, [pc, #20]	; (80101dc <disk_status+0x30>)
 80101c6:	440a      	add	r2, r1
 80101c8:	7a12      	ldrb	r2, [r2, #8]
 80101ca:	4610      	mov	r0, r2
 80101cc:	4798      	blx	r3
 80101ce:	4603      	mov	r3, r0
 80101d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	20000464 	.word	0x20000464

080101e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	4a0d      	ldr	r2, [pc, #52]	; (8010228 <disk_initialize+0x48>)
 80101f2:	5cd3      	ldrb	r3, [r2, r3]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d111      	bne.n	801021c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	4a0b      	ldr	r2, [pc, #44]	; (8010228 <disk_initialize+0x48>)
 80101fc:	2101      	movs	r1, #1
 80101fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010200:	79fb      	ldrb	r3, [r7, #7]
 8010202:	4a09      	ldr	r2, [pc, #36]	; (8010228 <disk_initialize+0x48>)
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	79fa      	ldrb	r2, [r7, #7]
 801020e:	4906      	ldr	r1, [pc, #24]	; (8010228 <disk_initialize+0x48>)
 8010210:	440a      	add	r2, r1
 8010212:	7a12      	ldrb	r2, [r2, #8]
 8010214:	4610      	mov	r0, r2
 8010216:	4798      	blx	r3
 8010218:	4603      	mov	r3, r0
 801021a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801021c:	7bfb      	ldrb	r3, [r7, #15]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20000464 	.word	0x20000464

0801022c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801022c:	b590      	push	{r4, r7, lr}
 801022e:	b087      	sub	sp, #28
 8010230:	af00      	add	r7, sp, #0
 8010232:	60b9      	str	r1, [r7, #8]
 8010234:	607a      	str	r2, [r7, #4]
 8010236:	603b      	str	r3, [r7, #0]
 8010238:	4603      	mov	r3, r0
 801023a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801023c:	7bfb      	ldrb	r3, [r7, #15]
 801023e:	4a0a      	ldr	r2, [pc, #40]	; (8010268 <disk_read+0x3c>)
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4413      	add	r3, r2
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	689c      	ldr	r4, [r3, #8]
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	4a07      	ldr	r2, [pc, #28]	; (8010268 <disk_read+0x3c>)
 801024c:	4413      	add	r3, r2
 801024e:	7a18      	ldrb	r0, [r3, #8]
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	68b9      	ldr	r1, [r7, #8]
 8010256:	47a0      	blx	r4
 8010258:	4603      	mov	r3, r0
 801025a:	75fb      	strb	r3, [r7, #23]
  return res;
 801025c:	7dfb      	ldrb	r3, [r7, #23]
}
 801025e:	4618      	mov	r0, r3
 8010260:	371c      	adds	r7, #28
 8010262:	46bd      	mov	sp, r7
 8010264:	bd90      	pop	{r4, r7, pc}
 8010266:	bf00      	nop
 8010268:	20000464 	.word	0x20000464

0801026c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801026c:	b590      	push	{r4, r7, lr}
 801026e:	b087      	sub	sp, #28
 8010270:	af00      	add	r7, sp, #0
 8010272:	60b9      	str	r1, [r7, #8]
 8010274:	607a      	str	r2, [r7, #4]
 8010276:	603b      	str	r3, [r7, #0]
 8010278:	4603      	mov	r3, r0
 801027a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801027c:	7bfb      	ldrb	r3, [r7, #15]
 801027e:	4a0a      	ldr	r2, [pc, #40]	; (80102a8 <disk_write+0x3c>)
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4413      	add	r3, r2
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	68dc      	ldr	r4, [r3, #12]
 8010288:	7bfb      	ldrb	r3, [r7, #15]
 801028a:	4a07      	ldr	r2, [pc, #28]	; (80102a8 <disk_write+0x3c>)
 801028c:	4413      	add	r3, r2
 801028e:	7a18      	ldrb	r0, [r3, #8]
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	68b9      	ldr	r1, [r7, #8]
 8010296:	47a0      	blx	r4
 8010298:	4603      	mov	r3, r0
 801029a:	75fb      	strb	r3, [r7, #23]
  return res;
 801029c:	7dfb      	ldrb	r3, [r7, #23]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd90      	pop	{r4, r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20000464 	.word	0x20000464

080102ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	603a      	str	r2, [r7, #0]
 80102b6:	71fb      	strb	r3, [r7, #7]
 80102b8:	460b      	mov	r3, r1
 80102ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80102bc:	79fb      	ldrb	r3, [r7, #7]
 80102be:	4a09      	ldr	r2, [pc, #36]	; (80102e4 <disk_ioctl+0x38>)
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	4413      	add	r3, r2
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	79fa      	ldrb	r2, [r7, #7]
 80102ca:	4906      	ldr	r1, [pc, #24]	; (80102e4 <disk_ioctl+0x38>)
 80102cc:	440a      	add	r2, r1
 80102ce:	7a10      	ldrb	r0, [r2, #8]
 80102d0:	79b9      	ldrb	r1, [r7, #6]
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	4798      	blx	r3
 80102d6:	4603      	mov	r3, r0
 80102d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80102da:	7bfb      	ldrb	r3, [r7, #15]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	20000464 	.word	0x20000464

080102e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	3301      	adds	r3, #1
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80102f8:	89fb      	ldrh	r3, [r7, #14]
 80102fa:	021b      	lsls	r3, r3, #8
 80102fc:	b21a      	sxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	b21b      	sxth	r3, r3
 8010304:	4313      	orrs	r3, r2
 8010306:	b21b      	sxth	r3, r3
 8010308:	81fb      	strh	r3, [r7, #14]
	return rv;
 801030a:	89fb      	ldrh	r3, [r7, #14]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3714      	adds	r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3303      	adds	r3, #3
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	021b      	lsls	r3, r3, #8
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	3202      	adds	r2, #2
 8010330:	7812      	ldrb	r2, [r2, #0]
 8010332:	4313      	orrs	r3, r2
 8010334:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	021b      	lsls	r3, r3, #8
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	3201      	adds	r2, #1
 801033e:	7812      	ldrb	r2, [r2, #0]
 8010340:	4313      	orrs	r3, r2
 8010342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	021b      	lsls	r3, r3, #8
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	7812      	ldrb	r2, [r2, #0]
 801034c:	4313      	orrs	r3, r2
 801034e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010350:	68fb      	ldr	r3, [r7, #12]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	460b      	mov	r3, r1
 8010368:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	1c5a      	adds	r2, r3, #1
 801036e:	607a      	str	r2, [r7, #4]
 8010370:	887a      	ldrh	r2, [r7, #2]
 8010372:	b2d2      	uxtb	r2, r2
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	887b      	ldrh	r3, [r7, #2]
 8010378:	0a1b      	lsrs	r3, r3, #8
 801037a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	1c5a      	adds	r2, r3, #1
 8010380:	607a      	str	r2, [r7, #4]
 8010382:	887a      	ldrh	r2, [r7, #2]
 8010384:	b2d2      	uxtb	r2, r2
 8010386:	701a      	strb	r2, [r3, #0]
}
 8010388:	bf00      	nop
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	1c5a      	adds	r2, r3, #1
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	b2d2      	uxtb	r2, r2
 80103a8:	701a      	strb	r2, [r3, #0]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	0a1b      	lsrs	r3, r3, #8
 80103ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	607a      	str	r2, [r7, #4]
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	b2d2      	uxtb	r2, r2
 80103ba:	701a      	strb	r2, [r3, #0]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	0a1b      	lsrs	r3, r3, #8
 80103c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	607a      	str	r2, [r7, #4]
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	b2d2      	uxtb	r2, r2
 80103cc:	701a      	strb	r2, [r3, #0]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	0a1b      	lsrs	r3, r3, #8
 80103d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	607a      	str	r2, [r7, #4]
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	b2d2      	uxtb	r2, r2
 80103de:	701a      	strb	r2, [r3, #0]
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80103ec:	b480      	push	{r7}
 80103ee:	b087      	sub	sp, #28
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00d      	beq.n	8010422 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	1c53      	adds	r3, r2, #1
 801040a:	613b      	str	r3, [r7, #16]
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	1c59      	adds	r1, r3, #1
 8010410:	6179      	str	r1, [r7, #20]
 8010412:	7812      	ldrb	r2, [r2, #0]
 8010414:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3b01      	subs	r3, #1
 801041a:	607b      	str	r3, [r7, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d1f1      	bne.n	8010406 <mem_cpy+0x1a>
	}
}
 8010422:	bf00      	nop
 8010424:	371c      	adds	r7, #28
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr

0801042e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801042e:	b480      	push	{r7}
 8010430:	b087      	sub	sp, #28
 8010432:	af00      	add	r7, sp, #0
 8010434:	60f8      	str	r0, [r7, #12]
 8010436:	60b9      	str	r1, [r7, #8]
 8010438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	1c5a      	adds	r2, r3, #1
 8010442:	617a      	str	r2, [r7, #20]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	b2d2      	uxtb	r2, r2
 8010448:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	3b01      	subs	r3, #1
 801044e:	607b      	str	r3, [r7, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1f3      	bne.n	801043e <mem_set+0x10>
}
 8010456:	bf00      	nop
 8010458:	371c      	adds	r7, #28
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr

08010462 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010462:	b480      	push	{r7}
 8010464:	b089      	sub	sp, #36	; 0x24
 8010466:	af00      	add	r7, sp, #0
 8010468:	60f8      	str	r0, [r7, #12]
 801046a:	60b9      	str	r1, [r7, #8]
 801046c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	61fb      	str	r3, [r7, #28]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	1c5a      	adds	r2, r3, #1
 801047e:	61fa      	str	r2, [r7, #28]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	4619      	mov	r1, r3
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	1c5a      	adds	r2, r3, #1
 8010488:	61ba      	str	r2, [r7, #24]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	1acb      	subs	r3, r1, r3
 801048e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3b01      	subs	r3, #1
 8010494:	607b      	str	r3, [r7, #4]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d002      	beq.n	80104a2 <mem_cmp+0x40>
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d0eb      	beq.n	801047a <mem_cmp+0x18>

	return r;
 80104a2:	697b      	ldr	r3, [r7, #20]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3724      	adds	r7, #36	; 0x24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80104ba:	e002      	b.n	80104c2 <chk_chr+0x12>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	3301      	adds	r3, #1
 80104c0:	607b      	str	r3, [r7, #4]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d005      	beq.n	80104d6 <chk_chr+0x26>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	461a      	mov	r2, r3
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d1f2      	bne.n	80104bc <chk_chr+0xc>
	return *str;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	781b      	ldrb	r3, [r3, #0]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	370c      	adds	r7, #12
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr

080104e6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d009      	beq.n	8010508 <lock_fs+0x22>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f002 fd8d 	bl	8013018 <ff_req_grant>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <lock_fs+0x22>
 8010504:	2301      	movs	r3, #1
 8010506:	e000      	b.n	801050a <lock_fs+0x24>
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b082      	sub	sp, #8
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	460b      	mov	r3, r1
 801051c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00d      	beq.n	8010540 <unlock_fs+0x2e>
 8010524:	78fb      	ldrb	r3, [r7, #3]
 8010526:	2b0c      	cmp	r3, #12
 8010528:	d00a      	beq.n	8010540 <unlock_fs+0x2e>
 801052a:	78fb      	ldrb	r3, [r7, #3]
 801052c:	2b0b      	cmp	r3, #11
 801052e:	d007      	beq.n	8010540 <unlock_fs+0x2e>
 8010530:	78fb      	ldrb	r3, [r7, #3]
 8010532:	2b0f      	cmp	r3, #15
 8010534:	d004      	beq.n	8010540 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	4618      	mov	r0, r3
 801053c:	f002 fd81 	bl	8013042 <ff_rel_grant>
	}
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010552:	2300      	movs	r3, #0
 8010554:	60bb      	str	r3, [r7, #8]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	e029      	b.n	80105b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801055c:	4a27      	ldr	r2, [pc, #156]	; (80105fc <chk_lock+0xb4>)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	4413      	add	r3, r2
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d01d      	beq.n	80105a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801056a:	4a24      	ldr	r2, [pc, #144]	; (80105fc <chk_lock+0xb4>)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	011b      	lsls	r3, r3, #4
 8010570:	4413      	add	r3, r2
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	429a      	cmp	r2, r3
 801057a:	d116      	bne.n	80105aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801057c:	4a1f      	ldr	r2, [pc, #124]	; (80105fc <chk_lock+0xb4>)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	011b      	lsls	r3, r3, #4
 8010582:	4413      	add	r3, r2
 8010584:	3304      	adds	r3, #4
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801058c:	429a      	cmp	r2, r3
 801058e:	d10c      	bne.n	80105aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010590:	4a1a      	ldr	r2, [pc, #104]	; (80105fc <chk_lock+0xb4>)
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	011b      	lsls	r3, r3, #4
 8010596:	4413      	add	r3, r2
 8010598:	3308      	adds	r3, #8
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d102      	bne.n	80105aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105a4:	e007      	b.n	80105b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80105a6:	2301      	movs	r3, #1
 80105a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3301      	adds	r3, #1
 80105ae:	60fb      	str	r3, [r7, #12]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d9d2      	bls.n	801055c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d109      	bne.n	80105d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d102      	bne.n	80105c8 <chk_lock+0x80>
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	d101      	bne.n	80105cc <chk_lock+0x84>
 80105c8:	2300      	movs	r3, #0
 80105ca:	e010      	b.n	80105ee <chk_lock+0xa6>
 80105cc:	2312      	movs	r3, #18
 80105ce:	e00e      	b.n	80105ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d108      	bne.n	80105e8 <chk_lock+0xa0>
 80105d6:	4a09      	ldr	r2, [pc, #36]	; (80105fc <chk_lock+0xb4>)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	011b      	lsls	r3, r3, #4
 80105dc:	4413      	add	r3, r2
 80105de:	330c      	adds	r3, #12
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e6:	d101      	bne.n	80105ec <chk_lock+0xa4>
 80105e8:	2310      	movs	r3, #16
 80105ea:	e000      	b.n	80105ee <chk_lock+0xa6>
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	20000444 	.word	0x20000444

08010600 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010606:	2300      	movs	r3, #0
 8010608:	607b      	str	r3, [r7, #4]
 801060a:	e002      	b.n	8010612 <enq_lock+0x12>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3301      	adds	r3, #1
 8010610:	607b      	str	r3, [r7, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d806      	bhi.n	8010626 <enq_lock+0x26>
 8010618:	4a09      	ldr	r2, [pc, #36]	; (8010640 <enq_lock+0x40>)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	011b      	lsls	r3, r3, #4
 801061e:	4413      	add	r3, r2
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1f2      	bne.n	801060c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b02      	cmp	r3, #2
 801062a:	bf14      	ite	ne
 801062c:	2301      	movne	r3, #1
 801062e:	2300      	moveq	r3, #0
 8010630:	b2db      	uxtb	r3, r3
}
 8010632:	4618      	mov	r0, r3
 8010634:	370c      	adds	r7, #12
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	20000444 	.word	0x20000444

08010644 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801064e:	2300      	movs	r3, #0
 8010650:	60fb      	str	r3, [r7, #12]
 8010652:	e01f      	b.n	8010694 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010654:	4a41      	ldr	r2, [pc, #260]	; (801075c <inc_lock+0x118>)
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	4413      	add	r3, r2
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d113      	bne.n	801068e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010666:	4a3d      	ldr	r2, [pc, #244]	; (801075c <inc_lock+0x118>)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	4413      	add	r3, r2
 801066e:	3304      	adds	r3, #4
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010676:	429a      	cmp	r2, r3
 8010678:	d109      	bne.n	801068e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801067a:	4a38      	ldr	r2, [pc, #224]	; (801075c <inc_lock+0x118>)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	011b      	lsls	r3, r3, #4
 8010680:	4413      	add	r3, r2
 8010682:	3308      	adds	r3, #8
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801068a:	429a      	cmp	r2, r3
 801068c:	d006      	beq.n	801069c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3301      	adds	r3, #1
 8010692:	60fb      	str	r3, [r7, #12]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b01      	cmp	r3, #1
 8010698:	d9dc      	bls.n	8010654 <inc_lock+0x10>
 801069a:	e000      	b.n	801069e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801069c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d132      	bne.n	801070a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	e002      	b.n	80106b0 <inc_lock+0x6c>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	3301      	adds	r3, #1
 80106ae:	60fb      	str	r3, [r7, #12]
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d806      	bhi.n	80106c4 <inc_lock+0x80>
 80106b6:	4a29      	ldr	r2, [pc, #164]	; (801075c <inc_lock+0x118>)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	011b      	lsls	r3, r3, #4
 80106bc:	4413      	add	r3, r2
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1f2      	bne.n	80106aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d101      	bne.n	80106ce <inc_lock+0x8a>
 80106ca:	2300      	movs	r3, #0
 80106cc:	e040      	b.n	8010750 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	4922      	ldr	r1, [pc, #136]	; (801075c <inc_lock+0x118>)
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	011b      	lsls	r3, r3, #4
 80106d8:	440b      	add	r3, r1
 80106da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	689a      	ldr	r2, [r3, #8]
 80106e0:	491e      	ldr	r1, [pc, #120]	; (801075c <inc_lock+0x118>)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	011b      	lsls	r3, r3, #4
 80106e6:	440b      	add	r3, r1
 80106e8:	3304      	adds	r3, #4
 80106ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	695a      	ldr	r2, [r3, #20]
 80106f0:	491a      	ldr	r1, [pc, #104]	; (801075c <inc_lock+0x118>)
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	011b      	lsls	r3, r3, #4
 80106f6:	440b      	add	r3, r1
 80106f8:	3308      	adds	r3, #8
 80106fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80106fc:	4a17      	ldr	r2, [pc, #92]	; (801075c <inc_lock+0x118>)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	4413      	add	r3, r2
 8010704:	330c      	adds	r3, #12
 8010706:	2200      	movs	r2, #0
 8010708:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d009      	beq.n	8010724 <inc_lock+0xe0>
 8010710:	4a12      	ldr	r2, [pc, #72]	; (801075c <inc_lock+0x118>)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	4413      	add	r3, r2
 8010718:	330c      	adds	r3, #12
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d001      	beq.n	8010724 <inc_lock+0xe0>
 8010720:	2300      	movs	r3, #0
 8010722:	e015      	b.n	8010750 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d108      	bne.n	801073c <inc_lock+0xf8>
 801072a:	4a0c      	ldr	r2, [pc, #48]	; (801075c <inc_lock+0x118>)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	011b      	lsls	r3, r3, #4
 8010730:	4413      	add	r3, r2
 8010732:	330c      	adds	r3, #12
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	3301      	adds	r3, #1
 8010738:	b29a      	uxth	r2, r3
 801073a:	e001      	b.n	8010740 <inc_lock+0xfc>
 801073c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010740:	4906      	ldr	r1, [pc, #24]	; (801075c <inc_lock+0x118>)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	011b      	lsls	r3, r3, #4
 8010746:	440b      	add	r3, r1
 8010748:	330c      	adds	r3, #12
 801074a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	3301      	adds	r3, #1
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr
 801075c:	20000444 	.word	0x20000444

08010760 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3b01      	subs	r3, #1
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d825      	bhi.n	80107c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010774:	4a17      	ldr	r2, [pc, #92]	; (80107d4 <dec_lock+0x74>)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	4413      	add	r3, r2
 801077c:	330c      	adds	r3, #12
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010782:	89fb      	ldrh	r3, [r7, #14]
 8010784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010788:	d101      	bne.n	801078e <dec_lock+0x2e>
 801078a:	2300      	movs	r3, #0
 801078c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801078e:	89fb      	ldrh	r3, [r7, #14]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d002      	beq.n	801079a <dec_lock+0x3a>
 8010794:	89fb      	ldrh	r3, [r7, #14]
 8010796:	3b01      	subs	r3, #1
 8010798:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801079a:	4a0e      	ldr	r2, [pc, #56]	; (80107d4 <dec_lock+0x74>)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	011b      	lsls	r3, r3, #4
 80107a0:	4413      	add	r3, r2
 80107a2:	330c      	adds	r3, #12
 80107a4:	89fa      	ldrh	r2, [r7, #14]
 80107a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80107a8:	89fb      	ldrh	r3, [r7, #14]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d105      	bne.n	80107ba <dec_lock+0x5a>
 80107ae:	4a09      	ldr	r2, [pc, #36]	; (80107d4 <dec_lock+0x74>)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	011b      	lsls	r3, r3, #4
 80107b4:	4413      	add	r3, r2
 80107b6:	2200      	movs	r2, #0
 80107b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	737b      	strb	r3, [r7, #13]
 80107be:	e001      	b.n	80107c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80107c0:	2302      	movs	r3, #2
 80107c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80107c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3714      	adds	r7, #20
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	20000444 	.word	0x20000444

080107d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80107e0:	2300      	movs	r3, #0
 80107e2:	60fb      	str	r3, [r7, #12]
 80107e4:	e010      	b.n	8010808 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80107e6:	4a0d      	ldr	r2, [pc, #52]	; (801081c <clear_lock+0x44>)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	4413      	add	r3, r2
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d105      	bne.n	8010802 <clear_lock+0x2a>
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <clear_lock+0x44>)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	4413      	add	r3, r2
 80107fe:	2200      	movs	r2, #0
 8010800:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	3301      	adds	r3, #1
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d9eb      	bls.n	80107e6 <clear_lock+0xe>
	}
}
 801080e:	bf00      	nop
 8010810:	3714      	adds	r7, #20
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	20000444 	.word	0x20000444

08010820 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010828:	2300      	movs	r3, #0
 801082a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	78db      	ldrb	r3, [r3, #3]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d034      	beq.n	801089e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010838:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	7858      	ldrb	r0, [r3, #1]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010844:	2301      	movs	r3, #1
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	f7ff fd10 	bl	801026c <disk_write>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d002      	beq.n	8010858 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010852:	2301      	movs	r3, #1
 8010854:	73fb      	strb	r3, [r7, #15]
 8010856:	e022      	b.n	801089e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	1ad2      	subs	r2, r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	69db      	ldr	r3, [r3, #28]
 801086a:	429a      	cmp	r2, r3
 801086c:	d217      	bcs.n	801089e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	789b      	ldrb	r3, [r3, #2]
 8010872:	613b      	str	r3, [r7, #16]
 8010874:	e010      	b.n	8010898 <sync_window+0x78>
					wsect += fs->fsize;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	4413      	add	r3, r2
 801087e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7858      	ldrb	r0, [r3, #1]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801088a:	2301      	movs	r3, #1
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	f7ff fced 	bl	801026c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	3b01      	subs	r3, #1
 8010896:	613b      	str	r3, [r7, #16]
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d8eb      	bhi.n	8010876 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801089e:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3718      	adds	r7, #24
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ba:	683a      	ldr	r2, [r7, #0]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d01b      	beq.n	80108f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff ffad 	bl	8010820 <sync_window>
 80108c6:	4603      	mov	r3, r0
 80108c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80108ca:	7bfb      	ldrb	r3, [r7, #15]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d113      	bne.n	80108f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	7858      	ldrb	r0, [r3, #1]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80108da:	2301      	movs	r3, #1
 80108dc:	683a      	ldr	r2, [r7, #0]
 80108de:	f7ff fca5 	bl	801022c <disk_read>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80108e8:	f04f 33ff 	mov.w	r3, #4294967295
 80108ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80108ee:	2301      	movs	r3, #1
 80108f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
	...

08010904 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff ff87 	bl	8010820 <sync_window>
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d158      	bne.n	80109ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	2b03      	cmp	r3, #3
 8010922:	d148      	bne.n	80109b6 <sync_fs+0xb2>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	791b      	ldrb	r3, [r3, #4]
 8010928:	2b01      	cmp	r3, #1
 801092a:	d144      	bne.n	80109b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	3334      	adds	r3, #52	; 0x34
 8010930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010934:	2100      	movs	r1, #0
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff fd79 	bl	801042e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	3334      	adds	r3, #52	; 0x34
 8010940:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010944:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010948:	4618      	mov	r0, r3
 801094a:	f7ff fd08 	bl	801035e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	3334      	adds	r3, #52	; 0x34
 8010952:	4921      	ldr	r1, [pc, #132]	; (80109d8 <sync_fs+0xd4>)
 8010954:	4618      	mov	r0, r3
 8010956:	f7ff fd1d 	bl	8010394 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3334      	adds	r3, #52	; 0x34
 801095e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010962:	491e      	ldr	r1, [pc, #120]	; (80109dc <sync_fs+0xd8>)
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fd15 	bl	8010394 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	3334      	adds	r3, #52	; 0x34
 801096e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	695b      	ldr	r3, [r3, #20]
 8010976:	4619      	mov	r1, r3
 8010978:	4610      	mov	r0, r2
 801097a:	f7ff fd0b 	bl	8010394 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	3334      	adds	r3, #52	; 0x34
 8010982:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	691b      	ldr	r3, [r3, #16]
 801098a:	4619      	mov	r1, r3
 801098c:	4610      	mov	r0, r2
 801098e:	f7ff fd01 	bl	8010394 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	1c5a      	adds	r2, r3, #1
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	7858      	ldrb	r0, [r3, #1]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109aa:	2301      	movs	r3, #1
 80109ac:	f7ff fc5e 	bl	801026c <disk_write>
			fs->fsi_flag = 0;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	785b      	ldrb	r3, [r3, #1]
 80109ba:	2200      	movs	r2, #0
 80109bc:	2100      	movs	r1, #0
 80109be:	4618      	mov	r0, r3
 80109c0:	f7ff fc74 	bl	80102ac <disk_ioctl>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <sync_fs+0xca>
 80109ca:	2301      	movs	r3, #1
 80109cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	41615252 	.word	0x41615252
 80109dc:	61417272 	.word	0x61417272

080109e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	3b02      	subs	r3, #2
 80109ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	3b02      	subs	r3, #2
 80109f6:	683a      	ldr	r2, [r7, #0]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d301      	bcc.n	8010a00 <clust2sect+0x20>
 80109fc:	2300      	movs	r3, #0
 80109fe:	e008      	b.n	8010a12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	895b      	ldrh	r3, [r3, #10]
 8010a04:	461a      	mov	r2, r3
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	fb03 f202 	mul.w	r2, r3, r2
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a10:	4413      	add	r3, r2
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b086      	sub	sp, #24
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d904      	bls.n	8010a3e <get_fat+0x20>
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	699b      	ldr	r3, [r3, #24]
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d302      	bcc.n	8010a44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010a3e:	2301      	movs	r3, #1
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	e08c      	b.n	8010b5e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a44:	f04f 33ff 	mov.w	r3, #4294967295
 8010a48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d045      	beq.n	8010ade <get_fat+0xc0>
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	d05d      	beq.n	8010b12 <get_fat+0xf4>
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d177      	bne.n	8010b4a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	60fb      	str	r3, [r7, #12]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	085b      	lsrs	r3, r3, #1
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	4413      	add	r3, r2
 8010a66:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	0a5b      	lsrs	r3, r3, #9
 8010a70:	4413      	add	r3, r2
 8010a72:	4619      	mov	r1, r3
 8010a74:	6938      	ldr	r0, [r7, #16]
 8010a76:	f7ff ff17 	bl	80108a8 <move_window>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d167      	bne.n	8010b50 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	1c5a      	adds	r2, r3, #1
 8010a84:	60fa      	str	r2, [r7, #12]
 8010a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a8a:	693a      	ldr	r2, [r7, #16]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010a92:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	0a5b      	lsrs	r3, r3, #9
 8010a9c:	4413      	add	r3, r2
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6938      	ldr	r0, [r7, #16]
 8010aa2:	f7ff ff01 	bl	80108a8 <move_window>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d153      	bne.n	8010b54 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ab2:	693a      	ldr	r2, [r7, #16]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010aba:	021b      	lsls	r3, r3, #8
 8010abc:	461a      	mov	r2, r3
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	f003 0301 	and.w	r3, r3, #1
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d002      	beq.n	8010ad4 <get_fat+0xb6>
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	091b      	lsrs	r3, r3, #4
 8010ad2:	e002      	b.n	8010ada <get_fat+0xbc>
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ada:	617b      	str	r3, [r7, #20]
			break;
 8010adc:	e03f      	b.n	8010b5e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	0a1b      	lsrs	r3, r3, #8
 8010ae6:	4413      	add	r3, r2
 8010ae8:	4619      	mov	r1, r3
 8010aea:	6938      	ldr	r0, [r7, #16]
 8010aec:	f7ff fedc 	bl	80108a8 <move_window>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d130      	bne.n	8010b58 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	005b      	lsls	r3, r3, #1
 8010b00:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010b04:	4413      	add	r3, r2
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7ff fbee 	bl	80102e8 <ld_word>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	617b      	str	r3, [r7, #20]
			break;
 8010b10:	e025      	b.n	8010b5e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	09db      	lsrs	r3, r3, #7
 8010b1a:	4413      	add	r3, r2
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	6938      	ldr	r0, [r7, #16]
 8010b20:	f7ff fec2 	bl	80108a8 <move_window>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d118      	bne.n	8010b5c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b38:	4413      	add	r3, r2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7ff fbec 	bl	8010318 <ld_dword>
 8010b40:	4603      	mov	r3, r0
 8010b42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010b46:	617b      	str	r3, [r7, #20]
			break;
 8010b48:	e009      	b.n	8010b5e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	617b      	str	r3, [r7, #20]
 8010b4e:	e006      	b.n	8010b5e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b50:	bf00      	nop
 8010b52:	e004      	b.n	8010b5e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b54:	bf00      	nop
 8010b56:	e002      	b.n	8010b5e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b58:	bf00      	nop
 8010b5a:	e000      	b.n	8010b5e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b5c:	bf00      	nop
		}
	}

	return val;
 8010b5e:	697b      	ldr	r3, [r7, #20]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010b68:	b590      	push	{r4, r7, lr}
 8010b6a:	b089      	sub	sp, #36	; 0x24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010b74:	2302      	movs	r3, #2
 8010b76:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	f240 80d6 	bls.w	8010d2c <put_fat+0x1c4>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	699b      	ldr	r3, [r3, #24]
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	f080 80d0 	bcs.w	8010d2c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	d073      	beq.n	8010c7c <put_fat+0x114>
 8010b94:	2b03      	cmp	r3, #3
 8010b96:	f000 8091 	beq.w	8010cbc <put_fat+0x154>
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	f040 80c6 	bne.w	8010d2c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	61bb      	str	r3, [r7, #24]
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	085b      	lsrs	r3, r3, #1
 8010ba8:	69ba      	ldr	r2, [r7, #24]
 8010baa:	4413      	add	r3, r2
 8010bac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	0a5b      	lsrs	r3, r3, #9
 8010bb6:	4413      	add	r3, r2
 8010bb8:	4619      	mov	r1, r3
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff fe74 	bl	80108a8 <move_window>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bc4:	7ffb      	ldrb	r3, [r7, #31]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f040 80a9 	bne.w	8010d1e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	1c59      	adds	r1, r3, #1
 8010bd6:	61b9      	str	r1, [r7, #24]
 8010bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bdc:	4413      	add	r3, r2
 8010bde:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	f003 0301 	and.w	r3, r3, #1
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00d      	beq.n	8010c06 <put_fat+0x9e>
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	f003 030f 	and.w	r3, r3, #15
 8010bf4:	b25a      	sxtb	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	011b      	lsls	r3, r3, #4
 8010bfc:	b25b      	sxtb	r3, r3
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	e001      	b.n	8010c0a <put_fat+0xa2>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2201      	movs	r2, #1
 8010c12:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	0a5b      	lsrs	r3, r3, #9
 8010c1c:	4413      	add	r3, r2
 8010c1e:	4619      	mov	r1, r3
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff fe41 	bl	80108a8 <move_window>
 8010c26:	4603      	mov	r3, r0
 8010c28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c2a:	7ffb      	ldrb	r3, [r7, #31]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d178      	bne.n	8010d22 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3c:	4413      	add	r3, r2
 8010c3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	f003 0301 	and.w	r3, r3, #1
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d003      	beq.n	8010c52 <put_fat+0xea>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	091b      	lsrs	r3, r3, #4
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	e00e      	b.n	8010c70 <put_fat+0x108>
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	b25b      	sxtb	r3, r3
 8010c58:	f023 030f 	bic.w	r3, r3, #15
 8010c5c:	b25a      	sxtb	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	0a1b      	lsrs	r3, r3, #8
 8010c62:	b25b      	sxtb	r3, r3
 8010c64:	f003 030f 	and.w	r3, r3, #15
 8010c68:	b25b      	sxtb	r3, r3
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	b25b      	sxtb	r3, r3
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2201      	movs	r2, #1
 8010c78:	70da      	strb	r2, [r3, #3]
			break;
 8010c7a:	e057      	b.n	8010d2c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	0a1b      	lsrs	r3, r3, #8
 8010c84:	4413      	add	r3, r2
 8010c86:	4619      	mov	r1, r3
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7ff fe0d 	bl	80108a8 <move_window>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c92:	7ffb      	ldrb	r3, [r7, #31]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d146      	bne.n	8010d26 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010ca6:	4413      	add	r3, r2
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	b292      	uxth	r2, r2
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff fb55 	bl	801035e <st_word>
			fs->wflag = 1;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	70da      	strb	r2, [r3, #3]
			break;
 8010cba:	e037      	b.n	8010d2c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	09db      	lsrs	r3, r3, #7
 8010cc4:	4413      	add	r3, r2
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	68f8      	ldr	r0, [r7, #12]
 8010cca:	f7ff fded 	bl	80108a8 <move_window>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cd2:	7ffb      	ldrb	r3, [r7, #31]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d128      	bne.n	8010d2a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010cec:	4413      	add	r3, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7ff fb12 	bl	8010318 <ld_dword>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010cfa:	4323      	orrs	r3, r4
 8010cfc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d0c:	4413      	add	r3, r2
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff fb3f 	bl	8010394 <st_dword>
			fs->wflag = 1;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	70da      	strb	r2, [r3, #3]
			break;
 8010d1c:	e006      	b.n	8010d2c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d1e:	bf00      	nop
 8010d20:	e004      	b.n	8010d2c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d22:	bf00      	nop
 8010d24:	e002      	b.n	8010d2c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d26:	bf00      	nop
 8010d28:	e000      	b.n	8010d2c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d2a:	bf00      	nop
		}
	}
	return res;
 8010d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3724      	adds	r7, #36	; 0x24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd90      	pop	{r4, r7, pc}

08010d36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b088      	sub	sp, #32
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	60f8      	str	r0, [r7, #12]
 8010d3e:	60b9      	str	r1, [r7, #8]
 8010d40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010d42:	2300      	movs	r3, #0
 8010d44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d904      	bls.n	8010d5c <remove_chain+0x26>
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	699b      	ldr	r3, [r3, #24]
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d301      	bcc.n	8010d60 <remove_chain+0x2a>
 8010d5c:	2302      	movs	r3, #2
 8010d5e:	e04b      	b.n	8010df8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00c      	beq.n	8010d80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010d66:	f04f 32ff 	mov.w	r2, #4294967295
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	69b8      	ldr	r0, [r7, #24]
 8010d6e:	f7ff fefb 	bl	8010b68 <put_fat>
 8010d72:	4603      	mov	r3, r0
 8010d74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010d76:	7ffb      	ldrb	r3, [r7, #31]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d001      	beq.n	8010d80 <remove_chain+0x4a>
 8010d7c:	7ffb      	ldrb	r3, [r7, #31]
 8010d7e:	e03b      	b.n	8010df8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f7ff fe4b 	bl	8010a1e <get_fat>
 8010d88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d031      	beq.n	8010df4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	d101      	bne.n	8010d9a <remove_chain+0x64>
 8010d96:	2302      	movs	r3, #2
 8010d98:	e02e      	b.n	8010df8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da0:	d101      	bne.n	8010da6 <remove_chain+0x70>
 8010da2:	2301      	movs	r3, #1
 8010da4:	e028      	b.n	8010df8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010da6:	2200      	movs	r2, #0
 8010da8:	68b9      	ldr	r1, [r7, #8]
 8010daa:	69b8      	ldr	r0, [r7, #24]
 8010dac:	f7ff fedc 	bl	8010b68 <put_fat>
 8010db0:	4603      	mov	r3, r0
 8010db2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <remove_chain+0x88>
 8010dba:	7ffb      	ldrb	r3, [r7, #31]
 8010dbc:	e01c      	b.n	8010df8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	695a      	ldr	r2, [r3, #20]
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	699b      	ldr	r3, [r3, #24]
 8010dc6:	3b02      	subs	r3, #2
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d20b      	bcs.n	8010de4 <remove_chain+0xae>
			fs->free_clst++;
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	695b      	ldr	r3, [r3, #20]
 8010dd0:	1c5a      	adds	r2, r3, #1
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	791b      	ldrb	r3, [r3, #4]
 8010dda:	f043 0301 	orr.w	r3, r3, #1
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	699b      	ldr	r3, [r3, #24]
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d3c6      	bcc.n	8010d80 <remove_chain+0x4a>
 8010df2:	e000      	b.n	8010df6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010df4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010df6:	2300      	movs	r3, #0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3720      	adds	r7, #32
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d10d      	bne.n	8010e32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	691b      	ldr	r3, [r3, #16]
 8010e1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d004      	beq.n	8010e2c <create_chain+0x2c>
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	699b      	ldr	r3, [r3, #24]
 8010e26:	69ba      	ldr	r2, [r7, #24]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d31b      	bcc.n	8010e64 <create_chain+0x64>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	61bb      	str	r3, [r7, #24]
 8010e30:	e018      	b.n	8010e64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff fdf2 	bl	8010a1e <get_fat>
 8010e3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d801      	bhi.n	8010e46 <create_chain+0x46>
 8010e42:	2301      	movs	r3, #1
 8010e44:	e070      	b.n	8010f28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e4c:	d101      	bne.n	8010e52 <create_chain+0x52>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	e06a      	b.n	8010f28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d201      	bcs.n	8010e60 <create_chain+0x60>
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	e063      	b.n	8010f28 <create_chain+0x128>
		scl = clst;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	699b      	ldr	r3, [r3, #24]
 8010e72:	69fa      	ldr	r2, [r7, #28]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d307      	bcc.n	8010e88 <create_chain+0x88>
				ncl = 2;
 8010e78:	2302      	movs	r3, #2
 8010e7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010e7c:	69fa      	ldr	r2, [r7, #28]
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d901      	bls.n	8010e88 <create_chain+0x88>
 8010e84:	2300      	movs	r3, #0
 8010e86:	e04f      	b.n	8010f28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010e88:	69f9      	ldr	r1, [r7, #28]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7ff fdc7 	bl	8010a1e <get_fat>
 8010e90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d00e      	beq.n	8010eb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d003      	beq.n	8010ea6 <create_chain+0xa6>
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea4:	d101      	bne.n	8010eaa <create_chain+0xaa>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	e03e      	b.n	8010f28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010eaa:	69fa      	ldr	r2, [r7, #28]
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d1da      	bne.n	8010e68 <create_chain+0x68>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e038      	b.n	8010f28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010eb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ebc:	69f9      	ldr	r1, [r7, #28]
 8010ebe:	6938      	ldr	r0, [r7, #16]
 8010ec0:	f7ff fe52 	bl	8010b68 <put_fat>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010ec8:	7dfb      	ldrb	r3, [r7, #23]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d109      	bne.n	8010ee2 <create_chain+0xe2>
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d006      	beq.n	8010ee2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010ed4:	69fa      	ldr	r2, [r7, #28]
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	6938      	ldr	r0, [r7, #16]
 8010eda:	f7ff fe45 	bl	8010b68 <put_fat>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d116      	bne.n	8010f16 <create_chain+0x116>
		fs->last_clst = ncl;
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	69fa      	ldr	r2, [r7, #28]
 8010eec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	695a      	ldr	r2, [r3, #20]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	699b      	ldr	r3, [r3, #24]
 8010ef6:	3b02      	subs	r3, #2
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d804      	bhi.n	8010f06 <create_chain+0x106>
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	695b      	ldr	r3, [r3, #20]
 8010f00:	1e5a      	subs	r2, r3, #1
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	791b      	ldrb	r3, [r3, #4]
 8010f0a:	f043 0301 	orr.w	r3, r3, #1
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	711a      	strb	r2, [r3, #4]
 8010f14:	e007      	b.n	8010f26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010f16:	7dfb      	ldrb	r3, [r7, #23]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d102      	bne.n	8010f22 <create_chain+0x122>
 8010f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f20:	e000      	b.n	8010f24 <create_chain+0x124>
 8010f22:	2301      	movs	r3, #1
 8010f24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010f26:	69fb      	ldr	r3, [r7, #28]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3720      	adds	r7, #32
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b087      	sub	sp, #28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f44:	3304      	adds	r3, #4
 8010f46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	0a5b      	lsrs	r3, r3, #9
 8010f4c:	68fa      	ldr	r2, [r7, #12]
 8010f4e:	8952      	ldrh	r2, [r2, #10]
 8010f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	1d1a      	adds	r2, r3, #4
 8010f5a:	613a      	str	r2, [r7, #16]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d101      	bne.n	8010f6a <clmt_clust+0x3a>
 8010f66:	2300      	movs	r3, #0
 8010f68:	e010      	b.n	8010f8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d307      	bcc.n	8010f82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010f72:	697a      	ldr	r2, [r7, #20]
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	617b      	str	r3, [r7, #20]
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	3304      	adds	r3, #4
 8010f7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f80:	e7e9      	b.n	8010f56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010f82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	4413      	add	r3, r2
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	371c      	adds	r7, #28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010fae:	d204      	bcs.n	8010fba <dir_sdi+0x22>
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	f003 031f 	and.w	r3, r3, #31
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <dir_sdi+0x26>
		return FR_INT_ERR;
 8010fba:	2302      	movs	r3, #2
 8010fbc:	e063      	b.n	8011086 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	683a      	ldr	r2, [r7, #0]
 8010fc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d106      	bne.n	8010fde <dir_sdi+0x46>
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d902      	bls.n	8010fde <dir_sdi+0x46>
		clst = fs->dirbase;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fdc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d10c      	bne.n	8010ffe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	095b      	lsrs	r3, r3, #5
 8010fe8:	693a      	ldr	r2, [r7, #16]
 8010fea:	8912      	ldrh	r2, [r2, #8]
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d301      	bcc.n	8010ff4 <dir_sdi+0x5c>
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	e048      	b.n	8011086 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	61da      	str	r2, [r3, #28]
 8010ffc:	e029      	b.n	8011052 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	895b      	ldrh	r3, [r3, #10]
 8011002:	025b      	lsls	r3, r3, #9
 8011004:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011006:	e019      	b.n	801103c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6979      	ldr	r1, [r7, #20]
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff fd06 	bl	8010a1e <get_fat>
 8011012:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801101a:	d101      	bne.n	8011020 <dir_sdi+0x88>
 801101c:	2301      	movs	r3, #1
 801101e:	e032      	b.n	8011086 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d904      	bls.n	8011030 <dir_sdi+0x98>
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	699b      	ldr	r3, [r3, #24]
 801102a:	697a      	ldr	r2, [r7, #20]
 801102c:	429a      	cmp	r2, r3
 801102e:	d301      	bcc.n	8011034 <dir_sdi+0x9c>
 8011030:	2302      	movs	r3, #2
 8011032:	e028      	b.n	8011086 <dir_sdi+0xee>
			ofs -= csz;
 8011034:	683a      	ldr	r2, [r7, #0]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	429a      	cmp	r2, r3
 8011042:	d2e1      	bcs.n	8011008 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011044:	6979      	ldr	r1, [r7, #20]
 8011046:	6938      	ldr	r0, [r7, #16]
 8011048:	f7ff fcca 	bl	80109e0 <clust2sect>
 801104c:	4602      	mov	r2, r0
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	69db      	ldr	r3, [r3, #28]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <dir_sdi+0xcc>
 8011060:	2302      	movs	r3, #2
 8011062:	e010      	b.n	8011086 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	69da      	ldr	r2, [r3, #28]
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	0a5b      	lsrs	r3, r3, #9
 801106c:	441a      	add	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801107e:	441a      	add	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3718      	adds	r7, #24
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	b086      	sub	sp, #24
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
 8011096:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	695b      	ldr	r3, [r3, #20]
 80110a2:	3320      	adds	r3, #32
 80110a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	69db      	ldr	r3, [r3, #28]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d003      	beq.n	80110b6 <dir_next+0x28>
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80110b4:	d301      	bcc.n	80110ba <dir_next+0x2c>
 80110b6:	2304      	movs	r3, #4
 80110b8:	e0aa      	b.n	8011210 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f040 8098 	bne.w	80111f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	69db      	ldr	r3, [r3, #28]
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	699b      	ldr	r3, [r3, #24]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10b      	bne.n	80110f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	095b      	lsrs	r3, r3, #5
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	8912      	ldrh	r2, [r2, #8]
 80110e0:	4293      	cmp	r3, r2
 80110e2:	f0c0 8088 	bcc.w	80111f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2200      	movs	r2, #0
 80110ea:	61da      	str	r2, [r3, #28]
 80110ec:	2304      	movs	r3, #4
 80110ee:	e08f      	b.n	8011210 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	0a5b      	lsrs	r3, r3, #9
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	8952      	ldrh	r2, [r2, #10]
 80110f8:	3a01      	subs	r2, #1
 80110fa:	4013      	ands	r3, r2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d17a      	bne.n	80111f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	4619      	mov	r1, r3
 8011108:	4610      	mov	r0, r2
 801110a:	f7ff fc88 	bl	8010a1e <get_fat>
 801110e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d801      	bhi.n	801111a <dir_next+0x8c>
 8011116:	2302      	movs	r3, #2
 8011118:	e07a      	b.n	8011210 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011120:	d101      	bne.n	8011126 <dir_next+0x98>
 8011122:	2301      	movs	r3, #1
 8011124:	e074      	b.n	8011210 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	699b      	ldr	r3, [r3, #24]
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	429a      	cmp	r2, r3
 801112e:	d358      	bcc.n	80111e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d104      	bne.n	8011140 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	61da      	str	r2, [r3, #28]
 801113c:	2304      	movs	r3, #4
 801113e:	e067      	b.n	8011210 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	699b      	ldr	r3, [r3, #24]
 8011146:	4619      	mov	r1, r3
 8011148:	4610      	mov	r0, r2
 801114a:	f7ff fe59 	bl	8010e00 <create_chain>
 801114e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d101      	bne.n	801115a <dir_next+0xcc>
 8011156:	2307      	movs	r3, #7
 8011158:	e05a      	b.n	8011210 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d101      	bne.n	8011164 <dir_next+0xd6>
 8011160:	2302      	movs	r3, #2
 8011162:	e055      	b.n	8011210 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801116a:	d101      	bne.n	8011170 <dir_next+0xe2>
 801116c:	2301      	movs	r3, #1
 801116e:	e04f      	b.n	8011210 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f7ff fb55 	bl	8010820 <sync_window>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <dir_next+0xf2>
 801117c:	2301      	movs	r3, #1
 801117e:	e047      	b.n	8011210 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	3334      	adds	r3, #52	; 0x34
 8011184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011188:	2100      	movs	r1, #0
 801118a:	4618      	mov	r0, r3
 801118c:	f7ff f94f 	bl	801042e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011190:	2300      	movs	r3, #0
 8011192:	613b      	str	r3, [r7, #16]
 8011194:	6979      	ldr	r1, [r7, #20]
 8011196:	68f8      	ldr	r0, [r7, #12]
 8011198:	f7ff fc22 	bl	80109e0 <clust2sect>
 801119c:	4602      	mov	r2, r0
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	631a      	str	r2, [r3, #48]	; 0x30
 80111a2:	e012      	b.n	80111ca <dir_next+0x13c>
						fs->wflag = 1;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2201      	movs	r2, #1
 80111a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f7ff fb38 	bl	8010820 <sync_window>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d001      	beq.n	80111ba <dir_next+0x12c>
 80111b6:	2301      	movs	r3, #1
 80111b8:	e02a      	b.n	8011210 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	3301      	adds	r3, #1
 80111be:	613b      	str	r3, [r7, #16]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c4:	1c5a      	adds	r2, r3, #1
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	631a      	str	r2, [r3, #48]	; 0x30
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	895b      	ldrh	r3, [r3, #10]
 80111ce:	461a      	mov	r2, r3
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d3e6      	bcc.n	80111a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	1ad2      	subs	r2, r2, r3
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80111e8:	6979      	ldr	r1, [r7, #20]
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f7ff fbf8 	bl	80109e0 <clust2sect>
 80111f0:	4602      	mov	r2, r0
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	68ba      	ldr	r2, [r7, #8]
 80111fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011208:	441a      	add	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3718      	adds	r7, #24
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011228:	2100      	movs	r1, #0
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff feb4 	bl	8010f98 <dir_sdi>
 8011230:	4603      	mov	r3, r0
 8011232:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d12b      	bne.n	8011292 <dir_alloc+0x7a>
		n = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	69db      	ldr	r3, [r3, #28]
 8011242:	4619      	mov	r1, r3
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7ff fb2f 	bl	80108a8 <move_window>
 801124a:	4603      	mov	r3, r0
 801124c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d11d      	bne.n	8011290 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6a1b      	ldr	r3, [r3, #32]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	2be5      	cmp	r3, #229	; 0xe5
 801125c:	d004      	beq.n	8011268 <dir_alloc+0x50>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d107      	bne.n	8011278 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	3301      	adds	r3, #1
 801126c:	613b      	str	r3, [r7, #16]
 801126e:	693a      	ldr	r2, [r7, #16]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d102      	bne.n	801127c <dir_alloc+0x64>
 8011276:	e00c      	b.n	8011292 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011278:	2300      	movs	r3, #0
 801127a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801127c:	2101      	movs	r1, #1
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff ff05 	bl	801108e <dir_next>
 8011284:	4603      	mov	r3, r0
 8011286:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011288:	7dfb      	ldrb	r3, [r7, #23]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0d7      	beq.n	801123e <dir_alloc+0x26>
 801128e:	e000      	b.n	8011292 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011290:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011292:	7dfb      	ldrb	r3, [r7, #23]
 8011294:	2b04      	cmp	r3, #4
 8011296:	d101      	bne.n	801129c <dir_alloc+0x84>
 8011298:	2307      	movs	r3, #7
 801129a:	75fb      	strb	r3, [r7, #23]
	return res;
 801129c:	7dfb      	ldrb	r3, [r7, #23]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
 80112ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	331a      	adds	r3, #26
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff f817 	bl	80102e8 <ld_word>
 80112ba:	4603      	mov	r3, r0
 80112bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d109      	bne.n	80112da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	3314      	adds	r3, #20
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7ff f80c 	bl	80102e8 <ld_word>
 80112d0:	4603      	mov	r3, r0
 80112d2:	041b      	lsls	r3, r3, #16
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80112da:	68fb      	ldr	r3, [r7, #12]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	331a      	adds	r3, #26
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	b292      	uxth	r2, r2
 80112f8:	4611      	mov	r1, r2
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff f82f 	bl	801035e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b03      	cmp	r3, #3
 8011306:	d109      	bne.n	801131c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	f103 0214 	add.w	r2, r3, #20
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	0c1b      	lsrs	r3, r3, #16
 8011312:	b29b      	uxth	r3, r3
 8011314:	4619      	mov	r1, r3
 8011316:	4610      	mov	r0, r2
 8011318:	f7ff f821 	bl	801035e <st_word>
	}
}
 801131c:	bf00      	nop
 801131e:	3710      	adds	r7, #16
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b086      	sub	sp, #24
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801132e:	2304      	movs	r3, #4
 8011330:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011338:	e03c      	b.n	80113b4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	69db      	ldr	r3, [r3, #28]
 801133e:	4619      	mov	r1, r3
 8011340:	6938      	ldr	r0, [r7, #16]
 8011342:	f7ff fab1 	bl	80108a8 <move_window>
 8011346:	4603      	mov	r3, r0
 8011348:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801134a:	7dfb      	ldrb	r3, [r7, #23]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d136      	bne.n	80113be <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a1b      	ldr	r3, [r3, #32]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d102      	bne.n	8011364 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801135e:	2304      	movs	r3, #4
 8011360:	75fb      	strb	r3, [r7, #23]
 8011362:	e031      	b.n	80113c8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a1b      	ldr	r3, [r3, #32]
 8011368:	330b      	adds	r3, #11
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011370:	73bb      	strb	r3, [r7, #14]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	7bba      	ldrb	r2, [r7, #14]
 8011376:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011378:	7bfb      	ldrb	r3, [r7, #15]
 801137a:	2be5      	cmp	r3, #229	; 0xe5
 801137c:	d011      	beq.n	80113a2 <dir_read+0x7e>
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b2e      	cmp	r3, #46	; 0x2e
 8011382:	d00e      	beq.n	80113a2 <dir_read+0x7e>
 8011384:	7bbb      	ldrb	r3, [r7, #14]
 8011386:	2b0f      	cmp	r3, #15
 8011388:	d00b      	beq.n	80113a2 <dir_read+0x7e>
 801138a:	7bbb      	ldrb	r3, [r7, #14]
 801138c:	f023 0320 	bic.w	r3, r3, #32
 8011390:	2b08      	cmp	r3, #8
 8011392:	bf0c      	ite	eq
 8011394:	2301      	moveq	r3, #1
 8011396:	2300      	movne	r3, #0
 8011398:	b2db      	uxtb	r3, r3
 801139a:	461a      	mov	r2, r3
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	4293      	cmp	r3, r2
 80113a0:	d00f      	beq.n	80113c2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80113a2:	2100      	movs	r1, #0
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7ff fe72 	bl	801108e <dir_next>
 80113aa:	4603      	mov	r3, r0
 80113ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d108      	bne.n	80113c6 <dir_read+0xa2>
	while (dp->sect) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	69db      	ldr	r3, [r3, #28]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1be      	bne.n	801133a <dir_read+0x16>
 80113bc:	e004      	b.n	80113c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80113be:	bf00      	nop
 80113c0:	e002      	b.n	80113c8 <dir_read+0xa4>
				break;
 80113c2:	bf00      	nop
 80113c4:	e000      	b.n	80113c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80113c6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80113c8:	7dfb      	ldrb	r3, [r7, #23]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <dir_read+0xb0>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2200      	movs	r2, #0
 80113d2:	61da      	str	r2, [r3, #28]
	return res;
 80113d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3718      	adds	r7, #24
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b086      	sub	sp, #24
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80113ec:	2100      	movs	r1, #0
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff fdd2 	bl	8010f98 <dir_sdi>
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80113f8:	7dfb      	ldrb	r3, [r7, #23]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <dir_find+0x24>
 80113fe:	7dfb      	ldrb	r3, [r7, #23]
 8011400:	e03e      	b.n	8011480 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	69db      	ldr	r3, [r3, #28]
 8011406:	4619      	mov	r1, r3
 8011408:	6938      	ldr	r0, [r7, #16]
 801140a:	f7ff fa4d 	bl	80108a8 <move_window>
 801140e:	4603      	mov	r3, r0
 8011410:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d12f      	bne.n	8011478 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6a1b      	ldr	r3, [r3, #32]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d102      	bne.n	801142c <dir_find+0x4e>
 8011426:	2304      	movs	r3, #4
 8011428:	75fb      	strb	r3, [r7, #23]
 801142a:	e028      	b.n	801147e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6a1b      	ldr	r3, [r3, #32]
 8011430:	330b      	adds	r3, #11
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011438:	b2da      	uxtb	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a1b      	ldr	r3, [r3, #32]
 8011442:	330b      	adds	r3, #11
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 0308 	and.w	r3, r3, #8
 801144a:	2b00      	cmp	r3, #0
 801144c:	d10a      	bne.n	8011464 <dir_find+0x86>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a18      	ldr	r0, [r3, #32]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	3324      	adds	r3, #36	; 0x24
 8011456:	220b      	movs	r2, #11
 8011458:	4619      	mov	r1, r3
 801145a:	f7ff f802 	bl	8010462 <mem_cmp>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d00b      	beq.n	801147c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011464:	2100      	movs	r1, #0
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7ff fe11 	bl	801108e <dir_next>
 801146c:	4603      	mov	r3, r0
 801146e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011470:	7dfb      	ldrb	r3, [r7, #23]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d0c5      	beq.n	8011402 <dir_find+0x24>
 8011476:	e002      	b.n	801147e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011478:	bf00      	nop
 801147a:	e000      	b.n	801147e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801147c:	bf00      	nop

	return res;
 801147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011480:	4618      	mov	r0, r3
 8011482:	3718      	adds	r7, #24
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011496:	2101      	movs	r1, #1
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7ff febd 	bl	8011218 <dir_alloc>
 801149e:	4603      	mov	r3, r0
 80114a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80114a2:	7bfb      	ldrb	r3, [r7, #15]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d11c      	bne.n	80114e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	69db      	ldr	r3, [r3, #28]
 80114ac:	4619      	mov	r1, r3
 80114ae:	68b8      	ldr	r0, [r7, #8]
 80114b0:	f7ff f9fa 	bl	80108a8 <move_window>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d111      	bne.n	80114e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6a1b      	ldr	r3, [r3, #32]
 80114c2:	2220      	movs	r2, #32
 80114c4:	2100      	movs	r1, #0
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fe ffb1 	bl	801042e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6a18      	ldr	r0, [r3, #32]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3324      	adds	r3, #36	; 0x24
 80114d4:	220b      	movs	r2, #11
 80114d6:	4619      	mov	r1, r3
 80114d8:	f7fe ff88 	bl	80103ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	2201      	movs	r2, #1
 80114e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80114e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	2200      	movs	r2, #0
 80114fa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	69db      	ldr	r3, [r3, #28]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d04e      	beq.n	80115a2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011504:	2300      	movs	r3, #0
 8011506:	613b      	str	r3, [r7, #16]
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801150c:	e021      	b.n	8011552 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a1a      	ldr	r2, [r3, #32]
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	1c59      	adds	r1, r3, #1
 8011516:	6179      	str	r1, [r7, #20]
 8011518:	4413      	add	r3, r2
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801151e:	7bfb      	ldrb	r3, [r7, #15]
 8011520:	2b20      	cmp	r3, #32
 8011522:	d100      	bne.n	8011526 <get_fileinfo+0x3a>
 8011524:	e015      	b.n	8011552 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011526:	7bfb      	ldrb	r3, [r7, #15]
 8011528:	2b05      	cmp	r3, #5
 801152a:	d101      	bne.n	8011530 <get_fileinfo+0x44>
 801152c:	23e5      	movs	r3, #229	; 0xe5
 801152e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	2b09      	cmp	r3, #9
 8011534:	d106      	bne.n	8011544 <get_fileinfo+0x58>
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	613a      	str	r2, [r7, #16]
 801153c:	683a      	ldr	r2, [r7, #0]
 801153e:	4413      	add	r3, r2
 8011540:	222e      	movs	r2, #46	; 0x2e
 8011542:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	1c5a      	adds	r2, r3, #1
 8011548:	613a      	str	r2, [r7, #16]
 801154a:	683a      	ldr	r2, [r7, #0]
 801154c:	4413      	add	r3, r2
 801154e:	7bfa      	ldrb	r2, [r7, #15]
 8011550:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	2b0a      	cmp	r3, #10
 8011556:	d9da      	bls.n	801150e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8011558:	683a      	ldr	r2, [r7, #0]
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	4413      	add	r3, r2
 801155e:	3309      	adds	r3, #9
 8011560:	2200      	movs	r2, #0
 8011562:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a1b      	ldr	r3, [r3, #32]
 8011568:	7ada      	ldrb	r2, [r3, #11]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a1b      	ldr	r3, [r3, #32]
 8011572:	331c      	adds	r3, #28
 8011574:	4618      	mov	r0, r3
 8011576:	f7fe fecf 	bl	8010318 <ld_dword>
 801157a:	4602      	mov	r2, r0
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a1b      	ldr	r3, [r3, #32]
 8011584:	3316      	adds	r3, #22
 8011586:	4618      	mov	r0, r3
 8011588:	f7fe fec6 	bl	8010318 <ld_dword>
 801158c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	b29a      	uxth	r2, r3
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	80da      	strh	r2, [r3, #6]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	0c1b      	lsrs	r3, r3, #16
 801159a:	b29a      	uxth	r2, r3
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	809a      	strh	r2, [r3, #4]
 80115a0:	e000      	b.n	80115a4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80115a2:	bf00      	nop
}
 80115a4:	3718      	adds	r7, #24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
	...

080115ac <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b085      	sub	sp, #20
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	1c59      	adds	r1, r3, #1
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	6011      	str	r1, [r2, #0]
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80115c2:	89fb      	ldrh	r3, [r7, #14]
 80115c4:	2b60      	cmp	r3, #96	; 0x60
 80115c6:	d905      	bls.n	80115d4 <get_achar+0x28>
 80115c8:	89fb      	ldrh	r3, [r7, #14]
 80115ca:	2b7a      	cmp	r3, #122	; 0x7a
 80115cc:	d802      	bhi.n	80115d4 <get_achar+0x28>
 80115ce:	89fb      	ldrh	r3, [r7, #14]
 80115d0:	3b20      	subs	r3, #32
 80115d2:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80115d4:	89fb      	ldrh	r3, [r7, #14]
 80115d6:	2b7f      	cmp	r3, #127	; 0x7f
 80115d8:	d904      	bls.n	80115e4 <get_achar+0x38>
 80115da:	89fb      	ldrh	r3, [r7, #14]
 80115dc:	3b80      	subs	r3, #128	; 0x80
 80115de:	4a05      	ldr	r2, [pc, #20]	; (80115f4 <get_achar+0x48>)
 80115e0:	5cd3      	ldrb	r3, [r2, r3]
 80115e2:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80115e4:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3714      	adds	r7, #20
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop
 80115f4:	0801ab74 	.word	0x0801ab74

080115f8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08a      	sub	sp, #40	; 0x28
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8011606:	e009      	b.n	801161c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8011608:	f107 0308 	add.w	r3, r7, #8
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff ffcd 	bl	80115ac <get_achar>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d101      	bne.n	801161c <pattern_matching+0x24>
 8011618:	2300      	movs	r3, #0
 801161a:	e064      	b.n	80116e6 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	1e5a      	subs	r2, r3, #1
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1f0      	bne.n	8011608 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d104      	bne.n	8011638 <pattern_matching+0x40>
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <pattern_matching+0x40>
 8011634:	2301      	movs	r3, #1
 8011636:	e056      	b.n	80116e6 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	617b      	str	r3, [r7, #20]
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b3f      	cmp	r3, #63	; 0x3f
 8011646:	d003      	beq.n	8011650 <pattern_matching+0x58>
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	2b2a      	cmp	r3, #42	; 0x2a
 801164e:	d126      	bne.n	801169e <pattern_matching+0xa6>
				nm = nx = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	1c5a      	adds	r2, r3, #1
 801165c:	617a      	str	r2, [r7, #20]
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	2b3f      	cmp	r3, #63	; 0x3f
 8011662:	d103      	bne.n	801166c <pattern_matching+0x74>
 8011664:	6a3b      	ldr	r3, [r7, #32]
 8011666:	3301      	adds	r3, #1
 8011668:	623b      	str	r3, [r7, #32]
 801166a:	e001      	b.n	8011670 <pattern_matching+0x78>
 801166c:	2301      	movs	r3, #1
 801166e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	2b3f      	cmp	r3, #63	; 0x3f
 8011676:	d0ef      	beq.n	8011658 <pattern_matching+0x60>
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	2b2a      	cmp	r3, #42	; 0x2a
 801167e:	d0eb      	beq.n	8011658 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8011680:	6978      	ldr	r0, [r7, #20]
 8011682:	6939      	ldr	r1, [r7, #16]
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	6a3a      	ldr	r2, [r7, #32]
 8011688:	f7ff ffb6 	bl	80115f8 <pattern_matching>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d001      	beq.n	8011696 <pattern_matching+0x9e>
 8011692:	2301      	movs	r3, #1
 8011694:	e027      	b.n	80116e6 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801169c:	e017      	b.n	80116ce <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801169e:	f107 0314 	add.w	r3, r7, #20
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ff ff82 	bl	80115ac <get_achar>
 80116a8:	4603      	mov	r3, r0
 80116aa:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80116ac:	f107 0310 	add.w	r3, r7, #16
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff ff7b 	bl	80115ac <get_achar>
 80116b6:	4603      	mov	r3, r0
 80116b8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80116ba:	8b7a      	ldrh	r2, [r7, #26]
 80116bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116be:	429a      	cmp	r2, r3
 80116c0:	d104      	bne.n	80116cc <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80116c2:	8b7b      	ldrh	r3, [r7, #26]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d1bb      	bne.n	8011640 <pattern_matching+0x48>
 80116c8:	2301      	movs	r3, #1
 80116ca:	e00c      	b.n	80116e6 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80116cc:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80116ce:	f107 0308 	add.w	r3, r7, #8
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7ff ff6a 	bl	80115ac <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d002      	beq.n	80116e4 <pattern_matching+0xec>
 80116de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1a9      	bne.n	8011638 <pattern_matching+0x40>

	return 0;
 80116e4:	2300      	movs	r3, #0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3728      	adds	r7, #40	; 0x28
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b088      	sub	sp, #32
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	60fb      	str	r3, [r7, #12]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3324      	adds	r3, #36	; 0x24
 8011704:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011706:	220b      	movs	r2, #11
 8011708:	2120      	movs	r1, #32
 801170a:	68b8      	ldr	r0, [r7, #8]
 801170c:	f7fe fe8f 	bl	801042e <mem_set>
	si = i = 0; ni = 8;
 8011710:	2300      	movs	r3, #0
 8011712:	613b      	str	r3, [r7, #16]
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	617b      	str	r3, [r7, #20]
 8011718:	2308      	movs	r3, #8
 801171a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	617a      	str	r2, [r7, #20]
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	4413      	add	r3, r2
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801172a:	7ffb      	ldrb	r3, [r7, #31]
 801172c:	2b20      	cmp	r3, #32
 801172e:	d94e      	bls.n	80117ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011730:	7ffb      	ldrb	r3, [r7, #31]
 8011732:	2b2f      	cmp	r3, #47	; 0x2f
 8011734:	d006      	beq.n	8011744 <create_name+0x54>
 8011736:	7ffb      	ldrb	r3, [r7, #31]
 8011738:	2b5c      	cmp	r3, #92	; 0x5c
 801173a:	d110      	bne.n	801175e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801173c:	e002      	b.n	8011744 <create_name+0x54>
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	3301      	adds	r3, #1
 8011742:	617b      	str	r3, [r7, #20]
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	4413      	add	r3, r2
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	2b2f      	cmp	r3, #47	; 0x2f
 801174e:	d0f6      	beq.n	801173e <create_name+0x4e>
 8011750:	68fa      	ldr	r2, [r7, #12]
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	4413      	add	r3, r2
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	2b5c      	cmp	r3, #92	; 0x5c
 801175a:	d0f0      	beq.n	801173e <create_name+0x4e>
			break;
 801175c:	e038      	b.n	80117d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801175e:	7ffb      	ldrb	r3, [r7, #31]
 8011760:	2b2e      	cmp	r3, #46	; 0x2e
 8011762:	d003      	beq.n	801176c <create_name+0x7c>
 8011764:	693a      	ldr	r2, [r7, #16]
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	429a      	cmp	r2, r3
 801176a:	d30c      	bcc.n	8011786 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	2b0b      	cmp	r3, #11
 8011770:	d002      	beq.n	8011778 <create_name+0x88>
 8011772:	7ffb      	ldrb	r3, [r7, #31]
 8011774:	2b2e      	cmp	r3, #46	; 0x2e
 8011776:	d001      	beq.n	801177c <create_name+0x8c>
 8011778:	2306      	movs	r3, #6
 801177a:	e044      	b.n	8011806 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801177c:	2308      	movs	r3, #8
 801177e:	613b      	str	r3, [r7, #16]
 8011780:	230b      	movs	r3, #11
 8011782:	61bb      	str	r3, [r7, #24]
			continue;
 8011784:	e022      	b.n	80117cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011786:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801178a:	2b00      	cmp	r3, #0
 801178c:	da04      	bge.n	8011798 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801178e:	7ffb      	ldrb	r3, [r7, #31]
 8011790:	3b80      	subs	r3, #128	; 0x80
 8011792:	4a1f      	ldr	r2, [pc, #124]	; (8011810 <create_name+0x120>)
 8011794:	5cd3      	ldrb	r3, [r2, r3]
 8011796:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011798:	7ffb      	ldrb	r3, [r7, #31]
 801179a:	4619      	mov	r1, r3
 801179c:	481d      	ldr	r0, [pc, #116]	; (8011814 <create_name+0x124>)
 801179e:	f7fe fe87 	bl	80104b0 <chk_chr>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <create_name+0xbc>
 80117a8:	2306      	movs	r3, #6
 80117aa:	e02c      	b.n	8011806 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80117ac:	7ffb      	ldrb	r3, [r7, #31]
 80117ae:	2b60      	cmp	r3, #96	; 0x60
 80117b0:	d905      	bls.n	80117be <create_name+0xce>
 80117b2:	7ffb      	ldrb	r3, [r7, #31]
 80117b4:	2b7a      	cmp	r3, #122	; 0x7a
 80117b6:	d802      	bhi.n	80117be <create_name+0xce>
 80117b8:	7ffb      	ldrb	r3, [r7, #31]
 80117ba:	3b20      	subs	r3, #32
 80117bc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	613a      	str	r2, [r7, #16]
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	4413      	add	r3, r2
 80117c8:	7ffa      	ldrb	r2, [r7, #31]
 80117ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80117cc:	e7a6      	b.n	801171c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80117ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	441a      	add	r2, r3
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <create_name+0xf4>
 80117e0:	2306      	movs	r3, #6
 80117e2:	e010      	b.n	8011806 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	2be5      	cmp	r3, #229	; 0xe5
 80117ea:	d102      	bne.n	80117f2 <create_name+0x102>
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	2205      	movs	r2, #5
 80117f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80117f2:	7ffb      	ldrb	r3, [r7, #31]
 80117f4:	2b20      	cmp	r3, #32
 80117f6:	d801      	bhi.n	80117fc <create_name+0x10c>
 80117f8:	2204      	movs	r2, #4
 80117fa:	e000      	b.n	80117fe <create_name+0x10e>
 80117fc:	2200      	movs	r2, #0
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	330b      	adds	r3, #11
 8011802:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011804:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011806:	4618      	mov	r0, r3
 8011808:	3720      	adds	r7, #32
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	0801ab74 	.word	0x0801ab74
 8011814:	0801a978 	.word	0x0801a978

08011818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801182c:	e002      	b.n	8011834 <follow_path+0x1c>
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	3301      	adds	r3, #1
 8011832:	603b      	str	r3, [r7, #0]
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	2b2f      	cmp	r3, #47	; 0x2f
 801183a:	d0f8      	beq.n	801182e <follow_path+0x16>
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	2b5c      	cmp	r3, #92	; 0x5c
 8011842:	d0f4      	beq.n	801182e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	2200      	movs	r2, #0
 8011848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	2b1f      	cmp	r3, #31
 8011850:	d80a      	bhi.n	8011868 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2280      	movs	r2, #128	; 0x80
 8011856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801185a:	2100      	movs	r1, #0
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7ff fb9b 	bl	8010f98 <dir_sdi>
 8011862:	4603      	mov	r3, r0
 8011864:	75fb      	strb	r3, [r7, #23]
 8011866:	e043      	b.n	80118f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011868:	463b      	mov	r3, r7
 801186a:	4619      	mov	r1, r3
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f7ff ff3f 	bl	80116f0 <create_name>
 8011872:	4603      	mov	r3, r0
 8011874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011876:	7dfb      	ldrb	r3, [r7, #23]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d134      	bne.n	80118e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7ff fdae 	bl	80113de <dir_find>
 8011882:	4603      	mov	r3, r0
 8011884:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801188c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801188e:	7dfb      	ldrb	r3, [r7, #23]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00a      	beq.n	80118aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011894:	7dfb      	ldrb	r3, [r7, #23]
 8011896:	2b04      	cmp	r3, #4
 8011898:	d127      	bne.n	80118ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801189a:	7afb      	ldrb	r3, [r7, #11]
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d122      	bne.n	80118ea <follow_path+0xd2>
 80118a4:	2305      	movs	r3, #5
 80118a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80118a8:	e01f      	b.n	80118ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80118aa:	7afb      	ldrb	r3, [r7, #11]
 80118ac:	f003 0304 	and.w	r3, r3, #4
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d11c      	bne.n	80118ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	799b      	ldrb	r3, [r3, #6]
 80118b8:	f003 0310 	and.w	r3, r3, #16
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d102      	bne.n	80118c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80118c0:	2305      	movs	r3, #5
 80118c2:	75fb      	strb	r3, [r7, #23]
 80118c4:	e014      	b.n	80118f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118d4:	4413      	add	r3, r2
 80118d6:	4619      	mov	r1, r3
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f7ff fce4 	bl	80112a6 <ld_clust>
 80118de:	4602      	mov	r2, r0
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80118e4:	e7c0      	b.n	8011868 <follow_path+0x50>
			if (res != FR_OK) break;
 80118e6:	bf00      	nop
 80118e8:	e002      	b.n	80118f0 <follow_path+0xd8>
				break;
 80118ea:	bf00      	nop
 80118ec:	e000      	b.n	80118f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80118ee:	bf00      	nop
			}
		}
	}

	return res;
 80118f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3718      	adds	r7, #24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80118fa:	b480      	push	{r7}
 80118fc:	b087      	sub	sp, #28
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011902:	f04f 33ff 	mov.w	r3, #4294967295
 8011906:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d031      	beq.n	8011974 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	617b      	str	r3, [r7, #20]
 8011916:	e002      	b.n	801191e <get_ldnumber+0x24>
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	3301      	adds	r3, #1
 801191c:	617b      	str	r3, [r7, #20]
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	2b20      	cmp	r3, #32
 8011924:	d903      	bls.n	801192e <get_ldnumber+0x34>
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	2b3a      	cmp	r3, #58	; 0x3a
 801192c:	d1f4      	bne.n	8011918 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b3a      	cmp	r3, #58	; 0x3a
 8011934:	d11c      	bne.n	8011970 <get_ldnumber+0x76>
			tp = *path;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	1c5a      	adds	r2, r3, #1
 8011940:	60fa      	str	r2, [r7, #12]
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	3b30      	subs	r3, #48	; 0x30
 8011946:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	2b09      	cmp	r3, #9
 801194c:	d80e      	bhi.n	801196c <get_ldnumber+0x72>
 801194e:	68fa      	ldr	r2, [r7, #12]
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	429a      	cmp	r2, r3
 8011954:	d10a      	bne.n	801196c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d107      	bne.n	801196c <get_ldnumber+0x72>
					vol = (int)i;
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	3301      	adds	r3, #1
 8011964:	617b      	str	r3, [r7, #20]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	697a      	ldr	r2, [r7, #20]
 801196a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	e002      	b.n	8011976 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011970:	2300      	movs	r3, #0
 8011972:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011974:	693b      	ldr	r3, [r7, #16]
}
 8011976:	4618      	mov	r0, r3
 8011978:	371c      	adds	r7, #28
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
	...

08011984 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2200      	movs	r2, #0
 8011992:	70da      	strb	r2, [r3, #3]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f04f 32ff 	mov.w	r2, #4294967295
 801199a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f7fe ff82 	bl	80108a8 <move_window>
 80119a4:	4603      	mov	r3, r0
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d001      	beq.n	80119ae <check_fs+0x2a>
 80119aa:	2304      	movs	r3, #4
 80119ac:	e038      	b.n	8011a20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	3334      	adds	r3, #52	; 0x34
 80119b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fe fc96 	bl	80102e8 <ld_word>
 80119bc:	4603      	mov	r3, r0
 80119be:	461a      	mov	r2, r3
 80119c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d001      	beq.n	80119cc <check_fs+0x48>
 80119c8:	2303      	movs	r3, #3
 80119ca:	e029      	b.n	8011a20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119d2:	2be9      	cmp	r3, #233	; 0xe9
 80119d4:	d009      	beq.n	80119ea <check_fs+0x66>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119dc:	2beb      	cmp	r3, #235	; 0xeb
 80119de:	d11e      	bne.n	8011a1e <check_fs+0x9a>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80119e6:	2b90      	cmp	r3, #144	; 0x90
 80119e8:	d119      	bne.n	8011a1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	3334      	adds	r3, #52	; 0x34
 80119ee:	3336      	adds	r3, #54	; 0x36
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fe fc91 	bl	8010318 <ld_dword>
 80119f6:	4603      	mov	r3, r0
 80119f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80119fc:	4a0a      	ldr	r2, [pc, #40]	; (8011a28 <check_fs+0xa4>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d101      	bne.n	8011a06 <check_fs+0x82>
 8011a02:	2300      	movs	r3, #0
 8011a04:	e00c      	b.n	8011a20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	3334      	adds	r3, #52	; 0x34
 8011a0a:	3352      	adds	r3, #82	; 0x52
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe fc83 	bl	8010318 <ld_dword>
 8011a12:	4602      	mov	r2, r0
 8011a14:	4b05      	ldr	r3, [pc, #20]	; (8011a2c <check_fs+0xa8>)
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d101      	bne.n	8011a1e <check_fs+0x9a>
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	e000      	b.n	8011a20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011a1e:	2302      	movs	r3, #2
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	00544146 	.word	0x00544146
 8011a2c:	33544146 	.word	0x33544146

08011a30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b096      	sub	sp, #88	; 0x58
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2200      	movs	r2, #0
 8011a42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f7ff ff58 	bl	80118fa <get_ldnumber>
 8011a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	da01      	bge.n	8011a56 <find_volume+0x26>
 8011a52:	230b      	movs	r3, #11
 8011a54:	e236      	b.n	8011ec4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011a56:	4aac      	ldr	r2, [pc, #688]	; (8011d08 <find_volume+0x2d8>)
 8011a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d101      	bne.n	8011a6a <find_volume+0x3a>
 8011a66:	230c      	movs	r3, #12
 8011a68:	e22c      	b.n	8011ec4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8011a6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a6c:	f7fe fd3b 	bl	80104e6 <lock_fs>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d101      	bne.n	8011a7a <find_volume+0x4a>
 8011a76:	230f      	movs	r3, #15
 8011a78:	e224      	b.n	8011ec4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011a80:	79fb      	ldrb	r3, [r7, #7]
 8011a82:	f023 0301 	bic.w	r3, r3, #1
 8011a86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01a      	beq.n	8011ac6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	785b      	ldrb	r3, [r3, #1]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fb89 	bl	80101ac <disk_status>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10c      	bne.n	8011ac6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011aac:	79fb      	ldrb	r3, [r7, #7]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d007      	beq.n	8011ac2 <find_volume+0x92>
 8011ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab6:	f003 0304 	and.w	r3, r3, #4
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8011abe:	230a      	movs	r3, #10
 8011ac0:	e200      	b.n	8011ec4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e1fe      	b.n	8011ec4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac8:	2200      	movs	r2, #0
 8011aca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	785b      	ldrb	r3, [r3, #1]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fe fb81 	bl	80101e0 <disk_initialize>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ae8:	f003 0301 	and.w	r3, r3, #1
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011af0:	2303      	movs	r3, #3
 8011af2:	e1e7      	b.n	8011ec4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011af4:	79fb      	ldrb	r3, [r7, #7]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d007      	beq.n	8011b0a <find_volume+0xda>
 8011afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011afe:	f003 0304 	and.w	r3, r3, #4
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d001      	beq.n	8011b0a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011b06:	230a      	movs	r3, #10
 8011b08:	e1dc      	b.n	8011ec4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011b0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b12:	f7ff ff37 	bl	8011984 <check_fs>
 8011b16:	4603      	mov	r3, r0
 8011b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d14b      	bne.n	8011bbc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b24:	2300      	movs	r3, #0
 8011b26:	643b      	str	r3, [r7, #64]	; 0x40
 8011b28:	e01f      	b.n	8011b6a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b32:	011b      	lsls	r3, r3, #4
 8011b34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011b38:	4413      	add	r3, r2
 8011b3a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3e:	3304      	adds	r3, #4
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d006      	beq.n	8011b54 <find_volume+0x124>
 8011b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b48:	3308      	adds	r3, #8
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe fbe4 	bl	8010318 <ld_dword>
 8011b50:	4602      	mov	r2, r0
 8011b52:	e000      	b.n	8011b56 <find_volume+0x126>
 8011b54:	2200      	movs	r2, #0
 8011b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011b5e:	440b      	add	r3, r1
 8011b60:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b66:	3301      	adds	r3, #1
 8011b68:	643b      	str	r3, [r7, #64]	; 0x40
 8011b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b6c:	2b03      	cmp	r3, #3
 8011b6e:	d9dc      	bls.n	8011b2a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011b70:	2300      	movs	r3, #0
 8011b72:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d002      	beq.n	8011b80 <find_volume+0x150>
 8011b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011b88:	4413      	add	r3, r2
 8011b8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011b8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d005      	beq.n	8011ba2 <find_volume+0x172>
 8011b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b9a:	f7ff fef3 	bl	8011984 <check_fs>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	e000      	b.n	8011ba4 <find_volume+0x174>
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d905      	bls.n	8011bbc <find_volume+0x18c>
 8011bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8011bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	d9e1      	bls.n	8011b80 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bc0:	2b04      	cmp	r3, #4
 8011bc2:	d101      	bne.n	8011bc8 <find_volume+0x198>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e17d      	b.n	8011ec4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d901      	bls.n	8011bd4 <find_volume+0x1a4>
 8011bd0:	230d      	movs	r3, #13
 8011bd2:	e177      	b.n	8011ec4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	3334      	adds	r3, #52	; 0x34
 8011bd8:	330b      	adds	r3, #11
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe fb84 	bl	80102e8 <ld_word>
 8011be0:	4603      	mov	r3, r0
 8011be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011be6:	d001      	beq.n	8011bec <find_volume+0x1bc>
 8011be8:	230d      	movs	r3, #13
 8011bea:	e16b      	b.n	8011ec4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bee:	3334      	adds	r3, #52	; 0x34
 8011bf0:	3316      	adds	r3, #22
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fe fb78 	bl	80102e8 <ld_word>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <find_volume+0x1e0>
 8011c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c04:	3334      	adds	r3, #52	; 0x34
 8011c06:	3324      	adds	r3, #36	; 0x24
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fe fb85 	bl	8010318 <ld_dword>
 8011c0e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c14:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	789b      	ldrb	r3, [r3, #2]
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d005      	beq.n	8011c34 <find_volume+0x204>
 8011c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2a:	789b      	ldrb	r3, [r3, #2]
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d001      	beq.n	8011c34 <find_volume+0x204>
 8011c30:	230d      	movs	r3, #13
 8011c32:	e147      	b.n	8011ec4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	789b      	ldrb	r3, [r3, #2]
 8011c38:	461a      	mov	r2, r3
 8011c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c3c:	fb02 f303 	mul.w	r3, r2, r3
 8011c40:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	895b      	ldrh	r3, [r3, #10]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d008      	beq.n	8011c68 <find_volume+0x238>
 8011c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c58:	895b      	ldrh	r3, [r3, #10]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5e:	895b      	ldrh	r3, [r3, #10]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	4013      	ands	r3, r2
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d001      	beq.n	8011c6c <find_volume+0x23c>
 8011c68:	230d      	movs	r3, #13
 8011c6a:	e12b      	b.n	8011ec4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	3334      	adds	r3, #52	; 0x34
 8011c70:	3311      	adds	r3, #17
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fe fb38 	bl	80102e8 <ld_word>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	891b      	ldrh	r3, [r3, #8]
 8011c84:	f003 030f 	and.w	r3, r3, #15
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <find_volume+0x262>
 8011c8e:	230d      	movs	r3, #13
 8011c90:	e118      	b.n	8011ec4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c94:	3334      	adds	r3, #52	; 0x34
 8011c96:	3313      	adds	r3, #19
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fe fb25 	bl	80102e8 <ld_word>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d106      	bne.n	8011cb6 <find_volume+0x286>
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	3334      	adds	r3, #52	; 0x34
 8011cac:	3320      	adds	r3, #32
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fe fb32 	bl	8010318 <ld_dword>
 8011cb4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb8:	3334      	adds	r3, #52	; 0x34
 8011cba:	330e      	adds	r3, #14
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fe fb13 	bl	80102e8 <ld_word>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d101      	bne.n	8011cd0 <find_volume+0x2a0>
 8011ccc:	230d      	movs	r3, #13
 8011cce:	e0f9      	b.n	8011ec4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011cd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cd4:	4413      	add	r3, r2
 8011cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cd8:	8912      	ldrh	r2, [r2, #8]
 8011cda:	0912      	lsrs	r2, r2, #4
 8011cdc:	b292      	uxth	r2, r2
 8011cde:	4413      	add	r3, r2
 8011ce0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d201      	bcs.n	8011cee <find_volume+0x2be>
 8011cea:	230d      	movs	r3, #13
 8011cec:	e0ea      	b.n	8011ec4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf2:	1ad3      	subs	r3, r2, r3
 8011cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cf6:	8952      	ldrh	r2, [r2, #10]
 8011cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cfc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <find_volume+0x2dc>
 8011d04:	230d      	movs	r3, #13
 8011d06:	e0dd      	b.n	8011ec4 <find_volume+0x494>
 8011d08:	2000043c 	.word	0x2000043c
		fmt = FS_FAT32;
 8011d0c:	2303      	movs	r3, #3
 8011d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d802      	bhi.n	8011d22 <find_volume+0x2f2>
 8011d1c:	2302      	movs	r3, #2
 8011d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d24:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d802      	bhi.n	8011d32 <find_volume+0x302>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	1c9a      	adds	r2, r3, #2
 8011d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d38:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d3e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011d40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d44:	441a      	add	r2, r3
 8011d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d48:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4e:	441a      	add	r2, r3
 8011d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d52:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d58:	2b03      	cmp	r3, #3
 8011d5a:	d11e      	bne.n	8011d9a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5e:	3334      	adds	r3, #52	; 0x34
 8011d60:	332a      	adds	r3, #42	; 0x2a
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fe fac0 	bl	80102e8 <ld_word>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <find_volume+0x342>
 8011d6e:	230d      	movs	r3, #13
 8011d70:	e0a8      	b.n	8011ec4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	891b      	ldrh	r3, [r3, #8]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d001      	beq.n	8011d7e <find_volume+0x34e>
 8011d7a:	230d      	movs	r3, #13
 8011d7c:	e0a2      	b.n	8011ec4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d80:	3334      	adds	r3, #52	; 0x34
 8011d82:	332c      	adds	r3, #44	; 0x2c
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fe fac7 	bl	8010318 <ld_dword>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d92:	699b      	ldr	r3, [r3, #24]
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	647b      	str	r3, [r7, #68]	; 0x44
 8011d98:	e01f      	b.n	8011dda <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <find_volume+0x376>
 8011da2:	230d      	movs	r3, #13
 8011da4:	e08e      	b.n	8011ec4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dac:	441a      	add	r2, r3
 8011dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011db2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d103      	bne.n	8011dc2 <find_volume+0x392>
 8011dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbc:	699b      	ldr	r3, [r3, #24]
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	e00a      	b.n	8011dd8 <find_volume+0x3a8>
 8011dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc4:	699a      	ldr	r2, [r3, #24]
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	4413      	add	r3, r2
 8011dcc:	085a      	lsrs	r2, r3, #1
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	699b      	ldr	r3, [r3, #24]
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011dd8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ddc:	69da      	ldr	r2, [r3, #28]
 8011dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011de0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011de4:	0a5b      	lsrs	r3, r3, #9
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d201      	bcs.n	8011dee <find_volume+0x3be>
 8011dea:	230d      	movs	r3, #13
 8011dec:	e06a      	b.n	8011ec4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df0:	f04f 32ff 	mov.w	r2, #4294967295
 8011df4:	615a      	str	r2, [r3, #20]
 8011df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df8:	695a      	ldr	r2, [r3, #20]
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e00:	2280      	movs	r2, #128	; 0x80
 8011e02:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d149      	bne.n	8011ea0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0e:	3334      	adds	r3, #52	; 0x34
 8011e10:	3330      	adds	r3, #48	; 0x30
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fe fa68 	bl	80102e8 <ld_word>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d140      	bne.n	8011ea0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e20:	3301      	adds	r3, #1
 8011e22:	4619      	mov	r1, r3
 8011e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e26:	f7fe fd3f 	bl	80108a8 <move_window>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d137      	bne.n	8011ea0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	2200      	movs	r2, #0
 8011e34:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e38:	3334      	adds	r3, #52	; 0x34
 8011e3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe fa52 	bl	80102e8 <ld_word>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461a      	mov	r2, r3
 8011e48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d127      	bne.n	8011ea0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	3334      	adds	r3, #52	; 0x34
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fe fa5f 	bl	8010318 <ld_dword>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ecc <find_volume+0x49c>)
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d11e      	bne.n	8011ea0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	3334      	adds	r3, #52	; 0x34
 8011e66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe fa54 	bl	8010318 <ld_dword>
 8011e70:	4602      	mov	r2, r0
 8011e72:	4b17      	ldr	r3, [pc, #92]	; (8011ed0 <find_volume+0x4a0>)
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d113      	bne.n	8011ea0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	3334      	adds	r3, #52	; 0x34
 8011e7c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fe fa49 	bl	8010318 <ld_dword>
 8011e86:	4602      	mov	r2, r0
 8011e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8e:	3334      	adds	r3, #52	; 0x34
 8011e90:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fe fa3f 	bl	8010318 <ld_dword>
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011ea6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011ea8:	4b0a      	ldr	r3, [pc, #40]	; (8011ed4 <find_volume+0x4a4>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	3301      	adds	r3, #1
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	4b08      	ldr	r3, [pc, #32]	; (8011ed4 <find_volume+0x4a4>)
 8011eb2:	801a      	strh	r2, [r3, #0]
 8011eb4:	4b07      	ldr	r3, [pc, #28]	; (8011ed4 <find_volume+0x4a4>)
 8011eb6:	881a      	ldrh	r2, [r3, #0]
 8011eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011ebc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ebe:	f7fe fc8b 	bl	80107d8 <clear_lock>
#endif
	return FR_OK;
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3758      	adds	r7, #88	; 0x58
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	41615252 	.word	0x41615252
 8011ed0:	61417272 	.word	0x61417272
 8011ed4:	20000440 	.word	0x20000440

08011ed8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011ee2:	2309      	movs	r3, #9
 8011ee4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d02e      	beq.n	8011f4a <validate+0x72>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d02a      	beq.n	8011f4a <validate+0x72>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d025      	beq.n	8011f4a <validate+0x72>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	889a      	ldrh	r2, [r3, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	88db      	ldrh	r3, [r3, #6]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d11e      	bne.n	8011f4a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe fae8 	bl	80104e6 <lock_fs>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d014      	beq.n	8011f46 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	785b      	ldrb	r3, [r3, #1]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe f942 	bl	80101ac <disk_status>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	f003 0301 	and.w	r3, r3, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d102      	bne.n	8011f38 <validate+0x60>
				res = FR_OK;
 8011f32:	2300      	movs	r3, #0
 8011f34:	73fb      	strb	r3, [r7, #15]
 8011f36:	e008      	b.n	8011f4a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fe fae7 	bl	8010512 <unlock_fs>
 8011f44:	e001      	b.n	8011f4a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011f46:	230f      	movs	r3, #15
 8011f48:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011f4a:	7bfb      	ldrb	r3, [r7, #15]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d102      	bne.n	8011f56 <validate+0x7e>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	e000      	b.n	8011f58 <validate+0x80>
 8011f56:	2300      	movs	r3, #0
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	6013      	str	r3, [r2, #0]
	return res;
 8011f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
	...

08011f68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b088      	sub	sp, #32
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4613      	mov	r3, r2
 8011f74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011f7a:	f107 0310 	add.w	r3, r7, #16
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7ff fcbb 	bl	80118fa <get_ldnumber>
 8011f84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	da01      	bge.n	8011f90 <f_mount+0x28>
 8011f8c:	230b      	movs	r3, #11
 8011f8e:	e048      	b.n	8012022 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011f90:	4a26      	ldr	r2, [pc, #152]	; (801202c <f_mount+0xc4>)
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011f9a:	69bb      	ldr	r3, [r7, #24]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00f      	beq.n	8011fc0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011fa0:	69b8      	ldr	r0, [r7, #24]
 8011fa2:	f7fe fc19 	bl	80107d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f001 f828 	bl	8013000 <ff_del_syncobj>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d101      	bne.n	8011fba <f_mount+0x52>
 8011fb6:	2302      	movs	r3, #2
 8011fb8:	e033      	b.n	8012022 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00f      	beq.n	8011fe6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	330c      	adds	r3, #12
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	f000 fff7 	bl	8012fca <ff_cre_syncobj>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d101      	bne.n	8011fe6 <f_mount+0x7e>
 8011fe2:	2302      	movs	r3, #2
 8011fe4:	e01d      	b.n	8012022 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	4910      	ldr	r1, [pc, #64]	; (801202c <f_mount+0xc4>)
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <f_mount+0x94>
 8011ff6:	79fb      	ldrb	r3, [r7, #7]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d001      	beq.n	8012000 <f_mount+0x98>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	e010      	b.n	8012022 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012000:	f107 010c 	add.w	r1, r7, #12
 8012004:	f107 0308 	add.w	r3, r7, #8
 8012008:	2200      	movs	r2, #0
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fd10 	bl	8011a30 <find_volume>
 8012010:	4603      	mov	r3, r0
 8012012:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	7dfa      	ldrb	r2, [r7, #23]
 8012018:	4611      	mov	r1, r2
 801201a:	4618      	mov	r0, r3
 801201c:	f7fe fa79 	bl	8010512 <unlock_fs>
 8012020:	7dfb      	ldrb	r3, [r7, #23]
}
 8012022:	4618      	mov	r0, r3
 8012024:	3720      	adds	r7, #32
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	2000043c 	.word	0x2000043c

08012030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b09a      	sub	sp, #104	; 0x68
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	4613      	mov	r3, r2
 801203c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d101      	bne.n	8012048 <f_open+0x18>
 8012044:	2309      	movs	r3, #9
 8012046:	e1b4      	b.n	80123b2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801204e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012050:	79fa      	ldrb	r2, [r7, #7]
 8012052:	f107 0114 	add.w	r1, r7, #20
 8012056:	f107 0308 	add.w	r3, r7, #8
 801205a:	4618      	mov	r0, r3
 801205c:	f7ff fce8 	bl	8011a30 <find_volume>
 8012060:	4603      	mov	r3, r0
 8012062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012066:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801206a:	2b00      	cmp	r3, #0
 801206c:	f040 8191 	bne.w	8012392 <f_open+0x362>
		dj.obj.fs = fs;
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	f107 0318 	add.w	r3, r7, #24
 801207a:	4611      	mov	r1, r2
 801207c:	4618      	mov	r0, r3
 801207e:	f7ff fbcb 	bl	8011818 <follow_path>
 8012082:	4603      	mov	r3, r0
 8012084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801208c:	2b00      	cmp	r3, #0
 801208e:	d11a      	bne.n	80120c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012094:	b25b      	sxtb	r3, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	da03      	bge.n	80120a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801209a:	2306      	movs	r3, #6
 801209c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80120a0:	e011      	b.n	80120c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80120a2:	79fb      	ldrb	r3, [r7, #7]
 80120a4:	f023 0301 	bic.w	r3, r3, #1
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	bf14      	ite	ne
 80120ac:	2301      	movne	r3, #1
 80120ae:	2300      	moveq	r3, #0
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	461a      	mov	r2, r3
 80120b4:	f107 0318 	add.w	r3, r7, #24
 80120b8:	4611      	mov	r1, r2
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fa44 	bl	8010548 <chk_lock>
 80120c0:	4603      	mov	r3, r0
 80120c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80120c6:	79fb      	ldrb	r3, [r7, #7]
 80120c8:	f003 031c 	and.w	r3, r3, #28
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d07f      	beq.n	80121d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80120d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d017      	beq.n	8012108 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80120d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80120dc:	2b04      	cmp	r3, #4
 80120de:	d10e      	bne.n	80120fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80120e0:	f7fe fa8e 	bl	8010600 <enq_lock>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d006      	beq.n	80120f8 <f_open+0xc8>
 80120ea:	f107 0318 	add.w	r3, r7, #24
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7ff f9ca 	bl	8011488 <dir_register>
 80120f4:	4603      	mov	r3, r0
 80120f6:	e000      	b.n	80120fa <f_open+0xca>
 80120f8:	2312      	movs	r3, #18
 80120fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80120fe:	79fb      	ldrb	r3, [r7, #7]
 8012100:	f043 0308 	orr.w	r3, r3, #8
 8012104:	71fb      	strb	r3, [r7, #7]
 8012106:	e010      	b.n	801212a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012108:	7fbb      	ldrb	r3, [r7, #30]
 801210a:	f003 0311 	and.w	r3, r3, #17
 801210e:	2b00      	cmp	r3, #0
 8012110:	d003      	beq.n	801211a <f_open+0xea>
					res = FR_DENIED;
 8012112:	2307      	movs	r3, #7
 8012114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012118:	e007      	b.n	801212a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801211a:	79fb      	ldrb	r3, [r7, #7]
 801211c:	f003 0304 	and.w	r3, r3, #4
 8012120:	2b00      	cmp	r3, #0
 8012122:	d002      	beq.n	801212a <f_open+0xfa>
 8012124:	2308      	movs	r3, #8
 8012126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801212a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801212e:	2b00      	cmp	r3, #0
 8012130:	d168      	bne.n	8012204 <f_open+0x1d4>
 8012132:	79fb      	ldrb	r3, [r7, #7]
 8012134:	f003 0308 	and.w	r3, r3, #8
 8012138:	2b00      	cmp	r3, #0
 801213a:	d063      	beq.n	8012204 <f_open+0x1d4>
				dw = GET_FATTIME();
 801213c:	f7fc f9e4 	bl	800e508 <get_fattime>
 8012140:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012144:	330e      	adds	r3, #14
 8012146:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012148:	4618      	mov	r0, r3
 801214a:	f7fe f923 	bl	8010394 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012150:	3316      	adds	r3, #22
 8012152:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012154:	4618      	mov	r0, r3
 8012156:	f7fe f91d 	bl	8010394 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215c:	330b      	adds	r3, #11
 801215e:	2220      	movs	r2, #32
 8012160:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012166:	4611      	mov	r1, r2
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff f89c 	bl	80112a6 <ld_clust>
 801216e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012174:	2200      	movs	r2, #0
 8012176:	4618      	mov	r0, r3
 8012178:	f7ff f8b4 	bl	80112e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217e:	331c      	adds	r3, #28
 8012180:	2100      	movs	r1, #0
 8012182:	4618      	mov	r0, r3
 8012184:	f7fe f906 	bl	8010394 <st_dword>
					fs->wflag = 1;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	2201      	movs	r2, #1
 801218c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012190:	2b00      	cmp	r3, #0
 8012192:	d037      	beq.n	8012204 <f_open+0x1d4>
						dw = fs->winsect;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012198:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801219a:	f107 0318 	add.w	r3, r7, #24
 801219e:	2200      	movs	r2, #0
 80121a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fe fdc7 	bl	8010d36 <remove_chain>
 80121a8:	4603      	mov	r3, r0
 80121aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80121ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d126      	bne.n	8012204 <f_open+0x1d4>
							res = move_window(fs, dw);
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fe fb74 	bl	80108a8 <move_window>
 80121c0:	4603      	mov	r3, r0
 80121c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80121ca:	3a01      	subs	r2, #1
 80121cc:	611a      	str	r2, [r3, #16]
 80121ce:	e019      	b.n	8012204 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80121d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d115      	bne.n	8012204 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80121d8:	7fbb      	ldrb	r3, [r7, #30]
 80121da:	f003 0310 	and.w	r3, r3, #16
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d003      	beq.n	80121ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80121e2:	2304      	movs	r3, #4
 80121e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80121e8:	e00c      	b.n	8012204 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80121ea:	79fb      	ldrb	r3, [r7, #7]
 80121ec:	f003 0302 	and.w	r3, r3, #2
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d007      	beq.n	8012204 <f_open+0x1d4>
 80121f4:	7fbb      	ldrb	r3, [r7, #30]
 80121f6:	f003 0301 	and.w	r3, r3, #1
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d002      	beq.n	8012204 <f_open+0x1d4>
						res = FR_DENIED;
 80121fe:	2307      	movs	r3, #7
 8012200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012208:	2b00      	cmp	r3, #0
 801220a:	d128      	bne.n	801225e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801220c:	79fb      	ldrb	r3, [r7, #7]
 801220e:	f003 0308 	and.w	r3, r3, #8
 8012212:	2b00      	cmp	r3, #0
 8012214:	d003      	beq.n	801221e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012216:	79fb      	ldrb	r3, [r7, #7]
 8012218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801221c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801222c:	79fb      	ldrb	r3, [r7, #7]
 801222e:	f023 0301 	bic.w	r3, r3, #1
 8012232:	2b00      	cmp	r3, #0
 8012234:	bf14      	ite	ne
 8012236:	2301      	movne	r3, #1
 8012238:	2300      	moveq	r3, #0
 801223a:	b2db      	uxtb	r3, r3
 801223c:	461a      	mov	r2, r3
 801223e:	f107 0318 	add.w	r3, r7, #24
 8012242:	4611      	mov	r1, r2
 8012244:	4618      	mov	r0, r3
 8012246:	f7fe f9fd 	bl	8010644 <inc_lock>
 801224a:	4602      	mov	r2, r0
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	691b      	ldr	r3, [r3, #16]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d102      	bne.n	801225e <f_open+0x22e>
 8012258:	2302      	movs	r3, #2
 801225a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801225e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012262:	2b00      	cmp	r3, #0
 8012264:	f040 8095 	bne.w	8012392 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801226c:	4611      	mov	r1, r2
 801226e:	4618      	mov	r0, r3
 8012270:	f7ff f819 	bl	80112a6 <ld_clust>
 8012274:	4602      	mov	r2, r0
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227c:	331c      	adds	r3, #28
 801227e:	4618      	mov	r0, r3
 8012280:	f7fe f84a 	bl	8010318 <ld_dword>
 8012284:	4602      	mov	r2, r0
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2200      	movs	r2, #0
 801228e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012290:	697a      	ldr	r2, [r7, #20]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	88da      	ldrh	r2, [r3, #6]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	79fa      	ldrb	r2, [r7, #7]
 80122a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2200      	movs	r2, #0
 80122a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2200      	movs	r2, #0
 80122b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	3330      	adds	r3, #48	; 0x30
 80122ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122be:	2100      	movs	r1, #0
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fe f8b4 	bl	801042e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	f003 0320 	and.w	r3, r3, #32
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d060      	beq.n	8012392 <f_open+0x362>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d05c      	beq.n	8012392 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	68da      	ldr	r2, [r3, #12]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	895b      	ldrh	r3, [r3, #10]
 80122e4:	025b      	lsls	r3, r3, #9
 80122e6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122f4:	e016      	b.n	8012324 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fe fb8f 	bl	8010a1e <get_fat>
 8012300:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012304:	2b01      	cmp	r3, #1
 8012306:	d802      	bhi.n	801230e <f_open+0x2de>
 8012308:	2302      	movs	r3, #2
 801230a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d102      	bne.n	801231c <f_open+0x2ec>
 8012316:	2301      	movs	r3, #1
 8012318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801231c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801231e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012328:	2b00      	cmp	r3, #0
 801232a:	d103      	bne.n	8012334 <f_open+0x304>
 801232c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801232e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012330:	429a      	cmp	r2, r3
 8012332:	d8e0      	bhi.n	80122f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012338:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801233a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801233e:	2b00      	cmp	r3, #0
 8012340:	d127      	bne.n	8012392 <f_open+0x362>
 8012342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012348:	2b00      	cmp	r3, #0
 801234a:	d022      	beq.n	8012392 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fb45 	bl	80109e0 <clust2sect>
 8012356:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235a:	2b00      	cmp	r3, #0
 801235c:	d103      	bne.n	8012366 <f_open+0x336>
						res = FR_INT_ERR;
 801235e:	2302      	movs	r3, #2
 8012360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012364:	e015      	b.n	8012392 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012368:	0a5a      	lsrs	r2, r3, #9
 801236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236c:	441a      	add	r2, r3
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	7858      	ldrb	r0, [r3, #1]
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6a1a      	ldr	r2, [r3, #32]
 8012380:	2301      	movs	r3, #1
 8012382:	f7fd ff53 	bl	801022c <disk_read>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <f_open+0x362>
 801238c:	2301      	movs	r3, #1
 801238e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012396:	2b00      	cmp	r3, #0
 8012398:	d002      	beq.n	80123a0 <f_open+0x370>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2200      	movs	r2, #0
 801239e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80123a6:	4611      	mov	r1, r2
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fe f8b2 	bl	8010512 <unlock_fs>
 80123ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3768      	adds	r7, #104	; 0x68
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b08c      	sub	sp, #48	; 0x30
 80123be:	af00      	add	r7, sp, #0
 80123c0:	60f8      	str	r0, [r7, #12]
 80123c2:	60b9      	str	r1, [r7, #8]
 80123c4:	607a      	str	r2, [r7, #4]
 80123c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	2200      	movs	r2, #0
 80123d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f107 0210 	add.w	r2, r7, #16
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fd7c 	bl	8011ed8 <validate>
 80123e0:	4603      	mov	r3, r0
 80123e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80123e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d107      	bne.n	80123fe <f_write+0x44>
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	7d5b      	ldrb	r3, [r3, #21]
 80123f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80123f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d009      	beq.n	8012412 <f_write+0x58>
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe f883 	bl	8010512 <unlock_fs>
 801240c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012410:	e173      	b.n	80126fa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	7d1b      	ldrb	r3, [r3, #20]
 8012416:	f003 0302 	and.w	r3, r3, #2
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <f_write+0x72>
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	2107      	movs	r1, #7
 8012422:	4618      	mov	r0, r3
 8012424:	f7fe f875 	bl	8010512 <unlock_fs>
 8012428:	2307      	movs	r3, #7
 801242a:	e166      	b.n	80126fa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	699a      	ldr	r2, [r3, #24]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	441a      	add	r2, r3
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	429a      	cmp	r2, r3
 801243a:	f080 814b 	bcs.w	80126d4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	43db      	mvns	r3, r3
 8012444:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012446:	e145      	b.n	80126d4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012450:	2b00      	cmp	r3, #0
 8012452:	f040 8101 	bne.w	8012658 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	699b      	ldr	r3, [r3, #24]
 801245a:	0a5b      	lsrs	r3, r3, #9
 801245c:	693a      	ldr	r2, [r7, #16]
 801245e:	8952      	ldrh	r2, [r2, #10]
 8012460:	3a01      	subs	r2, #1
 8012462:	4013      	ands	r3, r2
 8012464:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d14d      	bne.n	8012508 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	699b      	ldr	r3, [r3, #24]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10c      	bne.n	801248e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247c:	2b00      	cmp	r3, #0
 801247e:	d11a      	bne.n	80124b6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2100      	movs	r1, #0
 8012484:	4618      	mov	r0, r3
 8012486:	f7fe fcbb 	bl	8010e00 <create_chain>
 801248a:	62b8      	str	r0, [r7, #40]	; 0x28
 801248c:	e013      	b.n	80124b6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012492:	2b00      	cmp	r3, #0
 8012494:	d007      	beq.n	80124a6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	699b      	ldr	r3, [r3, #24]
 801249a:	4619      	mov	r1, r3
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f7fe fd47 	bl	8010f30 <clmt_clust>
 80124a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80124a4:	e007      	b.n	80124b6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	69db      	ldr	r3, [r3, #28]
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fe fca6 	bl	8010e00 <create_chain>
 80124b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80124b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f000 8110 	beq.w	80126de <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80124be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d109      	bne.n	80124d8 <f_write+0x11e>
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2202      	movs	r2, #2
 80124c8:	755a      	strb	r2, [r3, #21]
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	2102      	movs	r1, #2
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fe f81f 	bl	8010512 <unlock_fs>
 80124d4:	2302      	movs	r3, #2
 80124d6:	e110      	b.n	80126fa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124de:	d109      	bne.n	80124f4 <f_write+0x13a>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2201      	movs	r2, #1
 80124e4:	755a      	strb	r2, [r3, #21]
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	2101      	movs	r1, #1
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fe f811 	bl	8010512 <unlock_fs>
 80124f0:	2301      	movs	r3, #1
 80124f2:	e102      	b.n	80126fa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	689b      	ldr	r3, [r3, #8]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d102      	bne.n	8012508 <f_write+0x14e>
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012506:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	7d1b      	ldrb	r3, [r3, #20]
 801250c:	b25b      	sxtb	r3, r3
 801250e:	2b00      	cmp	r3, #0
 8012510:	da1d      	bge.n	801254e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	7858      	ldrb	r0, [r3, #1]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6a1a      	ldr	r2, [r3, #32]
 8012520:	2301      	movs	r3, #1
 8012522:	f7fd fea3 	bl	801026c <disk_write>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d009      	beq.n	8012540 <f_write+0x186>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2201      	movs	r2, #1
 8012530:	755a      	strb	r2, [r3, #21]
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	2101      	movs	r1, #1
 8012536:	4618      	mov	r0, r3
 8012538:	f7fd ffeb 	bl	8010512 <unlock_fs>
 801253c:	2301      	movs	r3, #1
 801253e:	e0dc      	b.n	80126fa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	7d1b      	ldrb	r3, [r3, #20]
 8012544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012548:	b2da      	uxtb	r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801254e:	693a      	ldr	r2, [r7, #16]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	69db      	ldr	r3, [r3, #28]
 8012554:	4619      	mov	r1, r3
 8012556:	4610      	mov	r0, r2
 8012558:	f7fe fa42 	bl	80109e0 <clust2sect>
 801255c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d109      	bne.n	8012578 <f_write+0x1be>
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2202      	movs	r2, #2
 8012568:	755a      	strb	r2, [r3, #21]
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	2102      	movs	r1, #2
 801256e:	4618      	mov	r0, r3
 8012570:	f7fd ffcf 	bl	8010512 <unlock_fs>
 8012574:	2302      	movs	r3, #2
 8012576:	e0c0      	b.n	80126fa <f_write+0x340>
			sect += csect;
 8012578:	697a      	ldr	r2, [r7, #20]
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	4413      	add	r3, r2
 801257e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	0a5b      	lsrs	r3, r3, #9
 8012584:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012586:	6a3b      	ldr	r3, [r7, #32]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d041      	beq.n	8012610 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801258c:	69ba      	ldr	r2, [r7, #24]
 801258e:	6a3b      	ldr	r3, [r7, #32]
 8012590:	4413      	add	r3, r2
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	8952      	ldrh	r2, [r2, #10]
 8012596:	4293      	cmp	r3, r2
 8012598:	d905      	bls.n	80125a6 <f_write+0x1ec>
					cc = fs->csize - csect;
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	895b      	ldrh	r3, [r3, #10]
 801259e:	461a      	mov	r2, r3
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	7858      	ldrb	r0, [r3, #1]
 80125aa:	6a3b      	ldr	r3, [r7, #32]
 80125ac:	697a      	ldr	r2, [r7, #20]
 80125ae:	69f9      	ldr	r1, [r7, #28]
 80125b0:	f7fd fe5c 	bl	801026c <disk_write>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d009      	beq.n	80125ce <f_write+0x214>
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2201      	movs	r2, #1
 80125be:	755a      	strb	r2, [r3, #21]
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	2101      	movs	r1, #1
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fd ffa4 	bl	8010512 <unlock_fs>
 80125ca:	2301      	movs	r3, #1
 80125cc:	e095      	b.n	80126fa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	6a1a      	ldr	r2, [r3, #32]
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	1ad3      	subs	r3, r2, r3
 80125d6:	6a3a      	ldr	r2, [r7, #32]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d915      	bls.n	8012608 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	6a1a      	ldr	r2, [r3, #32]
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	025b      	lsls	r3, r3, #9
 80125ec:	69fa      	ldr	r2, [r7, #28]
 80125ee:	4413      	add	r3, r2
 80125f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80125f4:	4619      	mov	r1, r3
 80125f6:	f7fd fef9 	bl	80103ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	7d1b      	ldrb	r3, [r3, #20]
 80125fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012602:	b2da      	uxtb	r2, r3
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012608:	6a3b      	ldr	r3, [r7, #32]
 801260a:	025b      	lsls	r3, r3, #9
 801260c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801260e:	e044      	b.n	801269a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6a1b      	ldr	r3, [r3, #32]
 8012614:	697a      	ldr	r2, [r7, #20]
 8012616:	429a      	cmp	r2, r3
 8012618:	d01b      	beq.n	8012652 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	699a      	ldr	r2, [r3, #24]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012622:	429a      	cmp	r2, r3
 8012624:	d215      	bcs.n	8012652 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	7858      	ldrb	r0, [r3, #1]
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012630:	2301      	movs	r3, #1
 8012632:	697a      	ldr	r2, [r7, #20]
 8012634:	f7fd fdfa 	bl	801022c <disk_read>
 8012638:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801263a:	2b00      	cmp	r3, #0
 801263c:	d009      	beq.n	8012652 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2201      	movs	r2, #1
 8012642:	755a      	strb	r2, [r3, #21]
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	2101      	movs	r1, #1
 8012648:	4618      	mov	r0, r3
 801264a:	f7fd ff62 	bl	8010512 <unlock_fs>
 801264e:	2301      	movs	r3, #1
 8012650:	e053      	b.n	80126fa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	697a      	ldr	r2, [r7, #20]
 8012656:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	699b      	ldr	r3, [r3, #24]
 801265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012660:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012664:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	429a      	cmp	r2, r3
 801266c:	d901      	bls.n	8012672 <f_write+0x2b8>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	699b      	ldr	r3, [r3, #24]
 801267c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012680:	4413      	add	r3, r2
 8012682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012684:	69f9      	ldr	r1, [r7, #28]
 8012686:	4618      	mov	r0, r3
 8012688:	f7fd feb0 	bl	80103ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7d1b      	ldrb	r3, [r3, #20]
 8012690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012694:	b2da      	uxtb	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269e:	4413      	add	r3, r2
 80126a0:	61fb      	str	r3, [r7, #28]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	699a      	ldr	r2, [r3, #24]
 80126a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a8:	441a      	add	r2, r3
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	619a      	str	r2, [r3, #24]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68da      	ldr	r2, [r3, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	699b      	ldr	r3, [r3, #24]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	bf38      	it	cc
 80126ba:	461a      	movcc	r2, r3
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	60da      	str	r2, [r3, #12]
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	441a      	add	r2, r3
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f47f aeb6 	bne.w	8012448 <f_write+0x8e>
 80126dc:	e000      	b.n	80126e0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80126de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	7d1b      	ldrb	r3, [r3, #20]
 80126e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	2100      	movs	r1, #0
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fd ff0d 	bl	8010512 <unlock_fs>
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3730      	adds	r7, #48	; 0x30
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b086      	sub	sp, #24
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f107 0208 	add.w	r2, r7, #8
 8012710:	4611      	mov	r1, r2
 8012712:	4618      	mov	r0, r3
 8012714:	f7ff fbe0 	bl	8011ed8 <validate>
 8012718:	4603      	mov	r3, r0
 801271a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801271c:	7dfb      	ldrb	r3, [r7, #23]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d16d      	bne.n	80127fe <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	7d1b      	ldrb	r3, [r3, #20]
 8012726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801272a:	2b00      	cmp	r3, #0
 801272c:	d067      	beq.n	80127fe <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	7d1b      	ldrb	r3, [r3, #20]
 8012732:	b25b      	sxtb	r3, r3
 8012734:	2b00      	cmp	r3, #0
 8012736:	da1a      	bge.n	801276e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	7858      	ldrb	r0, [r3, #1]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6a1a      	ldr	r2, [r3, #32]
 8012746:	2301      	movs	r3, #1
 8012748:	f7fd fd90 	bl	801026c <disk_write>
 801274c:	4603      	mov	r3, r0
 801274e:	2b00      	cmp	r3, #0
 8012750:	d006      	beq.n	8012760 <f_sync+0x5e>
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	2101      	movs	r1, #1
 8012756:	4618      	mov	r0, r3
 8012758:	f7fd fedb 	bl	8010512 <unlock_fs>
 801275c:	2301      	movs	r3, #1
 801275e:	e055      	b.n	801280c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012768:	b2da      	uxtb	r2, r3
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801276e:	f7fb fecb 	bl	800e508 <get_fattime>
 8012772:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801277a:	4619      	mov	r1, r3
 801277c:	4610      	mov	r0, r2
 801277e:	f7fe f893 	bl	80108a8 <move_window>
 8012782:	4603      	mov	r3, r0
 8012784:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d138      	bne.n	80127fe <f_sync+0xfc>
					dir = fp->dir_ptr;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012790:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	330b      	adds	r3, #11
 8012796:	781a      	ldrb	r2, [r3, #0]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	330b      	adds	r3, #11
 801279c:	f042 0220 	orr.w	r2, r2, #32
 80127a0:	b2d2      	uxtb	r2, r2
 80127a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6818      	ldr	r0, [r3, #0]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	461a      	mov	r2, r3
 80127ae:	68f9      	ldr	r1, [r7, #12]
 80127b0:	f7fe fd98 	bl	80112e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f103 021c 	add.w	r2, r3, #28
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	4619      	mov	r1, r3
 80127c0:	4610      	mov	r0, r2
 80127c2:	f7fd fde7 	bl	8010394 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	3316      	adds	r3, #22
 80127ca:	6939      	ldr	r1, [r7, #16]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fd fde1 	bl	8010394 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	3312      	adds	r3, #18
 80127d6:	2100      	movs	r1, #0
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fd fdc0 	bl	801035e <st_word>
					fs->wflag = 1;
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	2201      	movs	r2, #1
 80127e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fe f88c 	bl	8010904 <sync_fs>
 80127ec:	4603      	mov	r3, r0
 80127ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
 80127f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127f8:	b2da      	uxtb	r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	7dfa      	ldrb	r2, [r7, #23]
 8012802:	4611      	mov	r1, r2
 8012804:	4618      	mov	r0, r3
 8012806:	f7fd fe84 	bl	8010512 <unlock_fs>
 801280a:	7dfb      	ldrb	r3, [r7, #23]
}
 801280c:	4618      	mov	r0, r3
 801280e:	3718      	adds	r7, #24
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b090      	sub	sp, #64	; 0x40
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f107 0208 	add.w	r2, r7, #8
 8012824:	4611      	mov	r1, r2
 8012826:	4618      	mov	r0, r3
 8012828:	f7ff fb56 	bl	8011ed8 <validate>
 801282c:	4603      	mov	r3, r0
 801282e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012836:	2b00      	cmp	r3, #0
 8012838:	d103      	bne.n	8012842 <f_lseek+0x2e>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	7d5b      	ldrb	r3, [r3, #21]
 801283e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012842:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012846:	2b00      	cmp	r3, #0
 8012848:	d009      	beq.n	801285e <f_lseek+0x4a>
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fe5d 	bl	8010512 <unlock_fs>
 8012858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801285c:	e229      	b.n	8012cb2 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012862:	2b00      	cmp	r3, #0
 8012864:	f000 80ea 	beq.w	8012a3c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801286e:	d164      	bne.n	801293a <f_lseek+0x126>
			tbl = fp->cltbl;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012874:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	1d1a      	adds	r2, r3, #4
 801287a:	627a      	str	r2, [r7, #36]	; 0x24
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	617b      	str	r3, [r7, #20]
 8012880:	2302      	movs	r3, #2
 8012882:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	689b      	ldr	r3, [r3, #8]
 8012888:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	2b00      	cmp	r3, #0
 801288e:	d044      	beq.n	801291a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	613b      	str	r3, [r7, #16]
 8012894:	2300      	movs	r3, #0
 8012896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289a:	3302      	adds	r3, #2
 801289c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	60fb      	str	r3, [r7, #12]
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	3301      	adds	r3, #1
 80128a6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fe f8b6 	bl	8010a1e <get_fat>
 80128b2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80128b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d809      	bhi.n	80128ce <f_lseek+0xba>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2202      	movs	r2, #2
 80128be:	755a      	strb	r2, [r3, #21]
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	2102      	movs	r1, #2
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fd fe24 	bl	8010512 <unlock_fs>
 80128ca:	2302      	movs	r3, #2
 80128cc:	e1f1      	b.n	8012cb2 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d4:	d109      	bne.n	80128ea <f_lseek+0xd6>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2201      	movs	r2, #1
 80128da:	755a      	strb	r2, [r3, #21]
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2101      	movs	r1, #1
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fd fe16 	bl	8010512 <unlock_fs>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e1e3      	b.n	8012cb2 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3301      	adds	r3, #1
 80128ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d0d4      	beq.n	801289e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80128f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d809      	bhi.n	8012910 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	1d1a      	adds	r2, r3, #4
 8012900:	627a      	str	r2, [r7, #36]	; 0x24
 8012902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012908:	1d1a      	adds	r2, r3, #4
 801290a:	627a      	str	r2, [r7, #36]	; 0x24
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	699b      	ldr	r3, [r3, #24]
 8012914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012916:	429a      	cmp	r2, r3
 8012918:	d3ba      	bcc.n	8012890 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801291e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012920:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	429a      	cmp	r2, r3
 8012928:	d803      	bhi.n	8012932 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292c:	2200      	movs	r2, #0
 801292e:	601a      	str	r2, [r3, #0]
 8012930:	e1b6      	b.n	8012ca0 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012932:	2311      	movs	r3, #17
 8012934:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012938:	e1b2      	b.n	8012ca0 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	429a      	cmp	r2, r3
 8012942:	d902      	bls.n	801294a <f_lseek+0x136>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	683a      	ldr	r2, [r7, #0]
 801294e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 81a4 	beq.w	8012ca0 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	3b01      	subs	r3, #1
 801295c:	4619      	mov	r1, r3
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7fe fae6 	bl	8010f30 <clmt_clust>
 8012964:	4602      	mov	r2, r0
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	69db      	ldr	r3, [r3, #28]
 8012970:	4619      	mov	r1, r3
 8012972:	4610      	mov	r0, r2
 8012974:	f7fe f834 	bl	80109e0 <clust2sect>
 8012978:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d109      	bne.n	8012994 <f_lseek+0x180>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2202      	movs	r2, #2
 8012984:	755a      	strb	r2, [r3, #21]
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2102      	movs	r1, #2
 801298a:	4618      	mov	r0, r3
 801298c:	f7fd fdc1 	bl	8010512 <unlock_fs>
 8012990:	2302      	movs	r3, #2
 8012992:	e18e      	b.n	8012cb2 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	3b01      	subs	r3, #1
 8012998:	0a5b      	lsrs	r3, r3, #9
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	8952      	ldrh	r2, [r2, #10]
 801299e:	3a01      	subs	r2, #1
 80129a0:	4013      	ands	r3, r2
 80129a2:	69ba      	ldr	r2, [r7, #24]
 80129a4:	4413      	add	r3, r2
 80129a6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	699b      	ldr	r3, [r3, #24]
 80129ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f000 8175 	beq.w	8012ca0 <f_lseek+0x48c>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a1b      	ldr	r3, [r3, #32]
 80129ba:	69ba      	ldr	r2, [r7, #24]
 80129bc:	429a      	cmp	r2, r3
 80129be:	f000 816f 	beq.w	8012ca0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	7d1b      	ldrb	r3, [r3, #20]
 80129c6:	b25b      	sxtb	r3, r3
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	da1d      	bge.n	8012a08 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	7858      	ldrb	r0, [r3, #1]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6a1a      	ldr	r2, [r3, #32]
 80129da:	2301      	movs	r3, #1
 80129dc:	f7fd fc46 	bl	801026c <disk_write>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d009      	beq.n	80129fa <f_lseek+0x1e6>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	755a      	strb	r2, [r3, #21]
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2101      	movs	r1, #1
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fd fd8e 	bl	8010512 <unlock_fs>
 80129f6:	2301      	movs	r3, #1
 80129f8:	e15b      	b.n	8012cb2 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	7d1b      	ldrb	r3, [r3, #20]
 80129fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a02:	b2da      	uxtb	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	7858      	ldrb	r0, [r3, #1]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a12:	2301      	movs	r3, #1
 8012a14:	69ba      	ldr	r2, [r7, #24]
 8012a16:	f7fd fc09 	bl	801022c <disk_read>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d009      	beq.n	8012a34 <f_lseek+0x220>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	755a      	strb	r2, [r3, #21]
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	2101      	movs	r1, #1
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fd fd71 	bl	8010512 <unlock_fs>
 8012a30:	2301      	movs	r3, #1
 8012a32:	e13e      	b.n	8012cb2 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	621a      	str	r2, [r3, #32]
 8012a3a:	e131      	b.n	8012ca0 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	683a      	ldr	r2, [r7, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d908      	bls.n	8012a58 <f_lseek+0x244>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7d1b      	ldrb	r3, [r3, #20]
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d102      	bne.n	8012a58 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	637b      	str	r3, [r7, #52]	; 0x34
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a66:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 80c0 	beq.w	8012bf0 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	895b      	ldrh	r3, [r3, #10]
 8012a74:	025b      	lsls	r3, r3, #9
 8012a76:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d01b      	beq.n	8012ab6 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	1e5a      	subs	r2, r3, #1
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8012a88:	6a3b      	ldr	r3, [r7, #32]
 8012a8a:	1e59      	subs	r1, r3, #1
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d30f      	bcc.n	8012ab6 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	1e5a      	subs	r2, r3, #1
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	425b      	negs	r3, r3
 8012a9e:	401a      	ands	r2, r3
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	683a      	ldr	r2, [r7, #0]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	69db      	ldr	r3, [r3, #28]
 8012ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ab4:	e02c      	b.n	8012b10 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d123      	bne.n	8012b0a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fe f99a 	bl	8010e00 <create_chain>
 8012acc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d109      	bne.n	8012ae8 <f_lseek+0x2d4>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	755a      	strb	r2, [r3, #21]
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	2102      	movs	r1, #2
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7fd fd17 	bl	8010512 <unlock_fs>
 8012ae4:	2302      	movs	r3, #2
 8012ae6:	e0e4      	b.n	8012cb2 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aee:	d109      	bne.n	8012b04 <f_lseek+0x2f0>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	755a      	strb	r2, [r3, #21]
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2101      	movs	r1, #1
 8012afa:	4618      	mov	r0, r3
 8012afc:	f7fd fd09 	bl	8010512 <unlock_fs>
 8012b00:	2301      	movs	r3, #1
 8012b02:	e0d6      	b.n	8012cb2 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b08:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b0e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d06c      	beq.n	8012bf0 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012b16:	e044      	b.n	8012ba2 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012b18:	683a      	ldr	r2, [r7, #0]
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	603b      	str	r3, [r7, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	699a      	ldr	r2, [r3, #24]
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	441a      	add	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	7d1b      	ldrb	r3, [r3, #20]
 8012b30:	f003 0302 	and.w	r3, r3, #2
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00b      	beq.n	8012b50 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fe f95f 	bl	8010e00 <create_chain>
 8012b42:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d108      	bne.n	8012b5c <f_lseek+0x348>
							ofs = 0; break;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	603b      	str	r3, [r7, #0]
 8012b4e:	e02c      	b.n	8012baa <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fd ff62 	bl	8010a1e <get_fat>
 8012b5a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b62:	d109      	bne.n	8012b78 <f_lseek+0x364>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2201      	movs	r2, #1
 8012b68:	755a      	strb	r2, [r3, #21]
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2101      	movs	r1, #1
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7fd fccf 	bl	8010512 <unlock_fs>
 8012b74:	2301      	movs	r3, #1
 8012b76:	e09c      	b.n	8012cb2 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d904      	bls.n	8012b88 <f_lseek+0x374>
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	699b      	ldr	r3, [r3, #24]
 8012b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d309      	bcc.n	8012b9c <f_lseek+0x388>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2202      	movs	r2, #2
 8012b8c:	755a      	strb	r2, [r3, #21]
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	2102      	movs	r1, #2
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7fd fcbd 	bl	8010512 <unlock_fs>
 8012b98:	2302      	movs	r3, #2
 8012b9a:	e08a      	b.n	8012cb2 <f_lseek+0x49e>
					fp->clust = clst;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ba0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012ba2:	683a      	ldr	r2, [r7, #0]
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d8b6      	bhi.n	8012b18 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	699a      	ldr	r2, [r3, #24]
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	441a      	add	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d017      	beq.n	8012bf0 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fd ff0b 	bl	80109e0 <clust2sect>
 8012bca:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d109      	bne.n	8012be6 <f_lseek+0x3d2>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2202      	movs	r2, #2
 8012bd6:	755a      	strb	r2, [r3, #21]
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	2102      	movs	r1, #2
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7fd fc98 	bl	8010512 <unlock_fs>
 8012be2:	2302      	movs	r3, #2
 8012be4:	e065      	b.n	8012cb2 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	0a5b      	lsrs	r3, r3, #9
 8012bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bec:	4413      	add	r3, r2
 8012bee:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	699a      	ldr	r2, [r3, #24]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	d90a      	bls.n	8012c12 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	699a      	ldr	r2, [r3, #24]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	7d1b      	ldrb	r3, [r3, #20]
 8012c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	699b      	ldr	r3, [r3, #24]
 8012c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d040      	beq.n	8012ca0 <f_lseek+0x48c>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6a1b      	ldr	r3, [r3, #32]
 8012c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d03b      	beq.n	8012ca0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	7d1b      	ldrb	r3, [r3, #20]
 8012c2c:	b25b      	sxtb	r3, r3
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	da1d      	bge.n	8012c6e <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	7858      	ldrb	r0, [r3, #1]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6a1a      	ldr	r2, [r3, #32]
 8012c40:	2301      	movs	r3, #1
 8012c42:	f7fd fb13 	bl	801026c <disk_write>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d009      	beq.n	8012c60 <f_lseek+0x44c>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	755a      	strb	r2, [r3, #21]
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	2101      	movs	r1, #1
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fd fc5b 	bl	8010512 <unlock_fs>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e028      	b.n	8012cb2 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7d1b      	ldrb	r3, [r3, #20]
 8012c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	7858      	ldrb	r0, [r3, #1]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c78:	2301      	movs	r3, #1
 8012c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c7c:	f7fd fad6 	bl	801022c <disk_read>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d009      	beq.n	8012c9a <f_lseek+0x486>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2201      	movs	r2, #1
 8012c8a:	755a      	strb	r2, [r3, #21]
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	2101      	movs	r1, #1
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fd fc3e 	bl	8010512 <unlock_fs>
 8012c96:	2301      	movs	r3, #1
 8012c98:	e00b      	b.n	8012cb2 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c9e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012ca6:	4611      	mov	r1, r2
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fd fc32 	bl	8010512 <unlock_fs>
 8012cae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3740      	adds	r7, #64	; 0x40
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b086      	sub	sp, #24
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d101      	bne.n	8012cce <f_opendir+0x14>
 8012cca:	2309      	movs	r3, #9
 8012ccc:	e06a      	b.n	8012da4 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012cd2:	f107 010c 	add.w	r1, r7, #12
 8012cd6:	463b      	mov	r3, r7
 8012cd8:	2200      	movs	r2, #0
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fe fea8 	bl	8011a30 <find_volume>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ce4:	7dfb      	ldrb	r3, [r7, #23]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d14f      	bne.n	8012d8a <f_opendir+0xd0>
		obj->fs = fs;
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f7fe fd8f 	bl	8011818 <follow_path>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012cfe:	7dfb      	ldrb	r3, [r7, #23]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d13d      	bne.n	8012d80 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d0a:	b25b      	sxtb	r3, r3
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	db12      	blt.n	8012d36 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	799b      	ldrb	r3, [r3, #6]
 8012d14:	f003 0310 	and.w	r3, r3, #16
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d00a      	beq.n	8012d32 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6a1b      	ldr	r3, [r3, #32]
 8012d22:	4619      	mov	r1, r3
 8012d24:	4610      	mov	r0, r2
 8012d26:	f7fe fabe 	bl	80112a6 <ld_clust>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	609a      	str	r2, [r3, #8]
 8012d30:	e001      	b.n	8012d36 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012d32:	2305      	movs	r3, #5
 8012d34:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012d36:	7dfb      	ldrb	r3, [r7, #23]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d121      	bne.n	8012d80 <f_opendir+0xc6>
				obj->id = fs->id;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	88da      	ldrh	r2, [r3, #6]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012d44:	2100      	movs	r1, #0
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f7fe f926 	bl	8010f98 <dir_sdi>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d114      	bne.n	8012d80 <f_opendir+0xc6>
					if (obj->sclust) {
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	689b      	ldr	r3, [r3, #8]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00d      	beq.n	8012d7a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012d5e:	2100      	movs	r1, #0
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7fd fc6f 	bl	8010644 <inc_lock>
 8012d66:	4602      	mov	r2, r0
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	691b      	ldr	r3, [r3, #16]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d105      	bne.n	8012d80 <f_opendir+0xc6>
 8012d74:	2312      	movs	r3, #18
 8012d76:	75fb      	strb	r3, [r7, #23]
 8012d78:	e002      	b.n	8012d80 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012d80:	7dfb      	ldrb	r3, [r7, #23]
 8012d82:	2b04      	cmp	r3, #4
 8012d84:	d101      	bne.n	8012d8a <f_opendir+0xd0>
 8012d86:	2305      	movs	r3, #5
 8012d88:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012d8a:	7dfb      	ldrb	r3, [r7, #23]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <f_opendir+0xdc>
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	2200      	movs	r2, #0
 8012d94:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	7dfa      	ldrb	r2, [r7, #23]
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7fd fbb8 	bl	8010512 <unlock_fs>
 8012da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f107 0208 	add.w	r2, r7, #8
 8012dba:	4611      	mov	r1, r2
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff f88b 	bl	8011ed8 <validate>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d115      	bne.n	8012df8 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	691b      	ldr	r3, [r3, #16]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d006      	beq.n	8012de2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	691b      	ldr	r3, [r3, #16]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fd fcc1 	bl	8010760 <dec_lock>
 8012dde:	4603      	mov	r3, r0
 8012de0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012de2:	7bfb      	ldrb	r3, [r7, #15]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d102      	bne.n	8012dee <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2100      	movs	r1, #0
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fd fb8d 	bl	8010512 <unlock_fs>
#endif
	}
	return res;
 8012df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3710      	adds	r7, #16
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b084      	sub	sp, #16
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f107 0208 	add.w	r2, r7, #8
 8012e12:	4611      	mov	r1, r2
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7ff f85f 	bl	8011ed8 <validate>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e1e:	7bfb      	ldrb	r3, [r7, #15]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d126      	bne.n	8012e72 <f_readdir+0x70>
		if (!fno) {
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d106      	bne.n	8012e38 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f7fe f8b3 	bl	8010f98 <dir_sdi>
 8012e32:	4603      	mov	r3, r0
 8012e34:	73fb      	strb	r3, [r7, #15]
 8012e36:	e01c      	b.n	8012e72 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012e38:	2100      	movs	r1, #0
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7fe fa72 	bl	8011324 <dir_read>
 8012e40:	4603      	mov	r3, r0
 8012e42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
 8012e46:	2b04      	cmp	r3, #4
 8012e48:	d101      	bne.n	8012e4e <f_readdir+0x4c>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012e4e:	7bfb      	ldrb	r3, [r7, #15]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d10e      	bne.n	8012e72 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012e54:	6839      	ldr	r1, [r7, #0]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7fe fb48 	bl	80114ec <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7fe f915 	bl	801108e <dir_next>
 8012e64:	4603      	mov	r3, r0
 8012e66:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012e68:	7bfb      	ldrb	r3, [r7, #15]
 8012e6a:	2b04      	cmp	r3, #4
 8012e6c:	d101      	bne.n	8012e72 <f_readdir+0x70>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	7bfa      	ldrb	r2, [r7, #15]
 8012e76:	4611      	mov	r1, r2
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7fd fb4a 	bl	8010512 <unlock_fs>
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012e92:	6839      	ldr	r1, [r7, #0]
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff ffb4 	bl	8012e02 <f_readdir>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012e9e:	7bfb      	ldrb	r3, [r7, #15]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d114      	bne.n	8012ece <f_findnext+0x46>
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d011      	beq.n	8012ece <f_findnext+0x46>
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	7a5b      	ldrb	r3, [r3, #9]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00d      	beq.n	8012ece <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	f103 0109 	add.w	r1, r3, #9
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f7fe fb9a 	bl	80115f8 <pattern_matching>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d100      	bne.n	8012ecc <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012eca:	e7e2      	b.n	8012e92 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012ecc:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3710      	adds	r7, #16
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b086      	sub	sp, #24
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8012eec:	6879      	ldr	r1, [r7, #4]
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f7ff fee3 	bl	8012cba <f_opendir>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ef8:	7dfb      	ldrb	r3, [r7, #23]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d105      	bne.n	8012f0a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8012efe:	68b9      	ldr	r1, [r7, #8]
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f7ff ffc1 	bl	8012e88 <f_findnext>
 8012f06:	4603      	mov	r3, r0
 8012f08:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3718      	adds	r7, #24
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b087      	sub	sp, #28
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	4613      	mov	r3, r2
 8012f20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012f22:	2301      	movs	r3, #1
 8012f24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012f26:	2300      	movs	r3, #0
 8012f28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012f2a:	4b1f      	ldr	r3, [pc, #124]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f2c:	7a5b      	ldrb	r3, [r3, #9]
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d131      	bne.n	8012f98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012f34:	4b1c      	ldr	r3, [pc, #112]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f36:	7a5b      	ldrb	r3, [r3, #9]
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	4b1a      	ldr	r3, [pc, #104]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f3e:	2100      	movs	r1, #0
 8012f40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012f42:	4b19      	ldr	r3, [pc, #100]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f44:	7a5b      	ldrb	r3, [r3, #9]
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	4a17      	ldr	r2, [pc, #92]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f4a:	009b      	lsls	r3, r3, #2
 8012f4c:	4413      	add	r3, r2
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012f52:	4b15      	ldr	r3, [pc, #84]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f54:	7a5b      	ldrb	r3, [r3, #9]
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	461a      	mov	r2, r3
 8012f5a:	4b13      	ldr	r3, [pc, #76]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f5c:	4413      	add	r3, r2
 8012f5e:	79fa      	ldrb	r2, [r7, #7]
 8012f60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012f62:	4b11      	ldr	r3, [pc, #68]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f64:	7a5b      	ldrb	r3, [r3, #9]
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	b2d1      	uxtb	r1, r2
 8012f6c:	4a0e      	ldr	r2, [pc, #56]	; (8012fa8 <FATFS_LinkDriverEx+0x94>)
 8012f6e:	7251      	strb	r1, [r2, #9]
 8012f70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012f72:	7dbb      	ldrb	r3, [r7, #22]
 8012f74:	3330      	adds	r3, #48	; 0x30
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	3301      	adds	r3, #1
 8012f80:	223a      	movs	r2, #58	; 0x3a
 8012f82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	3302      	adds	r3, #2
 8012f88:	222f      	movs	r2, #47	; 0x2f
 8012f8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	3303      	adds	r3, #3
 8012f90:	2200      	movs	r2, #0
 8012f92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	371c      	adds	r7, #28
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	20000464 	.word	0x20000464

08012fac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7ff ffaa 	bl	8012f14 <FATFS_LinkDriverEx>
 8012fc0:	4603      	mov	r3, r0
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b084      	sub	sp, #16
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	6039      	str	r1, [r7, #0]
 8012fd4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	2101      	movs	r1, #1
 8012fda:	2001      	movs	r0, #1
 8012fdc:	f000 fb5e 	bl	801369c <osSemaphoreNew>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	bf14      	ite	ne
 8012fee:	2301      	movne	r3, #1
 8012ff0:	2300      	moveq	r3, #0
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	60fb      	str	r3, [r7, #12]

    return ret;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3710      	adds	r7, #16
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f000 fca3 	bl	8013954 <osSemaphoreDelete>
#endif
    return 1;
 801300e:	2301      	movs	r3, #1
}
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 fbd5 	bl	80137d8 <osSemaphoreAcquire>
 801302e:	4603      	mov	r3, r0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d101      	bne.n	8013038 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013034:	2301      	movs	r3, #1
 8013036:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013038:	68fb      	ldr	r3, [r7, #12]
}
 801303a:	4618      	mov	r0, r3
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b082      	sub	sp, #8
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 fc2a 	bl	80138a4 <osSemaphoreRelease>
#endif
}
 8013050:	bf00      	nop
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013058:	b480      	push	{r7}
 801305a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801305c:	bf00      	nop
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr
	...

08013068 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013068:	b480      	push	{r7}
 801306a:	b085      	sub	sp, #20
 801306c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801306e:	f3ef 8305 	mrs	r3, IPSR
 8013072:	60bb      	str	r3, [r7, #8]
  return(result);
 8013074:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10f      	bne.n	801309a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801307a:	f3ef 8310 	mrs	r3, PRIMASK
 801307e:	607b      	str	r3, [r7, #4]
  return(result);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d105      	bne.n	8013092 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013086:	f3ef 8311 	mrs	r3, BASEPRI
 801308a:	603b      	str	r3, [r7, #0]
  return(result);
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d007      	beq.n	80130a2 <osKernelInitialize+0x3a>
 8013092:	4b0e      	ldr	r3, [pc, #56]	; (80130cc <osKernelInitialize+0x64>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2b02      	cmp	r3, #2
 8013098:	d103      	bne.n	80130a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801309a:	f06f 0305 	mvn.w	r3, #5
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	e00c      	b.n	80130bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130a2:	4b0a      	ldr	r3, [pc, #40]	; (80130cc <osKernelInitialize+0x64>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d105      	bne.n	80130b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130aa:	4b08      	ldr	r3, [pc, #32]	; (80130cc <osKernelInitialize+0x64>)
 80130ac:	2201      	movs	r2, #1
 80130ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130b0:	2300      	movs	r3, #0
 80130b2:	60fb      	str	r3, [r7, #12]
 80130b4:	e002      	b.n	80130bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80130b6:	f04f 33ff 	mov.w	r3, #4294967295
 80130ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80130bc:	68fb      	ldr	r3, [r7, #12]
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3714      	adds	r7, #20
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	20000470 	.word	0x20000470

080130d0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80130d6:	f002 fe7b 	bl	8015dd0 <xTaskGetSchedulerState>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d004      	beq.n	80130ea <osKernelGetState+0x1a>
 80130e0:	2b02      	cmp	r3, #2
 80130e2:	d105      	bne.n	80130f0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80130e4:	2302      	movs	r3, #2
 80130e6:	607b      	str	r3, [r7, #4]
      break;
 80130e8:	e00c      	b.n	8013104 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80130ea:	2303      	movs	r3, #3
 80130ec:	607b      	str	r3, [r7, #4]
      break;
 80130ee:	e009      	b.n	8013104 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80130f0:	4b07      	ldr	r3, [pc, #28]	; (8013110 <osKernelGetState+0x40>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d102      	bne.n	80130fe <osKernelGetState+0x2e>
        state = osKernelReady;
 80130f8:	2301      	movs	r3, #1
 80130fa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80130fc:	e001      	b.n	8013102 <osKernelGetState+0x32>
        state = osKernelInactive;
 80130fe:	2300      	movs	r3, #0
 8013100:	607b      	str	r3, [r7, #4]
      break;
 8013102:	bf00      	nop
  }

  return (state);
 8013104:	687b      	ldr	r3, [r7, #4]
}
 8013106:	4618      	mov	r0, r3
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	20000470 	.word	0x20000470

08013114 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801311a:	f3ef 8305 	mrs	r3, IPSR
 801311e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013120:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013122:	2b00      	cmp	r3, #0
 8013124:	d10f      	bne.n	8013146 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013126:	f3ef 8310 	mrs	r3, PRIMASK
 801312a:	607b      	str	r3, [r7, #4]
  return(result);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d105      	bne.n	801313e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013132:	f3ef 8311 	mrs	r3, BASEPRI
 8013136:	603b      	str	r3, [r7, #0]
  return(result);
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d007      	beq.n	801314e <osKernelStart+0x3a>
 801313e:	4b0f      	ldr	r3, [pc, #60]	; (801317c <osKernelStart+0x68>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b02      	cmp	r3, #2
 8013144:	d103      	bne.n	801314e <osKernelStart+0x3a>
    stat = osErrorISR;
 8013146:	f06f 0305 	mvn.w	r3, #5
 801314a:	60fb      	str	r3, [r7, #12]
 801314c:	e010      	b.n	8013170 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801314e:	4b0b      	ldr	r3, [pc, #44]	; (801317c <osKernelStart+0x68>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d109      	bne.n	801316a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013156:	f7ff ff7f 	bl	8013058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801315a:	4b08      	ldr	r3, [pc, #32]	; (801317c <osKernelStart+0x68>)
 801315c:	2202      	movs	r2, #2
 801315e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013160:	f002 f9c8 	bl	80154f4 <vTaskStartScheduler>
      stat = osOK;
 8013164:	2300      	movs	r3, #0
 8013166:	60fb      	str	r3, [r7, #12]
 8013168:	e002      	b.n	8013170 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801316a:	f04f 33ff 	mov.w	r3, #4294967295
 801316e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013170:	68fb      	ldr	r3, [r7, #12]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}
 801317a:	bf00      	nop
 801317c:	20000470 	.word	0x20000470

08013180 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013186:	f3ef 8305 	mrs	r3, IPSR
 801318a:	60bb      	str	r3, [r7, #8]
  return(result);
 801318c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10f      	bne.n	80131b2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013192:	f3ef 8310 	mrs	r3, PRIMASK
 8013196:	607b      	str	r3, [r7, #4]
  return(result);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d105      	bne.n	80131aa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801319e:	f3ef 8311 	mrs	r3, BASEPRI
 80131a2:	603b      	str	r3, [r7, #0]
  return(result);
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d007      	beq.n	80131ba <osKernelGetTickCount+0x3a>
 80131aa:	4b08      	ldr	r3, [pc, #32]	; (80131cc <osKernelGetTickCount+0x4c>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b02      	cmp	r3, #2
 80131b0:	d103      	bne.n	80131ba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80131b2:	f002 fac3 	bl	801573c <xTaskGetTickCountFromISR>
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	e002      	b.n	80131c0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80131ba:	f002 faaf 	bl	801571c <xTaskGetTickCount>
 80131be:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80131c0:	68fb      	ldr	r3, [r7, #12]
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3710      	adds	r7, #16
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	20000470 	.word	0x20000470

080131d0 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80131d0:	b480      	push	{r7}
 80131d2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80131d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80131d8:	4618      	mov	r0, r3
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr
	...

080131e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b090      	sub	sp, #64	; 0x40
 80131e8:	af04      	add	r7, sp, #16
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80131f0:	2300      	movs	r3, #0
 80131f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131f4:	f3ef 8305 	mrs	r3, IPSR
 80131f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80131fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f040 808f 	bne.w	8013320 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013202:	f3ef 8310 	mrs	r3, PRIMASK
 8013206:	61bb      	str	r3, [r7, #24]
  return(result);
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d105      	bne.n	801321a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801320e:	f3ef 8311 	mrs	r3, BASEPRI
 8013212:	617b      	str	r3, [r7, #20]
  return(result);
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d003      	beq.n	8013222 <osThreadNew+0x3e>
 801321a:	4b44      	ldr	r3, [pc, #272]	; (801332c <osThreadNew+0x148>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	2b02      	cmp	r3, #2
 8013220:	d07e      	beq.n	8013320 <osThreadNew+0x13c>
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d07b      	beq.n	8013320 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8013228:	2380      	movs	r3, #128	; 0x80
 801322a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801322c:	2318      	movs	r3, #24
 801322e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8013230:	2300      	movs	r3, #0
 8013232:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8013234:	f04f 33ff 	mov.w	r3, #4294967295
 8013238:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d045      	beq.n	80132cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <osThreadNew+0x6a>
        name = attr->name;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	699b      	ldr	r3, [r3, #24]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	699b      	ldr	r3, [r3, #24]
 801325a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	2b00      	cmp	r3, #0
 8013260:	d008      	beq.n	8013274 <osThreadNew+0x90>
 8013262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013264:	2b38      	cmp	r3, #56	; 0x38
 8013266:	d805      	bhi.n	8013274 <osThreadNew+0x90>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d001      	beq.n	8013278 <osThreadNew+0x94>
        return (NULL);
 8013274:	2300      	movs	r3, #0
 8013276:	e054      	b.n	8013322 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	695b      	ldr	r3, [r3, #20]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d003      	beq.n	8013288 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	695b      	ldr	r3, [r3, #20]
 8013284:	089b      	lsrs	r3, r3, #2
 8013286:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	689b      	ldr	r3, [r3, #8]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00e      	beq.n	80132ae <osThreadNew+0xca>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	2b5b      	cmp	r3, #91	; 0x5b
 8013296:	d90a      	bls.n	80132ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801329c:	2b00      	cmp	r3, #0
 801329e:	d006      	beq.n	80132ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	695b      	ldr	r3, [r3, #20]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <osThreadNew+0xca>
        mem = 1;
 80132a8:	2301      	movs	r3, #1
 80132aa:	623b      	str	r3, [r7, #32]
 80132ac:	e010      	b.n	80132d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	689b      	ldr	r3, [r3, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10c      	bne.n	80132d0 <osThreadNew+0xec>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d108      	bne.n	80132d0 <osThreadNew+0xec>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d104      	bne.n	80132d0 <osThreadNew+0xec>
          mem = 0;
 80132c6:	2300      	movs	r3, #0
 80132c8:	623b      	str	r3, [r7, #32]
 80132ca:	e001      	b.n	80132d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80132cc:	2300      	movs	r3, #0
 80132ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80132d0:	6a3b      	ldr	r3, [r7, #32]
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d110      	bne.n	80132f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80132de:	9202      	str	r2, [sp, #8]
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f001 fea5 	bl	801503c <xTaskCreateStatic>
 80132f2:	4603      	mov	r3, r0
 80132f4:	613b      	str	r3, [r7, #16]
 80132f6:	e013      	b.n	8013320 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80132f8:	6a3b      	ldr	r3, [r7, #32]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d110      	bne.n	8013320 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80132fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013300:	b29a      	uxth	r2, r3
 8013302:	f107 0310 	add.w	r3, r7, #16
 8013306:	9301      	str	r3, [sp, #4]
 8013308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330a:	9300      	str	r3, [sp, #0]
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f001 fef3 	bl	80150fc <xTaskCreate>
 8013316:	4603      	mov	r3, r0
 8013318:	2b01      	cmp	r3, #1
 801331a:	d001      	beq.n	8013320 <osThreadNew+0x13c>
          hTask = NULL;
 801331c:	2300      	movs	r3, #0
 801331e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013320:	693b      	ldr	r3, [r7, #16]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3730      	adds	r7, #48	; 0x30
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	20000470 	.word	0x20000470

08013330 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013330:	b580      	push	{r7, lr}
 8013332:	b086      	sub	sp, #24
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013338:	f3ef 8305 	mrs	r3, IPSR
 801333c:	613b      	str	r3, [r7, #16]
  return(result);
 801333e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013340:	2b00      	cmp	r3, #0
 8013342:	d10f      	bne.n	8013364 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013344:	f3ef 8310 	mrs	r3, PRIMASK
 8013348:	60fb      	str	r3, [r7, #12]
  return(result);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d105      	bne.n	801335c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013350:	f3ef 8311 	mrs	r3, BASEPRI
 8013354:	60bb      	str	r3, [r7, #8]
  return(result);
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d007      	beq.n	801336c <osDelay+0x3c>
 801335c:	4b0a      	ldr	r3, [pc, #40]	; (8013388 <osDelay+0x58>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2b02      	cmp	r3, #2
 8013362:	d103      	bne.n	801336c <osDelay+0x3c>
    stat = osErrorISR;
 8013364:	f06f 0305 	mvn.w	r3, #5
 8013368:	617b      	str	r3, [r7, #20]
 801336a:	e007      	b.n	801337c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801336c:	2300      	movs	r3, #0
 801336e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d002      	beq.n	801337c <osDelay+0x4c>
      vTaskDelay(ticks);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f002 f886 	bl	8015488 <vTaskDelay>
    }
  }

  return (stat);
 801337c:	697b      	ldr	r3, [r7, #20]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3718      	adds	r7, #24
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	20000470 	.word	0x20000470

0801338c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b088      	sub	sp, #32
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013394:	f3ef 8305 	mrs	r3, IPSR
 8013398:	617b      	str	r3, [r7, #20]
  return(result);
 801339a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10f      	bne.n	80133c0 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133a0:	f3ef 8310 	mrs	r3, PRIMASK
 80133a4:	613b      	str	r3, [r7, #16]
  return(result);
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d105      	bne.n	80133b8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133ac:	f3ef 8311 	mrs	r3, BASEPRI
 80133b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d007      	beq.n	80133c8 <osDelayUntil+0x3c>
 80133b8:	4b13      	ldr	r3, [pc, #76]	; (8013408 <osDelayUntil+0x7c>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b02      	cmp	r3, #2
 80133be:	d103      	bne.n	80133c8 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80133c0:	f06f 0305 	mvn.w	r3, #5
 80133c4:	61fb      	str	r3, [r7, #28]
 80133c6:	e019      	b.n	80133fc <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80133cc:	f002 f9a6 	bl	801571c <xTaskGetTickCount>
 80133d0:	4603      	mov	r3, r0
 80133d2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	1ad3      	subs	r3, r2, r3
 80133da:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d009      	beq.n	80133f6 <osDelayUntil+0x6a>
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	db06      	blt.n	80133f6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80133e8:	f107 0308 	add.w	r3, r7, #8
 80133ec:	69b9      	ldr	r1, [r7, #24]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f001 ffca 	bl	8015388 <vTaskDelayUntil>
 80133f4:	e002      	b.n	80133fc <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80133f6:	f06f 0303 	mvn.w	r3, #3
 80133fa:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80133fc:	69fb      	ldr	r3, [r7, #28]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3720      	adds	r7, #32
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	20000470 	.word	0x20000470

0801340c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801340c:	b580      	push	{r7, lr}
 801340e:	b08a      	sub	sp, #40	; 0x28
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8013414:	2300      	movs	r3, #0
 8013416:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013418:	f3ef 8305 	mrs	r3, IPSR
 801341c:	613b      	str	r3, [r7, #16]
  return(result);
 801341e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8013420:	2b00      	cmp	r3, #0
 8013422:	f040 8085 	bne.w	8013530 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013426:	f3ef 8310 	mrs	r3, PRIMASK
 801342a:	60fb      	str	r3, [r7, #12]
  return(result);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d105      	bne.n	801343e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013432:	f3ef 8311 	mrs	r3, BASEPRI
 8013436:	60bb      	str	r3, [r7, #8]
  return(result);
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d003      	beq.n	8013446 <osMutexNew+0x3a>
 801343e:	4b3f      	ldr	r3, [pc, #252]	; (801353c <osMutexNew+0x130>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b02      	cmp	r3, #2
 8013444:	d074      	beq.n	8013530 <osMutexNew+0x124>
    if (attr != NULL) {
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d003      	beq.n	8013454 <osMutexNew+0x48>
      type = attr->attr_bits;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	623b      	str	r3, [r7, #32]
 8013452:	e001      	b.n	8013458 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8013454:	2300      	movs	r3, #0
 8013456:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013458:	6a3b      	ldr	r3, [r7, #32]
 801345a:	f003 0301 	and.w	r3, r3, #1
 801345e:	2b00      	cmp	r3, #0
 8013460:	d002      	beq.n	8013468 <osMutexNew+0x5c>
      rmtx = 1U;
 8013462:	2301      	movs	r3, #1
 8013464:	61fb      	str	r3, [r7, #28]
 8013466:	e001      	b.n	801346c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8013468:	2300      	movs	r3, #0
 801346a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801346c:	6a3b      	ldr	r3, [r7, #32]
 801346e:	f003 0308 	and.w	r3, r3, #8
 8013472:	2b00      	cmp	r3, #0
 8013474:	d15c      	bne.n	8013530 <osMutexNew+0x124>
      mem = -1;
 8013476:	f04f 33ff 	mov.w	r3, #4294967295
 801347a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d015      	beq.n	80134ae <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d006      	beq.n	8013498 <osMutexNew+0x8c>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	2b4f      	cmp	r3, #79	; 0x4f
 8013490:	d902      	bls.n	8013498 <osMutexNew+0x8c>
          mem = 1;
 8013492:	2301      	movs	r3, #1
 8013494:	61bb      	str	r3, [r7, #24]
 8013496:	e00c      	b.n	80134b2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d108      	bne.n	80134b2 <osMutexNew+0xa6>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d104      	bne.n	80134b2 <osMutexNew+0xa6>
            mem = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	61bb      	str	r3, [r7, #24]
 80134ac:	e001      	b.n	80134b2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80134ae:	2300      	movs	r3, #0
 80134b0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d112      	bne.n	80134de <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d007      	beq.n	80134ce <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	689b      	ldr	r3, [r3, #8]
 80134c2:	4619      	mov	r1, r3
 80134c4:	2004      	movs	r0, #4
 80134c6:	f000 fe4c 	bl	8014162 <xQueueCreateMutexStatic>
 80134ca:	6278      	str	r0, [r7, #36]	; 0x24
 80134cc:	e016      	b.n	80134fc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	4619      	mov	r1, r3
 80134d4:	2001      	movs	r0, #1
 80134d6:	f000 fe44 	bl	8014162 <xQueueCreateMutexStatic>
 80134da:	6278      	str	r0, [r7, #36]	; 0x24
 80134dc:	e00e      	b.n	80134fc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10b      	bne.n	80134fc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d004      	beq.n	80134f4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80134ea:	2004      	movs	r0, #4
 80134ec:	f000 fe21 	bl	8014132 <xQueueCreateMutex>
 80134f0:	6278      	str	r0, [r7, #36]	; 0x24
 80134f2:	e003      	b.n	80134fc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80134f4:	2001      	movs	r0, #1
 80134f6:	f000 fe1c 	bl	8014132 <xQueueCreateMutex>
 80134fa:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80134fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d00c      	beq.n	801351c <osMutexNew+0x110>
        if (attr != NULL) {
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d003      	beq.n	8013510 <osMutexNew+0x104>
          name = attr->name;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	617b      	str	r3, [r7, #20]
 801350e:	e001      	b.n	8013514 <osMutexNew+0x108>
        } else {
          name = NULL;
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8013514:	6979      	ldr	r1, [r7, #20]
 8013516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013518:	f001 fd0a 	bl	8014f30 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	2b00      	cmp	r3, #0
 8013520:	d006      	beq.n	8013530 <osMutexNew+0x124>
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d003      	beq.n	8013530 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352a:	f043 0301 	orr.w	r3, r3, #1
 801352e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8013530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013532:	4618      	mov	r0, r3
 8013534:	3728      	adds	r7, #40	; 0x28
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	20000470 	.word	0x20000470

08013540 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8013540:	b580      	push	{r7, lr}
 8013542:	b088      	sub	sp, #32
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f023 0301 	bic.w	r3, r3, #1
 8013550:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f003 0301 	and.w	r3, r3, #1
 8013558:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801355a:	2300      	movs	r3, #0
 801355c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801355e:	f3ef 8305 	mrs	r3, IPSR
 8013562:	613b      	str	r3, [r7, #16]
  return(result);
 8013564:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013566:	2b00      	cmp	r3, #0
 8013568:	d10f      	bne.n	801358a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801356a:	f3ef 8310 	mrs	r3, PRIMASK
 801356e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d105      	bne.n	8013582 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013576:	f3ef 8311 	mrs	r3, BASEPRI
 801357a:	60bb      	str	r3, [r7, #8]
  return(result);
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d007      	beq.n	8013592 <osMutexAcquire+0x52>
 8013582:	4b1d      	ldr	r3, [pc, #116]	; (80135f8 <osMutexAcquire+0xb8>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b02      	cmp	r3, #2
 8013588:	d103      	bne.n	8013592 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801358a:	f06f 0305 	mvn.w	r3, #5
 801358e:	61fb      	str	r3, [r7, #28]
 8013590:	e02c      	b.n	80135ec <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d103      	bne.n	80135a0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8013598:	f06f 0303 	mvn.w	r3, #3
 801359c:	61fb      	str	r3, [r7, #28]
 801359e:	e025      	b.n	80135ec <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d011      	beq.n	80135ca <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80135a6:	6839      	ldr	r1, [r7, #0]
 80135a8:	69b8      	ldr	r0, [r7, #24]
 80135aa:	f000 fe2a 	bl	8014202 <xQueueTakeMutexRecursive>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d01b      	beq.n	80135ec <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d003      	beq.n	80135c2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80135ba:	f06f 0301 	mvn.w	r3, #1
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	e014      	b.n	80135ec <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80135c2:	f06f 0302 	mvn.w	r3, #2
 80135c6:	61fb      	str	r3, [r7, #28]
 80135c8:	e010      	b.n	80135ec <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	69b8      	ldr	r0, [r7, #24]
 80135ce:	f001 f9cf 	bl	8014970 <xQueueSemaphoreTake>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d009      	beq.n	80135ec <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d003      	beq.n	80135e6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80135de:	f06f 0301 	mvn.w	r3, #1
 80135e2:	61fb      	str	r3, [r7, #28]
 80135e4:	e002      	b.n	80135ec <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80135e6:	f06f 0302 	mvn.w	r3, #2
 80135ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80135ec:	69fb      	ldr	r3, [r7, #28]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3720      	adds	r7, #32
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	20000470 	.word	0x20000470

080135fc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b088      	sub	sp, #32
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f023 0301 	bic.w	r3, r3, #1
 801360a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f003 0301 	and.w	r3, r3, #1
 8013612:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013614:	2300      	movs	r3, #0
 8013616:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013618:	f3ef 8305 	mrs	r3, IPSR
 801361c:	613b      	str	r3, [r7, #16]
  return(result);
 801361e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013620:	2b00      	cmp	r3, #0
 8013622:	d10f      	bne.n	8013644 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013624:	f3ef 8310 	mrs	r3, PRIMASK
 8013628:	60fb      	str	r3, [r7, #12]
  return(result);
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d105      	bne.n	801363c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013630:	f3ef 8311 	mrs	r3, BASEPRI
 8013634:	60bb      	str	r3, [r7, #8]
  return(result);
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d007      	beq.n	801364c <osMutexRelease+0x50>
 801363c:	4b16      	ldr	r3, [pc, #88]	; (8013698 <osMutexRelease+0x9c>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b02      	cmp	r3, #2
 8013642:	d103      	bne.n	801364c <osMutexRelease+0x50>
    stat = osErrorISR;
 8013644:	f06f 0305 	mvn.w	r3, #5
 8013648:	61fb      	str	r3, [r7, #28]
 801364a:	e01f      	b.n	801368c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d103      	bne.n	801365a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8013652:	f06f 0303 	mvn.w	r3, #3
 8013656:	61fb      	str	r3, [r7, #28]
 8013658:	e018      	b.n	801368c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d009      	beq.n	8013674 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8013660:	69b8      	ldr	r0, [r7, #24]
 8013662:	f000 fd99 	bl	8014198 <xQueueGiveMutexRecursive>
 8013666:	4603      	mov	r3, r0
 8013668:	2b01      	cmp	r3, #1
 801366a:	d00f      	beq.n	801368c <osMutexRelease+0x90>
        stat = osErrorResource;
 801366c:	f06f 0302 	mvn.w	r3, #2
 8013670:	61fb      	str	r3, [r7, #28]
 8013672:	e00b      	b.n	801368c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013674:	2300      	movs	r3, #0
 8013676:	2200      	movs	r2, #0
 8013678:	2100      	movs	r1, #0
 801367a:	69b8      	ldr	r0, [r7, #24]
 801367c:	f000 fe66 	bl	801434c <xQueueGenericSend>
 8013680:	4603      	mov	r3, r0
 8013682:	2b01      	cmp	r3, #1
 8013684:	d002      	beq.n	801368c <osMutexRelease+0x90>
        stat = osErrorResource;
 8013686:	f06f 0302 	mvn.w	r3, #2
 801368a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801368c:	69fb      	ldr	r3, [r7, #28]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3720      	adds	r7, #32
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	20000470 	.word	0x20000470

0801369c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801369c:	b580      	push	{r7, lr}
 801369e:	b08c      	sub	sp, #48	; 0x30
 80136a0:	af02      	add	r7, sp, #8
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80136a8:	2300      	movs	r3, #0
 80136aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136ac:	f3ef 8305 	mrs	r3, IPSR
 80136b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80136b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f040 8087 	bne.w	80137c8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136ba:	f3ef 8310 	mrs	r3, PRIMASK
 80136be:	617b      	str	r3, [r7, #20]
  return(result);
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d105      	bne.n	80136d2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80136c6:	f3ef 8311 	mrs	r3, BASEPRI
 80136ca:	613b      	str	r3, [r7, #16]
  return(result);
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d003      	beq.n	80136da <osSemaphoreNew+0x3e>
 80136d2:	4b40      	ldr	r3, [pc, #256]	; (80137d4 <osSemaphoreNew+0x138>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d076      	beq.n	80137c8 <osSemaphoreNew+0x12c>
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d073      	beq.n	80137c8 <osSemaphoreNew+0x12c>
 80136e0:	68ba      	ldr	r2, [r7, #8]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d86f      	bhi.n	80137c8 <osSemaphoreNew+0x12c>
    mem = -1;
 80136e8:	f04f 33ff 	mov.w	r3, #4294967295
 80136ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d015      	beq.n	8013720 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d006      	beq.n	801370a <osSemaphoreNew+0x6e>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	2b4f      	cmp	r3, #79	; 0x4f
 8013702:	d902      	bls.n	801370a <osSemaphoreNew+0x6e>
        mem = 1;
 8013704:	2301      	movs	r3, #1
 8013706:	623b      	str	r3, [r7, #32]
 8013708:	e00c      	b.n	8013724 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d108      	bne.n	8013724 <osSemaphoreNew+0x88>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d104      	bne.n	8013724 <osSemaphoreNew+0x88>
          mem = 0;
 801371a:	2300      	movs	r3, #0
 801371c:	623b      	str	r3, [r7, #32]
 801371e:	e001      	b.n	8013724 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8013720:	2300      	movs	r3, #0
 8013722:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8013724:	6a3b      	ldr	r3, [r7, #32]
 8013726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801372a:	d04d      	beq.n	80137c8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d129      	bne.n	8013786 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	2b01      	cmp	r3, #1
 8013736:	d10b      	bne.n	8013750 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	689a      	ldr	r2, [r3, #8]
 801373c:	2303      	movs	r3, #3
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	4613      	mov	r3, r2
 8013742:	2200      	movs	r2, #0
 8013744:	2100      	movs	r1, #0
 8013746:	2001      	movs	r0, #1
 8013748:	f000 fbf8 	bl	8013f3c <xQueueGenericCreateStatic>
 801374c:	6278      	str	r0, [r7, #36]	; 0x24
 801374e:	e005      	b.n	801375c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8013750:	2203      	movs	r2, #3
 8013752:	2100      	movs	r1, #0
 8013754:	2001      	movs	r0, #1
 8013756:	f000 fc6e 	bl	8014036 <xQueueGenericCreate>
 801375a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375e:	2b00      	cmp	r3, #0
 8013760:	d022      	beq.n	80137a8 <osSemaphoreNew+0x10c>
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d01f      	beq.n	80137a8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013768:	2300      	movs	r3, #0
 801376a:	2200      	movs	r2, #0
 801376c:	2100      	movs	r1, #0
 801376e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013770:	f000 fdec 	bl	801434c <xQueueGenericSend>
 8013774:	4603      	mov	r3, r0
 8013776:	2b01      	cmp	r3, #1
 8013778:	d016      	beq.n	80137a8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801377a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801377c:	f001 fa8b 	bl	8014c96 <vQueueDelete>
            hSemaphore = NULL;
 8013780:	2300      	movs	r3, #0
 8013782:	627b      	str	r3, [r7, #36]	; 0x24
 8013784:	e010      	b.n	80137a8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8013786:	6a3b      	ldr	r3, [r7, #32]
 8013788:	2b01      	cmp	r3, #1
 801378a:	d108      	bne.n	801379e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	689b      	ldr	r3, [r3, #8]
 8013790:	461a      	mov	r2, r3
 8013792:	68b9      	ldr	r1, [r7, #8]
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f000 fd6b 	bl	8014270 <xQueueCreateCountingSemaphoreStatic>
 801379a:	6278      	str	r0, [r7, #36]	; 0x24
 801379c:	e004      	b.n	80137a8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801379e:	68b9      	ldr	r1, [r7, #8]
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f000 fd9e 	bl	80142e2 <xQueueCreateCountingSemaphore>
 80137a6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00c      	beq.n	80137c8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d003      	beq.n	80137bc <osSemaphoreNew+0x120>
          name = attr->name;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	61fb      	str	r3, [r7, #28]
 80137ba:	e001      	b.n	80137c0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80137bc:	2300      	movs	r3, #0
 80137be:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80137c0:	69f9      	ldr	r1, [r7, #28]
 80137c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137c4:	f001 fbb4 	bl	8014f30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3728      	adds	r7, #40	; 0x28
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20000470 	.word	0x20000470

080137d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80137d8:	b580      	push	{r7, lr}
 80137da:	b088      	sub	sp, #32
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d103      	bne.n	80137f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80137f0:	f06f 0303 	mvn.w	r3, #3
 80137f4:	61fb      	str	r3, [r7, #28]
 80137f6:	e04b      	b.n	8013890 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137f8:	f3ef 8305 	mrs	r3, IPSR
 80137fc:	617b      	str	r3, [r7, #20]
  return(result);
 80137fe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10f      	bne.n	8013824 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013804:	f3ef 8310 	mrs	r3, PRIMASK
 8013808:	613b      	str	r3, [r7, #16]
  return(result);
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d105      	bne.n	801381c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013810:	f3ef 8311 	mrs	r3, BASEPRI
 8013814:	60fb      	str	r3, [r7, #12]
  return(result);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d026      	beq.n	801386a <osSemaphoreAcquire+0x92>
 801381c:	4b1f      	ldr	r3, [pc, #124]	; (801389c <osSemaphoreAcquire+0xc4>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2b02      	cmp	r3, #2
 8013822:	d122      	bne.n	801386a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d003      	beq.n	8013832 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801382a:	f06f 0303 	mvn.w	r3, #3
 801382e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8013830:	e02d      	b.n	801388e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8013832:	2300      	movs	r3, #0
 8013834:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8013836:	f107 0308 	add.w	r3, r7, #8
 801383a:	461a      	mov	r2, r3
 801383c:	2100      	movs	r1, #0
 801383e:	69b8      	ldr	r0, [r7, #24]
 8013840:	f001 f9a6 	bl	8014b90 <xQueueReceiveFromISR>
 8013844:	4603      	mov	r3, r0
 8013846:	2b01      	cmp	r3, #1
 8013848:	d003      	beq.n	8013852 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801384a:	f06f 0302 	mvn.w	r3, #2
 801384e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8013850:	e01d      	b.n	801388e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d01a      	beq.n	801388e <osSemaphoreAcquire+0xb6>
 8013858:	4b11      	ldr	r3, [pc, #68]	; (80138a0 <osSemaphoreAcquire+0xc8>)
 801385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8013868:	e011      	b.n	801388e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801386a:	6839      	ldr	r1, [r7, #0]
 801386c:	69b8      	ldr	r0, [r7, #24]
 801386e:	f001 f87f 	bl	8014970 <xQueueSemaphoreTake>
 8013872:	4603      	mov	r3, r0
 8013874:	2b01      	cmp	r3, #1
 8013876:	d00b      	beq.n	8013890 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801387e:	f06f 0301 	mvn.w	r3, #1
 8013882:	61fb      	str	r3, [r7, #28]
 8013884:	e004      	b.n	8013890 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8013886:	f06f 0302 	mvn.w	r3, #2
 801388a:	61fb      	str	r3, [r7, #28]
 801388c:	e000      	b.n	8013890 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801388e:	bf00      	nop
      }
    }
  }

  return (stat);
 8013890:	69fb      	ldr	r3, [r7, #28]
}
 8013892:	4618      	mov	r0, r3
 8013894:	3720      	adds	r7, #32
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	20000470 	.word	0x20000470
 80138a0:	e000ed04 	.word	0xe000ed04

080138a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b088      	sub	sp, #32
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80138b0:	2300      	movs	r3, #0
 80138b2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d103      	bne.n	80138c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80138ba:	f06f 0303 	mvn.w	r3, #3
 80138be:	61fb      	str	r3, [r7, #28]
 80138c0:	e03e      	b.n	8013940 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138c2:	f3ef 8305 	mrs	r3, IPSR
 80138c6:	617b      	str	r3, [r7, #20]
  return(result);
 80138c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d10f      	bne.n	80138ee <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138ce:	f3ef 8310 	mrs	r3, PRIMASK
 80138d2:	613b      	str	r3, [r7, #16]
  return(result);
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d105      	bne.n	80138e6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80138da:	f3ef 8311 	mrs	r3, BASEPRI
 80138de:	60fb      	str	r3, [r7, #12]
  return(result);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d01e      	beq.n	8013924 <osSemaphoreRelease+0x80>
 80138e6:	4b19      	ldr	r3, [pc, #100]	; (801394c <osSemaphoreRelease+0xa8>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b02      	cmp	r3, #2
 80138ec:	d11a      	bne.n	8013924 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80138ee:	2300      	movs	r3, #0
 80138f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80138f2:	f107 0308 	add.w	r3, r7, #8
 80138f6:	4619      	mov	r1, r3
 80138f8:	69b8      	ldr	r0, [r7, #24]
 80138fa:	f000 fec5 	bl	8014688 <xQueueGiveFromISR>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b01      	cmp	r3, #1
 8013902:	d003      	beq.n	801390c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8013904:	f06f 0302 	mvn.w	r3, #2
 8013908:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801390a:	e018      	b.n	801393e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d015      	beq.n	801393e <osSemaphoreRelease+0x9a>
 8013912:	4b0f      	ldr	r3, [pc, #60]	; (8013950 <osSemaphoreRelease+0xac>)
 8013914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013918:	601a      	str	r2, [r3, #0]
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013922:	e00c      	b.n	801393e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013924:	2300      	movs	r3, #0
 8013926:	2200      	movs	r2, #0
 8013928:	2100      	movs	r1, #0
 801392a:	69b8      	ldr	r0, [r7, #24]
 801392c:	f000 fd0e 	bl	801434c <xQueueGenericSend>
 8013930:	4603      	mov	r3, r0
 8013932:	2b01      	cmp	r3, #1
 8013934:	d004      	beq.n	8013940 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8013936:	f06f 0302 	mvn.w	r3, #2
 801393a:	61fb      	str	r3, [r7, #28]
 801393c:	e000      	b.n	8013940 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801393e:	bf00      	nop
    }
  }

  return (stat);
 8013940:	69fb      	ldr	r3, [r7, #28]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3720      	adds	r7, #32
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	20000470 	.word	0x20000470
 8013950:	e000ed04 	.word	0xe000ed04

08013954 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8013954:	b580      	push	{r7, lr}
 8013956:	b088      	sub	sp, #32
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013960:	f3ef 8305 	mrs	r3, IPSR
 8013964:	617b      	str	r3, [r7, #20]
  return(result);
 8013966:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013968:	2b00      	cmp	r3, #0
 801396a:	d10f      	bne.n	801398c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801396c:	f3ef 8310 	mrs	r3, PRIMASK
 8013970:	613b      	str	r3, [r7, #16]
  return(result);
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d105      	bne.n	8013984 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013978:	f3ef 8311 	mrs	r3, BASEPRI
 801397c:	60fb      	str	r3, [r7, #12]
  return(result);
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d007      	beq.n	8013994 <osSemaphoreDelete+0x40>
 8013984:	4b0d      	ldr	r3, [pc, #52]	; (80139bc <osSemaphoreDelete+0x68>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b02      	cmp	r3, #2
 801398a:	d103      	bne.n	8013994 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 801398c:	f06f 0305 	mvn.w	r3, #5
 8013990:	61fb      	str	r3, [r7, #28]
 8013992:	e00e      	b.n	80139b2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d103      	bne.n	80139a2 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801399a:	f06f 0303 	mvn.w	r3, #3
 801399e:	61fb      	str	r3, [r7, #28]
 80139a0:	e007      	b.n	80139b2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80139a2:	69b8      	ldr	r0, [r7, #24]
 80139a4:	f001 faec 	bl	8014f80 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80139ac:	69b8      	ldr	r0, [r7, #24]
 80139ae:	f001 f972 	bl	8014c96 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80139b2:	69fb      	ldr	r3, [r7, #28]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3720      	adds	r7, #32
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	20000470 	.word	0x20000470

080139c0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08c      	sub	sp, #48	; 0x30
 80139c4:	af02      	add	r7, sp, #8
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80139cc:	2300      	movs	r3, #0
 80139ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139d0:	f3ef 8305 	mrs	r3, IPSR
 80139d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80139d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d170      	bne.n	8013abe <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139dc:	f3ef 8310 	mrs	r3, PRIMASK
 80139e0:	617b      	str	r3, [r7, #20]
  return(result);
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d105      	bne.n	80139f4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80139e8:	f3ef 8311 	mrs	r3, BASEPRI
 80139ec:	613b      	str	r3, [r7, #16]
  return(result);
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d003      	beq.n	80139fc <osMessageQueueNew+0x3c>
 80139f4:	4b34      	ldr	r3, [pc, #208]	; (8013ac8 <osMessageQueueNew+0x108>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b02      	cmp	r3, #2
 80139fa:	d060      	beq.n	8013abe <osMessageQueueNew+0xfe>
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d05d      	beq.n	8013abe <osMessageQueueNew+0xfe>
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d05a      	beq.n	8013abe <osMessageQueueNew+0xfe>
    mem = -1;
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d029      	beq.n	8013a68 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d012      	beq.n	8013a42 <osMessageQueueNew+0x82>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	2b4f      	cmp	r3, #79	; 0x4f
 8013a22:	d90e      	bls.n	8013a42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00a      	beq.n	8013a42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	695a      	ldr	r2, [r3, #20]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	fb01 f303 	mul.w	r3, r1, r3
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d302      	bcc.n	8013a42 <osMessageQueueNew+0x82>
        mem = 1;
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	623b      	str	r3, [r7, #32]
 8013a40:	e014      	b.n	8013a6c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d110      	bne.n	8013a6c <osMessageQueueNew+0xac>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	68db      	ldr	r3, [r3, #12]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10c      	bne.n	8013a6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d108      	bne.n	8013a6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	695b      	ldr	r3, [r3, #20]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d104      	bne.n	8013a6c <osMessageQueueNew+0xac>
          mem = 0;
 8013a62:	2300      	movs	r3, #0
 8013a64:	623b      	str	r3, [r7, #32]
 8013a66:	e001      	b.n	8013a6c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013a6c:	6a3b      	ldr	r3, [r7, #32]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d10c      	bne.n	8013a8c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	691a      	ldr	r2, [r3, #16]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6899      	ldr	r1, [r3, #8]
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	460b      	mov	r3, r1
 8013a80:	68b9      	ldr	r1, [r7, #8]
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f000 fa5a 	bl	8013f3c <xQueueGenericCreateStatic>
 8013a88:	6278      	str	r0, [r7, #36]	; 0x24
 8013a8a:	e008      	b.n	8013a9e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013a8c:	6a3b      	ldr	r3, [r7, #32]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d105      	bne.n	8013a9e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013a92:	2200      	movs	r2, #0
 8013a94:	68b9      	ldr	r1, [r7, #8]
 8013a96:	68f8      	ldr	r0, [r7, #12]
 8013a98:	f000 facd 	bl	8014036 <xQueueGenericCreate>
 8013a9c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00c      	beq.n	8013abe <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d003      	beq.n	8013ab2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	61fb      	str	r3, [r7, #28]
 8013ab0:	e001      	b.n	8013ab6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013ab6:	69f9      	ldr	r1, [r7, #28]
 8013ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aba:	f001 fa39 	bl	8014f30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3728      	adds	r7, #40	; 0x28
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	20000470 	.word	0x20000470

08013acc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08a      	sub	sp, #40	; 0x28
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	603b      	str	r3, [r7, #0]
 8013ad8:	4613      	mov	r3, r2
 8013ada:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ae4:	f3ef 8305 	mrs	r3, IPSR
 8013ae8:	61fb      	str	r3, [r7, #28]
  return(result);
 8013aea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10f      	bne.n	8013b10 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013af0:	f3ef 8310 	mrs	r3, PRIMASK
 8013af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d105      	bne.n	8013b08 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013afc:	f3ef 8311 	mrs	r3, BASEPRI
 8013b00:	617b      	str	r3, [r7, #20]
  return(result);
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d02c      	beq.n	8013b62 <osMessageQueuePut+0x96>
 8013b08:	4b28      	ldr	r3, [pc, #160]	; (8013bac <osMessageQueuePut+0xe0>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	2b02      	cmp	r3, #2
 8013b0e:	d128      	bne.n	8013b62 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b10:	6a3b      	ldr	r3, [r7, #32]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d005      	beq.n	8013b22 <osMessageQueuePut+0x56>
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <osMessageQueuePut+0x56>
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d003      	beq.n	8013b2a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013b22:	f06f 0303 	mvn.w	r3, #3
 8013b26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b28:	e039      	b.n	8013b9e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013b2e:	f107 0210 	add.w	r2, r7, #16
 8013b32:	2300      	movs	r3, #0
 8013b34:	68b9      	ldr	r1, [r7, #8]
 8013b36:	6a38      	ldr	r0, [r7, #32]
 8013b38:	f000 fd0a 	bl	8014550 <xQueueGenericSendFromISR>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d003      	beq.n	8013b4a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013b42:	f06f 0302 	mvn.w	r3, #2
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b48:	e029      	b.n	8013b9e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d026      	beq.n	8013b9e <osMessageQueuePut+0xd2>
 8013b50:	4b17      	ldr	r3, [pc, #92]	; (8013bb0 <osMessageQueuePut+0xe4>)
 8013b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b56:	601a      	str	r2, [r3, #0]
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b60:	e01d      	b.n	8013b9e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <osMessageQueuePut+0xa2>
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d103      	bne.n	8013b76 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013b6e:	f06f 0303 	mvn.w	r3, #3
 8013b72:	627b      	str	r3, [r7, #36]	; 0x24
 8013b74:	e014      	b.n	8013ba0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013b76:	2300      	movs	r3, #0
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	6a38      	ldr	r0, [r7, #32]
 8013b7e:	f000 fbe5 	bl	801434c <xQueueGenericSend>
 8013b82:	4603      	mov	r3, r0
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d00b      	beq.n	8013ba0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d003      	beq.n	8013b96 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013b8e:	f06f 0301 	mvn.w	r3, #1
 8013b92:	627b      	str	r3, [r7, #36]	; 0x24
 8013b94:	e004      	b.n	8013ba0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013b96:	f06f 0302 	mvn.w	r3, #2
 8013b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8013b9c:	e000      	b.n	8013ba0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3728      	adds	r7, #40	; 0x28
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	20000470 	.word	0x20000470
 8013bb0:	e000ed04 	.word	0xe000ed04

08013bb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b08a      	sub	sp, #40	; 0x28
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	60b9      	str	r1, [r7, #8]
 8013bbe:	607a      	str	r2, [r7, #4]
 8013bc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013bca:	f3ef 8305 	mrs	r3, IPSR
 8013bce:	61fb      	str	r3, [r7, #28]
  return(result);
 8013bd0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10f      	bne.n	8013bf6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8013bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d105      	bne.n	8013bee <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013be2:	f3ef 8311 	mrs	r3, BASEPRI
 8013be6:	617b      	str	r3, [r7, #20]
  return(result);
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d02c      	beq.n	8013c48 <osMessageQueueGet+0x94>
 8013bee:	4b28      	ldr	r3, [pc, #160]	; (8013c90 <osMessageQueueGet+0xdc>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2b02      	cmp	r3, #2
 8013bf4:	d128      	bne.n	8013c48 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013bf6:	6a3b      	ldr	r3, [r7, #32]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d005      	beq.n	8013c08 <osMessageQueueGet+0x54>
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <osMessageQueueGet+0x54>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d003      	beq.n	8013c10 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013c08:	f06f 0303 	mvn.w	r3, #3
 8013c0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c0e:	e038      	b.n	8013c82 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013c10:	2300      	movs	r3, #0
 8013c12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013c14:	f107 0310 	add.w	r3, r7, #16
 8013c18:	461a      	mov	r2, r3
 8013c1a:	68b9      	ldr	r1, [r7, #8]
 8013c1c:	6a38      	ldr	r0, [r7, #32]
 8013c1e:	f000 ffb7 	bl	8014b90 <xQueueReceiveFromISR>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b01      	cmp	r3, #1
 8013c26:	d003      	beq.n	8013c30 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013c28:	f06f 0302 	mvn.w	r3, #2
 8013c2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c2e:	e028      	b.n	8013c82 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d025      	beq.n	8013c82 <osMessageQueueGet+0xce>
 8013c36:	4b17      	ldr	r3, [pc, #92]	; (8013c94 <osMessageQueueGet+0xe0>)
 8013c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c3c:	601a      	str	r2, [r3, #0]
 8013c3e:	f3bf 8f4f 	dsb	sy
 8013c42:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c46:	e01c      	b.n	8013c82 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d002      	beq.n	8013c54 <osMessageQueueGet+0xa0>
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d103      	bne.n	8013c5c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013c54:	f06f 0303 	mvn.w	r3, #3
 8013c58:	627b      	str	r3, [r7, #36]	; 0x24
 8013c5a:	e013      	b.n	8013c84 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	68b9      	ldr	r1, [r7, #8]
 8013c60:	6a38      	ldr	r0, [r7, #32]
 8013c62:	f000 fda3 	bl	80147ac <xQueueReceive>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d00b      	beq.n	8013c84 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d003      	beq.n	8013c7a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013c72:	f06f 0301 	mvn.w	r3, #1
 8013c76:	627b      	str	r3, [r7, #36]	; 0x24
 8013c78:	e004      	b.n	8013c84 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013c7a:	f06f 0302 	mvn.w	r3, #2
 8013c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8013c80:	e000      	b.n	8013c84 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c82:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3728      	adds	r7, #40	; 0x28
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	20000470 	.word	0x20000470
 8013c94:	e000ed04 	.word	0xe000ed04

08013c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013c98:	b480      	push	{r7}
 8013c9a:	b085      	sub	sp, #20
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4a07      	ldr	r2, [pc, #28]	; (8013cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8013ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	4a06      	ldr	r2, [pc, #24]	; (8013cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8013cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2280      	movs	r2, #128	; 0x80
 8013cb4:	601a      	str	r2, [r3, #0]
}
 8013cb6:	bf00      	nop
 8013cb8:	3714      	adds	r7, #20
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	20000474 	.word	0x20000474
 8013cc8:	200004d0 	.word	0x200004d0

08013ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	4a07      	ldr	r2, [pc, #28]	; (8013cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8013cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	4a06      	ldr	r2, [pc, #24]	; (8013cfc <vApplicationGetTimerTaskMemory+0x30>)
 8013ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013cea:	601a      	str	r2, [r3, #0]
}
 8013cec:	bf00      	nop
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	200006d0 	.word	0x200006d0
 8013cfc:	2000072c 	.word	0x2000072c

08013d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f103 0208 	add.w	r2, r3, #8
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f04f 32ff 	mov.w	r2, #4294967295
 8013d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f103 0208 	add.w	r2, r3, #8
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f103 0208 	add.w	r2, r3, #8
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d34:	bf00      	nop
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d4e:	bf00      	nop
 8013d50:	370c      	adds	r7, #12
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr

08013d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d5a:	b480      	push	{r7}
 8013d5c:	b085      	sub	sp, #20
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	689a      	ldr	r2, [r3, #8]
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	1c5a      	adds	r2, r3, #1
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	601a      	str	r2, [r3, #0]
}
 8013d96:	bf00      	nop
 8013d98:	3714      	adds	r7, #20
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013da2:	b480      	push	{r7}
 8013da4:	b085      	sub	sp, #20
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
 8013daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db8:	d103      	bne.n	8013dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	691b      	ldr	r3, [r3, #16]
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	e00c      	b.n	8013ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3308      	adds	r3, #8
 8013dc6:	60fb      	str	r3, [r7, #12]
 8013dc8:	e002      	b.n	8013dd0 <vListInsert+0x2e>
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	685b      	ldr	r3, [r3, #4]
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	68ba      	ldr	r2, [r7, #8]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d2f6      	bcs.n	8013dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	685a      	ldr	r2, [r3, #4]
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	683a      	ldr	r2, [r7, #0]
 8013dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	683a      	ldr	r2, [r7, #0]
 8013df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	1c5a      	adds	r2, r3, #1
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	601a      	str	r2, [r3, #0]
}
 8013e08:	bf00      	nop
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr

08013e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e14:	b480      	push	{r7}
 8013e16:	b085      	sub	sp, #20
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	687a      	ldr	r2, [r7, #4]
 8013e28:	6892      	ldr	r2, [r2, #8]
 8013e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	6852      	ldr	r2, [r2, #4]
 8013e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d103      	bne.n	8013e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	689a      	ldr	r2, [r3, #8]
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	1e5a      	subs	r2, r3, #1
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3714      	adds	r7, #20
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10b      	bne.n	8013e94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e80:	b672      	cpsid	i
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	b662      	cpsie	i
 8013e90:	60bb      	str	r3, [r7, #8]
 8013e92:	e7fe      	b.n	8013e92 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013e94:	f002 fdd8 	bl	8016a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681a      	ldr	r2, [r3, #0]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ea0:	68f9      	ldr	r1, [r7, #12]
 8013ea2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ea4:	fb01 f303 	mul.w	r3, r1, r3
 8013ea8:	441a      	add	r2, r3
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	68f9      	ldr	r1, [r7, #12]
 8013ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013eca:	fb01 f303 	mul.w	r3, r1, r3
 8013ece:	441a      	add	r2, r3
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	22ff      	movs	r2, #255	; 0xff
 8013ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	22ff      	movs	r2, #255	; 0xff
 8013ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d114      	bne.n	8013f14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d01a      	beq.n	8013f28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	3310      	adds	r3, #16
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f001 fd9c 	bl	8015a34 <xTaskRemoveFromEventList>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d012      	beq.n	8013f28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f02:	4b0d      	ldr	r3, [pc, #52]	; (8013f38 <xQueueGenericReset+0xd0>)
 8013f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f08:	601a      	str	r2, [r3, #0]
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	e009      	b.n	8013f28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3310      	adds	r3, #16
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7ff fef1 	bl	8013d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	3324      	adds	r3, #36	; 0x24
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7ff feec 	bl	8013d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f28:	f002 fdc0 	bl	8016aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f2c:	2301      	movs	r3, #1
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	e000ed04 	.word	0xe000ed04

08013f3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b08e      	sub	sp, #56	; 0x38
 8013f40:	af02      	add	r7, sp, #8
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d10b      	bne.n	8013f68 <xQueueGenericCreateStatic+0x2c>
 8013f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f54:	b672      	cpsid	i
 8013f56:	f383 8811 	msr	BASEPRI, r3
 8013f5a:	f3bf 8f6f 	isb	sy
 8013f5e:	f3bf 8f4f 	dsb	sy
 8013f62:	b662      	cpsie	i
 8013f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f66:	e7fe      	b.n	8013f66 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10b      	bne.n	8013f86 <xQueueGenericCreateStatic+0x4a>
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	b672      	cpsid	i
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	b662      	cpsie	i
 8013f82:	627b      	str	r3, [r7, #36]	; 0x24
 8013f84:	e7fe      	b.n	8013f84 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d002      	beq.n	8013f92 <xQueueGenericCreateStatic+0x56>
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <xQueueGenericCreateStatic+0x5a>
 8013f92:	2301      	movs	r3, #1
 8013f94:	e000      	b.n	8013f98 <xQueueGenericCreateStatic+0x5c>
 8013f96:	2300      	movs	r3, #0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d10b      	bne.n	8013fb4 <xQueueGenericCreateStatic+0x78>
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	b672      	cpsid	i
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	b662      	cpsie	i
 8013fb0:	623b      	str	r3, [r7, #32]
 8013fb2:	e7fe      	b.n	8013fb2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d102      	bne.n	8013fc0 <xQueueGenericCreateStatic+0x84>
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d101      	bne.n	8013fc4 <xQueueGenericCreateStatic+0x88>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e000      	b.n	8013fc6 <xQueueGenericCreateStatic+0x8a>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d10b      	bne.n	8013fe2 <xQueueGenericCreateStatic+0xa6>
 8013fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fce:	b672      	cpsid	i
 8013fd0:	f383 8811 	msr	BASEPRI, r3
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	f3bf 8f4f 	dsb	sy
 8013fdc:	b662      	cpsie	i
 8013fde:	61fb      	str	r3, [r7, #28]
 8013fe0:	e7fe      	b.n	8013fe0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013fe2:	2350      	movs	r3, #80	; 0x50
 8013fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2b50      	cmp	r3, #80	; 0x50
 8013fea:	d00b      	beq.n	8014004 <xQueueGenericCreateStatic+0xc8>
 8013fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff0:	b672      	cpsid	i
 8013ff2:	f383 8811 	msr	BASEPRI, r3
 8013ff6:	f3bf 8f6f 	isb	sy
 8013ffa:	f3bf 8f4f 	dsb	sy
 8013ffe:	b662      	cpsie	i
 8014000:	61bb      	str	r3, [r7, #24]
 8014002:	e7fe      	b.n	8014002 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014004:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400c:	2b00      	cmp	r3, #0
 801400e:	d00d      	beq.n	801402c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	2201      	movs	r2, #1
 8014014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014018:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	4613      	mov	r3, r2
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	68b9      	ldr	r1, [r7, #8]
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	f000 f846 	bl	80140b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801402e:	4618      	mov	r0, r3
 8014030:	3730      	adds	r7, #48	; 0x30
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014036:	b580      	push	{r7, lr}
 8014038:	b08a      	sub	sp, #40	; 0x28
 801403a:	af02      	add	r7, sp, #8
 801403c:	60f8      	str	r0, [r7, #12]
 801403e:	60b9      	str	r1, [r7, #8]
 8014040:	4613      	mov	r3, r2
 8014042:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d10b      	bne.n	8014062 <xQueueGenericCreate+0x2c>
 801404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801404e:	b672      	cpsid	i
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	b662      	cpsie	i
 801405e:	613b      	str	r3, [r7, #16]
 8014060:	e7fe      	b.n	8014060 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014068:	2300      	movs	r3, #0
 801406a:	61fb      	str	r3, [r7, #28]
 801406c:	e004      	b.n	8014078 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	68ba      	ldr	r2, [r7, #8]
 8014072:	fb02 f303 	mul.w	r3, r2, r3
 8014076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	3350      	adds	r3, #80	; 0x50
 801407c:	4618      	mov	r0, r3
 801407e:	f002 fe05 	bl	8016c8c <pvPortMalloc>
 8014082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d011      	beq.n	80140ae <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	3350      	adds	r3, #80	; 0x50
 8014092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	2200      	movs	r2, #0
 8014098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801409c:	79fa      	ldrb	r2, [r7, #7]
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	4613      	mov	r3, r2
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	68b9      	ldr	r1, [r7, #8]
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f000 f805 	bl	80140b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140ae:	69bb      	ldr	r3, [r7, #24]
	}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3720      	adds	r7, #32
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
 80140c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d103      	bne.n	80140d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	69ba      	ldr	r2, [r7, #24]
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	e002      	b.n	80140da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	68ba      	ldr	r2, [r7, #8]
 80140e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80140e6:	2101      	movs	r1, #1
 80140e8:	69b8      	ldr	r0, [r7, #24]
 80140ea:	f7ff febd 	bl	8013e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	78fa      	ldrb	r2, [r7, #3]
 80140f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80140f6:	bf00      	nop
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b082      	sub	sp, #8
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d00e      	beq.n	801412a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2200      	movs	r2, #0
 8014116:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2200      	movs	r2, #0
 801411c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801411e:	2300      	movs	r3, #0
 8014120:	2200      	movs	r2, #0
 8014122:	2100      	movs	r1, #0
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 f911 	bl	801434c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801412a:	bf00      	nop
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}

08014132 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014132:	b580      	push	{r7, lr}
 8014134:	b086      	sub	sp, #24
 8014136:	af00      	add	r7, sp, #0
 8014138:	4603      	mov	r3, r0
 801413a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801413c:	2301      	movs	r3, #1
 801413e:	617b      	str	r3, [r7, #20]
 8014140:	2300      	movs	r3, #0
 8014142:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014144:	79fb      	ldrb	r3, [r7, #7]
 8014146:	461a      	mov	r2, r3
 8014148:	6939      	ldr	r1, [r7, #16]
 801414a:	6978      	ldr	r0, [r7, #20]
 801414c:	f7ff ff73 	bl	8014036 <xQueueGenericCreate>
 8014150:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f7ff ffd3 	bl	80140fe <prvInitialiseMutex>

		return xNewQueue;
 8014158:	68fb      	ldr	r3, [r7, #12]
	}
 801415a:	4618      	mov	r0, r3
 801415c:	3718      	adds	r7, #24
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014162:	b580      	push	{r7, lr}
 8014164:	b088      	sub	sp, #32
 8014166:	af02      	add	r7, sp, #8
 8014168:	4603      	mov	r3, r0
 801416a:	6039      	str	r1, [r7, #0]
 801416c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801416e:	2301      	movs	r3, #1
 8014170:	617b      	str	r3, [r7, #20]
 8014172:	2300      	movs	r3, #0
 8014174:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014176:	79fb      	ldrb	r3, [r7, #7]
 8014178:	9300      	str	r3, [sp, #0]
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	2200      	movs	r2, #0
 801417e:	6939      	ldr	r1, [r7, #16]
 8014180:	6978      	ldr	r0, [r7, #20]
 8014182:	f7ff fedb 	bl	8013f3c <xQueueGenericCreateStatic>
 8014186:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f7ff ffb8 	bl	80140fe <prvInitialiseMutex>

		return xNewQueue;
 801418e:	68fb      	ldr	r3, [r7, #12]
	}
 8014190:	4618      	mov	r0, r3
 8014192:	3718      	adds	r7, #24
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014198:	b590      	push	{r4, r7, lr}
 801419a:	b087      	sub	sp, #28
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d10b      	bne.n	80141c2 <xQueueGiveMutexRecursive+0x2a>
 80141aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ae:	b672      	cpsid	i
 80141b0:	f383 8811 	msr	BASEPRI, r3
 80141b4:	f3bf 8f6f 	isb	sy
 80141b8:	f3bf 8f4f 	dsb	sy
 80141bc:	b662      	cpsie	i
 80141be:	60fb      	str	r3, [r7, #12]
 80141c0:	e7fe      	b.n	80141c0 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	689c      	ldr	r4, [r3, #8]
 80141c6:	f001 fdf3 	bl	8015db0 <xTaskGetCurrentTaskHandle>
 80141ca:	4603      	mov	r3, r0
 80141cc:	429c      	cmp	r4, r3
 80141ce:	d111      	bne.n	80141f4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	1e5a      	subs	r2, r3, #1
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d105      	bne.n	80141ee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80141e2:	2300      	movs	r3, #0
 80141e4:	2200      	movs	r2, #0
 80141e6:	2100      	movs	r1, #0
 80141e8:	6938      	ldr	r0, [r7, #16]
 80141ea:	f000 f8af 	bl	801434c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80141ee:	2301      	movs	r3, #1
 80141f0:	617b      	str	r3, [r7, #20]
 80141f2:	e001      	b.n	80141f8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80141f4:	2300      	movs	r3, #0
 80141f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80141f8:	697b      	ldr	r3, [r7, #20]
	}
 80141fa:	4618      	mov	r0, r3
 80141fc:	371c      	adds	r7, #28
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd90      	pop	{r4, r7, pc}

08014202 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8014202:	b590      	push	{r4, r7, lr}
 8014204:	b087      	sub	sp, #28
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
 801420a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10b      	bne.n	801422e <xQueueTakeMutexRecursive+0x2c>
 8014216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801421a:	b672      	cpsid	i
 801421c:	f383 8811 	msr	BASEPRI, r3
 8014220:	f3bf 8f6f 	isb	sy
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	b662      	cpsie	i
 801422a:	60fb      	str	r3, [r7, #12]
 801422c:	e7fe      	b.n	801422c <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	689c      	ldr	r4, [r3, #8]
 8014232:	f001 fdbd 	bl	8015db0 <xTaskGetCurrentTaskHandle>
 8014236:	4603      	mov	r3, r0
 8014238:	429c      	cmp	r4, r3
 801423a:	d107      	bne.n	801424c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	1c5a      	adds	r2, r3, #1
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014246:	2301      	movs	r3, #1
 8014248:	617b      	str	r3, [r7, #20]
 801424a:	e00c      	b.n	8014266 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801424c:	6839      	ldr	r1, [r7, #0]
 801424e:	6938      	ldr	r0, [r7, #16]
 8014250:	f000 fb8e 	bl	8014970 <xQueueSemaphoreTake>
 8014254:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d004      	beq.n	8014266 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	68db      	ldr	r3, [r3, #12]
 8014260:	1c5a      	adds	r2, r3, #1
 8014262:	693b      	ldr	r3, [r7, #16]
 8014264:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014266:	697b      	ldr	r3, [r7, #20]
	}
 8014268:	4618      	mov	r0, r3
 801426a:	371c      	adds	r7, #28
 801426c:	46bd      	mov	sp, r7
 801426e:	bd90      	pop	{r4, r7, pc}

08014270 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014270:	b580      	push	{r7, lr}
 8014272:	b08a      	sub	sp, #40	; 0x28
 8014274:	af02      	add	r7, sp, #8
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d10b      	bne.n	801429a <xQueueCreateCountingSemaphoreStatic+0x2a>
 8014282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014286:	b672      	cpsid	i
 8014288:	f383 8811 	msr	BASEPRI, r3
 801428c:	f3bf 8f6f 	isb	sy
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	b662      	cpsie	i
 8014296:	61bb      	str	r3, [r7, #24]
 8014298:	e7fe      	b.n	8014298 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801429a:	68ba      	ldr	r2, [r7, #8]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d90b      	bls.n	80142ba <xQueueCreateCountingSemaphoreStatic+0x4a>
 80142a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a6:	b672      	cpsid	i
 80142a8:	f383 8811 	msr	BASEPRI, r3
 80142ac:	f3bf 8f6f 	isb	sy
 80142b0:	f3bf 8f4f 	dsb	sy
 80142b4:	b662      	cpsie	i
 80142b6:	617b      	str	r3, [r7, #20]
 80142b8:	e7fe      	b.n	80142b8 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80142ba:	2302      	movs	r3, #2
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	2100      	movs	r1, #0
 80142c4:	68f8      	ldr	r0, [r7, #12]
 80142c6:	f7ff fe39 	bl	8013f3c <xQueueGenericCreateStatic>
 80142ca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	68ba      	ldr	r2, [r7, #8]
 80142d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80142d8:	69fb      	ldr	r3, [r7, #28]
	}
 80142da:	4618      	mov	r0, r3
 80142dc:	3720      	adds	r7, #32
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b086      	sub	sp, #24
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
 80142ea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10b      	bne.n	801430a <xQueueCreateCountingSemaphore+0x28>
 80142f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f6:	b672      	cpsid	i
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	b662      	cpsie	i
 8014306:	613b      	str	r3, [r7, #16]
 8014308:	e7fe      	b.n	8014308 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801430a:	683a      	ldr	r2, [r7, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	429a      	cmp	r2, r3
 8014310:	d90b      	bls.n	801432a <xQueueCreateCountingSemaphore+0x48>
 8014312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014316:	b672      	cpsid	i
 8014318:	f383 8811 	msr	BASEPRI, r3
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	f3bf 8f4f 	dsb	sy
 8014324:	b662      	cpsie	i
 8014326:	60fb      	str	r3, [r7, #12]
 8014328:	e7fe      	b.n	8014328 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801432a:	2202      	movs	r2, #2
 801432c:	2100      	movs	r1, #0
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f7ff fe81 	bl	8014036 <xQueueGenericCreate>
 8014334:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014342:	697b      	ldr	r3, [r7, #20]
	}
 8014344:	4618      	mov	r0, r3
 8014346:	3718      	adds	r7, #24
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}

0801434c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b08e      	sub	sp, #56	; 0x38
 8014350:	af00      	add	r7, sp, #0
 8014352:	60f8      	str	r0, [r7, #12]
 8014354:	60b9      	str	r1, [r7, #8]
 8014356:	607a      	str	r2, [r7, #4]
 8014358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801435a:	2300      	movs	r3, #0
 801435c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014364:	2b00      	cmp	r3, #0
 8014366:	d10b      	bne.n	8014380 <xQueueGenericSend+0x34>
 8014368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436c:	b672      	cpsid	i
 801436e:	f383 8811 	msr	BASEPRI, r3
 8014372:	f3bf 8f6f 	isb	sy
 8014376:	f3bf 8f4f 	dsb	sy
 801437a:	b662      	cpsie	i
 801437c:	62bb      	str	r3, [r7, #40]	; 0x28
 801437e:	e7fe      	b.n	801437e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d103      	bne.n	801438e <xQueueGenericSend+0x42>
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801438a:	2b00      	cmp	r3, #0
 801438c:	d101      	bne.n	8014392 <xQueueGenericSend+0x46>
 801438e:	2301      	movs	r3, #1
 8014390:	e000      	b.n	8014394 <xQueueGenericSend+0x48>
 8014392:	2300      	movs	r3, #0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d10b      	bne.n	80143b0 <xQueueGenericSend+0x64>
 8014398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439c:	b672      	cpsid	i
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	b662      	cpsie	i
 80143ac:	627b      	str	r3, [r7, #36]	; 0x24
 80143ae:	e7fe      	b.n	80143ae <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d103      	bne.n	80143be <xQueueGenericSend+0x72>
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d101      	bne.n	80143c2 <xQueueGenericSend+0x76>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <xQueueGenericSend+0x78>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10b      	bne.n	80143e0 <xQueueGenericSend+0x94>
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	b672      	cpsid	i
 80143ce:	f383 8811 	msr	BASEPRI, r3
 80143d2:	f3bf 8f6f 	isb	sy
 80143d6:	f3bf 8f4f 	dsb	sy
 80143da:	b662      	cpsie	i
 80143dc:	623b      	str	r3, [r7, #32]
 80143de:	e7fe      	b.n	80143de <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80143e0:	f001 fcf6 	bl	8015dd0 <xTaskGetSchedulerState>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <xQueueGenericSend+0xa4>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d101      	bne.n	80143f4 <xQueueGenericSend+0xa8>
 80143f0:	2301      	movs	r3, #1
 80143f2:	e000      	b.n	80143f6 <xQueueGenericSend+0xaa>
 80143f4:	2300      	movs	r3, #0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d10b      	bne.n	8014412 <xQueueGenericSend+0xc6>
 80143fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fe:	b672      	cpsid	i
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	b662      	cpsie	i
 801440e:	61fb      	str	r3, [r7, #28]
 8014410:	e7fe      	b.n	8014410 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014412:	f002 fb19 	bl	8016a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801441e:	429a      	cmp	r2, r3
 8014420:	d302      	bcc.n	8014428 <xQueueGenericSend+0xdc>
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	2b02      	cmp	r3, #2
 8014426:	d129      	bne.n	801447c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014428:	683a      	ldr	r2, [r7, #0]
 801442a:	68b9      	ldr	r1, [r7, #8]
 801442c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801442e:	f000 fc6e 	bl	8014d0e <prvCopyDataToQueue>
 8014432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014438:	2b00      	cmp	r3, #0
 801443a:	d010      	beq.n	801445e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443e:	3324      	adds	r3, #36	; 0x24
 8014440:	4618      	mov	r0, r3
 8014442:	f001 faf7 	bl	8015a34 <xTaskRemoveFromEventList>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d013      	beq.n	8014474 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801444c:	4b3f      	ldr	r3, [pc, #252]	; (801454c <xQueueGenericSend+0x200>)
 801444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014452:	601a      	str	r2, [r3, #0]
 8014454:	f3bf 8f4f 	dsb	sy
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	e00a      	b.n	8014474 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014460:	2b00      	cmp	r3, #0
 8014462:	d007      	beq.n	8014474 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014464:	4b39      	ldr	r3, [pc, #228]	; (801454c <xQueueGenericSend+0x200>)
 8014466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801446a:	601a      	str	r2, [r3, #0]
 801446c:	f3bf 8f4f 	dsb	sy
 8014470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014474:	f002 fb1a 	bl	8016aac <vPortExitCritical>
				return pdPASS;
 8014478:	2301      	movs	r3, #1
 801447a:	e063      	b.n	8014544 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d103      	bne.n	801448a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014482:	f002 fb13 	bl	8016aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014486:	2300      	movs	r3, #0
 8014488:	e05c      	b.n	8014544 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801448c:	2b00      	cmp	r3, #0
 801448e:	d106      	bne.n	801449e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014490:	f107 0314 	add.w	r3, r7, #20
 8014494:	4618      	mov	r0, r3
 8014496:	f001 fb31 	bl	8015afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801449a:	2301      	movs	r3, #1
 801449c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801449e:	f002 fb05 	bl	8016aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80144a2:	f001 f88f 	bl	80155c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80144a6:	f002 facf 	bl	8016a48 <vPortEnterCritical>
 80144aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144b0:	b25b      	sxtb	r3, r3
 80144b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144b6:	d103      	bne.n	80144c0 <xQueueGenericSend+0x174>
 80144b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144c6:	b25b      	sxtb	r3, r3
 80144c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144cc:	d103      	bne.n	80144d6 <xQueueGenericSend+0x18a>
 80144ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d0:	2200      	movs	r2, #0
 80144d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80144d6:	f002 fae9 	bl	8016aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80144da:	1d3a      	adds	r2, r7, #4
 80144dc:	f107 0314 	add.w	r3, r7, #20
 80144e0:	4611      	mov	r1, r2
 80144e2:	4618      	mov	r0, r3
 80144e4:	f001 fb20 	bl	8015b28 <xTaskCheckForTimeOut>
 80144e8:	4603      	mov	r3, r0
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d124      	bne.n	8014538 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80144ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144f0:	f000 fd05 	bl	8014efe <prvIsQueueFull>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d018      	beq.n	801452c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	3310      	adds	r3, #16
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	4611      	mov	r1, r2
 8014502:	4618      	mov	r0, r3
 8014504:	f001 fa44 	bl	8015990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801450a:	f000 fc90 	bl	8014e2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801450e:	f001 f867 	bl	80155e0 <xTaskResumeAll>
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	f47f af7c 	bne.w	8014412 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801451a:	4b0c      	ldr	r3, [pc, #48]	; (801454c <xQueueGenericSend+0x200>)
 801451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014520:	601a      	str	r2, [r3, #0]
 8014522:	f3bf 8f4f 	dsb	sy
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	e772      	b.n	8014412 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801452e:	f000 fc7e 	bl	8014e2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014532:	f001 f855 	bl	80155e0 <xTaskResumeAll>
 8014536:	e76c      	b.n	8014412 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801453a:	f000 fc78 	bl	8014e2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801453e:	f001 f84f 	bl	80155e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014544:	4618      	mov	r0, r3
 8014546:	3738      	adds	r7, #56	; 0x38
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	e000ed04 	.word	0xe000ed04

08014550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b08e      	sub	sp, #56	; 0x38
 8014554:	af00      	add	r7, sp, #0
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	60b9      	str	r1, [r7, #8]
 801455a:	607a      	str	r2, [r7, #4]
 801455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014564:	2b00      	cmp	r3, #0
 8014566:	d10b      	bne.n	8014580 <xQueueGenericSendFromISR+0x30>
 8014568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801456c:	b672      	cpsid	i
 801456e:	f383 8811 	msr	BASEPRI, r3
 8014572:	f3bf 8f6f 	isb	sy
 8014576:	f3bf 8f4f 	dsb	sy
 801457a:	b662      	cpsie	i
 801457c:	627b      	str	r3, [r7, #36]	; 0x24
 801457e:	e7fe      	b.n	801457e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d103      	bne.n	801458e <xQueueGenericSendFromISR+0x3e>
 8014586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801458a:	2b00      	cmp	r3, #0
 801458c:	d101      	bne.n	8014592 <xQueueGenericSendFromISR+0x42>
 801458e:	2301      	movs	r3, #1
 8014590:	e000      	b.n	8014594 <xQueueGenericSendFromISR+0x44>
 8014592:	2300      	movs	r3, #0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d10b      	bne.n	80145b0 <xQueueGenericSendFromISR+0x60>
 8014598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801459c:	b672      	cpsid	i
 801459e:	f383 8811 	msr	BASEPRI, r3
 80145a2:	f3bf 8f6f 	isb	sy
 80145a6:	f3bf 8f4f 	dsb	sy
 80145aa:	b662      	cpsie	i
 80145ac:	623b      	str	r3, [r7, #32]
 80145ae:	e7fe      	b.n	80145ae <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	d103      	bne.n	80145be <xQueueGenericSendFromISR+0x6e>
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d101      	bne.n	80145c2 <xQueueGenericSendFromISR+0x72>
 80145be:	2301      	movs	r3, #1
 80145c0:	e000      	b.n	80145c4 <xQueueGenericSendFromISR+0x74>
 80145c2:	2300      	movs	r3, #0
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d10b      	bne.n	80145e0 <xQueueGenericSendFromISR+0x90>
 80145c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145cc:	b672      	cpsid	i
 80145ce:	f383 8811 	msr	BASEPRI, r3
 80145d2:	f3bf 8f6f 	isb	sy
 80145d6:	f3bf 8f4f 	dsb	sy
 80145da:	b662      	cpsie	i
 80145dc:	61fb      	str	r3, [r7, #28]
 80145de:	e7fe      	b.n	80145de <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80145e0:	f002 fb12 	bl	8016c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80145e4:	f3ef 8211 	mrs	r2, BASEPRI
 80145e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ec:	b672      	cpsid	i
 80145ee:	f383 8811 	msr	BASEPRI, r3
 80145f2:	f3bf 8f6f 	isb	sy
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	b662      	cpsie	i
 80145fc:	61ba      	str	r2, [r7, #24]
 80145fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014600:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014602:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801460c:	429a      	cmp	r2, r3
 801460e:	d302      	bcc.n	8014616 <xQueueGenericSendFromISR+0xc6>
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d12c      	bne.n	8014670 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801461c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	68b9      	ldr	r1, [r7, #8]
 8014624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014626:	f000 fb72 	bl	8014d0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801462a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014632:	d112      	bne.n	801465a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014638:	2b00      	cmp	r3, #0
 801463a:	d016      	beq.n	801466a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463e:	3324      	adds	r3, #36	; 0x24
 8014640:	4618      	mov	r0, r3
 8014642:	f001 f9f7 	bl	8015a34 <xTaskRemoveFromEventList>
 8014646:	4603      	mov	r3, r0
 8014648:	2b00      	cmp	r3, #0
 801464a:	d00e      	beq.n	801466a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2201      	movs	r2, #1
 8014656:	601a      	str	r2, [r3, #0]
 8014658:	e007      	b.n	801466a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801465a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801465e:	3301      	adds	r3, #1
 8014660:	b2db      	uxtb	r3, r3
 8014662:	b25a      	sxtb	r2, r3
 8014664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801466a:	2301      	movs	r3, #1
 801466c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801466e:	e001      	b.n	8014674 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014670:	2300      	movs	r3, #0
 8014672:	637b      	str	r3, [r7, #52]	; 0x34
 8014674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014676:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014680:	4618      	mov	r0, r3
 8014682:	3738      	adds	r7, #56	; 0x38
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b08e      	sub	sp, #56	; 0x38
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10b      	bne.n	80146b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a0:	b672      	cpsid	i
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	b662      	cpsie	i
 80146b0:	623b      	str	r3, [r7, #32]
 80146b2:	e7fe      	b.n	80146b2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00b      	beq.n	80146d4 <xQueueGiveFromISR+0x4c>
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	b672      	cpsid	i
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	b662      	cpsie	i
 80146d0:	61fb      	str	r3, [r7, #28]
 80146d2:	e7fe      	b.n	80146d2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d103      	bne.n	80146e4 <xQueueGiveFromISR+0x5c>
 80146dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <xQueueGiveFromISR+0x60>
 80146e4:	2301      	movs	r3, #1
 80146e6:	e000      	b.n	80146ea <xQueueGiveFromISR+0x62>
 80146e8:	2300      	movs	r3, #0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d10b      	bne.n	8014706 <xQueueGiveFromISR+0x7e>
 80146ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f2:	b672      	cpsid	i
 80146f4:	f383 8811 	msr	BASEPRI, r3
 80146f8:	f3bf 8f6f 	isb	sy
 80146fc:	f3bf 8f4f 	dsb	sy
 8014700:	b662      	cpsie	i
 8014702:	61bb      	str	r3, [r7, #24]
 8014704:	e7fe      	b.n	8014704 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014706:	f002 fa7f 	bl	8016c08 <vPortValidateInterruptPriority>
	__asm volatile
 801470a:	f3ef 8211 	mrs	r2, BASEPRI
 801470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014712:	b672      	cpsid	i
 8014714:	f383 8811 	msr	BASEPRI, r3
 8014718:	f3bf 8f6f 	isb	sy
 801471c:	f3bf 8f4f 	dsb	sy
 8014720:	b662      	cpsie	i
 8014722:	617a      	str	r2, [r7, #20]
 8014724:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014726:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014728:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801472e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014736:	429a      	cmp	r2, r3
 8014738:	d22b      	bcs.n	8014792 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014746:	1c5a      	adds	r2, r3, #1
 8014748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801474a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801474c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014754:	d112      	bne.n	801477c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801475a:	2b00      	cmp	r3, #0
 801475c:	d016      	beq.n	801478c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014760:	3324      	adds	r3, #36	; 0x24
 8014762:	4618      	mov	r0, r3
 8014764:	f001 f966 	bl	8015a34 <xTaskRemoveFromEventList>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00e      	beq.n	801478c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00b      	beq.n	801478c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	2201      	movs	r2, #1
 8014778:	601a      	str	r2, [r3, #0]
 801477a:	e007      	b.n	801478c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801477c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014780:	3301      	adds	r3, #1
 8014782:	b2db      	uxtb	r3, r3
 8014784:	b25a      	sxtb	r2, r3
 8014786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801478c:	2301      	movs	r3, #1
 801478e:	637b      	str	r3, [r7, #52]	; 0x34
 8014790:	e001      	b.n	8014796 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014792:	2300      	movs	r3, #0
 8014794:	637b      	str	r3, [r7, #52]	; 0x34
 8014796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014798:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80147a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3738      	adds	r7, #56	; 0x38
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
	...

080147ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b08c      	sub	sp, #48	; 0x30
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80147b8:	2300      	movs	r3, #0
 80147ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d10b      	bne.n	80147de <xQueueReceive+0x32>
	__asm volatile
 80147c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ca:	b672      	cpsid	i
 80147cc:	f383 8811 	msr	BASEPRI, r3
 80147d0:	f3bf 8f6f 	isb	sy
 80147d4:	f3bf 8f4f 	dsb	sy
 80147d8:	b662      	cpsie	i
 80147da:	623b      	str	r3, [r7, #32]
 80147dc:	e7fe      	b.n	80147dc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d103      	bne.n	80147ec <xQueueReceive+0x40>
 80147e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <xQueueReceive+0x44>
 80147ec:	2301      	movs	r3, #1
 80147ee:	e000      	b.n	80147f2 <xQueueReceive+0x46>
 80147f0:	2300      	movs	r3, #0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10b      	bne.n	801480e <xQueueReceive+0x62>
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	b672      	cpsid	i
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	b662      	cpsie	i
 801480a:	61fb      	str	r3, [r7, #28]
 801480c:	e7fe      	b.n	801480c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801480e:	f001 fadf 	bl	8015dd0 <xTaskGetSchedulerState>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	d102      	bne.n	801481e <xQueueReceive+0x72>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d101      	bne.n	8014822 <xQueueReceive+0x76>
 801481e:	2301      	movs	r3, #1
 8014820:	e000      	b.n	8014824 <xQueueReceive+0x78>
 8014822:	2300      	movs	r3, #0
 8014824:	2b00      	cmp	r3, #0
 8014826:	d10b      	bne.n	8014840 <xQueueReceive+0x94>
 8014828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801482c:	b672      	cpsid	i
 801482e:	f383 8811 	msr	BASEPRI, r3
 8014832:	f3bf 8f6f 	isb	sy
 8014836:	f3bf 8f4f 	dsb	sy
 801483a:	b662      	cpsie	i
 801483c:	61bb      	str	r3, [r7, #24]
 801483e:	e7fe      	b.n	801483e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014840:	f002 f902 	bl	8016a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014848:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	2b00      	cmp	r3, #0
 801484e:	d01f      	beq.n	8014890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014850:	68b9      	ldr	r1, [r7, #8]
 8014852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014854:	f000 fac5 	bl	8014de2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485a:	1e5a      	subs	r2, r3, #1
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014862:	691b      	ldr	r3, [r3, #16]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d00f      	beq.n	8014888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486a:	3310      	adds	r3, #16
 801486c:	4618      	mov	r0, r3
 801486e:	f001 f8e1 	bl	8015a34 <xTaskRemoveFromEventList>
 8014872:	4603      	mov	r3, r0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d007      	beq.n	8014888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014878:	4b3c      	ldr	r3, [pc, #240]	; (801496c <xQueueReceive+0x1c0>)
 801487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801487e:	601a      	str	r2, [r3, #0]
 8014880:	f3bf 8f4f 	dsb	sy
 8014884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014888:	f002 f910 	bl	8016aac <vPortExitCritical>
				return pdPASS;
 801488c:	2301      	movs	r3, #1
 801488e:	e069      	b.n	8014964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d103      	bne.n	801489e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014896:	f002 f909 	bl	8016aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801489a:	2300      	movs	r3, #0
 801489c:	e062      	b.n	8014964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d106      	bne.n	80148b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148a4:	f107 0310 	add.w	r3, r7, #16
 80148a8:	4618      	mov	r0, r3
 80148aa:	f001 f927 	bl	8015afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148ae:	2301      	movs	r3, #1
 80148b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148b2:	f002 f8fb 	bl	8016aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80148b6:	f000 fe85 	bl	80155c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148ba:	f002 f8c5 	bl	8016a48 <vPortEnterCritical>
 80148be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148c4:	b25b      	sxtb	r3, r3
 80148c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ca:	d103      	bne.n	80148d4 <xQueueReceive+0x128>
 80148cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ce:	2200      	movs	r2, #0
 80148d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148da:	b25b      	sxtb	r3, r3
 80148dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148e0:	d103      	bne.n	80148ea <xQueueReceive+0x13e>
 80148e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e4:	2200      	movs	r2, #0
 80148e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148ea:	f002 f8df 	bl	8016aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80148ee:	1d3a      	adds	r2, r7, #4
 80148f0:	f107 0310 	add.w	r3, r7, #16
 80148f4:	4611      	mov	r1, r2
 80148f6:	4618      	mov	r0, r3
 80148f8:	f001 f916 	bl	8015b28 <xTaskCheckForTimeOut>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d123      	bne.n	801494a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014904:	f000 fae5 	bl	8014ed2 <prvIsQueueEmpty>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d017      	beq.n	801493e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014910:	3324      	adds	r3, #36	; 0x24
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4611      	mov	r1, r2
 8014916:	4618      	mov	r0, r3
 8014918:	f001 f83a 	bl	8015990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801491e:	f000 fa86 	bl	8014e2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014922:	f000 fe5d 	bl	80155e0 <xTaskResumeAll>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d189      	bne.n	8014840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801492c:	4b0f      	ldr	r3, [pc, #60]	; (801496c <xQueueReceive+0x1c0>)
 801492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014932:	601a      	str	r2, [r3, #0]
 8014934:	f3bf 8f4f 	dsb	sy
 8014938:	f3bf 8f6f 	isb	sy
 801493c:	e780      	b.n	8014840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801493e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014940:	f000 fa75 	bl	8014e2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014944:	f000 fe4c 	bl	80155e0 <xTaskResumeAll>
 8014948:	e77a      	b.n	8014840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801494a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801494c:	f000 fa6f 	bl	8014e2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014950:	f000 fe46 	bl	80155e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014956:	f000 fabc 	bl	8014ed2 <prvIsQueueEmpty>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	f43f af6f 	beq.w	8014840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014964:	4618      	mov	r0, r3
 8014966:	3730      	adds	r7, #48	; 0x30
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	e000ed04 	.word	0xe000ed04

08014970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b08e      	sub	sp, #56	; 0x38
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801497a:	2300      	movs	r3, #0
 801497c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014982:	2300      	movs	r3, #0
 8014984:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014988:	2b00      	cmp	r3, #0
 801498a:	d10b      	bne.n	80149a4 <xQueueSemaphoreTake+0x34>
 801498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014990:	b672      	cpsid	i
 8014992:	f383 8811 	msr	BASEPRI, r3
 8014996:	f3bf 8f6f 	isb	sy
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	b662      	cpsie	i
 80149a0:	623b      	str	r3, [r7, #32]
 80149a2:	e7fe      	b.n	80149a2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80149a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d00b      	beq.n	80149c4 <xQueueSemaphoreTake+0x54>
 80149ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b0:	b672      	cpsid	i
 80149b2:	f383 8811 	msr	BASEPRI, r3
 80149b6:	f3bf 8f6f 	isb	sy
 80149ba:	f3bf 8f4f 	dsb	sy
 80149be:	b662      	cpsie	i
 80149c0:	61fb      	str	r3, [r7, #28]
 80149c2:	e7fe      	b.n	80149c2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80149c4:	f001 fa04 	bl	8015dd0 <xTaskGetSchedulerState>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d102      	bne.n	80149d4 <xQueueSemaphoreTake+0x64>
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d101      	bne.n	80149d8 <xQueueSemaphoreTake+0x68>
 80149d4:	2301      	movs	r3, #1
 80149d6:	e000      	b.n	80149da <xQueueSemaphoreTake+0x6a>
 80149d8:	2300      	movs	r3, #0
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d10b      	bne.n	80149f6 <xQueueSemaphoreTake+0x86>
 80149de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e2:	b672      	cpsid	i
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	b662      	cpsie	i
 80149f2:	61bb      	str	r3, [r7, #24]
 80149f4:	e7fe      	b.n	80149f4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80149f6:	f002 f827 	bl	8016a48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80149fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149fe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d024      	beq.n	8014a50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a08:	1e5a      	subs	r2, r3, #1
 8014a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d104      	bne.n	8014a20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014a16:	f001 fb55 	bl	80160c4 <pvTaskIncrementMutexHeldCount>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a22:	691b      	ldr	r3, [r3, #16]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00f      	beq.n	8014a48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	3310      	adds	r3, #16
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f001 f801 	bl	8015a34 <xTaskRemoveFromEventList>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d007      	beq.n	8014a48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014a38:	4b54      	ldr	r3, [pc, #336]	; (8014b8c <xQueueSemaphoreTake+0x21c>)
 8014a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a3e:	601a      	str	r2, [r3, #0]
 8014a40:	f3bf 8f4f 	dsb	sy
 8014a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014a48:	f002 f830 	bl	8016aac <vPortExitCritical>
				return pdPASS;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e098      	b.n	8014b82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d112      	bne.n	8014a7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d00b      	beq.n	8014a74 <xQueueSemaphoreTake+0x104>
 8014a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a60:	b672      	cpsid	i
 8014a62:	f383 8811 	msr	BASEPRI, r3
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	f3bf 8f4f 	dsb	sy
 8014a6e:	b662      	cpsie	i
 8014a70:	617b      	str	r3, [r7, #20]
 8014a72:	e7fe      	b.n	8014a72 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014a74:	f002 f81a 	bl	8016aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	e082      	b.n	8014b82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d106      	bne.n	8014a90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014a82:	f107 030c 	add.w	r3, r7, #12
 8014a86:	4618      	mov	r0, r3
 8014a88:	f001 f838 	bl	8015afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014a90:	f002 f80c 	bl	8016aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014a94:	f000 fd96 	bl	80155c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a98:	f001 ffd6 	bl	8016a48 <vPortEnterCritical>
 8014a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014aa2:	b25b      	sxtb	r3, r3
 8014aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aa8:	d103      	bne.n	8014ab2 <xQueueSemaphoreTake+0x142>
 8014aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aac:	2200      	movs	r2, #0
 8014aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ab8:	b25b      	sxtb	r3, r3
 8014aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014abe:	d103      	bne.n	8014ac8 <xQueueSemaphoreTake+0x158>
 8014ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014ac8:	f001 fff0 	bl	8016aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014acc:	463a      	mov	r2, r7
 8014ace:	f107 030c 	add.w	r3, r7, #12
 8014ad2:	4611      	mov	r1, r2
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f001 f827 	bl	8015b28 <xTaskCheckForTimeOut>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d132      	bne.n	8014b46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ae2:	f000 f9f6 	bl	8014ed2 <prvIsQueueEmpty>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d026      	beq.n	8014b3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d109      	bne.n	8014b08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014af4:	f001 ffa8 	bl	8016a48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afa:	689b      	ldr	r3, [r3, #8]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f001 f985 	bl	8015e0c <xTaskPriorityInherit>
 8014b02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014b04:	f001 ffd2 	bl	8016aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0a:	3324      	adds	r3, #36	; 0x24
 8014b0c:	683a      	ldr	r2, [r7, #0]
 8014b0e:	4611      	mov	r1, r2
 8014b10:	4618      	mov	r0, r3
 8014b12:	f000 ff3d 	bl	8015990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b18:	f000 f989 	bl	8014e2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014b1c:	f000 fd60 	bl	80155e0 <xTaskResumeAll>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f47f af67 	bne.w	80149f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014b28:	4b18      	ldr	r3, [pc, #96]	; (8014b8c <xQueueSemaphoreTake+0x21c>)
 8014b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	f3bf 8f6f 	isb	sy
 8014b38:	e75d      	b.n	80149f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b3c:	f000 f977 	bl	8014e2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014b40:	f000 fd4e 	bl	80155e0 <xTaskResumeAll>
 8014b44:	e757      	b.n	80149f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b48:	f000 f971 	bl	8014e2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014b4c:	f000 fd48 	bl	80155e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b52:	f000 f9be 	bl	8014ed2 <prvIsQueueEmpty>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f43f af4c 	beq.w	80149f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d00d      	beq.n	8014b80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014b64:	f001 ff70 	bl	8016a48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b6a:	f000 f8b8 	bl	8014cde <prvGetDisinheritPriorityAfterTimeout>
 8014b6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b76:	4618      	mov	r0, r3
 8014b78:	f001 fa20 	bl	8015fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014b7c:	f001 ff96 	bl	8016aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014b80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3738      	adds	r7, #56	; 0x38
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	e000ed04 	.word	0xe000ed04

08014b90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08e      	sub	sp, #56	; 0x38
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d10b      	bne.n	8014bbe <xQueueReceiveFromISR+0x2e>
 8014ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014baa:	b672      	cpsid	i
 8014bac:	f383 8811 	msr	BASEPRI, r3
 8014bb0:	f3bf 8f6f 	isb	sy
 8014bb4:	f3bf 8f4f 	dsb	sy
 8014bb8:	b662      	cpsie	i
 8014bba:	623b      	str	r3, [r7, #32]
 8014bbc:	e7fe      	b.n	8014bbc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d103      	bne.n	8014bcc <xQueueReceiveFromISR+0x3c>
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <xQueueReceiveFromISR+0x40>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e000      	b.n	8014bd2 <xQueueReceiveFromISR+0x42>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d10b      	bne.n	8014bee <xQueueReceiveFromISR+0x5e>
 8014bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bda:	b672      	cpsid	i
 8014bdc:	f383 8811 	msr	BASEPRI, r3
 8014be0:	f3bf 8f6f 	isb	sy
 8014be4:	f3bf 8f4f 	dsb	sy
 8014be8:	b662      	cpsie	i
 8014bea:	61fb      	str	r3, [r7, #28]
 8014bec:	e7fe      	b.n	8014bec <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014bee:	f002 f80b 	bl	8016c08 <vPortValidateInterruptPriority>
	__asm volatile
 8014bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8014bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfa:	b672      	cpsid	i
 8014bfc:	f383 8811 	msr	BASEPRI, r3
 8014c00:	f3bf 8f6f 	isb	sy
 8014c04:	f3bf 8f4f 	dsb	sy
 8014c08:	b662      	cpsie	i
 8014c0a:	61ba      	str	r2, [r7, #24]
 8014c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d02f      	beq.n	8014c7e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c28:	68b9      	ldr	r1, [r7, #8]
 8014c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c2c:	f000 f8d9 	bl	8014de2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c32:	1e5a      	subs	r2, r3, #1
 8014c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c40:	d112      	bne.n	8014c68 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	691b      	ldr	r3, [r3, #16]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d016      	beq.n	8014c78 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4c:	3310      	adds	r3, #16
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f000 fef0 	bl	8015a34 <xTaskRemoveFromEventList>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00e      	beq.n	8014c78 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d00b      	beq.n	8014c78 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2201      	movs	r2, #1
 8014c64:	601a      	str	r2, [r3, #0]
 8014c66:	e007      	b.n	8014c78 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	b25a      	sxtb	r2, r3
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014c78:	2301      	movs	r3, #1
 8014c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8014c7c:	e001      	b.n	8014c82 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	637b      	str	r3, [r7, #52]	; 0x34
 8014c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3738      	adds	r7, #56	; 0x38
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014c96:	b580      	push	{r7, lr}
 8014c98:	b084      	sub	sp, #16
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d10b      	bne.n	8014cc0 <vQueueDelete+0x2a>
	__asm volatile
 8014ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cac:	b672      	cpsid	i
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	b662      	cpsie	i
 8014cbc:	60bb      	str	r3, [r7, #8]
 8014cbe:	e7fe      	b.n	8014cbe <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	f000 f95d 	bl	8014f80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8014cd0:	68f8      	ldr	r0, [r7, #12]
 8014cd2:	f002 f8a3 	bl	8016e1c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014cd6:	bf00      	nop
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}

08014cde <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014cde:	b480      	push	{r7}
 8014ce0:	b085      	sub	sp, #20
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d006      	beq.n	8014cfc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014cf8:	60fb      	str	r3, [r7, #12]
 8014cfa:	e001      	b.n	8014d00 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014d00:	68fb      	ldr	r3, [r7, #12]
	}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3714      	adds	r7, #20
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b086      	sub	sp, #24
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	60f8      	str	r0, [r7, #12]
 8014d16:	60b9      	str	r1, [r7, #8]
 8014d18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d10d      	bne.n	8014d48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d14d      	bne.n	8014dd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f001 f8cf 	bl	8015edc <xTaskPriorityDisinherit>
 8014d3e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	609a      	str	r2, [r3, #8]
 8014d46:	e043      	b.n	8014dd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d119      	bne.n	8014d82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	6858      	ldr	r0, [r3, #4]
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d56:	461a      	mov	r2, r3
 8014d58:	68b9      	ldr	r1, [r7, #8]
 8014d5a:	f002 ff0b 	bl	8017b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	685a      	ldr	r2, [r3, #4]
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d66:	441a      	add	r2, r3
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	685a      	ldr	r2, [r3, #4]
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	689b      	ldr	r3, [r3, #8]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d32b      	bcc.n	8014dd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	605a      	str	r2, [r3, #4]
 8014d80:	e026      	b.n	8014dd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	68d8      	ldr	r0, [r3, #12]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	68b9      	ldr	r1, [r7, #8]
 8014d8e:	f002 fef1 	bl	8017b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	68da      	ldr	r2, [r3, #12]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d9a:	425b      	negs	r3, r3
 8014d9c:	441a      	add	r2, r3
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	68da      	ldr	r2, [r3, #12]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d207      	bcs.n	8014dbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	689a      	ldr	r2, [r3, #8]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014db6:	425b      	negs	r3, r3
 8014db8:	441a      	add	r2, r3
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b02      	cmp	r3, #2
 8014dc2:	d105      	bne.n	8014dd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d002      	beq.n	8014dd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	3b01      	subs	r3, #1
 8014dce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	1c5a      	adds	r2, r3, #1
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014dd8:	697b      	ldr	r3, [r7, #20]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3718      	adds	r7, #24
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b082      	sub	sp, #8
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d018      	beq.n	8014e26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	68da      	ldr	r2, [r3, #12]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dfc:	441a      	add	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	68da      	ldr	r2, [r3, #12]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	689b      	ldr	r3, [r3, #8]
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d303      	bcc.n	8014e16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	68d9      	ldr	r1, [r3, #12]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e1e:	461a      	mov	r2, r3
 8014e20:	6838      	ldr	r0, [r7, #0]
 8014e22:	f002 fea7 	bl	8017b74 <memcpy>
	}
}
 8014e26:	bf00      	nop
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b084      	sub	sp, #16
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014e36:	f001 fe07 	bl	8016a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014e42:	e011      	b.n	8014e68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d012      	beq.n	8014e72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	3324      	adds	r3, #36	; 0x24
 8014e50:	4618      	mov	r0, r3
 8014e52:	f000 fdef 	bl	8015a34 <xTaskRemoveFromEventList>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d001      	beq.n	8014e60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014e5c:	f000 fec8 	bl	8015bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014e60:	7bfb      	ldrb	r3, [r7, #15]
 8014e62:	3b01      	subs	r3, #1
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dce9      	bgt.n	8014e44 <prvUnlockQueue+0x16>
 8014e70:	e000      	b.n	8014e74 <prvUnlockQueue+0x46>
					break;
 8014e72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	22ff      	movs	r2, #255	; 0xff
 8014e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014e7c:	f001 fe16 	bl	8016aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014e80:	f001 fde2 	bl	8016a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014e8c:	e011      	b.n	8014eb2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	691b      	ldr	r3, [r3, #16]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d012      	beq.n	8014ebc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	3310      	adds	r3, #16
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f000 fdca 	bl	8015a34 <xTaskRemoveFromEventList>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d001      	beq.n	8014eaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014ea6:	f000 fea3 	bl	8015bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014eaa:	7bbb      	ldrb	r3, [r7, #14]
 8014eac:	3b01      	subs	r3, #1
 8014eae:	b2db      	uxtb	r3, r3
 8014eb0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	dce9      	bgt.n	8014e8e <prvUnlockQueue+0x60>
 8014eba:	e000      	b.n	8014ebe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014ebc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	22ff      	movs	r2, #255	; 0xff
 8014ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014ec6:	f001 fdf1 	bl	8016aac <vPortExitCritical>
}
 8014eca:	bf00      	nop
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014eda:	f001 fdb5 	bl	8016a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d102      	bne.n	8014eec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	60fb      	str	r3, [r7, #12]
 8014eea:	e001      	b.n	8014ef0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014eec:	2300      	movs	r3, #0
 8014eee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014ef0:	f001 fddc 	bl	8016aac <vPortExitCritical>

	return xReturn;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b084      	sub	sp, #16
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014f06:	f001 fd9f 	bl	8016a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d102      	bne.n	8014f1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014f16:	2301      	movs	r3, #1
 8014f18:	60fb      	str	r3, [r7, #12]
 8014f1a:	e001      	b.n	8014f20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014f20:	f001 fdc4 	bl	8016aac <vPortExitCritical>

	return xReturn;
 8014f24:	68fb      	ldr	r3, [r7, #12]
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3710      	adds	r7, #16
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
	...

08014f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014f30:	b480      	push	{r7}
 8014f32:	b085      	sub	sp, #20
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60fb      	str	r3, [r7, #12]
 8014f3e:	e014      	b.n	8014f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014f40:	4a0e      	ldr	r2, [pc, #56]	; (8014f7c <vQueueAddToRegistry+0x4c>)
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d10b      	bne.n	8014f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014f4c:	490b      	ldr	r1, [pc, #44]	; (8014f7c <vQueueAddToRegistry+0x4c>)
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	683a      	ldr	r2, [r7, #0]
 8014f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014f56:	4a09      	ldr	r2, [pc, #36]	; (8014f7c <vQueueAddToRegistry+0x4c>)
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	4413      	add	r3, r2
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014f62:	e005      	b.n	8014f70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	3301      	adds	r3, #1
 8014f68:	60fb      	str	r3, [r7, #12]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2b07      	cmp	r3, #7
 8014f6e:	d9e7      	bls.n	8014f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014f70:	bf00      	nop
 8014f72:	3714      	adds	r7, #20
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr
 8014f7c:	20027628 	.word	0x20027628

08014f80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014f80:	b480      	push	{r7}
 8014f82:	b085      	sub	sp, #20
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014f88:	2300      	movs	r3, #0
 8014f8a:	60fb      	str	r3, [r7, #12]
 8014f8c:	e016      	b.n	8014fbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014f8e:	4a10      	ldr	r2, [pc, #64]	; (8014fd0 <vQueueUnregisterQueue+0x50>)
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	00db      	lsls	r3, r3, #3
 8014f94:	4413      	add	r3, r2
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d10b      	bne.n	8014fb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014f9e:	4a0c      	ldr	r2, [pc, #48]	; (8014fd0 <vQueueUnregisterQueue+0x50>)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014fa8:	4a09      	ldr	r2, [pc, #36]	; (8014fd0 <vQueueUnregisterQueue+0x50>)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	00db      	lsls	r3, r3, #3
 8014fae:	4413      	add	r3, r2
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	605a      	str	r2, [r3, #4]
				break;
 8014fb4:	e005      	b.n	8014fc2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	3301      	adds	r3, #1
 8014fba:	60fb      	str	r3, [r7, #12]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2b07      	cmp	r3, #7
 8014fc0:	d9e5      	bls.n	8014f8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014fc2:	bf00      	nop
 8014fc4:	3714      	adds	r7, #20
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop
 8014fd0:	20027628 	.word	0x20027628

08014fd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014fe4:	f001 fd30 	bl	8016a48 <vPortEnterCritical>
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014fee:	b25b      	sxtb	r3, r3
 8014ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ff4:	d103      	bne.n	8014ffe <vQueueWaitForMessageRestricted+0x2a>
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015004:	b25b      	sxtb	r3, r3
 8015006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801500a:	d103      	bne.n	8015014 <vQueueWaitForMessageRestricted+0x40>
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	2200      	movs	r2, #0
 8015010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015014:	f001 fd4a 	bl	8016aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801501c:	2b00      	cmp	r3, #0
 801501e:	d106      	bne.n	801502e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	3324      	adds	r3, #36	; 0x24
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	68b9      	ldr	r1, [r7, #8]
 8015028:	4618      	mov	r0, r3
 801502a:	f000 fcd7 	bl	80159dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801502e:	6978      	ldr	r0, [r7, #20]
 8015030:	f7ff fefd 	bl	8014e2e <prvUnlockQueue>
	}
 8015034:	bf00      	nop
 8015036:	3718      	adds	r7, #24
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801503c:	b580      	push	{r7, lr}
 801503e:	b08e      	sub	sp, #56	; 0x38
 8015040:	af04      	add	r7, sp, #16
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
 8015048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801504c:	2b00      	cmp	r3, #0
 801504e:	d10b      	bne.n	8015068 <xTaskCreateStatic+0x2c>
 8015050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015054:	b672      	cpsid	i
 8015056:	f383 8811 	msr	BASEPRI, r3
 801505a:	f3bf 8f6f 	isb	sy
 801505e:	f3bf 8f4f 	dsb	sy
 8015062:	b662      	cpsie	i
 8015064:	623b      	str	r3, [r7, #32]
 8015066:	e7fe      	b.n	8015066 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8015068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801506a:	2b00      	cmp	r3, #0
 801506c:	d10b      	bne.n	8015086 <xTaskCreateStatic+0x4a>
 801506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015072:	b672      	cpsid	i
 8015074:	f383 8811 	msr	BASEPRI, r3
 8015078:	f3bf 8f6f 	isb	sy
 801507c:	f3bf 8f4f 	dsb	sy
 8015080:	b662      	cpsie	i
 8015082:	61fb      	str	r3, [r7, #28]
 8015084:	e7fe      	b.n	8015084 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015086:	235c      	movs	r3, #92	; 0x5c
 8015088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	2b5c      	cmp	r3, #92	; 0x5c
 801508e:	d00b      	beq.n	80150a8 <xTaskCreateStatic+0x6c>
 8015090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015094:	b672      	cpsid	i
 8015096:	f383 8811 	msr	BASEPRI, r3
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	b662      	cpsie	i
 80150a4:	61bb      	str	r3, [r7, #24]
 80150a6:	e7fe      	b.n	80150a6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80150a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80150aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d01e      	beq.n	80150ee <xTaskCreateStatic+0xb2>
 80150b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d01b      	beq.n	80150ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80150b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80150c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c2:	2202      	movs	r2, #2
 80150c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80150c8:	2300      	movs	r3, #0
 80150ca:	9303      	str	r3, [sp, #12]
 80150cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ce:	9302      	str	r3, [sp, #8]
 80150d0:	f107 0314 	add.w	r3, r7, #20
 80150d4:	9301      	str	r3, [sp, #4]
 80150d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d8:	9300      	str	r3, [sp, #0]
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	68b9      	ldr	r1, [r7, #8]
 80150e0:	68f8      	ldr	r0, [r7, #12]
 80150e2:	f000 f850 	bl	8015186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80150e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150e8:	f000 f8de 	bl	80152a8 <prvAddNewTaskToReadyList>
 80150ec:	e001      	b.n	80150f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80150ee:	2300      	movs	r3, #0
 80150f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80150f2:	697b      	ldr	r3, [r7, #20]
	}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3728      	adds	r7, #40	; 0x28
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b08c      	sub	sp, #48	; 0x30
 8015100:	af04      	add	r7, sp, #16
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	603b      	str	r3, [r7, #0]
 8015108:	4613      	mov	r3, r2
 801510a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801510c:	88fb      	ldrh	r3, [r7, #6]
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	4618      	mov	r0, r3
 8015112:	f001 fdbb 	bl	8016c8c <pvPortMalloc>
 8015116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d00e      	beq.n	801513c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801511e:	205c      	movs	r0, #92	; 0x5c
 8015120:	f001 fdb4 	bl	8016c8c <pvPortMalloc>
 8015124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d003      	beq.n	8015134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	697a      	ldr	r2, [r7, #20]
 8015130:	631a      	str	r2, [r3, #48]	; 0x30
 8015132:	e005      	b.n	8015140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015134:	6978      	ldr	r0, [r7, #20]
 8015136:	f001 fe71 	bl	8016e1c <vPortFree>
 801513a:	e001      	b.n	8015140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801513c:	2300      	movs	r3, #0
 801513e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015140:	69fb      	ldr	r3, [r7, #28]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d017      	beq.n	8015176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015146:	69fb      	ldr	r3, [r7, #28]
 8015148:	2200      	movs	r2, #0
 801514a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801514e:	88fa      	ldrh	r2, [r7, #6]
 8015150:	2300      	movs	r3, #0
 8015152:	9303      	str	r3, [sp, #12]
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	9302      	str	r3, [sp, #8]
 8015158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801515a:	9301      	str	r3, [sp, #4]
 801515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515e:	9300      	str	r3, [sp, #0]
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	68b9      	ldr	r1, [r7, #8]
 8015164:	68f8      	ldr	r0, [r7, #12]
 8015166:	f000 f80e 	bl	8015186 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801516a:	69f8      	ldr	r0, [r7, #28]
 801516c:	f000 f89c 	bl	80152a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015170:	2301      	movs	r3, #1
 8015172:	61bb      	str	r3, [r7, #24]
 8015174:	e002      	b.n	801517c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015176:	f04f 33ff 	mov.w	r3, #4294967295
 801517a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801517c:	69bb      	ldr	r3, [r7, #24]
	}
 801517e:	4618      	mov	r0, r3
 8015180:	3720      	adds	r7, #32
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b088      	sub	sp, #32
 801518a:	af00      	add	r7, sp, #0
 801518c:	60f8      	str	r0, [r7, #12]
 801518e:	60b9      	str	r1, [r7, #8]
 8015190:	607a      	str	r2, [r7, #4]
 8015192:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015196:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	461a      	mov	r2, r3
 801519e:	21a5      	movs	r1, #165	; 0xa5
 80151a0:	f002 fcf3 	bl	8017b8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80151a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80151a8:	6879      	ldr	r1, [r7, #4]
 80151aa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80151ae:	440b      	add	r3, r1
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	4413      	add	r3, r2
 80151b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	f023 0307 	bic.w	r3, r3, #7
 80151bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	f003 0307 	and.w	r3, r3, #7
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d00b      	beq.n	80151e0 <prvInitialiseNewTask+0x5a>
 80151c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151cc:	b672      	cpsid	i
 80151ce:	f383 8811 	msr	BASEPRI, r3
 80151d2:	f3bf 8f6f 	isb	sy
 80151d6:	f3bf 8f4f 	dsb	sy
 80151da:	b662      	cpsie	i
 80151dc:	617b      	str	r3, [r7, #20]
 80151de:	e7fe      	b.n	80151de <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d01f      	beq.n	8015226 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80151e6:	2300      	movs	r3, #0
 80151e8:	61fb      	str	r3, [r7, #28]
 80151ea:	e012      	b.n	8015212 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	4413      	add	r3, r2
 80151f2:	7819      	ldrb	r1, [r3, #0]
 80151f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	4413      	add	r3, r2
 80151fa:	3334      	adds	r3, #52	; 0x34
 80151fc:	460a      	mov	r2, r1
 80151fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015200:	68ba      	ldr	r2, [r7, #8]
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	4413      	add	r3, r2
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d006      	beq.n	801521a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	3301      	adds	r3, #1
 8015210:	61fb      	str	r3, [r7, #28]
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	2b0f      	cmp	r3, #15
 8015216:	d9e9      	bls.n	80151ec <prvInitialiseNewTask+0x66>
 8015218:	e000      	b.n	801521c <prvInitialiseNewTask+0x96>
			{
				break;
 801521a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521e:	2200      	movs	r2, #0
 8015220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015224:	e003      	b.n	801522e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015228:	2200      	movs	r2, #0
 801522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015230:	2b37      	cmp	r3, #55	; 0x37
 8015232:	d901      	bls.n	8015238 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015234:	2337      	movs	r3, #55	; 0x37
 8015236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801523c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015246:	2200      	movs	r2, #0
 8015248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524c:	3304      	adds	r3, #4
 801524e:	4618      	mov	r0, r3
 8015250:	f7fe fd76 	bl	8013d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015256:	3318      	adds	r3, #24
 8015258:	4618      	mov	r0, r3
 801525a:	f7fe fd71 	bl	8013d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015276:	2200      	movs	r2, #0
 8015278:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801527c:	2200      	movs	r2, #0
 801527e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015282:	683a      	ldr	r2, [r7, #0]
 8015284:	68f9      	ldr	r1, [r7, #12]
 8015286:	69b8      	ldr	r0, [r7, #24]
 8015288:	f001 fad8 	bl	801683c <pxPortInitialiseStack>
 801528c:	4602      	mov	r2, r0
 801528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015290:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015294:	2b00      	cmp	r3, #0
 8015296:	d002      	beq.n	801529e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801529c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801529e:	bf00      	nop
 80152a0:	3720      	adds	r7, #32
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
	...

080152a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80152b0:	f001 fbca 	bl	8016a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80152b4:	4b2d      	ldr	r3, [pc, #180]	; (801536c <prvAddNewTaskToReadyList+0xc4>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	3301      	adds	r3, #1
 80152ba:	4a2c      	ldr	r2, [pc, #176]	; (801536c <prvAddNewTaskToReadyList+0xc4>)
 80152bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80152be:	4b2c      	ldr	r3, [pc, #176]	; (8015370 <prvAddNewTaskToReadyList+0xc8>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d109      	bne.n	80152da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80152c6:	4a2a      	ldr	r2, [pc, #168]	; (8015370 <prvAddNewTaskToReadyList+0xc8>)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80152cc:	4b27      	ldr	r3, [pc, #156]	; (801536c <prvAddNewTaskToReadyList+0xc4>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d110      	bne.n	80152f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80152d4:	f000 fcb0 	bl	8015c38 <prvInitialiseTaskLists>
 80152d8:	e00d      	b.n	80152f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80152da:	4b26      	ldr	r3, [pc, #152]	; (8015374 <prvAddNewTaskToReadyList+0xcc>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d109      	bne.n	80152f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80152e2:	4b23      	ldr	r3, [pc, #140]	; (8015370 <prvAddNewTaskToReadyList+0xc8>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d802      	bhi.n	80152f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80152f0:	4a1f      	ldr	r2, [pc, #124]	; (8015370 <prvAddNewTaskToReadyList+0xc8>)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80152f6:	4b20      	ldr	r3, [pc, #128]	; (8015378 <prvAddNewTaskToReadyList+0xd0>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	3301      	adds	r3, #1
 80152fc:	4a1e      	ldr	r2, [pc, #120]	; (8015378 <prvAddNewTaskToReadyList+0xd0>)
 80152fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015300:	4b1d      	ldr	r3, [pc, #116]	; (8015378 <prvAddNewTaskToReadyList+0xd0>)
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801530c:	4b1b      	ldr	r3, [pc, #108]	; (801537c <prvAddNewTaskToReadyList+0xd4>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	429a      	cmp	r2, r3
 8015312:	d903      	bls.n	801531c <prvAddNewTaskToReadyList+0x74>
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015318:	4a18      	ldr	r2, [pc, #96]	; (801537c <prvAddNewTaskToReadyList+0xd4>)
 801531a:	6013      	str	r3, [r2, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015320:	4613      	mov	r3, r2
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	4413      	add	r3, r2
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	4a15      	ldr	r2, [pc, #84]	; (8015380 <prvAddNewTaskToReadyList+0xd8>)
 801532a:	441a      	add	r2, r3
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	3304      	adds	r3, #4
 8015330:	4619      	mov	r1, r3
 8015332:	4610      	mov	r0, r2
 8015334:	f7fe fd11 	bl	8013d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015338:	f001 fbb8 	bl	8016aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801533c:	4b0d      	ldr	r3, [pc, #52]	; (8015374 <prvAddNewTaskToReadyList+0xcc>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d00e      	beq.n	8015362 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015344:	4b0a      	ldr	r3, [pc, #40]	; (8015370 <prvAddNewTaskToReadyList+0xc8>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801534e:	429a      	cmp	r2, r3
 8015350:	d207      	bcs.n	8015362 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015352:	4b0c      	ldr	r3, [pc, #48]	; (8015384 <prvAddNewTaskToReadyList+0xdc>)
 8015354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015358:	601a      	str	r2, [r3, #0]
 801535a:	f3bf 8f4f 	dsb	sy
 801535e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015362:	bf00      	nop
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	20001000 	.word	0x20001000
 8015370:	20000b2c 	.word	0x20000b2c
 8015374:	2000100c 	.word	0x2000100c
 8015378:	2000101c 	.word	0x2000101c
 801537c:	20001008 	.word	0x20001008
 8015380:	20000b30 	.word	0x20000b30
 8015384:	e000ed04 	.word	0xe000ed04

08015388 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8015388:	b580      	push	{r7, lr}
 801538a:	b08a      	sub	sp, #40	; 0x28
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8015392:	2300      	movs	r3, #0
 8015394:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10b      	bne.n	80153b4 <vTaskDelayUntil+0x2c>
 801539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a0:	b672      	cpsid	i
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	b662      	cpsie	i
 80153b0:	617b      	str	r3, [r7, #20]
 80153b2:	e7fe      	b.n	80153b2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d10b      	bne.n	80153d2 <vTaskDelayUntil+0x4a>
 80153ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153be:	b672      	cpsid	i
 80153c0:	f383 8811 	msr	BASEPRI, r3
 80153c4:	f3bf 8f6f 	isb	sy
 80153c8:	f3bf 8f4f 	dsb	sy
 80153cc:	b662      	cpsie	i
 80153ce:	613b      	str	r3, [r7, #16]
 80153d0:	e7fe      	b.n	80153d0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80153d2:	4b2a      	ldr	r3, [pc, #168]	; (801547c <vTaskDelayUntil+0xf4>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d00b      	beq.n	80153f2 <vTaskDelayUntil+0x6a>
 80153da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153de:	b672      	cpsid	i
 80153e0:	f383 8811 	msr	BASEPRI, r3
 80153e4:	f3bf 8f6f 	isb	sy
 80153e8:	f3bf 8f4f 	dsb	sy
 80153ec:	b662      	cpsie	i
 80153ee:	60fb      	str	r3, [r7, #12]
 80153f0:	e7fe      	b.n	80153f0 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80153f2:	f000 f8e7 	bl	80155c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80153f6:	4b22      	ldr	r3, [pc, #136]	; (8015480 <vTaskDelayUntil+0xf8>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	683a      	ldr	r2, [r7, #0]
 8015402:	4413      	add	r3, r2
 8015404:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	6a3a      	ldr	r2, [r7, #32]
 801540c:	429a      	cmp	r2, r3
 801540e:	d20b      	bcs.n	8015428 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	69fa      	ldr	r2, [r7, #28]
 8015416:	429a      	cmp	r2, r3
 8015418:	d211      	bcs.n	801543e <vTaskDelayUntil+0xb6>
 801541a:	69fa      	ldr	r2, [r7, #28]
 801541c:	6a3b      	ldr	r3, [r7, #32]
 801541e:	429a      	cmp	r2, r3
 8015420:	d90d      	bls.n	801543e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8015422:	2301      	movs	r3, #1
 8015424:	627b      	str	r3, [r7, #36]	; 0x24
 8015426:	e00a      	b.n	801543e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	69fa      	ldr	r2, [r7, #28]
 801542e:	429a      	cmp	r2, r3
 8015430:	d303      	bcc.n	801543a <vTaskDelayUntil+0xb2>
 8015432:	69fa      	ldr	r2, [r7, #28]
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	429a      	cmp	r2, r3
 8015438:	d901      	bls.n	801543e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801543a:	2301      	movs	r3, #1
 801543c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	69fa      	ldr	r2, [r7, #28]
 8015442:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	2b00      	cmp	r3, #0
 8015448:	d006      	beq.n	8015458 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801544a:	69fa      	ldr	r2, [r7, #28]
 801544c:	6a3b      	ldr	r3, [r7, #32]
 801544e:	1ad3      	subs	r3, r2, r3
 8015450:	2100      	movs	r1, #0
 8015452:	4618      	mov	r0, r3
 8015454:	f000 fe4a 	bl	80160ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8015458:	f000 f8c2 	bl	80155e0 <xTaskResumeAll>
 801545c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d107      	bne.n	8015474 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8015464:	4b07      	ldr	r3, [pc, #28]	; (8015484 <vTaskDelayUntil+0xfc>)
 8015466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801546a:	601a      	str	r2, [r3, #0]
 801546c:	f3bf 8f4f 	dsb	sy
 8015470:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015474:	bf00      	nop
 8015476:	3728      	adds	r7, #40	; 0x28
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20001028 	.word	0x20001028
 8015480:	20001004 	.word	0x20001004
 8015484:	e000ed04 	.word	0xe000ed04

08015488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015490:	2300      	movs	r3, #0
 8015492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d018      	beq.n	80154cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801549a:	4b14      	ldr	r3, [pc, #80]	; (80154ec <vTaskDelay+0x64>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00b      	beq.n	80154ba <vTaskDelay+0x32>
 80154a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a6:	b672      	cpsid	i
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	b662      	cpsie	i
 80154b6:	60bb      	str	r3, [r7, #8]
 80154b8:	e7fe      	b.n	80154b8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80154ba:	f000 f883 	bl	80155c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80154be:	2100      	movs	r1, #0
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f000 fe13 	bl	80160ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80154c6:	f000 f88b 	bl	80155e0 <xTaskResumeAll>
 80154ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d107      	bne.n	80154e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80154d2:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <vTaskDelay+0x68>)
 80154d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154d8:	601a      	str	r2, [r3, #0]
 80154da:	f3bf 8f4f 	dsb	sy
 80154de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80154e2:	bf00      	nop
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	20001028 	.word	0x20001028
 80154f0:	e000ed04 	.word	0xe000ed04

080154f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b08a      	sub	sp, #40	; 0x28
 80154f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80154fa:	2300      	movs	r3, #0
 80154fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80154fe:	2300      	movs	r3, #0
 8015500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015502:	463a      	mov	r2, r7
 8015504:	1d39      	adds	r1, r7, #4
 8015506:	f107 0308 	add.w	r3, r7, #8
 801550a:	4618      	mov	r0, r3
 801550c:	f7fe fbc4 	bl	8013c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015510:	6839      	ldr	r1, [r7, #0]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	9202      	str	r2, [sp, #8]
 8015518:	9301      	str	r3, [sp, #4]
 801551a:	2300      	movs	r3, #0
 801551c:	9300      	str	r3, [sp, #0]
 801551e:	2300      	movs	r3, #0
 8015520:	460a      	mov	r2, r1
 8015522:	4922      	ldr	r1, [pc, #136]	; (80155ac <vTaskStartScheduler+0xb8>)
 8015524:	4822      	ldr	r0, [pc, #136]	; (80155b0 <vTaskStartScheduler+0xbc>)
 8015526:	f7ff fd89 	bl	801503c <xTaskCreateStatic>
 801552a:	4602      	mov	r2, r0
 801552c:	4b21      	ldr	r3, [pc, #132]	; (80155b4 <vTaskStartScheduler+0xc0>)
 801552e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015530:	4b20      	ldr	r3, [pc, #128]	; (80155b4 <vTaskStartScheduler+0xc0>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d002      	beq.n	801553e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015538:	2301      	movs	r3, #1
 801553a:	617b      	str	r3, [r7, #20]
 801553c:	e001      	b.n	8015542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801553e:	2300      	movs	r3, #0
 8015540:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	2b01      	cmp	r3, #1
 8015546:	d102      	bne.n	801554e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015548:	f000 fe24 	bl	8016194 <xTimerCreateTimerTask>
 801554c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	2b01      	cmp	r3, #1
 8015552:	d117      	bne.n	8015584 <vTaskStartScheduler+0x90>
 8015554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015558:	b672      	cpsid	i
 801555a:	f383 8811 	msr	BASEPRI, r3
 801555e:	f3bf 8f6f 	isb	sy
 8015562:	f3bf 8f4f 	dsb	sy
 8015566:	b662      	cpsie	i
 8015568:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801556a:	4b13      	ldr	r3, [pc, #76]	; (80155b8 <vTaskStartScheduler+0xc4>)
 801556c:	f04f 32ff 	mov.w	r2, #4294967295
 8015570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015572:	4b12      	ldr	r3, [pc, #72]	; (80155bc <vTaskStartScheduler+0xc8>)
 8015574:	2201      	movs	r2, #1
 8015576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015578:	4b11      	ldr	r3, [pc, #68]	; (80155c0 <vTaskStartScheduler+0xcc>)
 801557a:	2200      	movs	r2, #0
 801557c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801557e:	f001 f9e7 	bl	8016950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015582:	e00f      	b.n	80155a4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801558a:	d10b      	bne.n	80155a4 <vTaskStartScheduler+0xb0>
 801558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015590:	b672      	cpsid	i
 8015592:	f383 8811 	msr	BASEPRI, r3
 8015596:	f3bf 8f6f 	isb	sy
 801559a:	f3bf 8f4f 	dsb	sy
 801559e:	b662      	cpsie	i
 80155a0:	60fb      	str	r3, [r7, #12]
 80155a2:	e7fe      	b.n	80155a2 <vTaskStartScheduler+0xae>
}
 80155a4:	bf00      	nop
 80155a6:	3718      	adds	r7, #24
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}
 80155ac:	0801a9bc 	.word	0x0801a9bc
 80155b0:	08015c09 	.word	0x08015c09
 80155b4:	20001024 	.word	0x20001024
 80155b8:	20001020 	.word	0x20001020
 80155bc:	2000100c 	.word	0x2000100c
 80155c0:	20001004 	.word	0x20001004

080155c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80155c4:	b480      	push	{r7}
 80155c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80155c8:	4b04      	ldr	r3, [pc, #16]	; (80155dc <vTaskSuspendAll+0x18>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	3301      	adds	r3, #1
 80155ce:	4a03      	ldr	r2, [pc, #12]	; (80155dc <vTaskSuspendAll+0x18>)
 80155d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80155d2:	bf00      	nop
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr
 80155dc:	20001028 	.word	0x20001028

080155e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80155e6:	2300      	movs	r3, #0
 80155e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80155ea:	2300      	movs	r3, #0
 80155ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80155ee:	4b42      	ldr	r3, [pc, #264]	; (80156f8 <xTaskResumeAll+0x118>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d10b      	bne.n	801560e <xTaskResumeAll+0x2e>
 80155f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fa:	b672      	cpsid	i
 80155fc:	f383 8811 	msr	BASEPRI, r3
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	f3bf 8f4f 	dsb	sy
 8015608:	b662      	cpsie	i
 801560a:	603b      	str	r3, [r7, #0]
 801560c:	e7fe      	b.n	801560c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801560e:	f001 fa1b 	bl	8016a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015612:	4b39      	ldr	r3, [pc, #228]	; (80156f8 <xTaskResumeAll+0x118>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	3b01      	subs	r3, #1
 8015618:	4a37      	ldr	r2, [pc, #220]	; (80156f8 <xTaskResumeAll+0x118>)
 801561a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801561c:	4b36      	ldr	r3, [pc, #216]	; (80156f8 <xTaskResumeAll+0x118>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d162      	bne.n	80156ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015624:	4b35      	ldr	r3, [pc, #212]	; (80156fc <xTaskResumeAll+0x11c>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d05e      	beq.n	80156ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801562c:	e02f      	b.n	801568e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801562e:	4b34      	ldr	r3, [pc, #208]	; (8015700 <xTaskResumeAll+0x120>)
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	3318      	adds	r3, #24
 801563a:	4618      	mov	r0, r3
 801563c:	f7fe fbea 	bl	8013e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	3304      	adds	r3, #4
 8015644:	4618      	mov	r0, r3
 8015646:	f7fe fbe5 	bl	8013e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801564e:	4b2d      	ldr	r3, [pc, #180]	; (8015704 <xTaskResumeAll+0x124>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	429a      	cmp	r2, r3
 8015654:	d903      	bls.n	801565e <xTaskResumeAll+0x7e>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801565a:	4a2a      	ldr	r2, [pc, #168]	; (8015704 <xTaskResumeAll+0x124>)
 801565c:	6013      	str	r3, [r2, #0]
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015662:	4613      	mov	r3, r2
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	4413      	add	r3, r2
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	4a27      	ldr	r2, [pc, #156]	; (8015708 <xTaskResumeAll+0x128>)
 801566c:	441a      	add	r2, r3
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	3304      	adds	r3, #4
 8015672:	4619      	mov	r1, r3
 8015674:	4610      	mov	r0, r2
 8015676:	f7fe fb70 	bl	8013d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801567e:	4b23      	ldr	r3, [pc, #140]	; (801570c <xTaskResumeAll+0x12c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015684:	429a      	cmp	r2, r3
 8015686:	d302      	bcc.n	801568e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015688:	4b21      	ldr	r3, [pc, #132]	; (8015710 <xTaskResumeAll+0x130>)
 801568a:	2201      	movs	r2, #1
 801568c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801568e:	4b1c      	ldr	r3, [pc, #112]	; (8015700 <xTaskResumeAll+0x120>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1cb      	bne.n	801562e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801569c:	f000 fb68 	bl	8015d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80156a0:	4b1c      	ldr	r3, [pc, #112]	; (8015714 <xTaskResumeAll+0x134>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d010      	beq.n	80156ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80156ac:	f000 f858 	bl	8015760 <xTaskIncrementTick>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d002      	beq.n	80156bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80156b6:	4b16      	ldr	r3, [pc, #88]	; (8015710 <xTaskResumeAll+0x130>)
 80156b8:	2201      	movs	r2, #1
 80156ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	3b01      	subs	r3, #1
 80156c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d1f1      	bne.n	80156ac <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80156c8:	4b12      	ldr	r3, [pc, #72]	; (8015714 <xTaskResumeAll+0x134>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80156ce:	4b10      	ldr	r3, [pc, #64]	; (8015710 <xTaskResumeAll+0x130>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d009      	beq.n	80156ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80156d6:	2301      	movs	r3, #1
 80156d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80156da:	4b0f      	ldr	r3, [pc, #60]	; (8015718 <xTaskResumeAll+0x138>)
 80156dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156e0:	601a      	str	r2, [r3, #0]
 80156e2:	f3bf 8f4f 	dsb	sy
 80156e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80156ea:	f001 f9df 	bl	8016aac <vPortExitCritical>

	return xAlreadyYielded;
 80156ee:	68bb      	ldr	r3, [r7, #8]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3710      	adds	r7, #16
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}
 80156f8:	20001028 	.word	0x20001028
 80156fc:	20001000 	.word	0x20001000
 8015700:	20000fc0 	.word	0x20000fc0
 8015704:	20001008 	.word	0x20001008
 8015708:	20000b30 	.word	0x20000b30
 801570c:	20000b2c 	.word	0x20000b2c
 8015710:	20001014 	.word	0x20001014
 8015714:	20001010 	.word	0x20001010
 8015718:	e000ed04 	.word	0xe000ed04

0801571c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015722:	4b05      	ldr	r3, [pc, #20]	; (8015738 <xTaskGetTickCount+0x1c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015728:	687b      	ldr	r3, [r7, #4]
}
 801572a:	4618      	mov	r0, r3
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop
 8015738:	20001004 	.word	0x20001004

0801573c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015742:	f001 fa61 	bl	8016c08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015746:	2300      	movs	r3, #0
 8015748:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801574a:	4b04      	ldr	r3, [pc, #16]	; (801575c <xTaskGetTickCountFromISR+0x20>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015750:	683b      	ldr	r3, [r7, #0]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3708      	adds	r7, #8
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	20001004 	.word	0x20001004

08015760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b086      	sub	sp, #24
 8015764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015766:	2300      	movs	r3, #0
 8015768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801576a:	4b4f      	ldr	r3, [pc, #316]	; (80158a8 <xTaskIncrementTick+0x148>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	f040 808a 	bne.w	8015888 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015774:	4b4d      	ldr	r3, [pc, #308]	; (80158ac <xTaskIncrementTick+0x14c>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3301      	adds	r3, #1
 801577a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801577c:	4a4b      	ldr	r2, [pc, #300]	; (80158ac <xTaskIncrementTick+0x14c>)
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d121      	bne.n	80157cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015788:	4b49      	ldr	r3, [pc, #292]	; (80158b0 <xTaskIncrementTick+0x150>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00b      	beq.n	80157aa <xTaskIncrementTick+0x4a>
 8015792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015796:	b672      	cpsid	i
 8015798:	f383 8811 	msr	BASEPRI, r3
 801579c:	f3bf 8f6f 	isb	sy
 80157a0:	f3bf 8f4f 	dsb	sy
 80157a4:	b662      	cpsie	i
 80157a6:	603b      	str	r3, [r7, #0]
 80157a8:	e7fe      	b.n	80157a8 <xTaskIncrementTick+0x48>
 80157aa:	4b41      	ldr	r3, [pc, #260]	; (80158b0 <xTaskIncrementTick+0x150>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	60fb      	str	r3, [r7, #12]
 80157b0:	4b40      	ldr	r3, [pc, #256]	; (80158b4 <xTaskIncrementTick+0x154>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	4a3e      	ldr	r2, [pc, #248]	; (80158b0 <xTaskIncrementTick+0x150>)
 80157b6:	6013      	str	r3, [r2, #0]
 80157b8:	4a3e      	ldr	r2, [pc, #248]	; (80158b4 <xTaskIncrementTick+0x154>)
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	6013      	str	r3, [r2, #0]
 80157be:	4b3e      	ldr	r3, [pc, #248]	; (80158b8 <xTaskIncrementTick+0x158>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	3301      	adds	r3, #1
 80157c4:	4a3c      	ldr	r2, [pc, #240]	; (80158b8 <xTaskIncrementTick+0x158>)
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	f000 fad2 	bl	8015d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80157cc:	4b3b      	ldr	r3, [pc, #236]	; (80158bc <xTaskIncrementTick+0x15c>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	693a      	ldr	r2, [r7, #16]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d349      	bcc.n	801586a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157d6:	4b36      	ldr	r3, [pc, #216]	; (80158b0 <xTaskIncrementTick+0x150>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d104      	bne.n	80157ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157e0:	4b36      	ldr	r3, [pc, #216]	; (80158bc <xTaskIncrementTick+0x15c>)
 80157e2:	f04f 32ff 	mov.w	r2, #4294967295
 80157e6:	601a      	str	r2, [r3, #0]
					break;
 80157e8:	e03f      	b.n	801586a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157ea:	4b31      	ldr	r3, [pc, #196]	; (80158b0 <xTaskIncrementTick+0x150>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80157fa:	693a      	ldr	r2, [r7, #16]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d203      	bcs.n	801580a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015802:	4a2e      	ldr	r2, [pc, #184]	; (80158bc <xTaskIncrementTick+0x15c>)
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015808:	e02f      	b.n	801586a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	3304      	adds	r3, #4
 801580e:	4618      	mov	r0, r3
 8015810:	f7fe fb00 	bl	8013e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015818:	2b00      	cmp	r3, #0
 801581a:	d004      	beq.n	8015826 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	3318      	adds	r3, #24
 8015820:	4618      	mov	r0, r3
 8015822:	f7fe faf7 	bl	8013e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801582a:	4b25      	ldr	r3, [pc, #148]	; (80158c0 <xTaskIncrementTick+0x160>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	429a      	cmp	r2, r3
 8015830:	d903      	bls.n	801583a <xTaskIncrementTick+0xda>
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015836:	4a22      	ldr	r2, [pc, #136]	; (80158c0 <xTaskIncrementTick+0x160>)
 8015838:	6013      	str	r3, [r2, #0]
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801583e:	4613      	mov	r3, r2
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	4413      	add	r3, r2
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	4a1f      	ldr	r2, [pc, #124]	; (80158c4 <xTaskIncrementTick+0x164>)
 8015848:	441a      	add	r2, r3
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	3304      	adds	r3, #4
 801584e:	4619      	mov	r1, r3
 8015850:	4610      	mov	r0, r2
 8015852:	f7fe fa82 	bl	8013d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801585a:	4b1b      	ldr	r3, [pc, #108]	; (80158c8 <xTaskIncrementTick+0x168>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015860:	429a      	cmp	r2, r3
 8015862:	d3b8      	bcc.n	80157d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015864:	2301      	movs	r3, #1
 8015866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015868:	e7b5      	b.n	80157d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801586a:	4b17      	ldr	r3, [pc, #92]	; (80158c8 <xTaskIncrementTick+0x168>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015870:	4914      	ldr	r1, [pc, #80]	; (80158c4 <xTaskIncrementTick+0x164>)
 8015872:	4613      	mov	r3, r2
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	4413      	add	r3, r2
 8015878:	009b      	lsls	r3, r3, #2
 801587a:	440b      	add	r3, r1
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	2b01      	cmp	r3, #1
 8015880:	d907      	bls.n	8015892 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015882:	2301      	movs	r3, #1
 8015884:	617b      	str	r3, [r7, #20]
 8015886:	e004      	b.n	8015892 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015888:	4b10      	ldr	r3, [pc, #64]	; (80158cc <xTaskIncrementTick+0x16c>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	3301      	adds	r3, #1
 801588e:	4a0f      	ldr	r2, [pc, #60]	; (80158cc <xTaskIncrementTick+0x16c>)
 8015890:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015892:	4b0f      	ldr	r3, [pc, #60]	; (80158d0 <xTaskIncrementTick+0x170>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d001      	beq.n	801589e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801589a:	2301      	movs	r3, #1
 801589c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801589e:	697b      	ldr	r3, [r7, #20]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3718      	adds	r7, #24
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	20001028 	.word	0x20001028
 80158ac:	20001004 	.word	0x20001004
 80158b0:	20000fb8 	.word	0x20000fb8
 80158b4:	20000fbc 	.word	0x20000fbc
 80158b8:	20001018 	.word	0x20001018
 80158bc:	20001020 	.word	0x20001020
 80158c0:	20001008 	.word	0x20001008
 80158c4:	20000b30 	.word	0x20000b30
 80158c8:	20000b2c 	.word	0x20000b2c
 80158cc:	20001010 	.word	0x20001010
 80158d0:	20001014 	.word	0x20001014

080158d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80158d4:	b480      	push	{r7}
 80158d6:	b085      	sub	sp, #20
 80158d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80158da:	4b28      	ldr	r3, [pc, #160]	; (801597c <vTaskSwitchContext+0xa8>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d003      	beq.n	80158ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80158e2:	4b27      	ldr	r3, [pc, #156]	; (8015980 <vTaskSwitchContext+0xac>)
 80158e4:	2201      	movs	r2, #1
 80158e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80158e8:	e042      	b.n	8015970 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80158ea:	4b25      	ldr	r3, [pc, #148]	; (8015980 <vTaskSwitchContext+0xac>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158f0:	4b24      	ldr	r3, [pc, #144]	; (8015984 <vTaskSwitchContext+0xb0>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	60fb      	str	r3, [r7, #12]
 80158f6:	e011      	b.n	801591c <vTaskSwitchContext+0x48>
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d10b      	bne.n	8015916 <vTaskSwitchContext+0x42>
 80158fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015902:	b672      	cpsid	i
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	b662      	cpsie	i
 8015912:	607b      	str	r3, [r7, #4]
 8015914:	e7fe      	b.n	8015914 <vTaskSwitchContext+0x40>
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	3b01      	subs	r3, #1
 801591a:	60fb      	str	r3, [r7, #12]
 801591c:	491a      	ldr	r1, [pc, #104]	; (8015988 <vTaskSwitchContext+0xb4>)
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	4613      	mov	r3, r2
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	4413      	add	r3, r2
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	440b      	add	r3, r1
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d0e3      	beq.n	80158f8 <vTaskSwitchContext+0x24>
 8015930:	68fa      	ldr	r2, [r7, #12]
 8015932:	4613      	mov	r3, r2
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	4413      	add	r3, r2
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	4a13      	ldr	r2, [pc, #76]	; (8015988 <vTaskSwitchContext+0xb4>)
 801593c:	4413      	add	r3, r2
 801593e:	60bb      	str	r3, [r7, #8]
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	685a      	ldr	r2, [r3, #4]
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	605a      	str	r2, [r3, #4]
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	685a      	ldr	r2, [r3, #4]
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	3308      	adds	r3, #8
 8015952:	429a      	cmp	r2, r3
 8015954:	d104      	bne.n	8015960 <vTaskSwitchContext+0x8c>
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	685a      	ldr	r2, [r3, #4]
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	605a      	str	r2, [r3, #4]
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	4a09      	ldr	r2, [pc, #36]	; (801598c <vTaskSwitchContext+0xb8>)
 8015968:	6013      	str	r3, [r2, #0]
 801596a:	4a06      	ldr	r2, [pc, #24]	; (8015984 <vTaskSwitchContext+0xb0>)
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	6013      	str	r3, [r2, #0]
}
 8015970:	bf00      	nop
 8015972:	3714      	adds	r7, #20
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr
 801597c:	20001028 	.word	0x20001028
 8015980:	20001014 	.word	0x20001014
 8015984:	20001008 	.word	0x20001008
 8015988:	20000b30 	.word	0x20000b30
 801598c:	20000b2c 	.word	0x20000b2c

08015990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10b      	bne.n	80159b8 <vTaskPlaceOnEventList+0x28>
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	b672      	cpsid	i
 80159a6:	f383 8811 	msr	BASEPRI, r3
 80159aa:	f3bf 8f6f 	isb	sy
 80159ae:	f3bf 8f4f 	dsb	sy
 80159b2:	b662      	cpsie	i
 80159b4:	60fb      	str	r3, [r7, #12]
 80159b6:	e7fe      	b.n	80159b6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80159b8:	4b07      	ldr	r3, [pc, #28]	; (80159d8 <vTaskPlaceOnEventList+0x48>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	3318      	adds	r3, #24
 80159be:	4619      	mov	r1, r3
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7fe f9ee 	bl	8013da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80159c6:	2101      	movs	r1, #1
 80159c8:	6838      	ldr	r0, [r7, #0]
 80159ca:	f000 fb8f 	bl	80160ec <prvAddCurrentTaskToDelayedList>
}
 80159ce:	bf00      	nop
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	20000b2c 	.word	0x20000b2c

080159dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d10b      	bne.n	8015a06 <vTaskPlaceOnEventListRestricted+0x2a>
 80159ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f2:	b672      	cpsid	i
 80159f4:	f383 8811 	msr	BASEPRI, r3
 80159f8:	f3bf 8f6f 	isb	sy
 80159fc:	f3bf 8f4f 	dsb	sy
 8015a00:	b662      	cpsie	i
 8015a02:	617b      	str	r3, [r7, #20]
 8015a04:	e7fe      	b.n	8015a04 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015a06:	4b0a      	ldr	r3, [pc, #40]	; (8015a30 <vTaskPlaceOnEventListRestricted+0x54>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	3318      	adds	r3, #24
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	68f8      	ldr	r0, [r7, #12]
 8015a10:	f7fe f9a3 	bl	8013d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d002      	beq.n	8015a20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015a20:	6879      	ldr	r1, [r7, #4]
 8015a22:	68b8      	ldr	r0, [r7, #8]
 8015a24:	f000 fb62 	bl	80160ec <prvAddCurrentTaskToDelayedList>
	}
 8015a28:	bf00      	nop
 8015a2a:	3718      	adds	r7, #24
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	20000b2c 	.word	0x20000b2c

08015a34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b086      	sub	sp, #24
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	68db      	ldr	r3, [r3, #12]
 8015a42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d10b      	bne.n	8015a62 <xTaskRemoveFromEventList+0x2e>
 8015a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a4e:	b672      	cpsid	i
 8015a50:	f383 8811 	msr	BASEPRI, r3
 8015a54:	f3bf 8f6f 	isb	sy
 8015a58:	f3bf 8f4f 	dsb	sy
 8015a5c:	b662      	cpsie	i
 8015a5e:	60fb      	str	r3, [r7, #12]
 8015a60:	e7fe      	b.n	8015a60 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	3318      	adds	r3, #24
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7fe f9d4 	bl	8013e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a6c:	4b1d      	ldr	r3, [pc, #116]	; (8015ae4 <xTaskRemoveFromEventList+0xb0>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d11d      	bne.n	8015ab0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	3304      	adds	r3, #4
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f7fe f9cb 	bl	8013e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a82:	4b19      	ldr	r3, [pc, #100]	; (8015ae8 <xTaskRemoveFromEventList+0xb4>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d903      	bls.n	8015a92 <xTaskRemoveFromEventList+0x5e>
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8e:	4a16      	ldr	r2, [pc, #88]	; (8015ae8 <xTaskRemoveFromEventList+0xb4>)
 8015a90:	6013      	str	r3, [r2, #0]
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a96:	4613      	mov	r3, r2
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	4413      	add	r3, r2
 8015a9c:	009b      	lsls	r3, r3, #2
 8015a9e:	4a13      	ldr	r2, [pc, #76]	; (8015aec <xTaskRemoveFromEventList+0xb8>)
 8015aa0:	441a      	add	r2, r3
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	4610      	mov	r0, r2
 8015aaa:	f7fe f956 	bl	8013d5a <vListInsertEnd>
 8015aae:	e005      	b.n	8015abc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	3318      	adds	r3, #24
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	480e      	ldr	r0, [pc, #56]	; (8015af0 <xTaskRemoveFromEventList+0xbc>)
 8015ab8:	f7fe f94f 	bl	8013d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ac0:	4b0c      	ldr	r3, [pc, #48]	; (8015af4 <xTaskRemoveFromEventList+0xc0>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d905      	bls.n	8015ad6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015aca:	2301      	movs	r3, #1
 8015acc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015ace:	4b0a      	ldr	r3, [pc, #40]	; (8015af8 <xTaskRemoveFromEventList+0xc4>)
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	601a      	str	r2, [r3, #0]
 8015ad4:	e001      	b.n	8015ada <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015ada:	697b      	ldr	r3, [r7, #20]
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	3718      	adds	r7, #24
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	20001028 	.word	0x20001028
 8015ae8:	20001008 	.word	0x20001008
 8015aec:	20000b30 	.word	0x20000b30
 8015af0:	20000fc0 	.word	0x20000fc0
 8015af4:	20000b2c 	.word	0x20000b2c
 8015af8:	20001014 	.word	0x20001014

08015afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015b04:	4b06      	ldr	r3, [pc, #24]	; (8015b20 <vTaskInternalSetTimeOutState+0x24>)
 8015b06:	681a      	ldr	r2, [r3, #0]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015b0c:	4b05      	ldr	r3, [pc, #20]	; (8015b24 <vTaskInternalSetTimeOutState+0x28>)
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	605a      	str	r2, [r3, #4]
}
 8015b14:	bf00      	nop
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	20001018 	.word	0x20001018
 8015b24:	20001004 	.word	0x20001004

08015b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b088      	sub	sp, #32
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10b      	bne.n	8015b50 <xTaskCheckForTimeOut+0x28>
 8015b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b3c:	b672      	cpsid	i
 8015b3e:	f383 8811 	msr	BASEPRI, r3
 8015b42:	f3bf 8f6f 	isb	sy
 8015b46:	f3bf 8f4f 	dsb	sy
 8015b4a:	b662      	cpsie	i
 8015b4c:	613b      	str	r3, [r7, #16]
 8015b4e:	e7fe      	b.n	8015b4e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d10b      	bne.n	8015b6e <xTaskCheckForTimeOut+0x46>
 8015b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5a:	b672      	cpsid	i
 8015b5c:	f383 8811 	msr	BASEPRI, r3
 8015b60:	f3bf 8f6f 	isb	sy
 8015b64:	f3bf 8f4f 	dsb	sy
 8015b68:	b662      	cpsie	i
 8015b6a:	60fb      	str	r3, [r7, #12]
 8015b6c:	e7fe      	b.n	8015b6c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015b6e:	f000 ff6b 	bl	8016a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015b72:	4b1d      	ldr	r3, [pc, #116]	; (8015be8 <xTaskCheckForTimeOut+0xc0>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	69ba      	ldr	r2, [r7, #24]
 8015b7e:	1ad3      	subs	r3, r2, r3
 8015b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b8a:	d102      	bne.n	8015b92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	61fb      	str	r3, [r7, #28]
 8015b90:	e023      	b.n	8015bda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681a      	ldr	r2, [r3, #0]
 8015b96:	4b15      	ldr	r3, [pc, #84]	; (8015bec <xTaskCheckForTimeOut+0xc4>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d007      	beq.n	8015bae <xTaskCheckForTimeOut+0x86>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	69ba      	ldr	r2, [r7, #24]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d302      	bcc.n	8015bae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	61fb      	str	r3, [r7, #28]
 8015bac:	e015      	b.n	8015bda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	697a      	ldr	r2, [r7, #20]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d20b      	bcs.n	8015bd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	681a      	ldr	r2, [r3, #0]
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	1ad2      	subs	r2, r2, r3
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7ff ff99 	bl	8015afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	61fb      	str	r3, [r7, #28]
 8015bce:	e004      	b.n	8015bda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015bda:	f000 ff67 	bl	8016aac <vPortExitCritical>

	return xReturn;
 8015bde:	69fb      	ldr	r3, [r7, #28]
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3720      	adds	r7, #32
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}
 8015be8:	20001004 	.word	0x20001004
 8015bec:	20001018 	.word	0x20001018

08015bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015bf4:	4b03      	ldr	r3, [pc, #12]	; (8015c04 <vTaskMissedYield+0x14>)
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	601a      	str	r2, [r3, #0]
}
 8015bfa:	bf00      	nop
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c02:	4770      	bx	lr
 8015c04:	20001014 	.word	0x20001014

08015c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015c10:	f000 f852 	bl	8015cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015c14:	4b06      	ldr	r3, [pc, #24]	; (8015c30 <prvIdleTask+0x28>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	2b01      	cmp	r3, #1
 8015c1a:	d9f9      	bls.n	8015c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015c1c:	4b05      	ldr	r3, [pc, #20]	; (8015c34 <prvIdleTask+0x2c>)
 8015c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c22:	601a      	str	r2, [r3, #0]
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015c2c:	e7f0      	b.n	8015c10 <prvIdleTask+0x8>
 8015c2e:	bf00      	nop
 8015c30:	20000b30 	.word	0x20000b30
 8015c34:	e000ed04 	.word	0xe000ed04

08015c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015c3e:	2300      	movs	r3, #0
 8015c40:	607b      	str	r3, [r7, #4]
 8015c42:	e00c      	b.n	8015c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	4613      	mov	r3, r2
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	4413      	add	r3, r2
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	4a12      	ldr	r2, [pc, #72]	; (8015c98 <prvInitialiseTaskLists+0x60>)
 8015c50:	4413      	add	r3, r2
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7fe f854 	bl	8013d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	607b      	str	r3, [r7, #4]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2b37      	cmp	r3, #55	; 0x37
 8015c62:	d9ef      	bls.n	8015c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015c64:	480d      	ldr	r0, [pc, #52]	; (8015c9c <prvInitialiseTaskLists+0x64>)
 8015c66:	f7fe f84b 	bl	8013d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015c6a:	480d      	ldr	r0, [pc, #52]	; (8015ca0 <prvInitialiseTaskLists+0x68>)
 8015c6c:	f7fe f848 	bl	8013d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015c70:	480c      	ldr	r0, [pc, #48]	; (8015ca4 <prvInitialiseTaskLists+0x6c>)
 8015c72:	f7fe f845 	bl	8013d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015c76:	480c      	ldr	r0, [pc, #48]	; (8015ca8 <prvInitialiseTaskLists+0x70>)
 8015c78:	f7fe f842 	bl	8013d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015c7c:	480b      	ldr	r0, [pc, #44]	; (8015cac <prvInitialiseTaskLists+0x74>)
 8015c7e:	f7fe f83f 	bl	8013d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015c82:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <prvInitialiseTaskLists+0x78>)
 8015c84:	4a05      	ldr	r2, [pc, #20]	; (8015c9c <prvInitialiseTaskLists+0x64>)
 8015c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015c88:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <prvInitialiseTaskLists+0x7c>)
 8015c8a:	4a05      	ldr	r2, [pc, #20]	; (8015ca0 <prvInitialiseTaskLists+0x68>)
 8015c8c:	601a      	str	r2, [r3, #0]
}
 8015c8e:	bf00      	nop
 8015c90:	3708      	adds	r7, #8
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	20000b30 	.word	0x20000b30
 8015c9c:	20000f90 	.word	0x20000f90
 8015ca0:	20000fa4 	.word	0x20000fa4
 8015ca4:	20000fc0 	.word	0x20000fc0
 8015ca8:	20000fd4 	.word	0x20000fd4
 8015cac:	20000fec 	.word	0x20000fec
 8015cb0:	20000fb8 	.word	0x20000fb8
 8015cb4:	20000fbc 	.word	0x20000fbc

08015cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015cbe:	e019      	b.n	8015cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015cc0:	f000 fec2 	bl	8016a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cc4:	4b0f      	ldr	r3, [pc, #60]	; (8015d04 <prvCheckTasksWaitingTermination+0x4c>)
 8015cc6:	68db      	ldr	r3, [r3, #12]
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	3304      	adds	r3, #4
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7fe f89f 	bl	8013e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015cd6:	4b0c      	ldr	r3, [pc, #48]	; (8015d08 <prvCheckTasksWaitingTermination+0x50>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	4a0a      	ldr	r2, [pc, #40]	; (8015d08 <prvCheckTasksWaitingTermination+0x50>)
 8015cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015ce0:	4b0a      	ldr	r3, [pc, #40]	; (8015d0c <prvCheckTasksWaitingTermination+0x54>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	3b01      	subs	r3, #1
 8015ce6:	4a09      	ldr	r2, [pc, #36]	; (8015d0c <prvCheckTasksWaitingTermination+0x54>)
 8015ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015cea:	f000 fedf 	bl	8016aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f000 f80e 	bl	8015d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015cf4:	4b05      	ldr	r3, [pc, #20]	; (8015d0c <prvCheckTasksWaitingTermination+0x54>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d1e1      	bne.n	8015cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015cfc:	bf00      	nop
 8015cfe:	3708      	adds	r7, #8
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	20000fd4 	.word	0x20000fd4
 8015d08:	20001000 	.word	0x20001000
 8015d0c:	20000fe8 	.word	0x20000fe8

08015d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d108      	bne.n	8015d34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d26:	4618      	mov	r0, r3
 8015d28:	f001 f878 	bl	8016e1c <vPortFree>
				vPortFree( pxTCB );
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f001 f875 	bl	8016e1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015d32:	e019      	b.n	8015d68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	d103      	bne.n	8015d46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f001 f86c 	bl	8016e1c <vPortFree>
	}
 8015d44:	e010      	b.n	8015d68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d4c:	2b02      	cmp	r3, #2
 8015d4e:	d00b      	beq.n	8015d68 <prvDeleteTCB+0x58>
 8015d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d54:	b672      	cpsid	i
 8015d56:	f383 8811 	msr	BASEPRI, r3
 8015d5a:	f3bf 8f6f 	isb	sy
 8015d5e:	f3bf 8f4f 	dsb	sy
 8015d62:	b662      	cpsie	i
 8015d64:	60fb      	str	r3, [r7, #12]
 8015d66:	e7fe      	b.n	8015d66 <prvDeleteTCB+0x56>
	}
 8015d68:	bf00      	nop
 8015d6a:	3710      	adds	r7, #16
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015d70:	b480      	push	{r7}
 8015d72:	b083      	sub	sp, #12
 8015d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d76:	4b0c      	ldr	r3, [pc, #48]	; (8015da8 <prvResetNextTaskUnblockTime+0x38>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d104      	bne.n	8015d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015d80:	4b0a      	ldr	r3, [pc, #40]	; (8015dac <prvResetNextTaskUnblockTime+0x3c>)
 8015d82:	f04f 32ff 	mov.w	r2, #4294967295
 8015d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015d88:	e008      	b.n	8015d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d8a:	4b07      	ldr	r3, [pc, #28]	; (8015da8 <prvResetNextTaskUnblockTime+0x38>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	68db      	ldr	r3, [r3, #12]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	4a04      	ldr	r2, [pc, #16]	; (8015dac <prvResetNextTaskUnblockTime+0x3c>)
 8015d9a:	6013      	str	r3, [r2, #0]
}
 8015d9c:	bf00      	nop
 8015d9e:	370c      	adds	r7, #12
 8015da0:	46bd      	mov	sp, r7
 8015da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da6:	4770      	bx	lr
 8015da8:	20000fb8 	.word	0x20000fb8
 8015dac:	20001020 	.word	0x20001020

08015db0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015db6:	4b05      	ldr	r3, [pc, #20]	; (8015dcc <xTaskGetCurrentTaskHandle+0x1c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015dbc:	687b      	ldr	r3, [r7, #4]
	}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	370c      	adds	r7, #12
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	20000b2c 	.word	0x20000b2c

08015dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015dd0:	b480      	push	{r7}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015dd6:	4b0b      	ldr	r3, [pc, #44]	; (8015e04 <xTaskGetSchedulerState+0x34>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d102      	bne.n	8015de4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015dde:	2301      	movs	r3, #1
 8015de0:	607b      	str	r3, [r7, #4]
 8015de2:	e008      	b.n	8015df6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015de4:	4b08      	ldr	r3, [pc, #32]	; (8015e08 <xTaskGetSchedulerState+0x38>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015dec:	2302      	movs	r3, #2
 8015dee:	607b      	str	r3, [r7, #4]
 8015df0:	e001      	b.n	8015df6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015df2:	2300      	movs	r3, #0
 8015df4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015df6:	687b      	ldr	r3, [r7, #4]
	}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	2000100c 	.word	0x2000100c
 8015e08:	20001028 	.word	0x20001028

08015e0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d051      	beq.n	8015ec6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e26:	4b2a      	ldr	r3, [pc, #168]	; (8015ed0 <xTaskPriorityInherit+0xc4>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d241      	bcs.n	8015eb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	699b      	ldr	r3, [r3, #24]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	db06      	blt.n	8015e46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e38:	4b25      	ldr	r3, [pc, #148]	; (8015ed0 <xTaskPriorityInherit+0xc4>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	6959      	ldr	r1, [r3, #20]
 8015e4a:	68bb      	ldr	r3, [r7, #8]
 8015e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e4e:	4613      	mov	r3, r2
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	4413      	add	r3, r2
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	4a1f      	ldr	r2, [pc, #124]	; (8015ed4 <xTaskPriorityInherit+0xc8>)
 8015e58:	4413      	add	r3, r2
 8015e5a:	4299      	cmp	r1, r3
 8015e5c:	d122      	bne.n	8015ea4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	3304      	adds	r3, #4
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fd ffd6 	bl	8013e14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015e68:	4b19      	ldr	r3, [pc, #100]	; (8015ed0 <xTaskPriorityInherit+0xc4>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e76:	4b18      	ldr	r3, [pc, #96]	; (8015ed8 <xTaskPriorityInherit+0xcc>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d903      	bls.n	8015e86 <xTaskPriorityInherit+0x7a>
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e82:	4a15      	ldr	r2, [pc, #84]	; (8015ed8 <xTaskPriorityInherit+0xcc>)
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4413      	add	r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	4a10      	ldr	r2, [pc, #64]	; (8015ed4 <xTaskPriorityInherit+0xc8>)
 8015e94:	441a      	add	r2, r3
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	3304      	adds	r3, #4
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	4610      	mov	r0, r2
 8015e9e:	f7fd ff5c 	bl	8013d5a <vListInsertEnd>
 8015ea2:	e004      	b.n	8015eae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015ea4:	4b0a      	ldr	r3, [pc, #40]	; (8015ed0 <xTaskPriorityInherit+0xc4>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015eae:	2301      	movs	r3, #1
 8015eb0:	60fb      	str	r3, [r7, #12]
 8015eb2:	e008      	b.n	8015ec6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015eb8:	4b05      	ldr	r3, [pc, #20]	; (8015ed0 <xTaskPriorityInherit+0xc4>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d201      	bcs.n	8015ec6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
	}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3710      	adds	r7, #16
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	20000b2c 	.word	0x20000b2c
 8015ed4:	20000b30 	.word	0x20000b30
 8015ed8:	20001008 	.word	0x20001008

08015edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b086      	sub	sp, #24
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d058      	beq.n	8015fa4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015ef2:	4b2f      	ldr	r3, [pc, #188]	; (8015fb0 <xTaskPriorityDisinherit+0xd4>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	693a      	ldr	r2, [r7, #16]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d00b      	beq.n	8015f14 <xTaskPriorityDisinherit+0x38>
 8015efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f00:	b672      	cpsid	i
 8015f02:	f383 8811 	msr	BASEPRI, r3
 8015f06:	f3bf 8f6f 	isb	sy
 8015f0a:	f3bf 8f4f 	dsb	sy
 8015f0e:	b662      	cpsie	i
 8015f10:	60fb      	str	r3, [r7, #12]
 8015f12:	e7fe      	b.n	8015f12 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d10b      	bne.n	8015f34 <xTaskPriorityDisinherit+0x58>
 8015f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f20:	b672      	cpsid	i
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	b662      	cpsie	i
 8015f30:	60bb      	str	r3, [r7, #8]
 8015f32:	e7fe      	b.n	8015f32 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f38:	1e5a      	subs	r2, r3, #1
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d02c      	beq.n	8015fa4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015f4a:	693b      	ldr	r3, [r7, #16]
 8015f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d128      	bne.n	8015fa4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	3304      	adds	r3, #4
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7fd ff5c 	bl	8013e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015f6c:	693b      	ldr	r3, [r7, #16]
 8015f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f74:	4b0f      	ldr	r3, [pc, #60]	; (8015fb4 <xTaskPriorityDisinherit+0xd8>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d903      	bls.n	8015f84 <xTaskPriorityDisinherit+0xa8>
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f80:	4a0c      	ldr	r2, [pc, #48]	; (8015fb4 <xTaskPriorityDisinherit+0xd8>)
 8015f82:	6013      	str	r3, [r2, #0]
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f88:	4613      	mov	r3, r2
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	4413      	add	r3, r2
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	4a09      	ldr	r2, [pc, #36]	; (8015fb8 <xTaskPriorityDisinherit+0xdc>)
 8015f92:	441a      	add	r2, r3
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	3304      	adds	r3, #4
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	f7fd fedd 	bl	8013d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015fa4:	697b      	ldr	r3, [r7, #20]
	}
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3718      	adds	r7, #24
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	20000b2c 	.word	0x20000b2c
 8015fb4:	20001008 	.word	0x20001008
 8015fb8:	20000b30 	.word	0x20000b30

08015fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b088      	sub	sp, #32
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d06c      	beq.n	80160ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d10b      	bne.n	8015ff4 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8015fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe0:	b672      	cpsid	i
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	b662      	cpsie	i
 8015ff0:	60fb      	str	r3, [r7, #12]
 8015ff2:	e7fe      	b.n	8015ff2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d902      	bls.n	8016004 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	61fb      	str	r3, [r7, #28]
 8016002:	e002      	b.n	801600a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016008:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801600e:	69fa      	ldr	r2, [r7, #28]
 8016010:	429a      	cmp	r2, r3
 8016012:	d04c      	beq.n	80160ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016014:	69bb      	ldr	r3, [r7, #24]
 8016016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016018:	697a      	ldr	r2, [r7, #20]
 801601a:	429a      	cmp	r2, r3
 801601c:	d147      	bne.n	80160ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801601e:	4b26      	ldr	r3, [pc, #152]	; (80160b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	69ba      	ldr	r2, [r7, #24]
 8016024:	429a      	cmp	r2, r3
 8016026:	d10b      	bne.n	8016040 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8016028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602c:	b672      	cpsid	i
 801602e:	f383 8811 	msr	BASEPRI, r3
 8016032:	f3bf 8f6f 	isb	sy
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	b662      	cpsie	i
 801603c:	60bb      	str	r3, [r7, #8]
 801603e:	e7fe      	b.n	801603e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016044:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	69fa      	ldr	r2, [r7, #28]
 801604a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	699b      	ldr	r3, [r3, #24]
 8016050:	2b00      	cmp	r3, #0
 8016052:	db04      	blt.n	801605e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016054:	69fb      	ldr	r3, [r7, #28]
 8016056:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801605a:	69bb      	ldr	r3, [r7, #24]
 801605c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	6959      	ldr	r1, [r3, #20]
 8016062:	693a      	ldr	r2, [r7, #16]
 8016064:	4613      	mov	r3, r2
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	4413      	add	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	4a13      	ldr	r2, [pc, #76]	; (80160bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801606e:	4413      	add	r3, r2
 8016070:	4299      	cmp	r1, r3
 8016072:	d11c      	bne.n	80160ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	3304      	adds	r3, #4
 8016078:	4618      	mov	r0, r3
 801607a:	f7fd fecb 	bl	8013e14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016082:	4b0f      	ldr	r3, [pc, #60]	; (80160c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	429a      	cmp	r2, r3
 8016088:	d903      	bls.n	8016092 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801608a:	69bb      	ldr	r3, [r7, #24]
 801608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801608e:	4a0c      	ldr	r2, [pc, #48]	; (80160c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016090:	6013      	str	r3, [r2, #0]
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016096:	4613      	mov	r3, r2
 8016098:	009b      	lsls	r3, r3, #2
 801609a:	4413      	add	r3, r2
 801609c:	009b      	lsls	r3, r3, #2
 801609e:	4a07      	ldr	r2, [pc, #28]	; (80160bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80160a0:	441a      	add	r2, r3
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	3304      	adds	r3, #4
 80160a6:	4619      	mov	r1, r3
 80160a8:	4610      	mov	r0, r2
 80160aa:	f7fd fe56 	bl	8013d5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80160ae:	bf00      	nop
 80160b0:	3720      	adds	r7, #32
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	20000b2c 	.word	0x20000b2c
 80160bc:	20000b30 	.word	0x20000b30
 80160c0:	20001008 	.word	0x20001008

080160c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80160c4:	b480      	push	{r7}
 80160c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80160c8:	4b07      	ldr	r3, [pc, #28]	; (80160e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d004      	beq.n	80160da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80160d0:	4b05      	ldr	r3, [pc, #20]	; (80160e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160d6:	3201      	adds	r2, #1
 80160d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80160da:	4b03      	ldr	r3, [pc, #12]	; (80160e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80160dc:	681b      	ldr	r3, [r3, #0]
	}
 80160de:	4618      	mov	r0, r3
 80160e0:	46bd      	mov	sp, r7
 80160e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e6:	4770      	bx	lr
 80160e8:	20000b2c 	.word	0x20000b2c

080160ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80160f6:	4b21      	ldr	r3, [pc, #132]	; (801617c <prvAddCurrentTaskToDelayedList+0x90>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160fc:	4b20      	ldr	r3, [pc, #128]	; (8016180 <prvAddCurrentTaskToDelayedList+0x94>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	3304      	adds	r3, #4
 8016102:	4618      	mov	r0, r3
 8016104:	f7fd fe86 	bl	8013e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801610e:	d10a      	bne.n	8016126 <prvAddCurrentTaskToDelayedList+0x3a>
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d007      	beq.n	8016126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016116:	4b1a      	ldr	r3, [pc, #104]	; (8016180 <prvAddCurrentTaskToDelayedList+0x94>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3304      	adds	r3, #4
 801611c:	4619      	mov	r1, r3
 801611e:	4819      	ldr	r0, [pc, #100]	; (8016184 <prvAddCurrentTaskToDelayedList+0x98>)
 8016120:	f7fd fe1b 	bl	8013d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016124:	e026      	b.n	8016174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	4413      	add	r3, r2
 801612c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801612e:	4b14      	ldr	r3, [pc, #80]	; (8016180 <prvAddCurrentTaskToDelayedList+0x94>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016136:	68ba      	ldr	r2, [r7, #8]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	429a      	cmp	r2, r3
 801613c:	d209      	bcs.n	8016152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801613e:	4b12      	ldr	r3, [pc, #72]	; (8016188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	4b0f      	ldr	r3, [pc, #60]	; (8016180 <prvAddCurrentTaskToDelayedList+0x94>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	3304      	adds	r3, #4
 8016148:	4619      	mov	r1, r3
 801614a:	4610      	mov	r0, r2
 801614c:	f7fd fe29 	bl	8013da2 <vListInsert>
}
 8016150:	e010      	b.n	8016174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016152:	4b0e      	ldr	r3, [pc, #56]	; (801618c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	4b0a      	ldr	r3, [pc, #40]	; (8016180 <prvAddCurrentTaskToDelayedList+0x94>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	3304      	adds	r3, #4
 801615c:	4619      	mov	r1, r3
 801615e:	4610      	mov	r0, r2
 8016160:	f7fd fe1f 	bl	8013da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016164:	4b0a      	ldr	r3, [pc, #40]	; (8016190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	68ba      	ldr	r2, [r7, #8]
 801616a:	429a      	cmp	r2, r3
 801616c:	d202      	bcs.n	8016174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801616e:	4a08      	ldr	r2, [pc, #32]	; (8016190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	6013      	str	r3, [r2, #0]
}
 8016174:	bf00      	nop
 8016176:	3710      	adds	r7, #16
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}
 801617c:	20001004 	.word	0x20001004
 8016180:	20000b2c 	.word	0x20000b2c
 8016184:	20000fec 	.word	0x20000fec
 8016188:	20000fbc 	.word	0x20000fbc
 801618c:	20000fb8 	.word	0x20000fb8
 8016190:	20001020 	.word	0x20001020

08016194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b08a      	sub	sp, #40	; 0x28
 8016198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801619a:	2300      	movs	r3, #0
 801619c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801619e:	f000 fb0d 	bl	80167bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80161a2:	4b1d      	ldr	r3, [pc, #116]	; (8016218 <xTimerCreateTimerTask+0x84>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d021      	beq.n	80161ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80161ae:	2300      	movs	r3, #0
 80161b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80161b2:	1d3a      	adds	r2, r7, #4
 80161b4:	f107 0108 	add.w	r1, r7, #8
 80161b8:	f107 030c 	add.w	r3, r7, #12
 80161bc:	4618      	mov	r0, r3
 80161be:	f7fd fd85 	bl	8013ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80161c2:	6879      	ldr	r1, [r7, #4]
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	68fa      	ldr	r2, [r7, #12]
 80161c8:	9202      	str	r2, [sp, #8]
 80161ca:	9301      	str	r3, [sp, #4]
 80161cc:	2302      	movs	r3, #2
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	2300      	movs	r3, #0
 80161d2:	460a      	mov	r2, r1
 80161d4:	4911      	ldr	r1, [pc, #68]	; (801621c <xTimerCreateTimerTask+0x88>)
 80161d6:	4812      	ldr	r0, [pc, #72]	; (8016220 <xTimerCreateTimerTask+0x8c>)
 80161d8:	f7fe ff30 	bl	801503c <xTaskCreateStatic>
 80161dc:	4602      	mov	r2, r0
 80161de:	4b11      	ldr	r3, [pc, #68]	; (8016224 <xTimerCreateTimerTask+0x90>)
 80161e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80161e2:	4b10      	ldr	r3, [pc, #64]	; (8016224 <xTimerCreateTimerTask+0x90>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d001      	beq.n	80161ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80161ea:	2301      	movs	r3, #1
 80161ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80161ee:	697b      	ldr	r3, [r7, #20]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d10b      	bne.n	801620c <xTimerCreateTimerTask+0x78>
 80161f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161f8:	b672      	cpsid	i
 80161fa:	f383 8811 	msr	BASEPRI, r3
 80161fe:	f3bf 8f6f 	isb	sy
 8016202:	f3bf 8f4f 	dsb	sy
 8016206:	b662      	cpsie	i
 8016208:	613b      	str	r3, [r7, #16]
 801620a:	e7fe      	b.n	801620a <xTimerCreateTimerTask+0x76>
	return xReturn;
 801620c:	697b      	ldr	r3, [r7, #20]
}
 801620e:	4618      	mov	r0, r3
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	2000105c 	.word	0x2000105c
 801621c:	0801a9c4 	.word	0x0801a9c4
 8016220:	08016361 	.word	0x08016361
 8016224:	20001060 	.word	0x20001060

08016228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b08a      	sub	sp, #40	; 0x28
 801622c:	af00      	add	r7, sp, #0
 801622e:	60f8      	str	r0, [r7, #12]
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	607a      	str	r2, [r7, #4]
 8016234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016236:	2300      	movs	r3, #0
 8016238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d10b      	bne.n	8016258 <xTimerGenericCommand+0x30>
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	b672      	cpsid	i
 8016246:	f383 8811 	msr	BASEPRI, r3
 801624a:	f3bf 8f6f 	isb	sy
 801624e:	f3bf 8f4f 	dsb	sy
 8016252:	b662      	cpsie	i
 8016254:	623b      	str	r3, [r7, #32]
 8016256:	e7fe      	b.n	8016256 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016258:	4b19      	ldr	r3, [pc, #100]	; (80162c0 <xTimerGenericCommand+0x98>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d02a      	beq.n	80162b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	2b05      	cmp	r3, #5
 8016270:	dc18      	bgt.n	80162a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016272:	f7ff fdad 	bl	8015dd0 <xTaskGetSchedulerState>
 8016276:	4603      	mov	r3, r0
 8016278:	2b02      	cmp	r3, #2
 801627a:	d109      	bne.n	8016290 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801627c:	4b10      	ldr	r3, [pc, #64]	; (80162c0 <xTimerGenericCommand+0x98>)
 801627e:	6818      	ldr	r0, [r3, #0]
 8016280:	f107 0110 	add.w	r1, r7, #16
 8016284:	2300      	movs	r3, #0
 8016286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016288:	f7fe f860 	bl	801434c <xQueueGenericSend>
 801628c:	6278      	str	r0, [r7, #36]	; 0x24
 801628e:	e012      	b.n	80162b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016290:	4b0b      	ldr	r3, [pc, #44]	; (80162c0 <xTimerGenericCommand+0x98>)
 8016292:	6818      	ldr	r0, [r3, #0]
 8016294:	f107 0110 	add.w	r1, r7, #16
 8016298:	2300      	movs	r3, #0
 801629a:	2200      	movs	r2, #0
 801629c:	f7fe f856 	bl	801434c <xQueueGenericSend>
 80162a0:	6278      	str	r0, [r7, #36]	; 0x24
 80162a2:	e008      	b.n	80162b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162a4:	4b06      	ldr	r3, [pc, #24]	; (80162c0 <xTimerGenericCommand+0x98>)
 80162a6:	6818      	ldr	r0, [r3, #0]
 80162a8:	f107 0110 	add.w	r1, r7, #16
 80162ac:	2300      	movs	r3, #0
 80162ae:	683a      	ldr	r2, [r7, #0]
 80162b0:	f7fe f94e 	bl	8014550 <xQueueGenericSendFromISR>
 80162b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80162b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3728      	adds	r7, #40	; 0x28
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	2000105c 	.word	0x2000105c

080162c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b088      	sub	sp, #32
 80162c8:	af02      	add	r7, sp, #8
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ce:	4b23      	ldr	r3, [pc, #140]	; (801635c <prvProcessExpiredTimer+0x98>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	3304      	adds	r3, #4
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fd fd99 	bl	8013e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162e8:	f003 0304 	and.w	r3, r3, #4
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d023      	beq.n	8016338 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	699a      	ldr	r2, [r3, #24]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	18d1      	adds	r1, r2, r3
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	6978      	ldr	r0, [r7, #20]
 80162fe:	f000 f8d3 	bl	80164a8 <prvInsertTimerInActiveList>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d020      	beq.n	801634a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016308:	2300      	movs	r3, #0
 801630a:	9300      	str	r3, [sp, #0]
 801630c:	2300      	movs	r3, #0
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	2100      	movs	r1, #0
 8016312:	6978      	ldr	r0, [r7, #20]
 8016314:	f7ff ff88 	bl	8016228 <xTimerGenericCommand>
 8016318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801631a:	693b      	ldr	r3, [r7, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d114      	bne.n	801634a <prvProcessExpiredTimer+0x86>
 8016320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016324:	b672      	cpsid	i
 8016326:	f383 8811 	msr	BASEPRI, r3
 801632a:	f3bf 8f6f 	isb	sy
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	b662      	cpsie	i
 8016334:	60fb      	str	r3, [r7, #12]
 8016336:	e7fe      	b.n	8016336 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016338:	697b      	ldr	r3, [r7, #20]
 801633a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801633e:	f023 0301 	bic.w	r3, r3, #1
 8016342:	b2da      	uxtb	r2, r3
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	6a1b      	ldr	r3, [r3, #32]
 801634e:	6978      	ldr	r0, [r7, #20]
 8016350:	4798      	blx	r3
}
 8016352:	bf00      	nop
 8016354:	3718      	adds	r7, #24
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	20001054 	.word	0x20001054

08016360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016368:	f107 0308 	add.w	r3, r7, #8
 801636c:	4618      	mov	r0, r3
 801636e:	f000 f857 	bl	8016420 <prvGetNextExpireTime>
 8016372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	4619      	mov	r1, r3
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f000 f803 	bl	8016384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801637e:	f000 f8d5 	bl	801652c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016382:	e7f1      	b.n	8016368 <prvTimerTask+0x8>

08016384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801638e:	f7ff f919 	bl	80155c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016392:	f107 0308 	add.w	r3, r7, #8
 8016396:	4618      	mov	r0, r3
 8016398:	f000 f866 	bl	8016468 <prvSampleTimeNow>
 801639c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d130      	bne.n	8016406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d10a      	bne.n	80163c0 <prvProcessTimerOrBlockTask+0x3c>
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d806      	bhi.n	80163c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80163b2:	f7ff f915 	bl	80155e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80163b6:	68f9      	ldr	r1, [r7, #12]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7ff ff83 	bl	80162c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80163be:	e024      	b.n	801640a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d008      	beq.n	80163d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80163c6:	4b13      	ldr	r3, [pc, #76]	; (8016414 <prvProcessTimerOrBlockTask+0x90>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d101      	bne.n	80163d4 <prvProcessTimerOrBlockTask+0x50>
 80163d0:	2301      	movs	r3, #1
 80163d2:	e000      	b.n	80163d6 <prvProcessTimerOrBlockTask+0x52>
 80163d4:	2300      	movs	r3, #0
 80163d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80163d8:	4b0f      	ldr	r3, [pc, #60]	; (8016418 <prvProcessTimerOrBlockTask+0x94>)
 80163da:	6818      	ldr	r0, [r3, #0]
 80163dc:	687a      	ldr	r2, [r7, #4]
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	683a      	ldr	r2, [r7, #0]
 80163e4:	4619      	mov	r1, r3
 80163e6:	f7fe fdf5 	bl	8014fd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80163ea:	f7ff f8f9 	bl	80155e0 <xTaskResumeAll>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d10a      	bne.n	801640a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80163f4:	4b09      	ldr	r3, [pc, #36]	; (801641c <prvProcessTimerOrBlockTask+0x98>)
 80163f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163fa:	601a      	str	r2, [r3, #0]
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	f3bf 8f6f 	isb	sy
}
 8016404:	e001      	b.n	801640a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016406:	f7ff f8eb 	bl	80155e0 <xTaskResumeAll>
}
 801640a:	bf00      	nop
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	20001058 	.word	0x20001058
 8016418:	2000105c 	.word	0x2000105c
 801641c:	e000ed04 	.word	0xe000ed04

08016420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016428:	4b0e      	ldr	r3, [pc, #56]	; (8016464 <prvGetNextExpireTime+0x44>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d101      	bne.n	8016436 <prvGetNextExpireTime+0x16>
 8016432:	2201      	movs	r2, #1
 8016434:	e000      	b.n	8016438 <prvGetNextExpireTime+0x18>
 8016436:	2200      	movs	r2, #0
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d105      	bne.n	8016450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016444:	4b07      	ldr	r3, [pc, #28]	; (8016464 <prvGetNextExpireTime+0x44>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	60fb      	str	r3, [r7, #12]
 801644e:	e001      	b.n	8016454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016450:	2300      	movs	r3, #0
 8016452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016454:	68fb      	ldr	r3, [r7, #12]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3714      	adds	r7, #20
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	20001054 	.word	0x20001054

08016468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016470:	f7ff f954 	bl	801571c <xTaskGetTickCount>
 8016474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016476:	4b0b      	ldr	r3, [pc, #44]	; (80164a4 <prvSampleTimeNow+0x3c>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	68fa      	ldr	r2, [r7, #12]
 801647c:	429a      	cmp	r2, r3
 801647e:	d205      	bcs.n	801648c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016480:	f000 f936 	bl	80166f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2201      	movs	r2, #1
 8016488:	601a      	str	r2, [r3, #0]
 801648a:	e002      	b.n	8016492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2200      	movs	r2, #0
 8016490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016492:	4a04      	ldr	r2, [pc, #16]	; (80164a4 <prvSampleTimeNow+0x3c>)
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016498:	68fb      	ldr	r3, [r7, #12]
}
 801649a:	4618      	mov	r0, r3
 801649c:	3710      	adds	r7, #16
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	20001064 	.word	0x20001064

080164a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b086      	sub	sp, #24
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
 80164b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80164b6:	2300      	movs	r3, #0
 80164b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	68ba      	ldr	r2, [r7, #8]
 80164be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	68fa      	ldr	r2, [r7, #12]
 80164c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80164c6:	68ba      	ldr	r2, [r7, #8]
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d812      	bhi.n	80164f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	1ad2      	subs	r2, r2, r3
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	699b      	ldr	r3, [r3, #24]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d302      	bcc.n	80164e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80164dc:	2301      	movs	r3, #1
 80164de:	617b      	str	r3, [r7, #20]
 80164e0:	e01b      	b.n	801651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80164e2:	4b10      	ldr	r3, [pc, #64]	; (8016524 <prvInsertTimerInActiveList+0x7c>)
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	3304      	adds	r3, #4
 80164ea:	4619      	mov	r1, r3
 80164ec:	4610      	mov	r0, r2
 80164ee:	f7fd fc58 	bl	8013da2 <vListInsert>
 80164f2:	e012      	b.n	801651a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80164f4:	687a      	ldr	r2, [r7, #4]
 80164f6:	683b      	ldr	r3, [r7, #0]
 80164f8:	429a      	cmp	r2, r3
 80164fa:	d206      	bcs.n	801650a <prvInsertTimerInActiveList+0x62>
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	429a      	cmp	r2, r3
 8016502:	d302      	bcc.n	801650a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016504:	2301      	movs	r3, #1
 8016506:	617b      	str	r3, [r7, #20]
 8016508:	e007      	b.n	801651a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801650a:	4b07      	ldr	r3, [pc, #28]	; (8016528 <prvInsertTimerInActiveList+0x80>)
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	3304      	adds	r3, #4
 8016512:	4619      	mov	r1, r3
 8016514:	4610      	mov	r0, r2
 8016516:	f7fd fc44 	bl	8013da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801651a:	697b      	ldr	r3, [r7, #20]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3718      	adds	r7, #24
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	20001058 	.word	0x20001058
 8016528:	20001054 	.word	0x20001054

0801652c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b08e      	sub	sp, #56	; 0x38
 8016530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016532:	e0cc      	b.n	80166ce <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2b00      	cmp	r3, #0
 8016538:	da19      	bge.n	801656e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801653a:	1d3b      	adds	r3, r7, #4
 801653c:	3304      	adds	r3, #4
 801653e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	2b00      	cmp	r3, #0
 8016544:	d10b      	bne.n	801655e <prvProcessReceivedCommands+0x32>
 8016546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654a:	b672      	cpsid	i
 801654c:	f383 8811 	msr	BASEPRI, r3
 8016550:	f3bf 8f6f 	isb	sy
 8016554:	f3bf 8f4f 	dsb	sy
 8016558:	b662      	cpsie	i
 801655a:	61fb      	str	r3, [r7, #28]
 801655c:	e7fe      	b.n	801655c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016564:	6850      	ldr	r0, [r2, #4]
 8016566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016568:	6892      	ldr	r2, [r2, #8]
 801656a:	4611      	mov	r1, r2
 801656c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	f2c0 80ab 	blt.w	80166cc <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657c:	695b      	ldr	r3, [r3, #20]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d004      	beq.n	801658c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016584:	3304      	adds	r3, #4
 8016586:	4618      	mov	r0, r3
 8016588:	f7fd fc44 	bl	8013e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801658c:	463b      	mov	r3, r7
 801658e:	4618      	mov	r0, r3
 8016590:	f7ff ff6a 	bl	8016468 <prvSampleTimeNow>
 8016594:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b09      	cmp	r3, #9
 801659a:	f200 8098 	bhi.w	80166ce <prvProcessReceivedCommands+0x1a2>
 801659e:	a201      	add	r2, pc, #4	; (adr r2, 80165a4 <prvProcessReceivedCommands+0x78>)
 80165a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165a4:	080165cd 	.word	0x080165cd
 80165a8:	080165cd 	.word	0x080165cd
 80165ac:	080165cd 	.word	0x080165cd
 80165b0:	08016643 	.word	0x08016643
 80165b4:	08016657 	.word	0x08016657
 80165b8:	080166a3 	.word	0x080166a3
 80165bc:	080165cd 	.word	0x080165cd
 80165c0:	080165cd 	.word	0x080165cd
 80165c4:	08016643 	.word	0x08016643
 80165c8:	08016657 	.word	0x08016657
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80165cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165d2:	f043 0301 	orr.w	r3, r3, #1
 80165d6:	b2da      	uxtb	r2, r3
 80165d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80165de:	68ba      	ldr	r2, [r7, #8]
 80165e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e2:	699b      	ldr	r3, [r3, #24]
 80165e4:	18d1      	adds	r1, r2, r3
 80165e6:	68bb      	ldr	r3, [r7, #8]
 80165e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165ec:	f7ff ff5c 	bl	80164a8 <prvInsertTimerInActiveList>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d06b      	beq.n	80166ce <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80165f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f8:	6a1b      	ldr	r3, [r3, #32]
 80165fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80165fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016604:	f003 0304 	and.w	r3, r3, #4
 8016608:	2b00      	cmp	r3, #0
 801660a:	d060      	beq.n	80166ce <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801660c:	68ba      	ldr	r2, [r7, #8]
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	699b      	ldr	r3, [r3, #24]
 8016612:	441a      	add	r2, r3
 8016614:	2300      	movs	r3, #0
 8016616:	9300      	str	r3, [sp, #0]
 8016618:	2300      	movs	r3, #0
 801661a:	2100      	movs	r1, #0
 801661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801661e:	f7ff fe03 	bl	8016228 <xTimerGenericCommand>
 8016622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016624:	6a3b      	ldr	r3, [r7, #32]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d151      	bne.n	80166ce <prvProcessReceivedCommands+0x1a2>
 801662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662e:	b672      	cpsid	i
 8016630:	f383 8811 	msr	BASEPRI, r3
 8016634:	f3bf 8f6f 	isb	sy
 8016638:	f3bf 8f4f 	dsb	sy
 801663c:	b662      	cpsie	i
 801663e:	61bb      	str	r3, [r7, #24]
 8016640:	e7fe      	b.n	8016640 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016648:	f023 0301 	bic.w	r3, r3, #1
 801664c:	b2da      	uxtb	r2, r3
 801664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016654:	e03b      	b.n	80166ce <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801665c:	f043 0301 	orr.w	r3, r3, #1
 8016660:	b2da      	uxtb	r2, r3
 8016662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016668:	68ba      	ldr	r2, [r7, #8]
 801666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016670:	699b      	ldr	r3, [r3, #24]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d10b      	bne.n	801668e <prvProcessReceivedCommands+0x162>
 8016676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667a:	b672      	cpsid	i
 801667c:	f383 8811 	msr	BASEPRI, r3
 8016680:	f3bf 8f6f 	isb	sy
 8016684:	f3bf 8f4f 	dsb	sy
 8016688:	b662      	cpsie	i
 801668a:	617b      	str	r3, [r7, #20]
 801668c:	e7fe      	b.n	801668c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	699a      	ldr	r2, [r3, #24]
 8016692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016694:	18d1      	adds	r1, r2, r3
 8016696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801669a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801669c:	f7ff ff04 	bl	80164a8 <prvInsertTimerInActiveList>
					break;
 80166a0:	e015      	b.n	80166ce <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80166a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166a8:	f003 0302 	and.w	r3, r3, #2
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d103      	bne.n	80166b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80166b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166b2:	f000 fbb3 	bl	8016e1c <vPortFree>
 80166b6:	e00a      	b.n	80166ce <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80166b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166be:	f023 0301 	bic.w	r3, r3, #1
 80166c2:	b2da      	uxtb	r2, r3
 80166c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80166ca:	e000      	b.n	80166ce <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80166cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80166ce:	4b07      	ldr	r3, [pc, #28]	; (80166ec <prvProcessReceivedCommands+0x1c0>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	1d39      	adds	r1, r7, #4
 80166d4:	2200      	movs	r2, #0
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7fe f868 	bl	80147ac <xQueueReceive>
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	f47f af28 	bne.w	8016534 <prvProcessReceivedCommands+0x8>
	}
}
 80166e4:	bf00      	nop
 80166e6:	3730      	adds	r7, #48	; 0x30
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	2000105c 	.word	0x2000105c

080166f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b088      	sub	sp, #32
 80166f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80166f6:	e049      	b.n	801678c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80166f8:	4b2e      	ldr	r3, [pc, #184]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	68db      	ldr	r3, [r3, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016702:	4b2c      	ldr	r3, [pc, #176]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	3304      	adds	r3, #4
 8016710:	4618      	mov	r0, r3
 8016712:	f7fd fb7f 	bl	8013e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	6a1b      	ldr	r3, [r3, #32]
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016724:	f003 0304 	and.w	r3, r3, #4
 8016728:	2b00      	cmp	r3, #0
 801672a:	d02f      	beq.n	801678c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	699b      	ldr	r3, [r3, #24]
 8016730:	693a      	ldr	r2, [r7, #16]
 8016732:	4413      	add	r3, r2
 8016734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016736:	68ba      	ldr	r2, [r7, #8]
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	429a      	cmp	r2, r3
 801673c:	d90e      	bls.n	801675c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	68ba      	ldr	r2, [r7, #8]
 8016742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	68fa      	ldr	r2, [r7, #12]
 8016748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801674a:	4b1a      	ldr	r3, [pc, #104]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	3304      	adds	r3, #4
 8016752:	4619      	mov	r1, r3
 8016754:	4610      	mov	r0, r2
 8016756:	f7fd fb24 	bl	8013da2 <vListInsert>
 801675a:	e017      	b.n	801678c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801675c:	2300      	movs	r3, #0
 801675e:	9300      	str	r3, [sp, #0]
 8016760:	2300      	movs	r3, #0
 8016762:	693a      	ldr	r2, [r7, #16]
 8016764:	2100      	movs	r1, #0
 8016766:	68f8      	ldr	r0, [r7, #12]
 8016768:	f7ff fd5e 	bl	8016228 <xTimerGenericCommand>
 801676c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d10b      	bne.n	801678c <prvSwitchTimerLists+0x9c>
 8016774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016778:	b672      	cpsid	i
 801677a:	f383 8811 	msr	BASEPRI, r3
 801677e:	f3bf 8f6f 	isb	sy
 8016782:	f3bf 8f4f 	dsb	sy
 8016786:	b662      	cpsie	i
 8016788:	603b      	str	r3, [r7, #0]
 801678a:	e7fe      	b.n	801678a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801678c:	4b09      	ldr	r3, [pc, #36]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1b0      	bne.n	80166f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016796:	4b07      	ldr	r3, [pc, #28]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801679c:	4b06      	ldr	r3, [pc, #24]	; (80167b8 <prvSwitchTimerLists+0xc8>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4a04      	ldr	r2, [pc, #16]	; (80167b4 <prvSwitchTimerLists+0xc4>)
 80167a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80167a4:	4a04      	ldr	r2, [pc, #16]	; (80167b8 <prvSwitchTimerLists+0xc8>)
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	6013      	str	r3, [r2, #0]
}
 80167aa:	bf00      	nop
 80167ac:	3718      	adds	r7, #24
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20001054 	.word	0x20001054
 80167b8:	20001058 	.word	0x20001058

080167bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80167c2:	f000 f941 	bl	8016a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80167c6:	4b15      	ldr	r3, [pc, #84]	; (801681c <prvCheckForValidListAndQueue+0x60>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d120      	bne.n	8016810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80167ce:	4814      	ldr	r0, [pc, #80]	; (8016820 <prvCheckForValidListAndQueue+0x64>)
 80167d0:	f7fd fa96 	bl	8013d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80167d4:	4813      	ldr	r0, [pc, #76]	; (8016824 <prvCheckForValidListAndQueue+0x68>)
 80167d6:	f7fd fa93 	bl	8013d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80167da:	4b13      	ldr	r3, [pc, #76]	; (8016828 <prvCheckForValidListAndQueue+0x6c>)
 80167dc:	4a10      	ldr	r2, [pc, #64]	; (8016820 <prvCheckForValidListAndQueue+0x64>)
 80167de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80167e0:	4b12      	ldr	r3, [pc, #72]	; (801682c <prvCheckForValidListAndQueue+0x70>)
 80167e2:	4a10      	ldr	r2, [pc, #64]	; (8016824 <prvCheckForValidListAndQueue+0x68>)
 80167e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80167e6:	2300      	movs	r3, #0
 80167e8:	9300      	str	r3, [sp, #0]
 80167ea:	4b11      	ldr	r3, [pc, #68]	; (8016830 <prvCheckForValidListAndQueue+0x74>)
 80167ec:	4a11      	ldr	r2, [pc, #68]	; (8016834 <prvCheckForValidListAndQueue+0x78>)
 80167ee:	2110      	movs	r1, #16
 80167f0:	200a      	movs	r0, #10
 80167f2:	f7fd fba3 	bl	8013f3c <xQueueGenericCreateStatic>
 80167f6:	4602      	mov	r2, r0
 80167f8:	4b08      	ldr	r3, [pc, #32]	; (801681c <prvCheckForValidListAndQueue+0x60>)
 80167fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80167fc:	4b07      	ldr	r3, [pc, #28]	; (801681c <prvCheckForValidListAndQueue+0x60>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d005      	beq.n	8016810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016804:	4b05      	ldr	r3, [pc, #20]	; (801681c <prvCheckForValidListAndQueue+0x60>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	490b      	ldr	r1, [pc, #44]	; (8016838 <prvCheckForValidListAndQueue+0x7c>)
 801680a:	4618      	mov	r0, r3
 801680c:	f7fe fb90 	bl	8014f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016810:	f000 f94c 	bl	8016aac <vPortExitCritical>
}
 8016814:	bf00      	nop
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	2000105c 	.word	0x2000105c
 8016820:	2000102c 	.word	0x2000102c
 8016824:	20001040 	.word	0x20001040
 8016828:	20001054 	.word	0x20001054
 801682c:	20001058 	.word	0x20001058
 8016830:	20001108 	.word	0x20001108
 8016834:	20001068 	.word	0x20001068
 8016838:	0801a9cc 	.word	0x0801a9cc

0801683c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	3b04      	subs	r3, #4
 801684c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	3b04      	subs	r3, #4
 801685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	f023 0201 	bic.w	r2, r3, #1
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	3b04      	subs	r3, #4
 801686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801686c:	4a0c      	ldr	r2, [pc, #48]	; (80168a0 <pxPortInitialiseStack+0x64>)
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	3b14      	subs	r3, #20
 8016876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	3b04      	subs	r3, #4
 8016882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f06f 0202 	mvn.w	r2, #2
 801688a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	3b20      	subs	r3, #32
 8016890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016892:	68fb      	ldr	r3, [r7, #12]
}
 8016894:	4618      	mov	r0, r3
 8016896:	3714      	adds	r7, #20
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	080168a5 	.word	0x080168a5

080168a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80168aa:	2300      	movs	r3, #0
 80168ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168ae:	4b13      	ldr	r3, [pc, #76]	; (80168fc <prvTaskExitError+0x58>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168b6:	d00b      	beq.n	80168d0 <prvTaskExitError+0x2c>
 80168b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168bc:	b672      	cpsid	i
 80168be:	f383 8811 	msr	BASEPRI, r3
 80168c2:	f3bf 8f6f 	isb	sy
 80168c6:	f3bf 8f4f 	dsb	sy
 80168ca:	b662      	cpsie	i
 80168cc:	60fb      	str	r3, [r7, #12]
 80168ce:	e7fe      	b.n	80168ce <prvTaskExitError+0x2a>
 80168d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d4:	b672      	cpsid	i
 80168d6:	f383 8811 	msr	BASEPRI, r3
 80168da:	f3bf 8f6f 	isb	sy
 80168de:	f3bf 8f4f 	dsb	sy
 80168e2:	b662      	cpsie	i
 80168e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168e6:	bf00      	nop
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d0fc      	beq.n	80168e8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168ee:	bf00      	nop
 80168f0:	3714      	adds	r7, #20
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop
 80168fc:	2000011c 	.word	0x2000011c

08016900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016900:	4b07      	ldr	r3, [pc, #28]	; (8016920 <pxCurrentTCBConst2>)
 8016902:	6819      	ldr	r1, [r3, #0]
 8016904:	6808      	ldr	r0, [r1, #0]
 8016906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801690a:	f380 8809 	msr	PSP, r0
 801690e:	f3bf 8f6f 	isb	sy
 8016912:	f04f 0000 	mov.w	r0, #0
 8016916:	f380 8811 	msr	BASEPRI, r0
 801691a:	4770      	bx	lr
 801691c:	f3af 8000 	nop.w

08016920 <pxCurrentTCBConst2>:
 8016920:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016924:	bf00      	nop
 8016926:	bf00      	nop

08016928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016928:	4808      	ldr	r0, [pc, #32]	; (801694c <prvPortStartFirstTask+0x24>)
 801692a:	6800      	ldr	r0, [r0, #0]
 801692c:	6800      	ldr	r0, [r0, #0]
 801692e:	f380 8808 	msr	MSP, r0
 8016932:	f04f 0000 	mov.w	r0, #0
 8016936:	f380 8814 	msr	CONTROL, r0
 801693a:	b662      	cpsie	i
 801693c:	b661      	cpsie	f
 801693e:	f3bf 8f4f 	dsb	sy
 8016942:	f3bf 8f6f 	isb	sy
 8016946:	df00      	svc	0
 8016948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801694a:	bf00      	nop
 801694c:	e000ed08 	.word	0xe000ed08

08016950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016956:	4b36      	ldr	r3, [pc, #216]	; (8016a30 <xPortStartScheduler+0xe0>)
 8016958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	781b      	ldrb	r3, [r3, #0]
 801695e:	b2db      	uxtb	r3, r3
 8016960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	22ff      	movs	r2, #255	; 0xff
 8016966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	b2db      	uxtb	r3, r3
 801696e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016970:	78fb      	ldrb	r3, [r7, #3]
 8016972:	b2db      	uxtb	r3, r3
 8016974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016978:	b2da      	uxtb	r2, r3
 801697a:	4b2e      	ldr	r3, [pc, #184]	; (8016a34 <xPortStartScheduler+0xe4>)
 801697c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801697e:	4b2e      	ldr	r3, [pc, #184]	; (8016a38 <xPortStartScheduler+0xe8>)
 8016980:	2207      	movs	r2, #7
 8016982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016984:	e009      	b.n	801699a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016986:	4b2c      	ldr	r3, [pc, #176]	; (8016a38 <xPortStartScheduler+0xe8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	3b01      	subs	r3, #1
 801698c:	4a2a      	ldr	r2, [pc, #168]	; (8016a38 <xPortStartScheduler+0xe8>)
 801698e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016990:	78fb      	ldrb	r3, [r7, #3]
 8016992:	b2db      	uxtb	r3, r3
 8016994:	005b      	lsls	r3, r3, #1
 8016996:	b2db      	uxtb	r3, r3
 8016998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801699a:	78fb      	ldrb	r3, [r7, #3]
 801699c:	b2db      	uxtb	r3, r3
 801699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169a2:	2b80      	cmp	r3, #128	; 0x80
 80169a4:	d0ef      	beq.n	8016986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169a6:	4b24      	ldr	r3, [pc, #144]	; (8016a38 <xPortStartScheduler+0xe8>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	f1c3 0307 	rsb	r3, r3, #7
 80169ae:	2b04      	cmp	r3, #4
 80169b0:	d00b      	beq.n	80169ca <xPortStartScheduler+0x7a>
 80169b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b6:	b672      	cpsid	i
 80169b8:	f383 8811 	msr	BASEPRI, r3
 80169bc:	f3bf 8f6f 	isb	sy
 80169c0:	f3bf 8f4f 	dsb	sy
 80169c4:	b662      	cpsie	i
 80169c6:	60bb      	str	r3, [r7, #8]
 80169c8:	e7fe      	b.n	80169c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80169ca:	4b1b      	ldr	r3, [pc, #108]	; (8016a38 <xPortStartScheduler+0xe8>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	021b      	lsls	r3, r3, #8
 80169d0:	4a19      	ldr	r2, [pc, #100]	; (8016a38 <xPortStartScheduler+0xe8>)
 80169d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80169d4:	4b18      	ldr	r3, [pc, #96]	; (8016a38 <xPortStartScheduler+0xe8>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80169dc:	4a16      	ldr	r2, [pc, #88]	; (8016a38 <xPortStartScheduler+0xe8>)
 80169de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	b2da      	uxtb	r2, r3
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80169e8:	4b14      	ldr	r3, [pc, #80]	; (8016a3c <xPortStartScheduler+0xec>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	4a13      	ldr	r2, [pc, #76]	; (8016a3c <xPortStartScheduler+0xec>)
 80169ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80169f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80169f4:	4b11      	ldr	r3, [pc, #68]	; (8016a3c <xPortStartScheduler+0xec>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	4a10      	ldr	r2, [pc, #64]	; (8016a3c <xPortStartScheduler+0xec>)
 80169fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80169fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a00:	f000 f8d4 	bl	8016bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a04:	4b0e      	ldr	r3, [pc, #56]	; (8016a40 <xPortStartScheduler+0xf0>)
 8016a06:	2200      	movs	r2, #0
 8016a08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a0a:	f000 f8f3 	bl	8016bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a0e:	4b0d      	ldr	r3, [pc, #52]	; (8016a44 <xPortStartScheduler+0xf4>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4a0c      	ldr	r2, [pc, #48]	; (8016a44 <xPortStartScheduler+0xf4>)
 8016a14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016a18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a1a:	f7ff ff85 	bl	8016928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a1e:	f7fe ff59 	bl	80158d4 <vTaskSwitchContext>
	prvTaskExitError();
 8016a22:	f7ff ff3f 	bl	80168a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a26:	2300      	movs	r3, #0
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3710      	adds	r7, #16
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	e000e400 	.word	0xe000e400
 8016a34:	20001158 	.word	0x20001158
 8016a38:	2000115c 	.word	0x2000115c
 8016a3c:	e000ed20 	.word	0xe000ed20
 8016a40:	2000011c 	.word	0x2000011c
 8016a44:	e000ef34 	.word	0xe000ef34

08016a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b083      	sub	sp, #12
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a52:	b672      	cpsid	i
 8016a54:	f383 8811 	msr	BASEPRI, r3
 8016a58:	f3bf 8f6f 	isb	sy
 8016a5c:	f3bf 8f4f 	dsb	sy
 8016a60:	b662      	cpsie	i
 8016a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a64:	4b0f      	ldr	r3, [pc, #60]	; (8016aa4 <vPortEnterCritical+0x5c>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	4a0e      	ldr	r2, [pc, #56]	; (8016aa4 <vPortEnterCritical+0x5c>)
 8016a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016a6e:	4b0d      	ldr	r3, [pc, #52]	; (8016aa4 <vPortEnterCritical+0x5c>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d110      	bne.n	8016a98 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016a76:	4b0c      	ldr	r3, [pc, #48]	; (8016aa8 <vPortEnterCritical+0x60>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d00b      	beq.n	8016a98 <vPortEnterCritical+0x50>
 8016a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a84:	b672      	cpsid	i
 8016a86:	f383 8811 	msr	BASEPRI, r3
 8016a8a:	f3bf 8f6f 	isb	sy
 8016a8e:	f3bf 8f4f 	dsb	sy
 8016a92:	b662      	cpsie	i
 8016a94:	603b      	str	r3, [r7, #0]
 8016a96:	e7fe      	b.n	8016a96 <vPortEnterCritical+0x4e>
	}
}
 8016a98:	bf00      	nop
 8016a9a:	370c      	adds	r7, #12
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr
 8016aa4:	2000011c 	.word	0x2000011c
 8016aa8:	e000ed04 	.word	0xe000ed04

08016aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016aac:	b480      	push	{r7}
 8016aae:	b083      	sub	sp, #12
 8016ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016ab2:	4b12      	ldr	r3, [pc, #72]	; (8016afc <vPortExitCritical+0x50>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d10b      	bne.n	8016ad2 <vPortExitCritical+0x26>
 8016aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abe:	b672      	cpsid	i
 8016ac0:	f383 8811 	msr	BASEPRI, r3
 8016ac4:	f3bf 8f6f 	isb	sy
 8016ac8:	f3bf 8f4f 	dsb	sy
 8016acc:	b662      	cpsie	i
 8016ace:	607b      	str	r3, [r7, #4]
 8016ad0:	e7fe      	b.n	8016ad0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016ad2:	4b0a      	ldr	r3, [pc, #40]	; (8016afc <vPortExitCritical+0x50>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	4a08      	ldr	r2, [pc, #32]	; (8016afc <vPortExitCritical+0x50>)
 8016ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016adc:	4b07      	ldr	r3, [pc, #28]	; (8016afc <vPortExitCritical+0x50>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d104      	bne.n	8016aee <vPortExitCritical+0x42>
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016aee:	bf00      	nop
 8016af0:	370c      	adds	r7, #12
 8016af2:	46bd      	mov	sp, r7
 8016af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af8:	4770      	bx	lr
 8016afa:	bf00      	nop
 8016afc:	2000011c 	.word	0x2000011c

08016b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b00:	f3ef 8009 	mrs	r0, PSP
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	4b15      	ldr	r3, [pc, #84]	; (8016b60 <pxCurrentTCBConst>)
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	f01e 0f10 	tst.w	lr, #16
 8016b10:	bf08      	it	eq
 8016b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1a:	6010      	str	r0, [r2, #0]
 8016b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016b24:	b672      	cpsid	i
 8016b26:	f380 8811 	msr	BASEPRI, r0
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	f3bf 8f6f 	isb	sy
 8016b32:	b662      	cpsie	i
 8016b34:	f7fe fece 	bl	80158d4 <vTaskSwitchContext>
 8016b38:	f04f 0000 	mov.w	r0, #0
 8016b3c:	f380 8811 	msr	BASEPRI, r0
 8016b40:	bc09      	pop	{r0, r3}
 8016b42:	6819      	ldr	r1, [r3, #0]
 8016b44:	6808      	ldr	r0, [r1, #0]
 8016b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b4a:	f01e 0f10 	tst.w	lr, #16
 8016b4e:	bf08      	it	eq
 8016b50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b54:	f380 8809 	msr	PSP, r0
 8016b58:	f3bf 8f6f 	isb	sy
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop

08016b60 <pxCurrentTCBConst>:
 8016b60:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016b64:	bf00      	nop
 8016b66:	bf00      	nop

08016b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b72:	b672      	cpsid	i
 8016b74:	f383 8811 	msr	BASEPRI, r3
 8016b78:	f3bf 8f6f 	isb	sy
 8016b7c:	f3bf 8f4f 	dsb	sy
 8016b80:	b662      	cpsie	i
 8016b82:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016b84:	f7fe fdec 	bl	8015760 <xTaskIncrementTick>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d003      	beq.n	8016b96 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016b8e:	4b06      	ldr	r3, [pc, #24]	; (8016ba8 <SysTick_Handler+0x40>)
 8016b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b94:	601a      	str	r2, [r3, #0]
 8016b96:	2300      	movs	r3, #0
 8016b98:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016ba0:	bf00      	nop
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	e000ed04 	.word	0xe000ed04

08016bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bac:	b480      	push	{r7}
 8016bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016bb0:	4b0b      	ldr	r3, [pc, #44]	; (8016be0 <vPortSetupTimerInterrupt+0x34>)
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016bb6:	4b0b      	ldr	r3, [pc, #44]	; (8016be4 <vPortSetupTimerInterrupt+0x38>)
 8016bb8:	2200      	movs	r2, #0
 8016bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016bbc:	4b0a      	ldr	r3, [pc, #40]	; (8016be8 <vPortSetupTimerInterrupt+0x3c>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4a0a      	ldr	r2, [pc, #40]	; (8016bec <vPortSetupTimerInterrupt+0x40>)
 8016bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8016bc6:	099b      	lsrs	r3, r3, #6
 8016bc8:	4a09      	ldr	r2, [pc, #36]	; (8016bf0 <vPortSetupTimerInterrupt+0x44>)
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016bce:	4b04      	ldr	r3, [pc, #16]	; (8016be0 <vPortSetupTimerInterrupt+0x34>)
 8016bd0:	2207      	movs	r2, #7
 8016bd2:	601a      	str	r2, [r3, #0]
}
 8016bd4:	bf00      	nop
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bdc:	4770      	bx	lr
 8016bde:	bf00      	nop
 8016be0:	e000e010 	.word	0xe000e010
 8016be4:	e000e018 	.word	0xe000e018
 8016be8:	20000000 	.word	0x20000000
 8016bec:	10624dd3 	.word	0x10624dd3
 8016bf0:	e000e014 	.word	0xe000e014

08016bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016c04 <vPortEnableVFP+0x10>
 8016bf8:	6801      	ldr	r1, [r0, #0]
 8016bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016bfe:	6001      	str	r1, [r0, #0]
 8016c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c02:	bf00      	nop
 8016c04:	e000ed88 	.word	0xe000ed88

08016c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c08:	b480      	push	{r7}
 8016c0a:	b085      	sub	sp, #20
 8016c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c0e:	f3ef 8305 	mrs	r3, IPSR
 8016c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	2b0f      	cmp	r3, #15
 8016c18:	d915      	bls.n	8016c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c1a:	4a18      	ldr	r2, [pc, #96]	; (8016c7c <vPortValidateInterruptPriority+0x74>)
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	4413      	add	r3, r2
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c24:	4b16      	ldr	r3, [pc, #88]	; (8016c80 <vPortValidateInterruptPriority+0x78>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	7afa      	ldrb	r2, [r7, #11]
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d20b      	bcs.n	8016c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	b672      	cpsid	i
 8016c34:	f383 8811 	msr	BASEPRI, r3
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	b662      	cpsie	i
 8016c42:	607b      	str	r3, [r7, #4]
 8016c44:	e7fe      	b.n	8016c44 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c46:	4b0f      	ldr	r3, [pc, #60]	; (8016c84 <vPortValidateInterruptPriority+0x7c>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016c4e:	4b0e      	ldr	r3, [pc, #56]	; (8016c88 <vPortValidateInterruptPriority+0x80>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d90b      	bls.n	8016c6e <vPortValidateInterruptPriority+0x66>
 8016c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c5a:	b672      	cpsid	i
 8016c5c:	f383 8811 	msr	BASEPRI, r3
 8016c60:	f3bf 8f6f 	isb	sy
 8016c64:	f3bf 8f4f 	dsb	sy
 8016c68:	b662      	cpsie	i
 8016c6a:	603b      	str	r3, [r7, #0]
 8016c6c:	e7fe      	b.n	8016c6c <vPortValidateInterruptPriority+0x64>
	}
 8016c6e:	bf00      	nop
 8016c70:	3714      	adds	r7, #20
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr
 8016c7a:	bf00      	nop
 8016c7c:	e000e3f0 	.word	0xe000e3f0
 8016c80:	20001158 	.word	0x20001158
 8016c84:	e000ed0c 	.word	0xe000ed0c
 8016c88:	2000115c 	.word	0x2000115c

08016c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b08a      	sub	sp, #40	; 0x28
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016c94:	2300      	movs	r3, #0
 8016c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016c98:	f7fe fc94 	bl	80155c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016c9c:	4b5a      	ldr	r3, [pc, #360]	; (8016e08 <pvPortMalloc+0x17c>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d101      	bne.n	8016ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016ca4:	f000 f916 	bl	8016ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016ca8:	4b58      	ldr	r3, [pc, #352]	; (8016e0c <pvPortMalloc+0x180>)
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	4013      	ands	r3, r2
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	f040 8090 	bne.w	8016dd6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d01e      	beq.n	8016cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016cbc:	2208      	movs	r2, #8
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	4413      	add	r3, r2
 8016cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f003 0307 	and.w	r3, r3, #7
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d015      	beq.n	8016cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	f023 0307 	bic.w	r3, r3, #7
 8016cd4:	3308      	adds	r3, #8
 8016cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f003 0307 	and.w	r3, r3, #7
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00b      	beq.n	8016cfa <pvPortMalloc+0x6e>
 8016ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce6:	b672      	cpsid	i
 8016ce8:	f383 8811 	msr	BASEPRI, r3
 8016cec:	f3bf 8f6f 	isb	sy
 8016cf0:	f3bf 8f4f 	dsb	sy
 8016cf4:	b662      	cpsie	i
 8016cf6:	617b      	str	r3, [r7, #20]
 8016cf8:	e7fe      	b.n	8016cf8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d06a      	beq.n	8016dd6 <pvPortMalloc+0x14a>
 8016d00:	4b43      	ldr	r3, [pc, #268]	; (8016e10 <pvPortMalloc+0x184>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	687a      	ldr	r2, [r7, #4]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d865      	bhi.n	8016dd6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d0a:	4b42      	ldr	r3, [pc, #264]	; (8016e14 <pvPortMalloc+0x188>)
 8016d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d0e:	4b41      	ldr	r3, [pc, #260]	; (8016e14 <pvPortMalloc+0x188>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d14:	e004      	b.n	8016d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d903      	bls.n	8016d32 <pvPortMalloc+0xa6>
 8016d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d1f1      	bne.n	8016d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d32:	4b35      	ldr	r3, [pc, #212]	; (8016e08 <pvPortMalloc+0x17c>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d04c      	beq.n	8016dd6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d3c:	6a3b      	ldr	r3, [r7, #32]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2208      	movs	r2, #8
 8016d42:	4413      	add	r3, r2
 8016d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d50:	685a      	ldr	r2, [r3, #4]
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	1ad2      	subs	r2, r2, r3
 8016d56:	2308      	movs	r3, #8
 8016d58:	005b      	lsls	r3, r3, #1
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d920      	bls.n	8016da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	4413      	add	r3, r2
 8016d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	f003 0307 	and.w	r3, r3, #7
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00b      	beq.n	8016d88 <pvPortMalloc+0xfc>
 8016d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d74:	b672      	cpsid	i
 8016d76:	f383 8811 	msr	BASEPRI, r3
 8016d7a:	f3bf 8f6f 	isb	sy
 8016d7e:	f3bf 8f4f 	dsb	sy
 8016d82:	b662      	cpsie	i
 8016d84:	613b      	str	r3, [r7, #16]
 8016d86:	e7fe      	b.n	8016d86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	1ad2      	subs	r2, r2, r3
 8016d90:	69bb      	ldr	r3, [r7, #24]
 8016d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016d9a:	69b8      	ldr	r0, [r7, #24]
 8016d9c:	f000 f8fc 	bl	8016f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016da0:	4b1b      	ldr	r3, [pc, #108]	; (8016e10 <pvPortMalloc+0x184>)
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da6:	685b      	ldr	r3, [r3, #4]
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	4a19      	ldr	r2, [pc, #100]	; (8016e10 <pvPortMalloc+0x184>)
 8016dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016dae:	4b18      	ldr	r3, [pc, #96]	; (8016e10 <pvPortMalloc+0x184>)
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	4b19      	ldr	r3, [pc, #100]	; (8016e18 <pvPortMalloc+0x18c>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d203      	bcs.n	8016dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016dba:	4b15      	ldr	r3, [pc, #84]	; (8016e10 <pvPortMalloc+0x184>)
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	4a16      	ldr	r2, [pc, #88]	; (8016e18 <pvPortMalloc+0x18c>)
 8016dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc4:	685a      	ldr	r2, [r3, #4]
 8016dc6:	4b11      	ldr	r3, [pc, #68]	; (8016e0c <pvPortMalloc+0x180>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	431a      	orrs	r2, r3
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016dd6:	f7fe fc03 	bl	80155e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016dda:	69fb      	ldr	r3, [r7, #28]
 8016ddc:	f003 0307 	and.w	r3, r3, #7
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d00b      	beq.n	8016dfc <pvPortMalloc+0x170>
 8016de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de8:	b672      	cpsid	i
 8016dea:	f383 8811 	msr	BASEPRI, r3
 8016dee:	f3bf 8f6f 	isb	sy
 8016df2:	f3bf 8f4f 	dsb	sy
 8016df6:	b662      	cpsie	i
 8016df8:	60fb      	str	r3, [r7, #12]
 8016dfa:	e7fe      	b.n	8016dfa <pvPortMalloc+0x16e>
	return pvReturn;
 8016dfc:	69fb      	ldr	r3, [r7, #28]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3728      	adds	r7, #40	; 0x28
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	20008968 	.word	0x20008968
 8016e0c:	20008974 	.word	0x20008974
 8016e10:	2000896c 	.word	0x2000896c
 8016e14:	20008960 	.word	0x20008960
 8016e18:	20008970 	.word	0x20008970

08016e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b086      	sub	sp, #24
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d04a      	beq.n	8016ec4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e2e:	2308      	movs	r3, #8
 8016e30:	425b      	negs	r3, r3
 8016e32:	697a      	ldr	r2, [r7, #20]
 8016e34:	4413      	add	r3, r2
 8016e36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	685a      	ldr	r2, [r3, #4]
 8016e40:	4b22      	ldr	r3, [pc, #136]	; (8016ecc <vPortFree+0xb0>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	4013      	ands	r3, r2
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d10b      	bne.n	8016e62 <vPortFree+0x46>
 8016e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e4e:	b672      	cpsid	i
 8016e50:	f383 8811 	msr	BASEPRI, r3
 8016e54:	f3bf 8f6f 	isb	sy
 8016e58:	f3bf 8f4f 	dsb	sy
 8016e5c:	b662      	cpsie	i
 8016e5e:	60fb      	str	r3, [r7, #12]
 8016e60:	e7fe      	b.n	8016e60 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00b      	beq.n	8016e82 <vPortFree+0x66>
 8016e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e6e:	b672      	cpsid	i
 8016e70:	f383 8811 	msr	BASEPRI, r3
 8016e74:	f3bf 8f6f 	isb	sy
 8016e78:	f3bf 8f4f 	dsb	sy
 8016e7c:	b662      	cpsie	i
 8016e7e:	60bb      	str	r3, [r7, #8]
 8016e80:	e7fe      	b.n	8016e80 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	685a      	ldr	r2, [r3, #4]
 8016e86:	4b11      	ldr	r3, [pc, #68]	; (8016ecc <vPortFree+0xb0>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	4013      	ands	r3, r2
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d019      	beq.n	8016ec4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016e90:	693b      	ldr	r3, [r7, #16]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d115      	bne.n	8016ec4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	685a      	ldr	r2, [r3, #4]
 8016e9c:	4b0b      	ldr	r3, [pc, #44]	; (8016ecc <vPortFree+0xb0>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	43db      	mvns	r3, r3
 8016ea2:	401a      	ands	r2, r3
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ea8:	f7fe fb8c 	bl	80155c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	685a      	ldr	r2, [r3, #4]
 8016eb0:	4b07      	ldr	r3, [pc, #28]	; (8016ed0 <vPortFree+0xb4>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	4413      	add	r3, r2
 8016eb6:	4a06      	ldr	r2, [pc, #24]	; (8016ed0 <vPortFree+0xb4>)
 8016eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016eba:	6938      	ldr	r0, [r7, #16]
 8016ebc:	f000 f86c 	bl	8016f98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016ec0:	f7fe fb8e 	bl	80155e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016ec4:	bf00      	nop
 8016ec6:	3718      	adds	r7, #24
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	20008974 	.word	0x20008974
 8016ed0:	2000896c 	.word	0x2000896c

08016ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016ed4:	b480      	push	{r7}
 8016ed6:	b085      	sub	sp, #20
 8016ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016eda:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8016ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016ee0:	4b27      	ldr	r3, [pc, #156]	; (8016f80 <prvHeapInit+0xac>)
 8016ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	f003 0307 	and.w	r3, r3, #7
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d00c      	beq.n	8016f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	3307      	adds	r3, #7
 8016ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	f023 0307 	bic.w	r3, r3, #7
 8016efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016efc:	68ba      	ldr	r2, [r7, #8]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	4a1f      	ldr	r2, [pc, #124]	; (8016f80 <prvHeapInit+0xac>)
 8016f04:	4413      	add	r3, r2
 8016f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f0c:	4a1d      	ldr	r2, [pc, #116]	; (8016f84 <prvHeapInit+0xb0>)
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f12:	4b1c      	ldr	r3, [pc, #112]	; (8016f84 <prvHeapInit+0xb0>)
 8016f14:	2200      	movs	r2, #0
 8016f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	68ba      	ldr	r2, [r7, #8]
 8016f1c:	4413      	add	r3, r2
 8016f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f20:	2208      	movs	r2, #8
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	1a9b      	subs	r3, r3, r2
 8016f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f023 0307 	bic.w	r3, r3, #7
 8016f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	4a15      	ldr	r2, [pc, #84]	; (8016f88 <prvHeapInit+0xb4>)
 8016f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f36:	4b14      	ldr	r3, [pc, #80]	; (8016f88 <prvHeapInit+0xb4>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f3e:	4b12      	ldr	r3, [pc, #72]	; (8016f88 <prvHeapInit+0xb4>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2200      	movs	r2, #0
 8016f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	68fa      	ldr	r2, [r7, #12]
 8016f4e:	1ad2      	subs	r2, r2, r3
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016f54:	4b0c      	ldr	r3, [pc, #48]	; (8016f88 <prvHeapInit+0xb4>)
 8016f56:	681a      	ldr	r2, [r3, #0]
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	4a0a      	ldr	r2, [pc, #40]	; (8016f8c <prvHeapInit+0xb8>)
 8016f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	4a09      	ldr	r2, [pc, #36]	; (8016f90 <prvHeapInit+0xbc>)
 8016f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016f6c:	4b09      	ldr	r3, [pc, #36]	; (8016f94 <prvHeapInit+0xc0>)
 8016f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016f72:	601a      	str	r2, [r3, #0]
}
 8016f74:	bf00      	nop
 8016f76:	3714      	adds	r7, #20
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7e:	4770      	bx	lr
 8016f80:	20001160 	.word	0x20001160
 8016f84:	20008960 	.word	0x20008960
 8016f88:	20008968 	.word	0x20008968
 8016f8c:	20008970 	.word	0x20008970
 8016f90:	2000896c 	.word	0x2000896c
 8016f94:	20008974 	.word	0x20008974

08016f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016fa0:	4b28      	ldr	r3, [pc, #160]	; (8017044 <prvInsertBlockIntoFreeList+0xac>)
 8016fa2:	60fb      	str	r3, [r7, #12]
 8016fa4:	e002      	b.n	8016fac <prvInsertBlockIntoFreeList+0x14>
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	60fb      	str	r3, [r7, #12]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d8f7      	bhi.n	8016fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	68ba      	ldr	r2, [r7, #8]
 8016fc0:	4413      	add	r3, r2
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d108      	bne.n	8016fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	685a      	ldr	r2, [r3, #4]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	441a      	add	r2, r3
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	68ba      	ldr	r2, [r7, #8]
 8016fe4:	441a      	add	r2, r3
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	429a      	cmp	r2, r3
 8016fec:	d118      	bne.n	8017020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681a      	ldr	r2, [r3, #0]
 8016ff2:	4b15      	ldr	r3, [pc, #84]	; (8017048 <prvInsertBlockIntoFreeList+0xb0>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d00d      	beq.n	8017016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	685a      	ldr	r2, [r3, #4]
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	441a      	add	r2, r3
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	681a      	ldr	r2, [r3, #0]
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	601a      	str	r2, [r3, #0]
 8017014:	e008      	b.n	8017028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017016:	4b0c      	ldr	r3, [pc, #48]	; (8017048 <prvInsertBlockIntoFreeList+0xb0>)
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	601a      	str	r2, [r3, #0]
 801701e:	e003      	b.n	8017028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681a      	ldr	r2, [r3, #0]
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	429a      	cmp	r2, r3
 801702e:	d002      	beq.n	8017036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	687a      	ldr	r2, [r7, #4]
 8017034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017036:	bf00      	nop
 8017038:	3714      	adds	r7, #20
 801703a:	46bd      	mov	sp, r7
 801703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017040:	4770      	bx	lr
 8017042:	bf00      	nop
 8017044:	20008960 	.word	0x20008960
 8017048:	20008968 	.word	0x20008968

0801704c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017050:	2200      	movs	r2, #0
 8017052:	4912      	ldr	r1, [pc, #72]	; (801709c <MX_USB_DEVICE_Init+0x50>)
 8017054:	4812      	ldr	r0, [pc, #72]	; (80170a0 <MX_USB_DEVICE_Init+0x54>)
 8017056:	f7f7 ff79 	bl	800ef4c <USBD_Init>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d001      	beq.n	8017064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017060:	f7ed f9a4 	bl	80043ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017064:	490f      	ldr	r1, [pc, #60]	; (80170a4 <MX_USB_DEVICE_Init+0x58>)
 8017066:	480e      	ldr	r0, [pc, #56]	; (80170a0 <MX_USB_DEVICE_Init+0x54>)
 8017068:	f7f7 ffa6 	bl	800efb8 <USBD_RegisterClass>
 801706c:	4603      	mov	r3, r0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d001      	beq.n	8017076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017072:	f7ed f99b 	bl	80043ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017076:	490c      	ldr	r1, [pc, #48]	; (80170a8 <MX_USB_DEVICE_Init+0x5c>)
 8017078:	4809      	ldr	r0, [pc, #36]	; (80170a0 <MX_USB_DEVICE_Init+0x54>)
 801707a:	f7f7 fefb 	bl	800ee74 <USBD_CDC_RegisterInterface>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d001      	beq.n	8017088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017084:	f7ed f992 	bl	80043ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017088:	4805      	ldr	r0, [pc, #20]	; (80170a0 <MX_USB_DEVICE_Init+0x54>)
 801708a:	f7f7 ffb6 	bl	800effa <USBD_Start>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d001      	beq.n	8017098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017094:	f7ed f98a 	bl	80043ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017098:	bf00      	nop
 801709a:	bd80      	pop	{r7, pc}
 801709c:	20000134 	.word	0x20000134
 80170a0:	20027668 	.word	0x20027668
 80170a4:	20000018 	.word	0x20000018
 80170a8:	20000120 	.word	0x20000120

080170ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80170b0:	2200      	movs	r2, #0
 80170b2:	4905      	ldr	r1, [pc, #20]	; (80170c8 <CDC_Init_FS+0x1c>)
 80170b4:	4805      	ldr	r0, [pc, #20]	; (80170cc <CDC_Init_FS+0x20>)
 80170b6:	f7f7 fef2 	bl	800ee9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80170ba:	4905      	ldr	r1, [pc, #20]	; (80170d0 <CDC_Init_FS+0x24>)
 80170bc:	4803      	ldr	r0, [pc, #12]	; (80170cc <CDC_Init_FS+0x20>)
 80170be:	f7f7 ff07 	bl	800eed0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80170c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	20028138 	.word	0x20028138
 80170cc:	20027668 	.word	0x20027668
 80170d0:	20027938 	.word	0x20027938

080170d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80170d4:	b480      	push	{r7}
 80170d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80170d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80170da:	4618      	mov	r0, r3
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b083      	sub	sp, #12
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	4603      	mov	r3, r0
 80170ec:	6039      	str	r1, [r7, #0]
 80170ee:	71fb      	strb	r3, [r7, #7]
 80170f0:	4613      	mov	r3, r2
 80170f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80170f4:	79fb      	ldrb	r3, [r7, #7]
 80170f6:	2b23      	cmp	r3, #35	; 0x23
 80170f8:	d84a      	bhi.n	8017190 <CDC_Control_FS+0xac>
 80170fa:	a201      	add	r2, pc, #4	; (adr r2, 8017100 <CDC_Control_FS+0x1c>)
 80170fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017100:	08017191 	.word	0x08017191
 8017104:	08017191 	.word	0x08017191
 8017108:	08017191 	.word	0x08017191
 801710c:	08017191 	.word	0x08017191
 8017110:	08017191 	.word	0x08017191
 8017114:	08017191 	.word	0x08017191
 8017118:	08017191 	.word	0x08017191
 801711c:	08017191 	.word	0x08017191
 8017120:	08017191 	.word	0x08017191
 8017124:	08017191 	.word	0x08017191
 8017128:	08017191 	.word	0x08017191
 801712c:	08017191 	.word	0x08017191
 8017130:	08017191 	.word	0x08017191
 8017134:	08017191 	.word	0x08017191
 8017138:	08017191 	.word	0x08017191
 801713c:	08017191 	.word	0x08017191
 8017140:	08017191 	.word	0x08017191
 8017144:	08017191 	.word	0x08017191
 8017148:	08017191 	.word	0x08017191
 801714c:	08017191 	.word	0x08017191
 8017150:	08017191 	.word	0x08017191
 8017154:	08017191 	.word	0x08017191
 8017158:	08017191 	.word	0x08017191
 801715c:	08017191 	.word	0x08017191
 8017160:	08017191 	.word	0x08017191
 8017164:	08017191 	.word	0x08017191
 8017168:	08017191 	.word	0x08017191
 801716c:	08017191 	.word	0x08017191
 8017170:	08017191 	.word	0x08017191
 8017174:	08017191 	.word	0x08017191
 8017178:	08017191 	.word	0x08017191
 801717c:	08017191 	.word	0x08017191
 8017180:	08017191 	.word	0x08017191
 8017184:	08017191 	.word	0x08017191
 8017188:	08017191 	.word	0x08017191
 801718c:	08017191 	.word	0x08017191
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017190:	bf00      	nop
  }

  return (USBD_OK);
 8017192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017194:	4618      	mov	r0, r3
 8017196:	370c      	adds	r7, #12
 8017198:	46bd      	mov	sp, r7
 801719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719e:	4770      	bx	lr

080171a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(osMutexAcquire(usb_data_mutex, 10)){
 80171aa:	4b10      	ldr	r3, [pc, #64]	; (80171ec <CDC_Receive_FS+0x4c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	210a      	movs	r1, #10
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7fc f9c5 	bl	8013540 <osMutexAcquire>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00b      	beq.n	80171d4 <CDC_Receive_FS+0x34>
		memcpy(Buf, usb_data_buffer, *Len);
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	461a      	mov	r2, r3
 80171c2:	490b      	ldr	r1, [pc, #44]	; (80171f0 <CDC_Receive_FS+0x50>)
 80171c4:	6878      	ldr	r0, [r7, #4]
 80171c6:	f000 fcd5 	bl	8017b74 <memcpy>
		osMutexRelease(usb_data_mutex);
 80171ca:	4b08      	ldr	r3, [pc, #32]	; (80171ec <CDC_Receive_FS+0x4c>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7fc fa14 	bl	80135fc <osMutexRelease>
	}



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80171d4:	6879      	ldr	r1, [r7, #4]
 80171d6:	4807      	ldr	r0, [pc, #28]	; (80171f4 <CDC_Receive_FS+0x54>)
 80171d8:	f7f7 fe7a 	bl	800eed0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80171dc:	4805      	ldr	r0, [pc, #20]	; (80171f4 <CDC_Receive_FS+0x54>)
 80171de:	f7f7 fe8b 	bl	800eef8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80171e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	3708      	adds	r7, #8
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	20008ad0 	.word	0x20008ad0
 80171f0:	200002c8 	.word	0x200002c8
 80171f4:	20027668 	.word	0x20027668

080171f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80171f8:	b480      	push	{r7}
 80171fa:	b087      	sub	sp, #28
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	60f8      	str	r0, [r7, #12]
 8017200:	60b9      	str	r1, [r7, #8]
 8017202:	4613      	mov	r3, r2
 8017204:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017206:	2300      	movs	r3, #0
 8017208:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801720a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801720e:	4618      	mov	r0, r3
 8017210:	371c      	adds	r7, #28
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr
	...

0801721c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	4603      	mov	r3, r0
 8017224:	6039      	str	r1, [r7, #0]
 8017226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	2212      	movs	r2, #18
 801722c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801722e:	4b03      	ldr	r3, [pc, #12]	; (801723c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017230:	4618      	mov	r0, r3
 8017232:	370c      	adds	r7, #12
 8017234:	46bd      	mov	sp, r7
 8017236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723a:	4770      	bx	lr
 801723c:	20000154 	.word	0x20000154

08017240 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017240:	b480      	push	{r7}
 8017242:	b083      	sub	sp, #12
 8017244:	af00      	add	r7, sp, #0
 8017246:	4603      	mov	r3, r0
 8017248:	6039      	str	r1, [r7, #0]
 801724a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	2204      	movs	r2, #4
 8017250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017252:	4b03      	ldr	r3, [pc, #12]	; (8017260 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017254:	4618      	mov	r0, r3
 8017256:	370c      	adds	r7, #12
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr
 8017260:	20000174 	.word	0x20000174

08017264 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	4603      	mov	r3, r0
 801726c:	6039      	str	r1, [r7, #0]
 801726e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017270:	79fb      	ldrb	r3, [r7, #7]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d105      	bne.n	8017282 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017276:	683a      	ldr	r2, [r7, #0]
 8017278:	4907      	ldr	r1, [pc, #28]	; (8017298 <USBD_FS_ProductStrDescriptor+0x34>)
 801727a:	4808      	ldr	r0, [pc, #32]	; (801729c <USBD_FS_ProductStrDescriptor+0x38>)
 801727c:	f7f8 feb5 	bl	800ffea <USBD_GetString>
 8017280:	e004      	b.n	801728c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017282:	683a      	ldr	r2, [r7, #0]
 8017284:	4904      	ldr	r1, [pc, #16]	; (8017298 <USBD_FS_ProductStrDescriptor+0x34>)
 8017286:	4805      	ldr	r0, [pc, #20]	; (801729c <USBD_FS_ProductStrDescriptor+0x38>)
 8017288:	f7f8 feaf 	bl	800ffea <USBD_GetString>
  }
  return USBD_StrDesc;
 801728c:	4b02      	ldr	r3, [pc, #8]	; (8017298 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801728e:	4618      	mov	r0, r3
 8017290:	3708      	adds	r7, #8
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}
 8017296:	bf00      	nop
 8017298:	20028938 	.word	0x20028938
 801729c:	0801a9d4 	.word	0x0801a9d4

080172a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b082      	sub	sp, #8
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	4603      	mov	r3, r0
 80172a8:	6039      	str	r1, [r7, #0]
 80172aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80172ac:	683a      	ldr	r2, [r7, #0]
 80172ae:	4904      	ldr	r1, [pc, #16]	; (80172c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80172b0:	4804      	ldr	r0, [pc, #16]	; (80172c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80172b2:	f7f8 fe9a 	bl	800ffea <USBD_GetString>
  return USBD_StrDesc;
 80172b6:	4b02      	ldr	r3, [pc, #8]	; (80172c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	20028938 	.word	0x20028938
 80172c4:	0801a9ec 	.word	0x0801a9ec

080172c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	4603      	mov	r3, r0
 80172d0:	6039      	str	r1, [r7, #0]
 80172d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	221a      	movs	r2, #26
 80172d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80172da:	f000 f855 	bl	8017388 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80172de:	4b02      	ldr	r3, [pc, #8]	; (80172e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	20000178 	.word	0x20000178

080172ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	4603      	mov	r3, r0
 80172f4:	6039      	str	r1, [r7, #0]
 80172f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80172f8:	79fb      	ldrb	r3, [r7, #7]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d105      	bne.n	801730a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80172fe:	683a      	ldr	r2, [r7, #0]
 8017300:	4907      	ldr	r1, [pc, #28]	; (8017320 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017302:	4808      	ldr	r0, [pc, #32]	; (8017324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017304:	f7f8 fe71 	bl	800ffea <USBD_GetString>
 8017308:	e004      	b.n	8017314 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801730a:	683a      	ldr	r2, [r7, #0]
 801730c:	4904      	ldr	r1, [pc, #16]	; (8017320 <USBD_FS_ConfigStrDescriptor+0x34>)
 801730e:	4805      	ldr	r0, [pc, #20]	; (8017324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017310:	f7f8 fe6b 	bl	800ffea <USBD_GetString>
  }
  return USBD_StrDesc;
 8017314:	4b02      	ldr	r3, [pc, #8]	; (8017320 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017316:	4618      	mov	r0, r3
 8017318:	3708      	adds	r7, #8
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	20028938 	.word	0x20028938
 8017324:	0801aa00 	.word	0x0801aa00

08017328 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	4603      	mov	r3, r0
 8017330:	6039      	str	r1, [r7, #0]
 8017332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017334:	79fb      	ldrb	r3, [r7, #7]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d105      	bne.n	8017346 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801733a:	683a      	ldr	r2, [r7, #0]
 801733c:	4907      	ldr	r1, [pc, #28]	; (801735c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801733e:	4808      	ldr	r0, [pc, #32]	; (8017360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017340:	f7f8 fe53 	bl	800ffea <USBD_GetString>
 8017344:	e004      	b.n	8017350 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017346:	683a      	ldr	r2, [r7, #0]
 8017348:	4904      	ldr	r1, [pc, #16]	; (801735c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801734a:	4805      	ldr	r0, [pc, #20]	; (8017360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801734c:	f7f8 fe4d 	bl	800ffea <USBD_GetString>
  }
  return USBD_StrDesc;
 8017350:	4b02      	ldr	r3, [pc, #8]	; (801735c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017352:	4618      	mov	r0, r3
 8017354:	3708      	adds	r7, #8
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}
 801735a:	bf00      	nop
 801735c:	20028938 	.word	0x20028938
 8017360:	0801aa0c 	.word	0x0801aa0c

08017364 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017364:	b480      	push	{r7}
 8017366:	b083      	sub	sp, #12
 8017368:	af00      	add	r7, sp, #0
 801736a:	4603      	mov	r3, r0
 801736c:	6039      	str	r1, [r7, #0]
 801736e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	220c      	movs	r2, #12
 8017374:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017376:	4b03      	ldr	r3, [pc, #12]	; (8017384 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017378:	4618      	mov	r0, r3
 801737a:	370c      	adds	r7, #12
 801737c:	46bd      	mov	sp, r7
 801737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017382:	4770      	bx	lr
 8017384:	20000168 	.word	0x20000168

08017388 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801738e:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <Get_SerialNum+0x44>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017394:	4b0e      	ldr	r3, [pc, #56]	; (80173d0 <Get_SerialNum+0x48>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801739a:	4b0e      	ldr	r3, [pc, #56]	; (80173d4 <Get_SerialNum+0x4c>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80173a0:	68fa      	ldr	r2, [r7, #12]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	4413      	add	r3, r2
 80173a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d009      	beq.n	80173c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80173ae:	2208      	movs	r2, #8
 80173b0:	4909      	ldr	r1, [pc, #36]	; (80173d8 <Get_SerialNum+0x50>)
 80173b2:	68f8      	ldr	r0, [r7, #12]
 80173b4:	f000 f814 	bl	80173e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80173b8:	2204      	movs	r2, #4
 80173ba:	4908      	ldr	r1, [pc, #32]	; (80173dc <Get_SerialNum+0x54>)
 80173bc:	68b8      	ldr	r0, [r7, #8]
 80173be:	f000 f80f 	bl	80173e0 <IntToUnicode>
  }
}
 80173c2:	bf00      	nop
 80173c4:	3710      	adds	r7, #16
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	1ff0f420 	.word	0x1ff0f420
 80173d0:	1ff0f424 	.word	0x1ff0f424
 80173d4:	1ff0f428 	.word	0x1ff0f428
 80173d8:	2000017a 	.word	0x2000017a
 80173dc:	2000018a 	.word	0x2000018a

080173e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80173e0:	b480      	push	{r7}
 80173e2:	b087      	sub	sp, #28
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	60f8      	str	r0, [r7, #12]
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	4613      	mov	r3, r2
 80173ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80173ee:	2300      	movs	r3, #0
 80173f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80173f2:	2300      	movs	r3, #0
 80173f4:	75fb      	strb	r3, [r7, #23]
 80173f6:	e027      	b.n	8017448 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	0f1b      	lsrs	r3, r3, #28
 80173fc:	2b09      	cmp	r3, #9
 80173fe:	d80b      	bhi.n	8017418 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	0f1b      	lsrs	r3, r3, #28
 8017404:	b2da      	uxtb	r2, r3
 8017406:	7dfb      	ldrb	r3, [r7, #23]
 8017408:	005b      	lsls	r3, r3, #1
 801740a:	4619      	mov	r1, r3
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	440b      	add	r3, r1
 8017410:	3230      	adds	r2, #48	; 0x30
 8017412:	b2d2      	uxtb	r2, r2
 8017414:	701a      	strb	r2, [r3, #0]
 8017416:	e00a      	b.n	801742e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	0f1b      	lsrs	r3, r3, #28
 801741c:	b2da      	uxtb	r2, r3
 801741e:	7dfb      	ldrb	r3, [r7, #23]
 8017420:	005b      	lsls	r3, r3, #1
 8017422:	4619      	mov	r1, r3
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	440b      	add	r3, r1
 8017428:	3237      	adds	r2, #55	; 0x37
 801742a:	b2d2      	uxtb	r2, r2
 801742c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	011b      	lsls	r3, r3, #4
 8017432:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017434:	7dfb      	ldrb	r3, [r7, #23]
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	3301      	adds	r3, #1
 801743a:	68ba      	ldr	r2, [r7, #8]
 801743c:	4413      	add	r3, r2
 801743e:	2200      	movs	r2, #0
 8017440:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017442:	7dfb      	ldrb	r3, [r7, #23]
 8017444:	3301      	adds	r3, #1
 8017446:	75fb      	strb	r3, [r7, #23]
 8017448:	7dfa      	ldrb	r2, [r7, #23]
 801744a:	79fb      	ldrb	r3, [r7, #7]
 801744c:	429a      	cmp	r2, r3
 801744e:	d3d3      	bcc.n	80173f8 <IntToUnicode+0x18>
  }
}
 8017450:	bf00      	nop
 8017452:	371c      	adds	r7, #28
 8017454:	46bd      	mov	sp, r7
 8017456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745a:	4770      	bx	lr

0801745c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b08a      	sub	sp, #40	; 0x28
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017464:	f107 0314 	add.w	r3, r7, #20
 8017468:	2200      	movs	r2, #0
 801746a:	601a      	str	r2, [r3, #0]
 801746c:	605a      	str	r2, [r3, #4]
 801746e:	609a      	str	r2, [r3, #8]
 8017470:	60da      	str	r2, [r3, #12]
 8017472:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801747c:	d13c      	bne.n	80174f8 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801747e:	4b20      	ldr	r3, [pc, #128]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 8017480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017482:	4a1f      	ldr	r2, [pc, #124]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 8017484:	f043 0301 	orr.w	r3, r3, #1
 8017488:	6313      	str	r3, [r2, #48]	; 0x30
 801748a:	4b1d      	ldr	r3, [pc, #116]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 801748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801748e:	f003 0301 	and.w	r3, r3, #1
 8017492:	613b      	str	r3, [r7, #16]
 8017494:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017496:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801749a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801749c:	2302      	movs	r3, #2
 801749e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a0:	2300      	movs	r3, #0
 80174a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80174a4:	2303      	movs	r3, #3
 80174a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80174a8:	230a      	movs	r3, #10
 80174aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80174ac:	f107 0314 	add.w	r3, r7, #20
 80174b0:	4619      	mov	r1, r3
 80174b2:	4814      	ldr	r0, [pc, #80]	; (8017504 <HAL_PCD_MspInit+0xa8>)
 80174b4:	f7ee ff34 	bl	8006320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80174b8:	4b11      	ldr	r3, [pc, #68]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174bc:	4a10      	ldr	r2, [pc, #64]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174c2:	6353      	str	r3, [r2, #52]	; 0x34
 80174c4:	4b0e      	ldr	r3, [pc, #56]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174cc:	60fb      	str	r3, [r7, #12]
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	4b0b      	ldr	r3, [pc, #44]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174d4:	4a0a      	ldr	r2, [pc, #40]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80174da:	6453      	str	r3, [r2, #68]	; 0x44
 80174dc:	4b08      	ldr	r3, [pc, #32]	; (8017500 <HAL_PCD_MspInit+0xa4>)
 80174de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80174e4:	60bb      	str	r3, [r7, #8]
 80174e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80174e8:	2200      	movs	r2, #0
 80174ea:	2105      	movs	r1, #5
 80174ec:	2043      	movs	r0, #67	; 0x43
 80174ee:	f7ee fb49 	bl	8005b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80174f2:	2043      	movs	r0, #67	; 0x43
 80174f4:	f7ee fb62 	bl	8005bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80174f8:	bf00      	nop
 80174fa:	3728      	adds	r7, #40	; 0x28
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}
 8017500:	40023800 	.word	0x40023800
 8017504:	40020000 	.word	0x40020000

08017508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801751c:	4619      	mov	r1, r3
 801751e:	4610      	mov	r0, r2
 8017520:	f7f7 fdb6 	bl	800f090 <USBD_LL_SetupStage>
}
 8017524:	bf00      	nop
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	460b      	mov	r3, r1
 8017536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801753e:	78fa      	ldrb	r2, [r7, #3]
 8017540:	6879      	ldr	r1, [r7, #4]
 8017542:	4613      	mov	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	1a9b      	subs	r3, r3, r2
 8017548:	009b      	lsls	r3, r3, #2
 801754a:	440b      	add	r3, r1
 801754c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	78fb      	ldrb	r3, [r7, #3]
 8017554:	4619      	mov	r1, r3
 8017556:	f7f7 fdee 	bl	800f136 <USBD_LL_DataOutStage>
}
 801755a:	bf00      	nop
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017562:	b580      	push	{r7, lr}
 8017564:	b082      	sub	sp, #8
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	460b      	mov	r3, r1
 801756c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8017574:	78fa      	ldrb	r2, [r7, #3]
 8017576:	6879      	ldr	r1, [r7, #4]
 8017578:	4613      	mov	r3, r2
 801757a:	00db      	lsls	r3, r3, #3
 801757c:	1a9b      	subs	r3, r3, r2
 801757e:	009b      	lsls	r3, r3, #2
 8017580:	440b      	add	r3, r1
 8017582:	3348      	adds	r3, #72	; 0x48
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	78fb      	ldrb	r3, [r7, #3]
 8017588:	4619      	mov	r1, r3
 801758a:	f7f7 fe37 	bl	800f1fc <USBD_LL_DataInStage>
}
 801758e:	bf00      	nop
 8017590:	3708      	adds	r7, #8
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}

08017596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017596:	b580      	push	{r7, lr}
 8017598:	b082      	sub	sp, #8
 801759a:	af00      	add	r7, sp, #0
 801759c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7f7 ff3b 	bl	800f420 <USBD_LL_SOF>
}
 80175aa:	bf00      	nop
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b084      	sub	sp, #16
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80175ba:	2301      	movs	r3, #1
 80175bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	68db      	ldr	r3, [r3, #12]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d102      	bne.n	80175cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80175c6:	2300      	movs	r3, #0
 80175c8:	73fb      	strb	r3, [r7, #15]
 80175ca:	e008      	b.n	80175de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	2b02      	cmp	r3, #2
 80175d2:	d102      	bne.n	80175da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80175d4:	2301      	movs	r3, #1
 80175d6:	73fb      	strb	r3, [r7, #15]
 80175d8:	e001      	b.n	80175de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80175da:	f7ec fee7 	bl	80043ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80175e4:	7bfa      	ldrb	r2, [r7, #15]
 80175e6:	4611      	mov	r1, r2
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7f7 fede 	bl	800f3aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7f7 fe97 	bl	800f328 <USBD_LL_Reset>
}
 80175fa:	bf00      	nop
 80175fc:	3710      	adds	r7, #16
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}
	...

08017604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017612:	4618      	mov	r0, r3
 8017614:	f7f7 fed9 	bl	800f3ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	687a      	ldr	r2, [r7, #4]
 8017624:	6812      	ldr	r2, [r2, #0]
 8017626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801762a:	f043 0301 	orr.w	r3, r3, #1
 801762e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6a1b      	ldr	r3, [r3, #32]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d005      	beq.n	8017644 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017638:	4b04      	ldr	r3, [pc, #16]	; (801764c <HAL_PCD_SuspendCallback+0x48>)
 801763a:	691b      	ldr	r3, [r3, #16]
 801763c:	4a03      	ldr	r2, [pc, #12]	; (801764c <HAL_PCD_SuspendCallback+0x48>)
 801763e:	f043 0306 	orr.w	r3, r3, #6
 8017642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017644:	bf00      	nop
 8017646:	3708      	adds	r7, #8
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	e000ed00 	.word	0xe000ed00

08017650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b082      	sub	sp, #8
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801765e:	4618      	mov	r0, r3
 8017660:	f7f7 fec8 	bl	800f3f4 <USBD_LL_Resume>
}
 8017664:	bf00      	nop
 8017666:	3708      	adds	r7, #8
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	460b      	mov	r3, r1
 8017676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801767e:	78fa      	ldrb	r2, [r7, #3]
 8017680:	4611      	mov	r1, r2
 8017682:	4618      	mov	r0, r3
 8017684:	f7f7 fef3 	bl	800f46e <USBD_LL_IsoOUTIncomplete>
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	460b      	mov	r3, r1
 801769a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176a2:	78fa      	ldrb	r2, [r7, #3]
 80176a4:	4611      	mov	r1, r2
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7f7 fed4 	bl	800f454 <USBD_LL_IsoINIncomplete>
}
 80176ac:	bf00      	nop
 80176ae:	3708      	adds	r7, #8
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}

080176b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b082      	sub	sp, #8
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f7 fee0 	bl	800f488 <USBD_LL_DevConnected>
}
 80176c8:	bf00      	nop
 80176ca:	3708      	adds	r7, #8
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176de:	4618      	mov	r0, r3
 80176e0:	f7f7 fedd 	bl	800f49e <USBD_LL_DevDisconnected>
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b082      	sub	sp, #8
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	781b      	ldrb	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d13c      	bne.n	8017776 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80176fc:	4a20      	ldr	r2, [pc, #128]	; (8017780 <USBD_LL_Init+0x94>)
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	4a1e      	ldr	r2, [pc, #120]	; (8017780 <USBD_LL_Init+0x94>)
 8017708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801770c:	4b1c      	ldr	r3, [pc, #112]	; (8017780 <USBD_LL_Init+0x94>)
 801770e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017714:	4b1a      	ldr	r3, [pc, #104]	; (8017780 <USBD_LL_Init+0x94>)
 8017716:	2206      	movs	r2, #6
 8017718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801771a:	4b19      	ldr	r3, [pc, #100]	; (8017780 <USBD_LL_Init+0x94>)
 801771c:	2202      	movs	r2, #2
 801771e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017720:	4b17      	ldr	r3, [pc, #92]	; (8017780 <USBD_LL_Init+0x94>)
 8017722:	2200      	movs	r2, #0
 8017724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017726:	4b16      	ldr	r3, [pc, #88]	; (8017780 <USBD_LL_Init+0x94>)
 8017728:	2202      	movs	r2, #2
 801772a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801772c:	4b14      	ldr	r3, [pc, #80]	; (8017780 <USBD_LL_Init+0x94>)
 801772e:	2200      	movs	r2, #0
 8017730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017732:	4b13      	ldr	r3, [pc, #76]	; (8017780 <USBD_LL_Init+0x94>)
 8017734:	2200      	movs	r2, #0
 8017736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017738:	4b11      	ldr	r3, [pc, #68]	; (8017780 <USBD_LL_Init+0x94>)
 801773a:	2200      	movs	r2, #0
 801773c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801773e:	4b10      	ldr	r3, [pc, #64]	; (8017780 <USBD_LL_Init+0x94>)
 8017740:	2200      	movs	r2, #0
 8017742:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017744:	4b0e      	ldr	r3, [pc, #56]	; (8017780 <USBD_LL_Init+0x94>)
 8017746:	2200      	movs	r2, #0
 8017748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801774a:	480d      	ldr	r0, [pc, #52]	; (8017780 <USBD_LL_Init+0x94>)
 801774c:	f7ee ffc5 	bl	80066da <HAL_PCD_Init>
 8017750:	4603      	mov	r3, r0
 8017752:	2b00      	cmp	r3, #0
 8017754:	d001      	beq.n	801775a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017756:	f7ec fe29 	bl	80043ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801775a:	2180      	movs	r1, #128	; 0x80
 801775c:	4808      	ldr	r0, [pc, #32]	; (8017780 <USBD_LL_Init+0x94>)
 801775e:	f7f0 f946 	bl	80079ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017762:	2240      	movs	r2, #64	; 0x40
 8017764:	2100      	movs	r1, #0
 8017766:	4806      	ldr	r0, [pc, #24]	; (8017780 <USBD_LL_Init+0x94>)
 8017768:	f7f0 f8fa 	bl	8007960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801776c:	2280      	movs	r2, #128	; 0x80
 801776e:	2101      	movs	r1, #1
 8017770:	4803      	ldr	r0, [pc, #12]	; (8017780 <USBD_LL_Init+0x94>)
 8017772:	f7f0 f8f5 	bl	8007960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017776:	2300      	movs	r3, #0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	20028b38 	.word	0x20028b38

08017784 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801778c:	2300      	movs	r3, #0
 801778e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017790:	2300      	movs	r3, #0
 8017792:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801779a:	4618      	mov	r0, r3
 801779c:	f7ef f8c1 	bl	8006922 <HAL_PCD_Start>
 80177a0:	4603      	mov	r3, r0
 80177a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80177a4:	7bfb      	ldrb	r3, [r7, #15]
 80177a6:	4618      	mov	r0, r3
 80177a8:	f000 f97e 	bl	8017aa8 <USBD_Get_USB_Status>
 80177ac:	4603      	mov	r3, r0
 80177ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80177b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	3710      	adds	r7, #16
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}

080177ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80177ba:	b580      	push	{r7, lr}
 80177bc:	b084      	sub	sp, #16
 80177be:	af00      	add	r7, sp, #0
 80177c0:	6078      	str	r0, [r7, #4]
 80177c2:	4608      	mov	r0, r1
 80177c4:	4611      	mov	r1, r2
 80177c6:	461a      	mov	r2, r3
 80177c8:	4603      	mov	r3, r0
 80177ca:	70fb      	strb	r3, [r7, #3]
 80177cc:	460b      	mov	r3, r1
 80177ce:	70bb      	strb	r3, [r7, #2]
 80177d0:	4613      	mov	r3, r2
 80177d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177d8:	2300      	movs	r3, #0
 80177da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80177e2:	78bb      	ldrb	r3, [r7, #2]
 80177e4:	883a      	ldrh	r2, [r7, #0]
 80177e6:	78f9      	ldrb	r1, [r7, #3]
 80177e8:	f7ef fcc1 	bl	800716e <HAL_PCD_EP_Open>
 80177ec:	4603      	mov	r3, r0
 80177ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177f0:	7bfb      	ldrb	r3, [r7, #15]
 80177f2:	4618      	mov	r0, r3
 80177f4:	f000 f958 	bl	8017aa8 <USBD_Get_USB_Status>
 80177f8:	4603      	mov	r3, r0
 80177fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80177fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3710      	adds	r7, #16
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b084      	sub	sp, #16
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
 801780e:	460b      	mov	r3, r1
 8017810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017812:	2300      	movs	r3, #0
 8017814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017816:	2300      	movs	r3, #0
 8017818:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017820:	78fa      	ldrb	r2, [r7, #3]
 8017822:	4611      	mov	r1, r2
 8017824:	4618      	mov	r0, r3
 8017826:	f7ef fd0a 	bl	800723e <HAL_PCD_EP_Close>
 801782a:	4603      	mov	r3, r0
 801782c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801782e:	7bfb      	ldrb	r3, [r7, #15]
 8017830:	4618      	mov	r0, r3
 8017832:	f000 f939 	bl	8017aa8 <USBD_Get_USB_Status>
 8017836:	4603      	mov	r3, r0
 8017838:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801783a:	7bbb      	ldrb	r3, [r7, #14]
}
 801783c:	4618      	mov	r0, r3
 801783e:	3710      	adds	r7, #16
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	460b      	mov	r3, r1
 801784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017850:	2300      	movs	r3, #0
 8017852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017854:	2300      	movs	r3, #0
 8017856:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801785e:	78fa      	ldrb	r2, [r7, #3]
 8017860:	4611      	mov	r1, r2
 8017862:	4618      	mov	r0, r3
 8017864:	f7ef fde2 	bl	800742c <HAL_PCD_EP_SetStall>
 8017868:	4603      	mov	r3, r0
 801786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801786c:	7bfb      	ldrb	r3, [r7, #15]
 801786e:	4618      	mov	r0, r3
 8017870:	f000 f91a 	bl	8017aa8 <USBD_Get_USB_Status>
 8017874:	4603      	mov	r3, r0
 8017876:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017878:	7bbb      	ldrb	r3, [r7, #14]
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017882:	b580      	push	{r7, lr}
 8017884:	b084      	sub	sp, #16
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
 801788a:	460b      	mov	r3, r1
 801788c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801788e:	2300      	movs	r3, #0
 8017890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017892:	2300      	movs	r3, #0
 8017894:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801789c:	78fa      	ldrb	r2, [r7, #3]
 801789e:	4611      	mov	r1, r2
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7ef fe27 	bl	80074f4 <HAL_PCD_EP_ClrStall>
 80178a6:	4603      	mov	r3, r0
 80178a8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80178aa:	7bfb      	ldrb	r3, [r7, #15]
 80178ac:	4618      	mov	r0, r3
 80178ae:	f000 f8fb 	bl	8017aa8 <USBD_Get_USB_Status>
 80178b2:	4603      	mov	r3, r0
 80178b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80178b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3710      	adds	r7, #16
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178c0:	b480      	push	{r7}
 80178c2:	b085      	sub	sp, #20
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	460b      	mov	r3, r1
 80178ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80178d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80178d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	da0b      	bge.n	80178f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80178dc:	78fb      	ldrb	r3, [r7, #3]
 80178de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80178e2:	68f9      	ldr	r1, [r7, #12]
 80178e4:	4613      	mov	r3, r2
 80178e6:	00db      	lsls	r3, r3, #3
 80178e8:	1a9b      	subs	r3, r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	440b      	add	r3, r1
 80178ee:	333e      	adds	r3, #62	; 0x3e
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	e00b      	b.n	801790c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80178f4:	78fb      	ldrb	r3, [r7, #3]
 80178f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80178fa:	68f9      	ldr	r1, [r7, #12]
 80178fc:	4613      	mov	r3, r2
 80178fe:	00db      	lsls	r3, r3, #3
 8017900:	1a9b      	subs	r3, r3, r2
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	440b      	add	r3, r1
 8017906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801790a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801790c:	4618      	mov	r0, r3
 801790e:	3714      	adds	r7, #20
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr

08017918 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b084      	sub	sp, #16
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	460b      	mov	r3, r1
 8017922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017924:	2300      	movs	r3, #0
 8017926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017928:	2300      	movs	r3, #0
 801792a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017932:	78fa      	ldrb	r2, [r7, #3]
 8017934:	4611      	mov	r1, r2
 8017936:	4618      	mov	r0, r3
 8017938:	f7ef fbf4 	bl	8007124 <HAL_PCD_SetAddress>
 801793c:	4603      	mov	r3, r0
 801793e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017940:	7bfb      	ldrb	r3, [r7, #15]
 8017942:	4618      	mov	r0, r3
 8017944:	f000 f8b0 	bl	8017aa8 <USBD_Get_USB_Status>
 8017948:	4603      	mov	r3, r0
 801794a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801794c:	7bbb      	ldrb	r3, [r7, #14]
}
 801794e:	4618      	mov	r0, r3
 8017950:	3710      	adds	r7, #16
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}

08017956 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017956:	b580      	push	{r7, lr}
 8017958:	b086      	sub	sp, #24
 801795a:	af00      	add	r7, sp, #0
 801795c:	60f8      	str	r0, [r7, #12]
 801795e:	607a      	str	r2, [r7, #4]
 8017960:	603b      	str	r3, [r7, #0]
 8017962:	460b      	mov	r3, r1
 8017964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017966:	2300      	movs	r3, #0
 8017968:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801796a:	2300      	movs	r3, #0
 801796c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017974:	7af9      	ldrb	r1, [r7, #11]
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	f7ef fd0d 	bl	8007398 <HAL_PCD_EP_Transmit>
 801797e:	4603      	mov	r3, r0
 8017980:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017982:	7dfb      	ldrb	r3, [r7, #23]
 8017984:	4618      	mov	r0, r3
 8017986:	f000 f88f 	bl	8017aa8 <USBD_Get_USB_Status>
 801798a:	4603      	mov	r3, r0
 801798c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801798e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017990:	4618      	mov	r0, r3
 8017992:	3718      	adds	r7, #24
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}

08017998 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b086      	sub	sp, #24
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	607a      	str	r2, [r7, #4]
 80179a2:	603b      	str	r3, [r7, #0]
 80179a4:	460b      	mov	r3, r1
 80179a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179a8:	2300      	movs	r3, #0
 80179aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179ac:	2300      	movs	r3, #0
 80179ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179b6:	7af9      	ldrb	r1, [r7, #11]
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	687a      	ldr	r2, [r7, #4]
 80179bc:	f7ef fc89 	bl	80072d2 <HAL_PCD_EP_Receive>
 80179c0:	4603      	mov	r3, r0
 80179c2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80179c4:	7dfb      	ldrb	r3, [r7, #23]
 80179c6:	4618      	mov	r0, r3
 80179c8:	f000 f86e 	bl	8017aa8 <USBD_Get_USB_Status>
 80179cc:	4603      	mov	r3, r0
 80179ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80179d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3718      	adds	r7, #24
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179da:	b580      	push	{r7, lr}
 80179dc:	b082      	sub	sp, #8
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
 80179e2:	460b      	mov	r3, r1
 80179e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179ec:	78fa      	ldrb	r2, [r7, #3]
 80179ee:	4611      	mov	r1, r2
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ef fcb9 	bl	8007368 <HAL_PCD_EP_GetRxCount>
 80179f6:	4603      	mov	r3, r0
}
 80179f8:	4618      	mov	r0, r3
 80179fa:	3708      	adds	r7, #8
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}

08017a00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017a0c:	78fb      	ldrb	r3, [r7, #3]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d002      	beq.n	8017a18 <HAL_PCDEx_LPM_Callback+0x18>
 8017a12:	2b01      	cmp	r3, #1
 8017a14:	d01f      	beq.n	8017a56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8017a16:	e03b      	b.n	8017a90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	6a1b      	ldr	r3, [r3, #32]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d007      	beq.n	8017a30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017a20:	f000 f83c 	bl	8017a9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a24:	4b1c      	ldr	r3, [pc, #112]	; (8017a98 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a26:	691b      	ldr	r3, [r3, #16]
 8017a28:	4a1b      	ldr	r2, [pc, #108]	; (8017a98 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a2a:	f023 0306 	bic.w	r3, r3, #6
 8017a2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	6812      	ldr	r2, [r2, #0]
 8017a3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a42:	f023 0301 	bic.w	r3, r3, #1
 8017a46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f7f7 fcd0 	bl	800f3f4 <USBD_LL_Resume>
    break;
 8017a54:	e01c      	b.n	8017a90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	6812      	ldr	r2, [r2, #0]
 8017a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a68:	f043 0301 	orr.w	r3, r3, #1
 8017a6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7f7 fca8 	bl	800f3ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6a1b      	ldr	r3, [r3, #32]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d005      	beq.n	8017a8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a82:	4b05      	ldr	r3, [pc, #20]	; (8017a98 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a84:	691b      	ldr	r3, [r3, #16]
 8017a86:	4a04      	ldr	r2, [pc, #16]	; (8017a98 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a88:	f043 0306 	orr.w	r3, r3, #6
 8017a8c:	6113      	str	r3, [r2, #16]
    break;   
 8017a8e:	bf00      	nop
}
 8017a90:	bf00      	nop
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	e000ed00 	.word	0xe000ed00

08017a9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017aa0:	f7ec fa10 	bl	8003ec4 <SystemClock_Config>
}
 8017aa4:	bf00      	nop
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b085      	sub	sp, #20
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	4603      	mov	r3, r0
 8017ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017ab6:	79fb      	ldrb	r3, [r7, #7]
 8017ab8:	2b03      	cmp	r3, #3
 8017aba:	d817      	bhi.n	8017aec <USBD_Get_USB_Status+0x44>
 8017abc:	a201      	add	r2, pc, #4	; (adr r2, 8017ac4 <USBD_Get_USB_Status+0x1c>)
 8017abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ac2:	bf00      	nop
 8017ac4:	08017ad5 	.word	0x08017ad5
 8017ac8:	08017adb 	.word	0x08017adb
 8017acc:	08017ae1 	.word	0x08017ae1
 8017ad0:	08017ae7 	.word	0x08017ae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8017ad8:	e00b      	b.n	8017af2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017ada:	2303      	movs	r3, #3
 8017adc:	73fb      	strb	r3, [r7, #15]
    break;
 8017ade:	e008      	b.n	8017af2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8017ae4:	e005      	b.n	8017af2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017ae6:	2303      	movs	r3, #3
 8017ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8017aea:	e002      	b.n	8017af2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017aec:	2303      	movs	r3, #3
 8017aee:	73fb      	strb	r3, [r7, #15]
    break;
 8017af0:	bf00      	nop
  }
  return usb_status;
 8017af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3714      	adds	r7, #20
 8017af8:	46bd      	mov	sp, r7
 8017afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afe:	4770      	bx	lr

08017b00 <__errno>:
 8017b00:	4b01      	ldr	r3, [pc, #4]	; (8017b08 <__errno+0x8>)
 8017b02:	6818      	ldr	r0, [r3, #0]
 8017b04:	4770      	bx	lr
 8017b06:	bf00      	nop
 8017b08:	20000194 	.word	0x20000194

08017b0c <__libc_init_array>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	4e0d      	ldr	r6, [pc, #52]	; (8017b44 <__libc_init_array+0x38>)
 8017b10:	4c0d      	ldr	r4, [pc, #52]	; (8017b48 <__libc_init_array+0x3c>)
 8017b12:	1ba4      	subs	r4, r4, r6
 8017b14:	10a4      	asrs	r4, r4, #2
 8017b16:	2500      	movs	r5, #0
 8017b18:	42a5      	cmp	r5, r4
 8017b1a:	d109      	bne.n	8017b30 <__libc_init_array+0x24>
 8017b1c:	4e0b      	ldr	r6, [pc, #44]	; (8017b4c <__libc_init_array+0x40>)
 8017b1e:	4c0c      	ldr	r4, [pc, #48]	; (8017b50 <__libc_init_array+0x44>)
 8017b20:	f002 faa2 	bl	801a068 <_init>
 8017b24:	1ba4      	subs	r4, r4, r6
 8017b26:	10a4      	asrs	r4, r4, #2
 8017b28:	2500      	movs	r5, #0
 8017b2a:	42a5      	cmp	r5, r4
 8017b2c:	d105      	bne.n	8017b3a <__libc_init_array+0x2e>
 8017b2e:	bd70      	pop	{r4, r5, r6, pc}
 8017b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b34:	4798      	blx	r3
 8017b36:	3501      	adds	r5, #1
 8017b38:	e7ee      	b.n	8017b18 <__libc_init_array+0xc>
 8017b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b3e:	4798      	blx	r3
 8017b40:	3501      	adds	r5, #1
 8017b42:	e7f2      	b.n	8017b2a <__libc_init_array+0x1e>
 8017b44:	0801ad08 	.word	0x0801ad08
 8017b48:	0801ad08 	.word	0x0801ad08
 8017b4c:	0801ad08 	.word	0x0801ad08
 8017b50:	0801ad0c 	.word	0x0801ad0c

08017b54 <malloc>:
 8017b54:	4b02      	ldr	r3, [pc, #8]	; (8017b60 <malloc+0xc>)
 8017b56:	4601      	mov	r1, r0
 8017b58:	6818      	ldr	r0, [r3, #0]
 8017b5a:	f000 b86d 	b.w	8017c38 <_malloc_r>
 8017b5e:	bf00      	nop
 8017b60:	20000194 	.word	0x20000194

08017b64 <free>:
 8017b64:	4b02      	ldr	r3, [pc, #8]	; (8017b70 <free+0xc>)
 8017b66:	4601      	mov	r1, r0
 8017b68:	6818      	ldr	r0, [r3, #0]
 8017b6a:	f000 b817 	b.w	8017b9c <_free_r>
 8017b6e:	bf00      	nop
 8017b70:	20000194 	.word	0x20000194

08017b74 <memcpy>:
 8017b74:	b510      	push	{r4, lr}
 8017b76:	1e43      	subs	r3, r0, #1
 8017b78:	440a      	add	r2, r1
 8017b7a:	4291      	cmp	r1, r2
 8017b7c:	d100      	bne.n	8017b80 <memcpy+0xc>
 8017b7e:	bd10      	pop	{r4, pc}
 8017b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b88:	e7f7      	b.n	8017b7a <memcpy+0x6>

08017b8a <memset>:
 8017b8a:	4402      	add	r2, r0
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d100      	bne.n	8017b94 <memset+0xa>
 8017b92:	4770      	bx	lr
 8017b94:	f803 1b01 	strb.w	r1, [r3], #1
 8017b98:	e7f9      	b.n	8017b8e <memset+0x4>
	...

08017b9c <_free_r>:
 8017b9c:	b538      	push	{r3, r4, r5, lr}
 8017b9e:	4605      	mov	r5, r0
 8017ba0:	2900      	cmp	r1, #0
 8017ba2:	d045      	beq.n	8017c30 <_free_r+0x94>
 8017ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ba8:	1f0c      	subs	r4, r1, #4
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	bfb8      	it	lt
 8017bae:	18e4      	addlt	r4, r4, r3
 8017bb0:	f000 f8e0 	bl	8017d74 <__malloc_lock>
 8017bb4:	4a1f      	ldr	r2, [pc, #124]	; (8017c34 <_free_r+0x98>)
 8017bb6:	6813      	ldr	r3, [r2, #0]
 8017bb8:	4610      	mov	r0, r2
 8017bba:	b933      	cbnz	r3, 8017bca <_free_r+0x2e>
 8017bbc:	6063      	str	r3, [r4, #4]
 8017bbe:	6014      	str	r4, [r2, #0]
 8017bc0:	4628      	mov	r0, r5
 8017bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bc6:	f000 b8d6 	b.w	8017d76 <__malloc_unlock>
 8017bca:	42a3      	cmp	r3, r4
 8017bcc:	d90c      	bls.n	8017be8 <_free_r+0x4c>
 8017bce:	6821      	ldr	r1, [r4, #0]
 8017bd0:	1862      	adds	r2, r4, r1
 8017bd2:	4293      	cmp	r3, r2
 8017bd4:	bf04      	itt	eq
 8017bd6:	681a      	ldreq	r2, [r3, #0]
 8017bd8:	685b      	ldreq	r3, [r3, #4]
 8017bda:	6063      	str	r3, [r4, #4]
 8017bdc:	bf04      	itt	eq
 8017bde:	1852      	addeq	r2, r2, r1
 8017be0:	6022      	streq	r2, [r4, #0]
 8017be2:	6004      	str	r4, [r0, #0]
 8017be4:	e7ec      	b.n	8017bc0 <_free_r+0x24>
 8017be6:	4613      	mov	r3, r2
 8017be8:	685a      	ldr	r2, [r3, #4]
 8017bea:	b10a      	cbz	r2, 8017bf0 <_free_r+0x54>
 8017bec:	42a2      	cmp	r2, r4
 8017bee:	d9fa      	bls.n	8017be6 <_free_r+0x4a>
 8017bf0:	6819      	ldr	r1, [r3, #0]
 8017bf2:	1858      	adds	r0, r3, r1
 8017bf4:	42a0      	cmp	r0, r4
 8017bf6:	d10b      	bne.n	8017c10 <_free_r+0x74>
 8017bf8:	6820      	ldr	r0, [r4, #0]
 8017bfa:	4401      	add	r1, r0
 8017bfc:	1858      	adds	r0, r3, r1
 8017bfe:	4282      	cmp	r2, r0
 8017c00:	6019      	str	r1, [r3, #0]
 8017c02:	d1dd      	bne.n	8017bc0 <_free_r+0x24>
 8017c04:	6810      	ldr	r0, [r2, #0]
 8017c06:	6852      	ldr	r2, [r2, #4]
 8017c08:	605a      	str	r2, [r3, #4]
 8017c0a:	4401      	add	r1, r0
 8017c0c:	6019      	str	r1, [r3, #0]
 8017c0e:	e7d7      	b.n	8017bc0 <_free_r+0x24>
 8017c10:	d902      	bls.n	8017c18 <_free_r+0x7c>
 8017c12:	230c      	movs	r3, #12
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	e7d3      	b.n	8017bc0 <_free_r+0x24>
 8017c18:	6820      	ldr	r0, [r4, #0]
 8017c1a:	1821      	adds	r1, r4, r0
 8017c1c:	428a      	cmp	r2, r1
 8017c1e:	bf04      	itt	eq
 8017c20:	6811      	ldreq	r1, [r2, #0]
 8017c22:	6852      	ldreq	r2, [r2, #4]
 8017c24:	6062      	str	r2, [r4, #4]
 8017c26:	bf04      	itt	eq
 8017c28:	1809      	addeq	r1, r1, r0
 8017c2a:	6021      	streq	r1, [r4, #0]
 8017c2c:	605c      	str	r4, [r3, #4]
 8017c2e:	e7c7      	b.n	8017bc0 <_free_r+0x24>
 8017c30:	bd38      	pop	{r3, r4, r5, pc}
 8017c32:	bf00      	nop
 8017c34:	20008978 	.word	0x20008978

08017c38 <_malloc_r>:
 8017c38:	b570      	push	{r4, r5, r6, lr}
 8017c3a:	1ccd      	adds	r5, r1, #3
 8017c3c:	f025 0503 	bic.w	r5, r5, #3
 8017c40:	3508      	adds	r5, #8
 8017c42:	2d0c      	cmp	r5, #12
 8017c44:	bf38      	it	cc
 8017c46:	250c      	movcc	r5, #12
 8017c48:	2d00      	cmp	r5, #0
 8017c4a:	4606      	mov	r6, r0
 8017c4c:	db01      	blt.n	8017c52 <_malloc_r+0x1a>
 8017c4e:	42a9      	cmp	r1, r5
 8017c50:	d903      	bls.n	8017c5a <_malloc_r+0x22>
 8017c52:	230c      	movs	r3, #12
 8017c54:	6033      	str	r3, [r6, #0]
 8017c56:	2000      	movs	r0, #0
 8017c58:	bd70      	pop	{r4, r5, r6, pc}
 8017c5a:	f000 f88b 	bl	8017d74 <__malloc_lock>
 8017c5e:	4a21      	ldr	r2, [pc, #132]	; (8017ce4 <_malloc_r+0xac>)
 8017c60:	6814      	ldr	r4, [r2, #0]
 8017c62:	4621      	mov	r1, r4
 8017c64:	b991      	cbnz	r1, 8017c8c <_malloc_r+0x54>
 8017c66:	4c20      	ldr	r4, [pc, #128]	; (8017ce8 <_malloc_r+0xb0>)
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	b91b      	cbnz	r3, 8017c74 <_malloc_r+0x3c>
 8017c6c:	4630      	mov	r0, r6
 8017c6e:	f000 f83d 	bl	8017cec <_sbrk_r>
 8017c72:	6020      	str	r0, [r4, #0]
 8017c74:	4629      	mov	r1, r5
 8017c76:	4630      	mov	r0, r6
 8017c78:	f000 f838 	bl	8017cec <_sbrk_r>
 8017c7c:	1c43      	adds	r3, r0, #1
 8017c7e:	d124      	bne.n	8017cca <_malloc_r+0x92>
 8017c80:	230c      	movs	r3, #12
 8017c82:	6033      	str	r3, [r6, #0]
 8017c84:	4630      	mov	r0, r6
 8017c86:	f000 f876 	bl	8017d76 <__malloc_unlock>
 8017c8a:	e7e4      	b.n	8017c56 <_malloc_r+0x1e>
 8017c8c:	680b      	ldr	r3, [r1, #0]
 8017c8e:	1b5b      	subs	r3, r3, r5
 8017c90:	d418      	bmi.n	8017cc4 <_malloc_r+0x8c>
 8017c92:	2b0b      	cmp	r3, #11
 8017c94:	d90f      	bls.n	8017cb6 <_malloc_r+0x7e>
 8017c96:	600b      	str	r3, [r1, #0]
 8017c98:	50cd      	str	r5, [r1, r3]
 8017c9a:	18cc      	adds	r4, r1, r3
 8017c9c:	4630      	mov	r0, r6
 8017c9e:	f000 f86a 	bl	8017d76 <__malloc_unlock>
 8017ca2:	f104 000b 	add.w	r0, r4, #11
 8017ca6:	1d23      	adds	r3, r4, #4
 8017ca8:	f020 0007 	bic.w	r0, r0, #7
 8017cac:	1ac3      	subs	r3, r0, r3
 8017cae:	d0d3      	beq.n	8017c58 <_malloc_r+0x20>
 8017cb0:	425a      	negs	r2, r3
 8017cb2:	50e2      	str	r2, [r4, r3]
 8017cb4:	e7d0      	b.n	8017c58 <_malloc_r+0x20>
 8017cb6:	428c      	cmp	r4, r1
 8017cb8:	684b      	ldr	r3, [r1, #4]
 8017cba:	bf16      	itet	ne
 8017cbc:	6063      	strne	r3, [r4, #4]
 8017cbe:	6013      	streq	r3, [r2, #0]
 8017cc0:	460c      	movne	r4, r1
 8017cc2:	e7eb      	b.n	8017c9c <_malloc_r+0x64>
 8017cc4:	460c      	mov	r4, r1
 8017cc6:	6849      	ldr	r1, [r1, #4]
 8017cc8:	e7cc      	b.n	8017c64 <_malloc_r+0x2c>
 8017cca:	1cc4      	adds	r4, r0, #3
 8017ccc:	f024 0403 	bic.w	r4, r4, #3
 8017cd0:	42a0      	cmp	r0, r4
 8017cd2:	d005      	beq.n	8017ce0 <_malloc_r+0xa8>
 8017cd4:	1a21      	subs	r1, r4, r0
 8017cd6:	4630      	mov	r0, r6
 8017cd8:	f000 f808 	bl	8017cec <_sbrk_r>
 8017cdc:	3001      	adds	r0, #1
 8017cde:	d0cf      	beq.n	8017c80 <_malloc_r+0x48>
 8017ce0:	6025      	str	r5, [r4, #0]
 8017ce2:	e7db      	b.n	8017c9c <_malloc_r+0x64>
 8017ce4:	20008978 	.word	0x20008978
 8017ce8:	2000897c 	.word	0x2000897c

08017cec <_sbrk_r>:
 8017cec:	b538      	push	{r3, r4, r5, lr}
 8017cee:	4c06      	ldr	r4, [pc, #24]	; (8017d08 <_sbrk_r+0x1c>)
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	4608      	mov	r0, r1
 8017cf6:	6023      	str	r3, [r4, #0]
 8017cf8:	f7ec feba 	bl	8004a70 <_sbrk>
 8017cfc:	1c43      	adds	r3, r0, #1
 8017cfe:	d102      	bne.n	8017d06 <_sbrk_r+0x1a>
 8017d00:	6823      	ldr	r3, [r4, #0]
 8017d02:	b103      	cbz	r3, 8017d06 <_sbrk_r+0x1a>
 8017d04:	602b      	str	r3, [r5, #0]
 8017d06:	bd38      	pop	{r3, r4, r5, pc}
 8017d08:	20028f3c 	.word	0x20028f3c

08017d0c <sniprintf>:
 8017d0c:	b40c      	push	{r2, r3}
 8017d0e:	b530      	push	{r4, r5, lr}
 8017d10:	4b17      	ldr	r3, [pc, #92]	; (8017d70 <sniprintf+0x64>)
 8017d12:	1e0c      	subs	r4, r1, #0
 8017d14:	b09d      	sub	sp, #116	; 0x74
 8017d16:	681d      	ldr	r5, [r3, #0]
 8017d18:	da08      	bge.n	8017d2c <sniprintf+0x20>
 8017d1a:	238b      	movs	r3, #139	; 0x8b
 8017d1c:	602b      	str	r3, [r5, #0]
 8017d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017d22:	b01d      	add	sp, #116	; 0x74
 8017d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d28:	b002      	add	sp, #8
 8017d2a:	4770      	bx	lr
 8017d2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017d34:	bf14      	ite	ne
 8017d36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017d3a:	4623      	moveq	r3, r4
 8017d3c:	9304      	str	r3, [sp, #16]
 8017d3e:	9307      	str	r3, [sp, #28]
 8017d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d44:	9002      	str	r0, [sp, #8]
 8017d46:	9006      	str	r0, [sp, #24]
 8017d48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017d4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017d4e:	ab21      	add	r3, sp, #132	; 0x84
 8017d50:	a902      	add	r1, sp, #8
 8017d52:	4628      	mov	r0, r5
 8017d54:	9301      	str	r3, [sp, #4]
 8017d56:	f000 f869 	bl	8017e2c <_svfiprintf_r>
 8017d5a:	1c43      	adds	r3, r0, #1
 8017d5c:	bfbc      	itt	lt
 8017d5e:	238b      	movlt	r3, #139	; 0x8b
 8017d60:	602b      	strlt	r3, [r5, #0]
 8017d62:	2c00      	cmp	r4, #0
 8017d64:	d0dd      	beq.n	8017d22 <sniprintf+0x16>
 8017d66:	9b02      	ldr	r3, [sp, #8]
 8017d68:	2200      	movs	r2, #0
 8017d6a:	701a      	strb	r2, [r3, #0]
 8017d6c:	e7d9      	b.n	8017d22 <sniprintf+0x16>
 8017d6e:	bf00      	nop
 8017d70:	20000194 	.word	0x20000194

08017d74 <__malloc_lock>:
 8017d74:	4770      	bx	lr

08017d76 <__malloc_unlock>:
 8017d76:	4770      	bx	lr

08017d78 <__ssputs_r>:
 8017d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d7c:	688e      	ldr	r6, [r1, #8]
 8017d7e:	429e      	cmp	r6, r3
 8017d80:	4682      	mov	sl, r0
 8017d82:	460c      	mov	r4, r1
 8017d84:	4690      	mov	r8, r2
 8017d86:	4699      	mov	r9, r3
 8017d88:	d837      	bhi.n	8017dfa <__ssputs_r+0x82>
 8017d8a:	898a      	ldrh	r2, [r1, #12]
 8017d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017d90:	d031      	beq.n	8017df6 <__ssputs_r+0x7e>
 8017d92:	6825      	ldr	r5, [r4, #0]
 8017d94:	6909      	ldr	r1, [r1, #16]
 8017d96:	1a6f      	subs	r7, r5, r1
 8017d98:	6965      	ldr	r5, [r4, #20]
 8017d9a:	2302      	movs	r3, #2
 8017d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017da0:	fb95 f5f3 	sdiv	r5, r5, r3
 8017da4:	f109 0301 	add.w	r3, r9, #1
 8017da8:	443b      	add	r3, r7
 8017daa:	429d      	cmp	r5, r3
 8017dac:	bf38      	it	cc
 8017dae:	461d      	movcc	r5, r3
 8017db0:	0553      	lsls	r3, r2, #21
 8017db2:	d530      	bpl.n	8017e16 <__ssputs_r+0x9e>
 8017db4:	4629      	mov	r1, r5
 8017db6:	f7ff ff3f 	bl	8017c38 <_malloc_r>
 8017dba:	4606      	mov	r6, r0
 8017dbc:	b950      	cbnz	r0, 8017dd4 <__ssputs_r+0x5c>
 8017dbe:	230c      	movs	r3, #12
 8017dc0:	f8ca 3000 	str.w	r3, [sl]
 8017dc4:	89a3      	ldrh	r3, [r4, #12]
 8017dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dca:	81a3      	strh	r3, [r4, #12]
 8017dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dd4:	463a      	mov	r2, r7
 8017dd6:	6921      	ldr	r1, [r4, #16]
 8017dd8:	f7ff fecc 	bl	8017b74 <memcpy>
 8017ddc:	89a3      	ldrh	r3, [r4, #12]
 8017dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017de6:	81a3      	strh	r3, [r4, #12]
 8017de8:	6126      	str	r6, [r4, #16]
 8017dea:	6165      	str	r5, [r4, #20]
 8017dec:	443e      	add	r6, r7
 8017dee:	1bed      	subs	r5, r5, r7
 8017df0:	6026      	str	r6, [r4, #0]
 8017df2:	60a5      	str	r5, [r4, #8]
 8017df4:	464e      	mov	r6, r9
 8017df6:	454e      	cmp	r6, r9
 8017df8:	d900      	bls.n	8017dfc <__ssputs_r+0x84>
 8017dfa:	464e      	mov	r6, r9
 8017dfc:	4632      	mov	r2, r6
 8017dfe:	4641      	mov	r1, r8
 8017e00:	6820      	ldr	r0, [r4, #0]
 8017e02:	f000 fa93 	bl	801832c <memmove>
 8017e06:	68a3      	ldr	r3, [r4, #8]
 8017e08:	1b9b      	subs	r3, r3, r6
 8017e0a:	60a3      	str	r3, [r4, #8]
 8017e0c:	6823      	ldr	r3, [r4, #0]
 8017e0e:	441e      	add	r6, r3
 8017e10:	6026      	str	r6, [r4, #0]
 8017e12:	2000      	movs	r0, #0
 8017e14:	e7dc      	b.n	8017dd0 <__ssputs_r+0x58>
 8017e16:	462a      	mov	r2, r5
 8017e18:	f000 faa1 	bl	801835e <_realloc_r>
 8017e1c:	4606      	mov	r6, r0
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	d1e2      	bne.n	8017de8 <__ssputs_r+0x70>
 8017e22:	6921      	ldr	r1, [r4, #16]
 8017e24:	4650      	mov	r0, sl
 8017e26:	f7ff feb9 	bl	8017b9c <_free_r>
 8017e2a:	e7c8      	b.n	8017dbe <__ssputs_r+0x46>

08017e2c <_svfiprintf_r>:
 8017e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e30:	461d      	mov	r5, r3
 8017e32:	898b      	ldrh	r3, [r1, #12]
 8017e34:	061f      	lsls	r7, r3, #24
 8017e36:	b09d      	sub	sp, #116	; 0x74
 8017e38:	4680      	mov	r8, r0
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	4616      	mov	r6, r2
 8017e3e:	d50f      	bpl.n	8017e60 <_svfiprintf_r+0x34>
 8017e40:	690b      	ldr	r3, [r1, #16]
 8017e42:	b96b      	cbnz	r3, 8017e60 <_svfiprintf_r+0x34>
 8017e44:	2140      	movs	r1, #64	; 0x40
 8017e46:	f7ff fef7 	bl	8017c38 <_malloc_r>
 8017e4a:	6020      	str	r0, [r4, #0]
 8017e4c:	6120      	str	r0, [r4, #16]
 8017e4e:	b928      	cbnz	r0, 8017e5c <_svfiprintf_r+0x30>
 8017e50:	230c      	movs	r3, #12
 8017e52:	f8c8 3000 	str.w	r3, [r8]
 8017e56:	f04f 30ff 	mov.w	r0, #4294967295
 8017e5a:	e0c8      	b.n	8017fee <_svfiprintf_r+0x1c2>
 8017e5c:	2340      	movs	r3, #64	; 0x40
 8017e5e:	6163      	str	r3, [r4, #20]
 8017e60:	2300      	movs	r3, #0
 8017e62:	9309      	str	r3, [sp, #36]	; 0x24
 8017e64:	2320      	movs	r3, #32
 8017e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e6a:	2330      	movs	r3, #48	; 0x30
 8017e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e70:	9503      	str	r5, [sp, #12]
 8017e72:	f04f 0b01 	mov.w	fp, #1
 8017e76:	4637      	mov	r7, r6
 8017e78:	463d      	mov	r5, r7
 8017e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017e7e:	b10b      	cbz	r3, 8017e84 <_svfiprintf_r+0x58>
 8017e80:	2b25      	cmp	r3, #37	; 0x25
 8017e82:	d13e      	bne.n	8017f02 <_svfiprintf_r+0xd6>
 8017e84:	ebb7 0a06 	subs.w	sl, r7, r6
 8017e88:	d00b      	beq.n	8017ea2 <_svfiprintf_r+0x76>
 8017e8a:	4653      	mov	r3, sl
 8017e8c:	4632      	mov	r2, r6
 8017e8e:	4621      	mov	r1, r4
 8017e90:	4640      	mov	r0, r8
 8017e92:	f7ff ff71 	bl	8017d78 <__ssputs_r>
 8017e96:	3001      	adds	r0, #1
 8017e98:	f000 80a4 	beq.w	8017fe4 <_svfiprintf_r+0x1b8>
 8017e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e9e:	4453      	add	r3, sl
 8017ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea2:	783b      	ldrb	r3, [r7, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	f000 809d 	beq.w	8017fe4 <_svfiprintf_r+0x1b8>
 8017eaa:	2300      	movs	r3, #0
 8017eac:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017eb4:	9304      	str	r3, [sp, #16]
 8017eb6:	9307      	str	r3, [sp, #28]
 8017eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8017ebe:	462f      	mov	r7, r5
 8017ec0:	2205      	movs	r2, #5
 8017ec2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017ec6:	4850      	ldr	r0, [pc, #320]	; (8018008 <_svfiprintf_r+0x1dc>)
 8017ec8:	f7e8 f9aa 	bl	8000220 <memchr>
 8017ecc:	9b04      	ldr	r3, [sp, #16]
 8017ece:	b9d0      	cbnz	r0, 8017f06 <_svfiprintf_r+0xda>
 8017ed0:	06d9      	lsls	r1, r3, #27
 8017ed2:	bf44      	itt	mi
 8017ed4:	2220      	movmi	r2, #32
 8017ed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017eda:	071a      	lsls	r2, r3, #28
 8017edc:	bf44      	itt	mi
 8017ede:	222b      	movmi	r2, #43	; 0x2b
 8017ee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ee4:	782a      	ldrb	r2, [r5, #0]
 8017ee6:	2a2a      	cmp	r2, #42	; 0x2a
 8017ee8:	d015      	beq.n	8017f16 <_svfiprintf_r+0xea>
 8017eea:	9a07      	ldr	r2, [sp, #28]
 8017eec:	462f      	mov	r7, r5
 8017eee:	2000      	movs	r0, #0
 8017ef0:	250a      	movs	r5, #10
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ef8:	3b30      	subs	r3, #48	; 0x30
 8017efa:	2b09      	cmp	r3, #9
 8017efc:	d94d      	bls.n	8017f9a <_svfiprintf_r+0x16e>
 8017efe:	b1b8      	cbz	r0, 8017f30 <_svfiprintf_r+0x104>
 8017f00:	e00f      	b.n	8017f22 <_svfiprintf_r+0xf6>
 8017f02:	462f      	mov	r7, r5
 8017f04:	e7b8      	b.n	8017e78 <_svfiprintf_r+0x4c>
 8017f06:	4a40      	ldr	r2, [pc, #256]	; (8018008 <_svfiprintf_r+0x1dc>)
 8017f08:	1a80      	subs	r0, r0, r2
 8017f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8017f0e:	4318      	orrs	r0, r3
 8017f10:	9004      	str	r0, [sp, #16]
 8017f12:	463d      	mov	r5, r7
 8017f14:	e7d3      	b.n	8017ebe <_svfiprintf_r+0x92>
 8017f16:	9a03      	ldr	r2, [sp, #12]
 8017f18:	1d11      	adds	r1, r2, #4
 8017f1a:	6812      	ldr	r2, [r2, #0]
 8017f1c:	9103      	str	r1, [sp, #12]
 8017f1e:	2a00      	cmp	r2, #0
 8017f20:	db01      	blt.n	8017f26 <_svfiprintf_r+0xfa>
 8017f22:	9207      	str	r2, [sp, #28]
 8017f24:	e004      	b.n	8017f30 <_svfiprintf_r+0x104>
 8017f26:	4252      	negs	r2, r2
 8017f28:	f043 0302 	orr.w	r3, r3, #2
 8017f2c:	9207      	str	r2, [sp, #28]
 8017f2e:	9304      	str	r3, [sp, #16]
 8017f30:	783b      	ldrb	r3, [r7, #0]
 8017f32:	2b2e      	cmp	r3, #46	; 0x2e
 8017f34:	d10c      	bne.n	8017f50 <_svfiprintf_r+0x124>
 8017f36:	787b      	ldrb	r3, [r7, #1]
 8017f38:	2b2a      	cmp	r3, #42	; 0x2a
 8017f3a:	d133      	bne.n	8017fa4 <_svfiprintf_r+0x178>
 8017f3c:	9b03      	ldr	r3, [sp, #12]
 8017f3e:	1d1a      	adds	r2, r3, #4
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	9203      	str	r2, [sp, #12]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	bfb8      	it	lt
 8017f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f4c:	3702      	adds	r7, #2
 8017f4e:	9305      	str	r3, [sp, #20]
 8017f50:	4d2e      	ldr	r5, [pc, #184]	; (801800c <_svfiprintf_r+0x1e0>)
 8017f52:	7839      	ldrb	r1, [r7, #0]
 8017f54:	2203      	movs	r2, #3
 8017f56:	4628      	mov	r0, r5
 8017f58:	f7e8 f962 	bl	8000220 <memchr>
 8017f5c:	b138      	cbz	r0, 8017f6e <_svfiprintf_r+0x142>
 8017f5e:	2340      	movs	r3, #64	; 0x40
 8017f60:	1b40      	subs	r0, r0, r5
 8017f62:	fa03 f000 	lsl.w	r0, r3, r0
 8017f66:	9b04      	ldr	r3, [sp, #16]
 8017f68:	4303      	orrs	r3, r0
 8017f6a:	3701      	adds	r7, #1
 8017f6c:	9304      	str	r3, [sp, #16]
 8017f6e:	7839      	ldrb	r1, [r7, #0]
 8017f70:	4827      	ldr	r0, [pc, #156]	; (8018010 <_svfiprintf_r+0x1e4>)
 8017f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f76:	2206      	movs	r2, #6
 8017f78:	1c7e      	adds	r6, r7, #1
 8017f7a:	f7e8 f951 	bl	8000220 <memchr>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d038      	beq.n	8017ff4 <_svfiprintf_r+0x1c8>
 8017f82:	4b24      	ldr	r3, [pc, #144]	; (8018014 <_svfiprintf_r+0x1e8>)
 8017f84:	bb13      	cbnz	r3, 8017fcc <_svfiprintf_r+0x1a0>
 8017f86:	9b03      	ldr	r3, [sp, #12]
 8017f88:	3307      	adds	r3, #7
 8017f8a:	f023 0307 	bic.w	r3, r3, #7
 8017f8e:	3308      	adds	r3, #8
 8017f90:	9303      	str	r3, [sp, #12]
 8017f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f94:	444b      	add	r3, r9
 8017f96:	9309      	str	r3, [sp, #36]	; 0x24
 8017f98:	e76d      	b.n	8017e76 <_svfiprintf_r+0x4a>
 8017f9a:	fb05 3202 	mla	r2, r5, r2, r3
 8017f9e:	2001      	movs	r0, #1
 8017fa0:	460f      	mov	r7, r1
 8017fa2:	e7a6      	b.n	8017ef2 <_svfiprintf_r+0xc6>
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	3701      	adds	r7, #1
 8017fa8:	9305      	str	r3, [sp, #20]
 8017faa:	4619      	mov	r1, r3
 8017fac:	250a      	movs	r5, #10
 8017fae:	4638      	mov	r0, r7
 8017fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fb4:	3a30      	subs	r2, #48	; 0x30
 8017fb6:	2a09      	cmp	r2, #9
 8017fb8:	d903      	bls.n	8017fc2 <_svfiprintf_r+0x196>
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d0c8      	beq.n	8017f50 <_svfiprintf_r+0x124>
 8017fbe:	9105      	str	r1, [sp, #20]
 8017fc0:	e7c6      	b.n	8017f50 <_svfiprintf_r+0x124>
 8017fc2:	fb05 2101 	mla	r1, r5, r1, r2
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	4607      	mov	r7, r0
 8017fca:	e7f0      	b.n	8017fae <_svfiprintf_r+0x182>
 8017fcc:	ab03      	add	r3, sp, #12
 8017fce:	9300      	str	r3, [sp, #0]
 8017fd0:	4622      	mov	r2, r4
 8017fd2:	4b11      	ldr	r3, [pc, #68]	; (8018018 <_svfiprintf_r+0x1ec>)
 8017fd4:	a904      	add	r1, sp, #16
 8017fd6:	4640      	mov	r0, r8
 8017fd8:	f3af 8000 	nop.w
 8017fdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017fe0:	4681      	mov	r9, r0
 8017fe2:	d1d6      	bne.n	8017f92 <_svfiprintf_r+0x166>
 8017fe4:	89a3      	ldrh	r3, [r4, #12]
 8017fe6:	065b      	lsls	r3, r3, #25
 8017fe8:	f53f af35 	bmi.w	8017e56 <_svfiprintf_r+0x2a>
 8017fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017fee:	b01d      	add	sp, #116	; 0x74
 8017ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff4:	ab03      	add	r3, sp, #12
 8017ff6:	9300      	str	r3, [sp, #0]
 8017ff8:	4622      	mov	r2, r4
 8017ffa:	4b07      	ldr	r3, [pc, #28]	; (8018018 <_svfiprintf_r+0x1ec>)
 8017ffc:	a904      	add	r1, sp, #16
 8017ffe:	4640      	mov	r0, r8
 8018000:	f000 f882 	bl	8018108 <_printf_i>
 8018004:	e7ea      	b.n	8017fdc <_svfiprintf_r+0x1b0>
 8018006:	bf00      	nop
 8018008:	0801abf4 	.word	0x0801abf4
 801800c:	0801abfa 	.word	0x0801abfa
 8018010:	0801abfe 	.word	0x0801abfe
 8018014:	00000000 	.word	0x00000000
 8018018:	08017d79 	.word	0x08017d79

0801801c <_printf_common>:
 801801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018020:	4691      	mov	r9, r2
 8018022:	461f      	mov	r7, r3
 8018024:	688a      	ldr	r2, [r1, #8]
 8018026:	690b      	ldr	r3, [r1, #16]
 8018028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801802c:	4293      	cmp	r3, r2
 801802e:	bfb8      	it	lt
 8018030:	4613      	movlt	r3, r2
 8018032:	f8c9 3000 	str.w	r3, [r9]
 8018036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801803a:	4606      	mov	r6, r0
 801803c:	460c      	mov	r4, r1
 801803e:	b112      	cbz	r2, 8018046 <_printf_common+0x2a>
 8018040:	3301      	adds	r3, #1
 8018042:	f8c9 3000 	str.w	r3, [r9]
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	0699      	lsls	r1, r3, #26
 801804a:	bf42      	ittt	mi
 801804c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018050:	3302      	addmi	r3, #2
 8018052:	f8c9 3000 	strmi.w	r3, [r9]
 8018056:	6825      	ldr	r5, [r4, #0]
 8018058:	f015 0506 	ands.w	r5, r5, #6
 801805c:	d107      	bne.n	801806e <_printf_common+0x52>
 801805e:	f104 0a19 	add.w	sl, r4, #25
 8018062:	68e3      	ldr	r3, [r4, #12]
 8018064:	f8d9 2000 	ldr.w	r2, [r9]
 8018068:	1a9b      	subs	r3, r3, r2
 801806a:	42ab      	cmp	r3, r5
 801806c:	dc28      	bgt.n	80180c0 <_printf_common+0xa4>
 801806e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	3300      	adds	r3, #0
 8018076:	bf18      	it	ne
 8018078:	2301      	movne	r3, #1
 801807a:	0692      	lsls	r2, r2, #26
 801807c:	d42d      	bmi.n	80180da <_printf_common+0xbe>
 801807e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018082:	4639      	mov	r1, r7
 8018084:	4630      	mov	r0, r6
 8018086:	47c0      	blx	r8
 8018088:	3001      	adds	r0, #1
 801808a:	d020      	beq.n	80180ce <_printf_common+0xb2>
 801808c:	6823      	ldr	r3, [r4, #0]
 801808e:	68e5      	ldr	r5, [r4, #12]
 8018090:	f8d9 2000 	ldr.w	r2, [r9]
 8018094:	f003 0306 	and.w	r3, r3, #6
 8018098:	2b04      	cmp	r3, #4
 801809a:	bf08      	it	eq
 801809c:	1aad      	subeq	r5, r5, r2
 801809e:	68a3      	ldr	r3, [r4, #8]
 80180a0:	6922      	ldr	r2, [r4, #16]
 80180a2:	bf0c      	ite	eq
 80180a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180a8:	2500      	movne	r5, #0
 80180aa:	4293      	cmp	r3, r2
 80180ac:	bfc4      	itt	gt
 80180ae:	1a9b      	subgt	r3, r3, r2
 80180b0:	18ed      	addgt	r5, r5, r3
 80180b2:	f04f 0900 	mov.w	r9, #0
 80180b6:	341a      	adds	r4, #26
 80180b8:	454d      	cmp	r5, r9
 80180ba:	d11a      	bne.n	80180f2 <_printf_common+0xd6>
 80180bc:	2000      	movs	r0, #0
 80180be:	e008      	b.n	80180d2 <_printf_common+0xb6>
 80180c0:	2301      	movs	r3, #1
 80180c2:	4652      	mov	r2, sl
 80180c4:	4639      	mov	r1, r7
 80180c6:	4630      	mov	r0, r6
 80180c8:	47c0      	blx	r8
 80180ca:	3001      	adds	r0, #1
 80180cc:	d103      	bne.n	80180d6 <_printf_common+0xba>
 80180ce:	f04f 30ff 	mov.w	r0, #4294967295
 80180d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180d6:	3501      	adds	r5, #1
 80180d8:	e7c3      	b.n	8018062 <_printf_common+0x46>
 80180da:	18e1      	adds	r1, r4, r3
 80180dc:	1c5a      	adds	r2, r3, #1
 80180de:	2030      	movs	r0, #48	; 0x30
 80180e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80180e4:	4422      	add	r2, r4
 80180e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80180ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80180ee:	3302      	adds	r3, #2
 80180f0:	e7c5      	b.n	801807e <_printf_common+0x62>
 80180f2:	2301      	movs	r3, #1
 80180f4:	4622      	mov	r2, r4
 80180f6:	4639      	mov	r1, r7
 80180f8:	4630      	mov	r0, r6
 80180fa:	47c0      	blx	r8
 80180fc:	3001      	adds	r0, #1
 80180fe:	d0e6      	beq.n	80180ce <_printf_common+0xb2>
 8018100:	f109 0901 	add.w	r9, r9, #1
 8018104:	e7d8      	b.n	80180b8 <_printf_common+0x9c>
	...

08018108 <_printf_i>:
 8018108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801810c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018110:	460c      	mov	r4, r1
 8018112:	7e09      	ldrb	r1, [r1, #24]
 8018114:	b085      	sub	sp, #20
 8018116:	296e      	cmp	r1, #110	; 0x6e
 8018118:	4617      	mov	r7, r2
 801811a:	4606      	mov	r6, r0
 801811c:	4698      	mov	r8, r3
 801811e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018120:	f000 80b3 	beq.w	801828a <_printf_i+0x182>
 8018124:	d822      	bhi.n	801816c <_printf_i+0x64>
 8018126:	2963      	cmp	r1, #99	; 0x63
 8018128:	d036      	beq.n	8018198 <_printf_i+0x90>
 801812a:	d80a      	bhi.n	8018142 <_printf_i+0x3a>
 801812c:	2900      	cmp	r1, #0
 801812e:	f000 80b9 	beq.w	80182a4 <_printf_i+0x19c>
 8018132:	2958      	cmp	r1, #88	; 0x58
 8018134:	f000 8083 	beq.w	801823e <_printf_i+0x136>
 8018138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801813c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018140:	e032      	b.n	80181a8 <_printf_i+0xa0>
 8018142:	2964      	cmp	r1, #100	; 0x64
 8018144:	d001      	beq.n	801814a <_printf_i+0x42>
 8018146:	2969      	cmp	r1, #105	; 0x69
 8018148:	d1f6      	bne.n	8018138 <_printf_i+0x30>
 801814a:	6820      	ldr	r0, [r4, #0]
 801814c:	6813      	ldr	r3, [r2, #0]
 801814e:	0605      	lsls	r5, r0, #24
 8018150:	f103 0104 	add.w	r1, r3, #4
 8018154:	d52a      	bpl.n	80181ac <_printf_i+0xa4>
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	6011      	str	r1, [r2, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	da03      	bge.n	8018166 <_printf_i+0x5e>
 801815e:	222d      	movs	r2, #45	; 0x2d
 8018160:	425b      	negs	r3, r3
 8018162:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018166:	486f      	ldr	r0, [pc, #444]	; (8018324 <_printf_i+0x21c>)
 8018168:	220a      	movs	r2, #10
 801816a:	e039      	b.n	80181e0 <_printf_i+0xd8>
 801816c:	2973      	cmp	r1, #115	; 0x73
 801816e:	f000 809d 	beq.w	80182ac <_printf_i+0x1a4>
 8018172:	d808      	bhi.n	8018186 <_printf_i+0x7e>
 8018174:	296f      	cmp	r1, #111	; 0x6f
 8018176:	d020      	beq.n	80181ba <_printf_i+0xb2>
 8018178:	2970      	cmp	r1, #112	; 0x70
 801817a:	d1dd      	bne.n	8018138 <_printf_i+0x30>
 801817c:	6823      	ldr	r3, [r4, #0]
 801817e:	f043 0320 	orr.w	r3, r3, #32
 8018182:	6023      	str	r3, [r4, #0]
 8018184:	e003      	b.n	801818e <_printf_i+0x86>
 8018186:	2975      	cmp	r1, #117	; 0x75
 8018188:	d017      	beq.n	80181ba <_printf_i+0xb2>
 801818a:	2978      	cmp	r1, #120	; 0x78
 801818c:	d1d4      	bne.n	8018138 <_printf_i+0x30>
 801818e:	2378      	movs	r3, #120	; 0x78
 8018190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018194:	4864      	ldr	r0, [pc, #400]	; (8018328 <_printf_i+0x220>)
 8018196:	e055      	b.n	8018244 <_printf_i+0x13c>
 8018198:	6813      	ldr	r3, [r2, #0]
 801819a:	1d19      	adds	r1, r3, #4
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	6011      	str	r1, [r2, #0]
 80181a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181a8:	2301      	movs	r3, #1
 80181aa:	e08c      	b.n	80182c6 <_printf_i+0x1be>
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	6011      	str	r1, [r2, #0]
 80181b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80181b4:	bf18      	it	ne
 80181b6:	b21b      	sxthne	r3, r3
 80181b8:	e7cf      	b.n	801815a <_printf_i+0x52>
 80181ba:	6813      	ldr	r3, [r2, #0]
 80181bc:	6825      	ldr	r5, [r4, #0]
 80181be:	1d18      	adds	r0, r3, #4
 80181c0:	6010      	str	r0, [r2, #0]
 80181c2:	0628      	lsls	r0, r5, #24
 80181c4:	d501      	bpl.n	80181ca <_printf_i+0xc2>
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	e002      	b.n	80181d0 <_printf_i+0xc8>
 80181ca:	0668      	lsls	r0, r5, #25
 80181cc:	d5fb      	bpl.n	80181c6 <_printf_i+0xbe>
 80181ce:	881b      	ldrh	r3, [r3, #0]
 80181d0:	4854      	ldr	r0, [pc, #336]	; (8018324 <_printf_i+0x21c>)
 80181d2:	296f      	cmp	r1, #111	; 0x6f
 80181d4:	bf14      	ite	ne
 80181d6:	220a      	movne	r2, #10
 80181d8:	2208      	moveq	r2, #8
 80181da:	2100      	movs	r1, #0
 80181dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181e0:	6865      	ldr	r5, [r4, #4]
 80181e2:	60a5      	str	r5, [r4, #8]
 80181e4:	2d00      	cmp	r5, #0
 80181e6:	f2c0 8095 	blt.w	8018314 <_printf_i+0x20c>
 80181ea:	6821      	ldr	r1, [r4, #0]
 80181ec:	f021 0104 	bic.w	r1, r1, #4
 80181f0:	6021      	str	r1, [r4, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d13d      	bne.n	8018272 <_printf_i+0x16a>
 80181f6:	2d00      	cmp	r5, #0
 80181f8:	f040 808e 	bne.w	8018318 <_printf_i+0x210>
 80181fc:	4665      	mov	r5, ip
 80181fe:	2a08      	cmp	r2, #8
 8018200:	d10b      	bne.n	801821a <_printf_i+0x112>
 8018202:	6823      	ldr	r3, [r4, #0]
 8018204:	07db      	lsls	r3, r3, #31
 8018206:	d508      	bpl.n	801821a <_printf_i+0x112>
 8018208:	6923      	ldr	r3, [r4, #16]
 801820a:	6862      	ldr	r2, [r4, #4]
 801820c:	429a      	cmp	r2, r3
 801820e:	bfde      	ittt	le
 8018210:	2330      	movle	r3, #48	; 0x30
 8018212:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018216:	f105 35ff 	addle.w	r5, r5, #4294967295
 801821a:	ebac 0305 	sub.w	r3, ip, r5
 801821e:	6123      	str	r3, [r4, #16]
 8018220:	f8cd 8000 	str.w	r8, [sp]
 8018224:	463b      	mov	r3, r7
 8018226:	aa03      	add	r2, sp, #12
 8018228:	4621      	mov	r1, r4
 801822a:	4630      	mov	r0, r6
 801822c:	f7ff fef6 	bl	801801c <_printf_common>
 8018230:	3001      	adds	r0, #1
 8018232:	d14d      	bne.n	80182d0 <_printf_i+0x1c8>
 8018234:	f04f 30ff 	mov.w	r0, #4294967295
 8018238:	b005      	add	sp, #20
 801823a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801823e:	4839      	ldr	r0, [pc, #228]	; (8018324 <_printf_i+0x21c>)
 8018240:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018244:	6813      	ldr	r3, [r2, #0]
 8018246:	6821      	ldr	r1, [r4, #0]
 8018248:	1d1d      	adds	r5, r3, #4
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	6015      	str	r5, [r2, #0]
 801824e:	060a      	lsls	r2, r1, #24
 8018250:	d50b      	bpl.n	801826a <_printf_i+0x162>
 8018252:	07ca      	lsls	r2, r1, #31
 8018254:	bf44      	itt	mi
 8018256:	f041 0120 	orrmi.w	r1, r1, #32
 801825a:	6021      	strmi	r1, [r4, #0]
 801825c:	b91b      	cbnz	r3, 8018266 <_printf_i+0x15e>
 801825e:	6822      	ldr	r2, [r4, #0]
 8018260:	f022 0220 	bic.w	r2, r2, #32
 8018264:	6022      	str	r2, [r4, #0]
 8018266:	2210      	movs	r2, #16
 8018268:	e7b7      	b.n	80181da <_printf_i+0xd2>
 801826a:	064d      	lsls	r5, r1, #25
 801826c:	bf48      	it	mi
 801826e:	b29b      	uxthmi	r3, r3
 8018270:	e7ef      	b.n	8018252 <_printf_i+0x14a>
 8018272:	4665      	mov	r5, ip
 8018274:	fbb3 f1f2 	udiv	r1, r3, r2
 8018278:	fb02 3311 	mls	r3, r2, r1, r3
 801827c:	5cc3      	ldrb	r3, [r0, r3]
 801827e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018282:	460b      	mov	r3, r1
 8018284:	2900      	cmp	r1, #0
 8018286:	d1f5      	bne.n	8018274 <_printf_i+0x16c>
 8018288:	e7b9      	b.n	80181fe <_printf_i+0xf6>
 801828a:	6813      	ldr	r3, [r2, #0]
 801828c:	6825      	ldr	r5, [r4, #0]
 801828e:	6961      	ldr	r1, [r4, #20]
 8018290:	1d18      	adds	r0, r3, #4
 8018292:	6010      	str	r0, [r2, #0]
 8018294:	0628      	lsls	r0, r5, #24
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	d501      	bpl.n	801829e <_printf_i+0x196>
 801829a:	6019      	str	r1, [r3, #0]
 801829c:	e002      	b.n	80182a4 <_printf_i+0x19c>
 801829e:	066a      	lsls	r2, r5, #25
 80182a0:	d5fb      	bpl.n	801829a <_printf_i+0x192>
 80182a2:	8019      	strh	r1, [r3, #0]
 80182a4:	2300      	movs	r3, #0
 80182a6:	6123      	str	r3, [r4, #16]
 80182a8:	4665      	mov	r5, ip
 80182aa:	e7b9      	b.n	8018220 <_printf_i+0x118>
 80182ac:	6813      	ldr	r3, [r2, #0]
 80182ae:	1d19      	adds	r1, r3, #4
 80182b0:	6011      	str	r1, [r2, #0]
 80182b2:	681d      	ldr	r5, [r3, #0]
 80182b4:	6862      	ldr	r2, [r4, #4]
 80182b6:	2100      	movs	r1, #0
 80182b8:	4628      	mov	r0, r5
 80182ba:	f7e7 ffb1 	bl	8000220 <memchr>
 80182be:	b108      	cbz	r0, 80182c4 <_printf_i+0x1bc>
 80182c0:	1b40      	subs	r0, r0, r5
 80182c2:	6060      	str	r0, [r4, #4]
 80182c4:	6863      	ldr	r3, [r4, #4]
 80182c6:	6123      	str	r3, [r4, #16]
 80182c8:	2300      	movs	r3, #0
 80182ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182ce:	e7a7      	b.n	8018220 <_printf_i+0x118>
 80182d0:	6923      	ldr	r3, [r4, #16]
 80182d2:	462a      	mov	r2, r5
 80182d4:	4639      	mov	r1, r7
 80182d6:	4630      	mov	r0, r6
 80182d8:	47c0      	blx	r8
 80182da:	3001      	adds	r0, #1
 80182dc:	d0aa      	beq.n	8018234 <_printf_i+0x12c>
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	079b      	lsls	r3, r3, #30
 80182e2:	d413      	bmi.n	801830c <_printf_i+0x204>
 80182e4:	68e0      	ldr	r0, [r4, #12]
 80182e6:	9b03      	ldr	r3, [sp, #12]
 80182e8:	4298      	cmp	r0, r3
 80182ea:	bfb8      	it	lt
 80182ec:	4618      	movlt	r0, r3
 80182ee:	e7a3      	b.n	8018238 <_printf_i+0x130>
 80182f0:	2301      	movs	r3, #1
 80182f2:	464a      	mov	r2, r9
 80182f4:	4639      	mov	r1, r7
 80182f6:	4630      	mov	r0, r6
 80182f8:	47c0      	blx	r8
 80182fa:	3001      	adds	r0, #1
 80182fc:	d09a      	beq.n	8018234 <_printf_i+0x12c>
 80182fe:	3501      	adds	r5, #1
 8018300:	68e3      	ldr	r3, [r4, #12]
 8018302:	9a03      	ldr	r2, [sp, #12]
 8018304:	1a9b      	subs	r3, r3, r2
 8018306:	42ab      	cmp	r3, r5
 8018308:	dcf2      	bgt.n	80182f0 <_printf_i+0x1e8>
 801830a:	e7eb      	b.n	80182e4 <_printf_i+0x1dc>
 801830c:	2500      	movs	r5, #0
 801830e:	f104 0919 	add.w	r9, r4, #25
 8018312:	e7f5      	b.n	8018300 <_printf_i+0x1f8>
 8018314:	2b00      	cmp	r3, #0
 8018316:	d1ac      	bne.n	8018272 <_printf_i+0x16a>
 8018318:	7803      	ldrb	r3, [r0, #0]
 801831a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801831e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018322:	e76c      	b.n	80181fe <_printf_i+0xf6>
 8018324:	0801ac05 	.word	0x0801ac05
 8018328:	0801ac16 	.word	0x0801ac16

0801832c <memmove>:
 801832c:	4288      	cmp	r0, r1
 801832e:	b510      	push	{r4, lr}
 8018330:	eb01 0302 	add.w	r3, r1, r2
 8018334:	d807      	bhi.n	8018346 <memmove+0x1a>
 8018336:	1e42      	subs	r2, r0, #1
 8018338:	4299      	cmp	r1, r3
 801833a:	d00a      	beq.n	8018352 <memmove+0x26>
 801833c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018340:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018344:	e7f8      	b.n	8018338 <memmove+0xc>
 8018346:	4283      	cmp	r3, r0
 8018348:	d9f5      	bls.n	8018336 <memmove+0xa>
 801834a:	1881      	adds	r1, r0, r2
 801834c:	1ad2      	subs	r2, r2, r3
 801834e:	42d3      	cmn	r3, r2
 8018350:	d100      	bne.n	8018354 <memmove+0x28>
 8018352:	bd10      	pop	{r4, pc}
 8018354:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018358:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801835c:	e7f7      	b.n	801834e <memmove+0x22>

0801835e <_realloc_r>:
 801835e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018360:	4607      	mov	r7, r0
 8018362:	4614      	mov	r4, r2
 8018364:	460e      	mov	r6, r1
 8018366:	b921      	cbnz	r1, 8018372 <_realloc_r+0x14>
 8018368:	4611      	mov	r1, r2
 801836a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801836e:	f7ff bc63 	b.w	8017c38 <_malloc_r>
 8018372:	b922      	cbnz	r2, 801837e <_realloc_r+0x20>
 8018374:	f7ff fc12 	bl	8017b9c <_free_r>
 8018378:	4625      	mov	r5, r4
 801837a:	4628      	mov	r0, r5
 801837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801837e:	f000 f814 	bl	80183aa <_malloc_usable_size_r>
 8018382:	42a0      	cmp	r0, r4
 8018384:	d20f      	bcs.n	80183a6 <_realloc_r+0x48>
 8018386:	4621      	mov	r1, r4
 8018388:	4638      	mov	r0, r7
 801838a:	f7ff fc55 	bl	8017c38 <_malloc_r>
 801838e:	4605      	mov	r5, r0
 8018390:	2800      	cmp	r0, #0
 8018392:	d0f2      	beq.n	801837a <_realloc_r+0x1c>
 8018394:	4631      	mov	r1, r6
 8018396:	4622      	mov	r2, r4
 8018398:	f7ff fbec 	bl	8017b74 <memcpy>
 801839c:	4631      	mov	r1, r6
 801839e:	4638      	mov	r0, r7
 80183a0:	f7ff fbfc 	bl	8017b9c <_free_r>
 80183a4:	e7e9      	b.n	801837a <_realloc_r+0x1c>
 80183a6:	4635      	mov	r5, r6
 80183a8:	e7e7      	b.n	801837a <_realloc_r+0x1c>

080183aa <_malloc_usable_size_r>:
 80183aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183ae:	1f18      	subs	r0, r3, #4
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	bfbc      	itt	lt
 80183b4:	580b      	ldrlt	r3, [r1, r0]
 80183b6:	18c0      	addlt	r0, r0, r3
 80183b8:	4770      	bx	lr

080183ba <fmaxf>:
 80183ba:	b508      	push	{r3, lr}
 80183bc:	ed2d 8b02 	vpush	{d8}
 80183c0:	eeb0 8a40 	vmov.f32	s16, s0
 80183c4:	eef0 8a60 	vmov.f32	s17, s1
 80183c8:	f000 f82e 	bl	8018428 <__fpclassifyf>
 80183cc:	b148      	cbz	r0, 80183e2 <fmaxf+0x28>
 80183ce:	eeb0 0a68 	vmov.f32	s0, s17
 80183d2:	f000 f829 	bl	8018428 <__fpclassifyf>
 80183d6:	b130      	cbz	r0, 80183e6 <fmaxf+0x2c>
 80183d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80183dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e0:	dc01      	bgt.n	80183e6 <fmaxf+0x2c>
 80183e2:	eeb0 8a68 	vmov.f32	s16, s17
 80183e6:	eeb0 0a48 	vmov.f32	s0, s16
 80183ea:	ecbd 8b02 	vpop	{d8}
 80183ee:	bd08      	pop	{r3, pc}

080183f0 <fminf>:
 80183f0:	b508      	push	{r3, lr}
 80183f2:	ed2d 8b02 	vpush	{d8}
 80183f6:	eeb0 8a40 	vmov.f32	s16, s0
 80183fa:	eef0 8a60 	vmov.f32	s17, s1
 80183fe:	f000 f813 	bl	8018428 <__fpclassifyf>
 8018402:	b148      	cbz	r0, 8018418 <fminf+0x28>
 8018404:	eeb0 0a68 	vmov.f32	s0, s17
 8018408:	f000 f80e 	bl	8018428 <__fpclassifyf>
 801840c:	b130      	cbz	r0, 801841c <fminf+0x2c>
 801840e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018416:	d401      	bmi.n	801841c <fminf+0x2c>
 8018418:	eeb0 8a68 	vmov.f32	s16, s17
 801841c:	eeb0 0a48 	vmov.f32	s0, s16
 8018420:	ecbd 8b02 	vpop	{d8}
 8018424:	bd08      	pop	{r3, pc}
	...

08018428 <__fpclassifyf>:
 8018428:	ee10 3a10 	vmov	r3, s0
 801842c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8018430:	d00d      	beq.n	801844e <__fpclassifyf+0x26>
 8018432:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8018436:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801843a:	d30a      	bcc.n	8018452 <__fpclassifyf+0x2a>
 801843c:	4b07      	ldr	r3, [pc, #28]	; (801845c <__fpclassifyf+0x34>)
 801843e:	1e42      	subs	r2, r0, #1
 8018440:	429a      	cmp	r2, r3
 8018442:	d908      	bls.n	8018456 <__fpclassifyf+0x2e>
 8018444:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8018448:	4258      	negs	r0, r3
 801844a:	4158      	adcs	r0, r3
 801844c:	4770      	bx	lr
 801844e:	2002      	movs	r0, #2
 8018450:	4770      	bx	lr
 8018452:	2004      	movs	r0, #4
 8018454:	4770      	bx	lr
 8018456:	2003      	movs	r0, #3
 8018458:	4770      	bx	lr
 801845a:	bf00      	nop
 801845c:	007ffffe 	.word	0x007ffffe

08018460 <pow>:
 8018460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018464:	ed2d 8b04 	vpush	{d8-d9}
 8018468:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801873c <pow+0x2dc>
 801846c:	b08d      	sub	sp, #52	; 0x34
 801846e:	ec57 6b10 	vmov	r6, r7, d0
 8018472:	ec55 4b11 	vmov	r4, r5, d1
 8018476:	f000 fb73 	bl	8018b60 <__ieee754_pow>
 801847a:	f999 3000 	ldrsb.w	r3, [r9]
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	3301      	adds	r3, #1
 8018482:	eeb0 8a40 	vmov.f32	s16, s0
 8018486:	eef0 8a60 	vmov.f32	s17, s1
 801848a:	46c8      	mov	r8, r9
 801848c:	d05f      	beq.n	801854e <pow+0xee>
 801848e:	4622      	mov	r2, r4
 8018490:	462b      	mov	r3, r5
 8018492:	4620      	mov	r0, r4
 8018494:	4629      	mov	r1, r5
 8018496:	f7e8 fb69 	bl	8000b6c <__aeabi_dcmpun>
 801849a:	4683      	mov	fp, r0
 801849c:	2800      	cmp	r0, #0
 801849e:	d156      	bne.n	801854e <pow+0xee>
 80184a0:	4632      	mov	r2, r6
 80184a2:	463b      	mov	r3, r7
 80184a4:	4630      	mov	r0, r6
 80184a6:	4639      	mov	r1, r7
 80184a8:	f7e8 fb60 	bl	8000b6c <__aeabi_dcmpun>
 80184ac:	9001      	str	r0, [sp, #4]
 80184ae:	b1e8      	cbz	r0, 80184ec <pow+0x8c>
 80184b0:	2200      	movs	r2, #0
 80184b2:	2300      	movs	r3, #0
 80184b4:	4620      	mov	r0, r4
 80184b6:	4629      	mov	r1, r5
 80184b8:	f7e8 fb26 	bl	8000b08 <__aeabi_dcmpeq>
 80184bc:	2800      	cmp	r0, #0
 80184be:	d046      	beq.n	801854e <pow+0xee>
 80184c0:	2301      	movs	r3, #1
 80184c2:	9302      	str	r3, [sp, #8]
 80184c4:	4b96      	ldr	r3, [pc, #600]	; (8018720 <pow+0x2c0>)
 80184c6:	9303      	str	r3, [sp, #12]
 80184c8:	4b96      	ldr	r3, [pc, #600]	; (8018724 <pow+0x2c4>)
 80184ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80184ce:	2200      	movs	r2, #0
 80184d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80184d4:	9b00      	ldr	r3, [sp, #0]
 80184d6:	2b02      	cmp	r3, #2
 80184d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80184dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80184e0:	d033      	beq.n	801854a <pow+0xea>
 80184e2:	a802      	add	r0, sp, #8
 80184e4:	f001 fbce 	bl	8019c84 <matherr>
 80184e8:	bb48      	cbnz	r0, 801853e <pow+0xde>
 80184ea:	e05d      	b.n	80185a8 <pow+0x148>
 80184ec:	f04f 0a00 	mov.w	sl, #0
 80184f0:	f04f 0b00 	mov.w	fp, #0
 80184f4:	4652      	mov	r2, sl
 80184f6:	465b      	mov	r3, fp
 80184f8:	4630      	mov	r0, r6
 80184fa:	4639      	mov	r1, r7
 80184fc:	f7e8 fb04 	bl	8000b08 <__aeabi_dcmpeq>
 8018500:	ec4b ab19 	vmov	d9, sl, fp
 8018504:	2800      	cmp	r0, #0
 8018506:	d054      	beq.n	80185b2 <pow+0x152>
 8018508:	4652      	mov	r2, sl
 801850a:	465b      	mov	r3, fp
 801850c:	4620      	mov	r0, r4
 801850e:	4629      	mov	r1, r5
 8018510:	f7e8 fafa 	bl	8000b08 <__aeabi_dcmpeq>
 8018514:	4680      	mov	r8, r0
 8018516:	b318      	cbz	r0, 8018560 <pow+0x100>
 8018518:	2301      	movs	r3, #1
 801851a:	9302      	str	r3, [sp, #8]
 801851c:	4b80      	ldr	r3, [pc, #512]	; (8018720 <pow+0x2c0>)
 801851e:	9303      	str	r3, [sp, #12]
 8018520:	9b01      	ldr	r3, [sp, #4]
 8018522:	930a      	str	r3, [sp, #40]	; 0x28
 8018524:	9b00      	ldr	r3, [sp, #0]
 8018526:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801852a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801852e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d0d5      	beq.n	80184e2 <pow+0x82>
 8018536:	4b7b      	ldr	r3, [pc, #492]	; (8018724 <pow+0x2c4>)
 8018538:	2200      	movs	r2, #0
 801853a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801853e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018540:	b11b      	cbz	r3, 801854a <pow+0xea>
 8018542:	f7ff fadd 	bl	8017b00 <__errno>
 8018546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018548:	6003      	str	r3, [r0, #0]
 801854a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801854e:	eeb0 0a48 	vmov.f32	s0, s16
 8018552:	eef0 0a68 	vmov.f32	s1, s17
 8018556:	b00d      	add	sp, #52	; 0x34
 8018558:	ecbd 8b04 	vpop	{d8-d9}
 801855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018560:	ec45 4b10 	vmov	d0, r4, r5
 8018564:	f001 fb86 	bl	8019c74 <finite>
 8018568:	2800      	cmp	r0, #0
 801856a:	d0f0      	beq.n	801854e <pow+0xee>
 801856c:	4652      	mov	r2, sl
 801856e:	465b      	mov	r3, fp
 8018570:	4620      	mov	r0, r4
 8018572:	4629      	mov	r1, r5
 8018574:	f7e8 fad2 	bl	8000b1c <__aeabi_dcmplt>
 8018578:	2800      	cmp	r0, #0
 801857a:	d0e8      	beq.n	801854e <pow+0xee>
 801857c:	2301      	movs	r3, #1
 801857e:	9302      	str	r3, [sp, #8]
 8018580:	4b67      	ldr	r3, [pc, #412]	; (8018720 <pow+0x2c0>)
 8018582:	9303      	str	r3, [sp, #12]
 8018584:	f999 3000 	ldrsb.w	r3, [r9]
 8018588:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801858c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018590:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018594:	b913      	cbnz	r3, 801859c <pow+0x13c>
 8018596:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801859a:	e7a2      	b.n	80184e2 <pow+0x82>
 801859c:	4962      	ldr	r1, [pc, #392]	; (8018728 <pow+0x2c8>)
 801859e:	2000      	movs	r0, #0
 80185a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80185a4:	2b02      	cmp	r3, #2
 80185a6:	d19c      	bne.n	80184e2 <pow+0x82>
 80185a8:	f7ff faaa 	bl	8017b00 <__errno>
 80185ac:	2321      	movs	r3, #33	; 0x21
 80185ae:	6003      	str	r3, [r0, #0]
 80185b0:	e7c5      	b.n	801853e <pow+0xde>
 80185b2:	eeb0 0a48 	vmov.f32	s0, s16
 80185b6:	eef0 0a68 	vmov.f32	s1, s17
 80185ba:	f001 fb5b 	bl	8019c74 <finite>
 80185be:	9000      	str	r0, [sp, #0]
 80185c0:	2800      	cmp	r0, #0
 80185c2:	f040 8081 	bne.w	80186c8 <pow+0x268>
 80185c6:	ec47 6b10 	vmov	d0, r6, r7
 80185ca:	f001 fb53 	bl	8019c74 <finite>
 80185ce:	2800      	cmp	r0, #0
 80185d0:	d07a      	beq.n	80186c8 <pow+0x268>
 80185d2:	ec45 4b10 	vmov	d0, r4, r5
 80185d6:	f001 fb4d 	bl	8019c74 <finite>
 80185da:	2800      	cmp	r0, #0
 80185dc:	d074      	beq.n	80186c8 <pow+0x268>
 80185de:	ec53 2b18 	vmov	r2, r3, d8
 80185e2:	ee18 0a10 	vmov	r0, s16
 80185e6:	4619      	mov	r1, r3
 80185e8:	f7e8 fac0 	bl	8000b6c <__aeabi_dcmpun>
 80185ec:	f999 9000 	ldrsb.w	r9, [r9]
 80185f0:	4b4b      	ldr	r3, [pc, #300]	; (8018720 <pow+0x2c0>)
 80185f2:	b1b0      	cbz	r0, 8018622 <pow+0x1c2>
 80185f4:	2201      	movs	r2, #1
 80185f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185fa:	9b00      	ldr	r3, [sp, #0]
 80185fc:	930a      	str	r3, [sp, #40]	; 0x28
 80185fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018602:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018606:	f1b9 0f00 	cmp.w	r9, #0
 801860a:	d0c4      	beq.n	8018596 <pow+0x136>
 801860c:	4652      	mov	r2, sl
 801860e:	465b      	mov	r3, fp
 8018610:	4650      	mov	r0, sl
 8018612:	4659      	mov	r1, fp
 8018614:	f7e8 f93a 	bl	800088c <__aeabi_ddiv>
 8018618:	f1b9 0f02 	cmp.w	r9, #2
 801861c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018620:	e7c1      	b.n	80185a6 <pow+0x146>
 8018622:	2203      	movs	r2, #3
 8018624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018628:	900a      	str	r0, [sp, #40]	; 0x28
 801862a:	4629      	mov	r1, r5
 801862c:	4620      	mov	r0, r4
 801862e:	2200      	movs	r2, #0
 8018630:	4b3e      	ldr	r3, [pc, #248]	; (801872c <pow+0x2cc>)
 8018632:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018636:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801863a:	f7e7 fffd 	bl	8000638 <__aeabi_dmul>
 801863e:	4604      	mov	r4, r0
 8018640:	460d      	mov	r5, r1
 8018642:	f1b9 0f00 	cmp.w	r9, #0
 8018646:	d124      	bne.n	8018692 <pow+0x232>
 8018648:	4b39      	ldr	r3, [pc, #228]	; (8018730 <pow+0x2d0>)
 801864a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801864e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018652:	4630      	mov	r0, r6
 8018654:	4652      	mov	r2, sl
 8018656:	465b      	mov	r3, fp
 8018658:	4639      	mov	r1, r7
 801865a:	f7e8 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 801865e:	2800      	cmp	r0, #0
 8018660:	d056      	beq.n	8018710 <pow+0x2b0>
 8018662:	ec45 4b10 	vmov	d0, r4, r5
 8018666:	f001 fb17 	bl	8019c98 <rint>
 801866a:	4622      	mov	r2, r4
 801866c:	462b      	mov	r3, r5
 801866e:	ec51 0b10 	vmov	r0, r1, d0
 8018672:	f7e8 fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8018676:	b920      	cbnz	r0, 8018682 <pow+0x222>
 8018678:	4b2e      	ldr	r3, [pc, #184]	; (8018734 <pow+0x2d4>)
 801867a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801867e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018682:	f998 3000 	ldrsb.w	r3, [r8]
 8018686:	2b02      	cmp	r3, #2
 8018688:	d142      	bne.n	8018710 <pow+0x2b0>
 801868a:	f7ff fa39 	bl	8017b00 <__errno>
 801868e:	2322      	movs	r3, #34	; 0x22
 8018690:	e78d      	b.n	80185ae <pow+0x14e>
 8018692:	4b29      	ldr	r3, [pc, #164]	; (8018738 <pow+0x2d8>)
 8018694:	2200      	movs	r2, #0
 8018696:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801869a:	4630      	mov	r0, r6
 801869c:	4652      	mov	r2, sl
 801869e:	465b      	mov	r3, fp
 80186a0:	4639      	mov	r1, r7
 80186a2:	f7e8 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80186a6:	2800      	cmp	r0, #0
 80186a8:	d0eb      	beq.n	8018682 <pow+0x222>
 80186aa:	ec45 4b10 	vmov	d0, r4, r5
 80186ae:	f001 faf3 	bl	8019c98 <rint>
 80186b2:	4622      	mov	r2, r4
 80186b4:	462b      	mov	r3, r5
 80186b6:	ec51 0b10 	vmov	r0, r1, d0
 80186ba:	f7e8 fa25 	bl	8000b08 <__aeabi_dcmpeq>
 80186be:	2800      	cmp	r0, #0
 80186c0:	d1df      	bne.n	8018682 <pow+0x222>
 80186c2:	2200      	movs	r2, #0
 80186c4:	4b18      	ldr	r3, [pc, #96]	; (8018728 <pow+0x2c8>)
 80186c6:	e7da      	b.n	801867e <pow+0x21e>
 80186c8:	2200      	movs	r2, #0
 80186ca:	2300      	movs	r3, #0
 80186cc:	ec51 0b18 	vmov	r0, r1, d8
 80186d0:	f7e8 fa1a 	bl	8000b08 <__aeabi_dcmpeq>
 80186d4:	2800      	cmp	r0, #0
 80186d6:	f43f af3a 	beq.w	801854e <pow+0xee>
 80186da:	ec47 6b10 	vmov	d0, r6, r7
 80186de:	f001 fac9 	bl	8019c74 <finite>
 80186e2:	2800      	cmp	r0, #0
 80186e4:	f43f af33 	beq.w	801854e <pow+0xee>
 80186e8:	ec45 4b10 	vmov	d0, r4, r5
 80186ec:	f001 fac2 	bl	8019c74 <finite>
 80186f0:	2800      	cmp	r0, #0
 80186f2:	f43f af2c 	beq.w	801854e <pow+0xee>
 80186f6:	2304      	movs	r3, #4
 80186f8:	9302      	str	r3, [sp, #8]
 80186fa:	4b09      	ldr	r3, [pc, #36]	; (8018720 <pow+0x2c0>)
 80186fc:	9303      	str	r3, [sp, #12]
 80186fe:	2300      	movs	r3, #0
 8018700:	930a      	str	r3, [sp, #40]	; 0x28
 8018702:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018706:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801870a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801870e:	e7b8      	b.n	8018682 <pow+0x222>
 8018710:	a802      	add	r0, sp, #8
 8018712:	f001 fab7 	bl	8019c84 <matherr>
 8018716:	2800      	cmp	r0, #0
 8018718:	f47f af11 	bne.w	801853e <pow+0xde>
 801871c:	e7b5      	b.n	801868a <pow+0x22a>
 801871e:	bf00      	nop
 8018720:	0801ac88 	.word	0x0801ac88
 8018724:	3ff00000 	.word	0x3ff00000
 8018728:	fff00000 	.word	0xfff00000
 801872c:	3fe00000 	.word	0x3fe00000
 8018730:	47efffff 	.word	0x47efffff
 8018734:	c7efffff 	.word	0xc7efffff
 8018738:	7ff00000 	.word	0x7ff00000
 801873c:	200001f8 	.word	0x200001f8

08018740 <sqrt>:
 8018740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018744:	ed2d 8b02 	vpush	{d8}
 8018748:	b08b      	sub	sp, #44	; 0x2c
 801874a:	ec55 4b10 	vmov	r4, r5, d0
 801874e:	f000 ff15 	bl	801957c <__ieee754_sqrt>
 8018752:	4b26      	ldr	r3, [pc, #152]	; (80187ec <sqrt+0xac>)
 8018754:	eeb0 8a40 	vmov.f32	s16, s0
 8018758:	eef0 8a60 	vmov.f32	s17, s1
 801875c:	f993 6000 	ldrsb.w	r6, [r3]
 8018760:	1c73      	adds	r3, r6, #1
 8018762:	d02a      	beq.n	80187ba <sqrt+0x7a>
 8018764:	4622      	mov	r2, r4
 8018766:	462b      	mov	r3, r5
 8018768:	4620      	mov	r0, r4
 801876a:	4629      	mov	r1, r5
 801876c:	f7e8 f9fe 	bl	8000b6c <__aeabi_dcmpun>
 8018770:	4607      	mov	r7, r0
 8018772:	bb10      	cbnz	r0, 80187ba <sqrt+0x7a>
 8018774:	f04f 0800 	mov.w	r8, #0
 8018778:	f04f 0900 	mov.w	r9, #0
 801877c:	4642      	mov	r2, r8
 801877e:	464b      	mov	r3, r9
 8018780:	4620      	mov	r0, r4
 8018782:	4629      	mov	r1, r5
 8018784:	f7e8 f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8018788:	b1b8      	cbz	r0, 80187ba <sqrt+0x7a>
 801878a:	2301      	movs	r3, #1
 801878c:	9300      	str	r3, [sp, #0]
 801878e:	4b18      	ldr	r3, [pc, #96]	; (80187f0 <sqrt+0xb0>)
 8018790:	9301      	str	r3, [sp, #4]
 8018792:	9708      	str	r7, [sp, #32]
 8018794:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018798:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801879c:	b9b6      	cbnz	r6, 80187cc <sqrt+0x8c>
 801879e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80187a2:	4668      	mov	r0, sp
 80187a4:	f001 fa6e 	bl	8019c84 <matherr>
 80187a8:	b1d0      	cbz	r0, 80187e0 <sqrt+0xa0>
 80187aa:	9b08      	ldr	r3, [sp, #32]
 80187ac:	b11b      	cbz	r3, 80187b6 <sqrt+0x76>
 80187ae:	f7ff f9a7 	bl	8017b00 <__errno>
 80187b2:	9b08      	ldr	r3, [sp, #32]
 80187b4:	6003      	str	r3, [r0, #0]
 80187b6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80187ba:	eeb0 0a48 	vmov.f32	s0, s16
 80187be:	eef0 0a68 	vmov.f32	s1, s17
 80187c2:	b00b      	add	sp, #44	; 0x2c
 80187c4:	ecbd 8b02 	vpop	{d8}
 80187c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187cc:	4642      	mov	r2, r8
 80187ce:	464b      	mov	r3, r9
 80187d0:	4640      	mov	r0, r8
 80187d2:	4649      	mov	r1, r9
 80187d4:	f7e8 f85a 	bl	800088c <__aeabi_ddiv>
 80187d8:	2e02      	cmp	r6, #2
 80187da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80187de:	d1e0      	bne.n	80187a2 <sqrt+0x62>
 80187e0:	f7ff f98e 	bl	8017b00 <__errno>
 80187e4:	2321      	movs	r3, #33	; 0x21
 80187e6:	6003      	str	r3, [r0, #0]
 80187e8:	e7df      	b.n	80187aa <sqrt+0x6a>
 80187ea:	bf00      	nop
 80187ec:	200001f8 	.word	0x200001f8
 80187f0:	0801ac8c 	.word	0x0801ac8c

080187f4 <powf>:
 80187f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80187f8:	ed2d 8b04 	vpush	{d8-d9}
 80187fc:	4ca7      	ldr	r4, [pc, #668]	; (8018a9c <powf+0x2a8>)
 80187fe:	b08a      	sub	sp, #40	; 0x28
 8018800:	eef0 8a40 	vmov.f32	s17, s0
 8018804:	eeb0 8a60 	vmov.f32	s16, s1
 8018808:	f000 ff68 	bl	80196dc <__ieee754_powf>
 801880c:	f994 5000 	ldrsb.w	r5, [r4]
 8018810:	1c6b      	adds	r3, r5, #1
 8018812:	eeb0 9a40 	vmov.f32	s18, s0
 8018816:	4626      	mov	r6, r4
 8018818:	d05f      	beq.n	80188da <powf+0xe6>
 801881a:	eeb4 8a48 	vcmp.f32	s16, s16
 801881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018822:	d65a      	bvs.n	80188da <powf+0xe6>
 8018824:	eef4 8a68 	vcmp.f32	s17, s17
 8018828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801882c:	d721      	bvc.n	8018872 <powf+0x7e>
 801882e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018836:	d150      	bne.n	80188da <powf+0xe6>
 8018838:	2301      	movs	r3, #1
 801883a:	9300      	str	r3, [sp, #0]
 801883c:	4b98      	ldr	r3, [pc, #608]	; (8018aa0 <powf+0x2ac>)
 801883e:	9301      	str	r3, [sp, #4]
 8018840:	ee18 0a90 	vmov	r0, s17
 8018844:	2300      	movs	r3, #0
 8018846:	9308      	str	r3, [sp, #32]
 8018848:	f7e7 fe9e 	bl	8000588 <__aeabi_f2d>
 801884c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018850:	ee18 0a10 	vmov	r0, s16
 8018854:	f7e7 fe98 	bl	8000588 <__aeabi_f2d>
 8018858:	4b92      	ldr	r3, [pc, #584]	; (8018aa4 <powf+0x2b0>)
 801885a:	2200      	movs	r2, #0
 801885c:	2d02      	cmp	r5, #2
 801885e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018862:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018866:	d032      	beq.n	80188ce <powf+0xda>
 8018868:	4668      	mov	r0, sp
 801886a:	f001 fa0b 	bl	8019c84 <matherr>
 801886e:	bb40      	cbnz	r0, 80188c2 <powf+0xce>
 8018870:	e065      	b.n	801893e <powf+0x14a>
 8018872:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018aa8 <powf+0x2b4>
 8018876:	eef4 8a69 	vcmp.f32	s17, s19
 801887a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801887e:	d163      	bne.n	8018948 <powf+0x154>
 8018880:	eeb4 8a69 	vcmp.f32	s16, s19
 8018884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018888:	d12e      	bne.n	80188e8 <powf+0xf4>
 801888a:	2301      	movs	r3, #1
 801888c:	9300      	str	r3, [sp, #0]
 801888e:	4b84      	ldr	r3, [pc, #528]	; (8018aa0 <powf+0x2ac>)
 8018890:	9301      	str	r3, [sp, #4]
 8018892:	ee18 0a90 	vmov	r0, s17
 8018896:	2300      	movs	r3, #0
 8018898:	9308      	str	r3, [sp, #32]
 801889a:	f7e7 fe75 	bl	8000588 <__aeabi_f2d>
 801889e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188a2:	ee18 0a10 	vmov	r0, s16
 80188a6:	f7e7 fe6f 	bl	8000588 <__aeabi_f2d>
 80188aa:	2200      	movs	r2, #0
 80188ac:	2300      	movs	r3, #0
 80188ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80188b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80188b6:	2d00      	cmp	r5, #0
 80188b8:	d0d6      	beq.n	8018868 <powf+0x74>
 80188ba:	4b7a      	ldr	r3, [pc, #488]	; (8018aa4 <powf+0x2b0>)
 80188bc:	2200      	movs	r2, #0
 80188be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80188c2:	9b08      	ldr	r3, [sp, #32]
 80188c4:	b11b      	cbz	r3, 80188ce <powf+0xda>
 80188c6:	f7ff f91b 	bl	8017b00 <__errno>
 80188ca:	9b08      	ldr	r3, [sp, #32]
 80188cc:	6003      	str	r3, [r0, #0]
 80188ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80188d2:	f7e8 f961 	bl	8000b98 <__aeabi_d2f>
 80188d6:	ee09 0a10 	vmov	s18, r0
 80188da:	eeb0 0a49 	vmov.f32	s0, s18
 80188de:	b00a      	add	sp, #40	; 0x28
 80188e0:	ecbd 8b04 	vpop	{d8-d9}
 80188e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80188e8:	eeb0 0a48 	vmov.f32	s0, s16
 80188ec:	f001 fad5 	bl	8019e9a <finitef>
 80188f0:	2800      	cmp	r0, #0
 80188f2:	d0f2      	beq.n	80188da <powf+0xe6>
 80188f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80188f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fc:	d5ed      	bpl.n	80188da <powf+0xe6>
 80188fe:	2301      	movs	r3, #1
 8018900:	9300      	str	r3, [sp, #0]
 8018902:	4b67      	ldr	r3, [pc, #412]	; (8018aa0 <powf+0x2ac>)
 8018904:	9301      	str	r3, [sp, #4]
 8018906:	ee18 0a90 	vmov	r0, s17
 801890a:	2300      	movs	r3, #0
 801890c:	9308      	str	r3, [sp, #32]
 801890e:	f7e7 fe3b 	bl	8000588 <__aeabi_f2d>
 8018912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018916:	ee18 0a10 	vmov	r0, s16
 801891a:	f7e7 fe35 	bl	8000588 <__aeabi_f2d>
 801891e:	f994 3000 	ldrsb.w	r3, [r4]
 8018922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018926:	b923      	cbnz	r3, 8018932 <powf+0x13e>
 8018928:	2200      	movs	r2, #0
 801892a:	2300      	movs	r3, #0
 801892c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018930:	e79a      	b.n	8018868 <powf+0x74>
 8018932:	495e      	ldr	r1, [pc, #376]	; (8018aac <powf+0x2b8>)
 8018934:	2000      	movs	r0, #0
 8018936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801893a:	2b02      	cmp	r3, #2
 801893c:	d194      	bne.n	8018868 <powf+0x74>
 801893e:	f7ff f8df 	bl	8017b00 <__errno>
 8018942:	2321      	movs	r3, #33	; 0x21
 8018944:	6003      	str	r3, [r0, #0]
 8018946:	e7bc      	b.n	80188c2 <powf+0xce>
 8018948:	f001 faa7 	bl	8019e9a <finitef>
 801894c:	4605      	mov	r5, r0
 801894e:	2800      	cmp	r0, #0
 8018950:	d173      	bne.n	8018a3a <powf+0x246>
 8018952:	eeb0 0a68 	vmov.f32	s0, s17
 8018956:	f001 faa0 	bl	8019e9a <finitef>
 801895a:	2800      	cmp	r0, #0
 801895c:	d06d      	beq.n	8018a3a <powf+0x246>
 801895e:	eeb0 0a48 	vmov.f32	s0, s16
 8018962:	f001 fa9a 	bl	8019e9a <finitef>
 8018966:	2800      	cmp	r0, #0
 8018968:	d067      	beq.n	8018a3a <powf+0x246>
 801896a:	ee18 0a90 	vmov	r0, s17
 801896e:	f7e7 fe0b 	bl	8000588 <__aeabi_f2d>
 8018972:	4680      	mov	r8, r0
 8018974:	ee18 0a10 	vmov	r0, s16
 8018978:	4689      	mov	r9, r1
 801897a:	f7e7 fe05 	bl	8000588 <__aeabi_f2d>
 801897e:	eeb4 9a49 	vcmp.f32	s18, s18
 8018982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018986:	f994 4000 	ldrsb.w	r4, [r4]
 801898a:	4b45      	ldr	r3, [pc, #276]	; (8018aa0 <powf+0x2ac>)
 801898c:	d713      	bvc.n	80189b6 <powf+0x1c2>
 801898e:	2201      	movs	r2, #1
 8018990:	e9cd 2300 	strd	r2, r3, [sp]
 8018994:	9508      	str	r5, [sp, #32]
 8018996:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801899a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801899e:	2c00      	cmp	r4, #0
 80189a0:	d0c2      	beq.n	8018928 <powf+0x134>
 80189a2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80189a6:	ee17 0a90 	vmov	r0, s15
 80189aa:	f7e7 fded 	bl	8000588 <__aeabi_f2d>
 80189ae:	2c02      	cmp	r4, #2
 80189b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80189b4:	e7c2      	b.n	801893c <powf+0x148>
 80189b6:	2203      	movs	r2, #3
 80189b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80189bc:	e9cd 2300 	strd	r2, r3, [sp]
 80189c0:	9508      	str	r5, [sp, #32]
 80189c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80189c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80189ca:	ee28 8a27 	vmul.f32	s16, s16, s15
 80189ce:	b9fc      	cbnz	r4, 8018a10 <powf+0x21c>
 80189d0:	4b37      	ldr	r3, [pc, #220]	; (8018ab0 <powf+0x2bc>)
 80189d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80189d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80189da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80189e2:	d553      	bpl.n	8018a8c <powf+0x298>
 80189e4:	eeb0 0a48 	vmov.f32	s0, s16
 80189e8:	f001 fa68 	bl	8019ebc <rintf>
 80189ec:	eeb4 0a48 	vcmp.f32	s0, s16
 80189f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189f4:	d004      	beq.n	8018a00 <powf+0x20c>
 80189f6:	4b2f      	ldr	r3, [pc, #188]	; (8018ab4 <powf+0x2c0>)
 80189f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80189fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a00:	f996 3000 	ldrsb.w	r3, [r6]
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	d141      	bne.n	8018a8c <powf+0x298>
 8018a08:	f7ff f87a 	bl	8017b00 <__errno>
 8018a0c:	2322      	movs	r3, #34	; 0x22
 8018a0e:	e799      	b.n	8018944 <powf+0x150>
 8018a10:	4b29      	ldr	r3, [pc, #164]	; (8018ab8 <powf+0x2c4>)
 8018a12:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018a16:	2200      	movs	r2, #0
 8018a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a20:	d5ee      	bpl.n	8018a00 <powf+0x20c>
 8018a22:	eeb0 0a48 	vmov.f32	s0, s16
 8018a26:	f001 fa49 	bl	8019ebc <rintf>
 8018a2a:	eeb4 0a48 	vcmp.f32	s0, s16
 8018a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a32:	d0e5      	beq.n	8018a00 <powf+0x20c>
 8018a34:	2200      	movs	r2, #0
 8018a36:	4b1d      	ldr	r3, [pc, #116]	; (8018aac <powf+0x2b8>)
 8018a38:	e7e0      	b.n	80189fc <powf+0x208>
 8018a3a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a42:	f47f af4a 	bne.w	80188da <powf+0xe6>
 8018a46:	eeb0 0a68 	vmov.f32	s0, s17
 8018a4a:	f001 fa26 	bl	8019e9a <finitef>
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	f43f af43 	beq.w	80188da <powf+0xe6>
 8018a54:	eeb0 0a48 	vmov.f32	s0, s16
 8018a58:	f001 fa1f 	bl	8019e9a <finitef>
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	f43f af3c 	beq.w	80188da <powf+0xe6>
 8018a62:	2304      	movs	r3, #4
 8018a64:	9300      	str	r3, [sp, #0]
 8018a66:	4b0e      	ldr	r3, [pc, #56]	; (8018aa0 <powf+0x2ac>)
 8018a68:	9301      	str	r3, [sp, #4]
 8018a6a:	ee18 0a90 	vmov	r0, s17
 8018a6e:	2300      	movs	r3, #0
 8018a70:	9308      	str	r3, [sp, #32]
 8018a72:	f7e7 fd89 	bl	8000588 <__aeabi_f2d>
 8018a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a7a:	ee18 0a10 	vmov	r0, s16
 8018a7e:	f7e7 fd83 	bl	8000588 <__aeabi_f2d>
 8018a82:	2200      	movs	r2, #0
 8018a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a88:	2300      	movs	r3, #0
 8018a8a:	e7b7      	b.n	80189fc <powf+0x208>
 8018a8c:	4668      	mov	r0, sp
 8018a8e:	f001 f8f9 	bl	8019c84 <matherr>
 8018a92:	2800      	cmp	r0, #0
 8018a94:	f47f af15 	bne.w	80188c2 <powf+0xce>
 8018a98:	e7b6      	b.n	8018a08 <powf+0x214>
 8018a9a:	bf00      	nop
 8018a9c:	200001f8 	.word	0x200001f8
 8018aa0:	0801ac91 	.word	0x0801ac91
 8018aa4:	3ff00000 	.word	0x3ff00000
 8018aa8:	00000000 	.word	0x00000000
 8018aac:	fff00000 	.word	0xfff00000
 8018ab0:	47efffff 	.word	0x47efffff
 8018ab4:	c7efffff 	.word	0xc7efffff
 8018ab8:	7ff00000 	.word	0x7ff00000

08018abc <sqrtf>:
 8018abc:	b510      	push	{r4, lr}
 8018abe:	ed2d 8b02 	vpush	{d8}
 8018ac2:	b08a      	sub	sp, #40	; 0x28
 8018ac4:	eeb0 8a40 	vmov.f32	s16, s0
 8018ac8:	f001 f8c8 	bl	8019c5c <__ieee754_sqrtf>
 8018acc:	4b21      	ldr	r3, [pc, #132]	; (8018b54 <sqrtf+0x98>)
 8018ace:	f993 4000 	ldrsb.w	r4, [r3]
 8018ad2:	1c63      	adds	r3, r4, #1
 8018ad4:	d02c      	beq.n	8018b30 <sqrtf+0x74>
 8018ad6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ade:	d627      	bvs.n	8018b30 <sqrtf+0x74>
 8018ae0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ae8:	d522      	bpl.n	8018b30 <sqrtf+0x74>
 8018aea:	2301      	movs	r3, #1
 8018aec:	9300      	str	r3, [sp, #0]
 8018aee:	4b1a      	ldr	r3, [pc, #104]	; (8018b58 <sqrtf+0x9c>)
 8018af0:	9301      	str	r3, [sp, #4]
 8018af2:	ee18 0a10 	vmov	r0, s16
 8018af6:	2300      	movs	r3, #0
 8018af8:	9308      	str	r3, [sp, #32]
 8018afa:	f7e7 fd45 	bl	8000588 <__aeabi_f2d>
 8018afe:	2200      	movs	r2, #0
 8018b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b08:	2300      	movs	r3, #0
 8018b0a:	b9ac      	cbnz	r4, 8018b38 <sqrtf+0x7c>
 8018b0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018b10:	4668      	mov	r0, sp
 8018b12:	f001 f8b7 	bl	8019c84 <matherr>
 8018b16:	b1b8      	cbz	r0, 8018b48 <sqrtf+0x8c>
 8018b18:	9b08      	ldr	r3, [sp, #32]
 8018b1a:	b11b      	cbz	r3, 8018b24 <sqrtf+0x68>
 8018b1c:	f7fe fff0 	bl	8017b00 <__errno>
 8018b20:	9b08      	ldr	r3, [sp, #32]
 8018b22:	6003      	str	r3, [r0, #0]
 8018b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b28:	f7e8 f836 	bl	8000b98 <__aeabi_d2f>
 8018b2c:	ee00 0a10 	vmov	s0, r0
 8018b30:	b00a      	add	sp, #40	; 0x28
 8018b32:	ecbd 8b02 	vpop	{d8}
 8018b36:	bd10      	pop	{r4, pc}
 8018b38:	4610      	mov	r0, r2
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	f7e7 fea6 	bl	800088c <__aeabi_ddiv>
 8018b40:	2c02      	cmp	r4, #2
 8018b42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b46:	d1e3      	bne.n	8018b10 <sqrtf+0x54>
 8018b48:	f7fe ffda 	bl	8017b00 <__errno>
 8018b4c:	2321      	movs	r3, #33	; 0x21
 8018b4e:	6003      	str	r3, [r0, #0]
 8018b50:	e7e2      	b.n	8018b18 <sqrtf+0x5c>
 8018b52:	bf00      	nop
 8018b54:	200001f8 	.word	0x200001f8
 8018b58:	0801ac96 	.word	0x0801ac96
 8018b5c:	00000000 	.word	0x00000000

08018b60 <__ieee754_pow>:
 8018b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b64:	b091      	sub	sp, #68	; 0x44
 8018b66:	ed8d 1b00 	vstr	d1, [sp]
 8018b6a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018b6e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018b72:	ea58 0302 	orrs.w	r3, r8, r2
 8018b76:	ec57 6b10 	vmov	r6, r7, d0
 8018b7a:	f000 84be 	beq.w	80194fa <__ieee754_pow+0x99a>
 8018b7e:	4b7a      	ldr	r3, [pc, #488]	; (8018d68 <__ieee754_pow+0x208>)
 8018b80:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018b84:	429c      	cmp	r4, r3
 8018b86:	463d      	mov	r5, r7
 8018b88:	ee10 aa10 	vmov	sl, s0
 8018b8c:	dc09      	bgt.n	8018ba2 <__ieee754_pow+0x42>
 8018b8e:	d103      	bne.n	8018b98 <__ieee754_pow+0x38>
 8018b90:	b93e      	cbnz	r6, 8018ba2 <__ieee754_pow+0x42>
 8018b92:	45a0      	cmp	r8, r4
 8018b94:	dc0d      	bgt.n	8018bb2 <__ieee754_pow+0x52>
 8018b96:	e001      	b.n	8018b9c <__ieee754_pow+0x3c>
 8018b98:	4598      	cmp	r8, r3
 8018b9a:	dc02      	bgt.n	8018ba2 <__ieee754_pow+0x42>
 8018b9c:	4598      	cmp	r8, r3
 8018b9e:	d10e      	bne.n	8018bbe <__ieee754_pow+0x5e>
 8018ba0:	b16a      	cbz	r2, 8018bbe <__ieee754_pow+0x5e>
 8018ba2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018ba6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018baa:	ea54 030a 	orrs.w	r3, r4, sl
 8018bae:	f000 84a4 	beq.w	80194fa <__ieee754_pow+0x99a>
 8018bb2:	486e      	ldr	r0, [pc, #440]	; (8018d6c <__ieee754_pow+0x20c>)
 8018bb4:	b011      	add	sp, #68	; 0x44
 8018bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bba:	f001 b865 	b.w	8019c88 <nan>
 8018bbe:	2d00      	cmp	r5, #0
 8018bc0:	da53      	bge.n	8018c6a <__ieee754_pow+0x10a>
 8018bc2:	4b6b      	ldr	r3, [pc, #428]	; (8018d70 <__ieee754_pow+0x210>)
 8018bc4:	4598      	cmp	r8, r3
 8018bc6:	dc4d      	bgt.n	8018c64 <__ieee754_pow+0x104>
 8018bc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018bcc:	4598      	cmp	r8, r3
 8018bce:	dd4c      	ble.n	8018c6a <__ieee754_pow+0x10a>
 8018bd0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018bd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018bd8:	2b14      	cmp	r3, #20
 8018bda:	dd26      	ble.n	8018c2a <__ieee754_pow+0xca>
 8018bdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018be0:	fa22 f103 	lsr.w	r1, r2, r3
 8018be4:	fa01 f303 	lsl.w	r3, r1, r3
 8018be8:	4293      	cmp	r3, r2
 8018bea:	d13e      	bne.n	8018c6a <__ieee754_pow+0x10a>
 8018bec:	f001 0101 	and.w	r1, r1, #1
 8018bf0:	f1c1 0b02 	rsb	fp, r1, #2
 8018bf4:	2a00      	cmp	r2, #0
 8018bf6:	d15b      	bne.n	8018cb0 <__ieee754_pow+0x150>
 8018bf8:	4b5b      	ldr	r3, [pc, #364]	; (8018d68 <__ieee754_pow+0x208>)
 8018bfa:	4598      	cmp	r8, r3
 8018bfc:	d124      	bne.n	8018c48 <__ieee754_pow+0xe8>
 8018bfe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018c02:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018c06:	ea53 030a 	orrs.w	r3, r3, sl
 8018c0a:	f000 8476 	beq.w	80194fa <__ieee754_pow+0x99a>
 8018c0e:	4b59      	ldr	r3, [pc, #356]	; (8018d74 <__ieee754_pow+0x214>)
 8018c10:	429c      	cmp	r4, r3
 8018c12:	dd2d      	ble.n	8018c70 <__ieee754_pow+0x110>
 8018c14:	f1b9 0f00 	cmp.w	r9, #0
 8018c18:	f280 8473 	bge.w	8019502 <__ieee754_pow+0x9a2>
 8018c1c:	2000      	movs	r0, #0
 8018c1e:	2100      	movs	r1, #0
 8018c20:	ec41 0b10 	vmov	d0, r0, r1
 8018c24:	b011      	add	sp, #68	; 0x44
 8018c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c2a:	2a00      	cmp	r2, #0
 8018c2c:	d13e      	bne.n	8018cac <__ieee754_pow+0x14c>
 8018c2e:	f1c3 0314 	rsb	r3, r3, #20
 8018c32:	fa48 f103 	asr.w	r1, r8, r3
 8018c36:	fa01 f303 	lsl.w	r3, r1, r3
 8018c3a:	4543      	cmp	r3, r8
 8018c3c:	f040 8469 	bne.w	8019512 <__ieee754_pow+0x9b2>
 8018c40:	f001 0101 	and.w	r1, r1, #1
 8018c44:	f1c1 0b02 	rsb	fp, r1, #2
 8018c48:	4b4b      	ldr	r3, [pc, #300]	; (8018d78 <__ieee754_pow+0x218>)
 8018c4a:	4598      	cmp	r8, r3
 8018c4c:	d118      	bne.n	8018c80 <__ieee754_pow+0x120>
 8018c4e:	f1b9 0f00 	cmp.w	r9, #0
 8018c52:	f280 845a 	bge.w	801950a <__ieee754_pow+0x9aa>
 8018c56:	4948      	ldr	r1, [pc, #288]	; (8018d78 <__ieee754_pow+0x218>)
 8018c58:	4632      	mov	r2, r6
 8018c5a:	463b      	mov	r3, r7
 8018c5c:	2000      	movs	r0, #0
 8018c5e:	f7e7 fe15 	bl	800088c <__aeabi_ddiv>
 8018c62:	e7dd      	b.n	8018c20 <__ieee754_pow+0xc0>
 8018c64:	f04f 0b02 	mov.w	fp, #2
 8018c68:	e7c4      	b.n	8018bf4 <__ieee754_pow+0x94>
 8018c6a:	f04f 0b00 	mov.w	fp, #0
 8018c6e:	e7c1      	b.n	8018bf4 <__ieee754_pow+0x94>
 8018c70:	f1b9 0f00 	cmp.w	r9, #0
 8018c74:	dad2      	bge.n	8018c1c <__ieee754_pow+0xbc>
 8018c76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018c7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018c7e:	e7cf      	b.n	8018c20 <__ieee754_pow+0xc0>
 8018c80:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018c84:	d106      	bne.n	8018c94 <__ieee754_pow+0x134>
 8018c86:	4632      	mov	r2, r6
 8018c88:	463b      	mov	r3, r7
 8018c8a:	4610      	mov	r0, r2
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	f7e7 fcd3 	bl	8000638 <__aeabi_dmul>
 8018c92:	e7c5      	b.n	8018c20 <__ieee754_pow+0xc0>
 8018c94:	4b39      	ldr	r3, [pc, #228]	; (8018d7c <__ieee754_pow+0x21c>)
 8018c96:	4599      	cmp	r9, r3
 8018c98:	d10a      	bne.n	8018cb0 <__ieee754_pow+0x150>
 8018c9a:	2d00      	cmp	r5, #0
 8018c9c:	db08      	blt.n	8018cb0 <__ieee754_pow+0x150>
 8018c9e:	ec47 6b10 	vmov	d0, r6, r7
 8018ca2:	b011      	add	sp, #68	; 0x44
 8018ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	f000 bc68 	b.w	801957c <__ieee754_sqrt>
 8018cac:	f04f 0b00 	mov.w	fp, #0
 8018cb0:	ec47 6b10 	vmov	d0, r6, r7
 8018cb4:	f000 ffd5 	bl	8019c62 <fabs>
 8018cb8:	ec51 0b10 	vmov	r0, r1, d0
 8018cbc:	f1ba 0f00 	cmp.w	sl, #0
 8018cc0:	d127      	bne.n	8018d12 <__ieee754_pow+0x1b2>
 8018cc2:	b124      	cbz	r4, 8018cce <__ieee754_pow+0x16e>
 8018cc4:	4b2c      	ldr	r3, [pc, #176]	; (8018d78 <__ieee754_pow+0x218>)
 8018cc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d121      	bne.n	8018d12 <__ieee754_pow+0x1b2>
 8018cce:	f1b9 0f00 	cmp.w	r9, #0
 8018cd2:	da05      	bge.n	8018ce0 <__ieee754_pow+0x180>
 8018cd4:	4602      	mov	r2, r0
 8018cd6:	460b      	mov	r3, r1
 8018cd8:	2000      	movs	r0, #0
 8018cda:	4927      	ldr	r1, [pc, #156]	; (8018d78 <__ieee754_pow+0x218>)
 8018cdc:	f7e7 fdd6 	bl	800088c <__aeabi_ddiv>
 8018ce0:	2d00      	cmp	r5, #0
 8018ce2:	da9d      	bge.n	8018c20 <__ieee754_pow+0xc0>
 8018ce4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018ce8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018cec:	ea54 030b 	orrs.w	r3, r4, fp
 8018cf0:	d108      	bne.n	8018d04 <__ieee754_pow+0x1a4>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	4610      	mov	r0, r2
 8018cf8:	4619      	mov	r1, r3
 8018cfa:	f7e7 fae5 	bl	80002c8 <__aeabi_dsub>
 8018cfe:	4602      	mov	r2, r0
 8018d00:	460b      	mov	r3, r1
 8018d02:	e7ac      	b.n	8018c5e <__ieee754_pow+0xfe>
 8018d04:	f1bb 0f01 	cmp.w	fp, #1
 8018d08:	d18a      	bne.n	8018c20 <__ieee754_pow+0xc0>
 8018d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d0e:	4619      	mov	r1, r3
 8018d10:	e786      	b.n	8018c20 <__ieee754_pow+0xc0>
 8018d12:	0fed      	lsrs	r5, r5, #31
 8018d14:	1e6b      	subs	r3, r5, #1
 8018d16:	930d      	str	r3, [sp, #52]	; 0x34
 8018d18:	ea5b 0303 	orrs.w	r3, fp, r3
 8018d1c:	d102      	bne.n	8018d24 <__ieee754_pow+0x1c4>
 8018d1e:	4632      	mov	r2, r6
 8018d20:	463b      	mov	r3, r7
 8018d22:	e7e8      	b.n	8018cf6 <__ieee754_pow+0x196>
 8018d24:	4b16      	ldr	r3, [pc, #88]	; (8018d80 <__ieee754_pow+0x220>)
 8018d26:	4598      	cmp	r8, r3
 8018d28:	f340 80fe 	ble.w	8018f28 <__ieee754_pow+0x3c8>
 8018d2c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018d30:	4598      	cmp	r8, r3
 8018d32:	dd0a      	ble.n	8018d4a <__ieee754_pow+0x1ea>
 8018d34:	4b0f      	ldr	r3, [pc, #60]	; (8018d74 <__ieee754_pow+0x214>)
 8018d36:	429c      	cmp	r4, r3
 8018d38:	dc0d      	bgt.n	8018d56 <__ieee754_pow+0x1f6>
 8018d3a:	f1b9 0f00 	cmp.w	r9, #0
 8018d3e:	f6bf af6d 	bge.w	8018c1c <__ieee754_pow+0xbc>
 8018d42:	a307      	add	r3, pc, #28	; (adr r3, 8018d60 <__ieee754_pow+0x200>)
 8018d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d48:	e79f      	b.n	8018c8a <__ieee754_pow+0x12a>
 8018d4a:	4b0e      	ldr	r3, [pc, #56]	; (8018d84 <__ieee754_pow+0x224>)
 8018d4c:	429c      	cmp	r4, r3
 8018d4e:	ddf4      	ble.n	8018d3a <__ieee754_pow+0x1da>
 8018d50:	4b09      	ldr	r3, [pc, #36]	; (8018d78 <__ieee754_pow+0x218>)
 8018d52:	429c      	cmp	r4, r3
 8018d54:	dd18      	ble.n	8018d88 <__ieee754_pow+0x228>
 8018d56:	f1b9 0f00 	cmp.w	r9, #0
 8018d5a:	dcf2      	bgt.n	8018d42 <__ieee754_pow+0x1e2>
 8018d5c:	e75e      	b.n	8018c1c <__ieee754_pow+0xbc>
 8018d5e:	bf00      	nop
 8018d60:	8800759c 	.word	0x8800759c
 8018d64:	7e37e43c 	.word	0x7e37e43c
 8018d68:	7ff00000 	.word	0x7ff00000
 8018d6c:	0801abf9 	.word	0x0801abf9
 8018d70:	433fffff 	.word	0x433fffff
 8018d74:	3fefffff 	.word	0x3fefffff
 8018d78:	3ff00000 	.word	0x3ff00000
 8018d7c:	3fe00000 	.word	0x3fe00000
 8018d80:	41e00000 	.word	0x41e00000
 8018d84:	3feffffe 	.word	0x3feffffe
 8018d88:	2200      	movs	r2, #0
 8018d8a:	4b63      	ldr	r3, [pc, #396]	; (8018f18 <__ieee754_pow+0x3b8>)
 8018d8c:	f7e7 fa9c 	bl	80002c8 <__aeabi_dsub>
 8018d90:	a355      	add	r3, pc, #340	; (adr r3, 8018ee8 <__ieee754_pow+0x388>)
 8018d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d96:	4604      	mov	r4, r0
 8018d98:	460d      	mov	r5, r1
 8018d9a:	f7e7 fc4d 	bl	8000638 <__aeabi_dmul>
 8018d9e:	a354      	add	r3, pc, #336	; (adr r3, 8018ef0 <__ieee754_pow+0x390>)
 8018da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da4:	4606      	mov	r6, r0
 8018da6:	460f      	mov	r7, r1
 8018da8:	4620      	mov	r0, r4
 8018daa:	4629      	mov	r1, r5
 8018dac:	f7e7 fc44 	bl	8000638 <__aeabi_dmul>
 8018db0:	2200      	movs	r2, #0
 8018db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018db6:	4b59      	ldr	r3, [pc, #356]	; (8018f1c <__ieee754_pow+0x3bc>)
 8018db8:	4620      	mov	r0, r4
 8018dba:	4629      	mov	r1, r5
 8018dbc:	f7e7 fc3c 	bl	8000638 <__aeabi_dmul>
 8018dc0:	4602      	mov	r2, r0
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	a14c      	add	r1, pc, #304	; (adr r1, 8018ef8 <__ieee754_pow+0x398>)
 8018dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018dca:	f7e7 fa7d 	bl	80002c8 <__aeabi_dsub>
 8018dce:	4622      	mov	r2, r4
 8018dd0:	462b      	mov	r3, r5
 8018dd2:	f7e7 fc31 	bl	8000638 <__aeabi_dmul>
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	460b      	mov	r3, r1
 8018dda:	2000      	movs	r0, #0
 8018ddc:	4950      	ldr	r1, [pc, #320]	; (8018f20 <__ieee754_pow+0x3c0>)
 8018dde:	f7e7 fa73 	bl	80002c8 <__aeabi_dsub>
 8018de2:	4622      	mov	r2, r4
 8018de4:	462b      	mov	r3, r5
 8018de6:	4680      	mov	r8, r0
 8018de8:	4689      	mov	r9, r1
 8018dea:	4620      	mov	r0, r4
 8018dec:	4629      	mov	r1, r5
 8018dee:	f7e7 fc23 	bl	8000638 <__aeabi_dmul>
 8018df2:	4602      	mov	r2, r0
 8018df4:	460b      	mov	r3, r1
 8018df6:	4640      	mov	r0, r8
 8018df8:	4649      	mov	r1, r9
 8018dfa:	f7e7 fc1d 	bl	8000638 <__aeabi_dmul>
 8018dfe:	a340      	add	r3, pc, #256	; (adr r3, 8018f00 <__ieee754_pow+0x3a0>)
 8018e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e04:	f7e7 fc18 	bl	8000638 <__aeabi_dmul>
 8018e08:	4602      	mov	r2, r0
 8018e0a:	460b      	mov	r3, r1
 8018e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e10:	f7e7 fa5a 	bl	80002c8 <__aeabi_dsub>
 8018e14:	4602      	mov	r2, r0
 8018e16:	460b      	mov	r3, r1
 8018e18:	4604      	mov	r4, r0
 8018e1a:	460d      	mov	r5, r1
 8018e1c:	4630      	mov	r0, r6
 8018e1e:	4639      	mov	r1, r7
 8018e20:	f7e7 fa54 	bl	80002cc <__adddf3>
 8018e24:	2000      	movs	r0, #0
 8018e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e2a:	4632      	mov	r2, r6
 8018e2c:	463b      	mov	r3, r7
 8018e2e:	f7e7 fa4b 	bl	80002c8 <__aeabi_dsub>
 8018e32:	4602      	mov	r2, r0
 8018e34:	460b      	mov	r3, r1
 8018e36:	4620      	mov	r0, r4
 8018e38:	4629      	mov	r1, r5
 8018e3a:	f7e7 fa45 	bl	80002c8 <__aeabi_dsub>
 8018e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e40:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018e44:	4313      	orrs	r3, r2
 8018e46:	4606      	mov	r6, r0
 8018e48:	460f      	mov	r7, r1
 8018e4a:	f040 81eb 	bne.w	8019224 <__ieee754_pow+0x6c4>
 8018e4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018f08 <__ieee754_pow+0x3a8>
 8018e52:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018e56:	2400      	movs	r4, #0
 8018e58:	4622      	mov	r2, r4
 8018e5a:	462b      	mov	r3, r5
 8018e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e64:	f7e7 fa30 	bl	80002c8 <__aeabi_dsub>
 8018e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e6c:	f7e7 fbe4 	bl	8000638 <__aeabi_dmul>
 8018e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e74:	4680      	mov	r8, r0
 8018e76:	4689      	mov	r9, r1
 8018e78:	4630      	mov	r0, r6
 8018e7a:	4639      	mov	r1, r7
 8018e7c:	f7e7 fbdc 	bl	8000638 <__aeabi_dmul>
 8018e80:	4602      	mov	r2, r0
 8018e82:	460b      	mov	r3, r1
 8018e84:	4640      	mov	r0, r8
 8018e86:	4649      	mov	r1, r9
 8018e88:	f7e7 fa20 	bl	80002cc <__adddf3>
 8018e8c:	4622      	mov	r2, r4
 8018e8e:	462b      	mov	r3, r5
 8018e90:	4680      	mov	r8, r0
 8018e92:	4689      	mov	r9, r1
 8018e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e98:	f7e7 fbce 	bl	8000638 <__aeabi_dmul>
 8018e9c:	460b      	mov	r3, r1
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	460d      	mov	r5, r1
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	4649      	mov	r1, r9
 8018ea6:	4640      	mov	r0, r8
 8018ea8:	e9cd 4500 	strd	r4, r5, [sp]
 8018eac:	f7e7 fa0e 	bl	80002cc <__adddf3>
 8018eb0:	4b1c      	ldr	r3, [pc, #112]	; (8018f24 <__ieee754_pow+0x3c4>)
 8018eb2:	4299      	cmp	r1, r3
 8018eb4:	4606      	mov	r6, r0
 8018eb6:	460f      	mov	r7, r1
 8018eb8:	468b      	mov	fp, r1
 8018eba:	f340 82f7 	ble.w	80194ac <__ieee754_pow+0x94c>
 8018ebe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018ec2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018ec6:	4303      	orrs	r3, r0
 8018ec8:	f000 81ea 	beq.w	80192a0 <__ieee754_pow+0x740>
 8018ecc:	a310      	add	r3, pc, #64	; (adr r3, 8018f10 <__ieee754_pow+0x3b0>)
 8018ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ed6:	f7e7 fbaf 	bl	8000638 <__aeabi_dmul>
 8018eda:	a30d      	add	r3, pc, #52	; (adr r3, 8018f10 <__ieee754_pow+0x3b0>)
 8018edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee0:	e6d5      	b.n	8018c8e <__ieee754_pow+0x12e>
 8018ee2:	bf00      	nop
 8018ee4:	f3af 8000 	nop.w
 8018ee8:	60000000 	.word	0x60000000
 8018eec:	3ff71547 	.word	0x3ff71547
 8018ef0:	f85ddf44 	.word	0xf85ddf44
 8018ef4:	3e54ae0b 	.word	0x3e54ae0b
 8018ef8:	55555555 	.word	0x55555555
 8018efc:	3fd55555 	.word	0x3fd55555
 8018f00:	652b82fe 	.word	0x652b82fe
 8018f04:	3ff71547 	.word	0x3ff71547
 8018f08:	00000000 	.word	0x00000000
 8018f0c:	bff00000 	.word	0xbff00000
 8018f10:	8800759c 	.word	0x8800759c
 8018f14:	7e37e43c 	.word	0x7e37e43c
 8018f18:	3ff00000 	.word	0x3ff00000
 8018f1c:	3fd00000 	.word	0x3fd00000
 8018f20:	3fe00000 	.word	0x3fe00000
 8018f24:	408fffff 	.word	0x408fffff
 8018f28:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018f2c:	f04f 0200 	mov.w	r2, #0
 8018f30:	da05      	bge.n	8018f3e <__ieee754_pow+0x3de>
 8018f32:	4bd3      	ldr	r3, [pc, #844]	; (8019280 <__ieee754_pow+0x720>)
 8018f34:	f7e7 fb80 	bl	8000638 <__aeabi_dmul>
 8018f38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018f3c:	460c      	mov	r4, r1
 8018f3e:	1523      	asrs	r3, r4, #20
 8018f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018f44:	4413      	add	r3, r2
 8018f46:	9309      	str	r3, [sp, #36]	; 0x24
 8018f48:	4bce      	ldr	r3, [pc, #824]	; (8019284 <__ieee754_pow+0x724>)
 8018f4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018f4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018f52:	429c      	cmp	r4, r3
 8018f54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018f58:	dd08      	ble.n	8018f6c <__ieee754_pow+0x40c>
 8018f5a:	4bcb      	ldr	r3, [pc, #812]	; (8019288 <__ieee754_pow+0x728>)
 8018f5c:	429c      	cmp	r4, r3
 8018f5e:	f340 815e 	ble.w	801921e <__ieee754_pow+0x6be>
 8018f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f64:	3301      	adds	r3, #1
 8018f66:	9309      	str	r3, [sp, #36]	; 0x24
 8018f68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018f6c:	f04f 0a00 	mov.w	sl, #0
 8018f70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018f74:	930c      	str	r3, [sp, #48]	; 0x30
 8018f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f78:	4bc4      	ldr	r3, [pc, #784]	; (801928c <__ieee754_pow+0x72c>)
 8018f7a:	4413      	add	r3, r2
 8018f7c:	ed93 7b00 	vldr	d7, [r3]
 8018f80:	4629      	mov	r1, r5
 8018f82:	ec53 2b17 	vmov	r2, r3, d7
 8018f86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018f8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018f8e:	f7e7 f99b 	bl	80002c8 <__aeabi_dsub>
 8018f92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f96:	4606      	mov	r6, r0
 8018f98:	460f      	mov	r7, r1
 8018f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f9e:	f7e7 f995 	bl	80002cc <__adddf3>
 8018fa2:	4602      	mov	r2, r0
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	2000      	movs	r0, #0
 8018fa8:	49b9      	ldr	r1, [pc, #740]	; (8019290 <__ieee754_pow+0x730>)
 8018faa:	f7e7 fc6f 	bl	800088c <__aeabi_ddiv>
 8018fae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	460b      	mov	r3, r1
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	4639      	mov	r1, r7
 8018fba:	f7e7 fb3d 	bl	8000638 <__aeabi_dmul>
 8018fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018fc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018fca:	2300      	movs	r3, #0
 8018fcc:	9302      	str	r3, [sp, #8]
 8018fce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018fd2:	106d      	asrs	r5, r5, #1
 8018fd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018fd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018fdc:	2200      	movs	r2, #0
 8018fde:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8018fe2:	4640      	mov	r0, r8
 8018fe4:	4649      	mov	r1, r9
 8018fe6:	4614      	mov	r4, r2
 8018fe8:	461d      	mov	r5, r3
 8018fea:	f7e7 fb25 	bl	8000638 <__aeabi_dmul>
 8018fee:	4602      	mov	r2, r0
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	4630      	mov	r0, r6
 8018ff4:	4639      	mov	r1, r7
 8018ff6:	f7e7 f967 	bl	80002c8 <__aeabi_dsub>
 8018ffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ffe:	4606      	mov	r6, r0
 8019000:	460f      	mov	r7, r1
 8019002:	4620      	mov	r0, r4
 8019004:	4629      	mov	r1, r5
 8019006:	f7e7 f95f 	bl	80002c8 <__aeabi_dsub>
 801900a:	4602      	mov	r2, r0
 801900c:	460b      	mov	r3, r1
 801900e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019012:	f7e7 f959 	bl	80002c8 <__aeabi_dsub>
 8019016:	4642      	mov	r2, r8
 8019018:	464b      	mov	r3, r9
 801901a:	f7e7 fb0d 	bl	8000638 <__aeabi_dmul>
 801901e:	4602      	mov	r2, r0
 8019020:	460b      	mov	r3, r1
 8019022:	4630      	mov	r0, r6
 8019024:	4639      	mov	r1, r7
 8019026:	f7e7 f94f 	bl	80002c8 <__aeabi_dsub>
 801902a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801902e:	f7e7 fb03 	bl	8000638 <__aeabi_dmul>
 8019032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801903a:	4610      	mov	r0, r2
 801903c:	4619      	mov	r1, r3
 801903e:	f7e7 fafb 	bl	8000638 <__aeabi_dmul>
 8019042:	a37b      	add	r3, pc, #492	; (adr r3, 8019230 <__ieee754_pow+0x6d0>)
 8019044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019048:	4604      	mov	r4, r0
 801904a:	460d      	mov	r5, r1
 801904c:	f7e7 faf4 	bl	8000638 <__aeabi_dmul>
 8019050:	a379      	add	r3, pc, #484	; (adr r3, 8019238 <__ieee754_pow+0x6d8>)
 8019052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019056:	f7e7 f939 	bl	80002cc <__adddf3>
 801905a:	4622      	mov	r2, r4
 801905c:	462b      	mov	r3, r5
 801905e:	f7e7 faeb 	bl	8000638 <__aeabi_dmul>
 8019062:	a377      	add	r3, pc, #476	; (adr r3, 8019240 <__ieee754_pow+0x6e0>)
 8019064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019068:	f7e7 f930 	bl	80002cc <__adddf3>
 801906c:	4622      	mov	r2, r4
 801906e:	462b      	mov	r3, r5
 8019070:	f7e7 fae2 	bl	8000638 <__aeabi_dmul>
 8019074:	a374      	add	r3, pc, #464	; (adr r3, 8019248 <__ieee754_pow+0x6e8>)
 8019076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801907a:	f7e7 f927 	bl	80002cc <__adddf3>
 801907e:	4622      	mov	r2, r4
 8019080:	462b      	mov	r3, r5
 8019082:	f7e7 fad9 	bl	8000638 <__aeabi_dmul>
 8019086:	a372      	add	r3, pc, #456	; (adr r3, 8019250 <__ieee754_pow+0x6f0>)
 8019088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801908c:	f7e7 f91e 	bl	80002cc <__adddf3>
 8019090:	4622      	mov	r2, r4
 8019092:	462b      	mov	r3, r5
 8019094:	f7e7 fad0 	bl	8000638 <__aeabi_dmul>
 8019098:	a36f      	add	r3, pc, #444	; (adr r3, 8019258 <__ieee754_pow+0x6f8>)
 801909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909e:	f7e7 f915 	bl	80002cc <__adddf3>
 80190a2:	4622      	mov	r2, r4
 80190a4:	4606      	mov	r6, r0
 80190a6:	460f      	mov	r7, r1
 80190a8:	462b      	mov	r3, r5
 80190aa:	4620      	mov	r0, r4
 80190ac:	4629      	mov	r1, r5
 80190ae:	f7e7 fac3 	bl	8000638 <__aeabi_dmul>
 80190b2:	4602      	mov	r2, r0
 80190b4:	460b      	mov	r3, r1
 80190b6:	4630      	mov	r0, r6
 80190b8:	4639      	mov	r1, r7
 80190ba:	f7e7 fabd 	bl	8000638 <__aeabi_dmul>
 80190be:	4642      	mov	r2, r8
 80190c0:	4604      	mov	r4, r0
 80190c2:	460d      	mov	r5, r1
 80190c4:	464b      	mov	r3, r9
 80190c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80190ca:	f7e7 f8ff 	bl	80002cc <__adddf3>
 80190ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190d2:	f7e7 fab1 	bl	8000638 <__aeabi_dmul>
 80190d6:	4622      	mov	r2, r4
 80190d8:	462b      	mov	r3, r5
 80190da:	f7e7 f8f7 	bl	80002cc <__adddf3>
 80190de:	4642      	mov	r2, r8
 80190e0:	4606      	mov	r6, r0
 80190e2:	460f      	mov	r7, r1
 80190e4:	464b      	mov	r3, r9
 80190e6:	4640      	mov	r0, r8
 80190e8:	4649      	mov	r1, r9
 80190ea:	f7e7 faa5 	bl	8000638 <__aeabi_dmul>
 80190ee:	2200      	movs	r2, #0
 80190f0:	4b68      	ldr	r3, [pc, #416]	; (8019294 <__ieee754_pow+0x734>)
 80190f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80190f6:	f7e7 f8e9 	bl	80002cc <__adddf3>
 80190fa:	4632      	mov	r2, r6
 80190fc:	463b      	mov	r3, r7
 80190fe:	f7e7 f8e5 	bl	80002cc <__adddf3>
 8019102:	9802      	ldr	r0, [sp, #8]
 8019104:	460d      	mov	r5, r1
 8019106:	4604      	mov	r4, r0
 8019108:	4602      	mov	r2, r0
 801910a:	460b      	mov	r3, r1
 801910c:	4640      	mov	r0, r8
 801910e:	4649      	mov	r1, r9
 8019110:	f7e7 fa92 	bl	8000638 <__aeabi_dmul>
 8019114:	2200      	movs	r2, #0
 8019116:	4680      	mov	r8, r0
 8019118:	4689      	mov	r9, r1
 801911a:	4b5e      	ldr	r3, [pc, #376]	; (8019294 <__ieee754_pow+0x734>)
 801911c:	4620      	mov	r0, r4
 801911e:	4629      	mov	r1, r5
 8019120:	f7e7 f8d2 	bl	80002c8 <__aeabi_dsub>
 8019124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019128:	f7e7 f8ce 	bl	80002c8 <__aeabi_dsub>
 801912c:	4602      	mov	r2, r0
 801912e:	460b      	mov	r3, r1
 8019130:	4630      	mov	r0, r6
 8019132:	4639      	mov	r1, r7
 8019134:	f7e7 f8c8 	bl	80002c8 <__aeabi_dsub>
 8019138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801913c:	f7e7 fa7c 	bl	8000638 <__aeabi_dmul>
 8019140:	4622      	mov	r2, r4
 8019142:	4606      	mov	r6, r0
 8019144:	460f      	mov	r7, r1
 8019146:	462b      	mov	r3, r5
 8019148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801914c:	f7e7 fa74 	bl	8000638 <__aeabi_dmul>
 8019150:	4602      	mov	r2, r0
 8019152:	460b      	mov	r3, r1
 8019154:	4630      	mov	r0, r6
 8019156:	4639      	mov	r1, r7
 8019158:	f7e7 f8b8 	bl	80002cc <__adddf3>
 801915c:	4606      	mov	r6, r0
 801915e:	460f      	mov	r7, r1
 8019160:	4602      	mov	r2, r0
 8019162:	460b      	mov	r3, r1
 8019164:	4640      	mov	r0, r8
 8019166:	4649      	mov	r1, r9
 8019168:	f7e7 f8b0 	bl	80002cc <__adddf3>
 801916c:	9802      	ldr	r0, [sp, #8]
 801916e:	a33c      	add	r3, pc, #240	; (adr r3, 8019260 <__ieee754_pow+0x700>)
 8019170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019174:	4604      	mov	r4, r0
 8019176:	460d      	mov	r5, r1
 8019178:	f7e7 fa5e 	bl	8000638 <__aeabi_dmul>
 801917c:	4642      	mov	r2, r8
 801917e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019182:	464b      	mov	r3, r9
 8019184:	4620      	mov	r0, r4
 8019186:	4629      	mov	r1, r5
 8019188:	f7e7 f89e 	bl	80002c8 <__aeabi_dsub>
 801918c:	4602      	mov	r2, r0
 801918e:	460b      	mov	r3, r1
 8019190:	4630      	mov	r0, r6
 8019192:	4639      	mov	r1, r7
 8019194:	f7e7 f898 	bl	80002c8 <__aeabi_dsub>
 8019198:	a333      	add	r3, pc, #204	; (adr r3, 8019268 <__ieee754_pow+0x708>)
 801919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919e:	f7e7 fa4b 	bl	8000638 <__aeabi_dmul>
 80191a2:	a333      	add	r3, pc, #204	; (adr r3, 8019270 <__ieee754_pow+0x710>)
 80191a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a8:	4606      	mov	r6, r0
 80191aa:	460f      	mov	r7, r1
 80191ac:	4620      	mov	r0, r4
 80191ae:	4629      	mov	r1, r5
 80191b0:	f7e7 fa42 	bl	8000638 <__aeabi_dmul>
 80191b4:	4602      	mov	r2, r0
 80191b6:	460b      	mov	r3, r1
 80191b8:	4630      	mov	r0, r6
 80191ba:	4639      	mov	r1, r7
 80191bc:	f7e7 f886 	bl	80002cc <__adddf3>
 80191c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191c2:	4b35      	ldr	r3, [pc, #212]	; (8019298 <__ieee754_pow+0x738>)
 80191c4:	4413      	add	r3, r2
 80191c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ca:	f7e7 f87f 	bl	80002cc <__adddf3>
 80191ce:	4604      	mov	r4, r0
 80191d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191d2:	460d      	mov	r5, r1
 80191d4:	f7e7 f9c6 	bl	8000564 <__aeabi_i2d>
 80191d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191da:	4b30      	ldr	r3, [pc, #192]	; (801929c <__ieee754_pow+0x73c>)
 80191dc:	4413      	add	r3, r2
 80191de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80191e2:	4606      	mov	r6, r0
 80191e4:	460f      	mov	r7, r1
 80191e6:	4622      	mov	r2, r4
 80191e8:	462b      	mov	r3, r5
 80191ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80191ee:	f7e7 f86d 	bl	80002cc <__adddf3>
 80191f2:	4642      	mov	r2, r8
 80191f4:	464b      	mov	r3, r9
 80191f6:	f7e7 f869 	bl	80002cc <__adddf3>
 80191fa:	4632      	mov	r2, r6
 80191fc:	463b      	mov	r3, r7
 80191fe:	f7e7 f865 	bl	80002cc <__adddf3>
 8019202:	9802      	ldr	r0, [sp, #8]
 8019204:	4632      	mov	r2, r6
 8019206:	463b      	mov	r3, r7
 8019208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801920c:	f7e7 f85c 	bl	80002c8 <__aeabi_dsub>
 8019210:	4642      	mov	r2, r8
 8019212:	464b      	mov	r3, r9
 8019214:	f7e7 f858 	bl	80002c8 <__aeabi_dsub>
 8019218:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801921c:	e607      	b.n	8018e2e <__ieee754_pow+0x2ce>
 801921e:	f04f 0a01 	mov.w	sl, #1
 8019222:	e6a5      	b.n	8018f70 <__ieee754_pow+0x410>
 8019224:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019278 <__ieee754_pow+0x718>
 8019228:	e613      	b.n	8018e52 <__ieee754_pow+0x2f2>
 801922a:	bf00      	nop
 801922c:	f3af 8000 	nop.w
 8019230:	4a454eef 	.word	0x4a454eef
 8019234:	3fca7e28 	.word	0x3fca7e28
 8019238:	93c9db65 	.word	0x93c9db65
 801923c:	3fcd864a 	.word	0x3fcd864a
 8019240:	a91d4101 	.word	0xa91d4101
 8019244:	3fd17460 	.word	0x3fd17460
 8019248:	518f264d 	.word	0x518f264d
 801924c:	3fd55555 	.word	0x3fd55555
 8019250:	db6fabff 	.word	0xdb6fabff
 8019254:	3fdb6db6 	.word	0x3fdb6db6
 8019258:	33333303 	.word	0x33333303
 801925c:	3fe33333 	.word	0x3fe33333
 8019260:	e0000000 	.word	0xe0000000
 8019264:	3feec709 	.word	0x3feec709
 8019268:	dc3a03fd 	.word	0xdc3a03fd
 801926c:	3feec709 	.word	0x3feec709
 8019270:	145b01f5 	.word	0x145b01f5
 8019274:	be3e2fe0 	.word	0xbe3e2fe0
 8019278:	00000000 	.word	0x00000000
 801927c:	3ff00000 	.word	0x3ff00000
 8019280:	43400000 	.word	0x43400000
 8019284:	0003988e 	.word	0x0003988e
 8019288:	000bb679 	.word	0x000bb679
 801928c:	0801aca0 	.word	0x0801aca0
 8019290:	3ff00000 	.word	0x3ff00000
 8019294:	40080000 	.word	0x40080000
 8019298:	0801acc0 	.word	0x0801acc0
 801929c:	0801acb0 	.word	0x0801acb0
 80192a0:	a3b4      	add	r3, pc, #720	; (adr r3, 8019574 <__ieee754_pow+0xa14>)
 80192a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192a6:	4640      	mov	r0, r8
 80192a8:	4649      	mov	r1, r9
 80192aa:	f7e7 f80f 	bl	80002cc <__adddf3>
 80192ae:	4622      	mov	r2, r4
 80192b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80192b4:	462b      	mov	r3, r5
 80192b6:	4630      	mov	r0, r6
 80192b8:	4639      	mov	r1, r7
 80192ba:	f7e7 f805 	bl	80002c8 <__aeabi_dsub>
 80192be:	4602      	mov	r2, r0
 80192c0:	460b      	mov	r3, r1
 80192c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80192c6:	f7e7 fc47 	bl	8000b58 <__aeabi_dcmpgt>
 80192ca:	2800      	cmp	r0, #0
 80192cc:	f47f adfe 	bne.w	8018ecc <__ieee754_pow+0x36c>
 80192d0:	4aa3      	ldr	r2, [pc, #652]	; (8019560 <__ieee754_pow+0xa00>)
 80192d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80192d6:	4293      	cmp	r3, r2
 80192d8:	f340 810a 	ble.w	80194f0 <__ieee754_pow+0x990>
 80192dc:	151b      	asrs	r3, r3, #20
 80192de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80192e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80192e6:	fa4a f303 	asr.w	r3, sl, r3
 80192ea:	445b      	add	r3, fp
 80192ec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80192f0:	4e9c      	ldr	r6, [pc, #624]	; (8019564 <__ieee754_pow+0xa04>)
 80192f2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80192f6:	4116      	asrs	r6, r2
 80192f8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80192fc:	2000      	movs	r0, #0
 80192fe:	ea23 0106 	bic.w	r1, r3, r6
 8019302:	f1c2 0214 	rsb	r2, r2, #20
 8019306:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801930a:	fa4a fa02 	asr.w	sl, sl, r2
 801930e:	f1bb 0f00 	cmp.w	fp, #0
 8019312:	4602      	mov	r2, r0
 8019314:	460b      	mov	r3, r1
 8019316:	4620      	mov	r0, r4
 8019318:	4629      	mov	r1, r5
 801931a:	bfb8      	it	lt
 801931c:	f1ca 0a00 	rsblt	sl, sl, #0
 8019320:	f7e6 ffd2 	bl	80002c8 <__aeabi_dsub>
 8019324:	e9cd 0100 	strd	r0, r1, [sp]
 8019328:	4642      	mov	r2, r8
 801932a:	464b      	mov	r3, r9
 801932c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019330:	f7e6 ffcc 	bl	80002cc <__adddf3>
 8019334:	2000      	movs	r0, #0
 8019336:	a378      	add	r3, pc, #480	; (adr r3, 8019518 <__ieee754_pow+0x9b8>)
 8019338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801933c:	4604      	mov	r4, r0
 801933e:	460d      	mov	r5, r1
 8019340:	f7e7 f97a 	bl	8000638 <__aeabi_dmul>
 8019344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019348:	4606      	mov	r6, r0
 801934a:	460f      	mov	r7, r1
 801934c:	4620      	mov	r0, r4
 801934e:	4629      	mov	r1, r5
 8019350:	f7e6 ffba 	bl	80002c8 <__aeabi_dsub>
 8019354:	4602      	mov	r2, r0
 8019356:	460b      	mov	r3, r1
 8019358:	4640      	mov	r0, r8
 801935a:	4649      	mov	r1, r9
 801935c:	f7e6 ffb4 	bl	80002c8 <__aeabi_dsub>
 8019360:	a36f      	add	r3, pc, #444	; (adr r3, 8019520 <__ieee754_pow+0x9c0>)
 8019362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019366:	f7e7 f967 	bl	8000638 <__aeabi_dmul>
 801936a:	a36f      	add	r3, pc, #444	; (adr r3, 8019528 <__ieee754_pow+0x9c8>)
 801936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019370:	4680      	mov	r8, r0
 8019372:	4689      	mov	r9, r1
 8019374:	4620      	mov	r0, r4
 8019376:	4629      	mov	r1, r5
 8019378:	f7e7 f95e 	bl	8000638 <__aeabi_dmul>
 801937c:	4602      	mov	r2, r0
 801937e:	460b      	mov	r3, r1
 8019380:	4640      	mov	r0, r8
 8019382:	4649      	mov	r1, r9
 8019384:	f7e6 ffa2 	bl	80002cc <__adddf3>
 8019388:	4604      	mov	r4, r0
 801938a:	460d      	mov	r5, r1
 801938c:	4602      	mov	r2, r0
 801938e:	460b      	mov	r3, r1
 8019390:	4630      	mov	r0, r6
 8019392:	4639      	mov	r1, r7
 8019394:	f7e6 ff9a 	bl	80002cc <__adddf3>
 8019398:	4632      	mov	r2, r6
 801939a:	463b      	mov	r3, r7
 801939c:	4680      	mov	r8, r0
 801939e:	4689      	mov	r9, r1
 80193a0:	f7e6 ff92 	bl	80002c8 <__aeabi_dsub>
 80193a4:	4602      	mov	r2, r0
 80193a6:	460b      	mov	r3, r1
 80193a8:	4620      	mov	r0, r4
 80193aa:	4629      	mov	r1, r5
 80193ac:	f7e6 ff8c 	bl	80002c8 <__aeabi_dsub>
 80193b0:	4642      	mov	r2, r8
 80193b2:	4606      	mov	r6, r0
 80193b4:	460f      	mov	r7, r1
 80193b6:	464b      	mov	r3, r9
 80193b8:	4640      	mov	r0, r8
 80193ba:	4649      	mov	r1, r9
 80193bc:	f7e7 f93c 	bl	8000638 <__aeabi_dmul>
 80193c0:	a35b      	add	r3, pc, #364	; (adr r3, 8019530 <__ieee754_pow+0x9d0>)
 80193c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c6:	4604      	mov	r4, r0
 80193c8:	460d      	mov	r5, r1
 80193ca:	f7e7 f935 	bl	8000638 <__aeabi_dmul>
 80193ce:	a35a      	add	r3, pc, #360	; (adr r3, 8019538 <__ieee754_pow+0x9d8>)
 80193d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d4:	f7e6 ff78 	bl	80002c8 <__aeabi_dsub>
 80193d8:	4622      	mov	r2, r4
 80193da:	462b      	mov	r3, r5
 80193dc:	f7e7 f92c 	bl	8000638 <__aeabi_dmul>
 80193e0:	a357      	add	r3, pc, #348	; (adr r3, 8019540 <__ieee754_pow+0x9e0>)
 80193e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e6:	f7e6 ff71 	bl	80002cc <__adddf3>
 80193ea:	4622      	mov	r2, r4
 80193ec:	462b      	mov	r3, r5
 80193ee:	f7e7 f923 	bl	8000638 <__aeabi_dmul>
 80193f2:	a355      	add	r3, pc, #340	; (adr r3, 8019548 <__ieee754_pow+0x9e8>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	f7e6 ff66 	bl	80002c8 <__aeabi_dsub>
 80193fc:	4622      	mov	r2, r4
 80193fe:	462b      	mov	r3, r5
 8019400:	f7e7 f91a 	bl	8000638 <__aeabi_dmul>
 8019404:	a352      	add	r3, pc, #328	; (adr r3, 8019550 <__ieee754_pow+0x9f0>)
 8019406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940a:	f7e6 ff5f 	bl	80002cc <__adddf3>
 801940e:	4622      	mov	r2, r4
 8019410:	462b      	mov	r3, r5
 8019412:	f7e7 f911 	bl	8000638 <__aeabi_dmul>
 8019416:	4602      	mov	r2, r0
 8019418:	460b      	mov	r3, r1
 801941a:	4640      	mov	r0, r8
 801941c:	4649      	mov	r1, r9
 801941e:	f7e6 ff53 	bl	80002c8 <__aeabi_dsub>
 8019422:	4604      	mov	r4, r0
 8019424:	460d      	mov	r5, r1
 8019426:	4602      	mov	r2, r0
 8019428:	460b      	mov	r3, r1
 801942a:	4640      	mov	r0, r8
 801942c:	4649      	mov	r1, r9
 801942e:	f7e7 f903 	bl	8000638 <__aeabi_dmul>
 8019432:	2200      	movs	r2, #0
 8019434:	e9cd 0100 	strd	r0, r1, [sp]
 8019438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801943c:	4620      	mov	r0, r4
 801943e:	4629      	mov	r1, r5
 8019440:	f7e6 ff42 	bl	80002c8 <__aeabi_dsub>
 8019444:	4602      	mov	r2, r0
 8019446:	460b      	mov	r3, r1
 8019448:	e9dd 0100 	ldrd	r0, r1, [sp]
 801944c:	f7e7 fa1e 	bl	800088c <__aeabi_ddiv>
 8019450:	4632      	mov	r2, r6
 8019452:	4604      	mov	r4, r0
 8019454:	460d      	mov	r5, r1
 8019456:	463b      	mov	r3, r7
 8019458:	4640      	mov	r0, r8
 801945a:	4649      	mov	r1, r9
 801945c:	f7e7 f8ec 	bl	8000638 <__aeabi_dmul>
 8019460:	4632      	mov	r2, r6
 8019462:	463b      	mov	r3, r7
 8019464:	f7e6 ff32 	bl	80002cc <__adddf3>
 8019468:	4602      	mov	r2, r0
 801946a:	460b      	mov	r3, r1
 801946c:	4620      	mov	r0, r4
 801946e:	4629      	mov	r1, r5
 8019470:	f7e6 ff2a 	bl	80002c8 <__aeabi_dsub>
 8019474:	4642      	mov	r2, r8
 8019476:	464b      	mov	r3, r9
 8019478:	f7e6 ff26 	bl	80002c8 <__aeabi_dsub>
 801947c:	4602      	mov	r2, r0
 801947e:	460b      	mov	r3, r1
 8019480:	2000      	movs	r0, #0
 8019482:	4939      	ldr	r1, [pc, #228]	; (8019568 <__ieee754_pow+0xa08>)
 8019484:	f7e6 ff20 	bl	80002c8 <__aeabi_dsub>
 8019488:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801948c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019490:	4602      	mov	r2, r0
 8019492:	460b      	mov	r3, r1
 8019494:	da2f      	bge.n	80194f6 <__ieee754_pow+0x996>
 8019496:	4650      	mov	r0, sl
 8019498:	ec43 2b10 	vmov	d0, r2, r3
 801949c:	f000 fc80 	bl	8019da0 <scalbn>
 80194a0:	ec51 0b10 	vmov	r0, r1, d0
 80194a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80194a8:	f7ff bbf1 	b.w	8018c8e <__ieee754_pow+0x12e>
 80194ac:	4b2f      	ldr	r3, [pc, #188]	; (801956c <__ieee754_pow+0xa0c>)
 80194ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80194b2:	429e      	cmp	r6, r3
 80194b4:	f77f af0c 	ble.w	80192d0 <__ieee754_pow+0x770>
 80194b8:	4b2d      	ldr	r3, [pc, #180]	; (8019570 <__ieee754_pow+0xa10>)
 80194ba:	440b      	add	r3, r1
 80194bc:	4303      	orrs	r3, r0
 80194be:	d00b      	beq.n	80194d8 <__ieee754_pow+0x978>
 80194c0:	a325      	add	r3, pc, #148	; (adr r3, 8019558 <__ieee754_pow+0x9f8>)
 80194c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80194ca:	f7e7 f8b5 	bl	8000638 <__aeabi_dmul>
 80194ce:	a322      	add	r3, pc, #136	; (adr r3, 8019558 <__ieee754_pow+0x9f8>)
 80194d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d4:	f7ff bbdb 	b.w	8018c8e <__ieee754_pow+0x12e>
 80194d8:	4622      	mov	r2, r4
 80194da:	462b      	mov	r3, r5
 80194dc:	f7e6 fef4 	bl	80002c8 <__aeabi_dsub>
 80194e0:	4642      	mov	r2, r8
 80194e2:	464b      	mov	r3, r9
 80194e4:	f7e7 fb2e 	bl	8000b44 <__aeabi_dcmpge>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	f43f aef1 	beq.w	80192d0 <__ieee754_pow+0x770>
 80194ee:	e7e7      	b.n	80194c0 <__ieee754_pow+0x960>
 80194f0:	f04f 0a00 	mov.w	sl, #0
 80194f4:	e718      	b.n	8019328 <__ieee754_pow+0x7c8>
 80194f6:	4621      	mov	r1, r4
 80194f8:	e7d4      	b.n	80194a4 <__ieee754_pow+0x944>
 80194fa:	2000      	movs	r0, #0
 80194fc:	491a      	ldr	r1, [pc, #104]	; (8019568 <__ieee754_pow+0xa08>)
 80194fe:	f7ff bb8f 	b.w	8018c20 <__ieee754_pow+0xc0>
 8019502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019506:	f7ff bb8b 	b.w	8018c20 <__ieee754_pow+0xc0>
 801950a:	4630      	mov	r0, r6
 801950c:	4639      	mov	r1, r7
 801950e:	f7ff bb87 	b.w	8018c20 <__ieee754_pow+0xc0>
 8019512:	4693      	mov	fp, r2
 8019514:	f7ff bb98 	b.w	8018c48 <__ieee754_pow+0xe8>
 8019518:	00000000 	.word	0x00000000
 801951c:	3fe62e43 	.word	0x3fe62e43
 8019520:	fefa39ef 	.word	0xfefa39ef
 8019524:	3fe62e42 	.word	0x3fe62e42
 8019528:	0ca86c39 	.word	0x0ca86c39
 801952c:	be205c61 	.word	0xbe205c61
 8019530:	72bea4d0 	.word	0x72bea4d0
 8019534:	3e663769 	.word	0x3e663769
 8019538:	c5d26bf1 	.word	0xc5d26bf1
 801953c:	3ebbbd41 	.word	0x3ebbbd41
 8019540:	af25de2c 	.word	0xaf25de2c
 8019544:	3f11566a 	.word	0x3f11566a
 8019548:	16bebd93 	.word	0x16bebd93
 801954c:	3f66c16c 	.word	0x3f66c16c
 8019550:	5555553e 	.word	0x5555553e
 8019554:	3fc55555 	.word	0x3fc55555
 8019558:	c2f8f359 	.word	0xc2f8f359
 801955c:	01a56e1f 	.word	0x01a56e1f
 8019560:	3fe00000 	.word	0x3fe00000
 8019564:	000fffff 	.word	0x000fffff
 8019568:	3ff00000 	.word	0x3ff00000
 801956c:	4090cbff 	.word	0x4090cbff
 8019570:	3f6f3400 	.word	0x3f6f3400
 8019574:	652b82fe 	.word	0x652b82fe
 8019578:	3c971547 	.word	0x3c971547

0801957c <__ieee754_sqrt>:
 801957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019580:	4955      	ldr	r1, [pc, #340]	; (80196d8 <__ieee754_sqrt+0x15c>)
 8019582:	ec55 4b10 	vmov	r4, r5, d0
 8019586:	43a9      	bics	r1, r5
 8019588:	462b      	mov	r3, r5
 801958a:	462a      	mov	r2, r5
 801958c:	d112      	bne.n	80195b4 <__ieee754_sqrt+0x38>
 801958e:	ee10 2a10 	vmov	r2, s0
 8019592:	ee10 0a10 	vmov	r0, s0
 8019596:	4629      	mov	r1, r5
 8019598:	f7e7 f84e 	bl	8000638 <__aeabi_dmul>
 801959c:	4602      	mov	r2, r0
 801959e:	460b      	mov	r3, r1
 80195a0:	4620      	mov	r0, r4
 80195a2:	4629      	mov	r1, r5
 80195a4:	f7e6 fe92 	bl	80002cc <__adddf3>
 80195a8:	4604      	mov	r4, r0
 80195aa:	460d      	mov	r5, r1
 80195ac:	ec45 4b10 	vmov	d0, r4, r5
 80195b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b4:	2d00      	cmp	r5, #0
 80195b6:	ee10 0a10 	vmov	r0, s0
 80195ba:	4621      	mov	r1, r4
 80195bc:	dc0f      	bgt.n	80195de <__ieee754_sqrt+0x62>
 80195be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80195c2:	4330      	orrs	r0, r6
 80195c4:	d0f2      	beq.n	80195ac <__ieee754_sqrt+0x30>
 80195c6:	b155      	cbz	r5, 80195de <__ieee754_sqrt+0x62>
 80195c8:	ee10 2a10 	vmov	r2, s0
 80195cc:	4620      	mov	r0, r4
 80195ce:	4629      	mov	r1, r5
 80195d0:	f7e6 fe7a 	bl	80002c8 <__aeabi_dsub>
 80195d4:	4602      	mov	r2, r0
 80195d6:	460b      	mov	r3, r1
 80195d8:	f7e7 f958 	bl	800088c <__aeabi_ddiv>
 80195dc:	e7e4      	b.n	80195a8 <__ieee754_sqrt+0x2c>
 80195de:	151b      	asrs	r3, r3, #20
 80195e0:	d073      	beq.n	80196ca <__ieee754_sqrt+0x14e>
 80195e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80195e6:	07dd      	lsls	r5, r3, #31
 80195e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80195ec:	bf48      	it	mi
 80195ee:	0fc8      	lsrmi	r0, r1, #31
 80195f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80195f4:	bf44      	itt	mi
 80195f6:	0049      	lslmi	r1, r1, #1
 80195f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80195fc:	2500      	movs	r5, #0
 80195fe:	1058      	asrs	r0, r3, #1
 8019600:	0fcb      	lsrs	r3, r1, #31
 8019602:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019606:	0049      	lsls	r1, r1, #1
 8019608:	2316      	movs	r3, #22
 801960a:	462c      	mov	r4, r5
 801960c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019610:	19a7      	adds	r7, r4, r6
 8019612:	4297      	cmp	r7, r2
 8019614:	bfde      	ittt	le
 8019616:	19bc      	addle	r4, r7, r6
 8019618:	1bd2      	suble	r2, r2, r7
 801961a:	19ad      	addle	r5, r5, r6
 801961c:	0fcf      	lsrs	r7, r1, #31
 801961e:	3b01      	subs	r3, #1
 8019620:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019624:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019628:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801962c:	d1f0      	bne.n	8019610 <__ieee754_sqrt+0x94>
 801962e:	f04f 0c20 	mov.w	ip, #32
 8019632:	469e      	mov	lr, r3
 8019634:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019638:	42a2      	cmp	r2, r4
 801963a:	eb06 070e 	add.w	r7, r6, lr
 801963e:	dc02      	bgt.n	8019646 <__ieee754_sqrt+0xca>
 8019640:	d112      	bne.n	8019668 <__ieee754_sqrt+0xec>
 8019642:	428f      	cmp	r7, r1
 8019644:	d810      	bhi.n	8019668 <__ieee754_sqrt+0xec>
 8019646:	2f00      	cmp	r7, #0
 8019648:	eb07 0e06 	add.w	lr, r7, r6
 801964c:	da42      	bge.n	80196d4 <__ieee754_sqrt+0x158>
 801964e:	f1be 0f00 	cmp.w	lr, #0
 8019652:	db3f      	blt.n	80196d4 <__ieee754_sqrt+0x158>
 8019654:	f104 0801 	add.w	r8, r4, #1
 8019658:	1b12      	subs	r2, r2, r4
 801965a:	428f      	cmp	r7, r1
 801965c:	bf88      	it	hi
 801965e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019662:	1bc9      	subs	r1, r1, r7
 8019664:	4433      	add	r3, r6
 8019666:	4644      	mov	r4, r8
 8019668:	0052      	lsls	r2, r2, #1
 801966a:	f1bc 0c01 	subs.w	ip, ip, #1
 801966e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019672:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019676:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801967a:	d1dd      	bne.n	8019638 <__ieee754_sqrt+0xbc>
 801967c:	430a      	orrs	r2, r1
 801967e:	d006      	beq.n	801968e <__ieee754_sqrt+0x112>
 8019680:	1c5c      	adds	r4, r3, #1
 8019682:	bf13      	iteet	ne
 8019684:	3301      	addne	r3, #1
 8019686:	3501      	addeq	r5, #1
 8019688:	4663      	moveq	r3, ip
 801968a:	f023 0301 	bicne.w	r3, r3, #1
 801968e:	106a      	asrs	r2, r5, #1
 8019690:	085b      	lsrs	r3, r3, #1
 8019692:	07e9      	lsls	r1, r5, #31
 8019694:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019698:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801969c:	bf48      	it	mi
 801969e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80196a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80196a6:	461c      	mov	r4, r3
 80196a8:	e780      	b.n	80195ac <__ieee754_sqrt+0x30>
 80196aa:	0aca      	lsrs	r2, r1, #11
 80196ac:	3815      	subs	r0, #21
 80196ae:	0549      	lsls	r1, r1, #21
 80196b0:	2a00      	cmp	r2, #0
 80196b2:	d0fa      	beq.n	80196aa <__ieee754_sqrt+0x12e>
 80196b4:	02d6      	lsls	r6, r2, #11
 80196b6:	d50a      	bpl.n	80196ce <__ieee754_sqrt+0x152>
 80196b8:	f1c3 0420 	rsb	r4, r3, #32
 80196bc:	fa21 f404 	lsr.w	r4, r1, r4
 80196c0:	1e5d      	subs	r5, r3, #1
 80196c2:	4099      	lsls	r1, r3
 80196c4:	4322      	orrs	r2, r4
 80196c6:	1b43      	subs	r3, r0, r5
 80196c8:	e78b      	b.n	80195e2 <__ieee754_sqrt+0x66>
 80196ca:	4618      	mov	r0, r3
 80196cc:	e7f0      	b.n	80196b0 <__ieee754_sqrt+0x134>
 80196ce:	0052      	lsls	r2, r2, #1
 80196d0:	3301      	adds	r3, #1
 80196d2:	e7ef      	b.n	80196b4 <__ieee754_sqrt+0x138>
 80196d4:	46a0      	mov	r8, r4
 80196d6:	e7bf      	b.n	8019658 <__ieee754_sqrt+0xdc>
 80196d8:	7ff00000 	.word	0x7ff00000

080196dc <__ieee754_powf>:
 80196dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e0:	ee10 5a90 	vmov	r5, s1
 80196e4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80196e8:	ed2d 8b02 	vpush	{d8}
 80196ec:	eeb0 8a40 	vmov.f32	s16, s0
 80196f0:	eef0 8a60 	vmov.f32	s17, s1
 80196f4:	f000 8293 	beq.w	8019c1e <__ieee754_powf+0x542>
 80196f8:	ee10 8a10 	vmov	r8, s0
 80196fc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8019700:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019704:	dc06      	bgt.n	8019714 <__ieee754_powf+0x38>
 8019706:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801970a:	dd0a      	ble.n	8019722 <__ieee754_powf+0x46>
 801970c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019710:	f000 8285 	beq.w	8019c1e <__ieee754_powf+0x542>
 8019714:	ecbd 8b02 	vpop	{d8}
 8019718:	48d9      	ldr	r0, [pc, #868]	; (8019a80 <__ieee754_powf+0x3a4>)
 801971a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801971e:	f000 bbc7 	b.w	8019eb0 <nanf>
 8019722:	f1b8 0f00 	cmp.w	r8, #0
 8019726:	da1d      	bge.n	8019764 <__ieee754_powf+0x88>
 8019728:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801972c:	da2c      	bge.n	8019788 <__ieee754_powf+0xac>
 801972e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019732:	db30      	blt.n	8019796 <__ieee754_powf+0xba>
 8019734:	15fb      	asrs	r3, r7, #23
 8019736:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801973a:	fa47 f603 	asr.w	r6, r7, r3
 801973e:	fa06 f303 	lsl.w	r3, r6, r3
 8019742:	42bb      	cmp	r3, r7
 8019744:	d127      	bne.n	8019796 <__ieee754_powf+0xba>
 8019746:	f006 0601 	and.w	r6, r6, #1
 801974a:	f1c6 0602 	rsb	r6, r6, #2
 801974e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019752:	d122      	bne.n	801979a <__ieee754_powf+0xbe>
 8019754:	2d00      	cmp	r5, #0
 8019756:	f280 8268 	bge.w	8019c2a <__ieee754_powf+0x54e>
 801975a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801975e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019762:	e00d      	b.n	8019780 <__ieee754_powf+0xa4>
 8019764:	2600      	movs	r6, #0
 8019766:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801976a:	d1f0      	bne.n	801974e <__ieee754_powf+0x72>
 801976c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019770:	f000 8255 	beq.w	8019c1e <__ieee754_powf+0x542>
 8019774:	dd0a      	ble.n	801978c <__ieee754_powf+0xb0>
 8019776:	2d00      	cmp	r5, #0
 8019778:	f280 8254 	bge.w	8019c24 <__ieee754_powf+0x548>
 801977c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019a84 <__ieee754_powf+0x3a8>
 8019780:	ecbd 8b02 	vpop	{d8}
 8019784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019788:	2602      	movs	r6, #2
 801978a:	e7ec      	b.n	8019766 <__ieee754_powf+0x8a>
 801978c:	2d00      	cmp	r5, #0
 801978e:	daf5      	bge.n	801977c <__ieee754_powf+0xa0>
 8019790:	eeb1 0a68 	vneg.f32	s0, s17
 8019794:	e7f4      	b.n	8019780 <__ieee754_powf+0xa4>
 8019796:	2600      	movs	r6, #0
 8019798:	e7d9      	b.n	801974e <__ieee754_powf+0x72>
 801979a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801979e:	d102      	bne.n	80197a6 <__ieee754_powf+0xca>
 80197a0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80197a4:	e7ec      	b.n	8019780 <__ieee754_powf+0xa4>
 80197a6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80197aa:	eeb0 0a48 	vmov.f32	s0, s16
 80197ae:	d108      	bne.n	80197c2 <__ieee754_powf+0xe6>
 80197b0:	f1b8 0f00 	cmp.w	r8, #0
 80197b4:	db05      	blt.n	80197c2 <__ieee754_powf+0xe6>
 80197b6:	ecbd 8b02 	vpop	{d8}
 80197ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197be:	f000 ba4d 	b.w	8019c5c <__ieee754_sqrtf>
 80197c2:	f000 fb63 	bl	8019e8c <fabsf>
 80197c6:	b124      	cbz	r4, 80197d2 <__ieee754_powf+0xf6>
 80197c8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80197cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80197d0:	d117      	bne.n	8019802 <__ieee754_powf+0x126>
 80197d2:	2d00      	cmp	r5, #0
 80197d4:	bfbc      	itt	lt
 80197d6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80197da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80197de:	f1b8 0f00 	cmp.w	r8, #0
 80197e2:	dacd      	bge.n	8019780 <__ieee754_powf+0xa4>
 80197e4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80197e8:	ea54 0306 	orrs.w	r3, r4, r6
 80197ec:	d104      	bne.n	80197f8 <__ieee754_powf+0x11c>
 80197ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80197f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80197f6:	e7c3      	b.n	8019780 <__ieee754_powf+0xa4>
 80197f8:	2e01      	cmp	r6, #1
 80197fa:	d1c1      	bne.n	8019780 <__ieee754_powf+0xa4>
 80197fc:	eeb1 0a40 	vneg.f32	s0, s0
 8019800:	e7be      	b.n	8019780 <__ieee754_powf+0xa4>
 8019802:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8019806:	3801      	subs	r0, #1
 8019808:	ea56 0300 	orrs.w	r3, r6, r0
 801980c:	d104      	bne.n	8019818 <__ieee754_powf+0x13c>
 801980e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019812:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019816:	e7b3      	b.n	8019780 <__ieee754_powf+0xa4>
 8019818:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801981c:	dd6d      	ble.n	80198fa <__ieee754_powf+0x21e>
 801981e:	4b9a      	ldr	r3, [pc, #616]	; (8019a88 <__ieee754_powf+0x3ac>)
 8019820:	429c      	cmp	r4, r3
 8019822:	dc06      	bgt.n	8019832 <__ieee754_powf+0x156>
 8019824:	2d00      	cmp	r5, #0
 8019826:	daa9      	bge.n	801977c <__ieee754_powf+0xa0>
 8019828:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019a8c <__ieee754_powf+0x3b0>
 801982c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019830:	e7a6      	b.n	8019780 <__ieee754_powf+0xa4>
 8019832:	4b97      	ldr	r3, [pc, #604]	; (8019a90 <__ieee754_powf+0x3b4>)
 8019834:	429c      	cmp	r4, r3
 8019836:	dd02      	ble.n	801983e <__ieee754_powf+0x162>
 8019838:	2d00      	cmp	r5, #0
 801983a:	dcf5      	bgt.n	8019828 <__ieee754_powf+0x14c>
 801983c:	e79e      	b.n	801977c <__ieee754_powf+0xa0>
 801983e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019842:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019846:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8019a94 <__ieee754_powf+0x3b8>
 801984a:	eef1 6a40 	vneg.f32	s13, s0
 801984e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019852:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019856:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801985a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801985e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8019862:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019a98 <__ieee754_powf+0x3bc>
 8019866:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801986a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019a9c <__ieee754_powf+0x3c0>
 801986e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8019872:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019876:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019aa0 <__ieee754_powf+0x3c4>
 801987a:	eeb0 6a67 	vmov.f32	s12, s15
 801987e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8019882:	ee16 3a10 	vmov	r3, s12
 8019886:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801988a:	f023 030f 	bic.w	r3, r3, #15
 801988e:	ee00 3a90 	vmov	s1, r3
 8019892:	eee6 0a87 	vfma.f32	s1, s13, s14
 8019896:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801989a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801989e:	f025 050f 	bic.w	r5, r5, #15
 80198a2:	ee07 5a10 	vmov	s14, r5
 80198a6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80198aa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80198ae:	ee07 3a90 	vmov	s15, r3
 80198b2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80198b6:	3e01      	subs	r6, #1
 80198b8:	ea56 0200 	orrs.w	r2, r6, r0
 80198bc:	ee07 5a10 	vmov	s14, r5
 80198c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80198c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80198c8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80198cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80198d0:	ee17 4a10 	vmov	r4, s14
 80198d4:	bf08      	it	eq
 80198d6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80198da:	2c00      	cmp	r4, #0
 80198dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80198e0:	f340 8184 	ble.w	8019bec <__ieee754_powf+0x510>
 80198e4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80198e8:	f340 80fc 	ble.w	8019ae4 <__ieee754_powf+0x408>
 80198ec:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019a8c <__ieee754_powf+0x3b0>
 80198f0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80198f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80198f8:	e742      	b.n	8019780 <__ieee754_powf+0xa4>
 80198fa:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80198fe:	bfbf      	itttt	lt
 8019900:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8019aa4 <__ieee754_powf+0x3c8>
 8019904:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019908:	f06f 0217 	mvnlt.w	r2, #23
 801990c:	ee17 4a90 	vmovlt	r4, s15
 8019910:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8019914:	bfa8      	it	ge
 8019916:	2200      	movge	r2, #0
 8019918:	3b7f      	subs	r3, #127	; 0x7f
 801991a:	4413      	add	r3, r2
 801991c:	4a62      	ldr	r2, [pc, #392]	; (8019aa8 <__ieee754_powf+0x3cc>)
 801991e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8019922:	4294      	cmp	r4, r2
 8019924:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019928:	dd06      	ble.n	8019938 <__ieee754_powf+0x25c>
 801992a:	4a60      	ldr	r2, [pc, #384]	; (8019aac <__ieee754_powf+0x3d0>)
 801992c:	4294      	cmp	r4, r2
 801992e:	f340 80a5 	ble.w	8019a7c <__ieee754_powf+0x3a0>
 8019932:	3301      	adds	r3, #1
 8019934:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019938:	2400      	movs	r4, #0
 801993a:	4a5d      	ldr	r2, [pc, #372]	; (8019ab0 <__ieee754_powf+0x3d4>)
 801993c:	00a7      	lsls	r7, r4, #2
 801993e:	443a      	add	r2, r7
 8019940:	ee07 1a90 	vmov	s15, r1
 8019944:	ed92 7a00 	vldr	s14, [r2]
 8019948:	4a5a      	ldr	r2, [pc, #360]	; (8019ab4 <__ieee754_powf+0x3d8>)
 801994a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801994e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019952:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019956:	1049      	asrs	r1, r1, #1
 8019958:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801995c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019960:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8019964:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019968:	ee06 1a10 	vmov	s12, r1
 801996c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019970:	ee14 ca90 	vmov	ip, s9
 8019974:	ea02 0c0c 	and.w	ip, r2, ip
 8019978:	ee05 ca10 	vmov	s10, ip
 801997c:	eeb1 4a45 	vneg.f32	s8, s10
 8019980:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019984:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019988:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019ab8 <__ieee754_powf+0x3dc>
 801998c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019990:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8019994:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019998:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801999c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80199a0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019abc <__ieee754_powf+0x3e0>
 80199a4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80199a8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019ac0 <__ieee754_powf+0x3e4>
 80199ac:	eee7 5a27 	vfma.f32	s11, s14, s15
 80199b0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019a94 <__ieee754_powf+0x3b8>
 80199b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80199b8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019ac4 <__ieee754_powf+0x3e8>
 80199bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80199c0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019ac8 <__ieee754_powf+0x3ec>
 80199c4:	ee75 6a24 	vadd.f32	s13, s10, s9
 80199c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80199cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80199d0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80199d4:	eef0 7a65 	vmov.f32	s15, s11
 80199d8:	eee3 6a87 	vfma.f32	s13, s7, s14
 80199dc:	eee5 7a05 	vfma.f32	s15, s10, s10
 80199e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80199e4:	ee17 1a90 	vmov	r1, s15
 80199e8:	4011      	ands	r1, r2
 80199ea:	ee07 1a90 	vmov	s15, r1
 80199ee:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80199f2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019acc <__ieee754_powf+0x3f0>
 80199f6:	eea4 7a05 	vfma.f32	s14, s8, s10
 80199fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80199fe:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019a02:	eea7 7a86 	vfma.f32	s14, s15, s12
 8019a06:	eeb0 6a47 	vmov.f32	s12, s14
 8019a0a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8019a0e:	ee16 1a10 	vmov	r1, s12
 8019a12:	4011      	ands	r1, r2
 8019a14:	ee06 1a90 	vmov	s13, r1
 8019a18:	eee4 6a27 	vfma.f32	s13, s8, s15
 8019a1c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019ad0 <__ieee754_powf+0x3f4>
 8019a20:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019a24:	ee06 1a10 	vmov	s12, r1
 8019a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a2c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019ad4 <__ieee754_powf+0x3f8>
 8019a30:	4929      	ldr	r1, [pc, #164]	; (8019ad8 <__ieee754_powf+0x3fc>)
 8019a32:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019a36:	4439      	add	r1, r7
 8019a38:	edd1 7a00 	vldr	s15, [r1]
 8019a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a40:	ee07 3a90 	vmov	s15, r3
 8019a44:	eef0 0a47 	vmov.f32	s1, s14
 8019a48:	4b24      	ldr	r3, [pc, #144]	; (8019adc <__ieee754_powf+0x400>)
 8019a4a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019a4e:	443b      	add	r3, r7
 8019a50:	ed93 5a00 	vldr	s10, [r3]
 8019a54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019a58:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019a5c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019a60:	ee17 3a90 	vmov	r3, s15
 8019a64:	4013      	ands	r3, r2
 8019a66:	ee07 3a90 	vmov	s15, r3
 8019a6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a6e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019a72:	eee6 7a65 	vfms.f32	s15, s12, s11
 8019a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a7a:	e70e      	b.n	801989a <__ieee754_powf+0x1be>
 8019a7c:	2401      	movs	r4, #1
 8019a7e:	e75c      	b.n	801993a <__ieee754_powf+0x25e>
 8019a80:	0801abf9 	.word	0x0801abf9
 8019a84:	00000000 	.word	0x00000000
 8019a88:	3f7ffff7 	.word	0x3f7ffff7
 8019a8c:	7149f2ca 	.word	0x7149f2ca
 8019a90:	3f800007 	.word	0x3f800007
 8019a94:	3eaaaaab 	.word	0x3eaaaaab
 8019a98:	36eca570 	.word	0x36eca570
 8019a9c:	3fb8aa3b 	.word	0x3fb8aa3b
 8019aa0:	3fb8aa00 	.word	0x3fb8aa00
 8019aa4:	4b800000 	.word	0x4b800000
 8019aa8:	001cc471 	.word	0x001cc471
 8019aac:	005db3d6 	.word	0x005db3d6
 8019ab0:	0801acd0 	.word	0x0801acd0
 8019ab4:	fffff000 	.word	0xfffff000
 8019ab8:	3e6c3255 	.word	0x3e6c3255
 8019abc:	3e53f142 	.word	0x3e53f142
 8019ac0:	3e8ba305 	.word	0x3e8ba305
 8019ac4:	3edb6db7 	.word	0x3edb6db7
 8019ac8:	3f19999a 	.word	0x3f19999a
 8019acc:	3f763800 	.word	0x3f763800
 8019ad0:	3f76384f 	.word	0x3f76384f
 8019ad4:	369dc3a0 	.word	0x369dc3a0
 8019ad8:	0801ace0 	.word	0x0801ace0
 8019adc:	0801acd8 	.word	0x0801acd8
 8019ae0:	3338aa3c 	.word	0x3338aa3c
 8019ae4:	f040 8092 	bne.w	8019c0c <__ieee754_powf+0x530>
 8019ae8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019ae0 <__ieee754_powf+0x404>
 8019aec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019af0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019af4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019afc:	f73f aef6 	bgt.w	80198ec <__ieee754_powf+0x210>
 8019b00:	15db      	asrs	r3, r3, #23
 8019b02:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019b06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019b0a:	4103      	asrs	r3, r0
 8019b0c:	4423      	add	r3, r4
 8019b0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b12:	4947      	ldr	r1, [pc, #284]	; (8019c30 <__ieee754_powf+0x554>)
 8019b14:	3a7f      	subs	r2, #127	; 0x7f
 8019b16:	4111      	asrs	r1, r2
 8019b18:	ea23 0101 	bic.w	r1, r3, r1
 8019b1c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019b20:	ee07 1a10 	vmov	s14, r1
 8019b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019b28:	f1c2 0217 	rsb	r2, r2, #23
 8019b2c:	4110      	asrs	r0, r2
 8019b2e:	2c00      	cmp	r4, #0
 8019b30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b34:	bfb8      	it	lt
 8019b36:	4240      	neglt	r0, r0
 8019b38:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019b3c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019c34 <__ieee754_powf+0x558>
 8019b40:	ee17 3a10 	vmov	r3, s14
 8019b44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019b48:	f023 030f 	bic.w	r3, r3, #15
 8019b4c:	ee07 3a10 	vmov	s14, r3
 8019b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b54:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019b58:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019c38 <__ieee754_powf+0x55c>
 8019b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019b60:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019b64:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019c3c <__ieee754_powf+0x560>
 8019b68:	eeb0 0a67 	vmov.f32	s0, s15
 8019b6c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019b70:	eeb0 6a40 	vmov.f32	s12, s0
 8019b74:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019b78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019b7c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019b80:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019c40 <__ieee754_powf+0x564>
 8019b84:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019c44 <__ieee754_powf+0x568>
 8019b88:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019b8c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019c48 <__ieee754_powf+0x56c>
 8019b90:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019b94:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019c4c <__ieee754_powf+0x570>
 8019b98:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019b9c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019c50 <__ieee754_powf+0x574>
 8019ba0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019ba4:	eeb0 6a40 	vmov.f32	s12, s0
 8019ba8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019bac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019bb0:	eeb0 7a46 	vmov.f32	s14, s12
 8019bb4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019bb8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019bbc:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019bc0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019bc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019bcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019bd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019bd4:	ee10 3a10 	vmov	r3, s0
 8019bd8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019be0:	da1a      	bge.n	8019c18 <__ieee754_powf+0x53c>
 8019be2:	f000 f9c5 	bl	8019f70 <scalbnf>
 8019be6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019bea:	e5c9      	b.n	8019780 <__ieee754_powf+0xa4>
 8019bec:	4a19      	ldr	r2, [pc, #100]	; (8019c54 <__ieee754_powf+0x578>)
 8019bee:	4293      	cmp	r3, r2
 8019bf0:	dd02      	ble.n	8019bf8 <__ieee754_powf+0x51c>
 8019bf2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019c58 <__ieee754_powf+0x57c>
 8019bf6:	e67b      	b.n	80198f0 <__ieee754_powf+0x214>
 8019bf8:	d108      	bne.n	8019c0c <__ieee754_powf+0x530>
 8019bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019bfe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c06:	f6ff af7b 	blt.w	8019b00 <__ieee754_powf+0x424>
 8019c0a:	e7f2      	b.n	8019bf2 <__ieee754_powf+0x516>
 8019c0c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019c10:	f73f af76 	bgt.w	8019b00 <__ieee754_powf+0x424>
 8019c14:	2000      	movs	r0, #0
 8019c16:	e78f      	b.n	8019b38 <__ieee754_powf+0x45c>
 8019c18:	ee00 3a10 	vmov	s0, r3
 8019c1c:	e7e3      	b.n	8019be6 <__ieee754_powf+0x50a>
 8019c1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019c22:	e5ad      	b.n	8019780 <__ieee754_powf+0xa4>
 8019c24:	eeb0 0a68 	vmov.f32	s0, s17
 8019c28:	e5aa      	b.n	8019780 <__ieee754_powf+0xa4>
 8019c2a:	eeb0 0a48 	vmov.f32	s0, s16
 8019c2e:	e5a7      	b.n	8019780 <__ieee754_powf+0xa4>
 8019c30:	007fffff 	.word	0x007fffff
 8019c34:	3f317218 	.word	0x3f317218
 8019c38:	35bfbe8c 	.word	0x35bfbe8c
 8019c3c:	3f317200 	.word	0x3f317200
 8019c40:	3331bb4c 	.word	0x3331bb4c
 8019c44:	b5ddea0e 	.word	0xb5ddea0e
 8019c48:	388ab355 	.word	0x388ab355
 8019c4c:	bb360b61 	.word	0xbb360b61
 8019c50:	3e2aaaab 	.word	0x3e2aaaab
 8019c54:	43160000 	.word	0x43160000
 8019c58:	0da24260 	.word	0x0da24260

08019c5c <__ieee754_sqrtf>:
 8019c5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019c60:	4770      	bx	lr

08019c62 <fabs>:
 8019c62:	ec51 0b10 	vmov	r0, r1, d0
 8019c66:	ee10 2a10 	vmov	r2, s0
 8019c6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019c6e:	ec43 2b10 	vmov	d0, r2, r3
 8019c72:	4770      	bx	lr

08019c74 <finite>:
 8019c74:	ee10 3a90 	vmov	r3, s1
 8019c78:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019c7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019c80:	0fc0      	lsrs	r0, r0, #31
 8019c82:	4770      	bx	lr

08019c84 <matherr>:
 8019c84:	2000      	movs	r0, #0
 8019c86:	4770      	bx	lr

08019c88 <nan>:
 8019c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019c90 <nan+0x8>
 8019c8c:	4770      	bx	lr
 8019c8e:	bf00      	nop
 8019c90:	00000000 	.word	0x00000000
 8019c94:	7ff80000 	.word	0x7ff80000

08019c98 <rint>:
 8019c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c9a:	ec51 0b10 	vmov	r0, r1, d0
 8019c9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019ca2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019ca6:	2e13      	cmp	r6, #19
 8019ca8:	460b      	mov	r3, r1
 8019caa:	ee10 4a10 	vmov	r4, s0
 8019cae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019cb2:	dc56      	bgt.n	8019d62 <rint+0xca>
 8019cb4:	2e00      	cmp	r6, #0
 8019cb6:	da2b      	bge.n	8019d10 <rint+0x78>
 8019cb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019cbc:	4302      	orrs	r2, r0
 8019cbe:	d023      	beq.n	8019d08 <rint+0x70>
 8019cc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019cc4:	4302      	orrs	r2, r0
 8019cc6:	4254      	negs	r4, r2
 8019cc8:	4314      	orrs	r4, r2
 8019cca:	0c4b      	lsrs	r3, r1, #17
 8019ccc:	0b24      	lsrs	r4, r4, #12
 8019cce:	045b      	lsls	r3, r3, #17
 8019cd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019cd4:	ea44 0103 	orr.w	r1, r4, r3
 8019cd8:	460b      	mov	r3, r1
 8019cda:	492f      	ldr	r1, [pc, #188]	; (8019d98 <rint+0x100>)
 8019cdc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019ce0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8019ce4:	4602      	mov	r2, r0
 8019ce6:	4639      	mov	r1, r7
 8019ce8:	4630      	mov	r0, r6
 8019cea:	f7e6 faef 	bl	80002cc <__adddf3>
 8019cee:	e9cd 0100 	strd	r0, r1, [sp]
 8019cf2:	463b      	mov	r3, r7
 8019cf4:	4632      	mov	r2, r6
 8019cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019cfa:	f7e6 fae5 	bl	80002c8 <__aeabi_dsub>
 8019cfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019d02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019d06:	4639      	mov	r1, r7
 8019d08:	ec41 0b10 	vmov	d0, r0, r1
 8019d0c:	b003      	add	sp, #12
 8019d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d10:	4a22      	ldr	r2, [pc, #136]	; (8019d9c <rint+0x104>)
 8019d12:	4132      	asrs	r2, r6
 8019d14:	ea01 0702 	and.w	r7, r1, r2
 8019d18:	4307      	orrs	r7, r0
 8019d1a:	d0f5      	beq.n	8019d08 <rint+0x70>
 8019d1c:	0852      	lsrs	r2, r2, #1
 8019d1e:	4011      	ands	r1, r2
 8019d20:	430c      	orrs	r4, r1
 8019d22:	d00b      	beq.n	8019d3c <rint+0xa4>
 8019d24:	ea23 0202 	bic.w	r2, r3, r2
 8019d28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019d2c:	2e13      	cmp	r6, #19
 8019d2e:	fa43 f306 	asr.w	r3, r3, r6
 8019d32:	bf0c      	ite	eq
 8019d34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019d38:	2400      	movne	r4, #0
 8019d3a:	4313      	orrs	r3, r2
 8019d3c:	4916      	ldr	r1, [pc, #88]	; (8019d98 <rint+0x100>)
 8019d3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019d42:	4622      	mov	r2, r4
 8019d44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019d48:	4620      	mov	r0, r4
 8019d4a:	4629      	mov	r1, r5
 8019d4c:	f7e6 fabe 	bl	80002cc <__adddf3>
 8019d50:	e9cd 0100 	strd	r0, r1, [sp]
 8019d54:	4622      	mov	r2, r4
 8019d56:	462b      	mov	r3, r5
 8019d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d5c:	f7e6 fab4 	bl	80002c8 <__aeabi_dsub>
 8019d60:	e7d2      	b.n	8019d08 <rint+0x70>
 8019d62:	2e33      	cmp	r6, #51	; 0x33
 8019d64:	dd07      	ble.n	8019d76 <rint+0xde>
 8019d66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019d6a:	d1cd      	bne.n	8019d08 <rint+0x70>
 8019d6c:	ee10 2a10 	vmov	r2, s0
 8019d70:	f7e6 faac 	bl	80002cc <__adddf3>
 8019d74:	e7c8      	b.n	8019d08 <rint+0x70>
 8019d76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8019d7e:	40f2      	lsrs	r2, r6
 8019d80:	4210      	tst	r0, r2
 8019d82:	d0c1      	beq.n	8019d08 <rint+0x70>
 8019d84:	0852      	lsrs	r2, r2, #1
 8019d86:	4210      	tst	r0, r2
 8019d88:	bf1f      	itttt	ne
 8019d8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019d8e:	ea20 0202 	bicne.w	r2, r0, r2
 8019d92:	4134      	asrne	r4, r6
 8019d94:	4314      	orrne	r4, r2
 8019d96:	e7d1      	b.n	8019d3c <rint+0xa4>
 8019d98:	0801ace8 	.word	0x0801ace8
 8019d9c:	000fffff 	.word	0x000fffff

08019da0 <scalbn>:
 8019da0:	b570      	push	{r4, r5, r6, lr}
 8019da2:	ec55 4b10 	vmov	r4, r5, d0
 8019da6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019daa:	4606      	mov	r6, r0
 8019dac:	462b      	mov	r3, r5
 8019dae:	b9aa      	cbnz	r2, 8019ddc <scalbn+0x3c>
 8019db0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019db4:	4323      	orrs	r3, r4
 8019db6:	d03b      	beq.n	8019e30 <scalbn+0x90>
 8019db8:	4b31      	ldr	r3, [pc, #196]	; (8019e80 <scalbn+0xe0>)
 8019dba:	4629      	mov	r1, r5
 8019dbc:	2200      	movs	r2, #0
 8019dbe:	ee10 0a10 	vmov	r0, s0
 8019dc2:	f7e6 fc39 	bl	8000638 <__aeabi_dmul>
 8019dc6:	4b2f      	ldr	r3, [pc, #188]	; (8019e84 <scalbn+0xe4>)
 8019dc8:	429e      	cmp	r6, r3
 8019dca:	4604      	mov	r4, r0
 8019dcc:	460d      	mov	r5, r1
 8019dce:	da12      	bge.n	8019df6 <scalbn+0x56>
 8019dd0:	a327      	add	r3, pc, #156	; (adr r3, 8019e70 <scalbn+0xd0>)
 8019dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd6:	f7e6 fc2f 	bl	8000638 <__aeabi_dmul>
 8019dda:	e009      	b.n	8019df0 <scalbn+0x50>
 8019ddc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019de0:	428a      	cmp	r2, r1
 8019de2:	d10c      	bne.n	8019dfe <scalbn+0x5e>
 8019de4:	ee10 2a10 	vmov	r2, s0
 8019de8:	4620      	mov	r0, r4
 8019dea:	4629      	mov	r1, r5
 8019dec:	f7e6 fa6e 	bl	80002cc <__adddf3>
 8019df0:	4604      	mov	r4, r0
 8019df2:	460d      	mov	r5, r1
 8019df4:	e01c      	b.n	8019e30 <scalbn+0x90>
 8019df6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019dfa:	460b      	mov	r3, r1
 8019dfc:	3a36      	subs	r2, #54	; 0x36
 8019dfe:	4432      	add	r2, r6
 8019e00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019e04:	428a      	cmp	r2, r1
 8019e06:	dd0b      	ble.n	8019e20 <scalbn+0x80>
 8019e08:	ec45 4b11 	vmov	d1, r4, r5
 8019e0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019e78 <scalbn+0xd8>
 8019e10:	f000 f90e 	bl	801a030 <copysign>
 8019e14:	a318      	add	r3, pc, #96	; (adr r3, 8019e78 <scalbn+0xd8>)
 8019e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1a:	ec51 0b10 	vmov	r0, r1, d0
 8019e1e:	e7da      	b.n	8019dd6 <scalbn+0x36>
 8019e20:	2a00      	cmp	r2, #0
 8019e22:	dd08      	ble.n	8019e36 <scalbn+0x96>
 8019e24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019e2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019e30:	ec45 4b10 	vmov	d0, r4, r5
 8019e34:	bd70      	pop	{r4, r5, r6, pc}
 8019e36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019e3a:	da0d      	bge.n	8019e58 <scalbn+0xb8>
 8019e3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019e40:	429e      	cmp	r6, r3
 8019e42:	ec45 4b11 	vmov	d1, r4, r5
 8019e46:	dce1      	bgt.n	8019e0c <scalbn+0x6c>
 8019e48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019e70 <scalbn+0xd0>
 8019e4c:	f000 f8f0 	bl	801a030 <copysign>
 8019e50:	a307      	add	r3, pc, #28	; (adr r3, 8019e70 <scalbn+0xd0>)
 8019e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e56:	e7e0      	b.n	8019e1a <scalbn+0x7a>
 8019e58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e5c:	3236      	adds	r2, #54	; 0x36
 8019e5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019e62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019e66:	4620      	mov	r0, r4
 8019e68:	4629      	mov	r1, r5
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	4b06      	ldr	r3, [pc, #24]	; (8019e88 <scalbn+0xe8>)
 8019e6e:	e7b2      	b.n	8019dd6 <scalbn+0x36>
 8019e70:	c2f8f359 	.word	0xc2f8f359
 8019e74:	01a56e1f 	.word	0x01a56e1f
 8019e78:	8800759c 	.word	0x8800759c
 8019e7c:	7e37e43c 	.word	0x7e37e43c
 8019e80:	43500000 	.word	0x43500000
 8019e84:	ffff3cb0 	.word	0xffff3cb0
 8019e88:	3c900000 	.word	0x3c900000

08019e8c <fabsf>:
 8019e8c:	ee10 3a10 	vmov	r3, s0
 8019e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019e94:	ee00 3a10 	vmov	s0, r3
 8019e98:	4770      	bx	lr

08019e9a <finitef>:
 8019e9a:	ee10 3a10 	vmov	r3, s0
 8019e9e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8019ea2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019ea6:	bfac      	ite	ge
 8019ea8:	2000      	movge	r0, #0
 8019eaa:	2001      	movlt	r0, #1
 8019eac:	4770      	bx	lr
	...

08019eb0 <nanf>:
 8019eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019eb8 <nanf+0x8>
 8019eb4:	4770      	bx	lr
 8019eb6:	bf00      	nop
 8019eb8:	7fc00000 	.word	0x7fc00000

08019ebc <rintf>:
 8019ebc:	b513      	push	{r0, r1, r4, lr}
 8019ebe:	ee10 1a10 	vmov	r1, s0
 8019ec2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019ec6:	0ddc      	lsrs	r4, r3, #23
 8019ec8:	3c7f      	subs	r4, #127	; 0x7f
 8019eca:	2c16      	cmp	r4, #22
 8019ecc:	dc46      	bgt.n	8019f5c <rintf+0xa0>
 8019ece:	b32b      	cbz	r3, 8019f1c <rintf+0x60>
 8019ed0:	2c00      	cmp	r4, #0
 8019ed2:	ee10 2a10 	vmov	r2, s0
 8019ed6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8019eda:	da21      	bge.n	8019f20 <rintf+0x64>
 8019edc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019ee0:	425b      	negs	r3, r3
 8019ee2:	4a21      	ldr	r2, [pc, #132]	; (8019f68 <rintf+0xac>)
 8019ee4:	0a5b      	lsrs	r3, r3, #9
 8019ee6:	0d09      	lsrs	r1, r1, #20
 8019ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019eec:	0509      	lsls	r1, r1, #20
 8019eee:	430b      	orrs	r3, r1
 8019ef0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019ef4:	ee07 3a90 	vmov	s15, r3
 8019ef8:	edd2 6a00 	vldr	s13, [r2]
 8019efc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019f00:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019f04:	eddd 7a01 	vldr	s15, [sp, #4]
 8019f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f0c:	ee17 3a90 	vmov	r3, s15
 8019f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f14:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019f18:	ee00 3a10 	vmov	s0, r3
 8019f1c:	b002      	add	sp, #8
 8019f1e:	bd10      	pop	{r4, pc}
 8019f20:	4b12      	ldr	r3, [pc, #72]	; (8019f6c <rintf+0xb0>)
 8019f22:	4123      	asrs	r3, r4
 8019f24:	4219      	tst	r1, r3
 8019f26:	d0f9      	beq.n	8019f1c <rintf+0x60>
 8019f28:	085b      	lsrs	r3, r3, #1
 8019f2a:	4219      	tst	r1, r3
 8019f2c:	d006      	beq.n	8019f3c <rintf+0x80>
 8019f2e:	ea21 0203 	bic.w	r2, r1, r3
 8019f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019f36:	fa43 f404 	asr.w	r4, r3, r4
 8019f3a:	4322      	orrs	r2, r4
 8019f3c:	4b0a      	ldr	r3, [pc, #40]	; (8019f68 <rintf+0xac>)
 8019f3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f42:	ed90 7a00 	vldr	s14, [r0]
 8019f46:	ee07 2a90 	vmov	s15, r2
 8019f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019f52:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019f56:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019f5a:	e7df      	b.n	8019f1c <rintf+0x60>
 8019f5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f60:	d3dc      	bcc.n	8019f1c <rintf+0x60>
 8019f62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f66:	e7d9      	b.n	8019f1c <rintf+0x60>
 8019f68:	0801acf8 	.word	0x0801acf8
 8019f6c:	007fffff 	.word	0x007fffff

08019f70 <scalbnf>:
 8019f70:	b508      	push	{r3, lr}
 8019f72:	ee10 2a10 	vmov	r2, s0
 8019f76:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019f7a:	ed2d 8b02 	vpush	{d8}
 8019f7e:	eef0 0a40 	vmov.f32	s1, s0
 8019f82:	d004      	beq.n	8019f8e <scalbnf+0x1e>
 8019f84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f88:	d306      	bcc.n	8019f98 <scalbnf+0x28>
 8019f8a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8019f8e:	ecbd 8b02 	vpop	{d8}
 8019f92:	eeb0 0a60 	vmov.f32	s0, s1
 8019f96:	bd08      	pop	{r3, pc}
 8019f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019f9c:	d21c      	bcs.n	8019fd8 <scalbnf+0x68>
 8019f9e:	4b1f      	ldr	r3, [pc, #124]	; (801a01c <scalbnf+0xac>)
 8019fa0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a020 <scalbnf+0xb0>
 8019fa4:	4298      	cmp	r0, r3
 8019fa6:	ee60 0a27 	vmul.f32	s1, s0, s15
 8019faa:	db10      	blt.n	8019fce <scalbnf+0x5e>
 8019fac:	ee10 2a90 	vmov	r2, s1
 8019fb0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8019fb4:	3b19      	subs	r3, #25
 8019fb6:	4403      	add	r3, r0
 8019fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8019fba:	dd0f      	ble.n	8019fdc <scalbnf+0x6c>
 8019fbc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801a024 <scalbnf+0xb4>
 8019fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8019fc4:	f000 f843 	bl	801a04e <copysignf>
 8019fc8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8019fcc:	e7df      	b.n	8019f8e <scalbnf+0x1e>
 8019fce:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a028 <scalbnf+0xb8>
 8019fd2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019fd6:	e7da      	b.n	8019f8e <scalbnf+0x1e>
 8019fd8:	0ddb      	lsrs	r3, r3, #23
 8019fda:	e7ec      	b.n	8019fb6 <scalbnf+0x46>
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	dd06      	ble.n	8019fee <scalbnf+0x7e>
 8019fe0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019fe4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019fe8:	ee00 3a90 	vmov	s1, r3
 8019fec:	e7cf      	b.n	8019f8e <scalbnf+0x1e>
 8019fee:	f113 0f16 	cmn.w	r3, #22
 8019ff2:	da06      	bge.n	801a002 <scalbnf+0x92>
 8019ff4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019ff8:	4298      	cmp	r0, r3
 8019ffa:	dcdf      	bgt.n	8019fbc <scalbnf+0x4c>
 8019ffc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801a028 <scalbnf+0xb8>
 801a000:	e7de      	b.n	8019fc0 <scalbnf+0x50>
 801a002:	3319      	adds	r3, #25
 801a004:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a008:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a00c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a02c <scalbnf+0xbc>
 801a010:	ee07 3a10 	vmov	s14, r3
 801a014:	ee67 0a27 	vmul.f32	s1, s14, s15
 801a018:	e7b9      	b.n	8019f8e <scalbnf+0x1e>
 801a01a:	bf00      	nop
 801a01c:	ffff3cb0 	.word	0xffff3cb0
 801a020:	4c000000 	.word	0x4c000000
 801a024:	7149f2ca 	.word	0x7149f2ca
 801a028:	0da24260 	.word	0x0da24260
 801a02c:	33000000 	.word	0x33000000

0801a030 <copysign>:
 801a030:	ec51 0b10 	vmov	r0, r1, d0
 801a034:	ee11 0a90 	vmov	r0, s3
 801a038:	ee10 2a10 	vmov	r2, s0
 801a03c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a040:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a044:	ea41 0300 	orr.w	r3, r1, r0
 801a048:	ec43 2b10 	vmov	d0, r2, r3
 801a04c:	4770      	bx	lr

0801a04e <copysignf>:
 801a04e:	ee10 3a10 	vmov	r3, s0
 801a052:	ee10 2a90 	vmov	r2, s1
 801a056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a05a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a05e:	4313      	orrs	r3, r2
 801a060:	ee00 3a10 	vmov	s0, r3
 801a064:	4770      	bx	lr
	...

0801a068 <_init>:
 801a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a06a:	bf00      	nop
 801a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a06e:	bc08      	pop	{r3}
 801a070:	469e      	mov	lr, r3
 801a072:	4770      	bx	lr

0801a074 <_fini>:
 801a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a076:	bf00      	nop
 801a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a07a:	bc08      	pop	{r3}
 801a07c:	469e      	mov	lr, r3
 801a07e:	4770      	bx	lr
