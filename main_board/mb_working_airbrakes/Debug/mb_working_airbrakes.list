
mb_working_airbrakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  080195b0  080195b0  000295b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a130  0801a130  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801a130  0801a130  0002a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a138  0801a138  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a138  0801a138  0002a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a13c  0801a13c  0002a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801a140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016dc0  20000200  0801a340  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20016fc0  0801a340  00036fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000402ec  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d19  00000000  00000000  0007051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027f0  00000000  00000000  00078238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002458  00000000  00000000  0007aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031c79  00000000  00000000  0007ce80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a8a2  00000000  00000000  000aeaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105003  00000000  00000000  000d939b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001de39e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af64  00000000  00000000  001de41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019598 	.word	0x08019598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08019598 	.word	0x08019598

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e03c      	b.n	8000fc8 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d102      	bne.n	8000f62 <calculateCRC+0x2a>
      c = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e00e      	b.n	8000f80 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <calculateCRC+0x6c>
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <calculateCRC+0x7e>
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1de      	bne.n	8000f80 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbbd      	blt.n	8000f4e <calculateCRC+0x16>
  }
  return crc;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EnableMotor>:

osStatus_t EnableMotor(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800100a:	2306      	movs	r3, #6
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f957 	bl	80012d0 <WriteCommand>
 8001022:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93b 	bl	80012d0 <WriteCommand>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 8001062:	2341      	movs	r3, #65	; 0x41
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9b1 	bl	80013d8 <ReadCommand>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b37      	cmp	r3, #55	; 0x37
 800107c:	d104      	bne.n	8001088 <EnableMotor+0xa8>
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d101      	bne.n	8001088 <EnableMotor+0xa8>
		status = osOK;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800108a:	4618      	mov	r0, r3
 800108c:	3738      	adds	r7, #56	; 0x38
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b08a      	sub	sp, #40	; 0x28
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f900 	bl	80012d0 <WriteCommand>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	141b      	asrs	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	f107 011c 	add.w	r1, r7, #28
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f8d5 	bl	80012d0 <WriteCommand>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8bd 	bl	80012d0 <WriteCommand>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001170:	230f      	movs	r3, #15
 8001172:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	f107 011c 	add.w	r1, r7, #28
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8a5 	bl	80012d0 <WriteCommand>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001192:	b580      	push	{r7, lr}
 8001194:	b08c      	sub	sp, #48	; 0x30
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011aa:	2381      	movs	r3, #129	; 0x81
 80011ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	141b      	asrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f874 	bl	80012d0 <WriteCommand>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 80011f0:	2383      	movs	r3, #131	; 0x83
 80011f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f851 	bl	80012d0 <WriteCommand>
 800122e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001236:	2384      	movs	r3, #132	; 0x84
 8001238:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	141b      	asrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001262:	f107 0210 	add.w	r2, r7, #16
 8001266:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82e 	bl	80012d0 <WriteCommand>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800128e:	2360      	movs	r3, #96	; 0x60
 8001290:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f897 	bl	80013d8 <ReadCommand>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012b4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012b6:	7d3b      	ldrb	r3, [r7, #20]
 80012b8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012ba:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 80012c0:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

	return status;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80012f4:	2302      	movs	r3, #2
 80012f6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80012f8:	2368      	movs	r3, #104	; 0x68
 80012fa:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80012fc:	2304      	movs	r3, #4
 80012fe:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	f107 021e 	add.w	r2, r7, #30
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6851      	ldr	r1, [r2, #4]
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	8912      	ldrh	r2, [r2, #8]
 8001358:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fde7 	bl	8000f38 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800136e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	230a      	movs	r3, #10
 8001388:	220e      	movs	r2, #14
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <WriteCommand+0x104>)
 800138c:	f009 fb9a 	bl	800aac4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2214      	movs	r2, #20
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <WriteCommand+0x104>)
 8001398:	f009 fc25 	bl	800abe6 <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3306      	adds	r3, #6
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <WriteCommand+0xf8>
		status = osOK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200088b4 	.word	0x200088b4

080013d8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80013ec:	2302      	movs	r3, #2
 80013ee:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80013f4:	2302      	movs	r3, #2
 80013f6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80013f8:	2301      	movs	r3, #1
 80013fa:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	8892      	ldrh	r2, [r2, #4]
 8001424:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2106      	movs	r1, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd81 	bl	8000f38 <calculateCRC>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	230a      	movs	r3, #10
 8001450:	220a      	movs	r2, #10
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <ReadCommand+0xc4>)
 8001454:	f009 fb36 	bl	800aac4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001458:	230a      	movs	r3, #10
 800145a:	2214      	movs	r2, #20
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <ReadCommand+0xc4>)
 8001460:	f009 fbc1 	bl	800abe6 <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3307      	adds	r3, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3306      	adds	r3, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3305      	adds	r3, #5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <ReadCommand+0xb8>
		status = osOK;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001490:	69fb      	ldr	r3, [r7, #28]

}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200088b4 	.word	0x200088b4

080014a0 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <init_coeff+0xac>)
 80014ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014b2:	4611      	mov	r1, r2
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f015 fdf4 	bl	80170a4 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 80014bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <init_coeff+0xb0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	4611      	mov	r1, r2
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	461a      	mov	r2, r3
 80014ca:	f015 fdeb 	bl	80170a4 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 80014ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <init_coeff+0xb4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	4611      	mov	r1, r2
 80014d8:	23f8      	movs	r3, #248	; 0xf8
 80014da:	461a      	mov	r2, r3
 80014dc:	f015 fde2 	bl	80170a4 <memcpy>
    const double coeff3[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000201990562985250001943459993472837845, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000001332599818626039970897811441571004127947, -0.000000000000000000000000000000000000000000000000000000000000000000000000000002625348546949809937078012282342904976127723, -0.000000000000000000000000000000000000000000000000000000000000000000000000000223727864461865003520661187439024600181539219, 0.000000000000000000000000000000000000000000000000000000000000000000000004464195222526840028513420957475197151241051746408, 0.000000000000000000000000000000000000000000000000000000000000000000002338983169198669858723678827906894927557002243871494, -0.000000000000000000000000000000000000000000000000000000000000000006912415560184160441989718978305120773037706865961972544, -0.000000000000000000000000000000000000000000000000000000000000010413732827001500036314706101719078643859924602095189421307, 0.000000000000000000000000000000000000000000000000000000000004189409028079520254470994017178321308860178893443967174876530, 0.000000000000000000000000000000000000000000000000000000025614354369933901616993599242485723226984402693215380015245905534, 0.000000000000000000000000000000000000000000000000000017039378494863200873938147795841770460467212292535660899037298363934, -0.000000000000000000000000000000000000000000000000037663076028431798602138861411457291136403355675991877262622158500780707, -0.000000000000000000000000000000000000000000000072815926705972796875656513613119001981820983531065325656503321875845255363, 0.000000000000000000000000000000000000000000018447501014541900178687391898845575613515392446088612401903946378298107262645, 0.000000000000000000000000000000000000000176710198155264991511205517529206838994318948056972059471650682635785295572654346, 0.000000000000000000000000000000000000071835866121803100252160509096347173382186418680093242878723576924609687822100523993, -0.000000000000000000000000000000000372820534942092984478403688654843534473731172425786204417355750076042081268496098051327, -0.000000000000000000000000000000252989602976263993127475788776422100805568474814989995701968345433265389187102987512967278, 0.000000000000000000000000000905170223509092071927497805678691252483018558288891743135588951403590113244795878344461925735, 0.000000000000000000000000194552177016366997577807228355801877291823980823471641161670560613928052107191035702271619811654, -0.000000000000000000002437371278037870091434718374663516278393545732460725671800379210640841165513847954571247100830078125, 0.000000000000000003555223129133779670528346764370006160828520346391329667867786668011831352487206459045410156250000000000, -0.000000000000002840735214777100016456280482905011509609210628574116341837907384615391492843627929687500000000000000000000, 0.000000000001463938313075189970311027401823124891380722978340145346010103821754455566406250000000000000000000000000000000, -0.000000000508757921832193008510020092773898023330580997480865335091948509216308593750000000000000000000000000000000000000, 0.000000119452175202401992986544132166470966183169366559013724327087402343750000000000000000000000000000000000000000000000, -0.000018465109600443501075908714348372541280696168541908264160156250000000000000000000000000000000000000000000000000000000, 0.001785007556170990035068757428859953506616875529289245605468750000000000000000000000000000000000000000000000000000000000, -0.101366848874935994162527208573010284453630447387695312500000000000000000000000000000000000000000000000000000000000000000, 3.838048220048389858050086331786587834358215332031250000000000000000000000000000000000000000000000000000000000000000000000, 3.453560767076920168250353526673279702663421630859375000000000000000000000000000000000000000000000000000000000000000000000};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <init_coeff+0xb8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	4611      	mov	r1, r2
 80014ea:	23f8      	movs	r3, #248	; 0xf8
 80014ec:	461a      	mov	r2, r3
 80014ee:	f015 fdd9 	bl	80170a4 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3340      	adds	r3, #64	; 0x40
 80014f8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4618      	mov	r0, r3
 8001500:	f015 fdd0 	bl	80170a4 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800150c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4618      	mov	r0, r3
 8001514:	f015 fdc6 	bl	80170a4 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001520:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4618      	mov	r0, r3
 8001528:	f015 fdbc 	bl	80170a4 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4618      	mov	r0, r3
 800153c:	f015 fdb2 	bl	80170a4 <memcpy>
}
 8001540:	bf00      	nop
 8001542:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	080195b0 	.word	0x080195b0
 8001550:	080196a8 	.word	0x080196a8
 8001554:	080197a0 	.word	0x080197a0
 8001558:	08019898 	.word	0x08019898

0800155c <control_data_reset>:
        }
    }
}


void control_data_reset(control_data_t *control_data){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffe3 	bl	800155c <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff73 	bl	80014a0 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	e00d      	b.n	80015dc <control_data_init+0x54>
        control_data->gains[i] = 0;
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3305      	adds	r3, #5
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	441a      	add	r2, r3
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	ddee      	ble.n	80015c0 <control_data_init+0x38>
    }
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
	...

080015ec <compute_test_control_input>:
//    }
//    fprintf(fptr,"\n");
//    fclose(fptr);
//}

void compute_test_control_input(control_data_t *control_data){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    float control_input = 0.0f;
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
    if(TEST_CONTROLLER_USE_VELOCITY){
        control_input = 0.5f + 0.5f * control_data->sf_velocity / TEST_CONTROLLER_MAX_VELOCITY;
    }
    else {
        control_input = (float)(control_data->sf_ref_altitude_AGL / (float)TEST_CONTROLLER_MAX_ALTITUDE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001600:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001608:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    control_data->control_input = fmaxf(fminf(control_input, 1), 0);
 800160c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001610:	ed97 0a03 	vldr	s0, [r7, #12]
 8001614:	f016 f984 	bl	8017920 <fminf>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	eddf 0a07 	vldr	s1, [pc, #28]	; 800163c <compute_test_control_input+0x50>
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	f016 f961 	bl	80178ea <fmaxf>
 8001628:	eef0 7a40 	vmov.f32	s15, s0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edc3 7a00 	vstr	s15, [r3]
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	00000000 	.word	0x00000000

08001640 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001648:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001668 <init_env+0x28>
 800164c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f80d 	bl	8001670 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001656:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f82c 	bl	80016b8 <update_env>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	47c5e680 	.word	0x47c5e680
 800166c:	00000000 	.word	0x00000000

08001670 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0a02 	vstr	s0, [r7, #8]
 800167c:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7fe ff81 	bl	8000588 <__aeabi_f2d>
 8001686:	a30a      	add	r3, pc, #40	; (adr r3, 80016b0 <calibrate_env+0x40>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fe1e 	bl	80002cc <__adddf3>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4618      	mov	r0, r3
 8001696:	4621      	mov	r1, r4
 8001698:	f7ff fa7e 	bl	8000b98 <__aeabi_d2f>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	66666666 	.word	0x66666666
 80016b4:	40711266 	.word	0x40711266

080016b8 <update_env>:

void update_env(env_t *env, float T) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7fe ff5f 	bl	8000588 <__aeabi_f2d>
 80016ca:	a317      	add	r3, pc, #92	; (adr r3, 8001728 <update_env+0x70>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe fdfc 	bl	80002cc <__adddf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4618      	mov	r0, r3
 80016da:	4621      	mov	r1, r4
 80016dc:	f7ff fa5c 	bl	8000b98 <__aeabi_d2f>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff4c 	bl	8000588 <__aeabi_f2d>
 80016f0:	a30f      	add	r3, pc, #60	; (adr r3, 8001730 <update_env+0x78>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe ff9f 	bl	8000638 <__aeabi_dmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	4618      	mov	r0, r3
 8001700:	4621      	mov	r1, r4
 8001702:	f7ff fa49 	bl	8000b98 <__aeabi_d2f>
 8001706:	4603      	mov	r3, r0
 8001708:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800170c:	ee00 3a10 	vmov	s0, r3
 8001710:	f016 fb08 	bl	8017d24 <powf>
 8001714:	eef0 7a40 	vmov.f32	s15, s0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	bf00      	nop
 8001728:	66666666 	.word	0x66666666
 800172c:	40711266 	.word	0x40711266
 8001730:	8c1557b7 	.word	0x8c1557b7
 8001734:	40791e2f 	.word	0x40791e2f

08001738 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001744:	edd7 7a00 	vldr	s15, [r7]
 8001748:	eef0 6ae7 	vabs.f32	s13, s15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001756:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	ee07 3a90 	vmov	s15, r3
}
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e043      	b.n	800180c <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03a      	beq.n	8001806 <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	a322      	add	r3, pc, #136	; (adr r3, 8001824 <pressure2altitudeAGL+0xb4>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f874 	bl	800088c <__aeabi_ddiv>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	4625      	mov	r5, r4
 80017aa:	461c      	mov	r4, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017c2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001820 <pressure2altitudeAGL+0xb0>
 80017c6:	eeb0 0a66 	vmov.f32	s0, s13
 80017ca:	f016 faab 	bl	8017d24 <powf>
 80017ce:	eeb0 7a40 	vmov.f32	s14, s0
 80017d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017da:	ee17 0a90 	vmov	r0, s15
 80017de:	f7fe fed3 	bl	8000588 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f7fe ff25 	bl	8000638 <__aeabi_dmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fc:	18d4      	adds	r4, r2, r3
 80017fe:	f7ff f9cb 	bl	8000b98 <__aeabi_d2f>
 8001802:	4603      	mov	r3, r0
 8001804:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbb7      	blt.n	8001784 <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}
 800181c:	f3af 8000 	nop.w
 8001820:	3e42c4dc 	.word	0x3e42c4dc
 8001824:	76c8b439 	.word	0x76c8b439
 8001828:	3f7a9fbe 	.word	0x3f7a9fbe
 800182c:	00000000 	.word	0x00000000

08001830 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	ed2d 8b02 	vpush	{d8}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e047      	b.n	80018d8 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d03e      	beq.n	80018d2 <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	ed93 8a00 	vldr	s16, [r3]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe8f 	bl	8000588 <__aeabi_f2d>
 800186a:	a323      	add	r3, pc, #140	; (adr r3, 80018f8 <altitudeAGL2pressure+0xc8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fee2 	bl	8000638 <__aeabi_dmul>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	4625      	mov	r5, r4
 800187a:	461c      	mov	r4, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe81 	bl	8000588 <__aeabi_f2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4620      	mov	r0, r4
 800188c:	4629      	mov	r1, r5
 800188e:	f7fe fffd 	bl	800088c <__aeabi_ddiv>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	461a      	mov	r2, r3
 8001898:	4623      	mov	r3, r4
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	4914      	ldr	r1, [pc, #80]	; (80018f0 <altitudeAGL2pressure+0xc0>)
 80018a0:	f7fe fd12 	bl	80002c8 <__aeabi_dsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	4618      	mov	r0, r3
 80018aa:	4621      	mov	r1, r4
 80018ac:	f7ff f974 	bl	8000b98 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	eddf 0a10 	vldr	s1, [pc, #64]	; 80018f4 <altitudeAGL2pressure+0xc4>
 80018b6:	ee00 3a10 	vmov	s0, r3
 80018ba:	f016 fa33 	bl	8017d24 <powf>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c8:	4413      	add	r3, r2
 80018ca:	ee68 7a27 	vmul.f32	s15, s16, s15
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbb3      	blt.n	8001848 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	ecbd 8b02 	vpop	{d8}
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	3ff00000 	.word	0x3ff00000
 80018f4:	40a83d87 	.word	0x40a83d87
 80018f8:	76c8b439 	.word	0x76c8b439
 80018fc:	3f7a9fbe 	.word	0x3f7a9fbe

08001900 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe39 	bl	8000588 <__aeabi_f2d>
 8001916:	a323      	add	r3, pc, #140	; (adr r3, 80019a4 <altitude_gradient+0xa4>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fe8c 	bl	8000638 <__aeabi_dmul>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	4625      	mov	r5, r4
 8001926:	461c      	mov	r4, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe2b 	bl	8000588 <__aeabi_f2d>
 8001932:	a31e      	add	r3, pc, #120	; (adr r3, 80019ac <altitude_gradient+0xac>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe7e 	bl	8000638 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe ffa2 	bl	800088c <__aeabi_ddiv>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	4625      	mov	r5, r4
 800194e:	461c      	mov	r4, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ed97 7a00 	vldr	s14, [r7]
 800195a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800195e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80019a0 <altitude_gradient+0xa0>
 8001962:	eeb0 0a66 	vmov.f32	s0, s13
 8001966:	f016 f9dd 	bl	8017d24 <powf>
 800196a:	ee10 3a10 	vmov	r3, s0
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe0a 	bl	8000588 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fe5c 	bl	8000638 <__aeabi_dmul>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	4618      	mov	r0, r3
 8001986:	4621      	mov	r1, r4
 8001988:	f7ff f906 	bl	8000b98 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	ee07 3a90 	vmov	s15, r3
}
 8001996:	eeb0 0a67 	vmov.f32	s0, s15
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	bf4f4ec9 	.word	0xbf4f4ec9
 80019a4:	640f3ea7 	.word	0x640f3ea7
 80019a8:	c071f0fd 	.word	0xc071f0fd
 80019ac:	51eb851f 	.word	0x51eb851f
 80019b0:	40239eb8 	.word	0x40239eb8
 80019b4:	00000000 	.word	0x00000000

080019b8 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	f200 80a6 	bhi.w	8001b1c <detect_flight_phase+0x164>
 80019d0:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <detect_flight_phase+0x20>)
 80019d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d6:	bf00      	nop
 80019d8:	080019ed 	.word	0x080019ed
 80019dc:	08001b1d 	.word	0x08001b1d
 80019e0:	08001a3b 	.word	0x08001a3b
 80019e4:	08001a85 	.word	0x08001a85
 80019e8:	08001acf 	.word	0x08001acf
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001bb8 <detect_flight_phase+0x200>
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	dc00      	bgt.n	8001a10 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001a0e:	e087      	b.n	8001b20 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	b25a      	sxtb	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	dd79      	ble.n	8001b20 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	721a      	strb	r2, [r3, #8]
        break;
 8001a38:	e072      	b.n	8001b20 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a46:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001bb8 <detect_flight_phase+0x200>
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	d400      	bmi.n	8001a5a <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001a58:	e064      	b.n	8001b24 <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	dd56      	ble.n	8001b24 <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	721a      	strb	r2, [r3, #8]
        break;
 8001a82:	e04f      	b.n	8001b24 <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001bb8 <detect_flight_phase+0x200>
 8001a94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d400      	bmi.n	8001aa4 <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001aa2:	e041      	b.n	8001b28 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	b25a      	sxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	dd33      	ble.n	8001b28 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2205      	movs	r2, #5
 8001ac4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	721a      	strb	r2, [r3, #8]
        break;
 8001acc:	e02c      	b.n	8001b28 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ada:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001bb8 <detect_flight_phase+0x200>
 8001ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	d400      	bmi.n	8001af2 <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001af0:	e01c      	b.n	8001b2c <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	dd0e      	ble.n	8001b2c <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2206      	movs	r2, #6
 8001b12:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	721a      	strb	r2, [r3, #8]
        break;
 8001b1a:	e007      	b.n	8001b2c <detect_flight_phase+0x174>

        default:
        break;
 8001b1c:	bf00      	nop
 8001b1e:	e006      	b.n	8001b2e <detect_flight_phase+0x176>
        break;
 8001b20:	bf00      	nop
 8001b22:	e004      	b.n	8001b2e <detect_flight_phase+0x176>
        break;
 8001b24:	bf00      	nop
 8001b26:	e002      	b.n	8001b2e <detect_flight_phase+0x176>
        break;
 8001b28:	bf00      	nop
 8001b2a:	e000      	b.n	8001b2e <detect_flight_phase+0x176>
        break;
 8001b2c:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001bb8 <detect_flight_phase+0x200>
 8001b3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b42:	eeb0 0a66 	vmov.f32	s0, s13
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fdf6 	bl	8001738 <mach_number>
 8001b4c:	eef0 7a40 	vmov.f32	s15, s0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd14 	bl	8000588 <__aeabi_f2d>
 8001b60:	a311      	add	r3, pc, #68	; (adr r3, 8001ba8 <detect_flight_phase+0x1f0>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe ffed 	bl	8000b44 <__aeabi_dcmpge>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2203      	movs	r2, #3
 8001b74:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001b76:	e013      	b.n	8001ba0 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd03 	bl	8000588 <__aeabi_f2d>
 8001b82:	a30b      	add	r3, pc, #44	; (adr r3, 8001bb0 <detect_flight_phase+0x1f8>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe ffdc 	bl	8000b44 <__aeabi_dcmpge>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2202      	movs	r2, #2
 8001b96:	705a      	strb	r2, [r3, #1]
}
 8001b98:	e002      	b.n	8001ba0 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	cccccccd 	.word	0xcccccccd
 8001bac:	3ff4cccc 	.word	0x3ff4cccc
 8001bb0:	9999999a 	.word	0x9999999a
 8001bb4:	3fe99999 	.word	0x3fe99999
 8001bb8:	447a0000 	.word	0x447a0000

08001bbc <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	721a      	strb	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b0b0      	sub	sp, #192	; 0xc0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <reset_kf_state+0x120>)
 8001bf6:	f107 040c 	add.w	r4, r7, #12
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001c08:	4a41      	ldr	r2, [pc, #260]	; (8001d10 <reset_kf_state+0x124>)
 8001c0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001c14:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <reset_kf_state+0x124>)
 8001c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f107 010c 	add.w	r1, r7, #12
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f015 fa3b 	bl	80170a4 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3348      	adds	r3, #72	; 0x48
 8001c32:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001c36:	220c      	movs	r2, #12
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f015 fa33 	bl	80170a4 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3354      	adds	r3, #84	; 0x54
 8001c42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001c46:	220c      	movs	r2, #12
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f015 fa2b 	bl	80170a4 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <reset_kf_state+0x128>)
 8001c68:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c76:	682b      	ldr	r3, [r5, #0]
 8001c78:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001c80:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001c84:	220c      	movs	r2, #12
 8001c86:	4618      	mov	r0, r3
 8001c88:	f015 fa0c 	bl	80170a4 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001c92:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f015 fa03 	bl	80170a4 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	33b4      	adds	r3, #180	; 0xb4
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f015 fa07 	bl	80170ba <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	33b8      	adds	r3, #184	; 0xb8
 8001cb0:	2224      	movs	r2, #36	; 0x24
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f015 fa00 	bl	80170ba <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f015 f9f8 	bl	80170ba <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f015 f9f0 	bl	80170ba <memset>
    kf_state->num_z_active = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3324      	adds	r3, #36	; 0x24
 8001ce8:	2103      	movs	r1, #3
 8001cea:	2003      	movs	r0, #3
 8001cec:	f000 fd48 	bl	8002780 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3360      	adds	r3, #96	; 0x60
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 fd3f 	bl	8002780 <transpose>
}
 8001d02:	bf00      	nop
 8001d04:	37c0      	adds	r7, #192	; 0xc0
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08019990 	.word	0x08019990
 8001d10:	080199b4 	.word	0x080199b4
 8001d14:	080199c0 	.word	0x080199c0

08001d18 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001d2e:	2201      	movs	r2, #1
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	460a      	mov	r2, r1
 8001d38:	2103      	movs	r1, #3
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f000 ff4a 	bl	8002bd4 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001d52:	2200      	movs	r2, #0
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 ff38 	bl	8002bd4 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	f502 7205 	add.w	r2, r2, #532	; 0x214
 8001d72:	2101      	movs	r1, #1
 8001d74:	9102      	str	r1, [sp, #8]
 8001d76:	9201      	str	r2, [sp, #4]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	2103      	movs	r1, #3
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 fe8d 	bl	8002aa0 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	33b4      	adds	r3, #180	; 0xb4
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8001d96:	2101      	movs	r1, #1
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9201      	str	r2, [sp, #4]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2201      	movs	r2, #1
 8001da2:	2101      	movs	r1, #1
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 fe7b 	bl	8002aa0 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3324      	adds	r3, #36	; 0x24
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8001dba:	2101      	movs	r1, #1
 8001dbc:	9102      	str	r1, [sp, #8]
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 fe69 	bl	8002aa0 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3360      	adds	r3, #96	; 0x60
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8001dde:	2100      	movs	r1, #0
 8001de0:	9102      	str	r1, [sp, #8]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4603      	mov	r3, r0
 8001de8:	2203      	movs	r2, #3
 8001dea:	2101      	movs	r1, #1
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 fe57 	bl	8002aa0 <matmul>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	336c      	adds	r3, #108	; 0x6c
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f015 f955 	bl	80170ba <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e01e      	b.n	8001e54 <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	336c      	adds	r3, #108	; 0x6c
 8001e36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	33b8      	adds	r3, #184	; 0xb8
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dddd      	ble.n	8001e16 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3390      	adds	r3, #144	; 0x90
 8001e64:	2103      	movs	r1, #3
 8001e66:	2003      	movs	r0, #3
 8001e68:	f000 fc8a 	bl	8002780 <transpose>
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af04      	add	r7, sp, #16
 8001e7a:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001e8e:	2201      	movs	r2, #1
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4603      	mov	r3, r0
 8001e96:	460a      	mov	r2, r1
 8001e98:	2103      	movs	r1, #3
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f000 fe9a 	bl	8002bd4 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f000 fce3 	bl	800287e <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8001eca:	2101      	movs	r1, #1
 8001ecc:	9102      	str	r1, [sp, #8]
 8001ece:	9201      	str	r2, [sp, #4]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 fde1 	bl	8002aa0 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3390      	adds	r3, #144	; 0x90
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8001eee:	2101      	movs	r1, #1
 8001ef0:	9102      	str	r1, [sp, #8]
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2203      	movs	r2, #3
 8001efa:	2103      	movs	r1, #3
 8001efc:	2003      	movs	r0, #3
 8001efe:	f000 fdcf 	bl	8002aa0 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	460b      	mov	r3, r1
 8001f18:	2103      	movs	r1, #3
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	f000 fcda 	bl	80028d4 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f015 f8c5 	bl	80170ba <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f3c:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800204c <kf_update+0x1d8>
 8001f40:	461a      	mov	r2, r3
 8001f42:	2003      	movs	r0, #3
 8001f44:	f001 f812 	bl	8002f6c <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3390      	adds	r3, #144	; 0x90
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8001f58:	2101      	movs	r1, #1
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4603      	mov	r3, r0
 8001f62:	2203      	movs	r2, #3
 8001f64:	2103      	movs	r1, #3
 8001f66:	2003      	movs	r0, #3
 8001f68:	f000 fd9a 	bl	8002aa0 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8001f7e:	2101      	movs	r1, #1
 8001f80:	9102      	str	r1, [sp, #8]
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4603      	mov	r3, r0
 8001f88:	2203      	movs	r2, #3
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 fd87 	bl	8002aa0 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4603      	mov	r3, r0
 8001fac:	460a      	mov	r2, r1
 8001fae:	2103      	movs	r1, #3
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 fe0f 	bl	8002bd4 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 fc2d 	bl	8002828 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f000 fb86 	bl	80026e8 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	336c      	adds	r3, #108	; 0x6c
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8001fec:	2101      	movs	r1, #1
 8001fee:	9102      	str	r1, [sp, #8]
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 fd50 	bl	8002aa0 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	460b      	mov	r3, r1
 8002016:	2103      	movs	r1, #3
 8002018:	2003      	movs	r0, #3
 800201a:	f000 fcce 	bl	80029ba <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002030:	2101      	movs	r1, #1
 8002032:	9102      	str	r1, [sp, #8]
 8002034:	9201      	str	r2, [sp, #4]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	4603      	mov	r3, r0
 800203a:	2203      	movs	r2, #3
 800203c:	2103      	movs	r1, #3
 800203e:	2003      	movs	r0, #3
 8002040:	f000 fd2e 	bl	8002aa0 <matmul>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	38d1b717 	.word	0x38d1b717

08002050 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002060:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80020e8 <update_state_est_data+0x98>
 8002064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	ee17 2a90 	vmov	r2, s15
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800207a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80020e8 <update_state_est_data+0x98>
 800207e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002086:	ee17 2a90 	vmov	r2, s15
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002094:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80020e8 <update_state_est_data+0x98>
 8002098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 2a90 	vmov	r2, s15
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80020ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020e8 <update_state_est_data+0x98>
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ba:	ee17 2a90 	vmov	r2, s15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80020c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80020e8 <update_state_est_data+0x98>
 80020cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d4:	ee17 2a90 	vmov	r2, s15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	447a0000 	.word	0x447a0000
 80020ec:	00000000 	.word	0x00000000

080020f0 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b095      	sub	sp, #84	; 0x54
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80020fe:	2300      	movs	r3, #0
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
 8002102:	e09a      	b.n	800223a <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3308      	adds	r3, #8
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4403      	add	r3, r0
 8002124:	3308      	adds	r3, #8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4299      	cmp	r1, r3
 800212a:	d92b      	bls.n	8002184 <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002140:	3362      	adds	r3, #98	; 0x62
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214c:	4413      	add	r3, r2
 800214e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3304      	adds	r3, #4
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002170:	440b      	add	r3, r1
 8002172:	3b20      	subs	r3, #32
 8002174:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8002176:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800217a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217c:	4413      	add	r3, r2
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e01d      	b.n	80021c0 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002188:	3362      	adds	r3, #98	; 0x62
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002198:	4413      	add	r3, r2
 800219a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80021a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021aa:	4413      	add	r3, r2
 80021ac:	3b20      	subs	r3, #32
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80021b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ba:	4413      	add	r3, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	333c      	adds	r3, #60	; 0x3c
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4403      	add	r3, r0
 80021e0:	333c      	adds	r3, #60	; 0x3c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4299      	cmp	r1, r3
 80021e6:	d916      	bls.n	8002216 <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3330      	adds	r3, #48	; 0x30
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002202:	440b      	add	r3, r1
 8002204:	3b30      	subs	r3, #48	; 0x30
 8002206:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002208:	f107 0214 	add.w	r2, r7, #20
 800220c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220e:	4413      	add	r3, r2
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e00e      	b.n	8002234 <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8002216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800221e:	4413      	add	r3, r2
 8002220:	3b30      	subs	r3, #48	; 0x30
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002228:	f107 0214 	add.w	r2, r7, #20
 800222c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222e:	4413      	add	r3, r2
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002236:	3301      	adds	r3, #1
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
 800223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223c:	2b02      	cmp	r3, #2
 800223e:	f77f af61 	ble.w	8002104 <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800224e:	461a      	mov	r2, r3
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f975 	bl	8002540 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8002256:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800225a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225e:	4619      	mov	r1, r3
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f96d 	bl	8002540 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8002266:	f107 0214 	add.w	r2, r7, #20
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	4619      	mov	r1, r3
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f965 	bl	8002540 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	e049      	b.n	8002330 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 80022ba:	f107 0214 	add.w	r2, r7, #20
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022d6:	4413      	add	r3, r2
 80022d8:	3b30      	subs	r3, #48	; 0x30
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	3301      	adds	r3, #1
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022f6:	4413      	add	r3, r2
 80022f8:	3b20      	subs	r3, #32
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	d010      	beq.n	800232a <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002310:	4413      	add	r3, r2
 8002312:	3b20      	subs	r3, #32
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	3301      	adds	r3, #1
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800232a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232c:	3301      	adds	r3, #1
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	2b02      	cmp	r3, #2
 8002334:	ddb2      	ble.n	800229c <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	460b      	mov	r3, r1
 800234c:	2103      	movs	r1, #3
 800234e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002350:	f7ff fa0e 	bl	8001770 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	dd21      	ble.n	800239e <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f904 	bl	8000588 <__aeabi_f2d>
 8002380:	a313      	add	r3, pc, #76	; (adr r3, 80023d0 <process_measurements+0x2e0>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fd ff9f 	bl	80002c8 <__aeabi_dsub>
 800238a:	4603      	mov	r3, r0
 800238c:	460c      	mov	r4, r1
 800238e:	4618      	mov	r0, r3
 8002390:	4621      	mov	r1, r4
 8002392:	f7fe fc01 	bl	8000b98 <__aeabi_d2f>
 8002396:	4602      	mov	r2, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dd0f      	ble.n	80023c4 <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ae:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80023b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 80023ba:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80023be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80023c0:	f7ff f97a 	bl	80016b8 <update_env>
    }
} 
 80023c4:	bf00      	nop
 80023c6:	374c      	adds	r7, #76	; 0x4c
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd90      	pop	{r4, r7, pc}
 80023cc:	f3af 8000 	nop.w
 80023d0:	51eb851f 	.word	0x51eb851f
 80023d4:	40239eb8 	.word	0x40239eb8

080023d8 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b091      	sub	sp, #68	; 0x44
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d823      	bhi.n	8002438 <select_noise_models+0x60>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <select_noise_models+0x20>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002411 	.word	0x08002411
 80023fc:	08002411 	.word	0x08002411
 8002400:	0800241b 	.word	0x0800241b
 8002404:	08002425 	.word	0x08002425
 8002408:	0800242f 	.word	0x0800242f
 800240c:	08002411 	.word	0x08002411
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <select_noise_models+0x148>)
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <select_noise_models+0x14c>)
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002418:	e00e      	b.n	8002438 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <select_noise_models+0x150>)
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <select_noise_models+0x154>)
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002422:	e009      	b.n	8002438 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <select_noise_models+0x158>)
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <select_noise_models+0x15c>)
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800242c:	e004      	b.n	8002438 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 800242e:	4b42      	ldr	r3, [pc, #264]	; (8002538 <select_noise_models+0x160>)
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8002432:	4b42      	ldr	r3, [pc, #264]	; (800253c <select_noise_models+0x164>)
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002436:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243c:	e01b      	b.n	8002476 <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 800243e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002440:	f7fe f8a2 	bl	8000588 <__aeabi_f2d>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002518 <select_noise_models+0x140>
 800244c:	ec44 3b10 	vmov	d0, r3, r4
 8002450:	f015 fa9e 	bl	8017990 <pow>
 8002454:	ec54 3b10 	vmov	r3, r4, d0
 8002458:	4618      	mov	r0, r3
 800245a:	4621      	mov	r1, r4
 800245c:	f7fe fb9c 	bl	8000b98 <__aeabi_d2f>
 8002460:	4601      	mov	r1, r0
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	3316      	adds	r3, #22
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	3301      	adds	r3, #1
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	dde0      	ble.n	800243e <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002482:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002484:	2301      	movs	r3, #1
 8002486:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002488:	f107 0114 	add.w	r1, r7, #20
 800248c:	f107 0218 	add.w	r2, r7, #24
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	460b      	mov	r3, r1
 8002498:	2101      	movs	r1, #1
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff f9c8 	bl	8001830 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80024a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024a4:	eeb0 0a67 	vmov.f32	s0, s15
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fa29 	bl	8001900 <altitude_gradient>
 80024ae:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80024b2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	eef0 7ae7 	vabs.f32	s15, s15
 80024c2:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ca:	e01a      	b.n	8002502 <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80024cc:	6a38      	ldr	r0, [r7, #32]
 80024ce:	f7fe f85b 	bl	8000588 <__aeabi_f2d>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002518 <select_noise_models+0x140>
 80024da:	ec44 3b10 	vmov	d0, r3, r4
 80024de:	f015 fa57 	bl	8017990 <pow>
 80024e2:	ec54 3b10 	vmov	r3, r4, d0
 80024e6:	4618      	mov	r0, r3
 80024e8:	4621      	mov	r1, r4
 80024ea:	f7fe fb55 	bl	8000b98 <__aeabi_d2f>
 80024ee:	4601      	mov	r1, r0
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	33b8      	adds	r3, #184	; 0xb8
 80024fa:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	3301      	adds	r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b02      	cmp	r3, #2
 8002506:	dde1      	ble.n	80024cc <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002510:	bf00      	nop
 8002512:	373c      	adds	r7, #60	; 0x3c
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	00000000 	.word	0x00000000
 800251c:	40000000 	.word	0x40000000
 8002520:	3c97e316 	.word	0x3c97e316
 8002524:	3fef3b64 	.word	0x3fef3b64
 8002528:	3fa01965 	.word	0x3fa01965
 800252c:	41500000 	.word	0x41500000
 8002530:	3f1e3737 	.word	0x3f1e3737
 8002534:	40ec28f6 	.word	0x40ec28f6
 8002538:	3ffa41cc 	.word	0x3ffa41cc
 800253c:	40795810 	.word	0x40795810

08002540 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e017      	b.n	800258c <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00e      	beq.n	8002586 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ed97 7a08 	vldr	s14, [r7, #32]
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbe3      	blt.n	800255c <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	dd0a      	ble.n	80025b0 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e033      	b.n	8002624 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02a      	beq.n	800261e <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fd ffd2 	bl	8000588 <__aeabi_f2d>
 80025e4:	4603      	mov	r3, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80026e0 <sensor_elimination_by_stdev+0x1a0>
 80025ec:	ec44 3b10 	vmov	d0, r3, r4
 80025f0:	f015 f9ce 	bl	8017990 <pow>
 80025f4:	ec56 5b10 	vmov	r5, r6, d0
 80025f8:	69b8      	ldr	r0, [r7, #24]
 80025fa:	f7fd ffc5 	bl	8000588 <__aeabi_f2d>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	4628      	mov	r0, r5
 8002608:	4631      	mov	r1, r6
 800260a:	f7fd fe5f 	bl	80002cc <__adddf3>
 800260e:	4603      	mov	r3, r0
 8002610:	460c      	mov	r4, r1
 8002612:	4618      	mov	r0, r3
 8002614:	4621      	mov	r1, r4
 8002616:	f7fe fabf 	bl	8000b98 <__aeabi_d2f>
 800261a:	4603      	mov	r3, r0
 800261c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbc7      	blt.n	80025bc <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	dd1a      	ble.n	8002668 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002640:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002644:	ee16 0a90 	vmov	r0, s13
 8002648:	f7fd ff9e 	bl	8000588 <__aeabi_f2d>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	ec44 3b10 	vmov	d0, r3, r4
 8002654:	f015 fb0c 	bl	8017c70 <sqrt>
 8002658:	ec54 3b10 	vmov	r3, r4, d0
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe fa9a 	bl	8000b98 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e02f      	b.n	80026ce <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d026      	beq.n	80026c8 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	edd7 7a08 	vldr	s15, [r7, #32]
 800268a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268e:	eef0 7ae7 	vabs.f32	s15, s15
 8002692:	ee17 0a90 	vmov	r0, s15
 8002696:	f7fd ff77 	bl	8000588 <__aeabi_f2d>
 800269a:	4604      	mov	r4, r0
 800269c:	460d      	mov	r5, r1
 800269e:	69b8      	ldr	r0, [r7, #24]
 80026a0:	f7fd ff72 	bl	8000588 <__aeabi_f2d>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	f7fd fe10 	bl	80002cc <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fe fa50 	bl	8000b58 <__aeabi_dcmpgt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	3301      	adds	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbcb      	blt.n	800266e <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80026d6:	bf00      	nop
 80026d8:	372c      	adds	r7, #44	; 0x2c
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026de:	bf00      	nop
 80026e0:	00000000 	.word	0x00000000
 80026e4:	40000000 	.word	0x40000000

080026e8 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80026e8:	b490      	push	{r4, r7}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	1e43      	subs	r3, r0, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4603      	mov	r3, r0
 80026fa:	4619      	mov	r1, r3
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f04f 0400 	mov.w	r4, #0
 8002708:	0154      	lsls	r4, r2, #5
 800270a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800270e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	e02b      	b.n	800276e <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e021      	b.n	8002760 <eye+0x78>
            if (i == j){
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d10d      	bne.n	8002740 <eye+0x58>
				A[i][j] = 1;
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fb03 f302 	mul.w	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	441a      	add	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e00c      	b.n	800275a <eye+0x72>
			} else {
				A[i][j] = 0;
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fb03 f302 	mul.w	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	441a      	add	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	dbd9      	blt.n	800271c <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	3301      	adds	r3, #1
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbcf      	blt.n	8002716 <eye+0x2e>
			}
        }
    }
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bc90      	pop	{r4, r7}
 800277e:	4770      	bx	lr

08002780 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002780:	b4b0      	push	{r4, r5, r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	1e43      	subs	r3, r0, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	4603      	mov	r3, r0
 8002796:	4619      	mov	r1, r3
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	0154      	lsls	r4, r2, #5
 80027a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027aa:	014b      	lsls	r3, r1, #5
 80027ac:	68fd      	ldr	r5, [r7, #12]
 80027ae:	1e6b      	subs	r3, r5, #1
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	462b      	mov	r3, r5
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	f04f 0400 	mov.w	r4, #0
 80027c2:	0154      	lsls	r4, r2, #5
 80027c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027c8:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e022      	b.n	8002816 <transpose+0x96>
		for(int j = 0; j < n; j++){
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	e018      	b.n	8002808 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fb03 f302 	mul.w	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	441a      	add	r2, r3
 80027e4:	4629      	mov	r1, r5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fb03 f301 	mul.w	r3, r3, r1
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4419      	add	r1, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	dbe2      	blt.n	80027d6 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3301      	adds	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbd8      	blt.n	80027d0 <transpose+0x50>
		}
	}
}
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bcb0      	pop	{r4, r5, r7}
 8002826:	4770      	bx	lr

08002828 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e016      	b.n	800286a <vecadd+0x42>
		c[i] = a[i] + b[i];
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	4413      	add	r3, r2
 8002844:	ed93 7a00 	vldr	s14, [r3]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	429a      	cmp	r2, r3
 8002870:	dbe4      	blt.n	800283c <vecadd+0x14>
	}
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e016      	b.n	80028c0 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	4413      	add	r3, r2
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbe4      	blt.n	8002892 <vecsub+0x14>
	}
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80028d4:	b4f0      	push	{r4, r5, r6, r7}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	68b8      	ldr	r0, [r7, #8]
 80028e4:	1e43      	subs	r3, r0, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	f04f 0400 	mov.w	r4, #0
 80028f8:	0154      	lsls	r4, r2, #5
 80028fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028fe:	014b      	lsls	r3, r1, #5
 8002900:	68bd      	ldr	r5, [r7, #8]
 8002902:	1e6b      	subs	r3, r5, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	462b      	mov	r3, r5
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0154      	lsls	r4, r2, #5
 8002918:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800291c:	014b      	lsls	r3, r1, #5
 800291e:	68be      	ldr	r6, [r7, #8]
 8002920:	1e73      	subs	r3, r6, #1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	4633      	mov	r3, r6
 8002926:	4619      	mov	r1, r3
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	f04f 0400 	mov.w	r4, #0
 8002934:	0154      	lsls	r4, r2, #5
 8002936:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800293a:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e032      	b.n	80029a8 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	e028      	b.n	800299a <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002948:	4602      	mov	r2, r0
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fb03 f302 	mul.w	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	441a      	add	r2, r3
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	462a      	mov	r2, r5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fb03 f302 	mul.w	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	441a      	add	r2, r3
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	4632      	mov	r2, r6
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fb03 f302 	mul.w	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002984:	441a      	add	r2, r3
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	3301      	adds	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbd2      	blt.n	8002948 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbc8      	blt.n	8002942 <matadd+0x6e>
        }
    }
}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bcf0      	pop	{r4, r5, r6, r7}
 80029b8:	4770      	bx	lr

080029ba <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80029ba:	b4f0      	push	{r4, r5, r6, r7}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	68b8      	ldr	r0, [r7, #8]
 80029ca:	1e43      	subs	r3, r0, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	0154      	lsls	r4, r2, #5
 80029e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029e4:	014b      	lsls	r3, r1, #5
 80029e6:	68bd      	ldr	r5, [r7, #8]
 80029e8:	1e6b      	subs	r3, r5, #1
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	462b      	mov	r3, r5
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f04f 0400 	mov.w	r4, #0
 80029fc:	0154      	lsls	r4, r2, #5
 80029fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	68be      	ldr	r6, [r7, #8]
 8002a06:	1e73      	subs	r3, r6, #1
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	4633      	mov	r3, r6
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f04f 0400 	mov.w	r4, #0
 8002a1a:	0154      	lsls	r4, r2, #5
 8002a1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a20:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e032      	b.n	8002a8e <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	e028      	b.n	8002a80 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	fb03 f302 	mul.w	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	441a      	add	r2, r3
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	462a      	mov	r2, r5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	fb03 f302 	mul.w	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	441a      	add	r2, r3
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	4632      	mov	r2, r6
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	fb03 f302 	mul.w	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a6a:	441a      	add	r2, r3
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbd2      	blt.n	8002a2e <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbc8      	blt.n	8002a28 <matsub+0x6e>
        }
    }
}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9e:	4770      	bx	lr

08002aa0 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b08d      	sub	sp, #52	; 0x34
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6178      	str	r0, [r7, #20]
 8002aa8:	6139      	str	r1, [r7, #16]
 8002aaa:	60fa      	str	r2, [r7, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	693e      	ldr	r6, [r7, #16]
 8002ab0:	1e73      	subs	r3, r6, #1
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	4633      	mov	r3, r6
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	0154      	lsls	r4, r2, #5
 8002ac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aca:	014b      	lsls	r3, r1, #5
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f04f 0400 	mov.w	r4, #0
 8002ae6:	0154      	lsls	r4, r2, #5
 8002ae8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aec:	014b      	lsls	r3, r1, #5
 8002aee:	68fd      	ldr	r5, [r7, #12]
 8002af0:	1e6b      	subs	r3, r5, #1
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	462b      	mov	r3, r5
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	0154      	lsls	r4, r2, #5
 8002b06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0a:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002b0c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2100      	movs	r1, #0
 8002b22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b24:	f014 fac9 	bl	80170ba <memset>
	}
	for(int i = 0; i < m; i++){
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	e04a      	b.n	8002bc4 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	e040      	b.n	8002bb6 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	e036      	b.n	8002ba8 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002b3a:	4632      	mov	r2, r6
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	fb03 f302 	mul.w	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	441a      	add	r2, r3
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	ed93 7a00 	vldr	s14, [r3]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	fb03 f302 	mul.w	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b5e:	441a      	add	r2, r3
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6e:	462a      	mov	r2, r5
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	fb03 f302 	mul.w	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7a:	441a      	add	r2, r3
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	462a      	mov	r2, r5
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	fb03 f302 	mul.w	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b92:	441a      	add	r2, r3
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbc4      	blt.n	8002b3a <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbba      	blt.n	8002b34 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbb0      	blt.n	8002b2e <matmul+0x8e>
            }
        }
    }
}
 8002bcc:	bf00      	nop
 8002bce:	3734      	adds	r7, #52	; 0x34
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd4 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	68bd      	ldr	r5, [r7, #8]
 8002be4:	1e6b      	subs	r3, r5, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	462b      	mov	r3, r5
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f04f 0400 	mov.w	r4, #0
 8002bf8:	0154      	lsls	r4, r2, #5
 8002bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bfe:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002c00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c12:	f014 fa52 	bl	80170ba <memset>
	}
	for(int i = 0; i < m; i++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e02e      	b.n	8002c7a <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e024      	b.n	8002c6c <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8002c22:	462a      	mov	r2, r5
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fb03 f302 	mul.w	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	441a      	add	r2, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	ed93 7a00 	vldr	s14, [r3]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	4413      	add	r3, r2
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5c:	4413      	add	r3, r2
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dbd6      	blt.n	8002c22 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbcc      	blt.n	8002c1c <matvecprod+0x48>
        }
    }
}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdb0      	pop	{r4, r5, r7, pc}

08002c8a <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8002c8a:	b480      	push	{r7}
 8002c8c:	b08b      	sub	sp, #44	; 0x2c
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e01d      	b.n	8002cda <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d102      	bne.n	8002cb4 <lower_triangular_inverse+0x2a>
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e076      	b.n	8002da2 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	ed93 7a00 	vldr	s14, [r3]
 8002cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	dbdd      	blt.n	8002c9e <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e052      	b.n	8002d98 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e041      	b.n	8002d80 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e01b      	b.n	8002d44 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d30:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3301      	adds	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	dbdf      	blt.n	8002d0c <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eeb1 7a67 	vneg.f32	s14, s15
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbb9      	blt.n	8002cfc <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dba8      	blt.n	8002cf2 <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	372c      	adds	r7, #44	; 0x2c
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8002db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002db4:	b08b      	sub	sp, #44	; 0x2c
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	68fe      	ldr	r6, [r7, #12]
 8002dc0:	1e73      	subs	r3, r6, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	4633      	mov	r3, r6
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	0154      	lsls	r4, r2, #5
 8002dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dda:	014b      	lsls	r3, r1, #5
 8002ddc:	68fd      	ldr	r5, [r7, #12]
 8002dde:	1e6b      	subs	r3, r5, #1
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	462b      	mov	r3, r5
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	0154      	lsls	r4, r2, #5
 8002df4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002df8:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	2100      	movs	r1, #0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f014 f956 	bl	80170ba <memset>
    for (int i = 0; i < n; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e09f      	b.n	8002f54 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e093      	b.n	8002f42 <cholesky+0x192>
            float s = 0;
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	e022      	b.n	8002e6c <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8002e26:	462a      	mov	r2, r5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fb03 f302 	mul.w	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	441a      	add	r2, r3
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	ed93 7a00 	vldr	s14, [r3]
 8002e3e:	462a      	mov	r2, r5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	fb03 f302 	mul.w	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	441a      	add	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e62:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	dbd8      	blt.n	8002e26 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d116      	bne.n	8002eaa <cholesky+0xfa>
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	fb03 f302 	mul.w	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	441a      	add	r2, r3
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	ed93 7a00 	vldr	s14, [r3]
 8002e94:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea0:	f015 f8a4 	bl	8017fec <sqrtf>
 8002ea4:	ee10 1a10 	vmov	r1, s0
 8002ea8:	e03d      	b.n	8002f26 <cholesky+0x176>
 8002eaa:	462a      	mov	r2, r5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	fb03 f302 	mul.w	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb61 	bl	8000588 <__aeabi_f2d>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4623      	mov	r3, r4
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	4925      	ldr	r1, [pc, #148]	; (8002f68 <cholesky+0x1b8>)
 8002ed4:	f7fd fcda 	bl	800088c <__aeabi_ddiv>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	4698      	mov	r8, r3
 8002ede:	46a1      	mov	r9, r4
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fb03 f302 	mul.w	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	441a      	add	r2, r3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	ed93 7a00 	vldr	s14, [r3]
 8002ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd fb40 	bl	8000588 <__aeabi_f2d>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	4640      	mov	r0, r8
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd fb90 	bl	8000638 <__aeabi_dmul>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4621      	mov	r1, r4
 8002f20:	f7fd fe3a 	bl	8000b98 <__aeabi_d2f>
 8002f24:	4601      	mov	r1, r0
 8002f26:	462a      	mov	r2, r5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fb03 f302 	mul.w	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	441a      	add	r2, r3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3301      	adds	r3, #1
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f6ff af66 	blt.w	8002e1a <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	3301      	adds	r3, #1
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f6ff af5b 	blt.w	8002e14 <cholesky+0x64>
        }
}
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f68:	3ff00000 	.word	0x3ff00000

08002f6c <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	b090      	sub	sp, #64	; 0x40
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	ed87 0a00 	vstr	s0, [r7]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f84:	4619      	mov	r1, r3
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	f04f 0400 	mov.w	r4, #0
 8002f92:	0154      	lsls	r4, r2, #5
 8002f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f98:	014b      	lsls	r3, r1, #5
 8002f9a:	68fd      	ldr	r5, [r7, #12]
 8002f9c:	1e6b      	subs	r3, r5, #1
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	f04f 0400 	mov.w	r4, #0
 8002fb0:	0154      	lsls	r4, r2, #5
 8002fb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fb6:	014b      	lsls	r3, r1, #5
 8002fb8:	466b      	mov	r3, sp
 8002fba:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	68fe      	ldr	r6, [r7, #12]
 8002fc0:	1e43      	subs	r3, r0, #1
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	f04f 0400 	mov.w	r4, #0
 8002fd4:	0154      	lsls	r4, r2, #5
 8002fd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fda:	014b      	lsls	r3, r1, #5
 8002fdc:	4603      	mov	r3, r0
 8002fde:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002fe2:	1e73      	subs	r3, r6, #1
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	4633      	mov	r3, r6
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	fb03 fe02 	mul.w	lr, r3, r2
 8002ff8:	fb01 fc04 	mul.w	ip, r1, r4
 8002ffc:	44f4      	add	ip, lr
 8002ffe:	fba1 3403 	umull	r3, r4, r1, r3
 8003002:	eb0c 0204 	add.w	r2, ip, r4
 8003006:	4614      	mov	r4, r2
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	0162      	lsls	r2, r4, #5
 8003012:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4633      	mov	r3, r6
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	fb03 fe02 	mul.w	lr, r3, r2
 800302a:	fb01 fc04 	mul.w	ip, r1, r4
 800302e:	44f4      	add	ip, lr
 8003030:	fba1 3403 	umull	r3, r4, r1, r3
 8003034:	eb0c 0204 	add.w	r2, ip, r4
 8003038:	4614      	mov	r4, r2
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	0162      	lsls	r2, r4, #5
 8003044:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003048:	0159      	lsls	r1, r3, #5
 800304a:	4603      	mov	r3, r0
 800304c:	4632      	mov	r2, r6
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3303      	adds	r3, #3
 8003056:	3307      	adds	r3, #7
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	ebad 0d03 	sub.w	sp, sp, r3
 8003060:	466b      	mov	r3, sp
 8003062:	3303      	adds	r3, #3
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 800306a:	69f8      	ldr	r0, [r7, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	f014 f813 	bl	80170a4 <memcpy>
    for (int i = 0; i < n; i++) {
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	e022      	b.n	80030ca <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8003084:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308c:	fb01 f103 	mul.w	r1, r1, r3
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	440b      	add	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	ed93 7a00 	vldr	s14, [r3]
 800309c:	edd7 6a00 	vldr	s13, [r7]
 80030a0:	edd7 7a00 	vldr	s15, [r7]
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80030ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b4:	fb01 f103 	mul.w	r1, r1, r3
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	440b      	add	r3, r1
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	3301      	adds	r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	dbd8      	blt.n	8003084 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	68fe      	ldr	r6, [r7, #12]
 80030d6:	466b      	mov	r3, sp
 80030d8:	469a      	mov	sl, r3
 80030da:	1e43      	subs	r3, r0, #1
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	4603      	mov	r3, r0
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	0154      	lsls	r4, r2, #5
 80030f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030f4:	014b      	lsls	r3, r1, #5
 80030f6:	4603      	mov	r3, r0
 80030f8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80030fc:	1e73      	subs	r3, r6, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	4603      	mov	r3, r0
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	4633      	mov	r3, r6
 800310a:	f04f 0400 	mov.w	r4, #0
 800310e:	fb03 fe02 	mul.w	lr, r3, r2
 8003112:	fb01 fc04 	mul.w	ip, r1, r4
 8003116:	44f4      	add	ip, lr
 8003118:	fba1 3403 	umull	r3, r4, r1, r3
 800311c:	eb0c 0204 	add.w	r2, ip, r4
 8003120:	4614      	mov	r4, r2
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	0162      	lsls	r2, r4, #5
 800312c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003130:	0159      	lsls	r1, r3, #5
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	4633      	mov	r3, r6
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	fb03 fe02 	mul.w	lr, r3, r2
 8003144:	fb01 fc04 	mul.w	ip, r1, r4
 8003148:	44f4      	add	ip, lr
 800314a:	fba1 3403 	umull	r3, r4, r1, r3
 800314e:	eb0c 0204 	add.w	r2, ip, r4
 8003152:	4614      	mov	r4, r2
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	0162      	lsls	r2, r4, #5
 800315e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	4603      	mov	r3, r0
 8003166:	4632      	mov	r2, r6
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3303      	adds	r3, #3
 8003170:	3307      	adds	r3, #7
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	ebad 0d03 	sub.w	sp, sp, r3
 800317a:	466b      	mov	r3, sp
 800317c:	3303      	adds	r3, #3
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4619      	mov	r1, r3
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff fe10 	bl	8002db0 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4619      	mov	r1, r3
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fd78 	bl	8002c8a <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	461a      	mov	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f013 ff86 	bl	80170ba <memset>
    for(int i = 0; i < n; i++){
 80031ae:	2300      	movs	r3, #0
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b2:	e04e      	b.n	8003252 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80031b4:	2300      	movs	r3, #0
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
 80031b8:	e044      	b.n	8003244 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	4293      	cmp	r3, r2
 80031c0:	bfb8      	it	lt
 80031c2:	4613      	movlt	r3, r2
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
 80031c6:	e036      	b.n	8003236 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 80031c8:	462a      	mov	r2, r5
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	fb03 f302 	mul.w	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	441a      	add	r2, r3
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	ed93 7a00 	vldr	s14, [r3]
 80031e0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031e8:	fb01 f103 	mul.w	r1, r1, r3
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	440b      	add	r3, r1
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	edd3 6a00 	vldr	s13, [r3]
 80031f8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003200:	fb01 f103 	mul.w	r1, r1, r3
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	440b      	add	r3, r1
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003214:	462a      	mov	r2, r5
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	fb03 f302 	mul.w	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	441a      	add	r2, r3
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	3301      	adds	r3, #1
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
 8003236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	429a      	cmp	r2, r3
 800323c:	dbc4      	blt.n	80031c8 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	3301      	adds	r3, #1
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	dbb6      	blt.n	80031ba <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	3301      	adds	r3, #1
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	dbac      	blt.n	80031b4 <cholesky_inverse+0x248>
 800325a:	46d5      	mov	sp, sl
 800325c:	46cd      	mov	sp, r9
            }
        }
    }
}
 800325e:	bf00      	nop
 8003260:	3740      	adds	r7, #64	; 0x40
 8003262:	46bd      	mov	sp, r7
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003268 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	b0b3      	sub	sp, #204	; 0xcc
 800326c:	af06      	add	r7, sp, #24
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	72fb      	strb	r3, [r7, #11]
 8003276:	4613      	mov	r3, r2
 8003278:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	2296      	movs	r2, #150	; 0x96
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f013 ff19 	bl	80170ba <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	7aba      	ldrb	r2, [r7, #10]
 800328c:	f107 0010 	add.w	r0, r7, #16
 8003290:	9202      	str	r2, [sp, #8]
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	2301      	movs	r3, #1
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <logSensor+0x138>)
 800329c:	2196      	movs	r1, #150	; 0x96
 800329e:	f013 ffcd 	bl	801723c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 80032a2:	7abb      	ldrb	r3, [r7, #10]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d002      	beq.n	80032ae <logSensor+0x46>
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d01d      	beq.n	80032e8 <logSensor+0x80>
 80032ac:	e055      	b.n	800335a <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fc ffa9 	bl	8000210 <strlen>
 80032be:	4602      	mov	r2, r0
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	1898      	adds	r0, r3, r2
 80032c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	9201      	str	r2, [sp, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	460b      	mov	r3, r1
 80032de:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <logSensor+0x13c>)
 80032e0:	2196      	movs	r1, #150	; 0x96
 80032e2:	f013 ffab 	bl	801723c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 80032e6:	e04e      	b.n	8003386 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fc ff8c 	bl	8000210 <strlen>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f107 0310 	add.w	r3, r7, #16
 80032fe:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003304:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003308:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800330a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800330e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003312:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003318:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800331c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800331e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003326:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003330:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003336:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800333a:	461e      	mov	r6, r3
 800333c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	9305      	str	r3, [sp, #20]
 8003344:	9604      	str	r6, [sp, #16]
 8003346:	9503      	str	r5, [sp, #12]
 8003348:	9402      	str	r4, [sp, #8]
 800334a:	9101      	str	r1, [sp, #4]
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	4663      	mov	r3, ip
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <logSensor+0x140>)
 8003352:	2196      	movs	r1, #150	; 0x96
 8003354:	f013 ff72 	bl	801723c <sniprintf>
	}
		break;
 8003358:	e015      	b.n	8003386 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	4618      	mov	r0, r3
 8003360:	f7fc ff56 	bl	8000210 <strlen>
 8003364:	4602      	mov	r2, r0
 8003366:	f107 0310 	add.w	r3, r7, #16
 800336a:	4413      	add	r3, r2
 800336c:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <logSensor+0x144>)
 800336e:	461d      	mov	r5, r3
 8003370:	4614      	mov	r4, r2
 8003372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003374:	6028      	str	r0, [r5, #0]
 8003376:	6069      	str	r1, [r5, #4]
 8003378:	60aa      	str	r2, [r5, #8]
 800337a:	60eb      	str	r3, [r5, #12]
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	6128      	str	r0, [r5, #16]
 8003380:	7923      	ldrb	r3, [r4, #4]
 8003382:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8003384:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <logSensor+0x148>)
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	f107 0110 	add.w	r1, r7, #16
 800338e:	2300      	movs	r3, #0
 8003390:	2200      	movs	r2, #0
 8003392:	f00f fe2f 	bl	8012ff4 <osMessageQueuePut>
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	37b4      	adds	r7, #180	; 0xb4
 800339c:	46bd      	mov	sp, r7
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a0:	080199e4 	.word	0x080199e4
 80033a4:	080199f4 	.word	0x080199f4
 80033a8:	08019a04 	.word	0x08019a04
 80033ac:	08019a24 	.word	0x08019a24
 80033b0:	20010c70 	.word	0x20010c70

080033b4 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80033b4:	b084      	sub	sp, #16
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b0ac      	sub	sp, #176	; 0xb0
 80033ba:	af04      	add	r7, sp, #16
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80033c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	2296      	movs	r2, #150	; 0x96
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f013 fe73 	bl	80170ba <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 80033d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033dc:	f107 0008 	add.w	r0, r7, #8
 80033e0:	9202      	str	r2, [sp, #8]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2303      	movs	r3, #3
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <logEstimatorVar+0x60>)
 80033ec:	2196      	movs	r1, #150	; 0x96
 80033ee:	f013 ff25 	bl	801723c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <logEstimatorVar+0x64>)
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f107 0108 	add.w	r1, r7, #8
 80033fa:	2300      	movs	r3, #0
 80033fc:	2200      	movs	r2, #0
 80033fe:	f00f fdf9 	bl	8012ff4 <osMessageQueuePut>
 8003402:	4603      	mov	r3, r0
}
 8003404:	4618      	mov	r0, r3
 8003406:	37a0      	adds	r7, #160	; 0xa0
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800340e:	b004      	add	sp, #16
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	08019a48 	.word	0x08019a48
 8003418:	20010c70 	.word	0x20010c70

0800341c <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b0ae      	sub	sp, #184	; 0xb8
 8003420:	af04      	add	r7, sp, #16
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	2296      	movs	r2, #150	; 0x96
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f013 fe41 	bl	80170ba <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld;%ld\n", ts, CONTROLLER_OUTPUT,
 8003438:	f107 0010 	add.w	r0, r7, #16
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2304      	movs	r3, #4
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <logControllerOutput+0x54>)
 8003450:	2196      	movs	r1, #150	; 0x96
 8003452:	f013 fef3 	bl	801723c <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <logControllerOutput+0x58>)
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	f107 0110 	add.w	r1, r7, #16
 800345e:	2300      	movs	r3, #0
 8003460:	2200      	movs	r2, #0
 8003462:	f00f fdc7 	bl	8012ff4 <osMessageQueuePut>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	37a8      	adds	r7, #168	; 0xa8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	08019a58 	.word	0x08019a58
 8003474:	20010c70 	.word	0x20010c70

08003478 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b0ae      	sub	sp, #184	; 0xb8
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	2296      	movs	r2, #150	; 0x96
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f013 fe14 	bl	80170ba <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, MOTOR_POSITION,
 8003492:	f107 0010 	add.w	r0, r7, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2305      	movs	r3, #5
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <logMotor+0x50>)
 80034a6:	2196      	movs	r1, #150	; 0x96
 80034a8:	f013 fec8 	bl	801723c <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <logMotor+0x54>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	f107 0110 	add.w	r1, r7, #16
 80034b4:	2300      	movs	r3, #0
 80034b6:	2200      	movs	r2, #0
 80034b8:	f00f fd9c 	bl	8012ff4 <osMessageQueuePut>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	37a8      	adds	r7, #168	; 0xa8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08019a48 	.word	0x08019a48
 80034cc:	20010c70 	.word	0x20010c70

080034d0 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80034d0:	b40f      	push	{r0, r1, r2, r3}
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80034d8:	2301      	movs	r3, #1
 80034da:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 80034dc:	79fb      	ldrb	r3, [r7, #7]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr

080034ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b09d      	sub	sp, #116	; 0x74
 80034f0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80034f2:	f001 fdf6 	bl	80050e2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80034f6:	f000 f915 	bl	8003724 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 80034fa:	4b61      	ldr	r3, [pc, #388]	; (8003680 <main+0x194>)
 80034fc:	4a61      	ldr	r2, [pc, #388]	; (8003684 <main+0x198>)
 80034fe:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003500:	4b5f      	ldr	r3, [pc, #380]	; (8003680 <main+0x194>)
 8003502:	4a61      	ldr	r2, [pc, #388]	; (8003688 <main+0x19c>)
 8003504:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003506:	4861      	ldr	r0, [pc, #388]	; (800368c <main+0x1a0>)
 8003508:	f7fe f89a 	bl	8001640 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 800350c:	4860      	ldr	r0, [pc, #384]	; (8003690 <main+0x1a4>)
 800350e:	f7fe fb55 	bl	8001bbc <reset_flight_phase_detection>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003512:	f000 fabf 	bl	8003a94 <MX_GPIO_Init>
	MX_DMA_Init();
 8003516:	f000 fa97 	bl	8003a48 <MX_DMA_Init>
	MX_SPI3_Init();
 800351a:	f000 fa25 	bl	8003968 <MX_SPI3_Init>
	MX_SPI1_Init();
 800351e:	f000 f9b3 	bl	8003888 <MX_SPI1_Init>
	MX_SDMMC1_SD_Init();
 8003522:	f000 f991 	bl	8003848 <MX_SDMMC1_SD_Init>
	MX_SPI2_Init();
 8003526:	f000 f9e7 	bl	80038f8 <MX_SPI2_Init>
	MX_FATFS_Init();
 800352a:	f00a fa3f 	bl	800d9ac <MX_FATFS_Init>
	MX_UART7_Init();
 800352e:	f000 fa53 	bl	80039d8 <MX_UART7_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003532:	f013 f83b 	bl	80165ac <MX_USB_DEVICE_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8003536:	f00e fffb 	bl	8012530 <osKernelInitialize>

	/* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 800353a:	4b56      	ldr	r3, [pc, #344]	; (8003694 <main+0x1a8>)
 800353c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8003546:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800354a:	4618      	mov	r0, r3
 800354c:	f00f f9c2 	bl	80128d4 <osMutexNew>
 8003550:	4602      	mov	r2, r0
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <main+0x1ac>)
 8003554:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <main+0x1b0>)
 8003558:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800355c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8003562:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003566:	4618      	mov	r0, r3
 8003568:	f00f f9b4 	bl	80128d4 <osMutexNew>
 800356c:	4602      	mov	r2, r0
 800356e:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <main+0x1b4>)
 8003570:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003572:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <main+0x1b8>)
 8003574:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800357a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex = osMutexNew(&sb3_mutex_attr);
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f00f f9a6 	bl	80128d4 <osMutexNew>
 8003588:	4602      	mov	r2, r0
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <main+0x1bc>)
 800358c:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <main+0x1c0>)
 8003590:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex = osMutexNew(&state_est_mutex_attr);
 800359a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359e:	4618      	mov	r0, r3
 80035a0:	f00f f998 	bl	80128d4 <osMutexNew>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <main+0x1c4>)
 80035a8:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <main+0x1c8>)
 80035ac:	f107 0420 	add.w	r4, r7, #32
 80035b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex = osMutexNew(&controller_mutex_attr);
 80035b6:	f107 0320 	add.w	r3, r7, #32
 80035ba:	4618      	mov	r0, r3
 80035bc:	f00f f98a 	bl	80128d4 <osMutexNew>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <main+0x1cc>)
 80035c4:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <main+0x1d0>)
 80035c8:	f107 0410 	add.w	r4, r7, #16
 80035cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex = osMutexNew(&fsm_mutex_attr);
 80035d2:	f107 0310 	add.w	r3, r7, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00f f97c 	bl	80128d4 <osMutexNew>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <main+0x1d4>)
 80035e0:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <main+0x1d8>)
 80035e4:	463c      	mov	r4, r7
 80035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex = osMutexNew(&environment_mutex_attr);
 80035ec:	463b      	mov	r3, r7
 80035ee:	4618      	mov	r0, r3
 80035f0:	f00f f970 	bl	80128d4 <osMutexNew>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <main+0x1dc>)
 80035f8:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2196      	movs	r1, #150	; 0x96
 80035fe:	2080      	movs	r0, #128	; 0x80
 8003600:	f00f fc72 	bl	8012ee8 <osMessageQueueNew>
 8003604:	4602      	mov	r2, r0
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <main+0x1e0>)
 8003608:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <main+0x1e4>)
 800360c:	2100      	movs	r1, #0
 800360e:	4831      	ldr	r0, [pc, #196]	; (80036d4 <main+0x1e8>)
 8003610:	f00f f84c 	bl	80126ac <osThreadNew>
 8003614:	4602      	mov	r2, r0
 8003616:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <main+0x1ec>)
 8003618:	601a      	str	r2, [r3, #0]

	/* creation of task_state_est */
	task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800361a:	4a30      	ldr	r2, [pc, #192]	; (80036dc <main+0x1f0>)
 800361c:	2100      	movs	r1, #0
 800361e:	4830      	ldr	r0, [pc, #192]	; (80036e0 <main+0x1f4>)
 8003620:	f00f f844 	bl	80126ac <osThreadNew>
 8003624:	4602      	mov	r2, r0
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <main+0x1f8>)
 8003628:	601a      	str	r2, [r3, #0]

	/* creation of task_controller */
	task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800362a:	4a2f      	ldr	r2, [pc, #188]	; (80036e8 <main+0x1fc>)
 800362c:	2100      	movs	r1, #0
 800362e:	482f      	ldr	r0, [pc, #188]	; (80036ec <main+0x200>)
 8003630:	f00f f83c 	bl	80126ac <osThreadNew>
 8003634:	4602      	mov	r2, r0
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <main+0x204>)
 8003638:	601a      	str	r2, [r3, #0]

	/* creation of task_sens_read */
	task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800363a:	4a2e      	ldr	r2, [pc, #184]	; (80036f4 <main+0x208>)
 800363c:	2100      	movs	r1, #0
 800363e:	482e      	ldr	r0, [pc, #184]	; (80036f8 <main+0x20c>)
 8003640:	f00f f834 	bl	80126ac <osThreadNew>
 8003644:	4602      	mov	r2, r0
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <main+0x210>)
 8003648:	601a      	str	r2, [r3, #0]

	/* creation of task_sd_card */
	task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800364a:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <main+0x214>)
 800364c:	2100      	movs	r1, #0
 800364e:	482d      	ldr	r0, [pc, #180]	; (8003704 <main+0x218>)
 8003650:	f00f f82c 	bl	80126ac <osThreadNew>
 8003654:	4602      	mov	r2, r0
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <main+0x21c>)
 8003658:	601a      	str	r2, [r3, #0]

	/* creation of task_motor_cont */
	task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800365a:	4a2c      	ldr	r2, [pc, #176]	; (800370c <main+0x220>)
 800365c:	2100      	movs	r1, #0
 800365e:	482c      	ldr	r0, [pc, #176]	; (8003710 <main+0x224>)
 8003660:	f00f f824 	bl	80126ac <osThreadNew>
 8003664:	4602      	mov	r2, r0
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <main+0x228>)
 8003668:	601a      	str	r2, [r3, #0]

	/* creation of tas_fsm */
	tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 800366a:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <main+0x22c>)
 800366c:	2100      	movs	r1, #0
 800366e:	482b      	ldr	r0, [pc, #172]	; (800371c <main+0x230>)
 8003670:	f00f f81c 	bl	80126ac <osThreadNew>
 8003674:	4602      	mov	r2, r0
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <main+0x234>)
 8003678:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800367a:	f00e ffaf 	bl	80125dc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800367e:	e7fe      	b.n	800367e <main+0x192>
 8003680:	e0042000 	.word	0xe0042000
 8003684:	07e01bff 	.word	0x07e01bff
 8003688:	00070003 	.word	0x00070003
 800368c:	200002b0 	.word	0x200002b0
 8003690:	200002c0 	.word	0x200002c0
 8003694:	08019ae8 	.word	0x08019ae8
 8003698:	2000883c 	.word	0x2000883c
 800369c:	08019b04 	.word	0x08019b04
 80036a0:	20008844 	.word	0x20008844
 80036a4:	08019b20 	.word	0x08019b20
 80036a8:	20008840 	.word	0x20008840
 80036ac:	08019b40 	.word	0x08019b40
 80036b0:	2000aaf0 	.word	0x2000aaf0
 80036b4:	08019b64 	.word	0x08019b64
 80036b8:	2000aa84 	.word	0x2000aa84
 80036bc:	08019b80 	.word	0x08019b80
 80036c0:	2000884c 	.word	0x2000884c
 80036c4:	08019ba4 	.word	0x08019ba4
 80036c8:	20008994 	.word	0x20008994
 80036cc:	20010c70 	.word	0x20010c70
 80036d0:	08019ed8 	.word	0x08019ed8
 80036d4:	08003b71 	.word	0x08003b71
 80036d8:	20008848 	.word	0x20008848
 80036dc:	08019efc 	.word	0x08019efc
 80036e0:	08004b81 	.word	0x08004b81
 80036e4:	2000aa8c 	.word	0x2000aa8c
 80036e8:	08019f20 	.word	0x08019f20
 80036ec:	080042a9 	.word	0x080042a9
 80036f0:	20014d8c 	.word	0x20014d8c
 80036f4:	08019f44 	.word	0x08019f44
 80036f8:	08004acd 	.word	0x08004acd
 80036fc:	20008a1c 	.word	0x20008a1c
 8003700:	08019f68 	.word	0x08019f68
 8003704:	08004739 	.word	0x08004739
 8003708:	20008934 	.word	0x20008934
 800370c:	08019f8c 	.word	0x08019f8c
 8003710:	08004609 	.word	0x08004609
 8003714:	2000aa88 	.word	0x2000aa88
 8003718:	08019fb0 	.word	0x08019fb0
 800371c:	0800449d 	.word	0x0800449d
 8003720:	2000aa90 	.word	0x2000aa90

08003724 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b0b4      	sub	sp, #208	; 0xd0
 8003728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800372a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800372e:	2230      	movs	r2, #48	; 0x30
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f013 fcc1 	bl	80170ba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	2284      	movs	r2, #132	; 0x84
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f013 fcb2 	bl	80170ba <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <SystemClock_Config+0x118>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a38      	ldr	r2, [pc, #224]	; (800383c <SystemClock_Config+0x118>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <SystemClock_Config+0x118>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <SystemClock_Config+0x11c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003776:	4a32      	ldr	r2, [pc, #200]	; (8003840 <SystemClock_Config+0x11c>)
 8003778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <SystemClock_Config+0x11c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800378a:	2301      	movs	r3, #1
 800378c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800379e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 80037a6:	2304      	movs	r3, #4
 80037a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 168;
 80037ac:	23a8      	movs	r3, #168	; 0xa8
 80037ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80037b8:	2307      	movs	r3, #7
 80037ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 fcfe 	bl	80071c4 <HAL_RCC_OscConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0xae>
	{
		Error_Handler();
 80037ce:	f000 f9eb 	bl	8003ba8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d2:	230f      	movs	r3, #15
 80037d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80037f8:	2105      	movs	r1, #5
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 ff86 	bl	800770c <HAL_RCC_ClockConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <SystemClock_Config+0xe6>
	{
		Error_Handler();
 8003806:	f000 f9cf 	bl	8003ba8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <SystemClock_Config+0x120>)
 800380c:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800380e:	2300      	movs	r3, #0
 8003810:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003812:	2300      	movs	r3, #0
 8003814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	4618      	mov	r0, r3
 8003824:	f004 f99c 	bl	8007b60 <HAL_RCCEx_PeriphCLKConfig>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <SystemClock_Config+0x10e>
	{
		Error_Handler();
 800382e:	f000 f9bb 	bl	8003ba8 <Error_Handler>
	}
}
 8003832:	bf00      	nop
 8003834:	37d0      	adds	r7, #208	; 0xd0
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	00a01000 	.word	0x00a01000

08003848 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <MX_SDMMC1_SD_Init+0x3c>)
 8003850:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 800386c:	2200      	movs	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <MX_SDMMC1_SD_Init+0x38>)
 8003872:	2200      	movs	r2, #0
 8003874:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	20008998 	.word	0x20008998
 8003884:	40012c00 	.word	0x40012c00

08003888 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <MX_SPI1_Init+0x68>)
 800388e:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <MX_SPI1_Init+0x6c>)
 8003890:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <MX_SPI1_Init+0x68>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <MX_SPI1_Init+0x68>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038d8:	2200      	movs	r2, #0
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <MX_SPI1_Init+0x68>)
 80038de:	f005 ffeb 	bl	80098b8 <HAL_SPI_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_SPI1_Init+0x64>
	{
		Error_Handler();
 80038e8:	f000 f95e 	bl	8003ba8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20010c0c 	.word	0x20010c0c
 80038f4:	40013000 	.word	0x40013000

080038f8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <MX_SPI2_Init+0x68>)
 80038fe:	4a19      	ldr	r2, [pc, #100]	; (8003964 <MX_SPI2_Init+0x6c>)
 8003900:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <MX_SPI2_Init+0x68>)
 8003904:	2200      	movs	r2, #0
 8003906:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <MX_SPI2_Init+0x68>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <MX_SPI2_Init+0x68>)
 8003910:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003914:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <MX_SPI2_Init+0x68>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <MX_SPI2_Init+0x68>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <MX_SPI2_Init+0x68>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <MX_SPI2_Init+0x68>)
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <MX_SPI2_Init+0x68>)
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <MX_SPI2_Init+0x68>)
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <MX_SPI2_Init+0x68>)
 800393c:	2207      	movs	r2, #7
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <MX_SPI2_Init+0x68>)
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <MX_SPI2_Init+0x68>)
 8003948:	2200      	movs	r2, #0
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <MX_SPI2_Init+0x68>)
 800394e:	f005 ffb3 	bl	80098b8 <HAL_SPI_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_SPI2_Init+0x64>
	{
		Error_Handler();
 8003958:	f000 f926 	bl	8003ba8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20008850 	.word	0x20008850
 8003964:	40003800 	.word	0x40003800

08003968 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_SPI3_Init+0x68>)
 800396e:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <MX_SPI3_Init+0x6c>)
 8003970:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <MX_SPI3_Init+0x68>)
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_SPI3_Init+0x68>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800397e:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <MX_SPI3_Init+0x68>)
 8003980:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003984:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_SPI3_Init+0x68>)
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <MX_SPI3_Init+0x68>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_SPI3_Init+0x68>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <MX_SPI3_Init+0x68>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	; (80039d0 <MX_SPI3_Init+0x68>)
 80039be:	f005 ff7b 	bl	80098b8 <HAL_SPI_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_SPI3_Init+0x64>
	{
		Error_Handler();
 80039c8:	f000 f8ee 	bl	8003ba8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000aa20 	.word	0x2000aa20
 80039d4:	40003c00 	.word	0x40003c00

080039d8 <MX_UART7_Init>:
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <MX_UART7_Init+0x68>)
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <MX_UART7_Init+0x6c>)
 80039e0:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <MX_UART7_Init+0x68>)
 80039e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039e8:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <MX_UART7_Init+0x68>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <MX_UART7_Init+0x68>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <MX_UART7_Init+0x68>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <MX_UART7_Init+0x68>)
 80039fe:	220c      	movs	r2, #12
 8003a00:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a16:	2230      	movs	r2, #48	; 0x30
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
	huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a28:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart7) != HAL_OK)
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <MX_UART7_Init+0x68>)
 8003a2c:	f006 fffc 	bl	800aa28 <HAL_UART_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_UART7_Init+0x62>
	{
		Error_Handler();
 8003a36:	f000 f8b7 	bl	8003ba8 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200088b4 	.word	0x200088b4
 8003a44:	40007800 	.word	0x40007800

08003a48 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <MX_DMA_Init+0x48>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <MX_DMA_Init+0x48>)
 8003a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <MX_DMA_Init+0x48>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2105      	movs	r1, #5
 8003a6a:	203b      	movs	r0, #59	; 0x3b
 8003a6c:	f001 fc40 	bl	80052f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003a70:	203b      	movs	r0, #59	; 0x3b
 8003a72:	f001 fc59 	bl	8005328 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2105      	movs	r1, #5
 8003a7a:	2045      	movs	r0, #69	; 0x45
 8003a7c:	f001 fc38 	bl	80052f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003a80:	2045      	movs	r0, #69	; 0x45
 8003a82:	f001 fc51 	bl	8005328 <HAL_NVIC_EnableIRQ>

}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800

08003a94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9a:	f107 031c 	add.w	r3, r7, #28
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a28      	ldr	r2, [pc, #160]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b10:	f043 0310 	orr.w	r3, r3, #16
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <MX_GPIO_Init+0xd4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	480b      	ldr	r0, [pc, #44]	; (8003b6c <MX_GPIO_Init+0xd8>)
 8003b40:	f002 f94e 	bl	8005de0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8003b44:	2308      	movs	r3, #8
 8003b46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4804      	ldr	r0, [pc, #16]	; (8003b6c <MX_GPIO_Init+0xd8>)
 8003b5c:	f001 ff96 	bl	8005a8c <HAL_GPIO_Init>

}
 8003b60:	bf00      	nop
 8003b62:	3730      	adds	r7, #48	; 0x30
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020800 	.word	0x40020800

08003b70 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8003b78:	f012 fd18 	bl	80165ac <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f00e fe3b 	bl	80127f8 <osDelay>
 8003b82:	e7fb      	b.n	8003b7c <StartDefaultTask+0xc>

08003b84 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003b96:	f001 fab1 	bl	80050fc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000

08003ba8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_MspInit+0x4c>)
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_MspInit+0x4c>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	210f      	movs	r1, #15
 8003bf2:	f06f 0001 	mvn.w	r0, #1
 8003bf6:	f001 fb7b 	bl	80052f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_SD_MspInit+0x1b4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f040 80c3 	bne.w	8003db2 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c2c:	4b64      	ldr	r3, [pc, #400]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	4a63      	ldr	r2, [pc, #396]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c36:	6453      	str	r3, [r2, #68]	; 0x44
 8003c38:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c44:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	4a5d      	ldr	r2, [pc, #372]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c50:	4b5b      	ldr	r3, [pc, #364]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5c:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4a57      	ldr	r2, [pc, #348]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c62:	f043 0308 	orr.w	r3, r3, #8
 8003c66:	6313      	str	r3, [r2, #48]	; 0x30
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_SD_MspInit+0x1b8>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003c74:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c86:	230c      	movs	r3, #12
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4619      	mov	r1, r3
 8003c90:	484c      	ldr	r0, [pc, #304]	; (8003dc4 <HAL_SD_MspInit+0x1bc>)
 8003c92:	f001 fefb 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c96:	2304      	movs	r3, #4
 8003c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4845      	ldr	r0, [pc, #276]	; (8003dc8 <HAL_SD_MspInit+0x1c0>)
 8003cb2:	f001 feeb 	bl	8005a8c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cb8:	4a45      	ldr	r2, [pc, #276]	; (8003dd0 <HAL_SD_MspInit+0x1c8>)
 8003cba:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cc2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cd6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cd8:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cde:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ce6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cea:	2220      	movs	r2, #32
 8003cec:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003cf4:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003d02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d08:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003d0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003d10:	482e      	ldr	r0, [pc, #184]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003d12:	f001 fb17 	bl	8005344 <HAL_DMA_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003d1c:	f7ff ff44 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
 8003d26:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <HAL_SD_MspInit+0x1c4>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003d2c:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <HAL_SD_MspInit+0x1d0>)
 8003d30:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d38:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d4c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d5c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d60:	2220      	movs	r2, #32
 8003d62:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d72:	2203      	movs	r2, #3
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003d86:	4813      	ldr	r0, [pc, #76]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d88:	f001 fadc 	bl	8005344 <HAL_DMA_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003d92:	f7ff ff09 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	; (8003dd4 <HAL_SD_MspInit+0x1cc>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2105      	movs	r1, #5
 8003da6:	2031      	movs	r0, #49	; 0x31
 8003da8:	f001 faa2 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003dac:	2031      	movs	r0, #49	; 0x31
 8003dae:	f001 fabb 	bl	8005328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003db2:	bf00      	nop
 8003db4:	3728      	adds	r7, #40	; 0x28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40020800 	.word	0x40020800
 8003dc8:	40020c00 	.word	0x40020c00
 8003dcc:	2000cbac 	.word	0x2000cbac
 8003dd0:	40026458 	.word	0x40026458
 8003dd4:	20014d2c 	.word	0x20014d2c
 8003dd8:	400264a0 	.word	0x400264a0

08003ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a68      	ldr	r2, [pc, #416]	; (8003f9c <HAL_SPI_MspInit+0x1c0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d131      	bne.n	8003e62 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dfe:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	4a67      	ldr	r2, [pc, #412]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e08:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8003e2e:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e40:	2305      	movs	r3, #5
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4856      	ldr	r0, [pc, #344]	; (8003fa4 <HAL_SPI_MspInit+0x1c8>)
 8003e4c:	f001 fe1e 	bl	8005a8c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	2105      	movs	r1, #5
 8003e54:	2023      	movs	r0, #35	; 0x23
 8003e56:	f001 fa4b 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e5a:	2023      	movs	r0, #35	; 0x23
 8003e5c:	f001 fa64 	bl	8005328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003e60:	e097      	b.n	8003f92 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_SPI_MspInit+0x1cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d131      	bne.n	8003ed0 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4a45      	ldr	r2, [pc, #276]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e8a:	f043 0302 	orr.w	r3, r3, #2
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	483c      	ldr	r0, [pc, #240]	; (8003fac <HAL_SPI_MspInit+0x1d0>)
 8003eba:	f001 fde7 	bl	8005a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	2024      	movs	r0, #36	; 0x24
 8003ec4:	f001 fa14 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003ec8:	2024      	movs	r0, #36	; 0x24
 8003eca:	f001 fa2d 	bl	8005328 <HAL_NVIC_EnableIRQ>
}
 8003ece:	e060      	b.n	8003f92 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a36      	ldr	r2, [pc, #216]	; (8003fb0 <HAL_SPI_MspInit+0x1d4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d15b      	bne.n	8003f92 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a30      	ldr	r2, [pc, #192]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee6:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_SPI_MspInit+0x1c4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f22:	2310      	movs	r3, #16
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f32:	2306      	movs	r3, #6
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4819      	ldr	r0, [pc, #100]	; (8003fa4 <HAL_SPI_MspInit+0x1c8>)
 8003f3e:	f001 fda5 	bl	8005a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f42:	2304      	movs	r3, #4
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003f52:	2307      	movs	r3, #7
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4813      	ldr	r0, [pc, #76]	; (8003fac <HAL_SPI_MspInit+0x1d0>)
 8003f5e:	f001 fd95 	bl	8005a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003f62:	2318      	movs	r3, #24
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f72:	2306      	movs	r3, #6
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480b      	ldr	r0, [pc, #44]	; (8003fac <HAL_SPI_MspInit+0x1d0>)
 8003f7e:	f001 fd85 	bl	8005a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2105      	movs	r1, #5
 8003f86:	2033      	movs	r0, #51	; 0x33
 8003f88:	f001 f9b2 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f8c:	2033      	movs	r0, #51	; 0x33
 8003f8e:	f001 f9cb 	bl	8005328 <HAL_NVIC_EnableIRQ>
}
 8003f92:	bf00      	nop
 8003f94:	3738      	adds	r7, #56	; 0x38
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40013000 	.word	0x40013000
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40020400 	.word	0x40020400
 8003fb0:	40003c00 	.word	0x40003c00

08003fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_UART_MspInit+0x8c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d130      	bne.n	8004038 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003ff4:	f043 0310 	orr.w	r3, r3, #16
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_UART_MspInit+0x90>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004006:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800400a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004018:	2308      	movs	r3, #8
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4619      	mov	r1, r3
 8004022:	4809      	ldr	r0, [pc, #36]	; (8004048 <HAL_UART_MspInit+0x94>)
 8004024:	f001 fd32 	bl	8005a8c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004028:	2200      	movs	r2, #0
 800402a:	2105      	movs	r1, #5
 800402c:	2052      	movs	r0, #82	; 0x52
 800402e:	f001 f95f 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004032:	2052      	movs	r0, #82	; 0x52
 8004034:	f001 f978 	bl	8005328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8004038:	bf00      	nop
 800403a:	3728      	adds	r7, #40	; 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40007800 	.word	0x40007800
 8004044:	40023800 	.word	0x40023800
 8004048:	40021000 	.word	0x40021000

0800404c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800405c:	2200      	movs	r2, #0
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	2019      	movs	r0, #25
 8004062:	f001 f945 	bl	80052f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004066:	2019      	movs	r0, #25
 8004068:	f001 f95e 	bl	8005328 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_InitTick+0xa0>)
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_InitTick+0xa0>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6453      	str	r3, [r2, #68]	; 0x44
 8004078:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_InitTick+0xa0>)
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004084:	f107 0210 	add.w	r2, r7, #16
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f003 fd34 	bl	8007afc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004094:	f003 fd1e 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8004098:	4603      	mov	r3, r0
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <HAL_InitTick+0xa4>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	0c9b      	lsrs	r3, r3, #18
 80040a8:	3b01      	subs	r3, #1
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_InitTick+0xa8>)
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <HAL_InitTick+0xac>)
 80040b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_InitTick+0xa8>)
 80040b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_InitTick+0xa8>)
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_InitTick+0xa8>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_InitTick+0xa8>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80040cc:	4809      	ldr	r0, [pc, #36]	; (80040f4 <HAL_InitTick+0xa8>)
 80040ce:	f006 fa46 	bl	800a55e <HAL_TIM_Base_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80040d8:	4806      	ldr	r0, [pc, #24]	; (80040f4 <HAL_InitTick+0xa8>)
 80040da:	f006 fa75 	bl	800a5c8 <HAL_TIM_Base_Start_IT>
 80040de:	4603      	mov	r3, r0
 80040e0:	e000      	b.n	80040e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3730      	adds	r7, #48	; 0x30
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	431bde83 	.word	0x431bde83
 80040f4:	20014d90 	.word	0x20014d90
 80040f8:	40010000 	.word	0x40010000

080040fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410e:	e7fe      	b.n	800410e <HardFault_Handler+0x4>

08004110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004114:	e7fe      	b.n	8004114 <MemManage_Handler+0x4>

08004116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800411a:	e7fe      	b.n	800411a <BusFault_Handler+0x4>

0800411c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004120:	e7fe      	b.n	8004120 <UsageFault_Handler+0x4>

08004122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004136:	f006 fa71 	bl	800a61c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20014d90 	.word	0x20014d90

08004144 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <SPI1_IRQHandler+0x10>)
 800414a:	f005 fd9f 	bl	8009c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20010c0c 	.word	0x20010c0c

08004158 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <SPI2_IRQHandler+0x10>)
 800415e:	f005 fd95 	bl	8009c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20008850 	.word	0x20008850

0800416c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <SDMMC1_IRQHandler+0x10>)
 8004172:	f004 fb1d 	bl	80087b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20008998 	.word	0x20008998

08004180 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <SPI3_IRQHandler+0x10>)
 8004186:	f005 fd81 	bl	8009c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2000aa20 	.word	0x2000aa20

08004194 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <DMA2_Stream3_IRQHandler+0x10>)
 800419a:	f001 fa03 	bl	80055a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000cbac 	.word	0x2000cbac

080041a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041ac:	4802      	ldr	r0, [pc, #8]	; (80041b8 <OTG_FS_IRQHandler+0x10>)
 80041ae:	f001 ff90 	bl	80060d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20016bb8 	.word	0x20016bb8

080041bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <DMA2_Stream6_IRQHandler+0x10>)
 80041c2:	f001 f9ef 	bl	80055a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20014d2c 	.word	0x20014d2c

080041d0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <UART7_IRQHandler+0x10>)
 80041d6:	f006 fdd3 	bl	800ad80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200088b4 	.word	0x200088b4

080041e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <_sbrk+0x50>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <_sbrk+0x16>
		heap_end = &end;
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <_sbrk+0x50>)
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <_sbrk+0x54>)
 80041f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <_sbrk+0x50>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <_sbrk+0x50>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	466a      	mov	r2, sp
 800420a:	4293      	cmp	r3, r2
 800420c:	d907      	bls.n	800421e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800420e:	f012 ff0f 	bl	8017030 <__errno>
 8004212:	4602      	mov	r2, r0
 8004214:	230c      	movs	r3, #12
 8004216:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	e006      	b.n	800422c <_sbrk+0x48>
	}

	heap_end += incr;
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <_sbrk+0x50>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	4a03      	ldr	r2, [pc, #12]	; (8004234 <_sbrk+0x50>)
 8004228:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200002cc 	.word	0x200002cc
 8004238:	20016fc0 	.word	0x20016fc0

0800423c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004240:	4b15      	ldr	r3, [pc, #84]	; (8004298 <SystemInit+0x5c>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <SystemInit+0x5c>)
 8004248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800424c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <SystemInit+0x60>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <SystemInit+0x60>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <SystemInit+0x60>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <SystemInit+0x60>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	490d      	ldr	r1, [pc, #52]	; (800429c <SystemInit+0x60>)
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <SystemInit+0x64>)
 800426a:	4013      	ands	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <SystemInit+0x60>)
 8004270:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <SystemInit+0x68>)
 8004272:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <SystemInit+0x60>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <SystemInit+0x60>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <SystemInit+0x60>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <SystemInit+0x5c>)
 8004288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800428c:	609a      	str	r2, [r3, #8]
#endif
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000ed00 	.word	0xe000ed00
 800429c:	40023800 	.word	0x40023800
 80042a0:	fef6ffff 	.word	0xfef6ffff
 80042a4:	24003010 	.word	0x24003010

080042a8 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_placeholder;
    flight_phase_detection_t flight_phase_detection_placeholder = { 0 };
 80042b4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 80042c0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	4618      	mov	r0, r3
 80042d2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80042d6:	461a      	mov	r2, r3
 80042d8:	2100      	movs	r1, #0
 80042da:	f012 feee 	bl	80170ba <memset>
    control_data_init(&control_data);
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd f950 	bl	8001588 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80042e8:	f00e f9ae 	bl	8012648 <osKernelGetTickCount>
 80042ec:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80042f0:	f00e f9d2 	bl	8012698 <osKernelGetTickFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b60      	ldr	r3, [pc, #384]	; (8004478 <vTaskController+0x1d0>)
 80042f8:	fba3 2302 	umull	r2, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004302:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8004306:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800430a:	4413      	add	r3, r2
 800430c:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		/* Update Sensor Fusion Variables */
		if (osMutexGetOwner(state_est_mutex) == NULL) {
 8004310:	4b5a      	ldr	r3, [pc, #360]	; (800447c <vTaskController+0x1d4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f00e fc25 	bl	8012b64 <osMutexGetOwner>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d12b      	bne.n	8004378 <vTaskController+0xd0>
			state_placeholder.position_world[2] = state_est_data_global.position_world[2];
 8004320:	4b57      	ldr	r3, [pc, #348]	; (8004480 <vTaskController+0x1d8>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
			state_placeholder.velocity_world[2] = state_est_data_global.velocity_world[2];
 8004328:	4b55      	ldr	r3, [pc, #340]	; (8004480 <vTaskController+0x1d8>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
			if (osMutexGetOwner(state_est_mutex) == NULL) {
 8004330:	4b52      	ldr	r3, [pc, #328]	; (800447c <vTaskController+0x1d4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f00e fc15 	bl	8012b64 <osMutexGetOwner>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11b      	bne.n	8004378 <vTaskController+0xd0>
				control_data.sf_ref_altitude_AGL = ((float)state_placeholder.position_world[2]) / 1000;
 8004340:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800434c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004484 <vTaskController+0x1dc>
 8004350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004354:	f107 0308 	add.w	r3, r7, #8
 8004358:	edc3 7a03 	vstr	s15, [r3, #12]
				control_data.sf_velocity = ((float)state_placeholder.velocity_world[2]) / 1000;
 800435c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004368:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004484 <vTaskController+0x1dc>
 800436c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	edc3 7a04 	vstr	s15, [r3, #16]
			}
		}

		/* update flight Phase */
		if (osMutexGetOwner(fsm_mutex) == NULL) {
 8004378:	4b43      	ldr	r3, [pc, #268]	; (8004488 <vTaskController+0x1e0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f00e fbf1 	bl	8012b64 <osMutexGetOwner>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d122      	bne.n	80043ce <vTaskController+0x126>
			flight_phase_detection_placeholder.flight_phase = global_flight_phase_detection.flight_phase;
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <vTaskController+0x1e4>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
			flight_phase_detection_placeholder.mach_regime = global_flight_phase_detection.mach_regime;
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <vTaskController+0x1e4>)
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
			flight_phase_detection_placeholder.mach_number = global_flight_phase_detection.mach_number;
 8004398:	4b3c      	ldr	r3, [pc, #240]	; (800448c <vTaskController+0x1e4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80043a0:	6013      	str	r3, [r2, #0]
			if (osMutexGetOwner(fsm_mutex) == NULL) {
 80043a2:	4b39      	ldr	r3, [pc, #228]	; (8004488 <vTaskController+0x1e0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00e fbdc 	bl	8012b64 <osMutexGetOwner>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <vTaskController+0x126>
				current_flight_phase_detection.flight_phase = flight_phase_detection_placeholder.flight_phase;
 80043b2:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 80043b6:	f887 342c 	strb.w	r3, [r7, #1068]	; 0x42c
				current_flight_phase_detection.mach_regime = flight_phase_detection_placeholder.mach_regime;
 80043ba:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 80043be:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
				current_flight_phase_detection.mach_number = flight_phase_detection_placeholder.mach_number;
 80043c2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 80043cc:	6013      	str	r3, [r2, #0]
		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
        }
        else {
            compute_test_control_input(&control_data);
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd f90a 	bl	80015ec <compute_test_control_input>
        }
		/* Write Control Input into Global Variable */
		if (osMutexAcquire(controller_mutex, 10) == osOK) {
 80043d8:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <vTaskController+0x1e8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	210a      	movs	r1, #10
 80043de:	4618      	mov	r0, r3
 80043e0:	f00e fb12 	bl	8012a08 <osMutexAcquire>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d112      	bne.n	8004410 <vTaskController+0x168>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	edd3 7a00 	vldr	s15, [r3]
 80043f2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004484 <vTaskController+0x1dc>
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043fe:	ee17 2a90 	vmov	r2, s15
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <vTaskController+0x1ec>)
 8004404:	601a      	str	r2, [r3, #0]
			osMutexRelease(controller_mutex);
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <vTaskController+0x1e8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f00e fb5a 	bl	8012ac4 <osMutexRelease>
		}

		/* Log to SD Card */

		logControllerOutput(osKernelGetTickCount(), (int32_t)(control_data.control_input * 1000), (int32_t)((float)control_data.reference_error)/1000, (int32_t)((float)control_data.integrated_error)/1000);
 8004410:	f00e f91a 	bl	8012648 <osKernelGetTickCount>
 8004414:	4604      	mov	r4, r0
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004484 <vTaskController+0x1dc>
 8004422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004426:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004436:	ee17 1a90 	vmov	r1, s15
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <vTaskController+0x1f0>)
 800443c:	fb83 2301 	smull	r2, r3, r3, r1
 8004440:	119a      	asrs	r2, r3, #6
 8004442:	17cb      	asrs	r3, r1, #31
 8004444:	1ad0      	subs	r0, r2, r3
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	edd3 7a02 	vldr	s15, [r3, #8]
 800444e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004452:	ee17 1a90 	vmov	r1, s15
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <vTaskController+0x1f0>)
 8004458:	fb83 2301 	smull	r2, r3, r3, r1
 800445c:	119a      	asrs	r2, r3, #6
 800445e:	17cb      	asrs	r3, r1, #31
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	4602      	mov	r2, r0
 8004464:	ee17 1a10 	vmov	r1, s14
 8004468:	4620      	mov	r0, r4
 800446a:	f7fe ffd7 	bl	800341c <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 800446e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8004472:	f00e f9ef 	bl	8012854 <osDelayUntil>
		tick_count += tick_update;
 8004476:	e744      	b.n	8004302 <vTaskController+0x5a>
 8004478:	51eb851f 	.word	0x51eb851f
 800447c:	2000aaf0 	.word	0x2000aaf0
 8004480:	20000270 	.word	0x20000270
 8004484:	447a0000 	.word	0x447a0000
 8004488:	2000884c 	.word	0x2000884c
 800448c:	200002c0 	.word	0x200002c0
 8004490:	2000aa84 	.word	0x2000aa84
 8004494:	200002ac 	.word	0x200002ac
 8004498:	10624dd3 	.word	0x10624dd3

0800449c <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 800449c:	b5b0      	push	{r4, r5, r7, lr}
 800449e:	b0ae      	sub	sp, #184	; 0xb8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80044a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 80044b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fb81 	bl	8001bbc <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 80044ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044be:	223c      	movs	r2, #60	; 0x3c
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f012 fdf9 	bl	80170ba <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 80044c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044cc:	223c      	movs	r2, #60	; 0x3c
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f012 fdf2 	bl	80170ba <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd f8b0 	bl	8001640 <init_env>
	init_env(&environment);
 80044e0:	f107 031c 	add.w	r3, r7, #28
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd f8ab 	bl	8001640 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80044ea:	f00e f8ad 	bl	8012648 <osKernelGetTickCount>
 80044ee:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80044f2:	f00e f8d1 	bl	8012698 <osKernelGetTickFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b3c      	ldr	r3, [pc, #240]	; (80045ec <vTaskFSM+0x150>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004504:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800450c:	4413      	add	r3, r2
 800450e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <vTaskFSM+0x154>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f00e fb24 	bl	8012b64 <osMutexGetOwner>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d123      	bne.n	800456a <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data_global;
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <vTaskFSM+0x158>)
 8004524:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004528:	461d      	mov	r5, r3
 800452a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800453a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 800453e:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <vTaskFSM+0x154>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f00e fb0e 	bl	8012b64 <osMutexGetOwner>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 800454e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004552:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8004556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <vTaskFSM+0x15c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f00e faf8 	bl	8012b64 <osMutexGetOwner>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <vTaskFSM+0x108>
			dummy_env = global_env;
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <vTaskFSM+0x160>)
 800457c:	f107 040c 	add.w	r4, r7, #12
 8004580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <vTaskFSM+0x154>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f00e faea 	bl	8012b64 <osMutexGetOwner>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <vTaskFSM+0x108>
				environment = dummy_env;
 8004596:	f107 041c 	add.w	r4, r7, #28
 800459a:	f107 030c 	add.w	r3, r7, #12
 800459e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 80045a4:	f107 021c 	add.w	r2, r7, #28
 80045a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80045ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fa01 	bl	80019b8 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <vTaskFSM+0x164>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	210a      	movs	r1, #10
 80045bc:	4618      	mov	r0, r3
 80045be:	f00e fa23 	bl	8012a08 <osMutexAcquire>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10c      	bne.n	80045e2 <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <vTaskFSM+0x168>)
 80045ca:	461c      	mov	r4, r3
 80045cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <vTaskFSM+0x164>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f00e fa71 	bl	8012ac4 <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 80045e2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80045e6:	f00e f935 	bl	8012854 <osDelayUntil>
		tick_count += tick_update;
 80045ea:	e78b      	b.n	8004504 <vTaskFSM+0x68>
 80045ec:	cccccccd 	.word	0xcccccccd
 80045f0:	2000aaf0 	.word	0x2000aaf0
 80045f4:	20000270 	.word	0x20000270
 80045f8:	20008994 	.word	0x20008994
 80045fc:	200002b0 	.word	0x200002b0
 8004600:	2000884c 	.word	0x2000884c
 8004604:	200002c0 	.word	0x200002c0

08004608 <vTaskMotorCont>:
 */

#include "tasks/task_motor_control.h"


void vTaskMotorCont(void *argument) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	; 0x38
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8004610:	2300      	movs	r3, #0
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int32_t PPM_velocity = 4000;
 800461a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800461e:	623b      	str	r3, [r7, #32]
	int32_t PPM_acceleration = 100000;
 8004620:	4b40      	ldr	r3, [pc, #256]	; (8004724 <vTaskMotorCont+0x11c>)
 8004622:	61fb      	str	r3, [r7, #28]
	int32_t PPM_deceleration = 100000;
 8004624:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <vTaskMotorCont+0x11c>)
 8004626:	61bb      	str	r3, [r7, #24]


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t controller_actuation_dummy = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

	/* Debugging Variables */
	int8_t counter = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	74fb      	strb	r3, [r7, #19]
	int32_t desired_position = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t measured_position = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 800463c:	e003      	b.n	8004646 <vTaskMotorCont+0x3e>
		osDelay(1000);
 800463e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004642:	f00e f8d9 	bl	80127f8 <osDelay>
	while(EnableMotor() != osOK){
 8004646:	f7fc fccb 	bl	8000fe0 <EnableMotor>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f6      	bne.n	800463e <vTaskMotorCont+0x36>
	};

	while(SetPositionMode(position_mode) != osOK){
 8004650:	e003      	b.n	800465a <vTaskMotorCont+0x52>
		osDelay(1000);
 8004652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004656:	f00e f8cf 	bl	80127f8 <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 800465a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fd17 	bl	8001092 <SetPositionMode>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f3      	bne.n	8004652 <vTaskMotorCont+0x4a>
	};

	if (position_mode == 0x01) {
 800466a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <vTaskMotorCont+0x76>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	69f9      	ldr	r1, [r7, #28]
 8004676:	6a38      	ldr	r0, [r7, #32]
 8004678:	f7fc fd8b 	bl	8001192 <ConfigurePPM>
 800467c:	62b8      	str	r0, [r7, #40]	; 0x28
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800467e:	f00d ffe3 	bl	8012648 <osKernelGetTickCount>
 8004682:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004684:	f00e f808 	bl	8012698 <osKernelGetTickFreq>
 8004688:	60f8      	str	r0, [r7, #12]

	for (;;) {
		tick_count += tick_update;
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
		motor_status = GetPosition(&measured_position);
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc fdf2 	bl	8001280 <GetPosition>
 800469c:	62b8      	str	r0, [r7, #40]	; 0x28


		if (osMutexGetOwner(controller_mutex) == NULL) {
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <vTaskMotorCont+0x120>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f00e fa5e 	bl	8012b64 <osMutexGetOwner>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10c      	bne.n	80046c8 <vTaskMotorCont+0xc0>
			controller_actuation_dummy = controller_output_global;
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <vTaskMotorCont+0x124>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	617b      	str	r3, [r7, #20]
			if (osMutexGetOwner(controller_mutex) == NULL) {
 80046b4:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <vTaskMotorCont+0x120>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f00e fa53 	bl	8012b64 <osMutexGetOwner>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <vTaskMotorCont+0xc0>
				controller_actuation = controller_actuation_dummy;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
			}
		}
		desired_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004730 <vTaskMotorCont+0x128>
 80046d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046da:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004734 <vTaskMotorCont+0x12c>
 80046de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e6:	ee17 3a90 	vmov	r3, s15
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(desired_position > -10){
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	f113 0f09 	cmn.w	r3, #9
 80046f2:	db02      	blt.n	80046fa <vTaskMotorCont+0xf2>
			desired_position = -10;
 80046f4:	f06f 0309 	mvn.w	r3, #9
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		if(desired_position < -135){
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	f113 0f87 	cmn.w	r3, #135	; 0x87
 8004700:	da02      	bge.n	8004708 <vTaskMotorCont+0x100>
			desired_position = -135;
 8004702:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		MoveToPositionPPM(desired_position);
 8004708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470a:	f7fc fce7 	bl	80010dc <MoveToPositionPPM>
//			desired_position = -5;
//			motor_status = MoveToPositionPPM(desired_position);
//			counter = 0;
//		}

		logMotor(osKernelGetTickCount(), desired_position, measured_position);
 800470e:	f00d ff9b 	bl	8012648 <osKernelGetTickCount>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	461a      	mov	r2, r3
 8004716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004718:	f7fe feae 	bl	8003478 <logMotor>


		osDelayUntil(tick_count);
 800471c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800471e:	f00e f899 	bl	8012854 <osDelayUntil>
		tick_count += tick_update;
 8004722:	e7b2      	b.n	800468a <vTaskMotorCont+0x82>
 8004724:	000186a0 	.word	0x000186a0
 8004728:	2000aa84 	.word	0x2000aa84
 800472c:	200002ac 	.word	0x200002ac
 8004730:	447a0000 	.word	0x447a0000
 8004734:	c30c0000 	.word	0xc30c0000

08004738 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b0cc      	sub	sp, #304	; 0x130
 800473c:	af00      	add	r7, sp, #0
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004748:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004754:	48c3      	ldr	r0, [pc, #780]	; (8004a64 <vTaskSdCard+0x32c>)
 8004756:	f7fe febb 	bl	80034d0 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 800475a:	48c3      	ldr	r0, [pc, #780]	; (8004a68 <vTaskSdCard+0x330>)
 800475c:	f7fe feb8 	bl	80034d0 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004760:	2201      	movs	r2, #1
 8004762:	49c2      	ldr	r1, [pc, #776]	; (8004a6c <vTaskSdCard+0x334>)
 8004764:	48c2      	ldr	r0, [pc, #776]	; (8004a70 <vTaskSdCard+0x338>)
 8004766:	f00c fe63 	bl	8011430 <f_mount>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8004770:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004778:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800477c:	4619      	mov	r1, r3
 800477e:	48bd      	ldr	r0, [pc, #756]	; (8004a74 <vTaskSdCard+0x33c>)
 8004780:	f7fe fea6 	bl	80034d0 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8004784:	4bbc      	ldr	r3, [pc, #752]	; (8004a78 <vTaskSdCard+0x340>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800478a:	2064      	movs	r0, #100	; 0x64
 800478c:	f00e f834 	bl	80127f8 <osDelay>
		}
	} while (res != FR_OK);
 8004790:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e3      	bne.n	8004760 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8004798:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 80a9 	bne.w	80048f4 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 80047a2:	48b6      	ldr	r0, [pc, #728]	; (8004a7c <vTaskSdCard+0x344>)
 80047a4:	f7fe fe94 	bl	80034d0 <UsbPrint>

		unsigned int file_number = 1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80047ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80047b2:	f107 0008 	add.w	r0, r7, #8
 80047b6:	4bb2      	ldr	r3, [pc, #712]	; (8004a80 <vTaskSdCard+0x348>)
 80047b8:	4aac      	ldr	r2, [pc, #688]	; (8004a6c <vTaskSdCard+0x334>)
 80047ba:	f00d fdf1 	bl	80123a0 <f_findfirst>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80047c4:	e02b      	b.n	800481e <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80047c6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80047ca:	3b30      	subs	r3, #48	; 0x30
 80047cc:	2264      	movs	r2, #100	; 0x64
 80047ce:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80047d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80047d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	18ca      	adds	r2, r1, r3
 80047e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80047e8:	3b30      	subs	r3, #48	; 0x30
 80047ea:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80047ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 80047f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80047f4:	3301      	adds	r3, #1
 80047f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d204      	bcs.n	8004808 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 80047fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004802:	3301      	adds	r3, #1
 8004804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8004808:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f00d fd9c 	bl	8012350 <f_findnext>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 800481e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <vTaskSdCard+0xf6>
 8004826:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1cb      	bne.n	80047c6 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 800482e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8004836:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800483a:	4619      	mov	r1, r3
 800483c:	4891      	ldr	r0, [pc, #580]	; (8004a84 <vTaskSdCard+0x34c>)
 800483e:	f7fe fe47 	bl	80034d0 <UsbPrint>
					res);
			goto resetSDCard;
 8004842:	e78a      	b.n	800475a <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8004844:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004848:	4a8f      	ldr	r2, [pc, #572]	; (8004a88 <vTaskSdCard+0x350>)
 800484a:	ca07      	ldmia	r2, {r0, r1, r2}
 800484c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8004850:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004854:	4b8d      	ldr	r3, [pc, #564]	; (8004a8c <vTaskSdCard+0x354>)
 8004856:	fba3 2301 	umull	r2, r3, r3, r1
 800485a:	08da      	lsrs	r2, r3, #3
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	1aca      	subs	r2, r1, r3
 8004866:	b2d3      	uxtb	r3, r2
 8004868:	3330      	adds	r3, #48	; 0x30
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8004870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004874:	4a85      	ldr	r2, [pc, #532]	; (8004a8c <vTaskSdCard+0x354>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	08d9      	lsrs	r1, r3, #3
 800487c:	4b83      	ldr	r3, [pc, #524]	; (8004a8c <vTaskSdCard+0x354>)
 800487e:	fba3 2301 	umull	r2, r3, r3, r1
 8004882:	08da      	lsrs	r2, r3, #3
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	1aca      	subs	r2, r1, r3
 800488e:	b2d3      	uxtb	r3, r2
 8004890:	3330      	adds	r3, #48	; 0x30
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8004898:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800489c:	4a7c      	ldr	r2, [pc, #496]	; (8004a90 <vTaskSdCard+0x358>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0959      	lsrs	r1, r3, #5
 80048a4:	4b79      	ldr	r3, [pc, #484]	; (8004a8c <vTaskSdCard+0x354>)
 80048a6:	fba3 2301 	umull	r2, r3, r3, r1
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	1aca      	subs	r2, r1, r3
 80048b6:	b2d3      	uxtb	r3, r2
 80048b8:	3330      	adds	r3, #48	; 0x30
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 80048c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048c4:	4619      	mov	r1, r3
 80048c6:	4873      	ldr	r0, [pc, #460]	; (8004a94 <vTaskSdCard+0x35c>)
 80048c8:	f7fe fe02 	bl	80034d0 <UsbPrint>

		res = f_closedir(&dj);
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4618      	mov	r0, r3
 80048d2:	f00d fccf 	bl	8012274 <f_closedir>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80048dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80048e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048e8:	4619      	mov	r1, r3
 80048ea:	486b      	ldr	r0, [pc, #428]	; (8004a98 <vTaskSdCard+0x360>)
 80048ec:	f7fe fdf0 	bl	80034d0 <UsbPrint>
			goto resetSDCard;
 80048f0:	bf00      	nop
 80048f2:	e732      	b.n	800475a <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 80048f4:	4869      	ldr	r0, [pc, #420]	; (8004a9c <vTaskSdCard+0x364>)
 80048f6:	f7fe fdeb 	bl	80034d0 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80048fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048fe:	2212      	movs	r2, #18
 8004900:	4619      	mov	r1, r3
 8004902:	4867      	ldr	r0, [pc, #412]	; (8004aa0 <vTaskSdCard+0x368>)
 8004904:	f00c fdf8 	bl	80114f8 <f_open>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 800490e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004912:	2b00      	cmp	r3, #0
 8004914:	d006      	beq.n	8004924 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8004916:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800491a:	4619      	mov	r1, r3
 800491c:	4861      	ldr	r0, [pc, #388]	; (8004aa4 <vTaskSdCard+0x36c>)
 800491e:	f7fe fdd7 	bl	80034d0 <UsbPrint>
		goto resetSDCard;
 8004922:	e71a      	b.n	800475a <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8004924:	4860      	ldr	r0, [pc, #384]	; (8004aa8 <vTaskSdCard+0x370>)
 8004926:	f7fe fdd3 	bl	80034d0 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800492a:	4b5d      	ldr	r3, [pc, #372]	; (8004aa0 <vTaskSdCard+0x368>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4619      	mov	r1, r3
 8004930:	485b      	ldr	r0, [pc, #364]	; (8004aa0 <vTaskSdCard+0x368>)
 8004932:	f00d f9d3 	bl	8011cdc <f_lseek>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 800493c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8004944:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004948:	4619      	mov	r1, r3
 800494a:	4858      	ldr	r0, [pc, #352]	; (8004aac <vTaskSdCard+0x374>)
 800494c:	f7fe fdc0 	bl	80034d0 <UsbPrint>
		goto resetSDCard;
 8004950:	e703      	b.n	800475a <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <vTaskSdCard+0x378>)
 800495a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800495e:	461d      	mov	r5, r3
 8004960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004968:	c407      	stmia	r4!, {r0, r1, r2}
 800496a:	8023      	strh	r3, [r4, #0]
 800496c:	3402      	adds	r4, #2
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	7023      	strb	r3, [r4, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 800497e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fc44 	bl	8000210 <strlen>
 8004988:	4602      	mov	r2, r0
 800498a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800498e:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <vTaskSdCard+0x37c>)
 8004990:	4843      	ldr	r0, [pc, #268]	; (8004aa0 <vTaskSdCard+0x368>)
 8004992:	f00c ff76 	bl	8011882 <f_write>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 800499c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80049a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049a8:	4619      	mov	r1, r3
 80049aa:	4843      	ldr	r0, [pc, #268]	; (8004ab8 <vTaskSdCard+0x380>)
 80049ac:	f7fe fd90 	bl	80034d0 <UsbPrint>
		goto resetSDCard;
 80049b0:	e6d3      	b.n	800475a <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 80049b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049b6:	2296      	movs	r2, #150	; 0x96
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f012 fb7d 	bl	80170ba <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80049c0:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <vTaskSdCard+0x384>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	2200      	movs	r2, #0
 80049ce:	f00e fb85 	bl	80130dc <osMessageQueueGet>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f3      	bne.n	80049c0 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 80049d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fc17 	bl	8000210 <strlen>
 80049e2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 80049e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d015      	beq.n	8004a1a <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80049ee:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <vTaskSdCard+0x37c>)
 80049f4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80049f8:	4829      	ldr	r0, [pc, #164]	; (8004aa0 <vTaskSdCard+0x368>)
 80049fa:	f00c ff42 	bl	8011882 <f_write>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8004a04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8004a0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a10:	4619      	mov	r1, r3
 8004a12:	4829      	ldr	r0, [pc, #164]	; (8004ab8 <vTaskSdCard+0x380>)
 8004a14:	f7fe fd5c 	bl	80034d0 <UsbPrint>
							res);
					goto resetSDCard;
 8004a18:	e69f      	b.n	800475a <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a28:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2a:	ddc9      	ble.n	80049c0 <vTaskSdCard+0x288>
				msgCounter = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004a32:	4823      	ldr	r0, [pc, #140]	; (8004ac0 <vTaskSdCard+0x388>)
 8004a34:	f7fe fd4c 	bl	80034d0 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004a38:	2108      	movs	r1, #8
 8004a3a:	4822      	ldr	r0, [pc, #136]	; (8004ac4 <vTaskSdCard+0x38c>)
 8004a3c:	f001 f9e9 	bl	8005e12 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8004a40:	4817      	ldr	r0, [pc, #92]	; (8004aa0 <vTaskSdCard+0x368>)
 8004a42:	f00d f8c2 	bl	8011bca <f_sync>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8004a4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0b5      	beq.n	80049c0 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8004a54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a58:	4619      	mov	r1, r3
 8004a5a:	481b      	ldr	r0, [pc, #108]	; (8004ac8 <vTaskSdCard+0x390>)
 8004a5c:	f7fe fd38 	bl	80034d0 <UsbPrint>
					goto resetSDCard;
 8004a60:	e67b      	b.n	800475a <vTaskSdCard+0x22>
 8004a62:	bf00      	nop
 8004a64:	08019bb4 	.word	0x08019bb4
 8004a68:	08019bdc 	.word	0x08019bdc
 8004a6c:	08019c00 	.word	0x08019c00
 8004a70:	20015000 	.word	0x20015000
 8004a74:	08019c04 	.word	0x08019c04
 8004a78:	20000320 	.word	0x20000320
 8004a7c:	08019c30 	.word	0x08019c30
 8004a80:	08019c54 	.word	0x08019c54
 8004a84:	08019c60 	.word	0x08019c60
 8004a88:	08019c98 	.word	0x08019c98
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	51eb851f 	.word	0x51eb851f
 8004a94:	08019ca4 	.word	0x08019ca4
 8004a98:	08019cc8 	.word	0x08019cc8
 8004a9c:	08019cf8 	.word	0x08019cf8
 8004aa0:	20014dd0 	.word	0x20014dd0
 8004aa4:	08019d1c 	.word	0x08019d1c
 8004aa8:	08019d48 	.word	0x08019d48
 8004aac:	08019d70 	.word	0x08019d70
 8004ab0:	08019e14 	.word	0x08019e14
 8004ab4:	20015234 	.word	0x20015234
 8004ab8:	08019da0 	.word	0x08019da0
 8004abc:	20010c70 	.word	0x20010c70
 8004ac0:	08019dcc 	.word	0x08019dcc
 8004ac4:	40020800 	.word	0x40020800
 8004ac8:	08019dec 	.word	0x08019dec

08004acc <vTaskSensRead>:
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

int32_t pressure = 101325;

void vTaskSensRead(void *argument) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004ad4:	f00d fdb8 	bl	8012648 <osKernelGetTickCount>
 8004ad8:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004ada:	f00d fddd 	bl	8012698 <osKernelGetTickFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <vTaskSensRead+0x64>)
 8004ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004aee:	2220      	movs	r2, #32
 8004af0:	4910      	ldr	r1, [pc, #64]	; (8004b34 <vTaskSensRead+0x68>)
 8004af2:	4811      	ldr	r0, [pc, #68]	; (8004b38 <vTaskSensRead+0x6c>)
 8004af4:	f004 ff72 	bl	80099dc <HAL_SPI_Receive_IT>

	for (;;) {
		tick_count += tick_update;
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4413      	add	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]


		if(READ_USB){
			ReadDataUSB();
 8004b00:	f000 f834 	bl	8004b6c <ReadDataUSB>
		else{
			ReadDataSB();
		}


		logSensor(tick_count, 3, BARO, &sb3_baro);
 8004b04:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <vTaskSensRead+0x70>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	2103      	movs	r1, #3
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f7fe fbac 	bl	8003268 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vTaskSensRead+0x74>)
 8004b12:	2202      	movs	r2, #2
 8004b14:	2103      	movs	r1, #3
 8004b16:	6978      	ldr	r0, [r7, #20]
 8004b18:	f7fe fba6 	bl	8003268 <logSensor>

		pressure = pressure + 100;
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <vTaskSensRead+0x78>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3364      	adds	r3, #100	; 0x64
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <vTaskSensRead+0x78>)
 8004b24:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f00d fe94 	bl	8012854 <osDelayUntil>
		tick_count += tick_update;
 8004b2c:	e7e4      	b.n	8004af8 <vTaskSensRead+0x2c>
 8004b2e:	bf00      	nop
 8004b30:	51eb851f 	.word	0x51eb851f
 8004b34:	200002d0 	.word	0x200002d0
 8004b38:	2000aa20 	.word	0x2000aa20
 8004b3c:	20000254 	.word	0x20000254
 8004b40:	20000260 	.word	0x20000260
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004b50:	2220      	movs	r2, #32
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <HAL_SPI_RxCpltCallback+0x1c>)
 8004b54:	4804      	ldr	r0, [pc, #16]	; (8004b68 <HAL_SPI_RxCpltCallback+0x20>)
 8004b56:	f004 ff41 	bl	80099dc <HAL_SPI_Receive_IT>

}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200002d0 	.word	0x200002d0
 8004b68:	2000aa20 	.word	0x2000aa20

08004b6c <ReadDataUSB>:

		osMutexRelease(sb1_mutex);
	}
}

void ReadDataUSB(){
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0

}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	0000      	movs	r0, r0
 8004b7c:	0000      	movs	r0, r0
	...

08004b80 <vTaskStateEst>:
 */

#include "tasks/task_state_est.h"


void vTaskStateEst(void *argument) {
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8004b86:	af0c      	add	r7, sp, #48	; 0x30
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8004b8c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fc fd55 	bl	8001640 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8004b96:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8004b9a:	2278      	movs	r2, #120	; 0x78
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f012 fa8b 	bl	80170ba <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004ba4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004ba8:	4618      	mov	r0, r3
 8004baa:	2378      	movs	r3, #120	; 0x78
 8004bac:	461a      	mov	r2, r3
 8004bae:	2100      	movs	r1, #0
 8004bb0:	f012 fa83 	bl	80170ba <memset>
	uint32_t Placeholder_timestamps[2] = { 0 };
 8004bb4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	6053      	str	r3, [r2, #4]
	float Placeholder_measurement[3] = { 0 };
 8004bc0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	6053      	str	r3, [r2, #4]
 8004bcc:	6093      	str	r3, [r2, #8]

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8004bce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd f80a 	bl	8001bec <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = {0};
 8004bd8:	f107 0320 	add.w	r3, r7, #32
 8004bdc:	4618      	mov	r0, r3
 8004bde:	23b0      	movs	r3, #176	; 0xb0
 8004be0:	461a      	mov	r2, r3
 8004be2:	2100      	movs	r1, #0
 8004be4:	f012 fa69 	bl	80170ba <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8004be8:	f107 0320 	add.w	r3, r7, #32
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	6053      	str	r3, [r2, #4]
 8004bfc:	6093      	str	r3, [r2, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	461a      	mov	r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	6053      	str	r3, [r2, #4]
 8004c0a:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc ffd3 	bl	8001bbc <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc ffce 	bl	8001bbc <reset_flight_phase_detection>

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004c20:	f107 0320 	add.w	r3, r7, #32
 8004c24:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004c28:	f107 0108 	add.w	r1, r7, #8
 8004c2c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004c30:	f7fd fbd2 	bl	80023d8 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004c34:	f00d fd08 	bl	8012648 <osKernelGetTickCount>
 8004c38:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004c3c:	f00d fd2c 	bl	8012698 <osKernelGetTickFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4bbd      	ldr	r3, [pc, #756]	; (8004f38 <vTaskStateEst+0x3b8>)
 8004c44:	fba3 2302 	umull	r2, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
	osDelay(500);
 8004c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c52:	f00d fdd1 	bl	80127f8 <osDelay>
	for (;;) {
		tick_count += tick_update;
 8004c56:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8004c5a:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8004c5e:	4413      	add	r3, r2
 8004c60:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004c64:	4bb5      	ldr	r3, [pc, #724]	; (8004f3c <vTaskStateEst+0x3bc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f00d ff7b 	bl	8012b64 <osMutexGetOwner>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d164      	bne.n	8004d3e <vTaskStateEst+0x1be>
			Placeholder_measurement[0] = (float) (sb1_baro.pressure);
 8004c74:	4bb2      	ldr	r3, [pc, #712]	; (8004f40 <vTaskStateEst+0x3c0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c80:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004c84:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_baro.ts;
 8004c88:	4bad      	ldr	r3, [pc, #692]	; (8004f40 <vTaskStateEst+0x3c0>)
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004c90:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_imu.acc_z + 100)) / 1024;
 8004c92:	4bac      	ldr	r3, [pc, #688]	; (8004f44 <vTaskStateEst+0x3c4>)
 8004c94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c98:	3364      	adds	r3, #100	; 0x64
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca2:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8004f48 <vTaskStateEst+0x3c8>
 8004ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004caa:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004cae:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_imu.ts;
 8004cb2:	4ba4      	ldr	r3, [pc, #656]	; (8004f44 <vTaskStateEst+0x3c4>)
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004cba:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_baro.temperature)) / 100;
 8004cbc:	4ba0      	ldr	r3, [pc, #640]	; (8004f40 <vTaskStateEst+0x3c0>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cc8:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8004f4c <vTaskStateEst+0x3cc>
 8004ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004cd4:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004cd8:	4b98      	ldr	r3, [pc, #608]	; (8004f3c <vTaskStateEst+0x3bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f00d ff41 	bl	8012b64 <osMutexGetOwner>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d12a      	bne.n	8004d3e <vTaskStateEst+0x1be>
				state_est_meas.baro_data[0].pressure = Placeholder_measurement[0];
 8004ce8:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8004cf2:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].temperature = Placeholder_measurement[2];
 8004cf4:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8004cfe:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].ts = Placeholder_timestamps[0];
 8004d00:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510

				state_est_meas.imu_data[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004d0a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fc39 	bl	8000588 <__aeabi_f2d>
 8004d16:	a386      	add	r3, pc, #536	; (adr r3, 8004f30 <vTaskStateEst+0x3b0>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fc8c 	bl	8000638 <__aeabi_dmul>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4618      	mov	r0, r3
 8004d26:	4621      	mov	r1, r4
 8004d28:	f7fb ff36 	bl	8000b98 <__aeabi_d2f>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8004d32:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[0].ts = Placeholder_timestamps[1];
 8004d34:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb2_mutex) == NULL) {
 8004d3e:	4b84      	ldr	r3, [pc, #528]	; (8004f50 <vTaskStateEst+0x3d0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f00d ff0e 	bl	8012b64 <osMutexGetOwner>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d164      	bne.n	8004e18 <vTaskStateEst+0x298>
			Placeholder_measurement[0] = (float) (sb2_baro.pressure);
 8004d4e:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <vTaskStateEst+0x3d4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d5a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004d5e:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_baro.ts;
 8004d62:	4b7c      	ldr	r3, [pc, #496]	; (8004f54 <vTaskStateEst+0x3d4>)
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d6a:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_imu.acc_z + 100)) / 1024;
 8004d6c:	4b7a      	ldr	r3, [pc, #488]	; (8004f58 <vTaskStateEst+0x3d8>)
 8004d6e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004d72:	3364      	adds	r3, #100	; 0x64
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d7c:	eddf 6a72 	vldr	s13, [pc, #456]	; 8004f48 <vTaskStateEst+0x3c8>
 8004d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d84:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004d88:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_imu.ts;
 8004d8c:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <vTaskStateEst+0x3d8>)
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004d94:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_baro.temperature)) / 100;
 8004d96:	4b6f      	ldr	r3, [pc, #444]	; (8004f54 <vTaskStateEst+0x3d4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da2:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004f4c <vTaskStateEst+0x3cc>
 8004da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004daa:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004dae:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb2_mutex) == NULL) {
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <vTaskStateEst+0x3d0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f00d fed4 	bl	8012b64 <osMutexGetOwner>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12a      	bne.n	8004e18 <vTaskStateEst+0x298>
				state_est_meas.baro_data[1].pressure = Placeholder_measurement[0];
 8004dc2:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f207 5214 	addw	r2, r7, #1300	; 0x514
 8004dcc:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].temperature = Placeholder_measurement[2];
 8004dce:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8004dd8:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].ts = Placeholder_timestamps[0];
 8004dda:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

				state_est_meas.imu_data[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004de4:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb fbcc 	bl	8000588 <__aeabi_f2d>
 8004df0:	a34f      	add	r3, pc, #316	; (adr r3, 8004f30 <vTaskStateEst+0x3b0>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f7fb fc1f 	bl	8000638 <__aeabi_dmul>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4621      	mov	r1, r4
 8004e02:	f7fb fec9 	bl	8000b98 <__aeabi_d2f>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f207 5254 	addw	r2, r7, #1364	; 0x554
 8004e0c:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[1].ts = Placeholder_timestamps[1];
 8004e0e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb3_mutex) == NULL) {
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <vTaskStateEst+0x3dc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f00d fea1 	bl	8012b64 <osMutexGetOwner>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d164      	bne.n	8004ef2 <vTaskStateEst+0x372>
			Placeholder_measurement[0] = (float)(sb3_baro.pressure);
 8004e28:	4b4d      	ldr	r3, [pc, #308]	; (8004f60 <vTaskStateEst+0x3e0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e34:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004e38:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_baro.ts;
 8004e3c:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <vTaskStateEst+0x3e0>)
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004e44:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_imu.acc_z + 100)) / 1024;
 8004e46:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <vTaskStateEst+0x3e4>)
 8004e48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004e4c:	3364      	adds	r3, #100	; 0x64
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e56:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004f48 <vTaskStateEst+0x3c8>
 8004e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e5e:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004e62:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_imu.ts;
 8004e66:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <vTaskStateEst+0x3e4>)
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004e6e:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_baro.temperature)) / 100;
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <vTaskStateEst+0x3e0>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e7c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004f4c <vTaskStateEst+0x3cc>
 8004e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e84:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004e88:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb3_mutex) == NULL) {
 8004e8c:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <vTaskStateEst+0x3dc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f00d fe67 	bl	8012b64 <osMutexGetOwner>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d12a      	bne.n	8004ef2 <vTaskStateEst+0x372>
				state_est_meas.baro_data[2].pressure = Placeholder_measurement[0];
 8004e9c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8004ea6:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].temperature = Placeholder_measurement[2];
 8004ea8:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f207 5224 	addw	r2, r7, #1316	; 0x524
 8004eb2:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].ts = Placeholder_timestamps[0];
 8004eb4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528

				state_est_meas.imu_data[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004ebe:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fb fb5f 	bl	8000588 <__aeabi_f2d>
 8004eca:	a319      	add	r3, pc, #100	; (adr r3, 8004f30 <vTaskStateEst+0x3b0>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f7fb fbb2 	bl	8000638 <__aeabi_dmul>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	4621      	mov	r1, r4
 8004edc:	f7fb fe5c 	bl	8000b98 <__aeabi_d2f>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 8004ee6:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[2].ts = Placeholder_timestamps[1];
 8004ee8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <vTaskStateEst+0x3e8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f00d fe34 	bl	8012b64 <osMutexGetOwner>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d136      	bne.n	8004f70 <vTaskStateEst+0x3f0>
			dummy_flight_phase_detection = global_flight_phase_detection;
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <vTaskStateEst+0x3ec>)
 8004f08:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <vTaskStateEst+0x3e8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f00d fe26 	bl	8012b64 <osMutexGetOwner>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d128      	bne.n	8004f70 <vTaskStateEst+0x3f0>
				flight_phase_detection = dummy_flight_phase_detection;
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	f107 0214 	add.w	r2, r7, #20
 8004f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004f2c:	e020      	b.n	8004f70 <vTaskStateEst+0x3f0>
 8004f2e:	bf00      	nop
 8004f30:	51eb851f 	.word	0x51eb851f
 8004f34:	40239eb8 	.word	0x40239eb8
 8004f38:	51eb851f 	.word	0x51eb851f
 8004f3c:	2000883c 	.word	0x2000883c
 8004f40:	2000021c 	.word	0x2000021c
 8004f44:	20000228 	.word	0x20000228
 8004f48:	44800000 	.word	0x44800000
 8004f4c:	42c80000 	.word	0x42c80000
 8004f50:	20008844 	.word	0x20008844
 8004f54:	20000238 	.word	0x20000238
 8004f58:	20000244 	.word	0x20000244
 8004f5c:	20008840 	.word	0x20008840
 8004f60:	20000254 	.word	0x20000254
 8004f64:	20000260 	.word	0x20000260
 8004f68:	2000884c 	.word	0x2000884c
 8004f6c:	200002c0 	.word	0x200002c0
			}
		}

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8004f70:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8004f74:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8004f78:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004f7c:	f107 0320 	add.w	r3, r7, #32
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8004f8e:	f7fd f8af 	bl	80020f0 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8004f92:	f107 0320 	add.w	r3, r7, #32
 8004f96:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004f9a:	f107 0108 	add.w	r1, r7, #8
 8004f9e:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8004fa2:	f7fd fa19 	bl	80023d8 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 8004fa6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fc feb4 	bl	8001d18 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8004fb0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004fb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd0a      	ble.n	8004fd2 <vTaskStateEst+0x452>
			select_kf_observation_matrices(&kf_state);
 8004fbc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc ff1a 	bl	8001dfa <select_kf_observation_matrices>
			kf_update(&kf_state);
 8004fc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fc ff52 	bl	8001e74 <kf_update>
 8004fd0:	e00a      	b.n	8004fe8 <vTaskStateEst+0x468>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8004fd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004fd6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004fda:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004fde:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8004fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004fe8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004fec:	4618      	mov	r0, r3
 8004fee:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8004ff2:	2278      	movs	r2, #120	; 0x78
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f012 f855 	bl	80170a4 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <vTaskStateEst+0x500>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	210a      	movs	r1, #10
 8005000:	4618      	mov	r0, r3
 8005002:	f00d fd01 	bl	8012a08 <osMutexAcquire>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <vTaskStateEst+0x4a2>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data_global, &kf_state);
 800500c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005010:	4619      	mov	r1, r3
 8005012:	481c      	ldr	r0, [pc, #112]	; (8005084 <vTaskStateEst+0x504>)
 8005014:	f7fd f81c 	bl	8002050 <update_state_est_data>
			osMutexRelease(state_est_mutex);
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <vTaskStateEst+0x500>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f00d fd51 	bl	8012ac4 <osMutexRelease>
		}

		/* Update env for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 8005022:	4b19      	ldr	r3, [pc, #100]	; (8005088 <vTaskStateEst+0x508>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	210a      	movs	r1, #10
 8005028:	4618      	mov	r0, r3
 800502a:	f00d fced 	bl	8012a08 <osMutexAcquire>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <vTaskStateEst+0x4cc>
			global_env = env;
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <vTaskStateEst+0x50c>)
 8005036:	461c      	mov	r4, r3
 8005038:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800503c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800503e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <vTaskStateEst+0x508>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f00d fd3c 	bl	8012ac4 <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 800504c:	f00d fafc 	bl	8012648 <osKernelGetTickCount>
 8005050:	4684      	mov	ip, r0
 8005052:	4e0c      	ldr	r6, [pc, #48]	; (8005084 <vTaskStateEst+0x504>)
 8005054:	466d      	mov	r5, sp
 8005056:	f106 040c 	add.w	r4, r6, #12
 800505a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800505e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005062:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005066:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800506a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800506e:	4660      	mov	r0, ip
 8005070:	f7fe f9a0 	bl	80033b4 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8005074:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8005078:	f00d fbec 	bl	8012854 <osDelayUntil>
		tick_count += tick_update;
 800507c:	e5eb      	b.n	8004c56 <vTaskStateEst+0xd6>
 800507e:	bf00      	nop
 8005080:	2000aaf0 	.word	0x2000aaf0
 8005084:	20000270 	.word	0x20000270
 8005088:	20008994 	.word	0x20008994
 800508c:	200002b0 	.word	0x200002b0

08005090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005096:	e003      	b.n	80050a0 <LoopCopyDataInit>

08005098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800509a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800509c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800509e:	3104      	adds	r1, #4

080050a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050a0:	480b      	ldr	r0, [pc, #44]	; (80050d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050a8:	d3f6      	bcc.n	8005098 <CopyDataInit>
  ldr  r2, =_sbss
 80050aa:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050ac:	e002      	b.n	80050b4 <LoopFillZerobss>

080050ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050b0:	f842 3b04 	str.w	r3, [r2], #4

080050b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050b8:	d3f9      	bcc.n	80050ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050ba:	f7ff f8bf 	bl	800423c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050be:	f011 ffbd 	bl	801703c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050c2:	f7fe fa13 	bl	80034ec <main>
  bx  lr    
 80050c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80050cc:	0801a140 	.word	0x0801a140
  ldr  r0, =_sdata
 80050d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050d4:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 80050d8:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80050dc:	20016fc0 	.word	0x20016fc0

080050e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050e0:	e7fe      	b.n	80050e0 <ADC_IRQHandler>

080050e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050e6:	2003      	movs	r0, #3
 80050e8:	f000 f8f7 	bl	80052da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050ec:	2000      	movs	r0, #0
 80050ee:	f7fe ffad 	bl	800404c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80050f2:	f7fe fd61 	bl	8003bb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_IncTick+0x20>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_IncTick+0x24>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4413      	add	r3, r2
 800510c:	4a04      	ldr	r2, [pc, #16]	; (8005120 <HAL_IncTick+0x24>)
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000000c 	.word	0x2000000c
 8005120:	20015238 	.word	0x20015238

08005124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return uwTick;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <HAL_GetTick+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20015238 	.word	0x20015238

0800513c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7ff ffee 	bl	8005124 <HAL_GetTick>
 8005148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d005      	beq.n	8005162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_Delay+0x40>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005162:	bf00      	nop
 8005164:	f7ff ffde 	bl	8005124 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d8f7      	bhi.n	8005164 <HAL_Delay+0x28>
  {
  }
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	2000000c 	.word	0x2000000c

08005180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <__NVIC_SetPriorityGrouping+0x40>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <__NVIC_SetPriorityGrouping+0x44>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <__NVIC_SetPriorityGrouping+0x40>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	60d3      	str	r3, [r2, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00
 80051c4:	05fa0000 	.word	0x05fa0000

080051c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 0307 	and.w	r3, r3, #7
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	db0b      	blt.n	800520e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	4907      	ldr	r1, [pc, #28]	; (800521c <__NVIC_EnableIRQ+0x38>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2001      	movs	r0, #1
 8005206:	fa00 f202 	lsl.w	r2, r0, r2
 800520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	e000e100 	.word	0xe000e100

08005220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db0a      	blt.n	800524a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	490c      	ldr	r1, [pc, #48]	; (800526c <__NVIC_SetPriority+0x4c>)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	440b      	add	r3, r1
 8005244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005248:	e00a      	b.n	8005260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4908      	ldr	r1, [pc, #32]	; (8005270 <__NVIC_SetPriority+0x50>)
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	3b04      	subs	r3, #4
 8005258:	0112      	lsls	r2, r2, #4
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	440b      	add	r3, r1
 800525e:	761a      	strb	r2, [r3, #24]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000e100 	.word	0xe000e100
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f1c3 0307 	rsb	r3, r3, #7
 800528e:	2b04      	cmp	r3, #4
 8005290:	bf28      	it	cs
 8005292:	2304      	movcs	r3, #4
 8005294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3304      	adds	r3, #4
 800529a:	2b06      	cmp	r3, #6
 800529c:	d902      	bls.n	80052a4 <NVIC_EncodePriority+0x30>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3b03      	subs	r3, #3
 80052a2:	e000      	b.n	80052a6 <NVIC_EncodePriority+0x32>
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43da      	mvns	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	401a      	ands	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052bc:	f04f 31ff 	mov.w	r1, #4294967295
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	43d9      	mvns	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052cc:	4313      	orrs	r3, r2
         );
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff4c 	bl	8005180 <__NVIC_SetPriorityGrouping>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005302:	f7ff ff61 	bl	80051c8 <__NVIC_GetPriorityGrouping>
 8005306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	6978      	ldr	r0, [r7, #20]
 800530e:	f7ff ffb1 	bl	8005274 <NVIC_EncodePriority>
 8005312:	4602      	mov	r2, r0
 8005314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff80 	bl	8005220 <__NVIC_SetPriority>
}
 8005320:	bf00      	nop
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ff54 	bl	80051e4 <__NVIC_EnableIRQ>
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7ff fee8 	bl	8005124 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e099      	b.n	8005494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005380:	e00f      	b.n	80053a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005382:	f7ff fecf 	bl	8005124 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b05      	cmp	r3, #5
 800538e:	d908      	bls.n	80053a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e078      	b.n	8005494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e8      	bne.n	8005382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4b38      	ldr	r3, [pc, #224]	; (800549c <HAL_DMA_Init+0x158>)
 80053bc:	4013      	ands	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d107      	bne.n	800540c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	4313      	orrs	r3, r2
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b04      	cmp	r3, #4
 8005434:	d117      	bne.n	8005466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 faa5 	bl	8005998 <DMA_CheckFifoParam>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2240      	movs	r2, #64	; 0x40
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005462:	2301      	movs	r3, #1
 8005464:	e016      	b.n	8005494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa5c 	bl	800592c <DMA_CalcBaseAndBitshift>
 8005474:	4603      	mov	r3, r0
 8005476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	223f      	movs	r2, #63	; 0x3f
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	f010803f 	.word	0xf010803f

080054a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_Start_IT+0x26>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e048      	b.n	8005558 <HAL_DMA_Start_IT+0xb8>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d137      	bne.n	800554a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f9ee 	bl	80058d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	223f      	movs	r2, #63	; 0x3f
 80054fa:	409a      	lsls	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0216 	orr.w	r2, r2, #22
 800550e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800551e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0208 	orr.w	r2, r2, #8
 8005536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e005      	b.n	8005556 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005552:	2302      	movs	r3, #2
 8005554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d004      	beq.n	800557e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e00c      	b.n	8005598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2205      	movs	r2, #5
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80055b0:	4b92      	ldr	r3, [pc, #584]	; (80057fc <HAL_DMA_IRQHandler+0x258>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a92      	ldr	r2, [pc, #584]	; (8005800 <HAL_DMA_IRQHandler+0x25c>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	0a9b      	lsrs	r3, r3, #10
 80055bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	2208      	movs	r2, #8
 80055d0:	409a      	lsls	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	2208      	movs	r2, #8
 80055fe:	409a      	lsls	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	2201      	movs	r2, #1
 8005616:	409a      	lsls	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	2201      	movs	r2, #1
 8005634:	409a      	lsls	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	2204      	movs	r2, #4
 800564c:	409a      	lsls	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d012      	beq.n	800567c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	2204      	movs	r2, #4
 800566a:	409a      	lsls	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f043 0204 	orr.w	r2, r3, #4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	2210      	movs	r2, #16
 8005682:	409a      	lsls	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4013      	ands	r3, r2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d043      	beq.n	8005714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d03c      	beq.n	8005714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	2210      	movs	r2, #16
 80056a0:	409a      	lsls	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d018      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d108      	bne.n	80056d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d024      	beq.n	8005714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
 80056d2:	e01f      	b.n	8005714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	e016      	b.n	8005714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0208 	bic.w	r2, r2, #8
 8005702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	2220      	movs	r2, #32
 800571a:	409a      	lsls	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 808e 	beq.w	8005842 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8086 	beq.w	8005842 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	2220      	movs	r2, #32
 800573c:	409a      	lsls	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b05      	cmp	r3, #5
 800574c:	d136      	bne.n	80057bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0216 	bic.w	r2, r2, #22
 800575c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800576c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <HAL_DMA_IRQHandler+0x1da>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0208 	bic.w	r2, r2, #8
 800578c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	223f      	movs	r2, #63	; 0x3f
 8005794:	409a      	lsls	r2, r3
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d07d      	beq.n	80058ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
        }
        return;
 80057ba:	e078      	b.n	80058ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01c      	beq.n	8005804 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d030      	beq.n	8005842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
 80057e8:	e02b      	b.n	8005842 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d027      	beq.n	8005842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
 80057fa:	e022      	b.n	8005842 <HAL_DMA_IRQHandler+0x29e>
 80057fc:	20000000 	.word	0x20000000
 8005800:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0210 	bic.w	r2, r2, #16
 8005820:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	d032      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d022      	beq.n	800589c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2205      	movs	r2, #5
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3301      	adds	r3, #1
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	429a      	cmp	r2, r3
 8005878:	d307      	bcc.n	800588a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f2      	bne.n	800586e <HAL_DMA_IRQHandler+0x2ca>
 8005888:	e000      	b.n	800588c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800588a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
 80058ac:	e000      	b.n	80058b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80058ae:	bf00      	nop
    }
  }
}
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d108      	bne.n	8005910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800590e:	e007      	b.n	8005920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	3b10      	subs	r3, #16
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <DMA_CalcBaseAndBitshift+0x60>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <DMA_CalcBaseAndBitshift+0x64>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d908      	bls.n	800596c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <DMA_CalcBaseAndBitshift+0x68>)
 8005962:	4013      	ands	r3, r2
 8005964:	1d1a      	adds	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	659a      	str	r2, [r3, #88]	; 0x58
 800596a:	e006      	b.n	800597a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <DMA_CalcBaseAndBitshift+0x68>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	aaaaaaab 	.word	0xaaaaaaab
 8005990:	08019fec 	.word	0x08019fec
 8005994:	fffffc00 	.word	0xfffffc00

08005998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11f      	bne.n	80059f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d855      	bhi.n	8005a64 <DMA_CheckFifoParam+0xcc>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <DMA_CheckFifoParam+0x28>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059e3 	.word	0x080059e3
 80059c8:	080059d1 	.word	0x080059d1
 80059cc:	08005a65 	.word	0x08005a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d045      	beq.n	8005a68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e0:	e042      	b.n	8005a68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059ea:	d13f      	bne.n	8005a6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f0:	e03c      	b.n	8005a6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d121      	bne.n	8005a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d836      	bhi.n	8005a70 <DMA_CheckFifoParam+0xd8>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <DMA_CheckFifoParam+0x70>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a1f 	.word	0x08005a1f
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	08005a31 	.word	0x08005a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e02f      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d024      	beq.n	8005a74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2e:	e021      	b.n	8005a74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a38:	d11e      	bne.n	8005a78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a3e:	e01b      	b.n	8005a78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d902      	bls.n	8005a4c <DMA_CheckFifoParam+0xb4>
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d003      	beq.n	8005a52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a4a:	e018      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a50:	e015      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
      break;
 8005a62:	e00b      	b.n	8005a7c <DMA_CheckFifoParam+0xe4>
      break;
 8005a64:	bf00      	nop
 8005a66:	e00a      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a68:	bf00      	nop
 8005a6a:	e008      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a6c:	bf00      	nop
 8005a6e:	e006      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a70:	bf00      	nop
 8005a72:	e004      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a74:	bf00      	nop
 8005a76:	e002      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;   
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a7c:	bf00      	nop
    }
  } 
  
  return status; 
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e175      	b.n	8005d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005aac:	2201      	movs	r2, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f040 8164 	bne.w	8005d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d00b      	beq.n	8005aea <HAL_GPIO_Init+0x5e>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d007      	beq.n	8005aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ade:	2b11      	cmp	r3, #17
 8005ae0:	d003      	beq.n	8005aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b12      	cmp	r3, #18
 8005ae8:	d130      	bne.n	8005b4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	2203      	movs	r2, #3
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b20:	2201      	movs	r2, #1
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 0201 	and.w	r2, r3, #1
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	2203      	movs	r2, #3
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x100>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b12      	cmp	r3, #18
 8005b8a:	d123      	bne.n	8005bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	08da      	lsrs	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3208      	adds	r2, #8
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	08da      	lsrs	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3208      	adds	r2, #8
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	2203      	movs	r2, #3
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 0203 	and.w	r2, r3, #3
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80be 	beq.w	8005d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c16:	4b65      	ldr	r3, [pc, #404]	; (8005dac <HAL_GPIO_Init+0x320>)
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	4a64      	ldr	r2, [pc, #400]	; (8005dac <HAL_GPIO_Init+0x320>)
 8005c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c20:	6453      	str	r3, [r2, #68]	; 0x44
 8005c22:	4b62      	ldr	r3, [pc, #392]	; (8005dac <HAL_GPIO_Init+0x320>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c2e:	4a60      	ldr	r2, [pc, #384]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	3302      	adds	r3, #2
 8005c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	220f      	movs	r2, #15
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a57      	ldr	r2, [pc, #348]	; (8005db4 <HAL_GPIO_Init+0x328>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d037      	beq.n	8005cca <HAL_GPIO_Init+0x23e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a56      	ldr	r2, [pc, #344]	; (8005db8 <HAL_GPIO_Init+0x32c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d031      	beq.n	8005cc6 <HAL_GPIO_Init+0x23a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a55      	ldr	r2, [pc, #340]	; (8005dbc <HAL_GPIO_Init+0x330>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02b      	beq.n	8005cc2 <HAL_GPIO_Init+0x236>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a54      	ldr	r2, [pc, #336]	; (8005dc0 <HAL_GPIO_Init+0x334>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d025      	beq.n	8005cbe <HAL_GPIO_Init+0x232>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a53      	ldr	r2, [pc, #332]	; (8005dc4 <HAL_GPIO_Init+0x338>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01f      	beq.n	8005cba <HAL_GPIO_Init+0x22e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_GPIO_Init+0x33c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d019      	beq.n	8005cb6 <HAL_GPIO_Init+0x22a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a51      	ldr	r2, [pc, #324]	; (8005dcc <HAL_GPIO_Init+0x340>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_GPIO_Init+0x226>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a50      	ldr	r2, [pc, #320]	; (8005dd0 <HAL_GPIO_Init+0x344>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00d      	beq.n	8005cae <HAL_GPIO_Init+0x222>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a4f      	ldr	r2, [pc, #316]	; (8005dd4 <HAL_GPIO_Init+0x348>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <HAL_GPIO_Init+0x21e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a4e      	ldr	r2, [pc, #312]	; (8005dd8 <HAL_GPIO_Init+0x34c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_GPIO_Init+0x21a>
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	e012      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	e010      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005caa:	2308      	movs	r3, #8
 8005cac:	e00e      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cae:	2307      	movs	r3, #7
 8005cb0:	e00c      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cb2:	2306      	movs	r3, #6
 8005cb4:	e00a      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cb6:	2305      	movs	r3, #5
 8005cb8:	e008      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cba:	2304      	movs	r3, #4
 8005cbc:	e006      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e004      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e002      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	f002 0203 	and.w	r2, r2, #3
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	4093      	lsls	r3, r2
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cdc:	4934      	ldr	r1, [pc, #208]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cea:	4b3c      	ldr	r3, [pc, #240]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d0e:	4a33      	ldr	r2, [pc, #204]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d14:	4b31      	ldr	r3, [pc, #196]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d3e:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d68:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	f67f ae86 	bls.w	8005aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	3724      	adds	r7, #36	; 0x24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40023800 	.word	0x40023800
 8005db0:	40013800 	.word	0x40013800
 8005db4:	40020000 	.word	0x40020000
 8005db8:	40020400 	.word	0x40020400
 8005dbc:	40020800 	.word	0x40020800
 8005dc0:	40020c00 	.word	0x40020c00
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	40021400 	.word	0x40021400
 8005dcc:	40021800 	.word	0x40021800
 8005dd0:	40021c00 	.word	0x40021c00
 8005dd4:	40022000 	.word	0x40022000
 8005dd8:	40022400 	.word	0x40022400
 8005ddc:	40013c00 	.word	0x40013c00

08005de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	807b      	strh	r3, [r7, #2]
 8005dec:	4613      	mov	r3, r2
 8005dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005df0:	787b      	ldrb	r3, [r7, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dfc:	e003      	b.n	8005e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	041a      	lsls	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	619a      	str	r2, [r3, #24]
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695a      	ldr	r2, [r3, #20]
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	041a      	lsls	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005e32:	e002      	b.n	8005e3a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e34:	887a      	ldrh	r2, [r7, #2]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	619a      	str	r2, [r3, #24]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e48:	b08f      	sub	sp, #60	; 0x3c
 8005e4a:	af0a      	add	r7, sp, #40	; 0x28
 8005e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e116      	b.n	8006086 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f010 fd8a 	bl	801698c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 fb71 	bl	800c57e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	687e      	ldr	r6, [r7, #4]
 8005ea4:	466d      	mov	r5, sp
 8005ea6:	f106 0410 	add.w	r4, r6, #16
 8005eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005eb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eba:	1d33      	adds	r3, r6, #4
 8005ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ebe:	6838      	ldr	r0, [r7, #0]
 8005ec0:	f006 fa52 	bl	800c368 <USB_CoreInit>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e0d7      	b.n	8006086 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f006 fb5f 	bl	800c5a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e04a      	b.n	8005f7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	333d      	adds	r3, #61	; 0x3d
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	333c      	adds	r3, #60	; 0x3c
 8005f0c:	7bfa      	ldrb	r2, [r7, #15]
 8005f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f10:	7bfa      	ldrb	r2, [r7, #15]
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	b298      	uxth	r0, r3
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3342      	adds	r3, #66	; 0x42
 8005f24:	4602      	mov	r2, r0
 8005f26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	333f      	adds	r3, #63	; 0x3f
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f3c:	7bfa      	ldrb	r2, [r7, #15]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	3344      	adds	r3, #68	; 0x44
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f50:	7bfa      	ldrb	r2, [r7, #15]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3348      	adds	r3, #72	; 0x48
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f64:	7bfa      	ldrb	r2, [r7, #15]
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	3350      	adds	r3, #80	; 0x50
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3af      	bcc.n	8005ee8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e044      	b.n	8006018 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fa4:	7bfa      	ldrb	r2, [r7, #15]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fd0:	7bfa      	ldrb	r2, [r7, #15]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ffc:	7bfa      	ldrb	r2, [r7, #15]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	3301      	adds	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3b5      	bcc.n	8005f8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	687e      	ldr	r6, [r7, #4]
 800602a:	466d      	mov	r5, sp
 800602c:	f106 0410 	add.w	r4, r6, #16
 8006030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006038:	e894 0003 	ldmia.w	r4, {r0, r1}
 800603c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006040:	1d33      	adds	r3, r6, #4
 8006042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006044:	6838      	ldr	r0, [r7, #0]
 8006046:	f006 fad5 	bl	800c5f4 <USB_DevInit>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e014      	b.n	8006086 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 f881 	bl	800717c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f007 fb24 	bl	800d6cc <USB_DevDisconnect>

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800608e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_PCD_Start+0x16>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e012      	b.n	80060ca <HAL_PCD_Start+0x3c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f007 faf3 	bl	800d69c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f006 fa4e 	bl	800c55c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060d2:	b590      	push	{r4, r7, lr}
 80060d4:	b08d      	sub	sp, #52	; 0x34
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f007 fb9a 	bl	800d822 <USB_GetMode>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 83ca 	bne.w	800688a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f007 fafe 	bl	800d6fc <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 83c0 	beq.w	8006888 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f007 faf5 	bl	800d6fc <USB_ReadInterrupts>
 8006112:	4603      	mov	r3, r0
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d107      	bne.n	800612c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f002 0202 	and.w	r2, r2, #2
 800612a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f007 fae3 	bl	800d6fc <USB_ReadInterrupts>
 8006136:	4603      	mov	r3, r0
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b10      	cmp	r3, #16
 800613e:	d161      	bne.n	8006204 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0210 	bic.w	r2, r2, #16
 800614e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	3304      	adds	r3, #4
 800616e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	0c5b      	lsrs	r3, r3, #17
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2b02      	cmp	r3, #2
 800617a:	d124      	bne.n	80061c6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d035      	beq.n	80061f4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	6a38      	ldr	r0, [r7, #32]
 800619c:	f007 f95b 	bl	800d456 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ac:	441a      	add	r2, r3
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061be:	441a      	add	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	619a      	str	r2, [r3, #24]
 80061c4:	e016      	b.n	80061f4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	0c5b      	lsrs	r3, r3, #17
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	2b06      	cmp	r3, #6
 80061d0:	d110      	bne.n	80061f4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061d8:	2208      	movs	r2, #8
 80061da:	4619      	mov	r1, r3
 80061dc:	6a38      	ldr	r0, [r7, #32]
 80061de:	f007 f93a 	bl	800d456 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ee:	441a      	add	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0210 	orr.w	r2, r2, #16
 8006202:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f007 fa77 	bl	800d6fc <USB_ReadInterrupts>
 800620e:	4603      	mov	r3, r0
 8006210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006214:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006218:	d16e      	bne.n	80062f8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f007 fa7d 	bl	800d722 <USB_ReadDevAllOutEpInterrupt>
 8006228:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800622a:	e062      	b.n	80062f2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d057      	beq.n	80062e6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f007 faa2 	bl	800d78a <USB_ReadDevOutEPInterrupt>
 8006246:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	461a      	mov	r2, r3
 8006260:	2301      	movs	r3, #1
 8006262:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fdde 	bl	8006e28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	461a      	mov	r2, r3
 8006284:	2308      	movs	r3, #8
 8006286:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fed8 	bl	8007040 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	461a      	mov	r2, r3
 80062a8:	2310      	movs	r3, #16
 80062aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	2320      	movs	r3, #32
 80062c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	461a      	mov	r2, r3
 80062e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d199      	bne.n	800622c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f007 f9fd 	bl	800d6fc <USB_ReadInterrupts>
 8006302:	4603      	mov	r3, r0
 8006304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800630c:	f040 80c0 	bne.w	8006490 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f007 fa1e 	bl	800d756 <USB_ReadDevAllInEpInterrupt>
 800631a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006320:	e0b2      	b.n	8006488 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80a7 	beq.w	800647c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f007 fa44 	bl	800d7c6 <USB_ReadDevInEPInterrupt>
 800633e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d057      	beq.n	80063fa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	2201      	movs	r2, #1
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	43db      	mvns	r3, r3
 8006364:	69f9      	ldr	r1, [r7, #28]
 8006366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800636a:	4013      	ands	r3, r2
 800636c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	461a      	mov	r2, r3
 800637c:	2301      	movs	r3, #1
 800637e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d132      	bne.n	80063ee <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	3348      	adds	r3, #72	; 0x48
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4403      	add	r3, r0
 80063a8:	3344      	adds	r3, #68	; 0x44
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4419      	add	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	4613      	mov	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4403      	add	r3, r0
 80063bc:	3348      	adds	r3, #72	; 0x48
 80063be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d113      	bne.n	80063ee <HAL_PCD_IRQHandler+0x31c>
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3350      	adds	r3, #80	; 0x50
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d108      	bne.n	80063ee <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063e6:	461a      	mov	r2, r3
 80063e8:	2101      	movs	r1, #1
 80063ea:	f007 fa4d 	bl	800d888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f010 fb4c 	bl	8016a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	2308      	movs	r3, #8
 8006414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	461a      	mov	r2, r3
 800642e:	2310      	movs	r3, #16
 8006430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	2340      	movs	r3, #64	; 0x40
 800644c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	461a      	mov	r2, r3
 8006466:	2302      	movs	r3, #2
 8006468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fc48 	bl	8006d0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	3301      	adds	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	f47f af49 	bne.w	8006322 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f007 f931 	bl	800d6fc <USB_ReadInterrupts>
 800649a:	4603      	mov	r3, r0
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a4:	d122      	bne.n	80064ec <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d108      	bne.n	80064d6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80064cc:	2100      	movs	r1, #0
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f010 fd2e 	bl	8016f30 <HAL_PCDEx_LPM_Callback>
 80064d4:	e002      	b.n	80064dc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f010 fb52 	bl	8016b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695a      	ldr	r2, [r3, #20]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80064ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f007 f903 	bl	800d6fc <USB_ReadInterrupts>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d112      	bne.n	8006528 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d102      	bne.n	8006518 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f010 fb0e 	bl	8016b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006526:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f007 f8e5 	bl	800d6fc <USB_ReadInterrupts>
 8006532:	4603      	mov	r3, r0
 8006534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800653c:	d121      	bne.n	8006582 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800654c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d111      	bne.n	800657c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	f003 020f 	and.w	r2, r3, #15
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006572:	2101      	movs	r1, #1
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f010 fcdb 	bl	8016f30 <HAL_PCDEx_LPM_Callback>
 800657a:	e002      	b.n	8006582 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f010 fad9 	bl	8016b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f007 f8b8 	bl	800d6fc <USB_ReadInterrupts>
 800658c:	4603      	mov	r3, r0
 800658e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006596:	f040 80c7 	bne.w	8006728 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a8:	f023 0301 	bic.w	r3, r3, #1
 80065ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2110      	movs	r1, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	f006 f98b 	bl	800c8d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065be:	e056      	b.n	800666e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	461a      	mov	r2, r3
 80065ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065f2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	461a      	mov	r2, r3
 8006622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006626:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006646:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006666:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	3301      	adds	r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006674:	429a      	cmp	r2, r3
 8006676:	d3a3      	bcc.n	80065c0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006686:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800668a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d016      	beq.n	80066c2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a4:	f043 030b 	orr.w	r3, r3, #11
 80066a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ba:	f043 030b 	orr.w	r3, r3, #11
 80066be:	6453      	str	r3, [r2, #68]	; 0x44
 80066c0:	e015      	b.n	80066ee <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	4619      	mov	r1, r3
 80066d2:	f242 032b 	movw	r3, #8235	; 0x202b
 80066d6:	4313      	orrs	r3, r2
 80066d8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e8:	f043 030b 	orr.w	r3, r3, #11
 80066ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006700:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006712:	461a      	mov	r2, r3
 8006714:	f007 f8b8 	bl	800d888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006726:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f006 ffe5 	bl	800d6fc <USB_ReadInterrupts>
 8006732:	4603      	mov	r3, r0
 8006734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673c:	d124      	bne.n	8006788 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f007 f87c 	bl	800d840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f006 f920 	bl	800c992 <USB_GetDevSpeed>
 8006752:	4603      	mov	r3, r0
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681c      	ldr	r4, [r3, #0]
 800675e:	f001 f999 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8006762:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	4620      	mov	r0, r4
 800676e:	f005 fe53 	bl	800c418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f010 f9b5 	bl	8016ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695a      	ldr	r2, [r3, #20]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006786:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f006 ffb5 	bl	800d6fc <USB_ReadInterrupts>
 8006792:	4603      	mov	r3, r0
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	d10a      	bne.n	80067b2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f010 f992 	bl	8016ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f002 0208 	and.w	r2, r2, #8
 80067b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f006 ffa0 	bl	800d6fc <USB_ReadInterrupts>
 80067bc:	4603      	mov	r3, r0
 80067be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	d10f      	bne.n	80067e8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f010 f9f4 	bl	8016bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80067e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f006 ff85 	bl	800d6fc <USB_ReadInterrupts>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067fc:	d10f      	bne.n	800681e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f010 f9c7 	bl	8016b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800681c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f006 ff6a 	bl	800d6fc <USB_ReadInterrupts>
 8006828:	4603      	mov	r3, r0
 800682a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d10a      	bne.n	800684a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f010 f9d5 	bl	8016be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f006 ff54 	bl	800d6fc <USB_ReadInterrupts>
 8006854:	4603      	mov	r3, r0
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d115      	bne.n	800688a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f010 f9c5 	bl	8016c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	e000      	b.n	800688a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006888:	bf00      	nop
    }
  }
}
 800688a:	3734      	adds	r7, #52	; 0x34
 800688c:	46bd      	mov	sp, r7
 800688e:	bd90      	pop	{r4, r7, pc}

08006890 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_PCD_SetAddress+0x1a>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e013      	b.n	80068d2 <HAL_PCD_SetAddress+0x42>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f006 fec4 	bl	800d650 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	4608      	mov	r0, r1
 80068e4:	4611      	mov	r1, r2
 80068e6:	461a      	mov	r2, r3
 80068e8:	4603      	mov	r3, r0
 80068ea:	70fb      	strb	r3, [r7, #3]
 80068ec:	460b      	mov	r3, r1
 80068ee:	803b      	strh	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da0f      	bge.n	8006920 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	3338      	adds	r3, #56	; 0x38
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	3304      	adds	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	705a      	strb	r2, [r3, #1]
 800691e:	e00f      	b.n	8006940 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	f003 020f 	and.w	r2, r3, #15
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800694c:	883a      	ldrh	r2, [r7, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	78ba      	ldrb	r2, [r7, #2]
 8006956:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800696a:	78bb      	ldrb	r3, [r7, #2]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d102      	bne.n	8006976 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_PCD_EP_Open+0xaa>
 8006980:	2302      	movs	r3, #2
 8006982:	e00e      	b.n	80069a2 <HAL_PCD_EP_Open+0xc8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	4618      	mov	r0, r3
 8006994:	f006 f822 	bl	800c9dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80069a0:	7afb      	ldrb	r3, [r7, #11]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	da0f      	bge.n	80069de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	3338      	adds	r3, #56	; 0x38
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	3304      	adds	r3, #4
 80069d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	705a      	strb	r2, [r3, #1]
 80069dc:	e00f      	b.n	80069fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	3304      	adds	r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_PCD_EP_Close+0x6e>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e00e      	b.n	8006a36 <HAL_PCD_EP_Close+0x8c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f006 f860 	bl	800caec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d102      	bne.n	8006a9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	f006 fb43 	bl	800d13c <USB_EP0StartXfer>
 8006ab6:	e008      	b.n	8006aca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	f006 f8ed 	bl	800cca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006af6:	681b      	ldr	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	460b      	mov	r3, r1
 8006b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	f003 020f 	and.w	r2, r3, #15
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	3338      	adds	r3, #56	; 0x38
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	3304      	adds	r3, #4
 8006b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2201      	movs	r2, #1
 8006b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	f006 fae1 	bl	800d13c <USB_EP0StartXfer>
 8006b7a:	e008      	b.n	8006b8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	f006 f88b 	bl	800cca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d901      	bls.n	8006bb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e050      	b.n	8006c58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da0f      	bge.n	8006bde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	f003 020f 	and.w	r2, r3, #15
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3338      	adds	r3, #56	; 0x38
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	705a      	strb	r2, [r3, #1]
 8006bdc:	e00d      	b.n	8006bfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	4413      	add	r3, r2
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_PCD_EP_SetStall+0x82>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e01e      	b.n	8006c58 <HAL_PCD_EP_SetStall+0xc0>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f006 fc3d 	bl	800d4a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	b2d9      	uxtb	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f006 fe1d 	bl	800d888 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d901      	bls.n	8006c7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e042      	b.n	8006d04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da0f      	bge.n	8006ca6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	3338      	adds	r3, #56	; 0x38
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	705a      	strb	r2, [r3, #1]
 8006ca4:	e00f      	b.n	8006cc6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_PCD_EP_ClrStall+0x86>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e00e      	b.n	8006d04 <HAL_PCD_EP_ClrStall+0xa4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f006 fc45 	bl	800d584 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	3338      	adds	r3, #56	; 0x38
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4413      	add	r3, r2
 8006d30:	3304      	adds	r3, #4
 8006d32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d901      	bls.n	8006d44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e06c      	b.n	8006e1e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d902      	bls.n	8006d60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	3303      	adds	r3, #3
 8006d64:	089b      	lsrs	r3, r3, #2
 8006d66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d68:	e02b      	b.n	8006dc2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d902      	bls.n	8006d86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3303      	adds	r3, #3
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68d9      	ldr	r1, [r3, #12]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4603      	mov	r3, r0
 8006da4:	6978      	ldr	r0, [r7, #20]
 8006da6:	f006 fb21 	bl	800d3ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d809      	bhi.n	8006dec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d203      	bcs.n	8006dec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1be      	bne.n	8006d6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d811      	bhi.n	8006e1c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	2201      	movs	r2, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	6939      	ldr	r1, [r7, #16]
 8006e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e18:	4013      	ands	r3, r2
 8006e1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	333c      	adds	r3, #60	; 0x3c
 8006e40:	3304      	adds	r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	f040 80a0 	bne.w	8006fa0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d015      	beq.n	8006e96 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a72      	ldr	r2, [pc, #456]	; (8007038 <PCD_EP_OutXfrComplete_int+0x210>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f240 80dd 	bls.w	800702e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80d7 	beq.w	800702e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	e0cb      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	461a      	mov	r2, r3
 8006eae:	2320      	movs	r3, #32
 8006eb0:	6093      	str	r3, [r2, #8]
 8006eb2:	e0bc      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 80b7 	bne.w	800702e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a5d      	ldr	r2, [pc, #372]	; (8007038 <PCD_EP_OutXfrComplete_int+0x210>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d90f      	bls.n	8006ee8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee4:	6093      	str	r3, [r2, #8]
 8006ee6:	e0a2      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006efa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	0159      	lsls	r1, r3, #5
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	440b      	add	r3, r1
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006f0e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4403      	add	r3, r0
 8006f1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f22:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f36:	6819      	ldr	r1, [r3, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4403      	add	r3, r0
 8006f46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4419      	add	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4403      	add	r3, r0
 8006f5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f60:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d114      	bne.n	8006f92 <PCD_EP_OutXfrComplete_int+0x16a>
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	f006 fc7b 	bl	800d888 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f00f fd5f 	bl	8016a5c <HAL_PCD_DataOutStageCallback>
 8006f9e:	e046      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a26      	ldr	r2, [pc, #152]	; (800703c <PCD_EP_OutXfrComplete_int+0x214>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d124      	bne.n	8006ff2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc4:	6093      	str	r3, [r2, #8]
 8006fc6:	e032      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d008      	beq.n	8006fe4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f00f fd36 	bl	8016a5c <HAL_PCD_DataOutStageCallback>
 8006ff0:	e01d      	b.n	800702e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d114      	bne.n	8007022 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800701a:	461a      	mov	r2, r3
 800701c:	2100      	movs	r1, #0
 800701e:	f006 fc33 	bl	800d888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f00f fd17 	bl	8016a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	4f54300a 	.word	0x4f54300a
 800703c:	4f54310a 	.word	0x4f54310a

08007040 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	333c      	adds	r3, #60	; 0x3c
 8007058:	3304      	adds	r3, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a15      	ldr	r2, [pc, #84]	; (80070c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d90e      	bls.n	8007094 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	461a      	mov	r2, r3
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f00f fccf 	bl	8016a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d90c      	bls.n	80070bc <PCD_EP_OutSetupPacket_int+0x7c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d108      	bne.n	80070bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070b4:	461a      	mov	r2, r3
 80070b6:	2101      	movs	r1, #1
 80070b8:	f006 fbe6 	bl	800d888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	4f54300a 	.word	0x4f54300a

080070cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
 80070d8:	4613      	mov	r3, r2
 80070da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80070ea:	883b      	ldrh	r3, [r7, #0]
 80070ec:	0419      	lsls	r1, r3, #16
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	629a      	str	r2, [r3, #40]	; 0x28
 80070f8:	e028      	b.n	800714c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	0c1b      	lsrs	r3, r3, #16
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e00d      	b.n	800712a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	3340      	adds	r3, #64	; 0x40
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	3301      	adds	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	7bfa      	ldrb	r2, [r7, #15]
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	3b01      	subs	r3, #1
 8007130:	429a      	cmp	r2, r3
 8007132:	d3ec      	bcc.n	800710e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007134:	883b      	ldrh	r3, [r7, #0]
 8007136:	0418      	lsls	r0, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6819      	ldr	r1, [r3, #0]
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	3b01      	subs	r3, #1
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4302      	orrs	r2, r0
 8007144:	3340      	adds	r3, #64	; 0x40
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	10000003 	.word	0x10000003

080071c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e291      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8087 	beq.w	80072f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071e8:	4b96      	ldr	r3, [pc, #600]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 030c 	and.w	r3, r3, #12
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d00c      	beq.n	800720e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071f4:	4b93      	ldr	r3, [pc, #588]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d112      	bne.n	8007226 <HAL_RCC_OscConfig+0x62>
 8007200:	4b90      	ldr	r3, [pc, #576]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800720c:	d10b      	bne.n	8007226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800720e:	4b8d      	ldr	r3, [pc, #564]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d06c      	beq.n	80072f4 <HAL_RCC_OscConfig+0x130>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d168      	bne.n	80072f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e26b      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722e:	d106      	bne.n	800723e <HAL_RCC_OscConfig+0x7a>
 8007230:	4b84      	ldr	r3, [pc, #528]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a83      	ldr	r2, [pc, #524]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	e02e      	b.n	800729c <HAL_RCC_OscConfig+0xd8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <HAL_RCC_OscConfig+0x9c>
 8007246:	4b7f      	ldr	r3, [pc, #508]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7e      	ldr	r2, [pc, #504]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800724c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4b7c      	ldr	r3, [pc, #496]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a7b      	ldr	r2, [pc, #492]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e01d      	b.n	800729c <HAL_RCC_OscConfig+0xd8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007268:	d10c      	bne.n	8007284 <HAL_RCC_OscConfig+0xc0>
 800726a:	4b76      	ldr	r3, [pc, #472]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a75      	ldr	r2, [pc, #468]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	4b73      	ldr	r3, [pc, #460]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a72      	ldr	r2, [pc, #456]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800727c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e00b      	b.n	800729c <HAL_RCC_OscConfig+0xd8>
 8007284:	4b6f      	ldr	r3, [pc, #444]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a6e      	ldr	r2, [pc, #440]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	4b6c      	ldr	r3, [pc, #432]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a6b      	ldr	r2, [pc, #428]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800729a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d013      	beq.n	80072cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fd ff3e 	bl	8005124 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fd ff3a 	bl	8005124 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	; 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e21f      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072be:	4b61      	ldr	r3, [pc, #388]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0xe8>
 80072ca:	e014      	b.n	80072f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fd ff2a 	bl	8005124 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d4:	f7fd ff26 	bl	8005124 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	; 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e20b      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072e6:	4b57      	ldr	r3, [pc, #348]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x110>
 80072f2:	e000      	b.n	80072f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d069      	beq.n	80073d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007302:	4b50      	ldr	r3, [pc, #320]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800730e:	4b4d      	ldr	r3, [pc, #308]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
 8007316:	2b08      	cmp	r3, #8
 8007318:	d11c      	bne.n	8007354 <HAL_RCC_OscConfig+0x190>
 800731a:	4b4a      	ldr	r3, [pc, #296]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d116      	bne.n	8007354 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007326:	4b47      	ldr	r3, [pc, #284]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_RCC_OscConfig+0x17a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d001      	beq.n	800733e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e1df      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733e:	4b41      	ldr	r3, [pc, #260]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	493d      	ldr	r1, [pc, #244]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800734e:	4313      	orrs	r3, r2
 8007350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007352:	e040      	b.n	80073d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d023      	beq.n	80073a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800735c:	4b39      	ldr	r3, [pc, #228]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a38      	ldr	r2, [pc, #224]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fd fedc 	bl	8005124 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007370:	f7fd fed8 	bl	8005124 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e1bd      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007382:	4b30      	ldr	r3, [pc, #192]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4929      	ldr	r1, [pc, #164]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	600b      	str	r3, [r1, #0]
 80073a2:	e018      	b.n	80073d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a26      	ldr	r2, [pc, #152]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fd feb8 	bl	8005124 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073b8:	f7fd feb4 	bl	8005124 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e199      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ca:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d038      	beq.n	8007454 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d019      	beq.n	800741e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ea:	4b16      	ldr	r3, [pc, #88]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	4a15      	ldr	r2, [pc, #84]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fd fe95 	bl	8005124 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fd fe91 	bl	8005124 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e176      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f0      	beq.n	80073fe <HAL_RCC_OscConfig+0x23a>
 800741c:	e01a      	b.n	8007454 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007422:	4a08      	ldr	r2, [pc, #32]	; (8007444 <HAL_RCC_OscConfig+0x280>)
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fd fe7b 	bl	8005124 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007430:	e00a      	b.n	8007448 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007432:	f7fd fe77 	bl	8005124 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d903      	bls.n	8007448 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e15c      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
 8007444:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007448:	4b91      	ldr	r3, [pc, #580]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ee      	bne.n	8007432 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a4 	beq.w	80075aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007462:	4b8b      	ldr	r3, [pc, #556]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10d      	bne.n	800748a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800746e:	4b88      	ldr	r3, [pc, #544]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	4a87      	ldr	r2, [pc, #540]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	6413      	str	r3, [r2, #64]	; 0x40
 800747a:	4b85      	ldr	r3, [pc, #532]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800748a:	4b82      	ldr	r3, [pc, #520]	; (8007694 <HAL_RCC_OscConfig+0x4d0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d118      	bne.n	80074c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007496:	4b7f      	ldr	r3, [pc, #508]	; (8007694 <HAL_RCC_OscConfig+0x4d0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a7e      	ldr	r2, [pc, #504]	; (8007694 <HAL_RCC_OscConfig+0x4d0>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074a2:	f7fd fe3f 	bl	8005124 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074aa:	f7fd fe3b 	bl	8005124 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b64      	cmp	r3, #100	; 0x64
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e120      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074bc:	4b75      	ldr	r3, [pc, #468]	; (8007694 <HAL_RCC_OscConfig+0x4d0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x31a>
 80074d0:	4b6f      	ldr	r3, [pc, #444]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a6e      	ldr	r2, [pc, #440]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
 80074dc:	e02d      	b.n	800753a <HAL_RCC_OscConfig+0x376>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x33c>
 80074e6:	4b6a      	ldr	r3, [pc, #424]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a69      	ldr	r2, [pc, #420]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
 80074f2:	4b67      	ldr	r3, [pc, #412]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a66      	ldr	r2, [pc, #408]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80074f8:	f023 0304 	bic.w	r3, r3, #4
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70
 80074fe:	e01c      	b.n	800753a <HAL_RCC_OscConfig+0x376>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d10c      	bne.n	8007522 <HAL_RCC_OscConfig+0x35e>
 8007508:	4b61      	ldr	r3, [pc, #388]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	4a60      	ldr	r2, [pc, #384]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800750e:	f043 0304 	orr.w	r3, r3, #4
 8007512:	6713      	str	r3, [r2, #112]	; 0x70
 8007514:	4b5e      	ldr	r3, [pc, #376]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007518:	4a5d      	ldr	r2, [pc, #372]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	6713      	str	r3, [r2, #112]	; 0x70
 8007520:	e00b      	b.n	800753a <HAL_RCC_OscConfig+0x376>
 8007522:	4b5b      	ldr	r3, [pc, #364]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	4a5a      	ldr	r2, [pc, #360]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	6713      	str	r3, [r2, #112]	; 0x70
 800752e:	4b58      	ldr	r3, [pc, #352]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	4a57      	ldr	r2, [pc, #348]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007534:	f023 0304 	bic.w	r3, r3, #4
 8007538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d015      	beq.n	800756e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007542:	f7fd fdef 	bl	8005124 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007548:	e00a      	b.n	8007560 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800754a:	f7fd fdeb 	bl	8005124 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	; 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e0ce      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007560:	4b4b      	ldr	r3, [pc, #300]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0ee      	beq.n	800754a <HAL_RCC_OscConfig+0x386>
 800756c:	e014      	b.n	8007598 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756e:	f7fd fdd9 	bl	8005124 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007574:	e00a      	b.n	800758c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007576:	f7fd fdd5 	bl	8005124 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f241 3288 	movw	r2, #5000	; 0x1388
 8007584:	4293      	cmp	r3, r2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e0b8      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800758c:	4b40      	ldr	r3, [pc, #256]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800758e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1ee      	bne.n	8007576 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800759e:	4b3c      	ldr	r3, [pc, #240]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a3b      	ldr	r2, [pc, #236]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80a4 	beq.w	80076fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075b4:	4b36      	ldr	r3, [pc, #216]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 030c 	and.w	r3, r3, #12
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d06b      	beq.n	8007698 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d149      	bne.n	800765c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c8:	4b31      	ldr	r3, [pc, #196]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a30      	ldr	r2, [pc, #192]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fd fda6 	bl	8005124 <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fd fda2 	bl	8005124 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e087      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ee:	4b28      	ldr	r3, [pc, #160]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f0      	bne.n	80075dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	019b      	lsls	r3, r3, #6
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	3b01      	subs	r3, #1
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	061b      	lsls	r3, r3, #24
 800761e:	4313      	orrs	r3, r2
 8007620:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007626:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a18      	ldr	r2, [pc, #96]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800762e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fd fd76 	bl	8005124 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800763c:	f7fd fd72 	bl	8005124 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e057      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0x478>
 800765a:	e04f      	b.n	80076fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007668:	f7fd fd5c 	bl	8005124 <HAL_GetTick>
 800766c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007670:	f7fd fd58 	bl	8005124 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e03d      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007682:	4b03      	ldr	r3, [pc, #12]	; (8007690 <HAL_RCC_OscConfig+0x4cc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f0      	bne.n	8007670 <HAL_RCC_OscConfig+0x4ac>
 800768e:	e035      	b.n	80076fc <HAL_RCC_OscConfig+0x538>
 8007690:	40023800 	.word	0x40023800
 8007694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <HAL_RCC_OscConfig+0x544>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d028      	beq.n	80076f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d121      	bne.n	80076f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076be:	429a      	cmp	r2, r3
 80076c0:	d11a      	bne.n	80076f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076c8:	4013      	ands	r3, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d111      	bne.n	80076f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	3b01      	subs	r3, #1
 80076e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d107      	bne.n	80076f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800

0800770c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e0d0      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007724:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d910      	bls.n	8007754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007732:	4b67      	ldr	r3, [pc, #412]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 020f 	bic.w	r2, r3, #15
 800773a:	4965      	ldr	r1, [pc, #404]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b63      	ldr	r3, [pc, #396]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d001      	beq.n	8007754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e0b8      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d020      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800776c:	4b59      	ldr	r3, [pc, #356]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	4a58      	ldr	r2, [pc, #352]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007784:	4b53      	ldr	r3, [pc, #332]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4a52      	ldr	r2, [pc, #328]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800778a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800778e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007790:	4b50      	ldr	r3, [pc, #320]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	494d      	ldr	r1, [pc, #308]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d040      	beq.n	8007830 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d107      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d115      	bne.n	80077ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e07f      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d107      	bne.n	80077de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ce:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e073      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077de:	4b3d      	ldr	r3, [pc, #244]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e06b      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077ee:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 0203 	bic.w	r2, r3, #3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	4936      	ldr	r1, [pc, #216]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007800:	f7fd fc90 	bl	8005124 <HAL_GetTick>
 8007804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007806:	e00a      	b.n	800781e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007808:	f7fd fc8c 	bl	8005124 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f241 3288 	movw	r2, #5000	; 0x1388
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e053      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781e:	4b2d      	ldr	r3, [pc, #180]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 020c 	and.w	r2, r3, #12
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	429a      	cmp	r2, r3
 800782e:	d1eb      	bne.n	8007808 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007830:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d210      	bcs.n	8007860 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f023 020f 	bic.w	r2, r3, #15
 8007846:	4922      	ldr	r1, [pc, #136]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	4313      	orrs	r3, r2
 800784c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784e:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d001      	beq.n	8007860 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e032      	b.n	80078c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800786c:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4916      	ldr	r1, [pc, #88]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800787a:	4313      	orrs	r3, r2
 800787c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	490e      	ldr	r1, [pc, #56]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 800789a:	4313      	orrs	r3, r2
 800789c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800789e:	f000 f821 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 80078a2:	4601      	mov	r1, r0
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCC_ClockConfig+0x1c8>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	091b      	lsrs	r3, r3, #4
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <HAL_RCC_ClockConfig+0x1cc>)
 80078b0:	5cd3      	ldrb	r3, [r2, r3]
 80078b2:	fa21 f303 	lsr.w	r3, r1, r3
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <HAL_RCC_ClockConfig+0x1d0>)
 80078b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <HAL_RCC_ClockConfig+0x1d4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fc fbc4 	bl	800404c <HAL_InitTick>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40023c00 	.word	0x40023c00
 80078d4:	40023800 	.word	0x40023800
 80078d8:	08019fd4 	.word	0x08019fd4
 80078dc:	20000000 	.word	0x20000000
 80078e0:	20000008 	.word	0x20000008

080078e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	2300      	movs	r3, #0
 80078f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078fa:	4b63      	ldr	r3, [pc, #396]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 030c 	and.w	r3, r3, #12
 8007902:	2b04      	cmp	r3, #4
 8007904:	d007      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0x32>
 8007906:	2b08      	cmp	r3, #8
 8007908:	d008      	beq.n	800791c <HAL_RCC_GetSysClockFreq+0x38>
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 80b4 	bne.w	8007a78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b5e      	ldr	r3, [pc, #376]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007912:	60bb      	str	r3, [r7, #8]
      break;
 8007914:	e0b3      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007916:	4b5e      	ldr	r3, [pc, #376]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007918:	60bb      	str	r3, [r7, #8]
      break;
 800791a:	e0b0      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800791c:	4b5a      	ldr	r3, [pc, #360]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007924:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007926:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04a      	beq.n	80079c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007932:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	f04f 0400 	mov.w	r4, #0
 800793c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	ea03 0501 	and.w	r5, r3, r1
 8007948:	ea04 0602 	and.w	r6, r4, r2
 800794c:	4629      	mov	r1, r5
 800794e:	4632      	mov	r2, r6
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	0154      	lsls	r4, r2, #5
 800795a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800795e:	014b      	lsls	r3, r1, #5
 8007960:	4619      	mov	r1, r3
 8007962:	4622      	mov	r2, r4
 8007964:	1b49      	subs	r1, r1, r5
 8007966:	eb62 0206 	sbc.w	r2, r2, r6
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	f04f 0400 	mov.w	r4, #0
 8007972:	0194      	lsls	r4, r2, #6
 8007974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007978:	018b      	lsls	r3, r1, #6
 800797a:	1a5b      	subs	r3, r3, r1
 800797c:	eb64 0402 	sbc.w	r4, r4, r2
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	00e2      	lsls	r2, r4, #3
 800798a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800798e:	00d9      	lsls	r1, r3, #3
 8007990:	460b      	mov	r3, r1
 8007992:	4614      	mov	r4, r2
 8007994:	195b      	adds	r3, r3, r5
 8007996:	eb44 0406 	adc.w	r4, r4, r6
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	0262      	lsls	r2, r4, #9
 80079a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80079a8:	0259      	lsls	r1, r3, #9
 80079aa:	460b      	mov	r3, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	4621      	mov	r1, r4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f04f 0400 	mov.w	r4, #0
 80079b8:	461a      	mov	r2, r3
 80079ba:	4623      	mov	r3, r4
 80079bc:	f7f9 f93c 	bl	8000c38 <__aeabi_uldivmod>
 80079c0:	4603      	mov	r3, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e049      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c8:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	099b      	lsrs	r3, r3, #6
 80079ce:	f04f 0400 	mov.w	r4, #0
 80079d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	ea03 0501 	and.w	r5, r3, r1
 80079de:	ea04 0602 	and.w	r6, r4, r2
 80079e2:	4629      	mov	r1, r5
 80079e4:	4632      	mov	r2, r6
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	0154      	lsls	r4, r2, #5
 80079f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079f4:	014b      	lsls	r3, r1, #5
 80079f6:	4619      	mov	r1, r3
 80079f8:	4622      	mov	r2, r4
 80079fa:	1b49      	subs	r1, r1, r5
 80079fc:	eb62 0206 	sbc.w	r2, r2, r6
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	0194      	lsls	r4, r2, #6
 8007a0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a0e:	018b      	lsls	r3, r1, #6
 8007a10:	1a5b      	subs	r3, r3, r1
 8007a12:	eb64 0402 	sbc.w	r4, r4, r2
 8007a16:	f04f 0100 	mov.w	r1, #0
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	00e2      	lsls	r2, r4, #3
 8007a20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a24:	00d9      	lsls	r1, r3, #3
 8007a26:	460b      	mov	r3, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	195b      	adds	r3, r3, r5
 8007a2c:	eb44 0406 	adc.w	r4, r4, r6
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	02a2      	lsls	r2, r4, #10
 8007a3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a3e:	0299      	lsls	r1, r3, #10
 8007a40:	460b      	mov	r3, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	4621      	mov	r1, r4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f04f 0400 	mov.w	r4, #0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4623      	mov	r3, r4
 8007a52:	f7f9 f8f1 	bl	8000c38 <__aeabi_uldivmod>
 8007a56:	4603      	mov	r3, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	3301      	adds	r3, #1
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	60bb      	str	r3, [r7, #8]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a78:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a7a:	60bb      	str	r3, [r7, #8]
      break;
 8007a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	00f42400 	.word	0x00f42400
 8007a90:	007a1200 	.word	0x007a1200

08007a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000000 	.word	0x20000000

08007aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ab0:	f7ff fff0 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	0a9b      	lsrs	r3, r3, #10
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	4a03      	ldr	r2, [pc, #12]	; (8007ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ac2:	5cd3      	ldrb	r3, [r2, r3]
 8007ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	08019fe4 	.word	0x08019fe4

08007ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ad8:	f7ff ffdc 	bl	8007a94 <HAL_RCC_GetHCLKFreq>
 8007adc:	4601      	mov	r1, r0
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0b5b      	lsrs	r3, r3, #13
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aea:	5cd3      	ldrb	r3, [r2, r3]
 8007aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	08019fe4 	.word	0x08019fe4

08007afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	220f      	movs	r2, #15
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b0c:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0203 	and.w	r2, r3, #3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <HAL_RCC_GetClockConfig+0x5c>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	08db      	lsrs	r3, r3, #3
 8007b36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <HAL_RCC_GetClockConfig+0x60>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 020f 	and.w	r2, r3, #15
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	40023c00 	.word	0x40023c00

08007b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d012      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b88:	4b69      	ldr	r3, [pc, #420]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4a68      	ldr	r2, [pc, #416]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b92:	6093      	str	r3, [r2, #8]
 8007b94:	4b66      	ldr	r3, [pc, #408]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	4964      	ldr	r1, [pc, #400]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d017      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bba:	4b5d      	ldr	r3, [pc, #372]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc8:	4959      	ldr	r1, [pc, #356]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd8:	d101      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007be6:	2301      	movs	r3, #1
 8007be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d017      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bf6:	4b4e      	ldr	r3, [pc, #312]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	494a      	ldr	r1, [pc, #296]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c14:	d101      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007c32:	2301      	movs	r3, #1
 8007c34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 808b 	beq.w	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c44:	4b3a      	ldr	r3, [pc, #232]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	4a39      	ldr	r2, [pc, #228]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8007c50:	4b37      	ldr	r3, [pc, #220]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a34      	ldr	r2, [pc, #208]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c68:	f7fd fa5c 	bl	8005124 <HAL_GetTick>
 8007c6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c70:	f7fd fa58 	bl	8005124 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e31e      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c82:	4b2c      	ldr	r3, [pc, #176]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c8e:	4b28      	ldr	r3, [pc, #160]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d035      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d02e      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cac:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cb6:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cc2:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ccc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007cce:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d114      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fd fa20 	bl	8005124 <HAL_GetTick>
 8007ce4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce6:	e00a      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce8:	f7fd fa1c 	bl	8005124 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e2e0      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0ee      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d16:	d111      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d26:	400b      	ands	r3, r1
 8007d28:	4901      	ldr	r1, [pc, #4]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
 8007d2e:	e00b      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007d30:	40023800 	.word	0x40023800
 8007d34:	40007000 	.word	0x40007000
 8007d38:	0ffffcff 	.word	0x0ffffcff
 8007d3c:	4bac      	ldr	r3, [pc, #688]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4aab      	ldr	r2, [pc, #684]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d46:	6093      	str	r3, [r2, #8]
 8007d48:	4ba9      	ldr	r3, [pc, #676]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d54:	49a6      	ldr	r1, [pc, #664]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d66:	4ba2      	ldr	r3, [pc, #648]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6c:	4aa0      	ldr	r2, [pc, #640]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007d76:	4b9e      	ldr	r3, [pc, #632]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	499b      	ldr	r1, [pc, #620]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d94:	4b96      	ldr	r3, [pc, #600]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da2:	4993      	ldr	r1, [pc, #588]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007db6:	4b8e      	ldr	r3, [pc, #568]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	498a      	ldr	r1, [pc, #552]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dd8:	4b85      	ldr	r3, [pc, #532]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de6:	4982      	ldr	r1, [pc, #520]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dfa:	4b7d      	ldr	r3, [pc, #500]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e08:	4979      	ldr	r1, [pc, #484]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e1c:	4b74      	ldr	r3, [pc, #464]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e22:	f023 0203 	bic.w	r2, r3, #3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	4971      	ldr	r1, [pc, #452]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e3e:	4b6c      	ldr	r3, [pc, #432]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e44:	f023 020c 	bic.w	r2, r3, #12
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4c:	4968      	ldr	r1, [pc, #416]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e60:	4b63      	ldr	r3, [pc, #396]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6e:	4960      	ldr	r1, [pc, #384]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e82:	4b5b      	ldr	r3, [pc, #364]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e90:	4957      	ldr	r1, [pc, #348]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ea4:	4b52      	ldr	r3, [pc, #328]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	494f      	ldr	r1, [pc, #316]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ec6:	4b4a      	ldr	r3, [pc, #296]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ecc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed4:	4946      	ldr	r1, [pc, #280]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ee8:	4b41      	ldr	r3, [pc, #260]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef6:	493e      	ldr	r1, [pc, #248]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f0a:	4b39      	ldr	r3, [pc, #228]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f18:	4935      	ldr	r1, [pc, #212]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f2c:	4b30      	ldr	r3, [pc, #192]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f3a:	492d      	ldr	r1, [pc, #180]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f4e:	4b28      	ldr	r3, [pc, #160]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5c:	4924      	ldr	r1, [pc, #144]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8c:	4918      	ldr	r1, [pc, #96]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb0:	490f      	ldr	r1, [pc, #60]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d005      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc6:	f040 80d8 	bne.w	800817a <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd6:	f7fd f8a5 	bl	8005124 <HAL_GetTick>
 8007fda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fdc:	e00a      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fde:	f7fd f8a1 	bl	8005124 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b64      	cmp	r3, #100	; 0x64
 8007fea:	d903      	bls.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e167      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8007ff0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ff4:	4bad      	ldr	r3, [pc, #692]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ee      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d021      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d11d      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008014:	4ba5      	ldr	r3, [pc, #660]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008022:	4ba2      	ldr	r3, [pc, #648]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	0e1b      	lsrs	r3, r3, #24
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	019a      	lsls	r2, r3, #6
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	431a      	orrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	071b      	lsls	r3, r3, #28
 8008048:	4998      	ldr	r1, [pc, #608]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008064:	d00a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02e      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d129      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800807c:	4b8b      	ldr	r3, [pc, #556]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800807e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800808a:	4b88      	ldr	r3, [pc, #544]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800808c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008090:	0f1b      	lsrs	r3, r3, #28
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	019a      	lsls	r2, r3, #6
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	071b      	lsls	r3, r3, #28
 80080b0:	497e      	ldr	r1, [pc, #504]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80080b8:	4b7c      	ldr	r3, [pc, #496]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080be:	f023 021f 	bic.w	r2, r3, #31
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	3b01      	subs	r3, #1
 80080c8:	4978      	ldr	r1, [pc, #480]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01d      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080dc:	4b73      	ldr	r3, [pc, #460]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e2:	0e1b      	lsrs	r3, r3, #24
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080ea:	4b70      	ldr	r3, [pc, #448]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f0:	0f1b      	lsrs	r3, r3, #28
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	019a      	lsls	r2, r3, #6
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	431a      	orrs	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	431a      	orrs	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	071b      	lsls	r3, r3, #28
 8008110:	4966      	ldr	r1, [pc, #408]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008112:	4313      	orrs	r3, r2
 8008114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	019a      	lsls	r2, r3, #6
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	061b      	lsls	r3, r3, #24
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	071b      	lsls	r3, r3, #28
 8008140:	495a      	ldr	r1, [pc, #360]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008148:	4b58      	ldr	r3, [pc, #352]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a57      	ldr	r2, [pc, #348]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800814e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008154:	f7fc ffe6 	bl	8005124 <HAL_GetTick>
 8008158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800815a:	e008      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800815c:	f7fc ffe2 	bl	8005124 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b64      	cmp	r3, #100	; 0x64
 8008168:	d901      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e0a8      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800816e:	4b4f      	ldr	r3, [pc, #316]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0f0      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2b01      	cmp	r3, #1
 800817e:	f040 809e 	bne.w	80082be <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008182:	4b4a      	ldr	r3, [pc, #296]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a49      	ldr	r2, [pc, #292]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800818c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818e:	f7fc ffc9 	bl	8005124 <HAL_GetTick>
 8008192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008194:	e008      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008196:	f7fc ffc5 	bl	8005124 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b64      	cmp	r3, #100	; 0x64
 80081a2:	d901      	bls.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e08b      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081a8:	4b40      	ldr	r3, [pc, #256]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b4:	d0ef      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02e      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d12a      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081de:	4b33      	ldr	r3, [pc, #204]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	0c1b      	lsrs	r3, r3, #16
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081ec:	4b2f      	ldr	r3, [pc, #188]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	0f1b      	lsrs	r3, r3, #28
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	019a      	lsls	r2, r3, #6
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	071b      	lsls	r3, r3, #28
 8008212:	4926      	ldr	r1, [pc, #152]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800821c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008220:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008228:	3b01      	subs	r3, #1
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	491f      	ldr	r1, [pc, #124]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d022      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008248:	d11d      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800824a:	4b18      	ldr	r3, [pc, #96]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008250:	0e1b      	lsrs	r3, r3, #24
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008258:	4b14      	ldr	r3, [pc, #80]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800825a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	019a      	lsls	r2, r3, #6
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	431a      	orrs	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	061b      	lsls	r3, r3, #24
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	071b      	lsls	r3, r3, #28
 800827e:	490b      	ldr	r1, [pc, #44]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008286:	4b09      	ldr	r3, [pc, #36]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a08      	ldr	r2, [pc, #32]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800828c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008292:	f7fc ff47 	bl	8005124 <HAL_GetTick>
 8008296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008298:	e00a      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800829a:	f7fc ff43 	bl	8005124 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b64      	cmp	r3, #100	; 0x64
 80082a6:	d903      	bls.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e009      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80082ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082bc:	d1ed      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40023800 	.word	0x40023800

080082cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e022      	b.n	8008324 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fb fc89 	bl	8003c08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2203      	movs	r2, #3
 80082fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f814 	bl	800832c <HAL_SD_InitCard>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e00a      	b.n	8008324 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800832c:	b5b0      	push	{r4, r5, r7, lr}
 800832e:	b08e      	sub	sp, #56	; 0x38
 8008330:	af04      	add	r7, sp, #16
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008334:	2300      	movs	r3, #0
 8008336:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008348:	2376      	movs	r3, #118	; 0x76
 800834a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681d      	ldr	r5, [r3, #0]
 8008350:	466c      	mov	r4, sp
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800835a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008364:	4628      	mov	r0, r5
 8008366:	f003 fa97 	bl	800b898 <SDMMC_Init>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e03b      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800838a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f003 facb 	bl	800b92c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 ffca 	bl	8009340 <SD_PowerON>
 80083ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e013      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fee9 	bl	80091a4 <SD_InitCard>
 80083d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bdb0      	pop	{r4, r5, r7, pc}

080083fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d107      	bne.n	8008424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0cc      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 80c5 	bne.w	80085bc <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	429a      	cmp	r2, r3
 8008444:	d907      	bls.n	8008456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e0b3      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2203      	movs	r2, #3
 800845a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	4a53      	ldr	r2, [pc, #332]	; (80085c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800847c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	4a52      	ldr	r2, [pc, #328]	; (80085cc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008484:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2200      	movs	r2, #0
 800848c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3380      	adds	r3, #128	; 0x80
 8008498:	4619      	mov	r1, r3
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	025b      	lsls	r3, r3, #9
 80084a0:	089b      	lsrs	r3, r3, #2
 80084a2:	f7fc fffd 	bl	80054a0 <HAL_DMA_Start_IT>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80084ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a43      	ldr	r2, [pc, #268]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e070      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0208 	orr.w	r2, r2, #8
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d002      	beq.n	80084fa <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	025b      	lsls	r3, r3, #9
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008502:	4618      	mov	r0, r3
 8008504:	f003 faa6 	bl	800ba54 <SDMMC_CmdBlockLength>
 8008508:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00f      	beq.n	8008530 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2e      	ldr	r2, [pc, #184]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	431a      	orrs	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e046      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	025b      	lsls	r3, r3, #9
 800853a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800853c:	2390      	movs	r3, #144	; 0x90
 800853e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008540:	2302      	movs	r3, #2
 8008542:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008544:	2300      	movs	r3, #0
 8008546:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008548:	2301      	movs	r3, #1
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f107 0210 	add.w	r2, r7, #16
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f003 fa50 	bl	800b9fc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d90a      	bls.n	8008578 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2282      	movs	r2, #130	; 0x82
 8008566:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856e:	4618      	mov	r0, r3
 8008570:	f003 fab4 	bl	800badc <SDMMC_CmdReadMultiBlock>
 8008574:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008576:	e009      	b.n	800858c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2281      	movs	r2, #129	; 0x81
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008584:	4618      	mov	r0, r3
 8008586:	f003 fa87 	bl	800ba98 <SDMMC_CmdReadSingleBlock>
 800858a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d012      	beq.n	80085b8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0e      	ldr	r2, [pc, #56]	; (80085d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	431a      	orrs	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e002      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3730      	adds	r7, #48	; 0x30
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	08008fb3 	.word	0x08008fb3
 80085cc:	08009025 	.word	0x08009025
 80085d0:	004005ff 	.word	0x004005ff

080085d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0cf      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	f040 80c8 	bne.w	800879a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	429a      	cmp	r2, r3
 800861c:	d907      	bls.n	800862e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e0b6      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 021a 	orr.w	r2, r2, #26
 800864c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008652:	4a54      	ldr	r2, [pc, #336]	; (80087a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	4a53      	ldr	r2, [pc, #332]	; (80087a8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800865c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	025b      	lsls	r3, r3, #9
 8008672:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800867c:	4618      	mov	r0, r3
 800867e:	f003 f9e9 	bl	800ba54 <SDMMC_CmdBlockLength>
 8008682:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00f      	beq.n	80086aa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a47      	ldr	r2, [pc, #284]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e078      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d90a      	bls.n	80086c6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22a0      	movs	r2, #160	; 0xa0
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086bc:	4618      	mov	r0, r3
 80086be:	f003 fa51 	bl	800bb64 <SDMMC_CmdWriteMultiBlock>
 80086c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086c4:	e009      	b.n	80086da <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2290      	movs	r2, #144	; 0x90
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d2:	4618      	mov	r0, r3
 80086d4:	f003 fa24 	bl	800bb20 <SDMMC_CmdWriteSingleBlock>
 80086d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d012      	beq.n	8008706 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a31      	ldr	r2, [pc, #196]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	431a      	orrs	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e04a      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f042 0208 	orr.w	r2, r2, #8
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3380      	adds	r3, #128	; 0x80
 8008722:	461a      	mov	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	025b      	lsls	r3, r3, #9
 8008728:	089b      	lsrs	r3, r3, #2
 800872a:	f7fc feb9 	bl	80054a0 <HAL_DMA_Start_IT>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01a      	beq.n	800876a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 021a 	bic.w	r2, r2, #26
 8008742:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e018      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800876a:	f04f 33ff 	mov.w	r3, #4294967295
 800876e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	025b      	lsls	r3, r3, #9
 8008774:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008776:	2390      	movs	r3, #144	; 0x90
 8008778:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800877e:	2300      	movs	r3, #0
 8008780:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008782:	2301      	movs	r3, #1
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f107 0210 	add.w	r2, r7, #16
 800878e:	4611      	mov	r1, r2
 8008790:	4618      	mov	r0, r3
 8008792:	f003 f933 	bl	800b9fc <SDMMC_ConfigData>

      return HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	e000      	b.n	800879c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	3730      	adds	r7, #48	; 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	08008f89 	.word	0x08008f89
 80087a8:	08009025 	.word	0x08009025
 80087ac:	004005ff 	.word	0x004005ff

080087b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <HAL_SD_IRQHandler+0x2e>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 ffc8 	bl	800976c <SD_Read_IT>
 80087dc:	e153      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 808d 	beq.w	8008908 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	4ba3      	ldr	r3, [pc, #652]	; (8008a90 <HAL_SD_IRQHandler+0x2e0>)
 8008804:	400b      	ands	r3, r1
 8008806:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d039      	beq.n	8008896 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <HAL_SD_IRQHandler+0x86>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d011      	beq.n	800885a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f003 f9b4 	bl	800bba8 <SDMMC_CmdStopTransfer>
 8008840:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f921 	bl	8008a9c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008862:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <HAL_SD_IRQHandler+0xd6>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f005 f936 	bl	800daf8 <HAL_SD_RxCpltCallback>
 800888c:	e0fb      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f005 f928 	bl	800dae4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008894:	e0f7      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80f2 	beq.w	8008a86 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d011      	beq.n	80088d0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f003 f979 	bl	800bba8 <SDMMC_CmdStopTransfer>
 80088b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d008      	beq.n	80088d0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8e6 	bl	8008a9c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f040 80d5 	bne.w	8008a86 <HAL_SD_IRQHandler+0x2d6>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 80cf 	bne.w	8008a86 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0208 	bic.w	r2, r2, #8
 80088f6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f005 f8ef 	bl	800dae4 <HAL_SD_TxCpltCallback>
}
 8008906:	e0be      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d008      	beq.n	8008928 <HAL_SD_IRQHandler+0x178>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 ff74 	bl	800980e <SD_Write_IT>
 8008926:	e0ae      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80a7 	beq.w	8008a86 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	f043 0202 	orr.w	r2, r3, #2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	f043 0208 	orr.w	r2, r3, #8
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f043 0220 	orr.w	r2, r3, #32
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	f043 0210 	orr.w	r2, r3, #16
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80089a8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80089b8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f003 f8f2 	bl	800bba8 <SDMMC_CmdStopTransfer>
 80089c4:	4602      	mov	r2, r0
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f857 	bl	8008a9c <HAL_SD_ErrorCallback>
}
 80089ee:	e04a      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d045      	beq.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <HAL_SD_IRQHandler+0x25e>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d011      	beq.n	8008a32 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	4a20      	ldr	r2, [pc, #128]	; (8008a94 <HAL_SD_IRQHandler+0x2e4>)
 8008a14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fc fda0 	bl	8005560 <HAL_DMA_Abort_IT>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d02f      	beq.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fb4c 	bl	80090c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a30:	e029      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <HAL_SD_IRQHandler+0x296>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d011      	beq.n	8008a6a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <HAL_SD_IRQHandler+0x2e8>)
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fc fd84 	bl	8005560 <HAL_DMA_Abort_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d013      	beq.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fb67 	bl	8009136 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008a68:	e00d      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f005 f826 	bl	800dad0 <HAL_SD_AbortCallback>
}
 8008a84:	e7ff      	b.n	8008a86 <HAL_SD_IRQHandler+0x2d6>
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	ffff3ec5 	.word	0xffff3ec5
 8008a94:	080090c9 	.word	0x080090c9
 8008a98:	08009137 	.word	0x08009137

08008a9c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abe:	0f9b      	lsrs	r3, r3, #30
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aca:	0e9b      	lsrs	r3, r3, #26
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008adc:	0e1b      	lsrs	r3, r3, #24
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008afa:	0a1b      	lsrs	r3, r3, #8
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b10:	0d1b      	lsrs	r3, r3, #20
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b2e:	0bdb      	lsrs	r3, r3, #15
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b40:	0b9b      	lsrs	r3, r3, #14
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b52:	0b5b      	lsrs	r3, r3, #13
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b64:	0b1b      	lsrs	r3, r3, #12
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2200      	movs	r2, #0
 8008b76:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d163      	bne.n	8008c48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b84:	009a      	lsls	r2, r3, #2
 8008b86:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008b90:	0f92      	lsrs	r2, r2, #30
 8008b92:	431a      	orrs	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9c:	0edb      	lsrs	r3, r3, #27
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bae:	0e1b      	lsrs	r3, r3, #24
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc0:	0d5b      	lsrs	r3, r3, #21
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd2:	0c9b      	lsrs	r3, r3, #18
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	0bdb      	lsrs	r3, r3, #15
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	7e1b      	ldrb	r3, [r3, #24]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	3302      	adds	r3, #2
 8008c08:	2201      	movs	r2, #1
 8008c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c12:	fb02 f203 	mul.w	r2, r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	7a1b      	ldrb	r3, [r3, #8]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	2201      	movs	r2, #1
 8008c26:	409a      	lsls	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008c34:	0a52      	lsrs	r2, r2, #9
 8008c36:	fb02 f203 	mul.w	r2, r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c44:	661a      	str	r2, [r3, #96]	; 0x60
 8008c46:	e031      	b.n	8008cac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d11d      	bne.n	8008c8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c54:	041b      	lsls	r3, r3, #16
 8008c56:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5e:	0c1b      	lsrs	r3, r3, #16
 8008c60:	431a      	orrs	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	029a      	lsls	r2, r3, #10
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c80:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60
 8008c8a:	e00f      	b.n	8008cac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a58      	ldr	r2, [pc, #352]	; (8008df4 <HAL_SD_GetCardCSD+0x344>)
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e09d      	b.n	8008de8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb0:	0b9b      	lsrs	r3, r3, #14
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc2:	09db      	lsrs	r3, r3, #7
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce4:	0fdb      	lsrs	r3, r3, #31
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf0:	0f5b      	lsrs	r3, r3, #29
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d02:	0e9b      	lsrs	r3, r3, #26
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d14:	0d9b      	lsrs	r3, r3, #22
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	0d5b      	lsrs	r3, r3, #21
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d42:	0c1b      	lsrs	r3, r3, #16
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	0bdb      	lsrs	r3, r3, #15
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	0b9b      	lsrs	r3, r3, #14
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7e:	0b5b      	lsrs	r3, r3, #13
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	0b1b      	lsrs	r3, r3, #12
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da6:	0a9b      	lsrs	r3, r3, #10
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dba:	0a1b      	lsrs	r3, r3, #8
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	004005ff 	.word	0x004005ff

08008df8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e50:	b5b0      	push	{r4, r5, r7, lr}
 8008e52:	b08e      	sub	sp, #56	; 0x38
 8008e54:	af04      	add	r7, sp, #16
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d02e      	beq.n	8008ec8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e70:	d106      	bne.n	8008e80 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e7e:	e029      	b.n	8008ed4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e86:	d10a      	bne.n	8008e9e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fb0f 	bl	80094ac <SD_WideBus_Enable>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
 8008e9c:	e01a      	b.n	8008ed4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb4c 	bl	8009542 <SD_WideBus_Disable>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8008eb8:	e00c      	b.n	8008ed4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ec6:	e005      	b.n	8008ed4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a18      	ldr	r2, [pc, #96]	; (8008f44 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e024      	b.n	8008f3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	466c      	mov	r4, sp
 8008f18:	f107 0318 	add.w	r3, r7, #24
 8008f1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f24:	f107 030c 	add.w	r3, r7, #12
 8008f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f002 fcb4 	bl	800b898 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3728      	adds	r7, #40	; 0x28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bdb0      	pop	{r4, r5, r7, pc}
 8008f42:	bf00      	nop
 8008f44:	004005ff 	.word	0x004005ff

08008f48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f54:	f107 030c 	add.w	r3, r7, #12
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa7e 	bl	800945c <SD_SendStatus>
 8008f60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	0a5b      	lsrs	r3, r3, #9
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f7e:	693b      	ldr	r3, [r7, #16]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fa4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	2b82      	cmp	r3, #130	; 0x82
 8008fc6:	d111      	bne.n	8008fec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f002 fdeb 	bl	800bba8 <SDMMC_CmdStopTransfer>
 8008fd2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fd58 	bl	8008a9c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0208 	bic.w	r2, r2, #8
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f240 523a 	movw	r2, #1338	; 0x53a
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f004 fd6f 	bl	800daf8 <HAL_SD_RxCpltCallback>
#endif
}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fc fc40 	bl	80058b8 <HAL_DMA_GetError>
 8009038:	4603      	mov	r3, r0
 800903a:	2b02      	cmp	r3, #2
 800903c:	d03e      	beq.n	80090bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009044:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d002      	beq.n	800905a <SD_DMAError+0x36>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d12d      	bne.n	80090b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a19      	ldr	r2, [pc, #100]	; (80090c4 <SD_DMAError+0xa0>)
 8009060:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009070:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800907e:	6978      	ldr	r0, [r7, #20]
 8009080:	f7ff ff62 	bl	8008f48 <HAL_SD_GetCardState>
 8009084:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b06      	cmp	r3, #6
 800908a:	d002      	beq.n	8009092 <SD_DMAError+0x6e>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b05      	cmp	r3, #5
 8009090:	d10a      	bne.n	80090a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f002 fd86 	bl	800bba8 <SDMMC_CmdStopTransfer>
 800909c:	4602      	mov	r2, r0
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	431a      	orrs	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2200      	movs	r2, #0
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f7ff fcf0 	bl	8008a9c <HAL_SD_ErrorCallback>
#endif
  }
}
 80090bc:	bf00      	nop
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	004005ff 	.word	0x004005ff

080090c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f240 523a 	movw	r2, #1338	; 0x53a
 80090de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff ff31 	bl	8008f48 <HAL_SD_GetCardState>
 80090e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b06      	cmp	r3, #6
 80090fa:	d002      	beq.n	8009102 <SD_DMATxAbort+0x3a>
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b05      	cmp	r3, #5
 8009100:	d10a      	bne.n	8009118 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f002 fd4e 	bl	800bba8 <SDMMC_CmdStopTransfer>
 800910c:	4602      	mov	r2, r0
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	431a      	orrs	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d103      	bne.n	8009128 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f004 fcd5 	bl	800dad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009126:	e002      	b.n	800912e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fcb7 	bl	8008a9c <HAL_SD_ErrorCallback>
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f240 523a 	movw	r2, #1338	; 0x53a
 800914c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff fefa 	bl	8008f48 <HAL_SD_GetCardState>
 8009154:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b06      	cmp	r3, #6
 8009168:	d002      	beq.n	8009170 <SD_DMARxAbort+0x3a>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b05      	cmp	r3, #5
 800916e:	d10a      	bne.n	8009186 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f002 fd17 	bl	800bba8 <SDMMC_CmdStopTransfer>
 800917a:	4602      	mov	r2, r0
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	431a      	orrs	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f004 fc9e 	bl	800dad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009194:	e002      	b.n	800919c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fc80 	bl	8008a9c <HAL_SD_ErrorCallback>
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091a4:	b5b0      	push	{r4, r5, r7, lr}
 80091a6:	b094      	sub	sp, #80	; 0x50
 80091a8:	af04      	add	r7, sp, #16
 80091aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80091ac:	2301      	movs	r3, #1
 80091ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f002 fbc8 	bl	800b94a <SDMMC_GetPowerState>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d102      	bne.n	80091c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091c4:	e0b7      	b.n	8009336 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d02f      	beq.n	800922e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 fdf3 	bl	800bdbe <SDMMC_CmdSendCID>
 80091d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80091e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e2:	e0a8      	b.n	8009336 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f002 fbf3 	bl	800b9d6 <SDMMC_GetResponse>
 80091f0:	4602      	mov	r2, r0
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2104      	movs	r1, #4
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 fbea 	bl	800b9d6 <SDMMC_GetResponse>
 8009202:	4602      	mov	r2, r0
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2108      	movs	r1, #8
 800920e:	4618      	mov	r0, r3
 8009210:	f002 fbe1 	bl	800b9d6 <SDMMC_GetResponse>
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	210c      	movs	r1, #12
 8009220:	4618      	mov	r0, r3
 8009222:	f002 fbd8 	bl	800b9d6 <SDMMC_GetResponse>
 8009226:	4602      	mov	r2, r0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009232:	2b03      	cmp	r3, #3
 8009234:	d00d      	beq.n	8009252 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f107 020e 	add.w	r2, r7, #14
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f002 fdf9 	bl	800be38 <SDMMC_CmdSetRelAdd>
 8009246:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <SD_InitCard+0xae>
    {
      return errorstate;
 800924e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009250:	e071      	b.n	8009336 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009256:	2b03      	cmp	r3, #3
 8009258:	d036      	beq.n	80092c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800925a:	89fb      	ldrh	r3, [r7, #14]
 800925c:	461a      	mov	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f002 fdc3 	bl	800bdfa <SDMMC_CmdSendCSD>
 8009274:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <SD_InitCard+0xdc>
    {
      return errorstate;
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	e05a      	b.n	8009336 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2100      	movs	r1, #0
 8009286:	4618      	mov	r0, r3
 8009288:	f002 fba5 	bl	800b9d6 <SDMMC_GetResponse>
 800928c:	4602      	mov	r2, r0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2104      	movs	r1, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f002 fb9c 	bl	800b9d6 <SDMMC_GetResponse>
 800929e:	4602      	mov	r2, r0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2108      	movs	r1, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f002 fb93 	bl	800b9d6 <SDMMC_GetResponse>
 80092b0:	4602      	mov	r2, r0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	210c      	movs	r1, #12
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 fb8a 	bl	800b9d6 <SDMMC_GetResponse>
 80092c2:	4602      	mov	r2, r0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2104      	movs	r1, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f002 fb81 	bl	800b9d6 <SDMMC_GetResponse>
 80092d4:	4603      	mov	r3, r0
 80092d6:	0d1a      	lsrs	r2, r3, #20
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092dc:	f107 0310 	add.w	r3, r7, #16
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fbe4 	bl	8008ab0 <HAL_SD_GetCardCSD>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092f2:	e020      	b.n	8009336 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	f04f 0400 	mov.w	r4, #0
 8009302:	461a      	mov	r2, r3
 8009304:	4623      	mov	r3, r4
 8009306:	4608      	mov	r0, r1
 8009308:	f002 fc70 	bl	800bbec <SDMMC_CmdSelDesel>
 800930c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <SD_InitCard+0x174>
  {
    return errorstate;
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	e00e      	b.n	8009336 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681d      	ldr	r5, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	466c      	mov	r4, sp
 8009320:	f103 0210 	add.w	r2, r3, #16
 8009324:	ca07      	ldmia	r2, {r0, r1, r2}
 8009326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800932a:	3304      	adds	r3, #4
 800932c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800932e:	4628      	mov	r0, r5
 8009330:	f002 fab2 	bl	800b898 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3740      	adds	r7, #64	; 0x40
 800933a:	46bd      	mov	sp, r7
 800933c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009340 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f002 fc6a 	bl	800bc32 <SDMMC_CmdGoIdleState>
 800935e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	e072      	b.n	8009450 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f002 fc7d 	bl	800bc6e <SDMMC_CmdOperCond>
 8009374:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00d      	beq.n	8009398 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f002 fc53 	bl	800bc32 <SDMMC_CmdGoIdleState>
 800938c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	e05b      	b.n	8009450 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d137      	bne.n	8009416 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2100      	movs	r1, #0
 80093ac:	4618      	mov	r0, r3
 80093ae:	f002 fc7d 	bl	800bcac <SDMMC_CmdAppCommand>
 80093b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d02d      	beq.n	8009416 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093be:	e047      	b.n	8009450 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f002 fc70 	bl	800bcac <SDMMC_CmdAppCommand>
 80093cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e03b      	b.n	8009450 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	491e      	ldr	r1, [pc, #120]	; (8009458 <SD_PowerON+0x118>)
 80093de:	4618      	mov	r0, r3
 80093e0:	f002 fc86 	bl	800bcf0 <SDMMC_CmdAppOperCommand>
 80093e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093f0:	e02e      	b.n	8009450 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2100      	movs	r1, #0
 80093f8:	4618      	mov	r0, r3
 80093fa:	f002 faec 	bl	800b9d6 <SDMMC_GetResponse>
 80093fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	0fdb      	lsrs	r3, r3, #31
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <SD_PowerON+0xcc>
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <SD_PowerON+0xce>
 800940c:	2300      	movs	r3, #0
 800940e:	613b      	str	r3, [r7, #16]

    count++;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3301      	adds	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800941c:	4293      	cmp	r3, r2
 800941e:	d802      	bhi.n	8009426 <SD_PowerON+0xe6>
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0cc      	beq.n	80093c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800942c:	4293      	cmp	r3, r2
 800942e:	d902      	bls.n	8009436 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009434:	e00c      	b.n	8009450 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	645a      	str	r2, [r3, #68]	; 0x44
 8009446:	e002      	b.n	800944e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	c1100000 	.word	0xc1100000

0800945c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800946c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009470:	e018      	b.n	80094a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f002 fcfb 	bl	800be7a <SDMMC_CmdSendStatus>
 8009484:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <SD_SendStatus+0x34>
  {
    return errorstate;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	e009      	b.n	80094a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2100      	movs	r1, #0
 8009496:	4618      	mov	r0, r3
 8009498:	f002 fa9d 	bl	800b9d6 <SDMMC_GetResponse>
 800949c:	4602      	mov	r2, r0
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	2300      	movs	r3, #0
 80094ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f002 fa87 	bl	800b9d6 <SDMMC_GetResponse>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d2:	d102      	bne.n	80094da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094d8:	e02f      	b.n	800953a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f879 	bl	80095d8 <SD_FindSCR>
 80094e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	e023      	b.n	800953a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01c      	beq.n	8009536 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009504:	041b      	lsls	r3, r3, #16
 8009506:	4619      	mov	r1, r3
 8009508:	4610      	mov	r0, r2
 800950a:	f002 fbcf 	bl	800bcac <SDMMC_CmdAppCommand>
 800950e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	e00f      	b.n	800953a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2102      	movs	r1, #2
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fc09 	bl	800bd38 <SDMMC_CmdBusWidth>
 8009526:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	e003      	b.n	800953a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009532:	2300      	movs	r3, #0
 8009534:	e001      	b.n	800953a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	2300      	movs	r3, #0
 8009550:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f002 fa3c 	bl	800b9d6 <SDMMC_GetResponse>
 800955e:	4603      	mov	r3, r0
 8009560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009568:	d102      	bne.n	8009570 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800956a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800956e:	e02f      	b.n	80095d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009570:	f107 030c 	add.w	r3, r7, #12
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f82e 	bl	80095d8 <SD_FindSCR>
 800957c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	e023      	b.n	80095d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01c      	beq.n	80095cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f002 fb84 	bl	800bcac <SDMMC_CmdAppCommand>
 80095a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	e00f      	b.n	80095d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f002 fbbe 	bl	800bd38 <SDMMC_CmdBusWidth>
 80095bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	e003      	b.n	80095d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e001      	b.n	80095d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095d8:	b590      	push	{r4, r7, lr}
 80095da:	b08f      	sub	sp, #60	; 0x3c
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095e2:	f7fb fd9f 	bl	8005124 <HAL_GetTick>
 80095e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80095ec:	2300      	movs	r3, #0
 80095ee:	60bb      	str	r3, [r7, #8]
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2108      	movs	r1, #8
 80095fe:	4618      	mov	r0, r3
 8009600:	f002 fa28 	bl	800ba54 <SDMMC_CmdBlockLength>
 8009604:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <SD_FindSCR+0x38>
  {
    return errorstate;
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	e0a9      	b.n	8009764 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009618:	041b      	lsls	r3, r3, #16
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f002 fb45 	bl	800bcac <SDMMC_CmdAppCommand>
 8009622:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <SD_FindSCR+0x56>
  {
    return errorstate;
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	e09a      	b.n	8009764 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800962e:	f04f 33ff 	mov.w	r3, #4294967295
 8009632:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009634:	2308      	movs	r3, #8
 8009636:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009638:	2330      	movs	r3, #48	; 0x30
 800963a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800963c:	2302      	movs	r3, #2
 800963e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009640:	2300      	movs	r3, #0
 8009642:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009644:	2301      	movs	r3, #1
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f107 0210 	add.w	r2, r7, #16
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f002 f9d2 	bl	800b9fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f002 fb8d 	bl	800bd7c <SDMMC_CmdSendSCR>
 8009662:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d022      	beq.n	80096b0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	e07a      	b.n	8009764 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00e      	beq.n	800969a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6819      	ldr	r1, [r3, #0]
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	f107 0208 	add.w	r2, r7, #8
 8009688:	18d4      	adds	r4, r2, r3
 800968a:	4608      	mov	r0, r1
 800968c:	f002 f930 	bl	800b8f0 <SDMMC_ReadFIFO>
 8009690:	4603      	mov	r3, r0
 8009692:	6023      	str	r3, [r4, #0]
      index++;
 8009694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009696:	3301      	adds	r3, #1
 8009698:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800969a:	f7fb fd43 	bl	8005124 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d102      	bne.n	80096b0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ae:	e059      	b.n	8009764 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096b6:	f240 432a 	movw	r3, #1066	; 0x42a
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0d6      	beq.n	800966e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d005      	beq.n	80096da <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2208      	movs	r2, #8
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096d6:	2308      	movs	r3, #8
 80096d8:	e044      	b.n	8009764 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2202      	movs	r2, #2
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80096f0:	2302      	movs	r3, #2
 80096f2:	e037      	b.n	8009764 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f003 0320 	and.w	r3, r3, #32
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2220      	movs	r2, #32
 8009708:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800970a:	2320      	movs	r3, #32
 800970c:	e02a      	b.n	8009764 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f240 523a 	movw	r2, #1338	; 0x53a
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	061a      	lsls	r2, r3, #24
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009724:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800972e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	0e1b      	lsrs	r3, r3, #24
 8009734:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	601a      	str	r2, [r3, #0]
    scr++;
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	3304      	adds	r3, #4
 800973e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	061a      	lsls	r2, r3, #24
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800974c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	0a1b      	lsrs	r3, r3, #8
 8009752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009756:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	0e1b      	lsrs	r3, r3, #24
 800975c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	373c      	adds	r7, #60	; 0x3c
 8009768:	46bd      	mov	sp, r7
 800976a:	bd90      	pop	{r4, r7, pc}

0800976c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009778:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d03f      	beq.n	8009806 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e033      	b.n	80097f4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f002 f8ad 	bl	800b8f0 <SDMMC_ReadFIFO>
 8009796:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	b2da      	uxtb	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3b01      	subs	r3, #1
 80097c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	0e1b      	lsrs	r3, r3, #24
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	3301      	adds	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	d9c8      	bls.n	800978c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009806:	bf00      	nop
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d043      	beq.n	80098b0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	e037      	b.n	800989e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3b01      	subs	r3, #1
 800983e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	021a      	lsls	r2, r3, #8
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4313      	orrs	r3, r2
 800984a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3b01      	subs	r3, #1
 8009856:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	041a      	lsls	r2, r3, #16
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	4313      	orrs	r3, r2
 8009862:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3b01      	subs	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	061a      	lsls	r2, r3, #24
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4313      	orrs	r3, r2
 800987a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3301      	adds	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	3b01      	subs	r3, #1
 8009886:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f107 0208 	add.w	r2, r7, #8
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f839 	bl	800b90a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	3301      	adds	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	d9c4      	bls.n	800982e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80098b0:	bf00      	nop
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e084      	b.n	80099d4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fa fa79 	bl	8003ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009900:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800990a:	d902      	bls.n	8009912 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e002      	b.n	8009918 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009916:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009920:	d007      	beq.n	8009932 <HAL_SPI_Init+0x7a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800992a:	d002      	beq.n	8009932 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10b      	bne.n	8009952 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009942:	d903      	bls.n	800994c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	631a      	str	r2, [r3, #48]	; 0x30
 800994a:	e002      	b.n	8009952 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009970:	431a      	orrs	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	431a      	orrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	ea42 0103 	orr.w	r1, r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	0c1b      	lsrs	r3, r3, #16
 8009992:	f003 0204 	and.w	r2, r3, #4
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	ea42 0103 	orr.w	r1, r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69da      	ldr	r2, [r3, #28]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	4613      	mov	r3, r2
 80099e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d110      	bne.n	8009a18 <HAL_SPI_Receive_IT+0x3c>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099fe:	d10b      	bne.n	8009a18 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2204      	movs	r2, #4
 8009a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f88c 	bl	8009b2c <HAL_SPI_TransmitReceive_IT>
 8009a14:	4603      	mov	r3, r0
 8009a16:	e081      	b.n	8009b1c <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <HAL_SPI_Receive_IT+0x4a>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e07a      	b.n	8009b1c <HAL_SPI_Receive_IT+0x140>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d002      	beq.n	8009a40 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a3e:	e068      	b.n	8009b12 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <HAL_SPI_Receive_IT+0x70>
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a50:	e05f      	b.n	8009b12 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2204      	movs	r2, #4
 8009a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	88fa      	ldrh	r2, [r7, #6]
 8009a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a96:	d90b      	bls.n	8009ab0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009aa6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4a1e      	ldr	r2, [pc, #120]	; (8009b24 <HAL_SPI_Receive_IT+0x148>)
 8009aac:	64da      	str	r2, [r3, #76]	; 0x4c
 8009aae:	e00a      	b.n	8009ac6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009abe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4a19      	ldr	r2, [pc, #100]	; (8009b28 <HAL_SPI_Receive_IT+0x14c>)
 8009ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ace:	d107      	bne.n	8009ae0 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ade:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009aee:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afa:	2b40      	cmp	r3, #64	; 0x40
 8009afc:	d008      	beq.n	8009b10 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e000      	b.n	8009b12 <HAL_SPI_Receive_IT+0x136>
  }

error :
 8009b10:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	0800a145 	.word	0x0800a145
 8009b28:	0800a0f5 	.word	0x0800a0f5

08009b2c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_SPI_TransmitReceive_IT+0x20>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e091      	b.n	8009c70 <HAL_SPI_TransmitReceive_IT+0x144>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009b62:	7dbb      	ldrb	r3, [r7, #22]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d00d      	beq.n	8009b84 <HAL_SPI_TransmitReceive_IT+0x58>
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b6e:	d106      	bne.n	8009b7e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <HAL_SPI_TransmitReceive_IT+0x52>
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d002      	beq.n	8009b84 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b82:	e070      	b.n	8009c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009b90:	887b      	ldrh	r3, [r7, #2]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b9a:	e064      	b.n	8009c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d003      	beq.n	8009bb0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2205      	movs	r2, #5
 8009bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	887a      	ldrh	r2, [r7, #2]
 8009bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	887a      	ldrh	r2, [r7, #2]
 8009bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	887a      	ldrh	r2, [r7, #2]
 8009bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	887a      	ldrh	r2, [r7, #2]
 8009bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009be6:	d906      	bls.n	8009bf6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4a24      	ldr	r2, [pc, #144]	; (8009c7c <HAL_SPI_TransmitReceive_IT+0x150>)
 8009bec:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a23      	ldr	r2, [pc, #140]	; (8009c80 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009bf2:	651a      	str	r2, [r3, #80]	; 0x50
 8009bf4:	e005      	b.n	8009c02 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a22      	ldr	r2, [pc, #136]	; (8009c84 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009bfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009c00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c0a:	d802      	bhi.n	8009c12 <HAL_SPI_TransmitReceive_IT+0xe6>
 8009c0c:	887b      	ldrh	r3, [r7, #2]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d908      	bls.n	8009c24 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	e007      	b.n	8009c34 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c32:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009c42:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b40      	cmp	r3, #64	; 0x40
 8009c50:	d008      	beq.n	8009c64 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e000      	b.n	8009c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009c64:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	0800a02f 	.word	0x0800a02f
 8009c80:	0800a095 	.word	0x0800a095
 8009c84:	08009edf 	.word	0x08009edf
 8009c88:	08009f9d 	.word	0x08009f9d

08009c8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10f      	bne.n	8009cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	099b      	lsrs	r3, r3, #6
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	4798      	blx	r3
    return;
 8009cce:	e0d8      	b.n	8009e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <HAL_SPI_IRQHandler+0x66>
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	09db      	lsrs	r3, r3, #7
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
    return;
 8009cf0:	e0c7      	b.n	8009e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10c      	bne.n	8009d18 <HAL_SPI_IRQHandler+0x8c>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	099b      	lsrs	r3, r3, #6
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <HAL_SPI_IRQHandler+0x8c>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80b5 	beq.w	8009e82 <HAL_SPI_IRQHandler+0x1f6>
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80ae 	beq.w	8009e82 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	099b      	lsrs	r3, r3, #6
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d023      	beq.n	8009d7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d011      	beq.n	8009d62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	e00b      	b.n	8009d7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d62:	2300      	movs	r3, #0
 8009d64:	613b      	str	r3, [r7, #16]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	693b      	ldr	r3, [r7, #16]
        return;
 8009d78:	e083      	b.n	8009e82 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	095b      	lsrs	r3, r3, #5
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d014      	beq.n	8009db0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8a:	f043 0201 	orr.w	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00c      	beq.n	8009dd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc0:	f043 0208 	orr.w	r2, r3, #8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60bb      	str	r3, [r7, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	60bb      	str	r3, [r7, #8]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d050      	beq.n	8009e80 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d104      	bne.n	8009e0a <HAL_SPI_IRQHandler+0x17e>
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d034      	beq.n	8009e74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0203 	bic.w	r2, r2, #3
 8009e18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d011      	beq.n	8009e46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e26:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <HAL_SPI_IRQHandler+0x1fc>)
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fb fb96 	bl	8005560 <HAL_DMA_Abort_IT>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d016      	beq.n	8009e7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e52:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <HAL_SPI_IRQHandler+0x1fc>)
 8009e54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fb fb80 	bl	8005560 <HAL_DMA_Abort_IT>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009e72:	e003      	b.n	8009e7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f813 	bl	8009ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e7a:	e000      	b.n	8009e7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009e7c:	bf00      	nop
    return;
 8009e7e:	bf00      	nop
 8009e80:	bf00      	nop
  }
}
 8009e82:	3720      	adds	r7, #32
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	08009eb5 	.word	0x08009eb5

08009e8c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff ffe5 	bl	8009ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d923      	bls.n	8009f3a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68da      	ldr	r2, [r3, #12]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	b292      	uxth	r2, r2
 8009efe:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	1c9a      	adds	r2, r3, #2
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b02      	subs	r3, #2
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d11f      	bne.n	8009f68 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	e016      	b.n	8009f68 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f103 020c 	add.w	r2, r3, #12
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	7812      	ldrb	r2, [r2, #0]
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10f      	bne.n	8009f94 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009f82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa73 	bl	800a47a <SPI_CloseRxTx_ISR>
    }
  }
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d912      	bls.n	8009fd4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	881a      	ldrh	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	1c9a      	adds	r2, r3, #2
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b02      	subs	r3, #2
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fd2:	e012      	b.n	8009ffa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	330c      	adds	r3, #12
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d110      	bne.n	800a026 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a012:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa2a 	bl	800a47a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	b292      	uxth	r2, r2
 800a042:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	1c9a      	adds	r2, r3, #2
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a066:	b29b      	uxth	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10f      	bne.n	800a08c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a07a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d102      	bne.n	800a08c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f9f7 	bl	800a47a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	881a      	ldrh	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ac:	1c9a      	adds	r2, r3, #2
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d110      	bne.n	800a0ec <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f9c7 	bl	800a47a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f103 020c 	add.w	r2, r3, #12
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	7812      	ldrb	r2, [r2, #0]
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a11e:	b29b      	uxth	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a130:	b29b      	uxth	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f9e1 	bl	800a4fe <SPI_CloseRx_ISR>
  }
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	b292      	uxth	r2, r2
 800a158:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	1c9a      	adds	r2, r3, #2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f9bb 	bl	800a4fe <SPI_CloseRx_ISR>
  }
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	4613      	mov	r3, r2
 800a19e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1a0:	e04c      	b.n	800a23c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a8:	d048      	beq.n	800a23c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a1aa:	f7fa ffbb 	bl	8005124 <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d902      	bls.n	800a1c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d13d      	bne.n	800a23c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1d8:	d111      	bne.n	800a1fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1e2:	d004      	beq.n	800a1ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ec:	d107      	bne.n	800a1fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a206:	d10f      	bne.n	800a228 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e00f      	b.n	800a25c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	4013      	ands	r3, r2
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	429a      	cmp	r2, r3
 800a24a:	bf0c      	ite	eq
 800a24c:	2301      	moveq	r3, #1
 800a24e:	2300      	movne	r3, #0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	461a      	mov	r2, r3
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	429a      	cmp	r2, r3
 800a258:	d1a3      	bne.n	800a1a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a272:	e057      	b.n	800a324 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a27a:	d106      	bne.n	800a28a <SPI_WaitFifoStateUntilTimeout+0x26>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	330c      	adds	r3, #12
 800a288:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a290:	d048      	beq.n	800a324 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a292:	f7fa ff47 	bl	8005124 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d902      	bls.n	800a2a8 <SPI_WaitFifoStateUntilTimeout+0x44>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d13d      	bne.n	800a324 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a2b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2c0:	d111      	bne.n	800a2e6 <SPI_WaitFifoStateUntilTimeout+0x82>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ca:	d004      	beq.n	800a2d6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d4:	d107      	bne.n	800a2e6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ee:	d10f      	bne.n	800a310 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a30e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e008      	b.n	800a336 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689a      	ldr	r2, [r3, #8]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4013      	ands	r3, r2
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d19f      	bne.n	800a274 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af02      	add	r7, sp, #8
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a352:	d111      	bne.n	800a378 <SPI_EndRxTransaction+0x3a>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a35c:	d004      	beq.n	800a368 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a366:	d107      	bne.n	800a378 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a376:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2200      	movs	r2, #0
 800a380:	2180      	movs	r1, #128	; 0x80
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7ff ff04 	bl	800a190 <SPI_WaitFlagStateUntilTimeout>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d007      	beq.n	800a39e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a392:	f043 0220 	orr.w	r2, r3, #32
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e023      	b.n	800a3e6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3a6:	d11d      	bne.n	800a3e4 <SPI_EndRxTransaction+0xa6>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b0:	d004      	beq.n	800a3bc <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ba:	d113      	bne.n	800a3e4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff ff4b 	bl	800a264 <SPI_WaitFifoStateUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d007      	beq.n	800a3e4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3d8:	f043 0220 	orr.w	r2, r3, #32
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e000      	b.n	800a3e6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b086      	sub	sp, #24
 800a3f2:	af02      	add	r7, sp, #8
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2200      	movs	r2, #0
 800a402:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff ff2c 	bl	800a264 <SPI_WaitFifoStateUntilTimeout>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a416:	f043 0220 	orr.w	r2, r3, #32
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e027      	b.n	800a472 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	2180      	movs	r1, #128	; 0x80
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff feaf 	bl	800a190 <SPI_WaitFlagStateUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43c:	f043 0220 	orr.w	r2, r3, #32
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e014      	b.n	800a472 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2200      	movs	r2, #0
 800a450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff ff05 	bl	800a264 <SPI_WaitFifoStateUntilTimeout>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e000      	b.n	800a472 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a482:	f7fa fe4f 	bl	8005124 <HAL_GetTick>
 800a486:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0220 	bic.w	r2, r2, #32
 800a496:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	2164      	movs	r1, #100	; 0x64
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ffa6 	bl	800a3ee <SPI_EndRxTxTransaction>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ac:	f043 0220 	orr.w	r2, r3, #32
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d115      	bne.n	800a4e8 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	d107      	bne.n	800a4d8 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fa fb39 	bl	8004b48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a4d6:	e00e      	b.n	800a4f6 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fcd3 	bl	8009e8c <HAL_SPI_TxRxCpltCallback>
}
 800a4e6:	e006      	b.n	800a4f6 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff fcd5 	bl	8009ea0 <HAL_SPI_ErrorCallback>
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a514:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a516:	f7fa fe05 	bl	8005124 <HAL_GetTick>
 800a51a:	4603      	mov	r3, r0
 800a51c:	461a      	mov	r2, r3
 800a51e:	2164      	movs	r1, #100	; 0x64
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff ff0c 	bl	800a33e <SPI_EndRxTransaction>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a530:	f043 0220 	orr.w	r2, r3, #32
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a544:	2b00      	cmp	r3, #0
 800a546:	d103      	bne.n	800a550 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fa fafd 	bl	8004b48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a54e:	e002      	b.n	800a556 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fca5 	bl	8009ea0 <HAL_SPI_ErrorCallback>
}
 800a556:	bf00      	nop
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e01d      	b.n	800a5ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d106      	bne.n	800a58a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f815 	bl	800a5b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f000 f985 	bl	800a8ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0201 	orr.w	r2, r2, #1
 800a5de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <HAL_TIM_Base_Start_IT+0x50>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b06      	cmp	r3, #6
 800a5f0:	d00b      	beq.n	800a60a <HAL_TIM_Base_Start_IT+0x42>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f8:	d007      	beq.n	800a60a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0201 	orr.w	r2, r2, #1
 800a608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	00010007 	.word	0x00010007

0800a61c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d122      	bne.n	800a678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d11b      	bne.n	800a678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f06f 0202 	mvn.w	r2, #2
 800a648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f905 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a664:	e005      	b.n	800a672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f8f7 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f908 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b04      	cmp	r3, #4
 800a684:	d122      	bne.n	800a6cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b04      	cmp	r3, #4
 800a692:	d11b      	bne.n	800a6cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f06f 0204 	mvn.w	r2, #4
 800a69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f8db 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a6b8:	e005      	b.n	800a6c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f8cd 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f8de 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0308 	and.w	r3, r3, #8
 800a6d6:	2b08      	cmp	r3, #8
 800a6d8:	d122      	bne.n	800a720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d11b      	bne.n	800a720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f06f 0208 	mvn.w	r2, #8
 800a6f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2204      	movs	r2, #4
 800a6f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f8b1 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a70c:	e005      	b.n	800a71a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f8a3 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f8b4 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	f003 0310 	and.w	r3, r3, #16
 800a72a:	2b10      	cmp	r3, #16
 800a72c:	d122      	bne.n	800a774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b10      	cmp	r3, #16
 800a73a:	d11b      	bne.n	800a774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f06f 0210 	mvn.w	r2, #16
 800a744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2208      	movs	r2, #8
 800a74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f887 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a760:	e005      	b.n	800a76e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f879 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f88a 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d10e      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d107      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f06f 0201 	mvn.w	r2, #1
 800a798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7f9 f9f2 	bl	8003b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	2b80      	cmp	r3, #128	; 0x80
 800a7ac:	d10e      	bne.n	800a7cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b8:	2b80      	cmp	r3, #128	; 0x80
 800a7ba:	d107      	bne.n	800a7cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f91a 	bl	800aa00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7da:	d10e      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e6:	2b80      	cmp	r3, #128	; 0x80
 800a7e8:	d107      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f90d 	bl	800aa14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d10e      	bne.n	800a826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a812:	2b40      	cmp	r3, #64	; 0x40
 800a814:	d107      	bne.n	800a826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f838 	bl	800a896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f003 0320 	and.w	r3, r3, #32
 800a830:	2b20      	cmp	r3, #32
 800a832:	d10e      	bne.n	800a852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f003 0320 	and.w	r3, r3, #32
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d107      	bne.n	800a852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f06f 0220 	mvn.w	r2, #32
 800a84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f8cd 	bl	800a9ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
	...

0800a8ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a40      	ldr	r2, [pc, #256]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d013      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d00f      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a3d      	ldr	r2, [pc, #244]	; (800a9c4 <TIM_Base_SetConfig+0x118>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d00b      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a3c      	ldr	r2, [pc, #240]	; (800a9c8 <TIM_Base_SetConfig+0x11c>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d007      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a3b      	ldr	r2, [pc, #236]	; (800a9cc <TIM_Base_SetConfig+0x120>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d003      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a3a      	ldr	r2, [pc, #232]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d108      	bne.n	800a8fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2f      	ldr	r2, [pc, #188]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d02b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90c:	d027      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a2c      	ldr	r2, [pc, #176]	; (800a9c4 <TIM_Base_SetConfig+0x118>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d023      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a2b      	ldr	r2, [pc, #172]	; (800a9c8 <TIM_Base_SetConfig+0x11c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d01f      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2a      	ldr	r2, [pc, #168]	; (800a9cc <TIM_Base_SetConfig+0x120>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d01b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a29      	ldr	r2, [pc, #164]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d017      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a28      	ldr	r2, [pc, #160]	; (800a9d4 <TIM_Base_SetConfig+0x128>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d013      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a27      	ldr	r2, [pc, #156]	; (800a9d8 <TIM_Base_SetConfig+0x12c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00f      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a26      	ldr	r2, [pc, #152]	; (800a9dc <TIM_Base_SetConfig+0x130>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a25      	ldr	r2, [pc, #148]	; (800a9e0 <TIM_Base_SetConfig+0x134>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <TIM_Base_SetConfig+0x138>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d003      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a23      	ldr	r2, [pc, #140]	; (800a9e8 <TIM_Base_SetConfig+0x13c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d108      	bne.n	800a970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d003      	beq.n	800a9a4 <TIM_Base_SetConfig+0xf8>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d103      	bne.n	800a9ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	615a      	str	r2, [r3, #20]
}
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40000400 	.word	0x40000400
 800a9c8:	40000800 	.word	0x40000800
 800a9cc:	40000c00 	.word	0x40000c00
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800
 800a9e0:	40001800 	.word	0x40001800
 800a9e4:	40001c00 	.word	0x40001c00
 800a9e8:	40002000 	.word	0x40002000

0800a9ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e040      	b.n	800aabc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f9 fab2 	bl	8003fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2224      	movs	r2, #36	; 0x24
 800aa54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fad0 	bl	800b00c <UART_SetConfig>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e022      	b.n	800aabc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fd6e 	bl	800b560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aaa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0201 	orr.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fdf5 	bl	800b6a4 <UART_CheckIdleState>
 800aaba:	4603      	mov	r3, r0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	; 0x28
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	4613      	mov	r3, r2
 800aad2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d17f      	bne.n	800abdc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <HAL_UART_Transmit+0x24>
 800aae2:	88fb      	ldrh	r3, [r7, #6]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e078      	b.n	800abde <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_UART_Transmit+0x36>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e071      	b.n	800abde <HAL_UART_Transmit+0x11a>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2221      	movs	r2, #33	; 0x21
 800ab0c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ab0e:	f7fa fb09 	bl	8005124 <HAL_GetTick>
 800ab12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	88fa      	ldrh	r2, [r7, #6]
 800ab18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	88fa      	ldrh	r2, [r7, #6]
 800ab20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab2c:	d108      	bne.n	800ab40 <HAL_UART_Transmit+0x7c>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d104      	bne.n	800ab40 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	61bb      	str	r3, [r7, #24]
 800ab3e:	e003      	b.n	800ab48 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ab50:	e02c      	b.n	800abac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	2180      	movs	r1, #128	; 0x80
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 fdd0 	bl	800b702 <UART_WaitOnFlagUntilTimeout>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e038      	b.n	800abde <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	3302      	adds	r3, #2
 800ab86:	61bb      	str	r3, [r7, #24]
 800ab88:	e007      	b.n	800ab9a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	3301      	adds	r3, #1
 800ab98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1cc      	bne.n	800ab52 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2200      	movs	r2, #0
 800abc0:	2140      	movs	r1, #64	; 0x40
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fd9d 	bl	800b702 <UART_WaitOnFlagUntilTimeout>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e005      	b.n	800abde <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2220      	movs	r2, #32
 800abd6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	e000      	b.n	800abde <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800abdc:	2302      	movs	r3, #2
  }
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3720      	adds	r7, #32
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b08a      	sub	sp, #40	; 0x28
 800abea:	af02      	add	r7, sp, #8
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	603b      	str	r3, [r7, #0]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	f040 80ba 	bne.w	800ad74 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <HAL_UART_Receive+0x26>
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e0b2      	b.n	800ad76 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_UART_Receive+0x38>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e0ab      	b.n	800ad76 <HAL_UART_Receive+0x190>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2222      	movs	r2, #34	; 0x22
 800ac30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ac32:	f7fa fa77 	bl	8005124 <HAL_GetTick>
 800ac36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	88fa      	ldrh	r2, [r7, #6]
 800ac3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	88fa      	ldrh	r2, [r7, #6]
 800ac44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac50:	d10e      	bne.n	800ac70 <HAL_UART_Receive+0x8a>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <HAL_UART_Receive+0x80>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac64:	e02d      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	22ff      	movs	r2, #255	; 0xff
 800ac6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac6e:	e028      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <HAL_UART_Receive+0xae>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <HAL_UART_Receive+0xa4>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	22ff      	movs	r2, #255	; 0xff
 800ac84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac88:	e01b      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	227f      	movs	r2, #127	; 0x7f
 800ac8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac92:	e016      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac9c:	d10d      	bne.n	800acba <HAL_UART_Receive+0xd4>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d104      	bne.n	800acb0 <HAL_UART_Receive+0xca>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	227f      	movs	r2, #127	; 0x7f
 800acaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800acae:	e008      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	223f      	movs	r2, #63	; 0x3f
 800acb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800acb8:	e003      	b.n	800acc2 <HAL_UART_Receive+0xdc>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acc8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd2:	d108      	bne.n	800ace6 <HAL_UART_Receive+0x100>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	61bb      	str	r3, [r7, #24]
 800ace4:	e003      	b.n	800acee <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800acf6:	e032      	b.n	800ad5e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2200      	movs	r2, #0
 800ad00:	2120      	movs	r1, #32
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 fcfd 	bl	800b702 <UART_WaitOnFlagUntilTimeout>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e031      	b.n	800ad76 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10c      	bne.n	800ad32 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	8a7b      	ldrh	r3, [r7, #18]
 800ad22:	4013      	ands	r3, r2
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	61bb      	str	r3, [r7, #24]
 800ad30:	e00c      	b.n	800ad4c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	8a7b      	ldrh	r3, [r7, #18]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	4013      	ands	r3, r2
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	3b01      	subs	r3, #1
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1c6      	bne.n	800acf8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	e000      	b.n	800ad76 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800ad74:	2302      	movs	r3, #2
  }
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	f640 030f 	movw	r3, #2063	; 0x80f
 800ada6:	4013      	ands	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d113      	bne.n	800add8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00e      	beq.n	800add8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 8100 	beq.w	800afce <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      }
      return;
 800add6:	e0fa      	b.n	800afce <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80d5 	beq.w	800af8a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80ca 	beq.w	800af8a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <HAL_UART_IRQHandler+0x9e>
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d009      	beq.n	800ae1e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae16:	f043 0201 	orr.w	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00e      	beq.n	800ae46 <HAL_UART_IRQHandler+0xc6>
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2202      	movs	r2, #2
 800ae38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3e:	f043 0204 	orr.w	r2, r3, #4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00e      	beq.n	800ae6e <HAL_UART_IRQHandler+0xee>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2204      	movs	r2, #4
 800ae60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae66:	f043 0202 	orr.w	r2, r3, #2
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d013      	beq.n	800aea0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2208      	movs	r2, #8
 800ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae98:	f043 0208 	orr.w	r2, r3, #8
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00f      	beq.n	800aeca <HAL_UART_IRQHandler+0x14a>
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00a      	beq.n	800aeca <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aec2:	f043 0220 	orr.w	r2, r3, #32
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d07f      	beq.n	800afd2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f003 0320 	and.w	r3, r3, #32
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aefa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af06:	2b40      	cmp	r3, #64	; 0x40
 800af08:	d004      	beq.n	800af14 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af10:	2b00      	cmp	r3, #0
 800af12:	d031      	beq.n	800af78 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fc6f 	bl	800b7f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af24:	2b40      	cmp	r3, #64	; 0x40
 800af26:	d123      	bne.n	800af70 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af36:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d013      	beq.n	800af68 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af44:	4a26      	ldr	r2, [pc, #152]	; (800afe0 <HAL_UART_IRQHandler+0x260>)
 800af46:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fa fb07 	bl	8005560 <HAL_DMA_Abort_IT>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d016      	beq.n	800af86 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800af62:	4610      	mov	r0, r2
 800af64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af66:	e00e      	b.n	800af86 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f845 	bl	800aff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6e:	e00a      	b.n	800af86 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f841 	bl	800aff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af76:	e006      	b.n	800af86 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f83d 	bl	800aff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800af84:	e025      	b.n	800afd2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af86:	bf00      	nop
    return;
 800af88:	e023      	b.n	800afd2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00d      	beq.n	800afb0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d008      	beq.n	800afb0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d017      	beq.n	800afd6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	4798      	blx	r3
    }
    return;
 800afae:	e012      	b.n	800afd6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00e      	beq.n	800afd8 <HAL_UART_IRQHandler+0x258>
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d009      	beq.n	800afd8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc4d 	bl	800b864 <UART_EndTransmit_IT>
    return;
 800afca:	bf00      	nop
 800afcc:	e004      	b.n	800afd8 <HAL_UART_IRQHandler+0x258>
      return;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <HAL_UART_IRQHandler+0x258>
    return;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <HAL_UART_IRQHandler+0x258>
    return;
 800afd6:	bf00      	nop
  }

}
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	0800b839 	.word	0x0800b839

0800afe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	431a      	orrs	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	4bb1      	ldr	r3, [pc, #708]	; (800b300 <UART_SetConfig+0x2f4>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	6812      	ldr	r2, [r2, #0]
 800b042:	6939      	ldr	r1, [r7, #16]
 800b044:	430b      	orrs	r3, r1
 800b046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	430a      	orrs	r2, r1
 800b080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a9f      	ldr	r2, [pc, #636]	; (800b304 <UART_SetConfig+0x2f8>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d121      	bne.n	800b0d0 <UART_SetConfig+0xc4>
 800b08c:	4b9e      	ldr	r3, [pc, #632]	; (800b308 <UART_SetConfig+0x2fc>)
 800b08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	2b03      	cmp	r3, #3
 800b098:	d816      	bhi.n	800b0c8 <UART_SetConfig+0xbc>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <UART_SetConfig+0x94>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0b1 	.word	0x0800b0b1
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0b7 	.word	0x0800b0b7
 800b0ac:	0800b0c3 	.word	0x0800b0c3
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	77fb      	strb	r3, [r7, #31]
 800b0b4:	e151      	b.n	800b35a <UART_SetConfig+0x34e>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	77fb      	strb	r3, [r7, #31]
 800b0ba:	e14e      	b.n	800b35a <UART_SetConfig+0x34e>
 800b0bc:	2304      	movs	r3, #4
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e14b      	b.n	800b35a <UART_SetConfig+0x34e>
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e148      	b.n	800b35a <UART_SetConfig+0x34e>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	77fb      	strb	r3, [r7, #31]
 800b0cc:	bf00      	nop
 800b0ce:	e144      	b.n	800b35a <UART_SetConfig+0x34e>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a8d      	ldr	r2, [pc, #564]	; (800b30c <UART_SetConfig+0x300>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d134      	bne.n	800b144 <UART_SetConfig+0x138>
 800b0da:	4b8b      	ldr	r3, [pc, #556]	; (800b308 <UART_SetConfig+0x2fc>)
 800b0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e0:	f003 030c 	and.w	r3, r3, #12
 800b0e4:	2b0c      	cmp	r3, #12
 800b0e6:	d829      	bhi.n	800b13c <UART_SetConfig+0x130>
 800b0e8:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <UART_SetConfig+0xe4>)
 800b0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ee:	bf00      	nop
 800b0f0:	0800b125 	.word	0x0800b125
 800b0f4:	0800b13d 	.word	0x0800b13d
 800b0f8:	0800b13d 	.word	0x0800b13d
 800b0fc:	0800b13d 	.word	0x0800b13d
 800b100:	0800b131 	.word	0x0800b131
 800b104:	0800b13d 	.word	0x0800b13d
 800b108:	0800b13d 	.word	0x0800b13d
 800b10c:	0800b13d 	.word	0x0800b13d
 800b110:	0800b12b 	.word	0x0800b12b
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b13d 	.word	0x0800b13d
 800b11c:	0800b13d 	.word	0x0800b13d
 800b120:	0800b137 	.word	0x0800b137
 800b124:	2300      	movs	r3, #0
 800b126:	77fb      	strb	r3, [r7, #31]
 800b128:	e117      	b.n	800b35a <UART_SetConfig+0x34e>
 800b12a:	2302      	movs	r3, #2
 800b12c:	77fb      	strb	r3, [r7, #31]
 800b12e:	e114      	b.n	800b35a <UART_SetConfig+0x34e>
 800b130:	2304      	movs	r3, #4
 800b132:	77fb      	strb	r3, [r7, #31]
 800b134:	e111      	b.n	800b35a <UART_SetConfig+0x34e>
 800b136:	2308      	movs	r3, #8
 800b138:	77fb      	strb	r3, [r7, #31]
 800b13a:	e10e      	b.n	800b35a <UART_SetConfig+0x34e>
 800b13c:	2310      	movs	r3, #16
 800b13e:	77fb      	strb	r3, [r7, #31]
 800b140:	bf00      	nop
 800b142:	e10a      	b.n	800b35a <UART_SetConfig+0x34e>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a71      	ldr	r2, [pc, #452]	; (800b310 <UART_SetConfig+0x304>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d120      	bne.n	800b190 <UART_SetConfig+0x184>
 800b14e:	4b6e      	ldr	r3, [pc, #440]	; (800b308 <UART_SetConfig+0x2fc>)
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b158:	2b10      	cmp	r3, #16
 800b15a:	d00f      	beq.n	800b17c <UART_SetConfig+0x170>
 800b15c:	2b10      	cmp	r3, #16
 800b15e:	d802      	bhi.n	800b166 <UART_SetConfig+0x15a>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <UART_SetConfig+0x164>
 800b164:	e010      	b.n	800b188 <UART_SetConfig+0x17c>
 800b166:	2b20      	cmp	r3, #32
 800b168:	d005      	beq.n	800b176 <UART_SetConfig+0x16a>
 800b16a:	2b30      	cmp	r3, #48	; 0x30
 800b16c:	d009      	beq.n	800b182 <UART_SetConfig+0x176>
 800b16e:	e00b      	b.n	800b188 <UART_SetConfig+0x17c>
 800b170:	2300      	movs	r3, #0
 800b172:	77fb      	strb	r3, [r7, #31]
 800b174:	e0f1      	b.n	800b35a <UART_SetConfig+0x34e>
 800b176:	2302      	movs	r3, #2
 800b178:	77fb      	strb	r3, [r7, #31]
 800b17a:	e0ee      	b.n	800b35a <UART_SetConfig+0x34e>
 800b17c:	2304      	movs	r3, #4
 800b17e:	77fb      	strb	r3, [r7, #31]
 800b180:	e0eb      	b.n	800b35a <UART_SetConfig+0x34e>
 800b182:	2308      	movs	r3, #8
 800b184:	77fb      	strb	r3, [r7, #31]
 800b186:	e0e8      	b.n	800b35a <UART_SetConfig+0x34e>
 800b188:	2310      	movs	r3, #16
 800b18a:	77fb      	strb	r3, [r7, #31]
 800b18c:	bf00      	nop
 800b18e:	e0e4      	b.n	800b35a <UART_SetConfig+0x34e>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a5f      	ldr	r2, [pc, #380]	; (800b314 <UART_SetConfig+0x308>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d120      	bne.n	800b1dc <UART_SetConfig+0x1d0>
 800b19a:	4b5b      	ldr	r3, [pc, #364]	; (800b308 <UART_SetConfig+0x2fc>)
 800b19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b1a4:	2b40      	cmp	r3, #64	; 0x40
 800b1a6:	d00f      	beq.n	800b1c8 <UART_SetConfig+0x1bc>
 800b1a8:	2b40      	cmp	r3, #64	; 0x40
 800b1aa:	d802      	bhi.n	800b1b2 <UART_SetConfig+0x1a6>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <UART_SetConfig+0x1b0>
 800b1b0:	e010      	b.n	800b1d4 <UART_SetConfig+0x1c8>
 800b1b2:	2b80      	cmp	r3, #128	; 0x80
 800b1b4:	d005      	beq.n	800b1c2 <UART_SetConfig+0x1b6>
 800b1b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b1b8:	d009      	beq.n	800b1ce <UART_SetConfig+0x1c2>
 800b1ba:	e00b      	b.n	800b1d4 <UART_SetConfig+0x1c8>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	77fb      	strb	r3, [r7, #31]
 800b1c0:	e0cb      	b.n	800b35a <UART_SetConfig+0x34e>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	77fb      	strb	r3, [r7, #31]
 800b1c6:	e0c8      	b.n	800b35a <UART_SetConfig+0x34e>
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	77fb      	strb	r3, [r7, #31]
 800b1cc:	e0c5      	b.n	800b35a <UART_SetConfig+0x34e>
 800b1ce:	2308      	movs	r3, #8
 800b1d0:	77fb      	strb	r3, [r7, #31]
 800b1d2:	e0c2      	b.n	800b35a <UART_SetConfig+0x34e>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	77fb      	strb	r3, [r7, #31]
 800b1d8:	bf00      	nop
 800b1da:	e0be      	b.n	800b35a <UART_SetConfig+0x34e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a4d      	ldr	r2, [pc, #308]	; (800b318 <UART_SetConfig+0x30c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d124      	bne.n	800b230 <UART_SetConfig+0x224>
 800b1e6:	4b48      	ldr	r3, [pc, #288]	; (800b308 <UART_SetConfig+0x2fc>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f4:	d012      	beq.n	800b21c <UART_SetConfig+0x210>
 800b1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1fa:	d802      	bhi.n	800b202 <UART_SetConfig+0x1f6>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <UART_SetConfig+0x204>
 800b200:	e012      	b.n	800b228 <UART_SetConfig+0x21c>
 800b202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b206:	d006      	beq.n	800b216 <UART_SetConfig+0x20a>
 800b208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b20c:	d009      	beq.n	800b222 <UART_SetConfig+0x216>
 800b20e:	e00b      	b.n	800b228 <UART_SetConfig+0x21c>
 800b210:	2300      	movs	r3, #0
 800b212:	77fb      	strb	r3, [r7, #31]
 800b214:	e0a1      	b.n	800b35a <UART_SetConfig+0x34e>
 800b216:	2302      	movs	r3, #2
 800b218:	77fb      	strb	r3, [r7, #31]
 800b21a:	e09e      	b.n	800b35a <UART_SetConfig+0x34e>
 800b21c:	2304      	movs	r3, #4
 800b21e:	77fb      	strb	r3, [r7, #31]
 800b220:	e09b      	b.n	800b35a <UART_SetConfig+0x34e>
 800b222:	2308      	movs	r3, #8
 800b224:	77fb      	strb	r3, [r7, #31]
 800b226:	e098      	b.n	800b35a <UART_SetConfig+0x34e>
 800b228:	2310      	movs	r3, #16
 800b22a:	77fb      	strb	r3, [r7, #31]
 800b22c:	bf00      	nop
 800b22e:	e094      	b.n	800b35a <UART_SetConfig+0x34e>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a39      	ldr	r2, [pc, #228]	; (800b31c <UART_SetConfig+0x310>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d124      	bne.n	800b284 <UART_SetConfig+0x278>
 800b23a:	4b33      	ldr	r3, [pc, #204]	; (800b308 <UART_SetConfig+0x2fc>)
 800b23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b248:	d012      	beq.n	800b270 <UART_SetConfig+0x264>
 800b24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b24e:	d802      	bhi.n	800b256 <UART_SetConfig+0x24a>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d007      	beq.n	800b264 <UART_SetConfig+0x258>
 800b254:	e012      	b.n	800b27c <UART_SetConfig+0x270>
 800b256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b25a:	d006      	beq.n	800b26a <UART_SetConfig+0x25e>
 800b25c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b260:	d009      	beq.n	800b276 <UART_SetConfig+0x26a>
 800b262:	e00b      	b.n	800b27c <UART_SetConfig+0x270>
 800b264:	2301      	movs	r3, #1
 800b266:	77fb      	strb	r3, [r7, #31]
 800b268:	e077      	b.n	800b35a <UART_SetConfig+0x34e>
 800b26a:	2302      	movs	r3, #2
 800b26c:	77fb      	strb	r3, [r7, #31]
 800b26e:	e074      	b.n	800b35a <UART_SetConfig+0x34e>
 800b270:	2304      	movs	r3, #4
 800b272:	77fb      	strb	r3, [r7, #31]
 800b274:	e071      	b.n	800b35a <UART_SetConfig+0x34e>
 800b276:	2308      	movs	r3, #8
 800b278:	77fb      	strb	r3, [r7, #31]
 800b27a:	e06e      	b.n	800b35a <UART_SetConfig+0x34e>
 800b27c:	2310      	movs	r3, #16
 800b27e:	77fb      	strb	r3, [r7, #31]
 800b280:	bf00      	nop
 800b282:	e06a      	b.n	800b35a <UART_SetConfig+0x34e>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a25      	ldr	r2, [pc, #148]	; (800b320 <UART_SetConfig+0x314>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d124      	bne.n	800b2d8 <UART_SetConfig+0x2cc>
 800b28e:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <UART_SetConfig+0x2fc>)
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b294:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29c:	d012      	beq.n	800b2c4 <UART_SetConfig+0x2b8>
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a2:	d802      	bhi.n	800b2aa <UART_SetConfig+0x29e>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <UART_SetConfig+0x2ac>
 800b2a8:	e012      	b.n	800b2d0 <UART_SetConfig+0x2c4>
 800b2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2ae:	d006      	beq.n	800b2be <UART_SetConfig+0x2b2>
 800b2b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2b4:	d009      	beq.n	800b2ca <UART_SetConfig+0x2be>
 800b2b6:	e00b      	b.n	800b2d0 <UART_SetConfig+0x2c4>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	77fb      	strb	r3, [r7, #31]
 800b2bc:	e04d      	b.n	800b35a <UART_SetConfig+0x34e>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	77fb      	strb	r3, [r7, #31]
 800b2c2:	e04a      	b.n	800b35a <UART_SetConfig+0x34e>
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	77fb      	strb	r3, [r7, #31]
 800b2c8:	e047      	b.n	800b35a <UART_SetConfig+0x34e>
 800b2ca:	2308      	movs	r3, #8
 800b2cc:	77fb      	strb	r3, [r7, #31]
 800b2ce:	e044      	b.n	800b35a <UART_SetConfig+0x34e>
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	bf00      	nop
 800b2d6:	e040      	b.n	800b35a <UART_SetConfig+0x34e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a11      	ldr	r2, [pc, #68]	; (800b324 <UART_SetConfig+0x318>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d139      	bne.n	800b356 <UART_SetConfig+0x34a>
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <UART_SetConfig+0x2fc>)
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b2ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2f0:	d027      	beq.n	800b342 <UART_SetConfig+0x336>
 800b2f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2f6:	d817      	bhi.n	800b328 <UART_SetConfig+0x31c>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01c      	beq.n	800b336 <UART_SetConfig+0x32a>
 800b2fc:	e027      	b.n	800b34e <UART_SetConfig+0x342>
 800b2fe:	bf00      	nop
 800b300:	efff69f3 	.word	0xefff69f3
 800b304:	40011000 	.word	0x40011000
 800b308:	40023800 	.word	0x40023800
 800b30c:	40004400 	.word	0x40004400
 800b310:	40004800 	.word	0x40004800
 800b314:	40004c00 	.word	0x40004c00
 800b318:	40005000 	.word	0x40005000
 800b31c:	40011400 	.word	0x40011400
 800b320:	40007800 	.word	0x40007800
 800b324:	40007c00 	.word	0x40007c00
 800b328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b32c:	d006      	beq.n	800b33c <UART_SetConfig+0x330>
 800b32e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b332:	d009      	beq.n	800b348 <UART_SetConfig+0x33c>
 800b334:	e00b      	b.n	800b34e <UART_SetConfig+0x342>
 800b336:	2300      	movs	r3, #0
 800b338:	77fb      	strb	r3, [r7, #31]
 800b33a:	e00e      	b.n	800b35a <UART_SetConfig+0x34e>
 800b33c:	2302      	movs	r3, #2
 800b33e:	77fb      	strb	r3, [r7, #31]
 800b340:	e00b      	b.n	800b35a <UART_SetConfig+0x34e>
 800b342:	2304      	movs	r3, #4
 800b344:	77fb      	strb	r3, [r7, #31]
 800b346:	e008      	b.n	800b35a <UART_SetConfig+0x34e>
 800b348:	2308      	movs	r3, #8
 800b34a:	77fb      	strb	r3, [r7, #31]
 800b34c:	e005      	b.n	800b35a <UART_SetConfig+0x34e>
 800b34e:	2310      	movs	r3, #16
 800b350:	77fb      	strb	r3, [r7, #31]
 800b352:	bf00      	nop
 800b354:	e001      	b.n	800b35a <UART_SetConfig+0x34e>
 800b356:	2310      	movs	r3, #16
 800b358:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b362:	d17f      	bne.n	800b464 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b364:	7ffb      	ldrb	r3, [r7, #31]
 800b366:	2b08      	cmp	r3, #8
 800b368:	d85c      	bhi.n	800b424 <UART_SetConfig+0x418>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0x364>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b3b5 	.word	0x0800b3b5
 800b378:	0800b3d5 	.word	0x0800b3d5
 800b37c:	0800b425 	.word	0x0800b425
 800b380:	0800b3ed 	.word	0x0800b3ed
 800b384:	0800b425 	.word	0x0800b425
 800b388:	0800b425 	.word	0x0800b425
 800b38c:	0800b425 	.word	0x0800b425
 800b390:	0800b40d 	.word	0x0800b40d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b394:	f7fc fb8a 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 800b398:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	005a      	lsls	r2, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	441a      	add	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	61bb      	str	r3, [r7, #24]
        break;
 800b3b2:	e03a      	b.n	800b42a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3b4:	f7fc fb8e 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800b3b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	005a      	lsls	r2, r3, #1
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	441a      	add	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	61bb      	str	r3, [r7, #24]
        break;
 800b3d2:	e02a      	b.n	800b42a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	085a      	lsrs	r2, r3, #1
 800b3da:	4b5f      	ldr	r3, [pc, #380]	; (800b558 <UART_SetConfig+0x54c>)
 800b3dc:	4413      	add	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6852      	ldr	r2, [r2, #4]
 800b3e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	61bb      	str	r3, [r7, #24]
        break;
 800b3ea:	e01e      	b.n	800b42a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ec:	f7fc fa7a 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 800b3f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	005a      	lsls	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	441a      	add	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	fbb2 f3f3 	udiv	r3, r2, r3
 800b406:	b29b      	uxth	r3, r3
 800b408:	61bb      	str	r3, [r7, #24]
        break;
 800b40a:	e00e      	b.n	800b42a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	085b      	lsrs	r3, r3, #1
 800b412:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41e:	b29b      	uxth	r3, r3
 800b420:	61bb      	str	r3, [r7, #24]
        break;
 800b422:	e002      	b.n	800b42a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
        break;
 800b428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	2b0f      	cmp	r3, #15
 800b42e:	d916      	bls.n	800b45e <UART_SetConfig+0x452>
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b436:	d212      	bcs.n	800b45e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	f023 030f 	bic.w	r3, r3, #15
 800b440:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	085b      	lsrs	r3, r3, #1
 800b446:	b29b      	uxth	r3, r3
 800b448:	f003 0307 	and.w	r3, r3, #7
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	897b      	ldrh	r3, [r7, #10]
 800b450:	4313      	orrs	r3, r2
 800b452:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	897a      	ldrh	r2, [r7, #10]
 800b45a:	60da      	str	r2, [r3, #12]
 800b45c:	e070      	b.n	800b540 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]
 800b462:	e06d      	b.n	800b540 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b464:	7ffb      	ldrb	r3, [r7, #31]
 800b466:	2b08      	cmp	r3, #8
 800b468:	d859      	bhi.n	800b51e <UART_SetConfig+0x512>
 800b46a:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <UART_SetConfig+0x464>)
 800b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b470:	0800b495 	.word	0x0800b495
 800b474:	0800b4b3 	.word	0x0800b4b3
 800b478:	0800b4d1 	.word	0x0800b4d1
 800b47c:	0800b51f 	.word	0x0800b51f
 800b480:	0800b4e9 	.word	0x0800b4e9
 800b484:	0800b51f 	.word	0x0800b51f
 800b488:	0800b51f 	.word	0x0800b51f
 800b48c:	0800b51f 	.word	0x0800b51f
 800b490:	0800b507 	.word	0x0800b507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b494:	f7fc fb0a 	bl	8007aac <HAL_RCC_GetPCLK1Freq>
 800b498:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	085a      	lsrs	r2, r3, #1
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	61bb      	str	r3, [r7, #24]
        break;
 800b4b0:	e038      	b.n	800b524 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4b2:	f7fc fb0f 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800b4b6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	085a      	lsrs	r2, r3, #1
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	441a      	add	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	61bb      	str	r3, [r7, #24]
        break;
 800b4ce:	e029      	b.n	800b524 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	085a      	lsrs	r2, r3, #1
 800b4d6:	4b21      	ldr	r3, [pc, #132]	; (800b55c <UART_SetConfig+0x550>)
 800b4d8:	4413      	add	r3, r2
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6852      	ldr	r2, [r2, #4]
 800b4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	61bb      	str	r3, [r7, #24]
        break;
 800b4e6:	e01d      	b.n	800b524 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4e8:	f7fc f9fc 	bl	80078e4 <HAL_RCC_GetSysClockFreq>
 800b4ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	085a      	lsrs	r2, r3, #1
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	441a      	add	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b500:	b29b      	uxth	r3, r3
 800b502:	61bb      	str	r3, [r7, #24]
        break;
 800b504:	e00e      	b.n	800b524 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	fbb2 f3f3 	udiv	r3, r2, r3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	61bb      	str	r3, [r7, #24]
        break;
 800b51c:	e002      	b.n	800b524 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]
        break;
 800b522:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b0f      	cmp	r3, #15
 800b528:	d908      	bls.n	800b53c <UART_SetConfig+0x530>
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b530:	d204      	bcs.n	800b53c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	60da      	str	r2, [r3, #12]
 800b53a:	e001      	b.n	800b540 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	01e84800 	.word	0x01e84800
 800b55c:	00f42400 	.word	0x00f42400

0800b560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00a      	beq.n	800b5ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00a      	beq.n	800b5f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	f003 0310 	and.w	r3, r3, #16
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	f003 0320 	and.w	r3, r3, #32
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01a      	beq.n	800b676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	430a      	orrs	r2, r1
 800b654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b65e:	d10a      	bne.n	800b676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	430a      	orrs	r2, r1
 800b674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	605a      	str	r2, [r3, #4]
  }
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b6b2:	f7f9 fd37 	bl	8005124 <HAL_GetTick>
 800b6b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0308 	and.w	r3, r3, #8
 800b6c2:	2b08      	cmp	r3, #8
 800b6c4:	d10e      	bne.n	800b6e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f814 	bl	800b702 <UART_WaitOnFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e00a      	b.n	800b6fa <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	60b9      	str	r1, [r7, #8]
 800b70c:	603b      	str	r3, [r7, #0]
 800b70e:	4613      	mov	r3, r2
 800b710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b712:	e05d      	b.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71a:	d059      	beq.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b71c:	f7f9 fd02 	bl	8005124 <HAL_GetTick>
 800b720:	4602      	mov	r2, r0
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d302      	bcc.n	800b732 <UART_WaitOnFlagUntilTimeout+0x30>
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d11b      	bne.n	800b76a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b740:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2220      	movs	r2, #32
 800b75c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e042      	b.n	800b7f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	d02b      	beq.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b786:	d123      	bne.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b790:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689a      	ldr	r2, [r3, #8]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f022 0201 	bic.w	r2, r2, #1
 800b7b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e00f      	b.n	800b7f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	69da      	ldr	r2, [r3, #28]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4013      	ands	r3, r2
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	bf0c      	ite	eq
 800b7e0:	2301      	moveq	r3, #1
 800b7e2:	2300      	movne	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d092      	beq.n	800b714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b80e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689a      	ldr	r2, [r3, #8]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2220      	movs	r2, #32
 800b824:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7ff fbce 	bl	800aff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b87a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2220      	movs	r2, #32
 800b880:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff fbab 	bl	800afe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
	...

0800b898 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b898:	b084      	sub	sp, #16
 800b89a:	b480      	push	{r7}
 800b89c:	b085      	sub	sp, #20
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	f107 001c 	add.w	r0, r7, #28
 800b8a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b8ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b8b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b8b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b8ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b8be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b8c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <SDMMC_Init+0x54>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	b004      	add	sp, #16
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	ffff8100 	.word	0xffff8100

0800b8f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2203      	movs	r2, #3
 800b938:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b93a:	2002      	movs	r0, #2
 800b93c:	f7f9 fbfe 	bl	800513c <HAL_Delay>
  
  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0303 	and.w	r3, r3, #3
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b986:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b98c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68da      	ldr	r2, [r3, #12]
 800b99e:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <SDMMC_SendCommand+0x50>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	fffff000 	.word	0xfffff000

0800b9bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	b2db      	uxtb	r3, r3
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3314      	adds	r3, #20
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
}  
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba28:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba46:	2300      	movs	r3, #0

}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba62:	2310      	movs	r3, #16
 800ba64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba66:	2340      	movs	r3, #64	; 0x40
 800ba68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba74:	f107 0308 	add.w	r3, r7, #8
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7ff ff74 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ba80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba84:	2110      	movs	r1, #16
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa42 	bl	800bf10 <SDMMC_GetCmdResp1>
 800ba8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba8e:	69fb      	ldr	r3, [r7, #28]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3720      	adds	r7, #32
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b088      	sub	sp, #32
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800baa6:	2311      	movs	r3, #17
 800baa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baaa:	2340      	movs	r3, #64	; 0x40
 800baac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bab8:	f107 0308 	add.w	r3, r7, #8
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff ff52 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac8:	2111      	movs	r1, #17
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fa20 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad2:	69fb      	ldr	r3, [r7, #28]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800baea:	2312      	movs	r3, #18
 800baec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baee:	2340      	movs	r3, #64	; 0x40
 800baf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baf2:	2300      	movs	r3, #0
 800baf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bafa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7ff ff30 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb0c:	2112      	movs	r1, #18
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f9fe 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb16:	69fb      	ldr	r3, [r7, #28]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb2e:	2318      	movs	r3, #24
 800bb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb32:	2340      	movs	r3, #64	; 0x40
 800bb34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb36:	2300      	movs	r3, #0
 800bb38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb40:	f107 0308 	add.w	r3, r7, #8
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff ff0e 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb50:	2118      	movs	r1, #24
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f9dc 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bb58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3720      	adds	r7, #32
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb72:	2319      	movs	r3, #25
 800bb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb84:	f107 0308 	add.w	r3, r7, #8
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff feec 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb94:	2119      	movs	r1, #25
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f9ba 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bb9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb9e:	69fb      	ldr	r3, [r7, #28]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbb8:	2340      	movs	r3, #64	; 0x40
 800bbba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fecb 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bbd2:	4a05      	ldr	r2, [pc, #20]	; (800bbe8 <SDMMC_CmdStopTransfer+0x40>)
 800bbd4:	210c      	movs	r1, #12
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f99a 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bbdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbde:	69fb      	ldr	r3, [r7, #28]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3720      	adds	r7, #32
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	05f5e100 	.word	0x05f5e100

0800bbec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08a      	sub	sp, #40	; 0x28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bbfc:	2307      	movs	r3, #7
 800bbfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc04:	2300      	movs	r3, #0
 800bc06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc0c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc0e:	f107 0310 	add.w	r3, r7, #16
 800bc12:	4619      	mov	r1, r3
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7ff fea7 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc1e:	2107      	movs	r1, #7
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f000 f975 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bc26:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3728      	adds	r7, #40	; 0x28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b088      	sub	sp, #32
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bc42:	2300      	movs	r3, #0
 800bc44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc50:	f107 0308 	add.w	r3, r7, #8
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff fe86 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f92f 	bl	800bec0 <SDMMC_GetCmdError>
 800bc62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc64:	69fb      	ldr	r3, [r7, #28]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b088      	sub	sp, #32
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bc76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bc7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bc7c:	2308      	movs	r3, #8
 800bc7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc80:	2340      	movs	r3, #64	; 0x40
 800bc82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff fe67 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fb18 	bl	800c2d0 <SDMMC_GetCmdResp7>
 800bca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bca2:	69fb      	ldr	r3, [r7, #28]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3720      	adds	r7, #32
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bcba:	2337      	movs	r3, #55	; 0x37
 800bcbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcbe:	2340      	movs	r3, #64	; 0x40
 800bcc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bccc:	f107 0308 	add.w	r3, r7, #8
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff fe48 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bcd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcdc:	2137      	movs	r1, #55	; 0x37
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f916 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bce6:	69fb      	ldr	r3, [r7, #28]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3720      	adds	r7, #32
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	; (800bd34 <SDMMC_CmdAppOperCommand+0x44>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd02:	2329      	movs	r3, #41	; 0x29
 800bd04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd06:	2340      	movs	r3, #64	; 0x40
 800bd08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd14:	f107 0308 	add.w	r3, r7, #8
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff fe24 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fa27 	bl	800c174 <SDMMC_GetCmdResp3>
 800bd26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd28:	69fb      	ldr	r3, [r7, #28]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	80100000 	.word	0x80100000

0800bd38 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b088      	sub	sp, #32
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd46:	2306      	movs	r3, #6
 800bd48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd4a:	2340      	movs	r3, #64	; 0x40
 800bd4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd58:	f107 0308 	add.w	r3, r7, #8
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff fe02 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd68:	2106      	movs	r1, #6
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f8d0 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bd70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd72:	69fb      	ldr	r3, [r7, #28]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3720      	adds	r7, #32
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bd88:	2333      	movs	r3, #51	; 0x33
 800bd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd90:	2300      	movs	r3, #0
 800bd92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd9a:	f107 0308 	add.w	r3, r7, #8
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff fde1 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdaa:	2133      	movs	r1, #51	; 0x33
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f8af 	bl	800bf10 <SDMMC_GetCmdResp1>
 800bdb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3720      	adds	r7, #32
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b088      	sub	sp, #32
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bdce:	23c0      	movs	r3, #192	; 0xc0
 800bdd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bddc:	f107 0308 	add.w	r3, r7, #8
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fdc0 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f97d 	bl	800c0e8 <SDMMC_GetCmdResp2>
 800bdee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdf0:	69fb      	ldr	r3, [r7, #28]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3720      	adds	r7, #32
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b088      	sub	sp, #32
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be08:	2309      	movs	r3, #9
 800be0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be0c:	23c0      	movs	r3, #192	; 0xc0
 800be0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff fda1 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f95e 	bl	800c0e8 <SDMMC_GetCmdResp2>
 800be2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be2e:	69fb      	ldr	r3, [r7, #28]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3720      	adds	r7, #32
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800be46:	2303      	movs	r3, #3
 800be48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be4a:	2340      	movs	r3, #64	; 0x40
 800be4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fd82 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	2103      	movs	r1, #3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f9bd 	bl	800c1e8 <SDMMC_GetCmdResp6>
 800be6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be70:	69fb      	ldr	r3, [r7, #28]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b088      	sub	sp, #32
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800be88:	230d      	movs	r3, #13
 800be8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fd61 	bl	800b968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beaa:	210d      	movs	r1, #13
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f82f 	bl	800bf10 <SDMMC_GetCmdResp1>
 800beb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beb4:	69fb      	ldr	r3, [r7, #28]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bec0:	b490      	push	{r4, r7}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bec8:	4b0f      	ldr	r3, [pc, #60]	; (800bf08 <SDMMC_GetCmdError+0x48>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a0f      	ldr	r2, [pc, #60]	; (800bf0c <SDMMC_GetCmdError+0x4c>)
 800bece:	fba2 2303 	umull	r2, r3, r2, r3
 800bed2:	0a5b      	lsrs	r3, r3, #9
 800bed4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bedc:	4623      	mov	r3, r4
 800bede:	1e5c      	subs	r4, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bee8:	e009      	b.n	800befe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0f2      	beq.n	800bedc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	22c5      	movs	r2, #197	; 0xc5
 800befa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bc90      	pop	{r4, r7}
 800bf06:	4770      	bx	lr
 800bf08:	20000000 	.word	0x20000000
 800bf0c:	10624dd3 	.word	0x10624dd3

0800bf10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf1e:	4b6f      	ldr	r3, [pc, #444]	; (800c0dc <SDMMC_GetCmdResp1+0x1cc>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a6f      	ldr	r2, [pc, #444]	; (800c0e0 <SDMMC_GetCmdResp1+0x1d0>)
 800bf24:	fba2 2303 	umull	r2, r3, r2, r3
 800bf28:	0a5b      	lsrs	r3, r3, #9
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf30:	4623      	mov	r3, r4
 800bf32:	1e5c      	subs	r4, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf3c:	e0c9      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf42:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0f0      	beq.n	800bf30 <SDMMC_GetCmdResp1+0x20>
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1eb      	bne.n	800bf30 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2204      	movs	r2, #4
 800bf68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf6a:	2304      	movs	r3, #4
 800bf6c:	e0b1      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e0a6      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	22c5      	movs	r2, #197	; 0xc5
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fd16 	bl	800b9bc <SDMMC_GetCommandResponse>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	7afb      	ldrb	r3, [r7, #11]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d001      	beq.n	800bf9e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e099      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f7ff fd18 	bl	800b9d6 <SDMMC_GetResponse>
 800bfa6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4b4e      	ldr	r3, [pc, #312]	; (800c0e4 <SDMMC_GetCmdResp1+0x1d4>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e08d      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da02      	bge.n	800bfc2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bfbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfc0:	e087      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bfcc:	2340      	movs	r3, #64	; 0x40
 800bfce:	e080      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bfda:	2380      	movs	r3, #128	; 0x80
 800bfdc:	e079      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bfe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfec:	e071      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bffc:	e069      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c00c:	e061      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d002      	beq.n	800c01e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c01c:	e059      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02c:	e051      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c03c:	e049      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c04c:	e041      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c05c:	e039      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c06c:	e031      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c078:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c07c:	e029      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c08c:	e021      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c098:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c09c:	e019      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c0a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c0ac:	e011      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c0b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c0bc:	e009      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f003 0308 	and.w	r3, r3, #8
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c0c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c0cc:	e001      	b.n	800c0d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd90      	pop	{r4, r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000000 	.word	0x20000000
 800c0e0:	10624dd3 	.word	0x10624dd3
 800c0e4:	fdffe008 	.word	0xfdffe008

0800c0e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c0e8:	b490      	push	{r4, r7}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0f0:	4b1e      	ldr	r3, [pc, #120]	; (800c16c <SDMMC_GetCmdResp2+0x84>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a1e      	ldr	r2, [pc, #120]	; (800c170 <SDMMC_GetCmdResp2+0x88>)
 800c0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fa:	0a5b      	lsrs	r3, r3, #9
 800c0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c100:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c104:	4623      	mov	r3, r4
 800c106:	1e5c      	subs	r4, r3, #1
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c10c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c110:	e026      	b.n	800c160 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c116:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0f0      	beq.n	800c104 <SDMMC_GetCmdResp2+0x1c>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1eb      	bne.n	800c104 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d004      	beq.n	800c142 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2204      	movs	r2, #4
 800c13c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c13e:	2304      	movs	r3, #4
 800c140:	e00e      	b.n	800c160 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d004      	beq.n	800c158 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c154:	2301      	movs	r3, #1
 800c156:	e003      	b.n	800c160 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	22c5      	movs	r2, #197	; 0xc5
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bc90      	pop	{r4, r7}
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20000000 	.word	0x20000000
 800c170:	10624dd3 	.word	0x10624dd3

0800c174 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c174:	b490      	push	{r4, r7}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c17c:	4b18      	ldr	r3, [pc, #96]	; (800c1e0 <SDMMC_GetCmdResp3+0x6c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a18      	ldr	r2, [pc, #96]	; (800c1e4 <SDMMC_GetCmdResp3+0x70>)
 800c182:	fba2 2303 	umull	r2, r3, r2, r3
 800c186:	0a5b      	lsrs	r3, r3, #9
 800c188:	f241 3288 	movw	r2, #5000	; 0x1388
 800c18c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c190:	4623      	mov	r3, r4
 800c192:	1e5c      	subs	r4, r3, #1
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c19c:	e01b      	b.n	800c1d6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d0f0      	beq.n	800c190 <SDMMC_GetCmdResp3+0x1c>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1eb      	bne.n	800c190 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1bc:	f003 0304 	and.w	r3, r3, #4
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2204      	movs	r2, #4
 800c1c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1ca:	2304      	movs	r3, #4
 800c1cc:	e003      	b.n	800c1d6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	22c5      	movs	r2, #197	; 0xc5
 800c1d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc90      	pop	{r4, r7}
 800c1de:	4770      	bx	lr
 800c1e0:	20000000 	.word	0x20000000
 800c1e4:	10624dd3 	.word	0x10624dd3

0800c1e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1f6:	4b34      	ldr	r3, [pc, #208]	; (800c2c8 <SDMMC_GetCmdResp6+0xe0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a34      	ldr	r2, [pc, #208]	; (800c2cc <SDMMC_GetCmdResp6+0xe4>)
 800c1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c200:	0a5b      	lsrs	r3, r3, #9
 800c202:	f241 3288 	movw	r2, #5000	; 0x1388
 800c206:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c20a:	4623      	mov	r3, r4
 800c20c:	1e5c      	subs	r4, r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d102      	bne.n	800c218 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c216:	e052      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c224:	2b00      	cmp	r3, #0
 800c226:	d0f0      	beq.n	800c20a <SDMMC_GetCmdResp6+0x22>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1eb      	bne.n	800c20a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c236:	f003 0304 	and.w	r3, r3, #4
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d004      	beq.n	800c248 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2204      	movs	r2, #4
 800c242:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c244:	2304      	movs	r3, #4
 800c246:	e03a      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2201      	movs	r2, #1
 800c258:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e02f      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff fbac 	bl	800b9bc <SDMMC_GetCommandResponse>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	7afb      	ldrb	r3, [r7, #11]
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d001      	beq.n	800c272 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c26e:	2301      	movs	r3, #1
 800c270:	e025      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	22c5      	movs	r2, #197	; 0xc5
 800c276:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c278:	2100      	movs	r1, #0
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fbab 	bl	800b9d6 <SDMMC_GetResponse>
 800c280:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d106      	bne.n	800c29a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	0c1b      	lsrs	r3, r3, #16
 800c290:	b29a      	uxth	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c296:	2300      	movs	r3, #0
 800c298:	e011      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2a8:	e009      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2b8:	e001      	b.n	800c2be <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd90      	pop	{r4, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20000000 	.word	0x20000000
 800c2cc:	10624dd3 	.word	0x10624dd3

0800c2d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c2d0:	b490      	push	{r4, r7}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2d8:	4b21      	ldr	r3, [pc, #132]	; (800c360 <SDMMC_GetCmdResp7+0x90>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a21      	ldr	r2, [pc, #132]	; (800c364 <SDMMC_GetCmdResp7+0x94>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	0a5b      	lsrs	r3, r3, #9
 800c2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c2ec:	4623      	mov	r3, r4
 800c2ee:	1e5c      	subs	r4, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2f8:	e02c      	b.n	800c354 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0f0      	beq.n	800c2ec <SDMMC_GetCmdResp7+0x1c>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1eb      	bne.n	800c2ec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c318:	f003 0304 	and.w	r3, r3, #4
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d004      	beq.n	800c32a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2204      	movs	r2, #4
 800c324:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c326:	2304      	movs	r3, #4
 800c328:	e014      	b.n	800c354 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e009      	b.n	800c354 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2240      	movs	r2, #64	; 0x40
 800c350:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c352:	2300      	movs	r3, #0
  
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bc90      	pop	{r4, r7}
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20000000 	.word	0x20000000
 800c364:	10624dd3 	.word	0x10624dd3

0800c368 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c368:	b084      	sub	sp, #16
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	f107 001c 	add.w	r0, r7, #28
 800c376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d120      	bne.n	800c3c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c384:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	68da      	ldr	r2, [r3, #12]
 800c390:	4b20      	ldr	r3, [pc, #128]	; (800c414 <USB_CoreInit+0xac>)
 800c392:	4013      	ands	r3, r2
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d105      	bne.n	800c3b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f001 fac4 	bl	800d944 <USB_CoreReset>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73fb      	strb	r3, [r7, #15]
 800c3c0:	e010      	b.n	800c3e4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f001 fab8 	bl	800d944 <USB_CoreReset>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d10b      	bne.n	800c402 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	f043 0206 	orr.w	r2, r3, #6
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f043 0220 	orr.w	r2, r3, #32
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c402:	7bfb      	ldrb	r3, [r7, #15]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c40e:	b004      	add	sp, #16
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	ffbdffbf 	.word	0xffbdffbf

0800c418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d165      	bne.n	800c4f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	4a41      	ldr	r2, [pc, #260]	; (800c534 <USB_SetTurnaroundTime+0x11c>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d906      	bls.n	800c442 <USB_SetTurnaroundTime+0x2a>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	4a40      	ldr	r2, [pc, #256]	; (800c538 <USB_SetTurnaroundTime+0x120>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d802      	bhi.n	800c442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c43c:	230f      	movs	r3, #15
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	e062      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	4a3c      	ldr	r2, [pc, #240]	; (800c538 <USB_SetTurnaroundTime+0x120>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d906      	bls.n	800c458 <USB_SetTurnaroundTime+0x40>
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	4a3b      	ldr	r2, [pc, #236]	; (800c53c <USB_SetTurnaroundTime+0x124>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d802      	bhi.n	800c458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c452:	230e      	movs	r3, #14
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e057      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	4a38      	ldr	r2, [pc, #224]	; (800c53c <USB_SetTurnaroundTime+0x124>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d906      	bls.n	800c46e <USB_SetTurnaroundTime+0x56>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4a37      	ldr	r2, [pc, #220]	; (800c540 <USB_SetTurnaroundTime+0x128>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d802      	bhi.n	800c46e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c468:	230d      	movs	r3, #13
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	e04c      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	4a33      	ldr	r2, [pc, #204]	; (800c540 <USB_SetTurnaroundTime+0x128>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d906      	bls.n	800c484 <USB_SetTurnaroundTime+0x6c>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	4a32      	ldr	r2, [pc, #200]	; (800c544 <USB_SetTurnaroundTime+0x12c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d802      	bhi.n	800c484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c47e:	230c      	movs	r3, #12
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e041      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	4a2f      	ldr	r2, [pc, #188]	; (800c544 <USB_SetTurnaroundTime+0x12c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d906      	bls.n	800c49a <USB_SetTurnaroundTime+0x82>
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4a2e      	ldr	r2, [pc, #184]	; (800c548 <USB_SetTurnaroundTime+0x130>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d802      	bhi.n	800c49a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c494:	230b      	movs	r3, #11
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e036      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4a2a      	ldr	r2, [pc, #168]	; (800c548 <USB_SetTurnaroundTime+0x130>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d906      	bls.n	800c4b0 <USB_SetTurnaroundTime+0x98>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	4a29      	ldr	r2, [pc, #164]	; (800c54c <USB_SetTurnaroundTime+0x134>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d802      	bhi.n	800c4b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c4aa:	230a      	movs	r3, #10
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e02b      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	4a26      	ldr	r2, [pc, #152]	; (800c54c <USB_SetTurnaroundTime+0x134>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d906      	bls.n	800c4c6 <USB_SetTurnaroundTime+0xae>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4a25      	ldr	r2, [pc, #148]	; (800c550 <USB_SetTurnaroundTime+0x138>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d802      	bhi.n	800c4c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c4c0:	2309      	movs	r3, #9
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e020      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4a21      	ldr	r2, [pc, #132]	; (800c550 <USB_SetTurnaroundTime+0x138>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d906      	bls.n	800c4dc <USB_SetTurnaroundTime+0xc4>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4a20      	ldr	r2, [pc, #128]	; (800c554 <USB_SetTurnaroundTime+0x13c>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d802      	bhi.n	800c4dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c4d6:	2308      	movs	r3, #8
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e015      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <USB_SetTurnaroundTime+0x13c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d906      	bls.n	800c4f2 <USB_SetTurnaroundTime+0xda>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a1c      	ldr	r2, [pc, #112]	; (800c558 <USB_SetTurnaroundTime+0x140>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d802      	bhi.n	800c4f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c4ec:	2307      	movs	r3, #7
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e00a      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c4f2:	2306      	movs	r3, #6
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e007      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c4fe:	2309      	movs	r3, #9
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e001      	b.n	800c508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c504:	2309      	movs	r3, #9
 800c506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68da      	ldr	r2, [r3, #12]
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	029b      	lsls	r3, r3, #10
 800c51c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c520:	431a      	orrs	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	371c      	adds	r7, #28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	00d8acbf 	.word	0x00d8acbf
 800c538:	00e4e1bf 	.word	0x00e4e1bf
 800c53c:	00f423ff 	.word	0x00f423ff
 800c540:	0106737f 	.word	0x0106737f
 800c544:	011a499f 	.word	0x011a499f
 800c548:	01312cff 	.word	0x01312cff
 800c54c:	014ca43f 	.word	0x014ca43f
 800c550:	016e35ff 	.word	0x016e35ff
 800c554:	01a6ab1f 	.word	0x01a6ab1f
 800c558:	01e847ff 	.word	0x01e847ff

0800c55c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f043 0201 	orr.w	r2, r3, #1
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f023 0201 	bic.w	r2, r3, #1
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d106      	bne.n	800c5cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60da      	str	r2, [r3, #12]
 800c5ca:	e00b      	b.n	800c5e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	60da      	str	r2, [r3, #12]
 800c5de:	e001      	b.n	800c5e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e003      	b.n	800c5ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c5e4:	2032      	movs	r0, #50	; 0x32
 800c5e6:	f7f8 fda9 	bl	800513c <HAL_Delay>

  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b086      	sub	sp, #24
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c60e:	2300      	movs	r3, #0
 800c610:	613b      	str	r3, [r7, #16]
 800c612:	e009      	b.n	800c628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	3340      	adds	r3, #64	; 0x40
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	2200      	movs	r2, #0
 800c620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	3301      	adds	r3, #1
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2b0e      	cmp	r3, #14
 800c62c:	d9f2      	bls.n	800c614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d11c      	bne.n	800c66e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c642:	f043 0302 	orr.w	r3, r3, #2
 800c646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	601a      	str	r2, [r3, #0]
 800c66c:	e005      	b.n	800c67a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c680:	461a      	mov	r2, r3
 800c682:	2300      	movs	r3, #0
 800c684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68c:	4619      	mov	r1, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c694:	461a      	mov	r2, r3
 800c696:	680b      	ldr	r3, [r1, #0]
 800c698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d10c      	bne.n	800c6ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f959 	bl	800c960 <USB_SetDevSpeed>
 800c6ae:	e018      	b.n	800c6e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f954 	bl	800c960 <USB_SetDevSpeed>
 800c6b8:	e013      	b.n	800c6e2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d10c      	bne.n	800c6da <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d104      	bne.n	800c6d0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f949 	bl	800c960 <USB_SetDevSpeed>
 800c6ce:	e008      	b.n	800c6e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f944 	bl	800c960 <USB_SetDevSpeed>
 800c6d8:	e003      	b.n	800c6e2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c6da:	2103      	movs	r1, #3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f93f 	bl	800c960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c6e2:	2110      	movs	r1, #16
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f8f3 	bl	800c8d0 <USB_FlushTxFifo>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f911 	bl	800c91c <USB_FlushRxFifo>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c70a:	461a      	mov	r2, r3
 800c70c:	2300      	movs	r3, #0
 800c70e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c716:	461a      	mov	r2, r3
 800c718:	2300      	movs	r3, #0
 800c71a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c722:	461a      	mov	r2, r3
 800c724:	2300      	movs	r3, #0
 800c726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c728:	2300      	movs	r3, #0
 800c72a:	613b      	str	r3, [r7, #16]
 800c72c:	e043      	b.n	800c7b6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	015a      	lsls	r2, r3, #5
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	4413      	add	r3, r2
 800c736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c744:	d118      	bne.n	800c778 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c758:	461a      	mov	r2, r3
 800c75a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	e013      	b.n	800c78a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c76e:	461a      	mov	r2, r3
 800c770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	e008      	b.n	800c78a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c784:	461a      	mov	r2, r3
 800c786:	2300      	movs	r3, #0
 800c788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c796:	461a      	mov	r2, r3
 800c798:	2300      	movs	r3, #0
 800c79a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	015a      	lsls	r2, r3, #5
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	613b      	str	r3, [r7, #16]
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d3b7      	bcc.n	800c72e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7be:	2300      	movs	r3, #0
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	e043      	b.n	800c84c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7da:	d118      	bne.n	800c80e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	e013      	b.n	800c820 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c804:	461a      	mov	r2, r3
 800c806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	e008      	b.n	800c820 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	015a      	lsls	r2, r3, #5
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	4413      	add	r3, r2
 800c816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81a:	461a      	mov	r2, r3
 800c81c:	2300      	movs	r3, #0
 800c81e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82c:	461a      	mov	r2, r3
 800c82e:	2300      	movs	r3, #0
 800c830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83e:	461a      	mov	r2, r3
 800c840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	3301      	adds	r3, #1
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	429a      	cmp	r2, r3
 800c852:	d3b7      	bcc.n	800c7c4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d105      	bne.n	800c888 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	f043 0210 	orr.w	r2, r3, #16
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	699a      	ldr	r2, [r3, #24]
 800c88c:	4b0e      	ldr	r3, [pc, #56]	; (800c8c8 <USB_DevInit+0x2d4>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d005      	beq.n	800c8a6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	f043 0208 	orr.w	r2, r3, #8
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d105      	bne.n	800c8b8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	699a      	ldr	r2, [r3, #24]
 800c8b0:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <USB_DevInit+0x2d8>)
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8c4:	b004      	add	sp, #16
 800c8c6:	4770      	bx	lr
 800c8c8:	803c3800 	.word	0x803c3800
 800c8cc:	40000004 	.word	0x40000004

0800c8d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	019b      	lsls	r3, r3, #6
 800c8e2:	f043 0220 	orr.w	r2, r3, #32
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4a09      	ldr	r2, [pc, #36]	; (800c918 <USB_FlushTxFifo+0x48>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d901      	bls.n	800c8fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e006      	b.n	800c90a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	f003 0320 	and.w	r3, r3, #32
 800c904:	2b20      	cmp	r3, #32
 800c906:	d0f0      	beq.n	800c8ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	00030d40 	.word	0x00030d40

0800c91c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2210      	movs	r2, #16
 800c92c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3301      	adds	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4a09      	ldr	r2, [pc, #36]	; (800c95c <USB_FlushRxFifo+0x40>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d901      	bls.n	800c940 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e006      	b.n	800c94e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	f003 0310 	and.w	r3, r3, #16
 800c948:	2b10      	cmp	r3, #16
 800c94a:	d0f0      	beq.n	800c92e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	00030d40 	.word	0x00030d40

0800c960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	68f9      	ldr	r1, [r7, #12]
 800c97c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c980:	4313      	orrs	r3, r2
 800c982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c992:	b480      	push	{r7}
 800c994:	b087      	sub	sp, #28
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	f003 0306 	and.w	r3, r3, #6
 800c9aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d102      	bne.n	800c9b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]
 800c9b6:	e00a      	b.n	800c9ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d002      	beq.n	800c9c4 <USB_GetDevSpeed+0x32>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b06      	cmp	r3, #6
 800c9c2:	d102      	bne.n	800c9ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	75fb      	strb	r3, [r7, #23]
 800c9c8:	e001      	b.n	800c9ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c9ca:	230f      	movs	r3, #15
 800c9cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	785b      	ldrb	r3, [r3, #1]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d139      	bne.n	800ca6c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	f003 030f 	and.w	r3, r3, #15
 800ca08:	2101      	movs	r1, #1
 800ca0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	68f9      	ldr	r1, [r7, #12]
 800ca12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca16:	4313      	orrs	r3, r2
 800ca18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d153      	bne.n	800cad8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	78db      	ldrb	r3, [r3, #3]
 800ca4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	059b      	lsls	r3, r3, #22
 800ca52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca54:	431a      	orrs	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	0159      	lsls	r1, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca62:	4619      	mov	r1, r3
 800ca64:	4b20      	ldr	r3, [pc, #128]	; (800cae8 <USB_ActivateEndpoint+0x10c>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	600b      	str	r3, [r1, #0]
 800ca6a:	e035      	b.n	800cad8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca72:	69da      	ldr	r2, [r3, #28]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 030f 	and.w	r3, r3, #15
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ca82:	041b      	lsls	r3, r3, #16
 800ca84:	68f9      	ldr	r1, [r7, #12]
 800ca86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d119      	bne.n	800cad8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	78db      	ldrb	r3, [r3, #3]
 800cabe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cac0:	430b      	orrs	r3, r1
 800cac2:	431a      	orrs	r2, r3
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	0159      	lsls	r1, r3, #5
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	440b      	add	r3, r1
 800cacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad0:	4619      	mov	r1, r3
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <USB_ActivateEndpoint+0x10c>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	10008000 	.word	0x10008000

0800caec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	785b      	ldrb	r3, [r3, #1]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d161      	bne.n	800cbcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb1e:	d11f      	bne.n	800cb60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	015a      	lsls	r2, r3, #5
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4413      	add	r3, r2
 800cb28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	0151      	lsls	r1, r2, #5
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	440a      	add	r2, r1
 800cb36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	0151      	lsls	r1, r2, #5
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	440a      	add	r2, r1
 800cb56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	2101      	movs	r1, #1
 800cb72:	fa01 f303 	lsl.w	r3, r1, r3
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	43db      	mvns	r3, r3
 800cb7a:	68f9      	ldr	r1, [r7, #12]
 800cb7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb80:	4013      	ands	r3, r2
 800cb82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb8a:	69da      	ldr	r2, [r3, #28]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	f003 030f 	and.w	r3, r3, #15
 800cb94:	2101      	movs	r1, #1
 800cb96:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	43db      	mvns	r3, r3
 800cb9e:	68f9      	ldr	r1, [r7, #12]
 800cba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba4:	4013      	ands	r3, r2
 800cba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	0159      	lsls	r1, r3, #5
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	440b      	add	r3, r1
 800cbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4b35      	ldr	r3, [pc, #212]	; (800cc9c <USB_DeactivateEndpoint+0x1b0>)
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	600b      	str	r3, [r1, #0]
 800cbca:	e060      	b.n	800cc8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbe2:	d11f      	bne.n	800cc24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	015a      	lsls	r2, r3, #5
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	0151      	lsls	r1, r2, #5
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	440a      	add	r2, r1
 800cbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	0151      	lsls	r1, r2, #5
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	440a      	add	r2, r1
 800cc1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	f003 030f 	and.w	r3, r3, #15
 800cc34:	2101      	movs	r1, #1
 800cc36:	fa01 f303 	lsl.w	r3, r1, r3
 800cc3a:	041b      	lsls	r3, r3, #16
 800cc3c:	43db      	mvns	r3, r3
 800cc3e:	68f9      	ldr	r1, [r7, #12]
 800cc40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc44:	4013      	ands	r3, r2
 800cc46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4e:	69da      	ldr	r2, [r3, #28]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f003 030f 	and.w	r3, r3, #15
 800cc58:	2101      	movs	r1, #1
 800cc5a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5e:	041b      	lsls	r3, r3, #16
 800cc60:	43db      	mvns	r3, r3
 800cc62:	68f9      	ldr	r1, [r7, #12]
 800cc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc68:	4013      	ands	r3, r2
 800cc6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	015a      	lsls	r2, r3, #5
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4413      	add	r3, r2
 800cc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	0159      	lsls	r1, r3, #5
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	440b      	add	r3, r1
 800cc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc86:	4619      	mov	r1, r3
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <USB_DeactivateEndpoint+0x1b4>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	ec337800 	.word	0xec337800
 800cca0:	eff37800 	.word	0xeff37800

0800cca4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	; 0x28
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	f040 8163 	bne.w	800cf8c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d132      	bne.n	800cd34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	015a      	lsls	r2, r3, #5
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccda:	691a      	ldr	r2, [r3, #16]
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	0159      	lsls	r1, r3, #5
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	440b      	add	r3, r1
 800cce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce8:	4619      	mov	r1, r3
 800ccea:	4ba5      	ldr	r3, [pc, #660]	; (800cf80 <USB_EPStartXfer+0x2dc>)
 800ccec:	4013      	ands	r3, r2
 800ccee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	0151      	lsls	r1, r2, #5
 800cd02:	69fa      	ldr	r2, [r7, #28]
 800cd04:	440a      	add	r2, r1
 800cd06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	015a      	lsls	r2, r3, #5
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	4413      	add	r3, r2
 800cd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1c:	691a      	ldr	r2, [r3, #16]
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	0159      	lsls	r1, r3, #5
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	440b      	add	r3, r1
 800cd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4b95      	ldr	r3, [pc, #596]	; (800cf84 <USB_EPStartXfer+0x2e0>)
 800cd2e:	4013      	ands	r3, r2
 800cd30:	610b      	str	r3, [r1, #16]
 800cd32:	e074      	b.n	800ce1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	015a      	lsls	r2, r3, #5
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd40:	691a      	ldr	r2, [r3, #16]
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	0159      	lsls	r1, r3, #5
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	440b      	add	r3, r1
 800cd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4b8c      	ldr	r3, [pc, #560]	; (800cf84 <USB_EPStartXfer+0x2e0>)
 800cd52:	4013      	ands	r3, r2
 800cd54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	015a      	lsls	r2, r3, #5
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	0159      	lsls	r1, r3, #5
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	440b      	add	r3, r1
 800cd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd70:	4619      	mov	r1, r3
 800cd72:	4b83      	ldr	r3, [pc, #524]	; (800cf80 <USB_EPStartXfer+0x2dc>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd84:	691a      	ldr	r2, [r3, #16]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6959      	ldr	r1, [r3, #20]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	440b      	add	r3, r1
 800cd90:	1e59      	subs	r1, r3, #1
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	fbb1 f3f3 	udiv	r3, r1, r3
 800cd9a:	04d9      	lsls	r1, r3, #19
 800cd9c:	4b7a      	ldr	r3, [pc, #488]	; (800cf88 <USB_EPStartXfer+0x2e4>)
 800cd9e:	400b      	ands	r3, r1
 800cda0:	69b9      	ldr	r1, [r7, #24]
 800cda2:	0148      	lsls	r0, r1, #5
 800cda4:	69f9      	ldr	r1, [r7, #28]
 800cda6:	4401      	add	r1, r0
 800cda8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdac:	4313      	orrs	r3, r2
 800cdae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	691a      	ldr	r2, [r3, #16]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdc6:	69b9      	ldr	r1, [r7, #24]
 800cdc8:	0148      	lsls	r0, r1, #5
 800cdca:	69f9      	ldr	r1, [r7, #28]
 800cdcc:	4401      	add	r1, r0
 800cdce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	78db      	ldrb	r3, [r3, #3]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d11f      	bne.n	800ce1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	015a      	lsls	r2, r3, #5
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	4413      	add	r3, r2
 800cde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	0151      	lsls	r1, r2, #5
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cdfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	0151      	lsls	r1, r2, #5
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	440a      	add	r2, r1
 800ce14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d14b      	bne.n	800cebc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d009      	beq.n	800ce40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	78db      	ldrb	r3, [r3, #3]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d128      	bne.n	800ce9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d110      	bne.n	800ce7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	015a      	lsls	r2, r3, #5
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	4413      	add	r3, r2
 800ce60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	69ba      	ldr	r2, [r7, #24]
 800ce68:	0151      	lsls	r1, r2, #5
 800ce6a:	69fa      	ldr	r2, [r7, #28]
 800ce6c:	440a      	add	r2, r1
 800ce6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	e00f      	b.n	800ce9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	015a      	lsls	r2, r3, #5
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	0151      	lsls	r1, r2, #5
 800ce8c:	69fa      	ldr	r2, [r7, #28]
 800ce8e:	440a      	add	r2, r1
 800ce90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	015a      	lsls	r2, r3, #5
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	4413      	add	r3, r2
 800cea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	0151      	lsls	r1, r2, #5
 800ceac:	69fa      	ldr	r2, [r7, #28]
 800ceae:	440a      	add	r2, r1
 800ceb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	e133      	b.n	800d124 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	69ba      	ldr	r2, [r7, #24]
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ced6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ceda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	78db      	ldrb	r3, [r3, #3]
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d015      	beq.n	800cf10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 811b 	beq.w	800d124 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	f003 030f 	and.w	r3, r3, #15
 800cefe:	2101      	movs	r1, #1
 800cf00:	fa01 f303 	lsl.w	r3, r1, r3
 800cf04:	69f9      	ldr	r1, [r7, #28]
 800cf06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	634b      	str	r3, [r1, #52]	; 0x34
 800cf0e:	e109      	b.n	800d124 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d110      	bne.n	800cf42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	0151      	lsls	r1, r2, #5
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	440a      	add	r2, r1
 800cf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	e00f      	b.n	800cf62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	0151      	lsls	r1, r2, #5
 800cf54:	69fa      	ldr	r2, [r7, #28]
 800cf56:	440a      	add	r2, r1
 800cf58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	68d9      	ldr	r1, [r3, #12]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	b298      	uxth	r0, r3
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	4603      	mov	r3, r0
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f000 fa38 	bl	800d3ec <USB_WritePacket>
 800cf7c:	e0d2      	b.n	800d124 <USB_EPStartXfer+0x480>
 800cf7e:	bf00      	nop
 800cf80:	e007ffff 	.word	0xe007ffff
 800cf84:	fff80000 	.word	0xfff80000
 800cf88:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf98:	691a      	ldr	r2, [r3, #16]
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	0159      	lsls	r1, r3, #5
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	440b      	add	r3, r1
 800cfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4b61      	ldr	r3, [pc, #388]	; (800d130 <USB_EPStartXfer+0x48c>)
 800cfaa:	4013      	ands	r3, r2
 800cfac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	015a      	lsls	r2, r3, #5
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfba:	691a      	ldr	r2, [r3, #16]
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	0159      	lsls	r1, r3, #5
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	440b      	add	r3, r1
 800cfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4b5a      	ldr	r3, [pc, #360]	; (800d134 <USB_EPStartXfer+0x490>)
 800cfcc:	4013      	ands	r3, r2
 800cfce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d123      	bne.n	800d020 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfee:	69b9      	ldr	r1, [r7, #24]
 800cff0:	0148      	lsls	r0, r1, #5
 800cff2:	69f9      	ldr	r1, [r7, #28]
 800cff4:	4401      	add	r1, r0
 800cff6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cffa:	4313      	orrs	r3, r2
 800cffc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	69ba      	ldr	r2, [r7, #24]
 800d00e:	0151      	lsls	r1, r2, #5
 800d010:	69fa      	ldr	r2, [r7, #28]
 800d012:	440a      	add	r2, r1
 800d014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d01c:	6113      	str	r3, [r2, #16]
 800d01e:	e033      	b.n	800d088 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	695a      	ldr	r2, [r3, #20]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	4413      	add	r3, r2
 800d02a:	1e5a      	subs	r2, r3, #1
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	fbb2 f3f3 	udiv	r3, r2, r3
 800d034:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	015a      	lsls	r2, r3, #5
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	4413      	add	r3, r2
 800d03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d042:	691a      	ldr	r2, [r3, #16]
 800d044:	8afb      	ldrh	r3, [r7, #22]
 800d046:	04d9      	lsls	r1, r3, #19
 800d048:	4b3b      	ldr	r3, [pc, #236]	; (800d138 <USB_EPStartXfer+0x494>)
 800d04a:	400b      	ands	r3, r1
 800d04c:	69b9      	ldr	r1, [r7, #24]
 800d04e:	0148      	lsls	r0, r1, #5
 800d050:	69f9      	ldr	r1, [r7, #28]
 800d052:	4401      	add	r1, r0
 800d054:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d058:	4313      	orrs	r3, r2
 800d05a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	015a      	lsls	r2, r3, #5
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	4413      	add	r3, r2
 800d064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d068:	691a      	ldr	r2, [r3, #16]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	8af9      	ldrh	r1, [r7, #22]
 800d070:	fb01 f303 	mul.w	r3, r1, r3
 800d074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d078:	69b9      	ldr	r1, [r7, #24]
 800d07a:	0148      	lsls	r0, r1, #5
 800d07c:	69f9      	ldr	r1, [r7, #28]
 800d07e:	4401      	add	r1, r0
 800d080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d084:	4313      	orrs	r3, r2
 800d086:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d10d      	bne.n	800d0aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d009      	beq.n	800d0aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	68d9      	ldr	r1, [r3, #12]
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a6:	460a      	mov	r2, r1
 800d0a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	78db      	ldrb	r3, [r3, #3]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d128      	bne.n	800d104 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d110      	bne.n	800d0e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	015a      	lsls	r2, r3, #5
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	69ba      	ldr	r2, [r7, #24]
 800d0d2:	0151      	lsls	r1, r2, #5
 800d0d4:	69fa      	ldr	r2, [r7, #28]
 800d0d6:	440a      	add	r2, r1
 800d0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	e00f      	b.n	800d104 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	0151      	lsls	r1, r2, #5
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	440a      	add	r2, r1
 800d0fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d102:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	015a      	lsls	r2, r3, #5
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	0151      	lsls	r1, r2, #5
 800d116:	69fa      	ldr	r2, [r7, #28]
 800d118:	440a      	add	r2, r1
 800d11a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d11e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	fff80000 	.word	0xfff80000
 800d134:	e007ffff 	.word	0xe007ffff
 800d138:	1ff80000 	.word	0x1ff80000

0800d13c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4613      	mov	r3, r2
 800d148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	f040 80cd 	bne.w	800d2f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d132      	bne.n	800d1cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d172:	691a      	ldr	r2, [r3, #16]
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	0159      	lsls	r1, r3, #5
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	440b      	add	r3, r1
 800d17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d180:	4619      	mov	r1, r3
 800d182:	4b98      	ldr	r3, [pc, #608]	; (800d3e4 <USB_EP0StartXfer+0x2a8>)
 800d184:	4013      	ands	r3, r2
 800d186:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	015a      	lsls	r2, r3, #5
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	4413      	add	r3, r2
 800d190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	0151      	lsls	r1, r2, #5
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	440a      	add	r2, r1
 800d19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b4:	691a      	ldr	r2, [r3, #16]
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	0159      	lsls	r1, r3, #5
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	440b      	add	r3, r1
 800d1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4b88      	ldr	r3, [pc, #544]	; (800d3e8 <USB_EP0StartXfer+0x2ac>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	610b      	str	r3, [r1, #16]
 800d1ca:	e04e      	b.n	800d26a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d8:	691a      	ldr	r2, [r3, #16]
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	0159      	lsls	r1, r3, #5
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	440b      	add	r3, r1
 800d1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4b7f      	ldr	r3, [pc, #508]	; (800d3e8 <USB_EP0StartXfer+0x2ac>)
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	015a      	lsls	r2, r3, #5
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1fa:	691a      	ldr	r2, [r3, #16]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	0159      	lsls	r1, r3, #5
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	440b      	add	r3, r1
 800d204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d208:	4619      	mov	r1, r3
 800d20a:	4b76      	ldr	r3, [pc, #472]	; (800d3e4 <USB_EP0StartXfer+0x2a8>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	695a      	ldr	r2, [r3, #20]
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d903      	bls.n	800d224 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	015a      	lsls	r2, r3, #5
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	4413      	add	r3, r2
 800d22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	0151      	lsls	r1, r2, #5
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	440a      	add	r2, r1
 800d23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d23e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	015a      	lsls	r2, r3, #5
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d250:	691a      	ldr	r2, [r3, #16]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d25a:	6939      	ldr	r1, [r7, #16]
 800d25c:	0148      	lsls	r0, r1, #5
 800d25e:	6979      	ldr	r1, [r7, #20]
 800d260:	4401      	add	r1, r0
 800d262:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d266:	4313      	orrs	r3, r2
 800d268:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d11e      	bne.n	800d2ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d009      	beq.n	800d28c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	015a      	lsls	r2, r3, #5
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	4413      	add	r3, r2
 800d280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d284:	461a      	mov	r2, r3
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	0151      	lsls	r1, r2, #5
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	440a      	add	r2, r1
 800d2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	e092      	b.n	800d3d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	015a      	lsls	r2, r3, #5
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	697a      	ldr	r2, [r7, #20]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d07e      	beq.n	800d3d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	f003 030f 	and.w	r3, r3, #15
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ec:	6979      	ldr	r1, [r7, #20]
 800d2ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	634b      	str	r3, [r1, #52]	; 0x34
 800d2f6:	e06d      	b.n	800d3d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d304:	691a      	ldr	r2, [r3, #16]
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	0159      	lsls	r1, r3, #5
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	440b      	add	r3, r1
 800d30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d312:	4619      	mov	r1, r3
 800d314:	4b34      	ldr	r3, [pc, #208]	; (800d3e8 <USB_EP0StartXfer+0x2ac>)
 800d316:	4013      	ands	r3, r2
 800d318:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	0159      	lsls	r1, r3, #5
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	440b      	add	r3, r1
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	4619      	mov	r1, r3
 800d336:	4b2b      	ldr	r3, [pc, #172]	; (800d3e4 <USB_EP0StartXfer+0x2a8>)
 800d338:	4013      	ands	r3, r2
 800d33a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d003      	beq.n	800d34c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	015a      	lsls	r2, r3, #5
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	4413      	add	r3, r2
 800d354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	0151      	lsls	r1, r2, #5
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	440a      	add	r2, r1
 800d362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d36a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d382:	6939      	ldr	r1, [r7, #16]
 800d384:	0148      	lsls	r0, r1, #5
 800d386:	6979      	ldr	r1, [r7, #20]
 800d388:	4401      	add	r1, r0
 800d38a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d38e:	4313      	orrs	r3, r2
 800d390:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d10d      	bne.n	800d3b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d009      	beq.n	800d3b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	68d9      	ldr	r1, [r3, #12]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b0:	460a      	mov	r2, r1
 800d3b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	0151      	lsls	r1, r2, #5
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	440a      	add	r2, r1
 800d3ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	e007ffff 	.word	0xe007ffff
 800d3e8:	fff80000 	.word	0xfff80000

0800d3ec <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b089      	sub	sp, #36	; 0x24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	71fb      	strb	r3, [r7, #7]
 800d3fe:	4613      	mov	r3, r2
 800d400:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d40a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d11a      	bne.n	800d448 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d412:	88bb      	ldrh	r3, [r7, #4]
 800d414:	3303      	adds	r3, #3
 800d416:	089b      	lsrs	r3, r3, #2
 800d418:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d41a:	2300      	movs	r3, #0
 800d41c:	61bb      	str	r3, [r7, #24]
 800d41e:	e00f      	b.n	800d440 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	031a      	lsls	r2, r3, #12
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	4413      	add	r3, r2
 800d428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d42c:	461a      	mov	r2, r3
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	3304      	adds	r3, #4
 800d438:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	3301      	adds	r3, #1
 800d43e:	61bb      	str	r3, [r7, #24]
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	429a      	cmp	r2, r3
 800d446:	d3eb      	bcc.n	800d420 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3724      	adds	r7, #36	; 0x24
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d456:	b480      	push	{r7}
 800d458:	b089      	sub	sp, #36	; 0x24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	4613      	mov	r3, r2
 800d462:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d46c:	88fb      	ldrh	r3, [r7, #6]
 800d46e:	3303      	adds	r3, #3
 800d470:	089b      	lsrs	r3, r3, #2
 800d472:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d474:	2300      	movs	r3, #0
 800d476:	61bb      	str	r3, [r7, #24]
 800d478:	e00b      	b.n	800d492 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	601a      	str	r2, [r3, #0]
    pDest++;
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	3304      	adds	r3, #4
 800d48a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	3301      	adds	r3, #1
 800d490:	61bb      	str	r3, [r7, #24]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	429a      	cmp	r2, r3
 800d498:	d3ef      	bcc.n	800d47a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d49a:	69fb      	ldr	r3, [r7, #28]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3724      	adds	r7, #36	; 0x24
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	785b      	ldrb	r3, [r3, #1]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d12c      	bne.n	800d51e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	db12      	blt.n	800d4fc <USB_EPSetStall+0x54>
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00f      	beq.n	800d4fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	0151      	lsls	r1, r2, #5
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	440a      	add	r2, r1
 800d4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	015a      	lsls	r2, r3, #5
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4413      	add	r3, r2
 800d504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	0151      	lsls	r1, r2, #5
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	440a      	add	r2, r1
 800d512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d51a:	6013      	str	r3, [r2, #0]
 800d51c:	e02b      	b.n	800d576 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	015a      	lsls	r2, r3, #5
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	4413      	add	r3, r2
 800d526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	db12      	blt.n	800d556 <USB_EPSetStall+0xae>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00f      	beq.n	800d556 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	0151      	lsls	r1, r2, #5
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	440a      	add	r2, r1
 800d54c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d554:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	015a      	lsls	r2, r3, #5
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	4413      	add	r3, r2
 800d55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	0151      	lsls	r1, r2, #5
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	440a      	add	r2, r1
 800d56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d574:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	785b      	ldrb	r3, [r3, #1]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d128      	bne.n	800d5f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	0151      	lsls	r1, r2, #5
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	440a      	add	r2, r1
 800d5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	78db      	ldrb	r3, [r3, #3]
 800d5c4:	2b03      	cmp	r3, #3
 800d5c6:	d003      	beq.n	800d5d0 <USB_EPClearStall+0x4c>
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	78db      	ldrb	r3, [r3, #3]
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d138      	bne.n	800d642 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	0151      	lsls	r1, r2, #5
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	440a      	add	r2, r1
 800d5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	e027      	b.n	800d642 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	0151      	lsls	r1, r2, #5
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	440a      	add	r2, r1
 800d608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d60c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d610:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	78db      	ldrb	r3, [r3, #3]
 800d616:	2b03      	cmp	r3, #3
 800d618:	d003      	beq.n	800d622 <USB_EPClearStall+0x9e>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	78db      	ldrb	r3, [r3, #3]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d10f      	bne.n	800d642 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	0151      	lsls	r1, r2, #5
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	440a      	add	r2, r1
 800d638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d640:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d66e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d672:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d684:	68f9      	ldr	r1, [r7, #12]
 800d686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d68a:	4313      	orrs	r3, r2
 800d68c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6b6:	f023 0302 	bic.w	r3, r3, #2
 800d6ba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d6bc:	2003      	movs	r0, #3
 800d6be:	f7f7 fd3d 	bl	800513c <HAL_Delay>

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6e6:	f043 0302 	orr.w	r3, r3, #2
 800d6ea:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d6ec:	2003      	movs	r0, #3
 800d6ee:	f7f7 fd25 	bl	800513c <HAL_Delay>

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	699b      	ldr	r3, [r3, #24]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	4013      	ands	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d714:	68fb      	ldr	r3, [r7, #12]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	4013      	ands	r3, r2
 800d744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	0c1b      	lsrs	r3, r3, #16
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d772:	69db      	ldr	r3, [r3, #28]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	4013      	ands	r3, r2
 800d778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	b29b      	uxth	r3, r3
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b085      	sub	sp, #20
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	460b      	mov	r3, r1
 800d794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d79a:	78fb      	ldrb	r3, [r7, #3]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d7ea:	78fb      	ldrb	r3, [r7, #3]
 800d7ec:	f003 030f 	and.w	r3, r3, #15
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7f6:	01db      	lsls	r3, r3, #7
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	015a      	lsls	r2, r3, #5
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	4413      	add	r3, r2
 800d808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	4013      	ands	r3, r2
 800d812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d814:	68bb      	ldr	r3, [r7, #8]
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d822:	b480      	push	{r7}
 800d824:	b083      	sub	sp, #12
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	f003 0301 	and.w	r3, r3, #1
}
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
	...

0800d840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85a:	4619      	mov	r1, r3
 800d85c:	4b09      	ldr	r3, [pc, #36]	; (800d884 <USB_ActivateSetup+0x44>)
 800d85e:	4013      	ands	r3, r2
 800d860:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3714      	adds	r7, #20
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	fffff800 	.word	0xfffff800

0800d888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	460b      	mov	r3, r1
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	333c      	adds	r3, #60	; 0x3c
 800d89e:	3304      	adds	r3, #4
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	4a26      	ldr	r2, [pc, #152]	; (800d940 <USB_EP0_OutStart+0xb8>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d90a      	bls.n	800d8c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8bc:	d101      	bne.n	800d8c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e037      	b.n	800d932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8f0:	f043 0318 	orr.w	r3, r3, #24
 800d8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d904:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d90a:	7afb      	ldrb	r3, [r7, #11]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d10f      	bne.n	800d930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d916:	461a      	mov	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d92a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d92e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	371c      	adds	r7, #28
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	4f54300a 	.word	0x4f54300a

0800d944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3301      	adds	r3, #1
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4a13      	ldr	r2, [pc, #76]	; (800d9a8 <USB_CoreReset+0x64>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d901      	bls.n	800d962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d95e:	2303      	movs	r3, #3
 800d960:	e01b      	b.n	800d99a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	daf2      	bge.n	800d950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	f043 0201 	orr.w	r2, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	3301      	adds	r3, #1
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	4a09      	ldr	r2, [pc, #36]	; (800d9a8 <USB_CoreReset+0x64>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d901      	bls.n	800d98c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e006      	b.n	800d99a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b01      	cmp	r3, #1
 800d996:	d0f0      	beq.n	800d97a <USB_CoreReset+0x36>

  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	00030d40 	.word	0x00030d40

0800d9ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d9b0:	4904      	ldr	r1, [pc, #16]	; (800d9c4 <MX_FATFS_Init+0x18>)
 800d9b2:	4805      	ldr	r0, [pc, #20]	; (800d9c8 <MX_FATFS_Init+0x1c>)
 800d9b4:	f004 fd5e 	bl	8012474 <FATFS_LinkDriver>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <MX_FATFS_Init+0x20>)
 800d9be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d9c0:	bf00      	nop
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20015240 	.word	0x20015240
 800d9c8:	08019ff4 	.word	0x08019ff4
 800d9cc:	2001523c 	.word	0x2001523c

0800d9d0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d9ea:	f000 f896 	bl	800db1a <BSP_SD_IsDetected>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d001      	beq.n	800d9f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e012      	b.n	800da1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d9f8:	480b      	ldr	r0, [pc, #44]	; (800da28 <BSP_SD_Init+0x48>)
 800d9fa:	f7fa fc67 	bl	80082cc <HAL_SD_Init>
 800d9fe:	4603      	mov	r3, r0
 800da00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800da02:	79fb      	ldrb	r3, [r7, #7]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d109      	bne.n	800da1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800da08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800da0c:	4806      	ldr	r0, [pc, #24]	; (800da28 <BSP_SD_Init+0x48>)
 800da0e:	f7fb fa1f 	bl	8008e50 <HAL_SD_ConfigWideBusOperation>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800da1c:	79fb      	ldrb	r3, [r7, #7]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20008998 	.word	0x20008998

0800da2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	68f9      	ldr	r1, [r7, #12]
 800da42:	4806      	ldr	r0, [pc, #24]	; (800da5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800da44:	f7fa fcda 	bl	80083fc <HAL_SD_ReadBlocks_DMA>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800da52:	7dfb      	ldrb	r3, [r7, #23]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20008998 	.word	0x20008998

0800da60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	68f9      	ldr	r1, [r7, #12]
 800da76:	4806      	ldr	r0, [pc, #24]	; (800da90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800da78:	f7fa fdac 	bl	80085d4 <HAL_SD_WriteBlocks_DMA>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800da86:	7dfb      	ldrb	r3, [r7, #23]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20008998 	.word	0x20008998

0800da94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800da98:	4805      	ldr	r0, [pc, #20]	; (800dab0 <BSP_SD_GetCardState+0x1c>)
 800da9a:	f7fb fa55 	bl	8008f48 <HAL_SD_GetCardState>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b04      	cmp	r3, #4
 800daa2:	bf14      	ite	ne
 800daa4:	2301      	movne	r3, #1
 800daa6:	2300      	moveq	r3, #0
 800daa8:	b2db      	uxtb	r3, r3
}
 800daaa:	4618      	mov	r0, r3
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20008998 	.word	0x20008998

0800dab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	4803      	ldr	r0, [pc, #12]	; (800dacc <BSP_SD_GetCardInfo+0x18>)
 800dac0:	f7fb f99a 	bl	8008df8 <HAL_SD_GetCardInfo>
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20008998 	.word	0x20008998

0800dad0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dad8:	f000 f818 	bl	800db0c <BSP_SD_AbortCallback>
}
 800dadc:	bf00      	nop
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800daec:	f000 f998 	bl	800de20 <BSP_SD_WriteCpltCallback>
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db00:	f000 f9a0 	bl	800de44 <BSP_SD_ReadCpltCallback>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0

}
 800db10:	bf00      	nop
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db20:	2301      	movs	r3, #1
 800db22:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800db24:	79fb      	ldrb	r3, [r7, #7]
 800db26:	b2db      	uxtb	r3, r3
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800db3c:	f004 fd84 	bl	8012648 <osKernelGetTickCount>
 800db40:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800db42:	e006      	b.n	800db52 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db44:	f7ff ffa6 	bl	800da94 <BSP_SD_GetCardState>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	e009      	b.n	800db66 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800db52:	f004 fd79 	bl	8012648 <osKernelGetTickCount>
 800db56:	4602      	mov	r2, r0
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d8f0      	bhi.n	800db44 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800db62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
	...

0800db70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800db7a:	4b0b      	ldr	r3, [pc, #44]	; (800dba8 <SD_CheckStatus+0x38>)
 800db7c:	2201      	movs	r2, #1
 800db7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db80:	f7ff ff88 	bl	800da94 <BSP_SD_GetCardState>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d107      	bne.n	800db9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <SD_CheckStatus+0x38>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	f023 0301 	bic.w	r3, r3, #1
 800db94:	b2da      	uxtb	r2, r3
 800db96:	4b04      	ldr	r3, [pc, #16]	; (800dba8 <SD_CheckStatus+0x38>)
 800db98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db9a:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <SD_CheckStatus+0x38>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b2db      	uxtb	r3, r3
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	2000000d 	.word	0x2000000d

0800dbac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800dbb6:	4b1c      	ldr	r3, [pc, #112]	; (800dc28 <SD_initialize+0x7c>)
 800dbb8:	2201      	movs	r2, #1
 800dbba:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800dbbc:	f004 fcec 	bl	8012598 <osKernelGetState>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d129      	bne.n	800dc1a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dbc6:	f7ff ff0b 	bl	800d9e0 <BSP_SD_Init>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d107      	bne.n	800dbe0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff ffcc 	bl	800db70 <SD_CheckStatus>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <SD_initialize+0x7c>)
 800dbde:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dbe0:	4b11      	ldr	r3, [pc, #68]	; (800dc28 <SD_initialize+0x7c>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d017      	beq.n	800dc1a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800dbea:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <SD_initialize+0x80>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d107      	bne.n	800dc02 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	2102      	movs	r1, #2
 800dbf6:	200a      	movs	r0, #10
 800dbf8:	f005 f976 	bl	8012ee8 <osMessageQueueNew>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <SD_initialize+0x80>)
 800dc00:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800dc02:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <SD_initialize+0x80>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d107      	bne.n	800dc1a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800dc0a:	4b07      	ldr	r3, [pc, #28]	; (800dc28 <SD_initialize+0x7c>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f043 0301 	orr.w	r3, r3, #1
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	4b04      	ldr	r3, [pc, #16]	; (800dc28 <SD_initialize+0x7c>)
 800dc18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dc1a:	4b03      	ldr	r3, [pc, #12]	; (800dc28 <SD_initialize+0x7c>)
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	b2db      	uxtb	r3, r3
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	2000000d 	.word	0x2000000d
 800dc2c:	200002f0 	.word	0x200002f0

0800dc30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff ff97 	bl	800db70 <SD_CheckStatus>
 800dc42:	4603      	mov	r3, r0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	607a      	str	r2, [r7, #4]
 800dc56:	603b      	str	r3, [r7, #0]
 800dc58:	4603      	mov	r3, r0
 800dc5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dc60:	f247 5030 	movw	r0, #30000	; 0x7530
 800dc64:	f7ff ff66 	bl	800db34 <SD_CheckStatusWithTimeout>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	da01      	bge.n	800dc72 <SD_read+0x26>
  {
    return res;
 800dc6e:	7ffb      	ldrb	r3, [r7, #31]
 800dc70:	e02f      	b.n	800dcd2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	68b8      	ldr	r0, [r7, #8]
 800dc78:	f7ff fed8 	bl	800da2c <BSP_SD_ReadBlocks_DMA>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800dc80:	7fbb      	ldrb	r3, [r7, #30]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d124      	bne.n	800dcd0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dc86:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <SD_read+0x90>)
 800dc88:	6818      	ldr	r0, [r3, #0]
 800dc8a:	f107 0112 	add.w	r1, r7, #18
 800dc8e:	f247 5330 	movw	r3, #30000	; 0x7530
 800dc92:	2200      	movs	r2, #0
 800dc94:	f005 fa22 	bl	80130dc <osMessageQueueGet>
 800dc98:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d117      	bne.n	800dcd0 <SD_read+0x84>
 800dca0:	8a7b      	ldrh	r3, [r7, #18]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d114      	bne.n	800dcd0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800dca6:	f004 fccf 	bl	8012648 <osKernelGetTickCount>
 800dcaa:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dcac:	e007      	b.n	800dcbe <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dcae:	f7ff fef1 	bl	800da94 <BSP_SD_GetCardState>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d102      	bne.n	800dcbe <SD_read+0x72>
              {
                res = RES_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dcbc:	e008      	b.n	800dcd0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dcbe:	f004 fcc3 	bl	8012648 <osKernelGetTickCount>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	f247 522f 	movw	r2, #29999	; 0x752f
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d9ee      	bls.n	800dcae <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800dcd0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	200002f0 	.word	0x200002f0

0800dce0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dcf4:	f247 5030 	movw	r0, #30000	; 0x7530
 800dcf8:	f7ff ff1c 	bl	800db34 <SD_CheckStatusWithTimeout>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	da01      	bge.n	800dd06 <SD_write+0x26>
  {
    return res;
 800dd02:	7ffb      	ldrb	r3, [r7, #31]
 800dd04:	e02d      	b.n	800dd62 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	68b8      	ldr	r0, [r7, #8]
 800dd0c:	f7ff fea8 	bl	800da60 <BSP_SD_WriteBlocks_DMA>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d124      	bne.n	800dd60 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dd16:	4b15      	ldr	r3, [pc, #84]	; (800dd6c <SD_write+0x8c>)
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f107 0112 	add.w	r1, r7, #18
 800dd1e:	f247 5330 	movw	r3, #30000	; 0x7530
 800dd22:	2200      	movs	r2, #0
 800dd24:	f005 f9da 	bl	80130dc <osMessageQueueGet>
 800dd28:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d117      	bne.n	800dd60 <SD_write+0x80>
 800dd30:	8a7b      	ldrh	r3, [r7, #18]
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d114      	bne.n	800dd60 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800dd36:	f004 fc87 	bl	8012648 <osKernelGetTickCount>
 800dd3a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800dd3c:	e007      	b.n	800dd4e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd3e:	f7ff fea9 	bl	800da94 <BSP_SD_GetCardState>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <SD_write+0x6e>
          {
            res = RES_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	77fb      	strb	r3, [r7, #31]
            break;
 800dd4c:	e008      	b.n	800dd60 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800dd4e:	f004 fc7b 	bl	8012648 <osKernelGetTickCount>
 800dd52:	4602      	mov	r2, r0
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d9ee      	bls.n	800dd3e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800dd60:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	200002f0 	.word	0x200002f0

0800dd70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08c      	sub	sp, #48	; 0x30
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	603a      	str	r2, [r7, #0]
 800dd7a:	71fb      	strb	r3, [r7, #7]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd86:	4b25      	ldr	r3, [pc, #148]	; (800de1c <SD_ioctl+0xac>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <SD_ioctl+0x28>
 800dd94:	2303      	movs	r3, #3
 800dd96:	e03c      	b.n	800de12 <SD_ioctl+0xa2>

  switch (cmd)
 800dd98:	79bb      	ldrb	r3, [r7, #6]
 800dd9a:	2b03      	cmp	r3, #3
 800dd9c:	d834      	bhi.n	800de08 <SD_ioctl+0x98>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <SD_ioctl+0x34>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddbd 	.word	0x0800ddbd
 800ddac:	0800ddd5 	.word	0x0800ddd5
 800ddb0:	0800ddef 	.word	0x0800ddef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddba:	e028      	b.n	800de0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddbc:	f107 030c 	add.w	r3, r7, #12
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff fe77 	bl	800dab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ddc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddd2:	e01c      	b.n	800de0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddd4:	f107 030c 	add.w	r3, r7, #12
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff fe6b 	bl	800dab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddec:	e00f      	b.n	800de0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddee:	f107 030c 	add.w	r3, r7, #12
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff fe5e 	bl	800dab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	0a5a      	lsrs	r2, r3, #9
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de06:	e002      	b.n	800de0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de08:	2304      	movs	r3, #4
 800de0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de12:	4618      	mov	r0, r3
 800de14:	3730      	adds	r7, #48	; 0x30
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2000000d 	.word	0x2000000d

0800de20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800de26:	2302      	movs	r3, #2
 800de28:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800de2a:	4b05      	ldr	r3, [pc, #20]	; (800de40 <BSP_SD_WriteCpltCallback+0x20>)
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	1db9      	adds	r1, r7, #6
 800de30:	2300      	movs	r3, #0
 800de32:	2200      	movs	r2, #0
 800de34:	f005 f8de 	bl	8012ff4 <osMessageQueuePut>
#endif
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	200002f0 	.word	0x200002f0

0800de44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800de4a:	2301      	movs	r3, #1
 800de4c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <BSP_SD_ReadCpltCallback+0x20>)
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	1db9      	adds	r1, r7, #6
 800de54:	2300      	movs	r3, #0
 800de56:	2200      	movs	r2, #0
 800de58:	f005 f8cc 	bl	8012ff4 <osMessageQueuePut>
#endif
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	200002f0 	.word	0x200002f0

0800de68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	460b      	mov	r3, r1
 800de72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de78:	f009 f904 	bl	8017084 <malloc>
 800de7c:	4603      	mov	r3, r0
 800de7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d105      	bne.n	800de92 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800de8e:	2302      	movs	r3, #2
 800de90:	e066      	b.n	800df60 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7c1b      	ldrb	r3, [r3, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d119      	bne.n	800ded6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dea6:	2202      	movs	r2, #2
 800dea8:	2181      	movs	r1, #129	; 0x81
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f008 ff1d 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800deb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deba:	2202      	movs	r2, #2
 800debc:	2101      	movs	r1, #1
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f008 ff13 	bl	8016cea <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2210      	movs	r2, #16
 800ded0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ded4:	e016      	b.n	800df04 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ded6:	2340      	movs	r3, #64	; 0x40
 800ded8:	2202      	movs	r2, #2
 800deda:	2181      	movs	r1, #129	; 0x81
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f008 ff04 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	2202      	movs	r2, #2
 800deec:	2101      	movs	r1, #1
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f008 fefb 	bl	8016cea <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2201      	movs	r2, #1
 800def8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2210      	movs	r2, #16
 800df00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df04:	2308      	movs	r3, #8
 800df06:	2203      	movs	r2, #3
 800df08:	2182      	movs	r1, #130	; 0x82
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f008 feed 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7c1b      	ldrb	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df44:	2101      	movs	r1, #1
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f008 ffbe 	bl	8016ec8 <USBD_LL_PrepareReceive>
 800df4c:	e007      	b.n	800df5e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df54:	2340      	movs	r3, #64	; 0x40
 800df56:	2101      	movs	r1, #1
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f008 ffb5 	bl	8016ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800df78:	2181      	movs	r1, #129	; 0x81
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f008 fedb 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800df86:	2101      	movs	r1, #1
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f008 fed4 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800df96:	2182      	movs	r1, #130	; 0x82
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f008 fecc 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00e      	beq.n	800dfd6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f009 f863 	bl	8017094 <free>
    pdev->pClassData = NULL;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dff0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dff2:	2300      	movs	r3, #0
 800dff4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e006:	2b00      	cmp	r3, #0
 800e008:	d03a      	beq.n	800e080 <USBD_CDC_Setup+0xa0>
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	f040 8097 	bne.w	800e13e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	88db      	ldrh	r3, [r3, #6]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d029      	beq.n	800e06c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	b25b      	sxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	da11      	bge.n	800e046 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e02e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	88d2      	ldrh	r2, [r2, #6]
 800e034:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e036:	6939      	ldr	r1, [r7, #16]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	88db      	ldrh	r3, [r3, #6]
 800e03c:	461a      	mov	r2, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f001 fa97 	bl	800f572 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e044:	e082      	b.n	800e14c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	785a      	ldrb	r2, [r3, #1]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	88db      	ldrh	r3, [r3, #6]
 800e054:	b2da      	uxtb	r2, r3
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e05c:	6939      	ldr	r1, [r7, #16]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	88db      	ldrh	r3, [r3, #6]
 800e062:	461a      	mov	r2, r3
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f001 fab0 	bl	800f5ca <USBD_CtlPrepareRx>
    break;
 800e06a:	e06f      	b.n	800e14c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	7850      	ldrb	r0, [r2, #1]
 800e078:	2200      	movs	r2, #0
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	4798      	blx	r3
    break;
 800e07e:	e065      	b.n	800e14c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	2b0b      	cmp	r3, #11
 800e086:	d84f      	bhi.n	800e128 <USBD_CDC_Setup+0x148>
 800e088:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <USBD_CDC_Setup+0xb0>)
 800e08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08e:	bf00      	nop
 800e090:	0800e0c1 	.word	0x0800e0c1
 800e094:	0800e137 	.word	0x0800e137
 800e098:	0800e129 	.word	0x0800e129
 800e09c:	0800e129 	.word	0x0800e129
 800e0a0:	0800e129 	.word	0x0800e129
 800e0a4:	0800e129 	.word	0x0800e129
 800e0a8:	0800e129 	.word	0x0800e129
 800e0ac:	0800e129 	.word	0x0800e129
 800e0b0:	0800e129 	.word	0x0800e129
 800e0b4:	0800e129 	.word	0x0800e129
 800e0b8:	0800e0e9 	.word	0x0800e0e9
 800e0bc:	0800e111 	.word	0x0800e111
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	d107      	bne.n	800e0da <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0ca:	f107 030c 	add.w	r3, r7, #12
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 fa4d 	bl	800f572 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e0d8:	e030      	b.n	800e13c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f001 f9d7 	bl	800f490 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e6:	e029      	b.n	800e13c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d107      	bne.n	800e102 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0f2:	f107 030f 	add.w	r3, r7, #15
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f001 fa39 	bl	800f572 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e100:	e01c      	b.n	800e13c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 f9c3 	bl	800f490 <USBD_CtlError>
        ret = USBD_FAIL;
 800e10a:	2303      	movs	r3, #3
 800e10c:	75fb      	strb	r3, [r7, #23]
      break;
 800e10e:	e015      	b.n	800e13c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e116:	2b03      	cmp	r3, #3
 800e118:	d00f      	beq.n	800e13a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 f9b7 	bl	800f490 <USBD_CtlError>
        ret = USBD_FAIL;
 800e122:	2303      	movs	r3, #3
 800e124:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e126:	e008      	b.n	800e13a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 f9b0 	bl	800f490 <USBD_CtlError>
      ret = USBD_FAIL;
 800e130:	2303      	movs	r3, #3
 800e132:	75fb      	strb	r3, [r7, #23]
      break;
 800e134:	e002      	b.n	800e13c <USBD_CDC_Setup+0x15c>
      break;
 800e136:	bf00      	nop
 800e138:	e008      	b.n	800e14c <USBD_CDC_Setup+0x16c>
      break;
 800e13a:	bf00      	nop
    }
    break;
 800e13c:	e006      	b.n	800e14c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e13e:	6839      	ldr	r1, [r7, #0]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f001 f9a5 	bl	800f490 <USBD_CtlError>
    ret = USBD_FAIL;
 800e146:	2303      	movs	r3, #3
 800e148:	75fb      	strb	r3, [r7, #23]
    break;
 800e14a:	bf00      	nop
  }

  return (uint8_t)ret;
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop

0800e158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	460b      	mov	r3, r1
 800e162:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e16a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e176:	2303      	movs	r3, #3
 800e178:	e049      	b.n	800e20e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e180:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e182:	78fa      	ldrb	r2, [r7, #3]
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	440b      	add	r3, r1
 800e190:	3318      	adds	r3, #24
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d029      	beq.n	800e1ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e198:	78fa      	ldrb	r2, [r7, #3]
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	440b      	add	r3, r1
 800e1a6:	3318      	adds	r3, #24
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	78f9      	ldrb	r1, [r7, #3]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	1a5b      	subs	r3, r3, r1
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4403      	add	r3, r0
 800e1b8:	3344      	adds	r3, #68	; 0x44
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e1c0:	fb03 f301 	mul.w	r3, r3, r1
 800e1c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d110      	bne.n	800e1ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	6879      	ldr	r1, [r7, #4]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	440b      	add	r3, r1
 800e1d8:	3318      	adds	r3, #24
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e1de:	78f9      	ldrb	r1, [r7, #3]
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f008 fe4e 	bl	8016e86 <USBD_LL_Transmit>
 800e1ea:	e00f      	b.n	800e20c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e208:	78fa      	ldrb	r2, [r7, #3]
 800e20a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e234:	2303      	movs	r3, #3
 800e236:	e015      	b.n	800e264 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e238:	78fb      	ldrb	r3, [r7, #3]
 800e23a:	4619      	mov	r1, r3
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f008 fe64 	bl	8016f0a <USBD_LL_GetRxDataSize>
 800e242:	4602      	mov	r2, r0
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e25e:	4611      	mov	r1, r2
 800e260:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e27a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d015      	beq.n	800e2b2 <USBD_CDC_EP0_RxReady+0x46>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e28c:	2bff      	cmp	r3, #255	; 0xff
 800e28e:	d010      	beq.n	800e2b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e29e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e2a6:	b292      	uxth	r2, r2
 800e2a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	22ff      	movs	r2, #255	; 0xff
 800e2ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2243      	movs	r2, #67	; 0x43
 800e2c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	; (800e2d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	20000098 	.word	0x20000098

0800e2dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2243      	movs	r2, #67	; 0x43
 800e2e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e2ea:	4b03      	ldr	r3, [pc, #12]	; (800e2f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20000054 	.word	0x20000054

0800e2fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2243      	movs	r2, #67	; 0x43
 800e308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e30a:	4b03      	ldr	r3, [pc, #12]	; (800e318 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	200000dc 	.word	0x200000dc

0800e31c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	220a      	movs	r2, #10
 800e328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e32a:	4b03      	ldr	r3, [pc, #12]	; (800e338 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	20000010 	.word	0x20000010

0800e33c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d101      	bne.n	800e350 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e34c:	2303      	movs	r3, #3
 800e34e:	e004      	b.n	800e35a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr

0800e366 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e366:	b480      	push	{r7}
 800e368:	b087      	sub	sp, #28
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	60f8      	str	r0, [r7, #12]
 800e36e:	60b9      	str	r1, [r7, #8]
 800e370:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e378:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	68ba      	ldr	r2, [r7, #8]
 800e37e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	371c      	adds	r7, #28
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	e016      	b.n	800e40c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7c1b      	ldrb	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f008 fd68 	bl	8016ec8 <USBD_LL_PrepareReceive>
 800e3f8:	e007      	b.n	800e40a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	2101      	movs	r1, #1
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f008 fd5f 	bl	8016ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	4613      	mov	r3, r2
 800e420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e428:	2303      	movs	r3, #3
 800e42a:	e025      	b.n	800e478 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	79fa      	ldrb	r2, [r7, #7]
 800e46a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f008 fbd5 	bl	8016c1c <USBD_LL_Init>
 800e472:	4603      	mov	r3, r0
 800e474:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e476:	7dfb      	ldrb	r3, [r7, #23]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e48a:	2300      	movs	r3, #0
 800e48c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e494:	2303      	movs	r3, #3
 800e496:	e010      	b.n	800e4ba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a8:	f107 020e 	add.w	r2, r7, #14
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	4798      	blx	r3
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f008 fbf2 	bl	8016cb4 <USBD_LL_Start>
 800e4d0:	4603      	mov	r3, r0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b083      	sub	sp, #12
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e4fc:	2303      	movs	r3, #3
 800e4fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	78fa      	ldrb	r2, [r7, #3]
 800e514:	4611      	mov	r1, r2
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	4798      	blx	r3
 800e51a:	4603      	mov	r3, r0
 800e51c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d007      	beq.n	800e54e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	78fa      	ldrb	r2, [r7, #3]
 800e548:	4611      	mov	r1, r2
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	4798      	blx	r3
  }

  return USBD_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 ff56 	bl	800f41c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e57e:	461a      	mov	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e58c:	f003 031f 	and.w	r3, r3, #31
 800e590:	2b01      	cmp	r3, #1
 800e592:	d00e      	beq.n	800e5b2 <USBD_LL_SetupStage+0x5a>
 800e594:	2b01      	cmp	r3, #1
 800e596:	d302      	bcc.n	800e59e <USBD_LL_SetupStage+0x46>
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d014      	beq.n	800e5c6 <USBD_LL_SetupStage+0x6e>
 800e59c:	e01d      	b.n	800e5da <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fa18 	bl	800e9dc <USBD_StdDevReq>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b0:	e020      	b.n	800e5f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fa7c 	bl	800eab8 <USBD_StdItfReq>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e5c4:	e016      	b.n	800e5f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fab8 	bl	800eb44 <USBD_StdEPReq>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5d8:	e00c      	b.n	800e5f4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f008 fbc3 	bl	8016d74 <USBD_LL_StallEP>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f2:	bf00      	nop
  }

  return ret;
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b086      	sub	sp, #24
 800e602:	af00      	add	r7, sp, #0
 800e604:	60f8      	str	r0, [r7, #12]
 800e606:	460b      	mov	r3, r1
 800e608:	607a      	str	r2, [r7, #4]
 800e60a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d137      	bne.n	800e682 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e618:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e620:	2b03      	cmp	r3, #3
 800e622:	d14a      	bne.n	800e6ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	689a      	ldr	r2, [r3, #8]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d913      	bls.n	800e658 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	689a      	ldr	r2, [r3, #8]
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	1ad2      	subs	r2, r2, r3
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	68da      	ldr	r2, [r3, #12]
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	4293      	cmp	r3, r2
 800e648:	bf28      	it	cs
 800e64a:	4613      	movcs	r3, r2
 800e64c:	461a      	mov	r2, r3
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 ffd7 	bl	800f604 <USBD_CtlContinueRx>
 800e656:	e030      	b.n	800e6ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00a      	beq.n	800e67a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d105      	bne.n	800e67a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f000 ffd3 	bl	800f626 <USBD_CtlSendStatus>
 800e680:	e01b      	b.n	800e6ba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d013      	beq.n	800e6b6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e694:	2b03      	cmp	r3, #3
 800e696:	d10e      	bne.n	800e6b6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	7afa      	ldrb	r2, [r7, #11]
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	4798      	blx	r3
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e6ac:	7dfb      	ldrb	r3, [r7, #23]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	e002      	b.n	800e6bc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e6b6:	2303      	movs	r3, #3
 800e6b8:	e000      	b.n	800e6bc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6d2:	7afb      	ldrb	r3, [r7, #11]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d16a      	bne.n	800e7ae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3314      	adds	r3, #20
 800e6dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d155      	bne.n	800e794 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	689a      	ldr	r2, [r3, #8]
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d914      	bls.n	800e71e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	689a      	ldr	r2, [r3, #8]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	1ad2      	subs	r2, r2, r3
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	461a      	mov	r2, r3
 800e708:	6879      	ldr	r1, [r7, #4]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f000 ff4c 	bl	800f5a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e710:	2300      	movs	r3, #0
 800e712:	2200      	movs	r2, #0
 800e714:	2100      	movs	r1, #0
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f008 fbd6 	bl	8016ec8 <USBD_LL_PrepareReceive>
 800e71c:	e03a      	b.n	800e794 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	429a      	cmp	r2, r3
 800e728:	d11c      	bne.n	800e764 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e732:	429a      	cmp	r2, r3
 800e734:	d316      	bcc.n	800e764 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e740:	429a      	cmp	r2, r3
 800e742:	d20f      	bcs.n	800e764 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e744:	2200      	movs	r2, #0
 800e746:	2100      	movs	r1, #0
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f000 ff2d 	bl	800f5a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e756:	2300      	movs	r3, #0
 800e758:	2200      	movs	r2, #0
 800e75a:	2100      	movs	r1, #0
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f008 fbb3 	bl	8016ec8 <USBD_LL_PrepareReceive>
 800e762:	e017      	b.n	800e794 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00a      	beq.n	800e786 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e776:	2b03      	cmp	r3, #3
 800e778:	d105      	bne.n	800e786 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e786:	2180      	movs	r1, #128	; 0x80
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f008 faf3 	bl	8016d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f000 ff5c 	bl	800f64c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d123      	bne.n	800e7e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff fe9b 	bl	800e4da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e7ac:	e01b      	b.n	800e7e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d013      	beq.n	800e7e2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d10e      	bne.n	800e7e2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	7afa      	ldrb	r2, [r7, #11]
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	4798      	blx	r3
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e7d8:	7dfb      	ldrb	r3, [r7, #23]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	e002      	b.n	800e7e8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e000      	b.n	800e7e8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d009      	beq.n	800e834 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	6852      	ldr	r2, [r2, #4]
 800e82c:	b2d2      	uxtb	r2, r2
 800e82e:	4611      	mov	r1, r2
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e834:	2340      	movs	r3, #64	; 0x40
 800e836:	2200      	movs	r2, #0
 800e838:	2100      	movs	r1, #0
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f008 fa55 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2240      	movs	r2, #64	; 0x40
 800e84c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e850:	2340      	movs	r3, #64	; 0x40
 800e852:	2200      	movs	r2, #0
 800e854:	2180      	movs	r1, #128	; 0x80
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f008 fa47 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2240      	movs	r2, #64	; 0x40
 800e866:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	460b      	mov	r3, r1
 800e87c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	78fa      	ldrb	r2, [r7, #3]
 800e882:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2204      	movs	r2, #4
 800e8aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ca:	2b04      	cmp	r3, #4
 800e8cc:	d105      	bne.n	800e8da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d10b      	bne.n	800e912 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	460b      	mov	r3, r1
 800e926:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	370c      	adds	r7, #12
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e936:	b480      	push	{r7}
 800e938:	b083      	sub	sp, #12
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	460b      	mov	r3, r1
 800e940:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d009      	beq.n	800e994 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	6852      	ldr	r2, [r2, #4]
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	4611      	mov	r1, r2
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	4798      	blx	r3
  }

  return USBD_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b087      	sub	sp, #28
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e9bc:	8a3b      	ldrh	r3, [r7, #16]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	b21a      	sxth	r2, r3
 800e9c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e9cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	371c      	adds	r7, #28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
	...

0800e9dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9f2:	2b20      	cmp	r3, #32
 800e9f4:	d004      	beq.n	800ea00 <USBD_StdDevReq+0x24>
 800e9f6:	2b40      	cmp	r3, #64	; 0x40
 800e9f8:	d002      	beq.n	800ea00 <USBD_StdDevReq+0x24>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00a      	beq.n	800ea14 <USBD_StdDevReq+0x38>
 800e9fe:	e050      	b.n	800eaa2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
 800ea0e:	4603      	mov	r3, r0
 800ea10:	73fb      	strb	r3, [r7, #15]
    break;
 800ea12:	e04b      	b.n	800eaac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2b09      	cmp	r3, #9
 800ea1a:	d83c      	bhi.n	800ea96 <USBD_StdDevReq+0xba>
 800ea1c:	a201      	add	r2, pc, #4	; (adr r2, 800ea24 <USBD_StdDevReq+0x48>)
 800ea1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea22:	bf00      	nop
 800ea24:	0800ea79 	.word	0x0800ea79
 800ea28:	0800ea8d 	.word	0x0800ea8d
 800ea2c:	0800ea97 	.word	0x0800ea97
 800ea30:	0800ea83 	.word	0x0800ea83
 800ea34:	0800ea97 	.word	0x0800ea97
 800ea38:	0800ea57 	.word	0x0800ea57
 800ea3c:	0800ea4d 	.word	0x0800ea4d
 800ea40:	0800ea97 	.word	0x0800ea97
 800ea44:	0800ea6f 	.word	0x0800ea6f
 800ea48:	0800ea61 	.word	0x0800ea61
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f9ce 	bl	800edf0 <USBD_GetDescriptor>
      break;
 800ea54:	e024      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fb5d 	bl	800f118 <USBD_SetAddress>
      break;
 800ea5e:	e01f      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ea60:	6839      	ldr	r1, [r7, #0]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fb9a 	bl	800f19c <USBD_SetConfig>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea6c:	e018      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fc37 	bl	800f2e4 <USBD_GetConfig>
      break;
 800ea76:	e013      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ea78:	6839      	ldr	r1, [r7, #0]
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 fc66 	bl	800f34c <USBD_GetStatus>
      break;
 800ea80:	e00e      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fc94 	bl	800f3b2 <USBD_SetFeature>
      break;
 800ea8a:	e009      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ea8c:	6839      	ldr	r1, [r7, #0]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 fca3 	bl	800f3da <USBD_ClrFeature>
      break;
 800ea94:	e004      	b.n	800eaa0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fcf9 	bl	800f490 <USBD_CtlError>
      break;
 800ea9e:	bf00      	nop
    }
    break;
 800eaa0:	e004      	b.n	800eaac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 fcf3 	bl	800f490 <USBD_CtlError>
    break;
 800eaaa:	bf00      	nop
  }

  return ret;
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop

0800eab8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eace:	2b20      	cmp	r3, #32
 800ead0:	d003      	beq.n	800eada <USBD_StdItfReq+0x22>
 800ead2:	2b40      	cmp	r3, #64	; 0x40
 800ead4:	d001      	beq.n	800eada <USBD_StdItfReq+0x22>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d12a      	bne.n	800eb30 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eae0:	3b01      	subs	r3, #1
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d81d      	bhi.n	800eb22 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	889b      	ldrh	r3, [r3, #4]
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d813      	bhi.n	800eb18 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	4798      	blx	r3
 800eafe:	4603      	mov	r3, r0
 800eb00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	88db      	ldrh	r3, [r3, #6]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d110      	bne.n	800eb2c <USBD_StdItfReq+0x74>
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10d      	bne.n	800eb2c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 fd88 	bl	800f626 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800eb16:	e009      	b.n	800eb2c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800eb18:	6839      	ldr	r1, [r7, #0]
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fcb8 	bl	800f490 <USBD_CtlError>
      break;
 800eb20:	e004      	b.n	800eb2c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fcb3 	bl	800f490 <USBD_CtlError>
      break;
 800eb2a:	e000      	b.n	800eb2e <USBD_StdItfReq+0x76>
      break;
 800eb2c:	bf00      	nop
    }
    break;
 800eb2e:	e004      	b.n	800eb3a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800eb30:	6839      	ldr	r1, [r7, #0]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fcac 	bl	800f490 <USBD_CtlError>
    break;
 800eb38:	bf00      	nop
  }

  return ret;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	889b      	ldrh	r3, [r3, #4]
 800eb56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb60:	2b20      	cmp	r3, #32
 800eb62:	d004      	beq.n	800eb6e <USBD_StdEPReq+0x2a>
 800eb64:	2b40      	cmp	r3, #64	; 0x40
 800eb66:	d002      	beq.n	800eb6e <USBD_StdEPReq+0x2a>
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00a      	beq.n	800eb82 <USBD_StdEPReq+0x3e>
 800eb6c:	e135      	b.n	800edda <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	4798      	blx	r3
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb80:	e130      	b.n	800ede4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	785b      	ldrb	r3, [r3, #1]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d03e      	beq.n	800ec08 <USBD_StdEPReq+0xc4>
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d002      	beq.n	800eb94 <USBD_StdEPReq+0x50>
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d077      	beq.n	800ec82 <USBD_StdEPReq+0x13e>
 800eb92:	e11c      	b.n	800edce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d002      	beq.n	800eba4 <USBD_StdEPReq+0x60>
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d015      	beq.n	800ebce <USBD_StdEPReq+0x8a>
 800eba2:	e02b      	b.n	800ebfc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eba4:	7bbb      	ldrb	r3, [r7, #14]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00c      	beq.n	800ebc4 <USBD_StdEPReq+0x80>
 800ebaa:	7bbb      	ldrb	r3, [r7, #14]
 800ebac:	2b80      	cmp	r3, #128	; 0x80
 800ebae:	d009      	beq.n	800ebc4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f008 f8dd 	bl	8016d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebba:	2180      	movs	r1, #128	; 0x80
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f008 f8d9 	bl	8016d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ebc2:	e020      	b.n	800ec06 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ebc4:	6839      	ldr	r1, [r7, #0]
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 fc62 	bl	800f490 <USBD_CtlError>
        break;
 800ebcc:	e01b      	b.n	800ec06 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	885b      	ldrh	r3, [r3, #2]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10e      	bne.n	800ebf4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebd6:	7bbb      	ldrb	r3, [r7, #14]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00b      	beq.n	800ebf4 <USBD_StdEPReq+0xb0>
 800ebdc:	7bbb      	ldrb	r3, [r7, #14]
 800ebde:	2b80      	cmp	r3, #128	; 0x80
 800ebe0:	d008      	beq.n	800ebf4 <USBD_StdEPReq+0xb0>
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	88db      	ldrh	r3, [r3, #6]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d104      	bne.n	800ebf4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f008 f8c0 	bl	8016d74 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fd16 	bl	800f626 <USBD_CtlSendStatus>

        break;
 800ebfa:	e004      	b.n	800ec06 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fc46 	bl	800f490 <USBD_CtlError>
        break;
 800ec04:	bf00      	nop
      }
      break;
 800ec06:	e0e7      	b.n	800edd8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d002      	beq.n	800ec18 <USBD_StdEPReq+0xd4>
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	d015      	beq.n	800ec42 <USBD_StdEPReq+0xfe>
 800ec16:	e02d      	b.n	800ec74 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00c      	beq.n	800ec38 <USBD_StdEPReq+0xf4>
 800ec1e:	7bbb      	ldrb	r3, [r7, #14]
 800ec20:	2b80      	cmp	r3, #128	; 0x80
 800ec22:	d009      	beq.n	800ec38 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec24:	7bbb      	ldrb	r3, [r7, #14]
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f008 f8a3 	bl	8016d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec2e:	2180      	movs	r1, #128	; 0x80
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f008 f89f 	bl	8016d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec36:	e023      	b.n	800ec80 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fc28 	bl	800f490 <USBD_CtlError>
        break;
 800ec40:	e01e      	b.n	800ec80 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	885b      	ldrh	r3, [r3, #2]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d119      	bne.n	800ec7e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
 800ec4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec54:	7bbb      	ldrb	r3, [r7, #14]
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f008 f8aa 	bl	8016db2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fce1 	bl	800f626 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	4798      	blx	r3
        }
        break;
 800ec72:	e004      	b.n	800ec7e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ec74:	6839      	ldr	r1, [r7, #0]
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fc0a 	bl	800f490 <USBD_CtlError>
        break;
 800ec7c:	e000      	b.n	800ec80 <USBD_StdEPReq+0x13c>
        break;
 800ec7e:	bf00      	nop
      }
      break;
 800ec80:	e0aa      	b.n	800edd8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d002      	beq.n	800ec92 <USBD_StdEPReq+0x14e>
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d032      	beq.n	800ecf6 <USBD_StdEPReq+0x1b2>
 800ec90:	e097      	b.n	800edc2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d007      	beq.n	800eca8 <USBD_StdEPReq+0x164>
 800ec98:	7bbb      	ldrb	r3, [r7, #14]
 800ec9a:	2b80      	cmp	r3, #128	; 0x80
 800ec9c:	d004      	beq.n	800eca8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 fbf5 	bl	800f490 <USBD_CtlError>
          break;
 800eca6:	e091      	b.n	800edcc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	da0b      	bge.n	800ecc8 <USBD_StdEPReq+0x184>
 800ecb0:	7bbb      	ldrb	r3, [r7, #14]
 800ecb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	4413      	add	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	3310      	adds	r3, #16
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	e00b      	b.n	800ece0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ecc8:	7bbb      	ldrb	r3, [r7, #14]
 800ecca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecce:	4613      	mov	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4413      	add	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	4413      	add	r3, r2
 800ecde:	3304      	adds	r3, #4
 800ece0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	2202      	movs	r2, #2
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fc3f 	bl	800f572 <USBD_CtlSendData>
        break;
 800ecf4:	e06a      	b.n	800edcc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ecf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da11      	bge.n	800ed22 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecfe:	7bbb      	ldrb	r3, [r7, #14]
 800ed00:	f003 020f 	and.w	r2, r3, #15
 800ed04:	6879      	ldr	r1, [r7, #4]
 800ed06:	4613      	mov	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	440b      	add	r3, r1
 800ed10:	3324      	adds	r3, #36	; 0x24
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d117      	bne.n	800ed48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fbb8 	bl	800f490 <USBD_CtlError>
            break;
 800ed20:	e054      	b.n	800edcc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed22:	7bbb      	ldrb	r3, [r7, #14]
 800ed24:	f003 020f 	and.w	r2, r3, #15
 800ed28:	6879      	ldr	r1, [r7, #4]
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	4413      	add	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	440b      	add	r3, r1
 800ed34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed38:	881b      	ldrh	r3, [r3, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d104      	bne.n	800ed48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fba5 	bl	800f490 <USBD_CtlError>
            break;
 800ed46:	e041      	b.n	800edcc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	da0b      	bge.n	800ed68 <USBD_StdEPReq+0x224>
 800ed50:	7bbb      	ldrb	r3, [r7, #14]
 800ed52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	3310      	adds	r3, #16
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	4413      	add	r3, r2
 800ed64:	3304      	adds	r3, #4
 800ed66:	e00b      	b.n	800ed80 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ed68:	7bbb      	ldrb	r3, [r7, #14]
 800ed6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed6e:	4613      	mov	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	3304      	adds	r3, #4
 800ed80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed82:	7bbb      	ldrb	r3, [r7, #14]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <USBD_StdEPReq+0x24a>
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	2b80      	cmp	r3, #128	; 0x80
 800ed8c:	d103      	bne.n	800ed96 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2200      	movs	r2, #0
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	e00e      	b.n	800edb4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed96:	7bbb      	ldrb	r3, [r7, #14]
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f008 f828 	bl	8016df0 <USBD_LL_IsStallEP>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d003      	beq.n	800edae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2201      	movs	r2, #1
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	e002      	b.n	800edb4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	2200      	movs	r2, #0
 800edb2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	2202      	movs	r2, #2
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 fbd9 	bl	800f572 <USBD_CtlSendData>
          break;
 800edc0:	e004      	b.n	800edcc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fb63 	bl	800f490 <USBD_CtlError>
        break;
 800edca:	bf00      	nop
      }
      break;
 800edcc:	e004      	b.n	800edd8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800edce:	6839      	ldr	r1, [r7, #0]
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 fb5d 	bl	800f490 <USBD_CtlError>
      break;
 800edd6:	bf00      	nop
    }
    break;
 800edd8:	e004      	b.n	800ede4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fb57 	bl	800f490 <USBD_CtlError>
    break;
 800ede2:	bf00      	nop
  }

  return ret;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
	...

0800edf0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edfa:	2300      	movs	r3, #0
 800edfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	885b      	ldrh	r3, [r3, #2]
 800ee0a:	0a1b      	lsrs	r3, r3, #8
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	2b0e      	cmp	r3, #14
 800ee12:	f200 8152 	bhi.w	800f0ba <USBD_GetDescriptor+0x2ca>
 800ee16:	a201      	add	r2, pc, #4	; (adr r2, 800ee1c <USBD_GetDescriptor+0x2c>)
 800ee18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1c:	0800ee8d 	.word	0x0800ee8d
 800ee20:	0800eea5 	.word	0x0800eea5
 800ee24:	0800eee5 	.word	0x0800eee5
 800ee28:	0800f0bb 	.word	0x0800f0bb
 800ee2c:	0800f0bb 	.word	0x0800f0bb
 800ee30:	0800f05b 	.word	0x0800f05b
 800ee34:	0800f087 	.word	0x0800f087
 800ee38:	0800f0bb 	.word	0x0800f0bb
 800ee3c:	0800f0bb 	.word	0x0800f0bb
 800ee40:	0800f0bb 	.word	0x0800f0bb
 800ee44:	0800f0bb 	.word	0x0800f0bb
 800ee48:	0800f0bb 	.word	0x0800f0bb
 800ee4c:	0800f0bb 	.word	0x0800f0bb
 800ee50:	0800f0bb 	.word	0x0800f0bb
 800ee54:	0800ee59 	.word	0x0800ee59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00b      	beq.n	800ee7c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	7c12      	ldrb	r2, [r2, #16]
 800ee70:	f107 0108 	add.w	r1, r7, #8
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ee7a:	e126      	b.n	800f0ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fb06 	bl	800f490 <USBD_CtlError>
      err++;
 800ee84:	7afb      	ldrb	r3, [r7, #11]
 800ee86:	3301      	adds	r3, #1
 800ee88:	72fb      	strb	r3, [r7, #11]
    break;
 800ee8a:	e11e      	b.n	800f0ca <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	7c12      	ldrb	r2, [r2, #16]
 800ee98:	f107 0108 	add.w	r1, r7, #8
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	4798      	blx	r3
 800eea0:	60f8      	str	r0, [r7, #12]
    break;
 800eea2:	e112      	b.n	800f0ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	7c1b      	ldrb	r3, [r3, #16]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10d      	bne.n	800eec8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb4:	f107 0208 	add.w	r2, r7, #8
 800eeb8:	4610      	mov	r0, r2
 800eeba:	4798      	blx	r3
 800eebc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3301      	adds	r3, #1
 800eec2:	2202      	movs	r2, #2
 800eec4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800eec6:	e100      	b.n	800f0ca <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed0:	f107 0208 	add.w	r2, r7, #8
 800eed4:	4610      	mov	r0, r2
 800eed6:	4798      	blx	r3
 800eed8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3301      	adds	r3, #1
 800eede:	2202      	movs	r2, #2
 800eee0:	701a      	strb	r2, [r3, #0]
    break;
 800eee2:	e0f2      	b.n	800f0ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	885b      	ldrh	r3, [r3, #2]
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b05      	cmp	r3, #5
 800eeec:	f200 80ac 	bhi.w	800f048 <USBD_GetDescriptor+0x258>
 800eef0:	a201      	add	r2, pc, #4	; (adr r2, 800eef8 <USBD_GetDescriptor+0x108>)
 800eef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef6:	bf00      	nop
 800eef8:	0800ef11 	.word	0x0800ef11
 800eefc:	0800ef45 	.word	0x0800ef45
 800ef00:	0800ef79 	.word	0x0800ef79
 800ef04:	0800efad 	.word	0x0800efad
 800ef08:	0800efe1 	.word	0x0800efe1
 800ef0c:	0800f015 	.word	0x0800f015
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00b      	beq.n	800ef34 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	7c12      	ldrb	r2, [r2, #16]
 800ef28:	f107 0108 	add.w	r1, r7, #8
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4798      	blx	r3
 800ef30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef32:	e091      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 faaa 	bl	800f490 <USBD_CtlError>
        err++;
 800ef3c:	7afb      	ldrb	r3, [r7, #11]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	72fb      	strb	r3, [r7, #11]
      break;
 800ef42:	e089      	b.n	800f058 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00b      	beq.n	800ef68 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	7c12      	ldrb	r2, [r2, #16]
 800ef5c:	f107 0108 	add.w	r1, r7, #8
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
 800ef64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef66:	e077      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 fa90 	bl	800f490 <USBD_CtlError>
        err++;
 800ef70:	7afb      	ldrb	r3, [r7, #11]
 800ef72:	3301      	adds	r3, #1
 800ef74:	72fb      	strb	r3, [r7, #11]
      break;
 800ef76:	e06f      	b.n	800f058 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	7c12      	ldrb	r2, [r2, #16]
 800ef90:	f107 0108 	add.w	r1, r7, #8
 800ef94:	4610      	mov	r0, r2
 800ef96:	4798      	blx	r3
 800ef98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef9a:	e05d      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 fa76 	bl	800f490 <USBD_CtlError>
        err++;
 800efa4:	7afb      	ldrb	r3, [r7, #11]
 800efa6:	3301      	adds	r3, #1
 800efa8:	72fb      	strb	r3, [r7, #11]
      break;
 800efaa:	e055      	b.n	800f058 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00b      	beq.n	800efd0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	7c12      	ldrb	r2, [r2, #16]
 800efc4:	f107 0108 	add.w	r1, r7, #8
 800efc8:	4610      	mov	r0, r2
 800efca:	4798      	blx	r3
 800efcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efce:	e043      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fa5c 	bl	800f490 <USBD_CtlError>
        err++;
 800efd8:	7afb      	ldrb	r3, [r7, #11]
 800efda:	3301      	adds	r3, #1
 800efdc:	72fb      	strb	r3, [r7, #11]
      break;
 800efde:	e03b      	b.n	800f058 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe6:	695b      	ldr	r3, [r3, #20]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00b      	beq.n	800f004 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eff2:	695b      	ldr	r3, [r3, #20]
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	7c12      	ldrb	r2, [r2, #16]
 800eff8:	f107 0108 	add.w	r1, r7, #8
 800effc:	4610      	mov	r0, r2
 800effe:	4798      	blx	r3
 800f000:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f002:	e029      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 fa42 	bl	800f490 <USBD_CtlError>
        err++;
 800f00c:	7afb      	ldrb	r3, [r7, #11]
 800f00e:	3301      	adds	r3, #1
 800f010:	72fb      	strb	r3, [r7, #11]
      break;
 800f012:	e021      	b.n	800f058 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00b      	beq.n	800f038 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	7c12      	ldrb	r2, [r2, #16]
 800f02c:	f107 0108 	add.w	r1, r7, #8
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
 800f034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f036:	e00f      	b.n	800f058 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fa28 	bl	800f490 <USBD_CtlError>
        err++;
 800f040:	7afb      	ldrb	r3, [r7, #11]
 800f042:	3301      	adds	r3, #1
 800f044:	72fb      	strb	r3, [r7, #11]
      break;
 800f046:	e007      	b.n	800f058 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f048:	6839      	ldr	r1, [r7, #0]
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 fa20 	bl	800f490 <USBD_CtlError>
      err++;
 800f050:	7afb      	ldrb	r3, [r7, #11]
 800f052:	3301      	adds	r3, #1
 800f054:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f056:	bf00      	nop
    }
    break;
 800f058:	e037      	b.n	800f0ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	7c1b      	ldrb	r3, [r3, #16]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d109      	bne.n	800f076 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f06a:	f107 0208 	add.w	r2, r7, #8
 800f06e:	4610      	mov	r0, r2
 800f070:	4798      	blx	r3
 800f072:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f074:	e029      	b.n	800f0ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fa09 	bl	800f490 <USBD_CtlError>
      err++;
 800f07e:	7afb      	ldrb	r3, [r7, #11]
 800f080:	3301      	adds	r3, #1
 800f082:	72fb      	strb	r3, [r7, #11]
    break;
 800f084:	e021      	b.n	800f0ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	7c1b      	ldrb	r3, [r3, #16]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10d      	bne.n	800f0aa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f096:	f107 0208 	add.w	r2, r7, #8
 800f09a:	4610      	mov	r0, r2
 800f09c:	4798      	blx	r3
 800f09e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	2207      	movs	r2, #7
 800f0a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f0a8:	e00f      	b.n	800f0ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f9ef 	bl	800f490 <USBD_CtlError>
      err++;
 800f0b2:	7afb      	ldrb	r3, [r7, #11]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	72fb      	strb	r3, [r7, #11]
    break;
 800f0b8:	e007      	b.n	800f0ca <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 f9e7 	bl	800f490 <USBD_CtlError>
    err++;
 800f0c2:	7afb      	ldrb	r3, [r7, #11]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	72fb      	strb	r3, [r7, #11]
    break;
 800f0c8:	bf00      	nop
  }

  if (err != 0U)
 800f0ca:	7afb      	ldrb	r3, [r7, #11]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d11e      	bne.n	800f10e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	88db      	ldrh	r3, [r3, #6]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d016      	beq.n	800f106 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f0d8:	893b      	ldrh	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00e      	beq.n	800f0fc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	88da      	ldrh	r2, [r3, #6]
 800f0e2:	893b      	ldrh	r3, [r7, #8]
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	bf28      	it	cs
 800f0e8:	4613      	movcs	r3, r2
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f0ee:	893b      	ldrh	r3, [r7, #8]
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	68f9      	ldr	r1, [r7, #12]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 fa3c 	bl	800f572 <USBD_CtlSendData>
 800f0fa:	e009      	b.n	800f110 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f0fc:	6839      	ldr	r1, [r7, #0]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f9c6 	bl	800f490 <USBD_CtlError>
 800f104:	e004      	b.n	800f110 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fa8d 	bl	800f626 <USBD_CtlSendStatus>
 800f10c:	e000      	b.n	800f110 <USBD_GetDescriptor+0x320>
    return;
 800f10e:	bf00      	nop
    }
  }
}
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop

0800f118 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	889b      	ldrh	r3, [r3, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d130      	bne.n	800f18c <USBD_SetAddress+0x74>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	88db      	ldrh	r3, [r3, #6]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d12c      	bne.n	800f18c <USBD_SetAddress+0x74>
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	885b      	ldrh	r3, [r3, #2]
 800f136:	2b7f      	cmp	r3, #127	; 0x7f
 800f138:	d828      	bhi.n	800f18c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	885b      	ldrh	r3, [r3, #2]
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f144:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d104      	bne.n	800f15a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f99c 	bl	800f490 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f158:	e01c      	b.n	800f194 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	7bfa      	ldrb	r2, [r7, #15]
 800f15e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f162:	7bfb      	ldrb	r3, [r7, #15]
 800f164:	4619      	mov	r1, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f007 fe6e 	bl	8016e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fa5a 	bl	800f626 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f172:	7bfb      	ldrb	r3, [r7, #15]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2202      	movs	r2, #2
 800f17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f180:	e008      	b.n	800f194 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f18a:	e003      	b.n	800f194 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 f97e 	bl	800f490 <USBD_CtlError>
  }
}
 800f194:	bf00      	nop
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	885b      	ldrh	r3, [r3, #2]
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	4b4b      	ldr	r3, [pc, #300]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f1b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f1b4:	4b4a      	ldr	r3, [pc, #296]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d905      	bls.n	800f1c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f966 	bl	800f490 <USBD_CtlError>
    return USBD_FAIL;
 800f1c4:	2303      	movs	r3, #3
 800f1c6:	e087      	b.n	800f2d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	d002      	beq.n	800f1d8 <USBD_SetConfig+0x3c>
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d025      	beq.n	800f222 <USBD_SetConfig+0x86>
 800f1d6:	e071      	b.n	800f2bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f1d8:	4b41      	ldr	r3, [pc, #260]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d01c      	beq.n	800f21a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f1e0:	4b3f      	ldr	r3, [pc, #252]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1ea:	4b3d      	ldr	r3, [pc, #244]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff f97d 	bl	800e4f0 <USBD_SetClassConfig>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d004      	beq.n	800f20a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 f944 	bl	800f490 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f208:	e065      	b.n	800f2d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fa0b 	bl	800f626 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2203      	movs	r2, #3
 800f214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f218:	e05d      	b.n	800f2d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fa03 	bl	800f626 <USBD_CtlSendStatus>
    break;
 800f220:	e059      	b.n	800f2d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f222:	4b2f      	ldr	r3, [pc, #188]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d112      	bne.n	800f250 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2202      	movs	r2, #2
 800f22e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f232:	4b2b      	ldr	r3, [pc, #172]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	461a      	mov	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f23c:	4b28      	ldr	r3, [pc, #160]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff f970 	bl	800e528 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f9ec 	bl	800f626 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f24e:	e042      	b.n	800f2d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f250:	4b23      	ldr	r3, [pc, #140]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	461a      	mov	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d02a      	beq.n	800f2b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	b2db      	uxtb	r3, r3
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff f95e 	bl	800e528 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f26c:	4b1c      	ldr	r3, [pc, #112]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	461a      	mov	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f276:	4b1a      	ldr	r3, [pc, #104]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7ff f937 	bl	800e4f0 <USBD_SetClassConfig>
 800f282:	4603      	mov	r3, r0
 800f284:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f286:	7bfb      	ldrb	r3, [r7, #15]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00f      	beq.n	800f2ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f8fe 	bl	800f490 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	4619      	mov	r1, r3
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff f943 	bl	800e528 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f2aa:	e014      	b.n	800f2d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 f9ba 	bl	800f626 <USBD_CtlSendStatus>
    break;
 800f2b2:	e010      	b.n	800f2d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f9b6 	bl	800f626 <USBD_CtlSendStatus>
    break;
 800f2ba:	e00c      	b.n	800f2d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f8e6 	bl	800f490 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2c4:	4b06      	ldr	r3, [pc, #24]	; (800f2e0 <USBD_SetConfig+0x144>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff f92c 	bl	800e528 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f2d0:	2303      	movs	r3, #3
 800f2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d4:	bf00      	nop
  }

  return ret;
 800f2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	200002f4 	.word	0x200002f4

0800f2e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	88db      	ldrh	r3, [r3, #6]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d004      	beq.n	800f300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f8c9 	bl	800f490 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f2fe:	e021      	b.n	800f344 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f306:	2b01      	cmp	r3, #1
 800f308:	db17      	blt.n	800f33a <USBD_GetConfig+0x56>
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	dd02      	ble.n	800f314 <USBD_GetConfig+0x30>
 800f30e:	2b03      	cmp	r3, #3
 800f310:	d00b      	beq.n	800f32a <USBD_GetConfig+0x46>
 800f312:	e012      	b.n	800f33a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3308      	adds	r3, #8
 800f31e:	2201      	movs	r2, #1
 800f320:	4619      	mov	r1, r3
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f925 	bl	800f572 <USBD_CtlSendData>
      break;
 800f328:	e00c      	b.n	800f344 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3304      	adds	r3, #4
 800f32e:	2201      	movs	r2, #1
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 f91d 	bl	800f572 <USBD_CtlSendData>
      break;
 800f338:	e004      	b.n	800f344 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f8a7 	bl	800f490 <USBD_CtlError>
      break;
 800f342:	bf00      	nop
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f35c:	3b01      	subs	r3, #1
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d81e      	bhi.n	800f3a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	88db      	ldrh	r3, [r3, #6]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d004      	beq.n	800f374 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f88f 	bl	800f490 <USBD_CtlError>
      break;
 800f372:	e01a      	b.n	800f3aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f380:	2b00      	cmp	r3, #0
 800f382:	d005      	beq.n	800f390 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f043 0202 	orr.w	r2, r3, #2
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	330c      	adds	r3, #12
 800f394:	2202      	movs	r2, #2
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f8ea 	bl	800f572 <USBD_CtlSendData>
    break;
 800f39e:	e004      	b.n	800f3aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f874 	bl	800f490 <USBD_CtlError>
    break;
 800f3a8:	bf00      	nop
  }
}
 800f3aa:	bf00      	nop
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b082      	sub	sp, #8
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	885b      	ldrh	r3, [r3, #2]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d106      	bne.n	800f3d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 f92a 	bl	800f626 <USBD_CtlSendStatus>
  }
}
 800f3d2:	bf00      	nop
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b082      	sub	sp, #8
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d80b      	bhi.n	800f408 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	885b      	ldrh	r3, [r3, #2]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d10c      	bne.n	800f412 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f910 	bl	800f626 <USBD_CtlSendStatus>
      }
      break;
 800f406:	e004      	b.n	800f412 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 f840 	bl	800f490 <USBD_CtlError>
      break;
 800f410:	e000      	b.n	800f414 <USBD_ClrFeature+0x3a>
      break;
 800f412:	bf00      	nop
  }
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	781a      	ldrb	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	3301      	adds	r3, #1
 800f436:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	781a      	ldrb	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	3301      	adds	r3, #1
 800f444:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f7ff faa9 	bl	800e99e <SWAPBYTE>
 800f44c:	4603      	mov	r3, r0
 800f44e:	461a      	mov	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3301      	adds	r3, #1
 800f458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3301      	adds	r3, #1
 800f45e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff fa9c 	bl	800e99e <SWAPBYTE>
 800f466:	4603      	mov	r3, r0
 800f468:	461a      	mov	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3301      	adds	r3, #1
 800f472:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f7ff fa8f 	bl	800e99e <SWAPBYTE>
 800f480:	4603      	mov	r3, r0
 800f482:	461a      	mov	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	80da      	strh	r2, [r3, #6]
}
 800f488:	bf00      	nop
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f49a:	2180      	movs	r1, #128	; 0x80
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f007 fc69 	bl	8016d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f007 fc65 	bl	8016d74 <USBD_LL_StallEP>
}
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b086      	sub	sp, #24
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	60f8      	str	r0, [r7, #12]
 800f4ba:	60b9      	str	r1, [r7, #8]
 800f4bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d036      	beq.n	800f536 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f4cc:	6938      	ldr	r0, [r7, #16]
 800f4ce:	f000 f836 	bl	800f53e <USBD_GetLen>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	7812      	ldrb	r2, [r2, #0]
 800f4ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	2203      	movs	r2, #3
 800f4fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4fc:	7dfb      	ldrb	r3, [r7, #23]
 800f4fe:	3301      	adds	r3, #1
 800f500:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f502:	e013      	b.n	800f52c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f504:	7dfb      	ldrb	r3, [r7, #23]
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	4413      	add	r3, r2
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	7812      	ldrb	r2, [r2, #0]
 800f50e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	3301      	adds	r3, #1
 800f514:	613b      	str	r3, [r7, #16]
    idx++;
 800f516:	7dfb      	ldrb	r3, [r7, #23]
 800f518:	3301      	adds	r3, #1
 800f51a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	4413      	add	r3, r2
 800f522:	2200      	movs	r2, #0
 800f524:	701a      	strb	r2, [r3, #0]
    idx++;
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	3301      	adds	r3, #1
 800f52a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e7      	bne.n	800f504 <USBD_GetString+0x52>
 800f534:	e000      	b.n	800f538 <USBD_GetString+0x86>
    return;
 800f536:	bf00      	nop
  }
}
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f53e:	b480      	push	{r7}
 800f540:	b085      	sub	sp, #20
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f546:	2300      	movs	r3, #0
 800f548:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f54e:	e005      	b.n	800f55c <USBD_GetLen+0x1e>
  {
    len++;
 800f550:	7bfb      	ldrb	r3, [r7, #15]
 800f552:	3301      	adds	r3, #1
 800f554:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	3301      	adds	r3, #1
 800f55a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1f5      	bne.n	800f550 <USBD_GetLen+0x12>
  }

  return len;
 800f564:	7bfb      	ldrb	r3, [r7, #15]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3714      	adds	r7, #20
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b084      	sub	sp, #16
 800f576:	af00      	add	r7, sp, #0
 800f578:	60f8      	str	r0, [r7, #12]
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2202      	movs	r2, #2
 800f582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	2100      	movs	r1, #0
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f007 fc74 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f007 fc63 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 800f5c0:	2300      	movs	r3, #0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b084      	sub	sp, #16
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	60b9      	str	r1, [r7, #8]
 800f5d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2203      	movs	r2, #3
 800f5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f007 fc67 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	2100      	movs	r1, #0
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f007 fc56 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3710      	adds	r7, #16
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f626:	b580      	push	{r7, lr}
 800f628:	b082      	sub	sp, #8
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2204      	movs	r2, #4
 800f632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f636:	2300      	movs	r3, #0
 800f638:	2200      	movs	r2, #0
 800f63a:	2100      	movs	r1, #0
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f007 fc22 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2205      	movs	r2, #5
 800f658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f65c:	2300      	movs	r3, #0
 800f65e:	2200      	movs	r2, #0
 800f660:	2100      	movs	r1, #0
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f007 fc30 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
	...

0800f674 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	4603      	mov	r3, r0
 800f67c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	4a08      	ldr	r2, [pc, #32]	; (800f6a4 <disk_status+0x30>)
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	4413      	add	r3, r2
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	79fa      	ldrb	r2, [r7, #7]
 800f68c:	4905      	ldr	r1, [pc, #20]	; (800f6a4 <disk_status+0x30>)
 800f68e:	440a      	add	r2, r1
 800f690:	7a12      	ldrb	r2, [r2, #8]
 800f692:	4610      	mov	r0, r2
 800f694:	4798      	blx	r3
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20000320 	.word	0x20000320

0800f6a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f6b6:	79fb      	ldrb	r3, [r7, #7]
 800f6b8:	4a0d      	ldr	r2, [pc, #52]	; (800f6f0 <disk_initialize+0x48>)
 800f6ba:	5cd3      	ldrb	r3, [r2, r3]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d111      	bne.n	800f6e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f6c0:	79fb      	ldrb	r3, [r7, #7]
 800f6c2:	4a0b      	ldr	r2, [pc, #44]	; (800f6f0 <disk_initialize+0x48>)
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f6c8:	79fb      	ldrb	r3, [r7, #7]
 800f6ca:	4a09      	ldr	r2, [pc, #36]	; (800f6f0 <disk_initialize+0x48>)
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	79fa      	ldrb	r2, [r7, #7]
 800f6d6:	4906      	ldr	r1, [pc, #24]	; (800f6f0 <disk_initialize+0x48>)
 800f6d8:	440a      	add	r2, r1
 800f6da:	7a12      	ldrb	r2, [r2, #8]
 800f6dc:	4610      	mov	r0, r2
 800f6de:	4798      	blx	r3
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	20000320 	.word	0x20000320

0800f6f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f6f4:	b590      	push	{r4, r7, lr}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	607a      	str	r2, [r7, #4]
 800f6fe:	603b      	str	r3, [r7, #0]
 800f700:	4603      	mov	r3, r0
 800f702:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	4a0a      	ldr	r2, [pc, #40]	; (800f730 <disk_read+0x3c>)
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	689c      	ldr	r4, [r3, #8]
 800f710:	7bfb      	ldrb	r3, [r7, #15]
 800f712:	4a07      	ldr	r2, [pc, #28]	; (800f730 <disk_read+0x3c>)
 800f714:	4413      	add	r3, r2
 800f716:	7a18      	ldrb	r0, [r3, #8]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	68b9      	ldr	r1, [r7, #8]
 800f71e:	47a0      	blx	r4
 800f720:	4603      	mov	r3, r0
 800f722:	75fb      	strb	r3, [r7, #23]
  return res;
 800f724:	7dfb      	ldrb	r3, [r7, #23]
}
 800f726:	4618      	mov	r0, r3
 800f728:	371c      	adds	r7, #28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd90      	pop	{r4, r7, pc}
 800f72e:	bf00      	nop
 800f730:	20000320 	.word	0x20000320

0800f734 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b087      	sub	sp, #28
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	607a      	str	r2, [r7, #4]
 800f73e:	603b      	str	r3, [r7, #0]
 800f740:	4603      	mov	r3, r0
 800f742:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f744:	7bfb      	ldrb	r3, [r7, #15]
 800f746:	4a0a      	ldr	r2, [pc, #40]	; (800f770 <disk_write+0x3c>)
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4413      	add	r3, r2
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	68dc      	ldr	r4, [r3, #12]
 800f750:	7bfb      	ldrb	r3, [r7, #15]
 800f752:	4a07      	ldr	r2, [pc, #28]	; (800f770 <disk_write+0x3c>)
 800f754:	4413      	add	r3, r2
 800f756:	7a18      	ldrb	r0, [r3, #8]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	68b9      	ldr	r1, [r7, #8]
 800f75e:	47a0      	blx	r4
 800f760:	4603      	mov	r3, r0
 800f762:	75fb      	strb	r3, [r7, #23]
  return res;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	371c      	adds	r7, #28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd90      	pop	{r4, r7, pc}
 800f76e:	bf00      	nop
 800f770:	20000320 	.word	0x20000320

0800f774 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	4603      	mov	r3, r0
 800f77c:	603a      	str	r2, [r7, #0]
 800f77e:	71fb      	strb	r3, [r7, #7]
 800f780:	460b      	mov	r3, r1
 800f782:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f784:	79fb      	ldrb	r3, [r7, #7]
 800f786:	4a09      	ldr	r2, [pc, #36]	; (800f7ac <disk_ioctl+0x38>)
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	79fa      	ldrb	r2, [r7, #7]
 800f792:	4906      	ldr	r1, [pc, #24]	; (800f7ac <disk_ioctl+0x38>)
 800f794:	440a      	add	r2, r1
 800f796:	7a10      	ldrb	r0, [r2, #8]
 800f798:	79b9      	ldrb	r1, [r7, #6]
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	4798      	blx	r3
 800f79e:	4603      	mov	r3, r0
 800f7a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3710      	adds	r7, #16
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	20000320 	.word	0x20000320

0800f7b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f7c0:	89fb      	ldrh	r3, [r7, #14]
 800f7c2:	021b      	lsls	r3, r3, #8
 800f7c4:	b21a      	sxth	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	b21b      	sxth	r3, r3
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	b21b      	sxth	r3, r3
 800f7d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f7d2:	89fb      	ldrh	r3, [r7, #14]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3303      	adds	r3, #3
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	021b      	lsls	r3, r3, #8
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	3202      	adds	r2, #2
 800f7f8:	7812      	ldrb	r2, [r2, #0]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	021b      	lsls	r3, r3, #8
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	3201      	adds	r2, #1
 800f806:	7812      	ldrb	r2, [r2, #0]
 800f808:	4313      	orrs	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	021b      	lsls	r3, r3, #8
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	7812      	ldrb	r2, [r2, #0]
 800f814:	4313      	orrs	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
	return rv;
 800f818:	68fb      	ldr	r3, [r7, #12]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	607a      	str	r2, [r7, #4]
 800f838:	887a      	ldrh	r2, [r7, #2]
 800f83a:	b2d2      	uxtb	r2, r2
 800f83c:	701a      	strb	r2, [r3, #0]
 800f83e:	887b      	ldrh	r3, [r7, #2]
 800f840:	0a1b      	lsrs	r3, r3, #8
 800f842:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	1c5a      	adds	r2, r3, #1
 800f848:	607a      	str	r2, [r7, #4]
 800f84a:	887a      	ldrh	r2, [r7, #2]
 800f84c:	b2d2      	uxtb	r2, r2
 800f84e:	701a      	strb	r2, [r3, #0]
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	607a      	str	r2, [r7, #4]
 800f86c:	683a      	ldr	r2, [r7, #0]
 800f86e:	b2d2      	uxtb	r2, r2
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	0a1b      	lsrs	r3, r3, #8
 800f876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	607a      	str	r2, [r7, #4]
 800f87e:	683a      	ldr	r2, [r7, #0]
 800f880:	b2d2      	uxtb	r2, r2
 800f882:	701a      	strb	r2, [r3, #0]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	0a1b      	lsrs	r3, r3, #8
 800f888:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	1c5a      	adds	r2, r3, #1
 800f88e:	607a      	str	r2, [r7, #4]
 800f890:	683a      	ldr	r2, [r7, #0]
 800f892:	b2d2      	uxtb	r2, r2
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	0a1b      	lsrs	r3, r3, #8
 800f89a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	607a      	str	r2, [r7, #4]
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	b2d2      	uxtb	r2, r2
 800f8a6:	701a      	strb	r2, [r3, #0]
}
 800f8a8:	bf00      	nop
 800f8aa:	370c      	adds	r7, #12
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8b4:	b480      	push	{r7}
 800f8b6:	b087      	sub	sp, #28
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00d      	beq.n	800f8ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f8ce:	693a      	ldr	r2, [r7, #16]
 800f8d0:	1c53      	adds	r3, r2, #1
 800f8d2:	613b      	str	r3, [r7, #16]
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	1c59      	adds	r1, r3, #1
 800f8d8:	6179      	str	r1, [r7, #20]
 800f8da:	7812      	ldrb	r2, [r2, #0]
 800f8dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	607b      	str	r3, [r7, #4]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1f1      	bne.n	800f8ce <mem_cpy+0x1a>
	}
}
 800f8ea:	bf00      	nop
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f8f6:	b480      	push	{r7}
 800f8f8:	b087      	sub	sp, #28
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	60f8      	str	r0, [r7, #12]
 800f8fe:	60b9      	str	r1, [r7, #8]
 800f900:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	617a      	str	r2, [r7, #20]
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	b2d2      	uxtb	r2, r2
 800f910:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	3b01      	subs	r3, #1
 800f916:	607b      	str	r3, [r7, #4]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1f3      	bne.n	800f906 <mem_set+0x10>
}
 800f91e:	bf00      	nop
 800f920:	371c      	adds	r7, #28
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f92a:	b480      	push	{r7}
 800f92c:	b089      	sub	sp, #36	; 0x24
 800f92e:	af00      	add	r7, sp, #0
 800f930:	60f8      	str	r0, [r7, #12]
 800f932:	60b9      	str	r1, [r7, #8]
 800f934:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	61fb      	str	r3, [r7, #28]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	61fa      	str	r2, [r7, #28]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	4619      	mov	r1, r3
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	61ba      	str	r2, [r7, #24]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	1acb      	subs	r3, r1, r3
 800f956:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	3b01      	subs	r3, #1
 800f95c:	607b      	str	r3, [r7, #4]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <mem_cmp+0x40>
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0eb      	beq.n	800f942 <mem_cmp+0x18>

	return r;
 800f96a:	697b      	ldr	r3, [r7, #20]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3724      	adds	r7, #36	; 0x24
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f982:	e002      	b.n	800f98a <chk_chr+0x12>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3301      	adds	r3, #1
 800f988:	607b      	str	r3, [r7, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d005      	beq.n	800f99e <chk_chr+0x26>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d1f2      	bne.n	800f984 <chk_chr+0xc>
	return *str;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	370c      	adds	r7, #12
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d009      	beq.n	800f9d0 <lock_fs+0x22>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f002 fd8d 	bl	80124e0 <ff_req_grant>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <lock_fs+0x22>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e000      	b.n	800f9d2 <lock_fs+0x24>
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b082      	sub	sp, #8
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00d      	beq.n	800fa08 <unlock_fs+0x2e>
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	2b0c      	cmp	r3, #12
 800f9f0:	d00a      	beq.n	800fa08 <unlock_fs+0x2e>
 800f9f2:	78fb      	ldrb	r3, [r7, #3]
 800f9f4:	2b0b      	cmp	r3, #11
 800f9f6:	d007      	beq.n	800fa08 <unlock_fs+0x2e>
 800f9f8:	78fb      	ldrb	r3, [r7, #3]
 800f9fa:	2b0f      	cmp	r3, #15
 800f9fc:	d004      	beq.n	800fa08 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f002 fd81 	bl	801250a <ff_rel_grant>
	}
}
 800fa08:	bf00      	nop
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	60bb      	str	r3, [r7, #8]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	60fb      	str	r3, [r7, #12]
 800fa22:	e029      	b.n	800fa78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fa24:	4a27      	ldr	r2, [pc, #156]	; (800fac4 <chk_lock+0xb4>)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	4413      	add	r3, r2
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d01d      	beq.n	800fa6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa32:	4a24      	ldr	r2, [pc, #144]	; (800fac4 <chk_lock+0xb4>)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	011b      	lsls	r3, r3, #4
 800fa38:	4413      	add	r3, r2
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d116      	bne.n	800fa72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fa44:	4a1f      	ldr	r2, [pc, #124]	; (800fac4 <chk_lock+0xb4>)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	011b      	lsls	r3, r3, #4
 800fa4a:	4413      	add	r3, r2
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d10c      	bne.n	800fa72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa58:	4a1a      	ldr	r2, [pc, #104]	; (800fac4 <chk_lock+0xb4>)
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	011b      	lsls	r3, r3, #4
 800fa5e:	4413      	add	r3, r2
 800fa60:	3308      	adds	r3, #8
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d102      	bne.n	800fa72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa6c:	e007      	b.n	800fa7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d9d2      	bls.n	800fa24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d109      	bne.n	800fa98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d102      	bne.n	800fa90 <chk_lock+0x80>
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d101      	bne.n	800fa94 <chk_lock+0x84>
 800fa90:	2300      	movs	r3, #0
 800fa92:	e010      	b.n	800fab6 <chk_lock+0xa6>
 800fa94:	2312      	movs	r3, #18
 800fa96:	e00e      	b.n	800fab6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d108      	bne.n	800fab0 <chk_lock+0xa0>
 800fa9e:	4a09      	ldr	r2, [pc, #36]	; (800fac4 <chk_lock+0xb4>)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	011b      	lsls	r3, r3, #4
 800faa4:	4413      	add	r3, r2
 800faa6:	330c      	adds	r3, #12
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faae:	d101      	bne.n	800fab4 <chk_lock+0xa4>
 800fab0:	2310      	movs	r3, #16
 800fab2:	e000      	b.n	800fab6 <chk_lock+0xa6>
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3714      	adds	r7, #20
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20000300 	.word	0x20000300

0800fac8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800face:	2300      	movs	r3, #0
 800fad0:	607b      	str	r3, [r7, #4]
 800fad2:	e002      	b.n	800fada <enq_lock+0x12>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	3301      	adds	r3, #1
 800fad8:	607b      	str	r3, [r7, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d806      	bhi.n	800faee <enq_lock+0x26>
 800fae0:	4a09      	ldr	r2, [pc, #36]	; (800fb08 <enq_lock+0x40>)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	011b      	lsls	r3, r3, #4
 800fae6:	4413      	add	r3, r2
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1f2      	bne.n	800fad4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	bf14      	ite	ne
 800faf4:	2301      	movne	r3, #1
 800faf6:	2300      	moveq	r3, #0
 800faf8:	b2db      	uxtb	r3, r3
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	20000300 	.word	0x20000300

0800fb0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb16:	2300      	movs	r3, #0
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	e01f      	b.n	800fb5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fb1c:	4a41      	ldr	r2, [pc, #260]	; (800fc24 <inc_lock+0x118>)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	4413      	add	r3, r2
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d113      	bne.n	800fb56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fb2e:	4a3d      	ldr	r2, [pc, #244]	; (800fc24 <inc_lock+0x118>)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	011b      	lsls	r3, r3, #4
 800fb34:	4413      	add	r3, r2
 800fb36:	3304      	adds	r3, #4
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d109      	bne.n	800fb56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fb42:	4a38      	ldr	r2, [pc, #224]	; (800fc24 <inc_lock+0x118>)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	4413      	add	r3, r2
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d006      	beq.n	800fb64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d9dc      	bls.n	800fb1c <inc_lock+0x10>
 800fb62:	e000      	b.n	800fb66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fb64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d132      	bne.n	800fbd2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	e002      	b.n	800fb78 <inc_lock+0x6c>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3301      	adds	r3, #1
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d806      	bhi.n	800fb8c <inc_lock+0x80>
 800fb7e:	4a29      	ldr	r2, [pc, #164]	; (800fc24 <inc_lock+0x118>)
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	011b      	lsls	r3, r3, #4
 800fb84:	4413      	add	r3, r2
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1f2      	bne.n	800fb72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d101      	bne.n	800fb96 <inc_lock+0x8a>
 800fb92:	2300      	movs	r3, #0
 800fb94:	e040      	b.n	800fc18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	4922      	ldr	r1, [pc, #136]	; (800fc24 <inc_lock+0x118>)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	011b      	lsls	r3, r3, #4
 800fba0:	440b      	add	r3, r1
 800fba2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	689a      	ldr	r2, [r3, #8]
 800fba8:	491e      	ldr	r1, [pc, #120]	; (800fc24 <inc_lock+0x118>)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	011b      	lsls	r3, r3, #4
 800fbae:	440b      	add	r3, r1
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	695a      	ldr	r2, [r3, #20]
 800fbb8:	491a      	ldr	r1, [pc, #104]	; (800fc24 <inc_lock+0x118>)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	011b      	lsls	r3, r3, #4
 800fbbe:	440b      	add	r3, r1
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fbc4:	4a17      	ldr	r2, [pc, #92]	; (800fc24 <inc_lock+0x118>)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	011b      	lsls	r3, r3, #4
 800fbca:	4413      	add	r3, r2
 800fbcc:	330c      	adds	r3, #12
 800fbce:	2200      	movs	r2, #0
 800fbd0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d009      	beq.n	800fbec <inc_lock+0xe0>
 800fbd8:	4a12      	ldr	r2, [pc, #72]	; (800fc24 <inc_lock+0x118>)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	011b      	lsls	r3, r3, #4
 800fbde:	4413      	add	r3, r2
 800fbe0:	330c      	adds	r3, #12
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d001      	beq.n	800fbec <inc_lock+0xe0>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e015      	b.n	800fc18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d108      	bne.n	800fc04 <inc_lock+0xf8>
 800fbf2:	4a0c      	ldr	r2, [pc, #48]	; (800fc24 <inc_lock+0x118>)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	011b      	lsls	r3, r3, #4
 800fbf8:	4413      	add	r3, r2
 800fbfa:	330c      	adds	r3, #12
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	e001      	b.n	800fc08 <inc_lock+0xfc>
 800fc04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc08:	4906      	ldr	r1, [pc, #24]	; (800fc24 <inc_lock+0x118>)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	011b      	lsls	r3, r3, #4
 800fc0e:	440b      	add	r3, r1
 800fc10:	330c      	adds	r3, #12
 800fc12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr
 800fc24:	20000300 	.word	0x20000300

0800fc28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	607b      	str	r3, [r7, #4]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d825      	bhi.n	800fc88 <dec_lock+0x60>
		n = Files[i].ctr;
 800fc3c:	4a17      	ldr	r2, [pc, #92]	; (800fc9c <dec_lock+0x74>)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	011b      	lsls	r3, r3, #4
 800fc42:	4413      	add	r3, r2
 800fc44:	330c      	adds	r3, #12
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fc4a:	89fb      	ldrh	r3, [r7, #14]
 800fc4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc50:	d101      	bne.n	800fc56 <dec_lock+0x2e>
 800fc52:	2300      	movs	r3, #0
 800fc54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fc56:	89fb      	ldrh	r3, [r7, #14]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <dec_lock+0x3a>
 800fc5c:	89fb      	ldrh	r3, [r7, #14]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fc62:	4a0e      	ldr	r2, [pc, #56]	; (800fc9c <dec_lock+0x74>)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	011b      	lsls	r3, r3, #4
 800fc68:	4413      	add	r3, r2
 800fc6a:	330c      	adds	r3, #12
 800fc6c:	89fa      	ldrh	r2, [r7, #14]
 800fc6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fc70:	89fb      	ldrh	r3, [r7, #14]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d105      	bne.n	800fc82 <dec_lock+0x5a>
 800fc76:	4a09      	ldr	r2, [pc, #36]	; (800fc9c <dec_lock+0x74>)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	011b      	lsls	r3, r3, #4
 800fc7c:	4413      	add	r3, r2
 800fc7e:	2200      	movs	r2, #0
 800fc80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fc82:	2300      	movs	r3, #0
 800fc84:	737b      	strb	r3, [r7, #13]
 800fc86:	e001      	b.n	800fc8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fc88:	2302      	movs	r3, #2
 800fc8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fc8c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	20000300 	.word	0x20000300

0800fca0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fca8:	2300      	movs	r3, #0
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e010      	b.n	800fcd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fcae:	4a0d      	ldr	r2, [pc, #52]	; (800fce4 <clear_lock+0x44>)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	011b      	lsls	r3, r3, #4
 800fcb4:	4413      	add	r3, r2
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d105      	bne.n	800fcca <clear_lock+0x2a>
 800fcbe:	4a09      	ldr	r2, [pc, #36]	; (800fce4 <clear_lock+0x44>)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	011b      	lsls	r3, r3, #4
 800fcc4:	4413      	add	r3, r2
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3301      	adds	r3, #1
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d9eb      	bls.n	800fcae <clear_lock+0xe>
	}
}
 800fcd6:	bf00      	nop
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	20000300 	.word	0x20000300

0800fce8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	78db      	ldrb	r3, [r3, #3]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d034      	beq.n	800fd66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7858      	ldrb	r0, [r3, #1]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	f7ff fd10 	bl	800f734 <disk_write>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d002      	beq.n	800fd20 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	73fb      	strb	r3, [r7, #15]
 800fd1e:	e022      	b.n	800fd66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	1ad2      	subs	r2, r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d217      	bcs.n	800fd66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	789b      	ldrb	r3, [r3, #2]
 800fd3a:	613b      	str	r3, [r7, #16]
 800fd3c:	e010      	b.n	800fd60 <sync_window+0x78>
					wsect += fs->fsize;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	697a      	ldr	r2, [r7, #20]
 800fd44:	4413      	add	r3, r2
 800fd46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	7858      	ldrb	r0, [r3, #1]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd52:	2301      	movs	r3, #1
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	f7ff fced 	bl	800f734 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	613b      	str	r3, [r7, #16]
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d8eb      	bhi.n	800fd3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3718      	adds	r7, #24
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd82:	683a      	ldr	r2, [r7, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d01b      	beq.n	800fdc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7ff ffad 	bl	800fce8 <sync_window>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fd92:	7bfb      	ldrb	r3, [r7, #15]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d113      	bne.n	800fdc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	7858      	ldrb	r0, [r3, #1]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fda2:	2301      	movs	r3, #1
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	f7ff fca5 	bl	800f6f4 <disk_read>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d004      	beq.n	800fdba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	683a      	ldr	r2, [r7, #0]
 800fdbe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
	...

0800fdcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff ff87 	bl	800fce8 <sync_window>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d158      	bne.n	800fe96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d148      	bne.n	800fe7e <sync_fs+0xb2>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	791b      	ldrb	r3, [r3, #4]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d144      	bne.n	800fe7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3334      	adds	r3, #52	; 0x34
 800fdf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff fd79 	bl	800f8f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	3334      	adds	r3, #52	; 0x34
 800fe08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff fd08 	bl	800f826 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	3334      	adds	r3, #52	; 0x34
 800fe1a:	4921      	ldr	r1, [pc, #132]	; (800fea0 <sync_fs+0xd4>)
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff fd1d 	bl	800f85c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	3334      	adds	r3, #52	; 0x34
 800fe26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe2a:	491e      	ldr	r1, [pc, #120]	; (800fea4 <sync_fs+0xd8>)
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fd15 	bl	800f85c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	3334      	adds	r3, #52	; 0x34
 800fe36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4610      	mov	r0, r2
 800fe42:	f7ff fd0b 	bl	800f85c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	3334      	adds	r3, #52	; 0x34
 800fe4a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f7ff fd01 	bl	800f85c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7858      	ldrb	r0, [r3, #1]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe72:	2301      	movs	r3, #1
 800fe74:	f7ff fc5e 	bl	800f734 <disk_write>
			fs->fsi_flag = 0;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	785b      	ldrb	r3, [r3, #1]
 800fe82:	2200      	movs	r2, #0
 800fe84:	2100      	movs	r1, #0
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff fc74 	bl	800f774 <disk_ioctl>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <sync_fs+0xca>
 800fe92:	2301      	movs	r3, #1
 800fe94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fe96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	41615252 	.word	0x41615252
 800fea4:	61417272 	.word	0x61417272

0800fea8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	3b02      	subs	r3, #2
 800feb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	699b      	ldr	r3, [r3, #24]
 800febc:	3b02      	subs	r3, #2
 800febe:	683a      	ldr	r2, [r7, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d301      	bcc.n	800fec8 <clust2sect+0x20>
 800fec4:	2300      	movs	r3, #0
 800fec6:	e008      	b.n	800feda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	895b      	ldrh	r3, [r3, #10]
 800fecc:	461a      	mov	r2, r3
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	fb03 f202 	mul.w	r2, r3, r2
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed8:	4413      	add	r3, r2
}
 800feda:	4618      	mov	r0, r3
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b086      	sub	sp, #24
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d904      	bls.n	800ff06 <get_fat+0x20>
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d302      	bcc.n	800ff0c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ff06:	2301      	movs	r3, #1
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	e08c      	b.n	8010026 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	d045      	beq.n	800ffa6 <get_fat+0xc0>
 800ff1a:	2b03      	cmp	r3, #3
 800ff1c:	d05d      	beq.n	800ffda <get_fat+0xf4>
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d177      	bne.n	8010012 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	085b      	lsrs	r3, r3, #1
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	0a5b      	lsrs	r3, r3, #9
 800ff38:	4413      	add	r3, r2
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	6938      	ldr	r0, [r7, #16]
 800ff3e:	f7ff ff17 	bl	800fd70 <move_window>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d167      	bne.n	8010018 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	60fa      	str	r2, [r7, #12]
 800ff4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	4413      	add	r3, r2
 800ff56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	0a5b      	lsrs	r3, r3, #9
 800ff64:	4413      	add	r3, r2
 800ff66:	4619      	mov	r1, r3
 800ff68:	6938      	ldr	r0, [r7, #16]
 800ff6a:	f7ff ff01 	bl	800fd70 <move_window>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d153      	bne.n	801001c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff7a:	693a      	ldr	r2, [r7, #16]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff82:	021b      	lsls	r3, r3, #8
 800ff84:	461a      	mov	r2, r3
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <get_fat+0xb6>
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	091b      	lsrs	r3, r3, #4
 800ff9a:	e002      	b.n	800ffa2 <get_fat+0xbc>
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ffa2:	617b      	str	r3, [r7, #20]
			break;
 800ffa4:	e03f      	b.n	8010026 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	0a1b      	lsrs	r3, r3, #8
 800ffae:	4413      	add	r3, r2
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6938      	ldr	r0, [r7, #16]
 800ffb4:	f7ff fedc 	bl	800fd70 <move_window>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d130      	bne.n	8010020 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ffcc:	4413      	add	r3, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff fbee 	bl	800f7b0 <ld_word>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	617b      	str	r3, [r7, #20]
			break;
 800ffd8:	e025      	b.n	8010026 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	09db      	lsrs	r3, r3, #7
 800ffe2:	4413      	add	r3, r2
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6938      	ldr	r0, [r7, #16]
 800ffe8:	f7ff fec2 	bl	800fd70 <move_window>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d118      	bne.n	8010024 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010000:	4413      	add	r3, r2
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff fbec 	bl	800f7e0 <ld_dword>
 8010008:	4603      	mov	r3, r0
 801000a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801000e:	617b      	str	r3, [r7, #20]
			break;
 8010010:	e009      	b.n	8010026 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010012:	2301      	movs	r3, #1
 8010014:	617b      	str	r3, [r7, #20]
 8010016:	e006      	b.n	8010026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010018:	bf00      	nop
 801001a:	e004      	b.n	8010026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801001c:	bf00      	nop
 801001e:	e002      	b.n	8010026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010020:	bf00      	nop
 8010022:	e000      	b.n	8010026 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010024:	bf00      	nop
		}
	}

	return val;
 8010026:	697b      	ldr	r3, [r7, #20]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3718      	adds	r7, #24
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010030:	b590      	push	{r4, r7, lr}
 8010032:	b089      	sub	sp, #36	; 0x24
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801003c:	2302      	movs	r3, #2
 801003e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	2b01      	cmp	r3, #1
 8010044:	f240 80d6 	bls.w	80101f4 <put_fat+0x1c4>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	699b      	ldr	r3, [r3, #24]
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	429a      	cmp	r2, r3
 8010050:	f080 80d0 	bcs.w	80101f4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	2b02      	cmp	r3, #2
 801005a:	d073      	beq.n	8010144 <put_fat+0x114>
 801005c:	2b03      	cmp	r3, #3
 801005e:	f000 8091 	beq.w	8010184 <put_fat+0x154>
 8010062:	2b01      	cmp	r3, #1
 8010064:	f040 80c6 	bne.w	80101f4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	61bb      	str	r3, [r7, #24]
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	085b      	lsrs	r3, r3, #1
 8010070:	69ba      	ldr	r2, [r7, #24]
 8010072:	4413      	add	r3, r2
 8010074:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	0a5b      	lsrs	r3, r3, #9
 801007e:	4413      	add	r3, r2
 8010080:	4619      	mov	r1, r3
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff fe74 	bl	800fd70 <move_window>
 8010088:	4603      	mov	r3, r0
 801008a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801008c:	7ffb      	ldrb	r3, [r7, #31]
 801008e:	2b00      	cmp	r3, #0
 8010090:	f040 80a9 	bne.w	80101e6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	1c59      	adds	r1, r3, #1
 801009e:	61b9      	str	r1, [r7, #24]
 80100a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100a4:	4413      	add	r3, r2
 80100a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00d      	beq.n	80100ce <put_fat+0x9e>
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	b25b      	sxtb	r3, r3
 80100b8:	f003 030f 	and.w	r3, r3, #15
 80100bc:	b25a      	sxtb	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	011b      	lsls	r3, r3, #4
 80100c4:	b25b      	sxtb	r3, r3
 80100c6:	4313      	orrs	r3, r2
 80100c8:	b25b      	sxtb	r3, r3
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	e001      	b.n	80100d2 <put_fat+0xa2>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	697a      	ldr	r2, [r7, #20]
 80100d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2201      	movs	r2, #1
 80100da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	0a5b      	lsrs	r3, r3, #9
 80100e4:	4413      	add	r3, r2
 80100e6:	4619      	mov	r1, r3
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff fe41 	bl	800fd70 <move_window>
 80100ee:	4603      	mov	r3, r0
 80100f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80100f2:	7ffb      	ldrb	r3, [r7, #31]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d178      	bne.n	80101ea <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010104:	4413      	add	r3, r2
 8010106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	2b00      	cmp	r3, #0
 8010110:	d003      	beq.n	801011a <put_fat+0xea>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	091b      	lsrs	r3, r3, #4
 8010116:	b2db      	uxtb	r3, r3
 8010118:	e00e      	b.n	8010138 <put_fat+0x108>
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	b25b      	sxtb	r3, r3
 8010120:	f023 030f 	bic.w	r3, r3, #15
 8010124:	b25a      	sxtb	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	0a1b      	lsrs	r3, r3, #8
 801012a:	b25b      	sxtb	r3, r3
 801012c:	f003 030f 	and.w	r3, r3, #15
 8010130:	b25b      	sxtb	r3, r3
 8010132:	4313      	orrs	r3, r2
 8010134:	b25b      	sxtb	r3, r3
 8010136:	b2db      	uxtb	r3, r3
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2201      	movs	r2, #1
 8010140:	70da      	strb	r2, [r3, #3]
			break;
 8010142:	e057      	b.n	80101f4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	0a1b      	lsrs	r3, r3, #8
 801014c:	4413      	add	r3, r2
 801014e:	4619      	mov	r1, r3
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff fe0d 	bl	800fd70 <move_window>
 8010156:	4603      	mov	r3, r0
 8010158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801015a:	7ffb      	ldrb	r3, [r7, #31]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d146      	bne.n	80101ee <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801016e:	4413      	add	r3, r2
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	b292      	uxth	r2, r2
 8010174:	4611      	mov	r1, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff fb55 	bl	800f826 <st_word>
			fs->wflag = 1;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2201      	movs	r2, #1
 8010180:	70da      	strb	r2, [r3, #3]
			break;
 8010182:	e037      	b.n	80101f4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	09db      	lsrs	r3, r3, #7
 801018c:	4413      	add	r3, r2
 801018e:	4619      	mov	r1, r3
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f7ff fded 	bl	800fd70 <move_window>
 8010196:	4603      	mov	r3, r0
 8010198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801019a:	7ffb      	ldrb	r3, [r7, #31]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d128      	bne.n	80101f2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80101b4:	4413      	add	r3, r2
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7ff fb12 	bl	800f7e0 <ld_dword>
 80101bc:	4603      	mov	r3, r0
 80101be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80101c2:	4323      	orrs	r3, r4
 80101c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80101d4:	4413      	add	r3, r2
 80101d6:	6879      	ldr	r1, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff fb3f 	bl	800f85c <st_dword>
			fs->wflag = 1;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2201      	movs	r2, #1
 80101e2:	70da      	strb	r2, [r3, #3]
			break;
 80101e4:	e006      	b.n	80101f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80101e6:	bf00      	nop
 80101e8:	e004      	b.n	80101f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80101ea:	bf00      	nop
 80101ec:	e002      	b.n	80101f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80101ee:	bf00      	nop
 80101f0:	e000      	b.n	80101f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80101f2:	bf00      	nop
		}
	}
	return res;
 80101f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3724      	adds	r7, #36	; 0x24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}

080101fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b088      	sub	sp, #32
 8010202:	af00      	add	r7, sp, #0
 8010204:	60f8      	str	r0, [r7, #12]
 8010206:	60b9      	str	r1, [r7, #8]
 8010208:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	2b01      	cmp	r3, #1
 8010218:	d904      	bls.n	8010224 <remove_chain+0x26>
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	699b      	ldr	r3, [r3, #24]
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	429a      	cmp	r2, r3
 8010222:	d301      	bcc.n	8010228 <remove_chain+0x2a>
 8010224:	2302      	movs	r3, #2
 8010226:	e04b      	b.n	80102c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801022e:	f04f 32ff 	mov.w	r2, #4294967295
 8010232:	6879      	ldr	r1, [r7, #4]
 8010234:	69b8      	ldr	r0, [r7, #24]
 8010236:	f7ff fefb 	bl	8010030 <put_fat>
 801023a:	4603      	mov	r3, r0
 801023c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801023e:	7ffb      	ldrb	r3, [r7, #31]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <remove_chain+0x4a>
 8010244:	7ffb      	ldrb	r3, [r7, #31]
 8010246:	e03b      	b.n	80102c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010248:	68b9      	ldr	r1, [r7, #8]
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f7ff fe4b 	bl	800fee6 <get_fat>
 8010250:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d031      	beq.n	80102bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d101      	bne.n	8010262 <remove_chain+0x64>
 801025e:	2302      	movs	r3, #2
 8010260:	e02e      	b.n	80102c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010268:	d101      	bne.n	801026e <remove_chain+0x70>
 801026a:	2301      	movs	r3, #1
 801026c:	e028      	b.n	80102c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801026e:	2200      	movs	r2, #0
 8010270:	68b9      	ldr	r1, [r7, #8]
 8010272:	69b8      	ldr	r0, [r7, #24]
 8010274:	f7ff fedc 	bl	8010030 <put_fat>
 8010278:	4603      	mov	r3, r0
 801027a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801027c:	7ffb      	ldrb	r3, [r7, #31]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <remove_chain+0x88>
 8010282:	7ffb      	ldrb	r3, [r7, #31]
 8010284:	e01c      	b.n	80102c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	695a      	ldr	r2, [r3, #20]
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	3b02      	subs	r3, #2
 8010290:	429a      	cmp	r2, r3
 8010292:	d20b      	bcs.n	80102ac <remove_chain+0xae>
			fs->free_clst++;
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	1c5a      	adds	r2, r3, #1
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	791b      	ldrb	r3, [r3, #4]
 80102a2:	f043 0301 	orr.w	r3, r3, #1
 80102a6:	b2da      	uxtb	r2, r3
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	68ba      	ldr	r2, [r7, #8]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d3c6      	bcc.n	8010248 <remove_chain+0x4a>
 80102ba:	e000      	b.n	80102be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80102bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3720      	adds	r7, #32
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b088      	sub	sp, #32
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10d      	bne.n	80102fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	691b      	ldr	r3, [r3, #16]
 80102e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d004      	beq.n	80102f4 <create_chain+0x2c>
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	699b      	ldr	r3, [r3, #24]
 80102ee:	69ba      	ldr	r2, [r7, #24]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d31b      	bcc.n	801032c <create_chain+0x64>
 80102f4:	2301      	movs	r3, #1
 80102f6:	61bb      	str	r3, [r7, #24]
 80102f8:	e018      	b.n	801032c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff fdf2 	bl	800fee6 <get_fat>
 8010302:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d801      	bhi.n	801030e <create_chain+0x46>
 801030a:	2301      	movs	r3, #1
 801030c:	e070      	b.n	80103f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010314:	d101      	bne.n	801031a <create_chain+0x52>
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	e06a      	b.n	80103f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	699b      	ldr	r3, [r3, #24]
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	429a      	cmp	r2, r3
 8010322:	d201      	bcs.n	8010328 <create_chain+0x60>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	e063      	b.n	80103f0 <create_chain+0x128>
		scl = clst;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	3301      	adds	r3, #1
 8010334:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	699b      	ldr	r3, [r3, #24]
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	429a      	cmp	r2, r3
 801033e:	d307      	bcc.n	8010350 <create_chain+0x88>
				ncl = 2;
 8010340:	2302      	movs	r3, #2
 8010342:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010344:	69fa      	ldr	r2, [r7, #28]
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	429a      	cmp	r2, r3
 801034a:	d901      	bls.n	8010350 <create_chain+0x88>
 801034c:	2300      	movs	r3, #0
 801034e:	e04f      	b.n	80103f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010350:	69f9      	ldr	r1, [r7, #28]
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff fdc7 	bl	800fee6 <get_fat>
 8010358:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00e      	beq.n	801037e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d003      	beq.n	801036e <create_chain+0xa6>
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801036c:	d101      	bne.n	8010372 <create_chain+0xaa>
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	e03e      	b.n	80103f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010372:	69fa      	ldr	r2, [r7, #28]
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	429a      	cmp	r2, r3
 8010378:	d1da      	bne.n	8010330 <create_chain+0x68>
 801037a:	2300      	movs	r3, #0
 801037c:	e038      	b.n	80103f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801037e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010380:	f04f 32ff 	mov.w	r2, #4294967295
 8010384:	69f9      	ldr	r1, [r7, #28]
 8010386:	6938      	ldr	r0, [r7, #16]
 8010388:	f7ff fe52 	bl	8010030 <put_fat>
 801038c:	4603      	mov	r3, r0
 801038e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <create_chain+0xe2>
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d006      	beq.n	80103aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801039c:	69fa      	ldr	r2, [r7, #28]
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6938      	ldr	r0, [r7, #16]
 80103a2:	f7ff fe45 	bl	8010030 <put_fat>
 80103a6:	4603      	mov	r3, r0
 80103a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80103aa:	7dfb      	ldrb	r3, [r7, #23]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d116      	bne.n	80103de <create_chain+0x116>
		fs->last_clst = ncl;
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	69fa      	ldr	r2, [r7, #28]
 80103b4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	695a      	ldr	r2, [r3, #20]
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	3b02      	subs	r3, #2
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d804      	bhi.n	80103ce <create_chain+0x106>
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	695b      	ldr	r3, [r3, #20]
 80103c8:	1e5a      	subs	r2, r3, #1
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	791b      	ldrb	r3, [r3, #4]
 80103d2:	f043 0301 	orr.w	r3, r3, #1
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	711a      	strb	r2, [r3, #4]
 80103dc:	e007      	b.n	80103ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80103de:	7dfb      	ldrb	r3, [r7, #23]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d102      	bne.n	80103ea <create_chain+0x122>
 80103e4:	f04f 33ff 	mov.w	r3, #4294967295
 80103e8:	e000      	b.n	80103ec <create_chain+0x124>
 80103ea:	2301      	movs	r3, #1
 80103ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80103ee:	69fb      	ldr	r3, [r7, #28]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3720      	adds	r7, #32
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b087      	sub	sp, #28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040c:	3304      	adds	r3, #4
 801040e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	0a5b      	lsrs	r3, r3, #9
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	8952      	ldrh	r2, [r2, #10]
 8010418:	fbb3 f3f2 	udiv	r3, r3, r2
 801041c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	1d1a      	adds	r2, r3, #4
 8010422:	613a      	str	r2, [r7, #16]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d101      	bne.n	8010432 <clmt_clust+0x3a>
 801042e:	2300      	movs	r3, #0
 8010430:	e010      	b.n	8010454 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	429a      	cmp	r2, r3
 8010438:	d307      	bcc.n	801044a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801043a:	697a      	ldr	r2, [r7, #20]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	617b      	str	r3, [r7, #20]
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	3304      	adds	r3, #4
 8010446:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010448:	e7e9      	b.n	801041e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801044a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	4413      	add	r3, r2
}
 8010454:	4618      	mov	r0, r3
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010476:	d204      	bcs.n	8010482 <dir_sdi+0x22>
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	f003 031f 	and.w	r3, r3, #31
 801047e:	2b00      	cmp	r3, #0
 8010480:	d001      	beq.n	8010486 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010482:	2302      	movs	r3, #2
 8010484:	e063      	b.n	801054e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	683a      	ldr	r2, [r7, #0]
 801048a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d106      	bne.n	80104a6 <dir_sdi+0x46>
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b02      	cmp	r3, #2
 801049e:	d902      	bls.n	80104a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10c      	bne.n	80104c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	095b      	lsrs	r3, r3, #5
 80104b0:	693a      	ldr	r2, [r7, #16]
 80104b2:	8912      	ldrh	r2, [r2, #8]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d301      	bcc.n	80104bc <dir_sdi+0x5c>
 80104b8:	2302      	movs	r3, #2
 80104ba:	e048      	b.n	801054e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	61da      	str	r2, [r3, #28]
 80104c4:	e029      	b.n	801051a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	895b      	ldrh	r3, [r3, #10]
 80104ca:	025b      	lsls	r3, r3, #9
 80104cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104ce:	e019      	b.n	8010504 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6979      	ldr	r1, [r7, #20]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7ff fd06 	bl	800fee6 <get_fat>
 80104da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e2:	d101      	bne.n	80104e8 <dir_sdi+0x88>
 80104e4:	2301      	movs	r3, #1
 80104e6:	e032      	b.n	801054e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d904      	bls.n	80104f8 <dir_sdi+0x98>
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d301      	bcc.n	80104fc <dir_sdi+0x9c>
 80104f8:	2302      	movs	r3, #2
 80104fa:	e028      	b.n	801054e <dir_sdi+0xee>
			ofs -= csz;
 80104fc:	683a      	ldr	r2, [r7, #0]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	429a      	cmp	r2, r3
 801050a:	d2e1      	bcs.n	80104d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801050c:	6979      	ldr	r1, [r7, #20]
 801050e:	6938      	ldr	r0, [r7, #16]
 8010510:	f7ff fcca 	bl	800fea8 <clust2sect>
 8010514:	4602      	mov	r2, r0
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d101      	bne.n	801052c <dir_sdi+0xcc>
 8010528:	2302      	movs	r3, #2
 801052a:	e010      	b.n	801054e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	69da      	ldr	r2, [r3, #28]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	0a5b      	lsrs	r3, r3, #9
 8010534:	441a      	add	r2, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010546:	441a      	add	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b086      	sub	sp, #24
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	695b      	ldr	r3, [r3, #20]
 801056a:	3320      	adds	r3, #32
 801056c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	69db      	ldr	r3, [r3, #28]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <dir_next+0x28>
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801057c:	d301      	bcc.n	8010582 <dir_next+0x2c>
 801057e:	2304      	movs	r3, #4
 8010580:	e0aa      	b.n	80106d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010588:	2b00      	cmp	r3, #0
 801058a:	f040 8098 	bne.w	80106be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	69db      	ldr	r3, [r3, #28]
 8010592:	1c5a      	adds	r2, r3, #1
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	699b      	ldr	r3, [r3, #24]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d10b      	bne.n	80105b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	095b      	lsrs	r3, r3, #5
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	8912      	ldrh	r2, [r2, #8]
 80105a8:	4293      	cmp	r3, r2
 80105aa:	f0c0 8088 	bcc.w	80106be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2200      	movs	r2, #0
 80105b2:	61da      	str	r2, [r3, #28]
 80105b4:	2304      	movs	r3, #4
 80105b6:	e08f      	b.n	80106d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	0a5b      	lsrs	r3, r3, #9
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	8952      	ldrh	r2, [r2, #10]
 80105c0:	3a01      	subs	r2, #1
 80105c2:	4013      	ands	r3, r2
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d17a      	bne.n	80106be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	4619      	mov	r1, r3
 80105d0:	4610      	mov	r0, r2
 80105d2:	f7ff fc88 	bl	800fee6 <get_fat>
 80105d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d801      	bhi.n	80105e2 <dir_next+0x8c>
 80105de:	2302      	movs	r3, #2
 80105e0:	e07a      	b.n	80106d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e8:	d101      	bne.n	80105ee <dir_next+0x98>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e074      	b.n	80106d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	699b      	ldr	r3, [r3, #24]
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d358      	bcc.n	80106aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d104      	bne.n	8010608 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	61da      	str	r2, [r3, #28]
 8010604:	2304      	movs	r3, #4
 8010606:	e067      	b.n	80106d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	4619      	mov	r1, r3
 8010610:	4610      	mov	r0, r2
 8010612:	f7ff fe59 	bl	80102c8 <create_chain>
 8010616:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <dir_next+0xcc>
 801061e:	2307      	movs	r3, #7
 8010620:	e05a      	b.n	80106d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d101      	bne.n	801062c <dir_next+0xd6>
 8010628:	2302      	movs	r3, #2
 801062a:	e055      	b.n	80106d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010632:	d101      	bne.n	8010638 <dir_next+0xe2>
 8010634:	2301      	movs	r3, #1
 8010636:	e04f      	b.n	80106d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f7ff fb55 	bl	800fce8 <sync_window>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <dir_next+0xf2>
 8010644:	2301      	movs	r3, #1
 8010646:	e047      	b.n	80106d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	3334      	adds	r3, #52	; 0x34
 801064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010650:	2100      	movs	r1, #0
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff f94f 	bl	800f8f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010658:	2300      	movs	r3, #0
 801065a:	613b      	str	r3, [r7, #16]
 801065c:	6979      	ldr	r1, [r7, #20]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f7ff fc22 	bl	800fea8 <clust2sect>
 8010664:	4602      	mov	r2, r0
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	631a      	str	r2, [r3, #48]	; 0x30
 801066a:	e012      	b.n	8010692 <dir_next+0x13c>
						fs->wflag = 1;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2201      	movs	r2, #1
 8010670:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7ff fb38 	bl	800fce8 <sync_window>
 8010678:	4603      	mov	r3, r0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d001      	beq.n	8010682 <dir_next+0x12c>
 801067e:	2301      	movs	r3, #1
 8010680:	e02a      	b.n	80106d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	3301      	adds	r3, #1
 8010686:	613b      	str	r3, [r7, #16]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	631a      	str	r2, [r3, #48]	; 0x30
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	895b      	ldrh	r3, [r3, #10]
 8010696:	461a      	mov	r2, r3
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	4293      	cmp	r3, r2
 801069c:	d3e6      	bcc.n	801066c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	1ad2      	subs	r2, r2, r3
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80106b0:	6979      	ldr	r1, [r7, #20]
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7ff fbf8 	bl	800fea8 <clust2sect>
 80106b8:	4602      	mov	r2, r0
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	68ba      	ldr	r2, [r7, #8]
 80106c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106d0:	441a      	add	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3718      	adds	r7, #24
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80106f0:	2100      	movs	r1, #0
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7ff feb4 	bl	8010460 <dir_sdi>
 80106f8:	4603      	mov	r3, r0
 80106fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106fc:	7dfb      	ldrb	r3, [r7, #23]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d12b      	bne.n	801075a <dir_alloc+0x7a>
		n = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	69db      	ldr	r3, [r3, #28]
 801070a:	4619      	mov	r1, r3
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7ff fb2f 	bl	800fd70 <move_window>
 8010712:	4603      	mov	r3, r0
 8010714:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010716:	7dfb      	ldrb	r3, [r7, #23]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d11d      	bne.n	8010758 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a1b      	ldr	r3, [r3, #32]
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	2be5      	cmp	r3, #229	; 0xe5
 8010724:	d004      	beq.n	8010730 <dir_alloc+0x50>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d107      	bne.n	8010740 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	3301      	adds	r3, #1
 8010734:	613b      	str	r3, [r7, #16]
 8010736:	693a      	ldr	r2, [r7, #16]
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	429a      	cmp	r2, r3
 801073c:	d102      	bne.n	8010744 <dir_alloc+0x64>
 801073e:	e00c      	b.n	801075a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010740:	2300      	movs	r3, #0
 8010742:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010744:	2101      	movs	r1, #1
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7ff ff05 	bl	8010556 <dir_next>
 801074c:	4603      	mov	r3, r0
 801074e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010750:	7dfb      	ldrb	r3, [r7, #23]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d0d7      	beq.n	8010706 <dir_alloc+0x26>
 8010756:	e000      	b.n	801075a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010758:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	2b04      	cmp	r3, #4
 801075e:	d101      	bne.n	8010764 <dir_alloc+0x84>
 8010760:	2307      	movs	r3, #7
 8010762:	75fb      	strb	r3, [r7, #23]
	return res;
 8010764:	7dfb      	ldrb	r3, [r7, #23]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	331a      	adds	r3, #26
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff f817 	bl	800f7b0 <ld_word>
 8010782:	4603      	mov	r3, r0
 8010784:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	2b03      	cmp	r3, #3
 801078c:	d109      	bne.n	80107a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	3314      	adds	r3, #20
 8010792:	4618      	mov	r0, r3
 8010794:	f7ff f80c 	bl	800f7b0 <ld_word>
 8010798:	4603      	mov	r3, r0
 801079a:	041b      	lsls	r3, r3, #16
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	4313      	orrs	r3, r2
 80107a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80107a2:	68fb      	ldr	r3, [r7, #12]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	331a      	adds	r3, #26
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	b292      	uxth	r2, r2
 80107c0:	4611      	mov	r1, r2
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff f82f 	bl	800f826 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b03      	cmp	r3, #3
 80107ce:	d109      	bne.n	80107e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	f103 0214 	add.w	r2, r3, #20
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	0c1b      	lsrs	r3, r3, #16
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4619      	mov	r1, r3
 80107de:	4610      	mov	r0, r2
 80107e0:	f7ff f821 	bl	800f826 <st_word>
	}
}
 80107e4:	bf00      	nop
 80107e6:	3710      	adds	r7, #16
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80107f6:	2304      	movs	r3, #4
 80107f8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010800:	e03c      	b.n	801087c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	69db      	ldr	r3, [r3, #28]
 8010806:	4619      	mov	r1, r3
 8010808:	6938      	ldr	r0, [r7, #16]
 801080a:	f7ff fab1 	bl	800fd70 <move_window>
 801080e:	4603      	mov	r3, r0
 8010810:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d136      	bne.n	8010886 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a1b      	ldr	r3, [r3, #32]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010820:	7bfb      	ldrb	r3, [r7, #15]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d102      	bne.n	801082c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010826:	2304      	movs	r3, #4
 8010828:	75fb      	strb	r3, [r7, #23]
 801082a:	e031      	b.n	8010890 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6a1b      	ldr	r3, [r3, #32]
 8010830:	330b      	adds	r3, #11
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010838:	73bb      	strb	r3, [r7, #14]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	7bba      	ldrb	r2, [r7, #14]
 801083e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010840:	7bfb      	ldrb	r3, [r7, #15]
 8010842:	2be5      	cmp	r3, #229	; 0xe5
 8010844:	d011      	beq.n	801086a <dir_read+0x7e>
 8010846:	7bfb      	ldrb	r3, [r7, #15]
 8010848:	2b2e      	cmp	r3, #46	; 0x2e
 801084a:	d00e      	beq.n	801086a <dir_read+0x7e>
 801084c:	7bbb      	ldrb	r3, [r7, #14]
 801084e:	2b0f      	cmp	r3, #15
 8010850:	d00b      	beq.n	801086a <dir_read+0x7e>
 8010852:	7bbb      	ldrb	r3, [r7, #14]
 8010854:	f023 0320 	bic.w	r3, r3, #32
 8010858:	2b08      	cmp	r3, #8
 801085a:	bf0c      	ite	eq
 801085c:	2301      	moveq	r3, #1
 801085e:	2300      	movne	r3, #0
 8010860:	b2db      	uxtb	r3, r3
 8010862:	461a      	mov	r2, r3
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	4293      	cmp	r3, r2
 8010868:	d00f      	beq.n	801088a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801086a:	2100      	movs	r1, #0
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff fe72 	bl	8010556 <dir_next>
 8010872:	4603      	mov	r3, r0
 8010874:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d108      	bne.n	801088e <dir_read+0xa2>
	while (dp->sect) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	69db      	ldr	r3, [r3, #28]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1be      	bne.n	8010802 <dir_read+0x16>
 8010884:	e004      	b.n	8010890 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010886:	bf00      	nop
 8010888:	e002      	b.n	8010890 <dir_read+0xa4>
				break;
 801088a:	bf00      	nop
 801088c:	e000      	b.n	8010890 <dir_read+0xa4>
		if (res != FR_OK) break;
 801088e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010890:	7dfb      	ldrb	r3, [r7, #23]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d002      	beq.n	801089c <dir_read+0xb0>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	61da      	str	r2, [r3, #28]
	return res;
 801089c:	7dfb      	ldrb	r3, [r7, #23]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3718      	adds	r7, #24
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b086      	sub	sp, #24
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80108b4:	2100      	movs	r1, #0
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f7ff fdd2 	bl	8010460 <dir_sdi>
 80108bc:	4603      	mov	r3, r0
 80108be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80108c0:	7dfb      	ldrb	r3, [r7, #23]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <dir_find+0x24>
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	e03e      	b.n	8010948 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	4619      	mov	r1, r3
 80108d0:	6938      	ldr	r0, [r7, #16]
 80108d2:	f7ff fa4d 	bl	800fd70 <move_window>
 80108d6:	4603      	mov	r3, r0
 80108d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108da:	7dfb      	ldrb	r3, [r7, #23]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d12f      	bne.n	8010940 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a1b      	ldr	r3, [r3, #32]
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80108e8:	7bfb      	ldrb	r3, [r7, #15]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d102      	bne.n	80108f4 <dir_find+0x4e>
 80108ee:	2304      	movs	r3, #4
 80108f0:	75fb      	strb	r3, [r7, #23]
 80108f2:	e028      	b.n	8010946 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	330b      	adds	r3, #11
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010900:	b2da      	uxtb	r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6a1b      	ldr	r3, [r3, #32]
 801090a:	330b      	adds	r3, #11
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	f003 0308 	and.w	r3, r3, #8
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10a      	bne.n	801092c <dir_find+0x86>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6a18      	ldr	r0, [r3, #32]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	3324      	adds	r3, #36	; 0x24
 801091e:	220b      	movs	r2, #11
 8010920:	4619      	mov	r1, r3
 8010922:	f7ff f802 	bl	800f92a <mem_cmp>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00b      	beq.n	8010944 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff fe11 	bl	8010556 <dir_next>
 8010934:	4603      	mov	r3, r0
 8010936:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010938:	7dfb      	ldrb	r3, [r7, #23]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d0c5      	beq.n	80108ca <dir_find+0x24>
 801093e:	e002      	b.n	8010946 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010940:	bf00      	nop
 8010942:	e000      	b.n	8010946 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010944:	bf00      	nop

	return res;
 8010946:	7dfb      	ldrb	r3, [r7, #23]
}
 8010948:	4618      	mov	r0, r3
 801094a:	3718      	adds	r7, #24
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801095e:	2101      	movs	r1, #1
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff febd 	bl	80106e0 <dir_alloc>
 8010966:	4603      	mov	r3, r0
 8010968:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801096a:	7bfb      	ldrb	r3, [r7, #15]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d11c      	bne.n	80109aa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	4619      	mov	r1, r3
 8010976:	68b8      	ldr	r0, [r7, #8]
 8010978:	f7ff f9fa 	bl	800fd70 <move_window>
 801097c:	4603      	mov	r3, r0
 801097e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d111      	bne.n	80109aa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	2220      	movs	r2, #32
 801098c:	2100      	movs	r1, #0
 801098e:	4618      	mov	r0, r3
 8010990:	f7fe ffb1 	bl	800f8f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a18      	ldr	r0, [r3, #32]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3324      	adds	r3, #36	; 0x24
 801099c:	220b      	movs	r2, #11
 801099e:	4619      	mov	r1, r3
 80109a0:	f7fe ff88 	bl	800f8b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2201      	movs	r2, #1
 80109a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2200      	movs	r2, #0
 80109c2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d04e      	beq.n	8010a6a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80109cc:	2300      	movs	r3, #0
 80109ce:	613b      	str	r3, [r7, #16]
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80109d4:	e021      	b.n	8010a1a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a1a      	ldr	r2, [r3, #32]
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	1c59      	adds	r1, r3, #1
 80109de:	6179      	str	r1, [r7, #20]
 80109e0:	4413      	add	r3, r2
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	2b20      	cmp	r3, #32
 80109ea:	d100      	bne.n	80109ee <get_fileinfo+0x3a>
 80109ec:	e015      	b.n	8010a1a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	2b05      	cmp	r3, #5
 80109f2:	d101      	bne.n	80109f8 <get_fileinfo+0x44>
 80109f4:	23e5      	movs	r3, #229	; 0xe5
 80109f6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	2b09      	cmp	r3, #9
 80109fc:	d106      	bne.n	8010a0c <get_fileinfo+0x58>
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	613a      	str	r2, [r7, #16]
 8010a04:	683a      	ldr	r2, [r7, #0]
 8010a06:	4413      	add	r3, r2
 8010a08:	222e      	movs	r2, #46	; 0x2e
 8010a0a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	1c5a      	adds	r2, r3, #1
 8010a10:	613a      	str	r2, [r7, #16]
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	4413      	add	r3, r2
 8010a16:	7bfa      	ldrb	r2, [r7, #15]
 8010a18:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	2b0a      	cmp	r3, #10
 8010a1e:	d9da      	bls.n	80109d6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	4413      	add	r3, r2
 8010a26:	3309      	adds	r3, #9
 8010a28:	2200      	movs	r2, #0
 8010a2a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a1b      	ldr	r3, [r3, #32]
 8010a30:	7ada      	ldrb	r2, [r3, #11]
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a1b      	ldr	r3, [r3, #32]
 8010a3a:	331c      	adds	r3, #28
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe fecf 	bl	800f7e0 <ld_dword>
 8010a42:	4602      	mov	r2, r0
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a1b      	ldr	r3, [r3, #32]
 8010a4c:	3316      	adds	r3, #22
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fe fec6 	bl	800f7e0 <ld_dword>
 8010a54:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	80da      	strh	r2, [r3, #6]
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	0c1b      	lsrs	r3, r3, #16
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	809a      	strh	r2, [r3, #4]
 8010a68:	e000      	b.n	8010a6c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010a6a:	bf00      	nop
}
 8010a6c:	3718      	adds	r7, #24
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
	...

08010a74 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	1c59      	adds	r1, r3, #1
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	6011      	str	r1, [r2, #0]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a8a:	89fb      	ldrh	r3, [r7, #14]
 8010a8c:	2b60      	cmp	r3, #96	; 0x60
 8010a8e:	d905      	bls.n	8010a9c <get_achar+0x28>
 8010a90:	89fb      	ldrh	r3, [r7, #14]
 8010a92:	2b7a      	cmp	r3, #122	; 0x7a
 8010a94:	d802      	bhi.n	8010a9c <get_achar+0x28>
 8010a96:	89fb      	ldrh	r3, [r7, #14]
 8010a98:	3b20      	subs	r3, #32
 8010a9a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a9c:	89fb      	ldrh	r3, [r7, #14]
 8010a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8010aa0:	d904      	bls.n	8010aac <get_achar+0x38>
 8010aa2:	89fb      	ldrh	r3, [r7, #14]
 8010aa4:	3b80      	subs	r3, #128	; 0x80
 8010aa6:	4a05      	ldr	r2, [pc, #20]	; (8010abc <get_achar+0x48>)
 8010aa8:	5cd3      	ldrb	r3, [r2, r3]
 8010aaa:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8010aac:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	0801a008 	.word	0x0801a008

08010ac0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b08a      	sub	sp, #40	; 0x28
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	607a      	str	r2, [r7, #4]
 8010acc:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010ace:	e009      	b.n	8010ae4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010ad0:	f107 0308 	add.w	r3, r7, #8
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7ff ffcd 	bl	8010a74 <get_achar>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d101      	bne.n	8010ae4 <pattern_matching+0x24>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e064      	b.n	8010bae <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	1e5a      	subs	r2, r3, #1
 8010ae8:	607a      	str	r2, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1f0      	bne.n	8010ad0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d104      	bne.n	8010b00 <pattern_matching+0x40>
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <pattern_matching+0x40>
 8010afc:	2301      	movs	r3, #1
 8010afe:	e056      	b.n	8010bae <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	617b      	str	r3, [r7, #20]
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	2b3f      	cmp	r3, #63	; 0x3f
 8010b0e:	d003      	beq.n	8010b18 <pattern_matching+0x58>
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	2b2a      	cmp	r3, #42	; 0x2a
 8010b16:	d126      	bne.n	8010b66 <pattern_matching+0xa6>
				nm = nx = 0;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	61fb      	str	r3, [r7, #28]
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	617a      	str	r2, [r7, #20]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	2b3f      	cmp	r3, #63	; 0x3f
 8010b2a:	d103      	bne.n	8010b34 <pattern_matching+0x74>
 8010b2c:	6a3b      	ldr	r3, [r7, #32]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	623b      	str	r3, [r7, #32]
 8010b32:	e001      	b.n	8010b38 <pattern_matching+0x78>
 8010b34:	2301      	movs	r3, #1
 8010b36:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	2b3f      	cmp	r3, #63	; 0x3f
 8010b3e:	d0ef      	beq.n	8010b20 <pattern_matching+0x60>
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	2b2a      	cmp	r3, #42	; 0x2a
 8010b46:	d0eb      	beq.n	8010b20 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010b48:	6978      	ldr	r0, [r7, #20]
 8010b4a:	6939      	ldr	r1, [r7, #16]
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	f7ff ffb6 	bl	8010ac0 <pattern_matching>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <pattern_matching+0x9e>
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e027      	b.n	8010bae <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010b64:	e017      	b.n	8010b96 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8010b66:	f107 0314 	add.w	r3, r7, #20
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff ff82 	bl	8010a74 <get_achar>
 8010b70:	4603      	mov	r3, r0
 8010b72:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8010b74:	f107 0310 	add.w	r3, r7, #16
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff ff7b 	bl	8010a74 <get_achar>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8010b82:	8b7a      	ldrh	r2, [r7, #26]
 8010b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d104      	bne.n	8010b94 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8010b8a:	8b7b      	ldrh	r3, [r7, #26]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1bb      	bne.n	8010b08 <pattern_matching+0x48>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e00c      	b.n	8010bae <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8010b94:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8010b96:	f107 0308 	add.w	r3, r7, #8
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7ff ff6a 	bl	8010a74 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d002      	beq.n	8010bac <pattern_matching+0xec>
 8010ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1a9      	bne.n	8010b00 <pattern_matching+0x40>

	return 0;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3728      	adds	r7, #40	; 0x28
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
	...

08010bb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b088      	sub	sp, #32
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	60fb      	str	r3, [r7, #12]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3324      	adds	r3, #36	; 0x24
 8010bcc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010bce:	220b      	movs	r2, #11
 8010bd0:	2120      	movs	r1, #32
 8010bd2:	68b8      	ldr	r0, [r7, #8]
 8010bd4:	f7fe fe8f 	bl	800f8f6 <mem_set>
	si = i = 0; ni = 8;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	613b      	str	r3, [r7, #16]
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	617b      	str	r3, [r7, #20]
 8010be0:	2308      	movs	r3, #8
 8010be2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	617a      	str	r2, [r7, #20]
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	4413      	add	r3, r2
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bf2:	7ffb      	ldrb	r3, [r7, #31]
 8010bf4:	2b20      	cmp	r3, #32
 8010bf6:	d94e      	bls.n	8010c96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010bf8:	7ffb      	ldrb	r3, [r7, #31]
 8010bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8010bfc:	d006      	beq.n	8010c0c <create_name+0x54>
 8010bfe:	7ffb      	ldrb	r3, [r7, #31]
 8010c00:	2b5c      	cmp	r3, #92	; 0x5c
 8010c02:	d110      	bne.n	8010c26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010c04:	e002      	b.n	8010c0c <create_name+0x54>
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	617b      	str	r3, [r7, #20]
 8010c0c:	68fa      	ldr	r2, [r7, #12]
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	4413      	add	r3, r2
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b2f      	cmp	r3, #47	; 0x2f
 8010c16:	d0f6      	beq.n	8010c06 <create_name+0x4e>
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	2b5c      	cmp	r3, #92	; 0x5c
 8010c22:	d0f0      	beq.n	8010c06 <create_name+0x4e>
			break;
 8010c24:	e038      	b.n	8010c98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010c26:	7ffb      	ldrb	r3, [r7, #31]
 8010c28:	2b2e      	cmp	r3, #46	; 0x2e
 8010c2a:	d003      	beq.n	8010c34 <create_name+0x7c>
 8010c2c:	693a      	ldr	r2, [r7, #16]
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d30c      	bcc.n	8010c4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	2b0b      	cmp	r3, #11
 8010c38:	d002      	beq.n	8010c40 <create_name+0x88>
 8010c3a:	7ffb      	ldrb	r3, [r7, #31]
 8010c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8010c3e:	d001      	beq.n	8010c44 <create_name+0x8c>
 8010c40:	2306      	movs	r3, #6
 8010c42:	e044      	b.n	8010cce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010c44:	2308      	movs	r3, #8
 8010c46:	613b      	str	r3, [r7, #16]
 8010c48:	230b      	movs	r3, #11
 8010c4a:	61bb      	str	r3, [r7, #24]
			continue;
 8010c4c:	e022      	b.n	8010c94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	da04      	bge.n	8010c60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010c56:	7ffb      	ldrb	r3, [r7, #31]
 8010c58:	3b80      	subs	r3, #128	; 0x80
 8010c5a:	4a1f      	ldr	r2, [pc, #124]	; (8010cd8 <create_name+0x120>)
 8010c5c:	5cd3      	ldrb	r3, [r2, r3]
 8010c5e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010c60:	7ffb      	ldrb	r3, [r7, #31]
 8010c62:	4619      	mov	r1, r3
 8010c64:	481d      	ldr	r0, [pc, #116]	; (8010cdc <create_name+0x124>)
 8010c66:	f7fe fe87 	bl	800f978 <chk_chr>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <create_name+0xbc>
 8010c70:	2306      	movs	r3, #6
 8010c72:	e02c      	b.n	8010cce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010c74:	7ffb      	ldrb	r3, [r7, #31]
 8010c76:	2b60      	cmp	r3, #96	; 0x60
 8010c78:	d905      	bls.n	8010c86 <create_name+0xce>
 8010c7a:	7ffb      	ldrb	r3, [r7, #31]
 8010c7c:	2b7a      	cmp	r3, #122	; 0x7a
 8010c7e:	d802      	bhi.n	8010c86 <create_name+0xce>
 8010c80:	7ffb      	ldrb	r3, [r7, #31]
 8010c82:	3b20      	subs	r3, #32
 8010c84:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	613a      	str	r2, [r7, #16]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	4413      	add	r3, r2
 8010c90:	7ffa      	ldrb	r2, [r7, #31]
 8010c92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010c94:	e7a6      	b.n	8010be4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	441a      	add	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <create_name+0xf4>
 8010ca8:	2306      	movs	r3, #6
 8010caa:	e010      	b.n	8010cce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	2be5      	cmp	r3, #229	; 0xe5
 8010cb2:	d102      	bne.n	8010cba <create_name+0x102>
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	2205      	movs	r2, #5
 8010cb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010cba:	7ffb      	ldrb	r3, [r7, #31]
 8010cbc:	2b20      	cmp	r3, #32
 8010cbe:	d801      	bhi.n	8010cc4 <create_name+0x10c>
 8010cc0:	2204      	movs	r2, #4
 8010cc2:	e000      	b.n	8010cc6 <create_name+0x10e>
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	330b      	adds	r3, #11
 8010cca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010ccc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3720      	adds	r7, #32
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	0801a008 	.word	0x0801a008
 8010cdc:	08019e34 	.word	0x08019e34

08010ce0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b086      	sub	sp, #24
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010cf4:	e002      	b.n	8010cfc <follow_path+0x1c>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	603b      	str	r3, [r7, #0]
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	2b2f      	cmp	r3, #47	; 0x2f
 8010d02:	d0f8      	beq.n	8010cf6 <follow_path+0x16>
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	2b5c      	cmp	r3, #92	; 0x5c
 8010d0a:	d0f4      	beq.n	8010cf6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	2b1f      	cmp	r3, #31
 8010d18:	d80a      	bhi.n	8010d30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2280      	movs	r2, #128	; 0x80
 8010d1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010d22:	2100      	movs	r1, #0
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7ff fb9b 	bl	8010460 <dir_sdi>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	75fb      	strb	r3, [r7, #23]
 8010d2e:	e043      	b.n	8010db8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d30:	463b      	mov	r3, r7
 8010d32:	4619      	mov	r1, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff ff3f 	bl	8010bb8 <create_name>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d134      	bne.n	8010dae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7ff fdae 	bl	80108a6 <dir_find>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010d56:	7dfb      	ldrb	r3, [r7, #23]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00a      	beq.n	8010d72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010d5c:	7dfb      	ldrb	r3, [r7, #23]
 8010d5e:	2b04      	cmp	r3, #4
 8010d60:	d127      	bne.n	8010db2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010d62:	7afb      	ldrb	r3, [r7, #11]
 8010d64:	f003 0304 	and.w	r3, r3, #4
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d122      	bne.n	8010db2 <follow_path+0xd2>
 8010d6c:	2305      	movs	r3, #5
 8010d6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010d70:	e01f      	b.n	8010db2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d72:	7afb      	ldrb	r3, [r7, #11]
 8010d74:	f003 0304 	and.w	r3, r3, #4
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d11c      	bne.n	8010db6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	799b      	ldrb	r3, [r3, #6]
 8010d80:	f003 0310 	and.w	r3, r3, #16
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d102      	bne.n	8010d8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010d88:	2305      	movs	r3, #5
 8010d8a:	75fb      	strb	r3, [r7, #23]
 8010d8c:	e014      	b.n	8010db8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	695b      	ldr	r3, [r3, #20]
 8010d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d9c:	4413      	add	r3, r2
 8010d9e:	4619      	mov	r1, r3
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f7ff fce4 	bl	801076e <ld_clust>
 8010da6:	4602      	mov	r2, r0
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010dac:	e7c0      	b.n	8010d30 <follow_path+0x50>
			if (res != FR_OK) break;
 8010dae:	bf00      	nop
 8010db0:	e002      	b.n	8010db8 <follow_path+0xd8>
				break;
 8010db2:	bf00      	nop
 8010db4:	e000      	b.n	8010db8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010db6:	bf00      	nop
			}
		}
	}

	return res;
 8010db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3718      	adds	r7, #24
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010dc2:	b480      	push	{r7}
 8010dc4:	b087      	sub	sp, #28
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010dca:	f04f 33ff 	mov.w	r3, #4294967295
 8010dce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d031      	beq.n	8010e3c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	617b      	str	r3, [r7, #20]
 8010dde:	e002      	b.n	8010de6 <get_ldnumber+0x24>
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	3301      	adds	r3, #1
 8010de4:	617b      	str	r3, [r7, #20]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b20      	cmp	r3, #32
 8010dec:	d903      	bls.n	8010df6 <get_ldnumber+0x34>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b3a      	cmp	r3, #58	; 0x3a
 8010df4:	d1f4      	bne.n	8010de0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2b3a      	cmp	r3, #58	; 0x3a
 8010dfc:	d11c      	bne.n	8010e38 <get_ldnumber+0x76>
			tp = *path;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	60fa      	str	r2, [r7, #12]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	3b30      	subs	r3, #48	; 0x30
 8010e0e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	2b09      	cmp	r3, #9
 8010e14:	d80e      	bhi.n	8010e34 <get_ldnumber+0x72>
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d10a      	bne.n	8010e34 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d107      	bne.n	8010e34 <get_ldnumber+0x72>
					vol = (int)i;
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	e002      	b.n	8010e3e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010e38:	2300      	movs	r3, #0
 8010e3a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010e3c:	693b      	ldr	r3, [r7, #16]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	371c      	adds	r7, #28
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
	...

08010e4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	70da      	strb	r2, [r3, #3]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e62:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7fe ff82 	bl	800fd70 <move_window>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d001      	beq.n	8010e76 <check_fs+0x2a>
 8010e72:	2304      	movs	r3, #4
 8010e74:	e038      	b.n	8010ee8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	3334      	adds	r3, #52	; 0x34
 8010e7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fe fc96 	bl	800f7b0 <ld_word>
 8010e84:	4603      	mov	r3, r0
 8010e86:	461a      	mov	r2, r3
 8010e88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d001      	beq.n	8010e94 <check_fs+0x48>
 8010e90:	2303      	movs	r3, #3
 8010e92:	e029      	b.n	8010ee8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e9a:	2be9      	cmp	r3, #233	; 0xe9
 8010e9c:	d009      	beq.n	8010eb2 <check_fs+0x66>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ea4:	2beb      	cmp	r3, #235	; 0xeb
 8010ea6:	d11e      	bne.n	8010ee6 <check_fs+0x9a>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010eae:	2b90      	cmp	r3, #144	; 0x90
 8010eb0:	d119      	bne.n	8010ee6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	3334      	adds	r3, #52	; 0x34
 8010eb6:	3336      	adds	r3, #54	; 0x36
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7fe fc91 	bl	800f7e0 <ld_dword>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ec4:	4a0a      	ldr	r2, [pc, #40]	; (8010ef0 <check_fs+0xa4>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d101      	bne.n	8010ece <check_fs+0x82>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e00c      	b.n	8010ee8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	3334      	adds	r3, #52	; 0x34
 8010ed2:	3352      	adds	r3, #82	; 0x52
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe fc83 	bl	800f7e0 <ld_dword>
 8010eda:	4602      	mov	r2, r0
 8010edc:	4b05      	ldr	r3, [pc, #20]	; (8010ef4 <check_fs+0xa8>)
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d101      	bne.n	8010ee6 <check_fs+0x9a>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	e000      	b.n	8010ee8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010ee6:	2302      	movs	r3, #2
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	00544146 	.word	0x00544146
 8010ef4:	33544146 	.word	0x33544146

08010ef8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b096      	sub	sp, #88	; 0x58
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4613      	mov	r3, r2
 8010f04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f7ff ff58 	bl	8010dc2 <get_ldnumber>
 8010f12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	da01      	bge.n	8010f1e <find_volume+0x26>
 8010f1a:	230b      	movs	r3, #11
 8010f1c:	e236      	b.n	801138c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010f1e:	4aac      	ldr	r2, [pc, #688]	; (80111d0 <find_volume+0x2d8>)
 8010f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <find_volume+0x3a>
 8010f2e:	230c      	movs	r3, #12
 8010f30:	e22c      	b.n	801138c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010f32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f34:	f7fe fd3b 	bl	800f9ae <lock_fs>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d101      	bne.n	8010f42 <find_volume+0x4a>
 8010f3e:	230f      	movs	r3, #15
 8010f40:	e224      	b.n	801138c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010f48:	79fb      	ldrb	r3, [r7, #7]
 8010f4a:	f023 0301 	bic.w	r3, r3, #1
 8010f4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d01a      	beq.n	8010f8e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	785b      	ldrb	r3, [r3, #1]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fb89 	bl	800f674 <disk_status>
 8010f62:	4603      	mov	r3, r0
 8010f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010f68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d10c      	bne.n	8010f8e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010f74:	79fb      	ldrb	r3, [r7, #7]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d007      	beq.n	8010f8a <find_volume+0x92>
 8010f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f7e:	f003 0304 	and.w	r3, r3, #4
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010f86:	230a      	movs	r3, #10
 8010f88:	e200      	b.n	801138c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e1fe      	b.n	801138c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	2200      	movs	r2, #0
 8010f92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f96:	b2da      	uxtb	r2, r3
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	785b      	ldrb	r3, [r3, #1]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7fe fb81 	bl	800f6a8 <disk_initialize>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010fac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d001      	beq.n	8010fbc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e1e7      	b.n	801138c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d007      	beq.n	8010fd2 <find_volume+0xda>
 8010fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fc6:	f003 0304 	and.w	r3, r3, #4
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010fce:	230a      	movs	r3, #10
 8010fd0:	e1dc      	b.n	801138c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010fd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fda:	f7ff ff37 	bl	8010e4c <check_fs>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d14b      	bne.n	8011084 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010fec:	2300      	movs	r3, #0
 8010fee:	643b      	str	r3, [r7, #64]	; 0x40
 8010ff0:	e01f      	b.n	8011032 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffa:	011b      	lsls	r3, r3, #4
 8010ffc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011000:	4413      	add	r3, r2
 8011002:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	3304      	adds	r3, #4
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d006      	beq.n	801101c <find_volume+0x124>
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	3308      	adds	r3, #8
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fbe4 	bl	800f7e0 <ld_dword>
 8011018:	4602      	mov	r2, r0
 801101a:	e000      	b.n	801101e <find_volume+0x126>
 801101c:	2200      	movs	r2, #0
 801101e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011026:	440b      	add	r3, r1
 8011028:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801102c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801102e:	3301      	adds	r3, #1
 8011030:	643b      	str	r3, [r7, #64]	; 0x40
 8011032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011034:	2b03      	cmp	r3, #3
 8011036:	d9dc      	bls.n	8010ff2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011038:	2300      	movs	r3, #0
 801103a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801103e:	2b00      	cmp	r3, #0
 8011040:	d002      	beq.n	8011048 <find_volume+0x150>
 8011042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011044:	3b01      	subs	r3, #1
 8011046:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011050:	4413      	add	r3, r2
 8011052:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011056:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801105a:	2b00      	cmp	r3, #0
 801105c:	d005      	beq.n	801106a <find_volume+0x172>
 801105e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011062:	f7ff fef3 	bl	8010e4c <check_fs>
 8011066:	4603      	mov	r3, r0
 8011068:	e000      	b.n	801106c <find_volume+0x174>
 801106a:	2303      	movs	r3, #3
 801106c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011074:	2b01      	cmp	r3, #1
 8011076:	d905      	bls.n	8011084 <find_volume+0x18c>
 8011078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801107a:	3301      	adds	r3, #1
 801107c:	643b      	str	r3, [r7, #64]	; 0x40
 801107e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011080:	2b03      	cmp	r3, #3
 8011082:	d9e1      	bls.n	8011048 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011088:	2b04      	cmp	r3, #4
 801108a:	d101      	bne.n	8011090 <find_volume+0x198>
 801108c:	2301      	movs	r3, #1
 801108e:	e17d      	b.n	801138c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011094:	2b01      	cmp	r3, #1
 8011096:	d901      	bls.n	801109c <find_volume+0x1a4>
 8011098:	230d      	movs	r3, #13
 801109a:	e177      	b.n	801138c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	3334      	adds	r3, #52	; 0x34
 80110a0:	330b      	adds	r3, #11
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fb84 	bl	800f7b0 <ld_word>
 80110a8:	4603      	mov	r3, r0
 80110aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ae:	d001      	beq.n	80110b4 <find_volume+0x1bc>
 80110b0:	230d      	movs	r3, #13
 80110b2:	e16b      	b.n	801138c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80110b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b6:	3334      	adds	r3, #52	; 0x34
 80110b8:	3316      	adds	r3, #22
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fe fb78 	bl	800f7b0 <ld_word>
 80110c0:	4603      	mov	r3, r0
 80110c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80110c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d106      	bne.n	80110d8 <find_volume+0x1e0>
 80110ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110cc:	3334      	adds	r3, #52	; 0x34
 80110ce:	3324      	adds	r3, #36	; 0x24
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe fb85 	bl	800f7e0 <ld_dword>
 80110d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80110d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80110de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80110e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ea:	789b      	ldrb	r3, [r3, #2]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d005      	beq.n	80110fc <find_volume+0x204>
 80110f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f2:	789b      	ldrb	r3, [r3, #2]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d001      	beq.n	80110fc <find_volume+0x204>
 80110f8:	230d      	movs	r3, #13
 80110fa:	e147      	b.n	801138c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	461a      	mov	r2, r3
 8011102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011104:	fb02 f303 	mul.w	r3, r2, r3
 8011108:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011110:	b29a      	uxth	r2, r3
 8011112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011114:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	895b      	ldrh	r3, [r3, #10]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d008      	beq.n	8011130 <find_volume+0x238>
 801111e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011120:	895b      	ldrh	r3, [r3, #10]
 8011122:	461a      	mov	r2, r3
 8011124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011126:	895b      	ldrh	r3, [r3, #10]
 8011128:	3b01      	subs	r3, #1
 801112a:	4013      	ands	r3, r2
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <find_volume+0x23c>
 8011130:	230d      	movs	r3, #13
 8011132:	e12b      	b.n	801138c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011136:	3334      	adds	r3, #52	; 0x34
 8011138:	3311      	adds	r3, #17
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fb38 	bl	800f7b0 <ld_word>
 8011140:	4603      	mov	r3, r0
 8011142:	461a      	mov	r2, r3
 8011144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011146:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	891b      	ldrh	r3, [r3, #8]
 801114c:	f003 030f 	and.w	r3, r3, #15
 8011150:	b29b      	uxth	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <find_volume+0x262>
 8011156:	230d      	movs	r3, #13
 8011158:	e118      	b.n	801138c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801115a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115c:	3334      	adds	r3, #52	; 0x34
 801115e:	3313      	adds	r3, #19
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe fb25 	bl	800f7b0 <ld_word>
 8011166:	4603      	mov	r3, r0
 8011168:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801116a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801116c:	2b00      	cmp	r3, #0
 801116e:	d106      	bne.n	801117e <find_volume+0x286>
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	3334      	adds	r3, #52	; 0x34
 8011174:	3320      	adds	r3, #32
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fb32 	bl	800f7e0 <ld_dword>
 801117c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	3334      	adds	r3, #52	; 0x34
 8011182:	330e      	adds	r3, #14
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe fb13 	bl	800f7b0 <ld_word>
 801118a:	4603      	mov	r3, r0
 801118c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801118e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <find_volume+0x2a0>
 8011194:	230d      	movs	r3, #13
 8011196:	e0f9      	b.n	801138c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801119c:	4413      	add	r3, r2
 801119e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111a0:	8912      	ldrh	r2, [r2, #8]
 80111a2:	0912      	lsrs	r2, r2, #4
 80111a4:	b292      	uxth	r2, r2
 80111a6:	4413      	add	r3, r2
 80111a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80111aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d201      	bcs.n	80111b6 <find_volume+0x2be>
 80111b2:	230d      	movs	r3, #13
 80111b4:	e0ea      	b.n	801138c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80111b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111be:	8952      	ldrh	r2, [r2, #10]
 80111c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80111c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d103      	bne.n	80111d4 <find_volume+0x2dc>
 80111cc:	230d      	movs	r3, #13
 80111ce:	e0dd      	b.n	801138c <find_volume+0x494>
 80111d0:	200002f8 	.word	0x200002f8
		fmt = FS_FAT32;
 80111d4:	2303      	movs	r3, #3
 80111d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80111da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d802      	bhi.n	80111ea <find_volume+0x2f2>
 80111e4:	2302      	movs	r3, #2
 80111e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d802      	bhi.n	80111fa <find_volume+0x302>
 80111f4:	2301      	movs	r3, #1
 80111f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	1c9a      	adds	r2, r3, #2
 80111fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011200:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011206:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011208:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801120a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801120c:	441a      	add	r2, r3
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011216:	441a      	add	r2, r3
 8011218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801121c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011220:	2b03      	cmp	r3, #3
 8011222:	d11e      	bne.n	8011262 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	3334      	adds	r3, #52	; 0x34
 8011228:	332a      	adds	r3, #42	; 0x2a
 801122a:	4618      	mov	r0, r3
 801122c:	f7fe fac0 	bl	800f7b0 <ld_word>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <find_volume+0x342>
 8011236:	230d      	movs	r3, #13
 8011238:	e0a8      	b.n	801138c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123c:	891b      	ldrh	r3, [r3, #8]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <find_volume+0x34e>
 8011242:	230d      	movs	r3, #13
 8011244:	e0a2      	b.n	801138c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011248:	3334      	adds	r3, #52	; 0x34
 801124a:	332c      	adds	r3, #44	; 0x2c
 801124c:	4618      	mov	r0, r3
 801124e:	f7fe fac7 	bl	800f7e0 <ld_dword>
 8011252:	4602      	mov	r2, r0
 8011254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011256:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	647b      	str	r3, [r7, #68]	; 0x44
 8011260:	e01f      	b.n	80112a2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	891b      	ldrh	r3, [r3, #8]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d101      	bne.n	801126e <find_volume+0x376>
 801126a:	230d      	movs	r3, #13
 801126c:	e08e      	b.n	801138c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011274:	441a      	add	r2, r3
 8011276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011278:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801127a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801127e:	2b02      	cmp	r3, #2
 8011280:	d103      	bne.n	801128a <find_volume+0x392>
 8011282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011284:	699b      	ldr	r3, [r3, #24]
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	e00a      	b.n	80112a0 <find_volume+0x3a8>
 801128a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128c:	699a      	ldr	r2, [r3, #24]
 801128e:	4613      	mov	r3, r2
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	4413      	add	r3, r2
 8011294:	085a      	lsrs	r2, r3, #1
 8011296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011298:	699b      	ldr	r3, [r3, #24]
 801129a:	f003 0301 	and.w	r3, r3, #1
 801129e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80112a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	69da      	ldr	r2, [r3, #28]
 80112a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80112ac:	0a5b      	lsrs	r3, r3, #9
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d201      	bcs.n	80112b6 <find_volume+0x3be>
 80112b2:	230d      	movs	r3, #13
 80112b4:	e06a      	b.n	801138c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	f04f 32ff 	mov.w	r2, #4294967295
 80112bc:	615a      	str	r2, [r3, #20]
 80112be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c0:	695a      	ldr	r2, [r3, #20]
 80112c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	2280      	movs	r2, #128	; 0x80
 80112ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80112cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112d0:	2b03      	cmp	r3, #3
 80112d2:	d149      	bne.n	8011368 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80112d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d6:	3334      	adds	r3, #52	; 0x34
 80112d8:	3330      	adds	r3, #48	; 0x30
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fe fa68 	bl	800f7b0 <ld_word>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d140      	bne.n	8011368 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80112e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e8:	3301      	adds	r3, #1
 80112ea:	4619      	mov	r1, r3
 80112ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112ee:	f7fe fd3f 	bl	800fd70 <move_window>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d137      	bne.n	8011368 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	2200      	movs	r2, #0
 80112fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011300:	3334      	adds	r3, #52	; 0x34
 8011302:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011306:	4618      	mov	r0, r3
 8011308:	f7fe fa52 	bl	800f7b0 <ld_word>
 801130c:	4603      	mov	r3, r0
 801130e:	461a      	mov	r2, r3
 8011310:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011314:	429a      	cmp	r2, r3
 8011316:	d127      	bne.n	8011368 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	3334      	adds	r3, #52	; 0x34
 801131c:	4618      	mov	r0, r3
 801131e:	f7fe fa5f 	bl	800f7e0 <ld_dword>
 8011322:	4602      	mov	r2, r0
 8011324:	4b1b      	ldr	r3, [pc, #108]	; (8011394 <find_volume+0x49c>)
 8011326:	429a      	cmp	r2, r3
 8011328:	d11e      	bne.n	8011368 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132c:	3334      	adds	r3, #52	; 0x34
 801132e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fa54 	bl	800f7e0 <ld_dword>
 8011338:	4602      	mov	r2, r0
 801133a:	4b17      	ldr	r3, [pc, #92]	; (8011398 <find_volume+0x4a0>)
 801133c:	429a      	cmp	r2, r3
 801133e:	d113      	bne.n	8011368 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	3334      	adds	r3, #52	; 0x34
 8011344:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011348:	4618      	mov	r0, r3
 801134a:	f7fe fa49 	bl	800f7e0 <ld_dword>
 801134e:	4602      	mov	r2, r0
 8011350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011352:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	3334      	adds	r3, #52	; 0x34
 8011358:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801135c:	4618      	mov	r0, r3
 801135e:	f7fe fa3f 	bl	800f7e0 <ld_dword>
 8011362:	4602      	mov	r2, r0
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801136e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011370:	4b0a      	ldr	r3, [pc, #40]	; (801139c <find_volume+0x4a4>)
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	3301      	adds	r3, #1
 8011376:	b29a      	uxth	r2, r3
 8011378:	4b08      	ldr	r3, [pc, #32]	; (801139c <find_volume+0x4a4>)
 801137a:	801a      	strh	r2, [r3, #0]
 801137c:	4b07      	ldr	r3, [pc, #28]	; (801139c <find_volume+0x4a4>)
 801137e:	881a      	ldrh	r2, [r3, #0]
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011386:	f7fe fc8b 	bl	800fca0 <clear_lock>
#endif
	return FR_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3758      	adds	r7, #88	; 0x58
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	41615252 	.word	0x41615252
 8011398:	61417272 	.word	0x61417272
 801139c:	200002fc 	.word	0x200002fc

080113a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80113aa:	2309      	movs	r3, #9
 80113ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d02e      	beq.n	8011412 <validate+0x72>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d02a      	beq.n	8011412 <validate+0x72>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d025      	beq.n	8011412 <validate+0x72>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	889a      	ldrh	r2, [r3, #4]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	88db      	ldrh	r3, [r3, #6]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d11e      	bne.n	8011412 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fe fae8 	bl	800f9ae <lock_fs>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d014      	beq.n	801140e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	785b      	ldrb	r3, [r3, #1]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fe f942 	bl	800f674 <disk_status>
 80113f0:	4603      	mov	r3, r0
 80113f2:	f003 0301 	and.w	r3, r3, #1
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d102      	bne.n	8011400 <validate+0x60>
				res = FR_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	73fb      	strb	r3, [r7, #15]
 80113fe:	e008      	b.n	8011412 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2100      	movs	r1, #0
 8011406:	4618      	mov	r0, r3
 8011408:	f7fe fae7 	bl	800f9da <unlock_fs>
 801140c:	e001      	b.n	8011412 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801140e:	230f      	movs	r3, #15
 8011410:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011412:	7bfb      	ldrb	r3, [r7, #15]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d102      	bne.n	801141e <validate+0x7e>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	e000      	b.n	8011420 <validate+0x80>
 801141e:	2300      	movs	r3, #0
 8011420:	683a      	ldr	r2, [r7, #0]
 8011422:	6013      	str	r3, [r2, #0]
	return res;
 8011424:	7bfb      	ldrb	r3, [r7, #15]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b088      	sub	sp, #32
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	4613      	mov	r3, r2
 801143c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011442:	f107 0310 	add.w	r3, r7, #16
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff fcbb 	bl	8010dc2 <get_ldnumber>
 801144c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	2b00      	cmp	r3, #0
 8011452:	da01      	bge.n	8011458 <f_mount+0x28>
 8011454:	230b      	movs	r3, #11
 8011456:	e048      	b.n	80114ea <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011458:	4a26      	ldr	r2, [pc, #152]	; (80114f4 <f_mount+0xc4>)
 801145a:	69fb      	ldr	r3, [r7, #28]
 801145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011460:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d00f      	beq.n	8011488 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011468:	69b8      	ldr	r0, [r7, #24]
 801146a:	f7fe fc19 	bl	800fca0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	4618      	mov	r0, r3
 8011474:	f001 f828 	bl	80124c8 <ff_del_syncobj>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d101      	bne.n	8011482 <f_mount+0x52>
 801147e:	2302      	movs	r3, #2
 8011480:	e033      	b.n	80114ea <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	2200      	movs	r2, #0
 8011486:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00f      	beq.n	80114ae <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2200      	movs	r2, #0
 8011492:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	b2da      	uxtb	r2, r3
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	330c      	adds	r3, #12
 801149c:	4619      	mov	r1, r3
 801149e:	4610      	mov	r0, r2
 80114a0:	f000 fff7 	bl	8012492 <ff_cre_syncobj>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d101      	bne.n	80114ae <f_mount+0x7e>
 80114aa:	2302      	movs	r3, #2
 80114ac:	e01d      	b.n	80114ea <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	4910      	ldr	r1, [pc, #64]	; (80114f4 <f_mount+0xc4>)
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d002      	beq.n	80114c4 <f_mount+0x94>
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d001      	beq.n	80114c8 <f_mount+0x98>
 80114c4:	2300      	movs	r3, #0
 80114c6:	e010      	b.n	80114ea <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114c8:	f107 010c 	add.w	r1, r7, #12
 80114cc:	f107 0308 	add.w	r3, r7, #8
 80114d0:	2200      	movs	r2, #0
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ff fd10 	bl	8010ef8 <find_volume>
 80114d8:	4603      	mov	r3, r0
 80114da:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	7dfa      	ldrb	r2, [r7, #23]
 80114e0:	4611      	mov	r1, r2
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fe fa79 	bl	800f9da <unlock_fs>
 80114e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3720      	adds	r7, #32
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	200002f8 	.word	0x200002f8

080114f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b09a      	sub	sp, #104	; 0x68
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	60b9      	str	r1, [r7, #8]
 8011502:	4613      	mov	r3, r2
 8011504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <f_open+0x18>
 801150c:	2309      	movs	r3, #9
 801150e:	e1b4      	b.n	801187a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011518:	79fa      	ldrb	r2, [r7, #7]
 801151a:	f107 0114 	add.w	r1, r7, #20
 801151e:	f107 0308 	add.w	r3, r7, #8
 8011522:	4618      	mov	r0, r3
 8011524:	f7ff fce8 	bl	8010ef8 <find_volume>
 8011528:	4603      	mov	r3, r0
 801152a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801152e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 8191 	bne.w	801185a <f_open+0x362>
		dj.obj.fs = fs;
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801153c:	68ba      	ldr	r2, [r7, #8]
 801153e:	f107 0318 	add.w	r3, r7, #24
 8011542:	4611      	mov	r1, r2
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fbcb 	bl	8010ce0 <follow_path>
 801154a:	4603      	mov	r3, r0
 801154c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011554:	2b00      	cmp	r3, #0
 8011556:	d11a      	bne.n	801158e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801155c:	b25b      	sxtb	r3, r3
 801155e:	2b00      	cmp	r3, #0
 8011560:	da03      	bge.n	801156a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011562:	2306      	movs	r3, #6
 8011564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011568:	e011      	b.n	801158e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801156a:	79fb      	ldrb	r3, [r7, #7]
 801156c:	f023 0301 	bic.w	r3, r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	bf14      	ite	ne
 8011574:	2301      	movne	r3, #1
 8011576:	2300      	moveq	r3, #0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	461a      	mov	r2, r3
 801157c:	f107 0318 	add.w	r3, r7, #24
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7fe fa44 	bl	800fa10 <chk_lock>
 8011588:	4603      	mov	r3, r0
 801158a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801158e:	79fb      	ldrb	r3, [r7, #7]
 8011590:	f003 031c 	and.w	r3, r3, #28
 8011594:	2b00      	cmp	r3, #0
 8011596:	d07f      	beq.n	8011698 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801159c:	2b00      	cmp	r3, #0
 801159e:	d017      	beq.n	80115d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80115a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	d10e      	bne.n	80115c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80115a8:	f7fe fa8e 	bl	800fac8 <enq_lock>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d006      	beq.n	80115c0 <f_open+0xc8>
 80115b2:	f107 0318 	add.w	r3, r7, #24
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7ff f9ca 	bl	8010950 <dir_register>
 80115bc:	4603      	mov	r3, r0
 80115be:	e000      	b.n	80115c2 <f_open+0xca>
 80115c0:	2312      	movs	r3, #18
 80115c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80115c6:	79fb      	ldrb	r3, [r7, #7]
 80115c8:	f043 0308 	orr.w	r3, r3, #8
 80115cc:	71fb      	strb	r3, [r7, #7]
 80115ce:	e010      	b.n	80115f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80115d0:	7fbb      	ldrb	r3, [r7, #30]
 80115d2:	f003 0311 	and.w	r3, r3, #17
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <f_open+0xea>
					res = FR_DENIED;
 80115da:	2307      	movs	r3, #7
 80115dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80115e0:	e007      	b.n	80115f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	f003 0304 	and.w	r3, r3, #4
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <f_open+0xfa>
 80115ec:	2308      	movs	r3, #8
 80115ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80115f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d168      	bne.n	80116cc <f_open+0x1d4>
 80115fa:	79fb      	ldrb	r3, [r7, #7]
 80115fc:	f003 0308 	and.w	r3, r3, #8
 8011600:	2b00      	cmp	r3, #0
 8011602:	d063      	beq.n	80116cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8011604:	f7fc f9e4 	bl	800d9d0 <get_fattime>
 8011608:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160c:	330e      	adds	r3, #14
 801160e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011610:	4618      	mov	r0, r3
 8011612:	f7fe f923 	bl	800f85c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011618:	3316      	adds	r3, #22
 801161a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe f91d 	bl	800f85c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	330b      	adds	r3, #11
 8011626:	2220      	movs	r2, #32
 8011628:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801162e:	4611      	mov	r1, r2
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff f89c 	bl	801076e <ld_clust>
 8011636:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801163c:	2200      	movs	r2, #0
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff f8b4 	bl	80107ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	331c      	adds	r3, #28
 8011648:	2100      	movs	r1, #0
 801164a:	4618      	mov	r0, r3
 801164c:	f7fe f906 	bl	800f85c <st_dword>
					fs->wflag = 1;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2201      	movs	r2, #1
 8011654:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011658:	2b00      	cmp	r3, #0
 801165a:	d037      	beq.n	80116cc <f_open+0x1d4>
						dw = fs->winsect;
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011660:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011662:	f107 0318 	add.w	r3, r7, #24
 8011666:	2200      	movs	r2, #0
 8011668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe fdc7 	bl	80101fe <remove_chain>
 8011670:	4603      	mov	r3, r0
 8011672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8011676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801167a:	2b00      	cmp	r3, #0
 801167c:	d126      	bne.n	80116cc <f_open+0x1d4>
							res = move_window(fs, dw);
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011682:	4618      	mov	r0, r3
 8011684:	f7fe fb74 	bl	800fd70 <move_window>
 8011688:	4603      	mov	r3, r0
 801168a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011692:	3a01      	subs	r2, #1
 8011694:	611a      	str	r2, [r3, #16]
 8011696:	e019      	b.n	80116cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801169c:	2b00      	cmp	r3, #0
 801169e:	d115      	bne.n	80116cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116a0:	7fbb      	ldrb	r3, [r7, #30]
 80116a2:	f003 0310 	and.w	r3, r3, #16
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80116aa:	2304      	movs	r3, #4
 80116ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80116b0:	e00c      	b.n	80116cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	f003 0302 	and.w	r3, r3, #2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d007      	beq.n	80116cc <f_open+0x1d4>
 80116bc:	7fbb      	ldrb	r3, [r7, #30]
 80116be:	f003 0301 	and.w	r3, r3, #1
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d002      	beq.n	80116cc <f_open+0x1d4>
						res = FR_DENIED;
 80116c6:	2307      	movs	r3, #7
 80116c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80116cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d128      	bne.n	8011726 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	f003 0308 	and.w	r3, r3, #8
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80116de:	79fb      	ldrb	r3, [r7, #7]
 80116e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80116ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	f023 0301 	bic.w	r3, r3, #1
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	bf14      	ite	ne
 80116fe:	2301      	movne	r3, #1
 8011700:	2300      	moveq	r3, #0
 8011702:	b2db      	uxtb	r3, r3
 8011704:	461a      	mov	r2, r3
 8011706:	f107 0318 	add.w	r3, r7, #24
 801170a:	4611      	mov	r1, r2
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe f9fd 	bl	800fb0c <inc_lock>
 8011712:	4602      	mov	r2, r0
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	691b      	ldr	r3, [r3, #16]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <f_open+0x22e>
 8011720:	2302      	movs	r3, #2
 8011722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801172a:	2b00      	cmp	r3, #0
 801172c:	f040 8095 	bne.w	801185a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011734:	4611      	mov	r1, r2
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff f819 	bl	801076e <ld_clust>
 801173c:	4602      	mov	r2, r0
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	331c      	adds	r3, #28
 8011746:	4618      	mov	r0, r3
 8011748:	f7fe f84a 	bl	800f7e0 <ld_dword>
 801174c:	4602      	mov	r2, r0
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	88da      	ldrh	r2, [r3, #6]
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	79fa      	ldrb	r2, [r7, #7]
 801176a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2200      	movs	r2, #0
 8011770:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2200      	movs	r2, #0
 8011776:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2200      	movs	r2, #0
 801177c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3330      	adds	r3, #48	; 0x30
 8011782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011786:	2100      	movs	r1, #0
 8011788:	4618      	mov	r0, r3
 801178a:	f7fe f8b4 	bl	800f8f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801178e:	79fb      	ldrb	r3, [r7, #7]
 8011790:	f003 0320 	and.w	r3, r3, #32
 8011794:	2b00      	cmp	r3, #0
 8011796:	d060      	beq.n	801185a <f_open+0x362>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d05c      	beq.n	801185a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	68da      	ldr	r2, [r3, #12]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	895b      	ldrh	r3, [r3, #10]
 80117ac:	025b      	lsls	r3, r3, #9
 80117ae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117bc:	e016      	b.n	80117ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe fb8f 	bl	800fee6 <get_fat>
 80117c8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80117ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d802      	bhi.n	80117d6 <f_open+0x2de>
 80117d0:	2302      	movs	r3, #2
 80117d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117dc:	d102      	bne.n	80117e4 <f_open+0x2ec>
 80117de:	2301      	movs	r3, #1
 80117e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d103      	bne.n	80117fc <f_open+0x304>
 80117f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d8e0      	bhi.n	80117be <f_open+0x2c6>
				}
				fp->clust = clst;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011800:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011806:	2b00      	cmp	r3, #0
 8011808:	d127      	bne.n	801185a <f_open+0x362>
 801180a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011810:	2b00      	cmp	r3, #0
 8011812:	d022      	beq.n	801185a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011818:	4618      	mov	r0, r3
 801181a:	f7fe fb45 	bl	800fea8 <clust2sect>
 801181e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011822:	2b00      	cmp	r3, #0
 8011824:	d103      	bne.n	801182e <f_open+0x336>
						res = FR_INT_ERR;
 8011826:	2302      	movs	r3, #2
 8011828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801182c:	e015      	b.n	801185a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801182e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011830:	0a5a      	lsrs	r2, r3, #9
 8011832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011834:	441a      	add	r2, r3
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	7858      	ldrb	r0, [r3, #1]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	6a1a      	ldr	r2, [r3, #32]
 8011848:	2301      	movs	r3, #1
 801184a:	f7fd ff53 	bl	800f6f4 <disk_read>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <f_open+0x362>
 8011854:	2301      	movs	r3, #1
 8011856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801185a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801185e:	2b00      	cmp	r3, #0
 8011860:	d002      	beq.n	8011868 <f_open+0x370>
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801186e:	4611      	mov	r1, r2
 8011870:	4618      	mov	r0, r3
 8011872:	f7fe f8b2 	bl	800f9da <unlock_fs>
 8011876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801187a:	4618      	mov	r0, r3
 801187c:	3768      	adds	r7, #104	; 0x68
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b08c      	sub	sp, #48	; 0x30
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
 801188e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f107 0210 	add.w	r2, r7, #16
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff fd7c 	bl	80113a0 <validate>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80118ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d107      	bne.n	80118c6 <f_write+0x44>
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	7d5b      	ldrb	r3, [r3, #21]
 80118ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80118be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d009      	beq.n	80118da <f_write+0x58>
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80118cc:	4611      	mov	r1, r2
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe f883 	bl	800f9da <unlock_fs>
 80118d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118d8:	e173      	b.n	8011bc2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	7d1b      	ldrb	r3, [r3, #20]
 80118de:	f003 0302 	and.w	r3, r3, #2
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d106      	bne.n	80118f4 <f_write+0x72>
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	2107      	movs	r1, #7
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fe f875 	bl	800f9da <unlock_fs>
 80118f0:	2307      	movs	r3, #7
 80118f2:	e166      	b.n	8011bc2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	699a      	ldr	r2, [r3, #24]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	441a      	add	r2, r3
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	429a      	cmp	r2, r3
 8011902:	f080 814b 	bcs.w	8011b9c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	43db      	mvns	r3, r3
 801190c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801190e:	e145      	b.n	8011b9c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011918:	2b00      	cmp	r3, #0
 801191a:	f040 8101 	bne.w	8011b20 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	699b      	ldr	r3, [r3, #24]
 8011922:	0a5b      	lsrs	r3, r3, #9
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	8952      	ldrh	r2, [r2, #10]
 8011928:	3a01      	subs	r2, #1
 801192a:	4013      	ands	r3, r2
 801192c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d14d      	bne.n	80119d0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d10c      	bne.n	8011956 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	689b      	ldr	r3, [r3, #8]
 8011940:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011944:	2b00      	cmp	r3, #0
 8011946:	d11a      	bne.n	801197e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2100      	movs	r1, #0
 801194c:	4618      	mov	r0, r3
 801194e:	f7fe fcbb 	bl	80102c8 <create_chain>
 8011952:	62b8      	str	r0, [r7, #40]	; 0x28
 8011954:	e013      	b.n	801197e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195a:	2b00      	cmp	r3, #0
 801195c:	d007      	beq.n	801196e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	4619      	mov	r1, r3
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f7fe fd47 	bl	80103f8 <clmt_clust>
 801196a:	62b8      	str	r0, [r7, #40]	; 0x28
 801196c:	e007      	b.n	801197e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	69db      	ldr	r3, [r3, #28]
 8011974:	4619      	mov	r1, r3
 8011976:	4610      	mov	r0, r2
 8011978:	f7fe fca6 	bl	80102c8 <create_chain>
 801197c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	2b00      	cmp	r3, #0
 8011982:	f000 8110 	beq.w	8011ba6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011988:	2b01      	cmp	r3, #1
 801198a:	d109      	bne.n	80119a0 <f_write+0x11e>
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2202      	movs	r2, #2
 8011990:	755a      	strb	r2, [r3, #21]
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2102      	movs	r1, #2
 8011996:	4618      	mov	r0, r3
 8011998:	f7fe f81f 	bl	800f9da <unlock_fs>
 801199c:	2302      	movs	r3, #2
 801199e:	e110      	b.n	8011bc2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a6:	d109      	bne.n	80119bc <f_write+0x13a>
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2201      	movs	r2, #1
 80119ac:	755a      	strb	r2, [r3, #21]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	2101      	movs	r1, #1
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe f811 	bl	800f9da <unlock_fs>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e102      	b.n	8011bc2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	689b      	ldr	r3, [r3, #8]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d102      	bne.n	80119d0 <f_write+0x14e>
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	7d1b      	ldrb	r3, [r3, #20]
 80119d4:	b25b      	sxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da1d      	bge.n	8011a16 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	7858      	ldrb	r0, [r3, #1]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	6a1a      	ldr	r2, [r3, #32]
 80119e8:	2301      	movs	r3, #1
 80119ea:	f7fd fea3 	bl	800f734 <disk_write>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <f_write+0x186>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2201      	movs	r2, #1
 80119f8:	755a      	strb	r2, [r3, #21]
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2101      	movs	r1, #1
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fd ffeb 	bl	800f9da <unlock_fs>
 8011a04:	2301      	movs	r3, #1
 8011a06:	e0dc      	b.n	8011bc2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011a16:	693a      	ldr	r2, [r7, #16]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4610      	mov	r0, r2
 8011a20:	f7fe fa42 	bl	800fea8 <clust2sect>
 8011a24:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d109      	bne.n	8011a40 <f_write+0x1be>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2202      	movs	r2, #2
 8011a30:	755a      	strb	r2, [r3, #21]
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	2102      	movs	r1, #2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fd ffcf 	bl	800f9da <unlock_fs>
 8011a3c:	2302      	movs	r3, #2
 8011a3e:	e0c0      	b.n	8011bc2 <f_write+0x340>
			sect += csect;
 8011a40:	697a      	ldr	r2, [r7, #20]
 8011a42:	69bb      	ldr	r3, [r7, #24]
 8011a44:	4413      	add	r3, r2
 8011a46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	0a5b      	lsrs	r3, r3, #9
 8011a4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011a4e:	6a3b      	ldr	r3, [r7, #32]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d041      	beq.n	8011ad8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a54:	69ba      	ldr	r2, [r7, #24]
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	4413      	add	r3, r2
 8011a5a:	693a      	ldr	r2, [r7, #16]
 8011a5c:	8952      	ldrh	r2, [r2, #10]
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d905      	bls.n	8011a6e <f_write+0x1ec>
					cc = fs->csize - csect;
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	895b      	ldrh	r3, [r3, #10]
 8011a66:	461a      	mov	r2, r3
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	1ad3      	subs	r3, r2, r3
 8011a6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	7858      	ldrb	r0, [r3, #1]
 8011a72:	6a3b      	ldr	r3, [r7, #32]
 8011a74:	697a      	ldr	r2, [r7, #20]
 8011a76:	69f9      	ldr	r1, [r7, #28]
 8011a78:	f7fd fe5c 	bl	800f734 <disk_write>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d009      	beq.n	8011a96 <f_write+0x214>
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2201      	movs	r2, #1
 8011a86:	755a      	strb	r2, [r3, #21]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	2101      	movs	r1, #1
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fd ffa4 	bl	800f9da <unlock_fs>
 8011a92:	2301      	movs	r3, #1
 8011a94:	e095      	b.n	8011bc2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6a1a      	ldr	r2, [r3, #32]
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	6a3a      	ldr	r2, [r7, #32]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d915      	bls.n	8011ad0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6a1a      	ldr	r2, [r3, #32]
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	025b      	lsls	r3, r3, #9
 8011ab4:	69fa      	ldr	r2, [r7, #28]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011abc:	4619      	mov	r1, r3
 8011abe:	f7fd fef9 	bl	800f8b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	7d1b      	ldrb	r3, [r3, #20]
 8011ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011ad0:	6a3b      	ldr	r3, [r7, #32]
 8011ad2:	025b      	lsls	r3, r3, #9
 8011ad4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011ad6:	e044      	b.n	8011b62 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	6a1b      	ldr	r3, [r3, #32]
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d01b      	beq.n	8011b1a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	699a      	ldr	r2, [r3, #24]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d215      	bcs.n	8011b1a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	7858      	ldrb	r0, [r3, #1]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011af8:	2301      	movs	r3, #1
 8011afa:	697a      	ldr	r2, [r7, #20]
 8011afc:	f7fd fdfa 	bl	800f6f4 <disk_read>
 8011b00:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d009      	beq.n	8011b1a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	755a      	strb	r2, [r3, #21]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	2101      	movs	r1, #1
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fd ff62 	bl	800f9da <unlock_fs>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e053      	b.n	8011bc2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	699b      	ldr	r3, [r3, #24]
 8011b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011b2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d901      	bls.n	8011b3a <f_write+0x2b8>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	699b      	ldr	r3, [r3, #24]
 8011b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b48:	4413      	add	r3, r2
 8011b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b4c:	69f9      	ldr	r1, [r7, #28]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fd feb0 	bl	800f8b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	7d1b      	ldrb	r3, [r3, #20]
 8011b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b62:	69fa      	ldr	r2, [r7, #28]
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	4413      	add	r3, r2
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	699a      	ldr	r2, [r3, #24]
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b70:	441a      	add	r2, r3
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	619a      	str	r2, [r3, #24]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	68da      	ldr	r2, [r3, #12]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	699b      	ldr	r3, [r3, #24]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	bf38      	it	cc
 8011b82:	461a      	movcc	r2, r3
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	60da      	str	r2, [r3, #12]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	441a      	add	r2, r3
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f47f aeb6 	bne.w	8011910 <f_write+0x8e>
 8011ba4:	e000      	b.n	8011ba8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ba6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	7d1b      	ldrb	r3, [r3, #20]
 8011bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	2100      	movs	r1, #0
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fd ff0d 	bl	800f9da <unlock_fs>
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3730      	adds	r7, #48	; 0x30
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b086      	sub	sp, #24
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f107 0208 	add.w	r2, r7, #8
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff fbe0 	bl	80113a0 <validate>
 8011be0:	4603      	mov	r3, r0
 8011be2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011be4:	7dfb      	ldrb	r3, [r7, #23]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d16d      	bne.n	8011cc6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	7d1b      	ldrb	r3, [r3, #20]
 8011bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d067      	beq.n	8011cc6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	7d1b      	ldrb	r3, [r3, #20]
 8011bfa:	b25b      	sxtb	r3, r3
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	da1a      	bge.n	8011c36 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	7858      	ldrb	r0, [r3, #1]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6a1a      	ldr	r2, [r3, #32]
 8011c0e:	2301      	movs	r3, #1
 8011c10:	f7fd fd90 	bl	800f734 <disk_write>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d006      	beq.n	8011c28 <f_sync+0x5e>
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	2101      	movs	r1, #1
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fd fedb 	bl	800f9da <unlock_fs>
 8011c24:	2301      	movs	r3, #1
 8011c26:	e055      	b.n	8011cd4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	7d1b      	ldrb	r3, [r3, #20]
 8011c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011c36:	f7fb fecb 	bl	800d9d0 <get_fattime>
 8011c3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c42:	4619      	mov	r1, r3
 8011c44:	4610      	mov	r0, r2
 8011c46:	f7fe f893 	bl	800fd70 <move_window>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d138      	bne.n	8011cc6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	330b      	adds	r3, #11
 8011c5e:	781a      	ldrb	r2, [r3, #0]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	330b      	adds	r3, #11
 8011c64:	f042 0220 	orr.w	r2, r2, #32
 8011c68:	b2d2      	uxtb	r2, r2
 8011c6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6818      	ldr	r0, [r3, #0]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	461a      	mov	r2, r3
 8011c76:	68f9      	ldr	r1, [r7, #12]
 8011c78:	f7fe fd98 	bl	80107ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f103 021c 	add.w	r2, r3, #28
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	4619      	mov	r1, r3
 8011c88:	4610      	mov	r0, r2
 8011c8a:	f7fd fde7 	bl	800f85c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	3316      	adds	r3, #22
 8011c92:	6939      	ldr	r1, [r7, #16]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fd fde1 	bl	800f85c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3312      	adds	r3, #18
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7fd fdc0 	bl	800f826 <st_word>
					fs->wflag = 1;
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fe f88c 	bl	800fdcc <sync_fs>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
 8011cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	7dfa      	ldrb	r2, [r7, #23]
 8011cca:	4611      	mov	r1, r2
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fd fe84 	bl	800f9da <unlock_fs>
 8011cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3718      	adds	r7, #24
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b090      	sub	sp, #64	; 0x40
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f107 0208 	add.w	r2, r7, #8
 8011cec:	4611      	mov	r1, r2
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff fb56 	bl	80113a0 <validate>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d103      	bne.n	8011d0a <f_lseek+0x2e>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	7d5b      	ldrb	r3, [r3, #21]
 8011d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d009      	beq.n	8011d26 <f_lseek+0x4a>
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011d18:	4611      	mov	r1, r2
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7fd fe5d 	bl	800f9da <unlock_fs>
 8011d20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d24:	e229      	b.n	801217a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	f000 80ea 	beq.w	8011f04 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d36:	d164      	bne.n	8011e02 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d40:	1d1a      	adds	r2, r3, #4
 8011d42:	627a      	str	r2, [r7, #36]	; 0x24
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	617b      	str	r3, [r7, #20]
 8011d48:	2302      	movs	r3, #2
 8011d4a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	689b      	ldr	r3, [r3, #8]
 8011d50:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d044      	beq.n	8011de2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5a:	613b      	str	r3, [r7, #16]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d62:	3302      	adds	r3, #2
 8011d64:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fe f8b6 	bl	800fee6 <get_fat>
 8011d7a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d809      	bhi.n	8011d96 <f_lseek+0xba>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2202      	movs	r2, #2
 8011d86:	755a      	strb	r2, [r3, #21]
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2102      	movs	r1, #2
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fd fe24 	bl	800f9da <unlock_fs>
 8011d92:	2302      	movs	r3, #2
 8011d94:	e1f1      	b.n	801217a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9c:	d109      	bne.n	8011db2 <f_lseek+0xd6>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2201      	movs	r2, #1
 8011da2:	755a      	strb	r2, [r3, #21]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2101      	movs	r1, #1
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fd fe16 	bl	800f9da <unlock_fs>
 8011dae:	2301      	movs	r3, #1
 8011db0:	e1e3      	b.n	801217a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	3301      	adds	r3, #1
 8011db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d0d4      	beq.n	8011d66 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d809      	bhi.n	8011dd8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc6:	1d1a      	adds	r2, r3, #4
 8011dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8011dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dcc:	601a      	str	r2, [r3, #0]
 8011dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd0:	1d1a      	adds	r2, r3, #4
 8011dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8011dd4:	693a      	ldr	r2, [r7, #16]
 8011dd6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	699b      	ldr	r3, [r3, #24]
 8011ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d3ba      	bcc.n	8011d58 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011de8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d803      	bhi.n	8011dfa <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]
 8011df8:	e1b6      	b.n	8012168 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011dfa:	2311      	movs	r3, #17
 8011dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011e00:	e1b2      	b.n	8012168 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	683a      	ldr	r2, [r7, #0]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d902      	bls.n	8011e12 <f_lseek+0x136>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	683a      	ldr	r2, [r7, #0]
 8011e16:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 81a4 	beq.w	8012168 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	3b01      	subs	r3, #1
 8011e24:	4619      	mov	r1, r3
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7fe fae6 	bl	80103f8 <clmt_clust>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	69db      	ldr	r3, [r3, #28]
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4610      	mov	r0, r2
 8011e3c:	f7fe f834 	bl	800fea8 <clust2sect>
 8011e40:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d109      	bne.n	8011e5c <f_lseek+0x180>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2202      	movs	r2, #2
 8011e4c:	755a      	strb	r2, [r3, #21]
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	2102      	movs	r1, #2
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fd fdc1 	bl	800f9da <unlock_fs>
 8011e58:	2302      	movs	r3, #2
 8011e5a:	e18e      	b.n	801217a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	0a5b      	lsrs	r3, r3, #9
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	8952      	ldrh	r2, [r2, #10]
 8011e66:	3a01      	subs	r2, #1
 8011e68:	4013      	ands	r3, r2
 8011e6a:	69ba      	ldr	r2, [r7, #24]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	699b      	ldr	r3, [r3, #24]
 8011e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f000 8175 	beq.w	8012168 <f_lseek+0x48c>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	69ba      	ldr	r2, [r7, #24]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	f000 816f 	beq.w	8012168 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	7d1b      	ldrb	r3, [r3, #20]
 8011e8e:	b25b      	sxtb	r3, r3
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	da1d      	bge.n	8011ed0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	7858      	ldrb	r0, [r3, #1]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6a1a      	ldr	r2, [r3, #32]
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	f7fd fc46 	bl	800f734 <disk_write>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d009      	beq.n	8011ec2 <f_lseek+0x1e6>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	755a      	strb	r2, [r3, #21]
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fd fd8e 	bl	800f9da <unlock_fs>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	e15b      	b.n	801217a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	7d1b      	ldrb	r3, [r3, #20]
 8011ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011eca:	b2da      	uxtb	r2, r3
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	7858      	ldrb	r0, [r3, #1]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011eda:	2301      	movs	r3, #1
 8011edc:	69ba      	ldr	r2, [r7, #24]
 8011ede:	f7fd fc09 	bl	800f6f4 <disk_read>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d009      	beq.n	8011efc <f_lseek+0x220>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2201      	movs	r2, #1
 8011eec:	755a      	strb	r2, [r3, #21]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	2101      	movs	r1, #1
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fd fd71 	bl	800f9da <unlock_fs>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e13e      	b.n	801217a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	69ba      	ldr	r2, [r7, #24]
 8011f00:	621a      	str	r2, [r3, #32]
 8011f02:	e131      	b.n	8012168 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d908      	bls.n	8011f20 <f_lseek+0x244>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7d1b      	ldrb	r3, [r3, #20]
 8011f12:	f003 0302 	and.w	r3, r3, #2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d102      	bne.n	8011f20 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	699b      	ldr	r3, [r3, #24]
 8011f24:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	637b      	str	r3, [r7, #52]	; 0x34
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f2e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f000 80c0 	beq.w	80120b8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	895b      	ldrh	r3, [r3, #10]
 8011f3c:	025b      	lsls	r3, r3, #9
 8011f3e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011f40:	6a3b      	ldr	r3, [r7, #32]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d01b      	beq.n	8011f7e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	1e5a      	subs	r2, r3, #1
 8011f4a:	69fb      	ldr	r3, [r7, #28]
 8011f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	1e59      	subs	r1, r3, #1
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d30f      	bcc.n	8011f7e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011f5e:	6a3b      	ldr	r3, [r7, #32]
 8011f60:	1e5a      	subs	r2, r3, #1
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	425b      	negs	r3, r3
 8011f66:	401a      	ands	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	699b      	ldr	r3, [r3, #24]
 8011f70:	683a      	ldr	r2, [r7, #0]
 8011f72:	1ad3      	subs	r3, r2, r3
 8011f74:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	69db      	ldr	r3, [r3, #28]
 8011f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f7c:	e02c      	b.n	8011fd8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d123      	bne.n	8011fd2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fe f99a 	bl	80102c8 <create_chain>
 8011f94:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d109      	bne.n	8011fb0 <f_lseek+0x2d4>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	755a      	strb	r2, [r3, #21]
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2102      	movs	r1, #2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fd fd17 	bl	800f9da <unlock_fs>
 8011fac:	2302      	movs	r3, #2
 8011fae:	e0e4      	b.n	801217a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb6:	d109      	bne.n	8011fcc <f_lseek+0x2f0>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	755a      	strb	r2, [r3, #21]
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fd fd09 	bl	800f9da <unlock_fs>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e0d6      	b.n	801217a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fd0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fd6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d06c      	beq.n	80120b8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011fde:	e044      	b.n	801206a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011fe0:	683a      	ldr	r2, [r7, #0]
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	1ad3      	subs	r3, r2, r3
 8011fe6:	603b      	str	r3, [r7, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	699a      	ldr	r2, [r3, #24]
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	441a      	add	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	7d1b      	ldrb	r3, [r3, #20]
 8011ff8:	f003 0302 	and.w	r3, r3, #2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d00b      	beq.n	8012018 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012004:	4618      	mov	r0, r3
 8012006:	f7fe f95f 	bl	80102c8 <create_chain>
 801200a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	2b00      	cmp	r3, #0
 8012010:	d108      	bne.n	8012024 <f_lseek+0x348>
							ofs = 0; break;
 8012012:	2300      	movs	r3, #0
 8012014:	603b      	str	r3, [r7, #0]
 8012016:	e02c      	b.n	8012072 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801201c:	4618      	mov	r0, r3
 801201e:	f7fd ff62 	bl	800fee6 <get_fat>
 8012022:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202a:	d109      	bne.n	8012040 <f_lseek+0x364>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2201      	movs	r2, #1
 8012030:	755a      	strb	r2, [r3, #21]
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	2101      	movs	r1, #1
 8012036:	4618      	mov	r0, r3
 8012038:	f7fd fccf 	bl	800f9da <unlock_fs>
 801203c:	2301      	movs	r3, #1
 801203e:	e09c      	b.n	801217a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	2b01      	cmp	r3, #1
 8012044:	d904      	bls.n	8012050 <f_lseek+0x374>
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	699b      	ldr	r3, [r3, #24]
 801204a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801204c:	429a      	cmp	r2, r3
 801204e:	d309      	bcc.n	8012064 <f_lseek+0x388>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2202      	movs	r2, #2
 8012054:	755a      	strb	r2, [r3, #21]
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	2102      	movs	r1, #2
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd fcbd 	bl	800f9da <unlock_fs>
 8012060:	2302      	movs	r3, #2
 8012062:	e08a      	b.n	801217a <f_lseek+0x49e>
					fp->clust = clst;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012068:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801206a:	683a      	ldr	r2, [r7, #0]
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	429a      	cmp	r2, r3
 8012070:	d8b6      	bhi.n	8011fe0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	699a      	ldr	r2, [r3, #24]
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	441a      	add	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012084:	2b00      	cmp	r3, #0
 8012086:	d017      	beq.n	80120b8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801208c:	4618      	mov	r0, r3
 801208e:	f7fd ff0b 	bl	800fea8 <clust2sect>
 8012092:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012096:	2b00      	cmp	r3, #0
 8012098:	d109      	bne.n	80120ae <f_lseek+0x3d2>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2202      	movs	r2, #2
 801209e:	755a      	strb	r2, [r3, #21]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2102      	movs	r1, #2
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fd fc98 	bl	800f9da <unlock_fs>
 80120aa:	2302      	movs	r3, #2
 80120ac:	e065      	b.n	801217a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	0a5b      	lsrs	r3, r3, #9
 80120b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120b4:	4413      	add	r3, r2
 80120b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	699a      	ldr	r2, [r3, #24]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d90a      	bls.n	80120da <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	699a      	ldr	r2, [r3, #24]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	7d1b      	ldrb	r3, [r3, #20]
 80120d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	699b      	ldr	r3, [r3, #24]
 80120de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d040      	beq.n	8012168 <f_lseek+0x48c>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6a1b      	ldr	r3, [r3, #32]
 80120ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d03b      	beq.n	8012168 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	7d1b      	ldrb	r3, [r3, #20]
 80120f4:	b25b      	sxtb	r3, r3
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	da1d      	bge.n	8012136 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	7858      	ldrb	r0, [r3, #1]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6a1a      	ldr	r2, [r3, #32]
 8012108:	2301      	movs	r3, #1
 801210a:	f7fd fb13 	bl	800f734 <disk_write>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d009      	beq.n	8012128 <f_lseek+0x44c>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	755a      	strb	r2, [r3, #21]
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	2101      	movs	r1, #1
 801211e:	4618      	mov	r0, r3
 8012120:	f7fd fc5b 	bl	800f9da <unlock_fs>
 8012124:	2301      	movs	r3, #1
 8012126:	e028      	b.n	801217a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7d1b      	ldrb	r3, [r3, #20]
 801212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012130:	b2da      	uxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	7858      	ldrb	r0, [r3, #1]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012140:	2301      	movs	r3, #1
 8012142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012144:	f7fd fad6 	bl	800f6f4 <disk_read>
 8012148:	4603      	mov	r3, r0
 801214a:	2b00      	cmp	r3, #0
 801214c:	d009      	beq.n	8012162 <f_lseek+0x486>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2201      	movs	r2, #1
 8012152:	755a      	strb	r2, [r3, #21]
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	2101      	movs	r1, #1
 8012158:	4618      	mov	r0, r3
 801215a:	f7fd fc3e 	bl	800f9da <unlock_fs>
 801215e:	2301      	movs	r3, #1
 8012160:	e00b      	b.n	801217a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012166:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801216e:	4611      	mov	r1, r2
 8012170:	4618      	mov	r0, r3
 8012172:	f7fd fc32 	bl	800f9da <unlock_fs>
 8012176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801217a:	4618      	mov	r0, r3
 801217c:	3740      	adds	r7, #64	; 0x40
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b086      	sub	sp, #24
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
 801218a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <f_opendir+0x14>
 8012192:	2309      	movs	r3, #9
 8012194:	e06a      	b.n	801226c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801219a:	f107 010c 	add.w	r1, r7, #12
 801219e:	463b      	mov	r3, r7
 80121a0:	2200      	movs	r2, #0
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fe fea8 	bl	8010ef8 <find_volume>
 80121a8:	4603      	mov	r3, r0
 80121aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121ac:	7dfb      	ldrb	r3, [r7, #23]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d14f      	bne.n	8012252 <f_opendir+0xd0>
		obj->fs = fs;
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7fe fd8f 	bl	8010ce0 <follow_path>
 80121c2:	4603      	mov	r3, r0
 80121c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80121c6:	7dfb      	ldrb	r3, [r7, #23]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d13d      	bne.n	8012248 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80121d2:	b25b      	sxtb	r3, r3
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	db12      	blt.n	80121fe <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	799b      	ldrb	r3, [r3, #6]
 80121dc:	f003 0310 	and.w	r3, r3, #16
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00a      	beq.n	80121fa <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6a1b      	ldr	r3, [r3, #32]
 80121ea:	4619      	mov	r1, r3
 80121ec:	4610      	mov	r0, r2
 80121ee:	f7fe fabe 	bl	801076e <ld_clust>
 80121f2:	4602      	mov	r2, r0
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	609a      	str	r2, [r3, #8]
 80121f8:	e001      	b.n	80121fe <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80121fa:	2305      	movs	r3, #5
 80121fc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80121fe:	7dfb      	ldrb	r3, [r7, #23]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d121      	bne.n	8012248 <f_opendir+0xc6>
				obj->id = fs->id;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	88da      	ldrh	r2, [r3, #6]
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801220c:	2100      	movs	r1, #0
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7fe f926 	bl	8010460 <dir_sdi>
 8012214:	4603      	mov	r3, r0
 8012216:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012218:	7dfb      	ldrb	r3, [r7, #23]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d114      	bne.n	8012248 <f_opendir+0xc6>
					if (obj->sclust) {
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00d      	beq.n	8012242 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012226:	2100      	movs	r1, #0
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7fd fc6f 	bl	800fb0c <inc_lock>
 801222e:	4602      	mov	r2, r0
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d105      	bne.n	8012248 <f_opendir+0xc6>
 801223c:	2312      	movs	r3, #18
 801223e:	75fb      	strb	r3, [r7, #23]
 8012240:	e002      	b.n	8012248 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2200      	movs	r2, #0
 8012246:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012248:	7dfb      	ldrb	r3, [r7, #23]
 801224a:	2b04      	cmp	r3, #4
 801224c:	d101      	bne.n	8012252 <f_opendir+0xd0>
 801224e:	2305      	movs	r3, #5
 8012250:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012252:	7dfb      	ldrb	r3, [r7, #23]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <f_opendir+0xdc>
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	2200      	movs	r2, #0
 801225c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	7dfa      	ldrb	r2, [r7, #23]
 8012262:	4611      	mov	r1, r2
 8012264:	4618      	mov	r0, r3
 8012266:	f7fd fbb8 	bl	800f9da <unlock_fs>
 801226a:	7dfb      	ldrb	r3, [r7, #23]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f107 0208 	add.w	r2, r7, #8
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff f88b 	bl	80113a0 <validate>
 801228a:	4603      	mov	r3, r0
 801228c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801228e:	7bfb      	ldrb	r3, [r7, #15]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d115      	bne.n	80122c0 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	691b      	ldr	r3, [r3, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d006      	beq.n	80122aa <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	691b      	ldr	r3, [r3, #16]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fd fcc1 	bl	800fc28 <dec_lock>
 80122a6:	4603      	mov	r3, r0
 80122a8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80122aa:	7bfb      	ldrb	r3, [r7, #15]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2100      	movs	r1, #0
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fd fb8d 	bl	800f9da <unlock_fs>
#endif
	}
	return res;
 80122c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b084      	sub	sp, #16
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f107 0208 	add.w	r2, r7, #8
 80122da:	4611      	mov	r1, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7ff f85f 	bl	80113a0 <validate>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d126      	bne.n	801233a <f_readdir+0x70>
		if (!fno) {
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d106      	bne.n	8012300 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80122f2:	2100      	movs	r1, #0
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7fe f8b3 	bl	8010460 <dir_sdi>
 80122fa:	4603      	mov	r3, r0
 80122fc:	73fb      	strb	r3, [r7, #15]
 80122fe:	e01c      	b.n	801233a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012300:	2100      	movs	r1, #0
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7fe fa72 	bl	80107ec <dir_read>
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801230c:	7bfb      	ldrb	r3, [r7, #15]
 801230e:	2b04      	cmp	r3, #4
 8012310:	d101      	bne.n	8012316 <f_readdir+0x4c>
 8012312:	2300      	movs	r3, #0
 8012314:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012316:	7bfb      	ldrb	r3, [r7, #15]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10e      	bne.n	801233a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801231c:	6839      	ldr	r1, [r7, #0]
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7fe fb48 	bl	80109b4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012324:	2100      	movs	r1, #0
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fe f915 	bl	8010556 <dir_next>
 801232c:	4603      	mov	r3, r0
 801232e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012330:	7bfb      	ldrb	r3, [r7, #15]
 8012332:	2b04      	cmp	r3, #4
 8012334:	d101      	bne.n	801233a <f_readdir+0x70>
 8012336:	2300      	movs	r3, #0
 8012338:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	7bfa      	ldrb	r2, [r7, #15]
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7fd fb4a 	bl	800f9da <unlock_fs>
 8012346:	7bfb      	ldrb	r3, [r7, #15]
}
 8012348:	4618      	mov	r0, r3
 801234a:	3710      	adds	r7, #16
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801235a:	6839      	ldr	r1, [r7, #0]
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7ff ffb4 	bl	80122ca <f_readdir>
 8012362:	4603      	mov	r3, r0
 8012364:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012366:	7bfb      	ldrb	r3, [r7, #15]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d114      	bne.n	8012396 <f_findnext+0x46>
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d011      	beq.n	8012396 <f_findnext+0x46>
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	7a5b      	ldrb	r3, [r3, #9]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d00d      	beq.n	8012396 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	f103 0109 	add.w	r1, r3, #9
 8012384:	2300      	movs	r3, #0
 8012386:	2200      	movs	r2, #0
 8012388:	f7fe fb9a 	bl	8010ac0 <pattern_matching>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d100      	bne.n	8012394 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012392:	e7e2      	b.n	801235a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012394:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8012396:	7bfb      	ldrb	r3, [r7, #15]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7ff fee3 	bl	8012182 <f_opendir>
 80123bc:	4603      	mov	r3, r0
 80123be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d105      	bne.n	80123d2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f7ff ffc1 	bl	8012350 <f_findnext>
 80123ce:	4603      	mov	r3, r0
 80123d0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80123d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3718      	adds	r7, #24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80123dc:	b480      	push	{r7}
 80123de:	b087      	sub	sp, #28
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	4613      	mov	r3, r2
 80123e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80123ea:	2301      	movs	r3, #1
 80123ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80123f2:	4b1f      	ldr	r3, [pc, #124]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 80123f4:	7a5b      	ldrb	r3, [r3, #9]
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d131      	bne.n	8012460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80123fc:	4b1c      	ldr	r3, [pc, #112]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 80123fe:	7a5b      	ldrb	r3, [r3, #9]
 8012400:	b2db      	uxtb	r3, r3
 8012402:	461a      	mov	r2, r3
 8012404:	4b1a      	ldr	r3, [pc, #104]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 8012406:	2100      	movs	r1, #0
 8012408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801240a:	4b19      	ldr	r3, [pc, #100]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 801240c:	7a5b      	ldrb	r3, [r3, #9]
 801240e:	b2db      	uxtb	r3, r3
 8012410:	4a17      	ldr	r2, [pc, #92]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	4413      	add	r3, r2
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801241a:	4b15      	ldr	r3, [pc, #84]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 801241c:	7a5b      	ldrb	r3, [r3, #9]
 801241e:	b2db      	uxtb	r3, r3
 8012420:	461a      	mov	r2, r3
 8012422:	4b13      	ldr	r3, [pc, #76]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 8012424:	4413      	add	r3, r2
 8012426:	79fa      	ldrb	r2, [r7, #7]
 8012428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801242a:	4b11      	ldr	r3, [pc, #68]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 801242c:	7a5b      	ldrb	r3, [r3, #9]
 801242e:	b2db      	uxtb	r3, r3
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	b2d1      	uxtb	r1, r2
 8012434:	4a0e      	ldr	r2, [pc, #56]	; (8012470 <FATFS_LinkDriverEx+0x94>)
 8012436:	7251      	strb	r1, [r2, #9]
 8012438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801243a:	7dbb      	ldrb	r3, [r7, #22]
 801243c:	3330      	adds	r3, #48	; 0x30
 801243e:	b2da      	uxtb	r2, r3
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	3301      	adds	r3, #1
 8012448:	223a      	movs	r2, #58	; 0x3a
 801244a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	3302      	adds	r3, #2
 8012450:	222f      	movs	r2, #47	; 0x2f
 8012452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	3303      	adds	r3, #3
 8012458:	2200      	movs	r2, #0
 801245a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801245c:	2300      	movs	r3, #0
 801245e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012460:	7dfb      	ldrb	r3, [r7, #23]
}
 8012462:	4618      	mov	r0, r3
 8012464:	371c      	adds	r7, #28
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	20000320 	.word	0x20000320

08012474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801247e:	2200      	movs	r2, #0
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7ff ffaa 	bl	80123dc <FATFS_LinkDriverEx>
 8012488:	4603      	mov	r3, r0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b084      	sub	sp, #16
 8012496:	af00      	add	r7, sp, #0
 8012498:	4603      	mov	r3, r0
 801249a:	6039      	str	r1, [r7, #0]
 801249c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801249e:	2200      	movs	r2, #0
 80124a0:	2101      	movs	r1, #1
 80124a2:	2001      	movs	r0, #1
 80124a4:	f000 fb8e 	bl	8012bc4 <osSemaphoreNew>
 80124a8:	4602      	mov	r2, r0
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	bf14      	ite	ne
 80124b6:	2301      	movne	r3, #1
 80124b8:	2300      	moveq	r3, #0
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	60fb      	str	r3, [r7, #12]

    return ret;
 80124be:	68fb      	ldr	r3, [r7, #12]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fcd3 	bl	8012e7c <osSemaphoreDelete>
#endif
    return 1;
 80124d6:	2301      	movs	r3, #1
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80124ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f000 fc05 	bl	8012d00 <osSemaphoreAcquire>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d101      	bne.n	8012500 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80124fc:	2301      	movs	r3, #1
 80124fe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012500:	68fb      	ldr	r3, [r7, #12]
}
 8012502:	4618      	mov	r0, r3
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b082      	sub	sp, #8
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 fc5a 	bl	8012dcc <osSemaphoreRelease>
#endif
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012520:	b480      	push	{r7}
 8012522:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8012524:	bf00      	nop
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
	...

08012530 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012536:	f3ef 8305 	mrs	r3, IPSR
 801253a:	60bb      	str	r3, [r7, #8]
  return(result);
 801253c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10f      	bne.n	8012562 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012542:	f3ef 8310 	mrs	r3, PRIMASK
 8012546:	607b      	str	r3, [r7, #4]
  return(result);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d105      	bne.n	801255a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801254e:	f3ef 8311 	mrs	r3, BASEPRI
 8012552:	603b      	str	r3, [r7, #0]
  return(result);
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d007      	beq.n	801256a <osKernelInitialize+0x3a>
 801255a:	4b0e      	ldr	r3, [pc, #56]	; (8012594 <osKernelInitialize+0x64>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b02      	cmp	r3, #2
 8012560:	d103      	bne.n	801256a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8012562:	f06f 0305 	mvn.w	r3, #5
 8012566:	60fb      	str	r3, [r7, #12]
 8012568:	e00c      	b.n	8012584 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801256a:	4b0a      	ldr	r3, [pc, #40]	; (8012594 <osKernelInitialize+0x64>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d105      	bne.n	801257e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012572:	4b08      	ldr	r3, [pc, #32]	; (8012594 <osKernelInitialize+0x64>)
 8012574:	2201      	movs	r2, #1
 8012576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012578:	2300      	movs	r3, #0
 801257a:	60fb      	str	r3, [r7, #12]
 801257c:	e002      	b.n	8012584 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801257e:	f04f 33ff 	mov.w	r3, #4294967295
 8012582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012584:	68fb      	ldr	r3, [r7, #12]
}
 8012586:	4618      	mov	r0, r3
 8012588:	3714      	adds	r7, #20
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	2000032c 	.word	0x2000032c

08012598 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801259e:	f002 fec5 	bl	801532c <xTaskGetSchedulerState>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <osKernelGetState+0x1a>
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d105      	bne.n	80125b8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80125ac:	2302      	movs	r3, #2
 80125ae:	607b      	str	r3, [r7, #4]
      break;
 80125b0:	e00c      	b.n	80125cc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80125b2:	2303      	movs	r3, #3
 80125b4:	607b      	str	r3, [r7, #4]
      break;
 80125b6:	e009      	b.n	80125cc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80125b8:	4b07      	ldr	r3, [pc, #28]	; (80125d8 <osKernelGetState+0x40>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d102      	bne.n	80125c6 <osKernelGetState+0x2e>
        state = osKernelReady;
 80125c0:	2301      	movs	r3, #1
 80125c2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80125c4:	e001      	b.n	80125ca <osKernelGetState+0x32>
        state = osKernelInactive;
 80125c6:	2300      	movs	r3, #0
 80125c8:	607b      	str	r3, [r7, #4]
      break;
 80125ca:	bf00      	nop
  }

  return (state);
 80125cc:	687b      	ldr	r3, [r7, #4]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3708      	adds	r7, #8
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	2000032c 	.word	0x2000032c

080125dc <osKernelStart>:

osStatus_t osKernelStart (void) {
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125e2:	f3ef 8305 	mrs	r3, IPSR
 80125e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80125e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10f      	bne.n	801260e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125ee:	f3ef 8310 	mrs	r3, PRIMASK
 80125f2:	607b      	str	r3, [r7, #4]
  return(result);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d105      	bne.n	8012606 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125fa:	f3ef 8311 	mrs	r3, BASEPRI
 80125fe:	603b      	str	r3, [r7, #0]
  return(result);
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d007      	beq.n	8012616 <osKernelStart+0x3a>
 8012606:	4b0f      	ldr	r3, [pc, #60]	; (8012644 <osKernelStart+0x68>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b02      	cmp	r3, #2
 801260c:	d103      	bne.n	8012616 <osKernelStart+0x3a>
    stat = osErrorISR;
 801260e:	f06f 0305 	mvn.w	r3, #5
 8012612:	60fb      	str	r3, [r7, #12]
 8012614:	e010      	b.n	8012638 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012616:	4b0b      	ldr	r3, [pc, #44]	; (8012644 <osKernelStart+0x68>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d109      	bne.n	8012632 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801261e:	f7ff ff7f 	bl	8012520 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012622:	4b08      	ldr	r3, [pc, #32]	; (8012644 <osKernelStart+0x68>)
 8012624:	2202      	movs	r2, #2
 8012626:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012628:	f002 fa12 	bl	8014a50 <vTaskStartScheduler>
      stat = osOK;
 801262c:	2300      	movs	r3, #0
 801262e:	60fb      	str	r3, [r7, #12]
 8012630:	e002      	b.n	8012638 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8012632:	f04f 33ff 	mov.w	r3, #4294967295
 8012636:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012638:	68fb      	ldr	r3, [r7, #12]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	2000032c 	.word	0x2000032c

08012648 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801264e:	f3ef 8305 	mrs	r3, IPSR
 8012652:	60bb      	str	r3, [r7, #8]
  return(result);
 8012654:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8012656:	2b00      	cmp	r3, #0
 8012658:	d10f      	bne.n	801267a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801265a:	f3ef 8310 	mrs	r3, PRIMASK
 801265e:	607b      	str	r3, [r7, #4]
  return(result);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d105      	bne.n	8012672 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012666:	f3ef 8311 	mrs	r3, BASEPRI
 801266a:	603b      	str	r3, [r7, #0]
  return(result);
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d007      	beq.n	8012682 <osKernelGetTickCount+0x3a>
 8012672:	4b08      	ldr	r3, [pc, #32]	; (8012694 <osKernelGetTickCount+0x4c>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2b02      	cmp	r3, #2
 8012678:	d103      	bne.n	8012682 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 801267a:	f002 fb0d 	bl	8014c98 <xTaskGetTickCountFromISR>
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	e002      	b.n	8012688 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8012682:	f002 faf9 	bl	8014c78 <xTaskGetTickCount>
 8012686:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8012688:	68fb      	ldr	r3, [r7, #12]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	2000032c 	.word	0x2000032c

08012698 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8012698:	b480      	push	{r7}
 801269a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 801269c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	46bd      	mov	sp, r7
 80126a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a8:	4770      	bx	lr
	...

080126ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b090      	sub	sp, #64	; 0x40
 80126b0:	af04      	add	r7, sp, #16
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80126b8:	2300      	movs	r3, #0
 80126ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126bc:	f3ef 8305 	mrs	r3, IPSR
 80126c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80126c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f040 808f 	bne.w	80127e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126ca:	f3ef 8310 	mrs	r3, PRIMASK
 80126ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d105      	bne.n	80126e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80126d6:	f3ef 8311 	mrs	r3, BASEPRI
 80126da:	617b      	str	r3, [r7, #20]
  return(result);
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d003      	beq.n	80126ea <osThreadNew+0x3e>
 80126e2:	4b44      	ldr	r3, [pc, #272]	; (80127f4 <osThreadNew+0x148>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b02      	cmp	r3, #2
 80126e8:	d07e      	beq.n	80127e8 <osThreadNew+0x13c>
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d07b      	beq.n	80127e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80126f0:	2380      	movs	r3, #128	; 0x80
 80126f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80126f4:	2318      	movs	r3, #24
 80126f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80126f8:	2300      	movs	r3, #0
 80126fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80126fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012700:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d045      	beq.n	8012794 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <osThreadNew+0x6a>
        name = attr->name;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	699b      	ldr	r3, [r3, #24]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d002      	beq.n	8012724 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	699b      	ldr	r3, [r3, #24]
 8012722:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	d008      	beq.n	801273c <osThreadNew+0x90>
 801272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272c:	2b38      	cmp	r3, #56	; 0x38
 801272e:	d805      	bhi.n	801273c <osThreadNew+0x90>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	f003 0301 	and.w	r3, r3, #1
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <osThreadNew+0x94>
        return (NULL);
 801273c:	2300      	movs	r3, #0
 801273e:	e054      	b.n	80127ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	695b      	ldr	r3, [r3, #20]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d003      	beq.n	8012750 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	089b      	lsrs	r3, r3, #2
 801274e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00e      	beq.n	8012776 <osThreadNew+0xca>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	2b5b      	cmp	r3, #91	; 0x5b
 801275e:	d90a      	bls.n	8012776 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012764:	2b00      	cmp	r3, #0
 8012766:	d006      	beq.n	8012776 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	695b      	ldr	r3, [r3, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d002      	beq.n	8012776 <osThreadNew+0xca>
        mem = 1;
 8012770:	2301      	movs	r3, #1
 8012772:	623b      	str	r3, [r7, #32]
 8012774:	e010      	b.n	8012798 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d10c      	bne.n	8012798 <osThreadNew+0xec>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d108      	bne.n	8012798 <osThreadNew+0xec>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	691b      	ldr	r3, [r3, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d104      	bne.n	8012798 <osThreadNew+0xec>
          mem = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	623b      	str	r3, [r7, #32]
 8012792:	e001      	b.n	8012798 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012794:	2300      	movs	r3, #0
 8012796:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	2b01      	cmp	r3, #1
 801279c:	d110      	bne.n	80127c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80127a6:	9202      	str	r2, [sp, #8]
 80127a8:	9301      	str	r3, [sp, #4]
 80127aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127b4:	68f8      	ldr	r0, [r7, #12]
 80127b6:	f001 feef 	bl	8014598 <xTaskCreateStatic>
 80127ba:	4603      	mov	r3, r0
 80127bc:	613b      	str	r3, [r7, #16]
 80127be:	e013      	b.n	80127e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80127c0:	6a3b      	ldr	r3, [r7, #32]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d110      	bne.n	80127e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80127c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	f107 0310 	add.w	r3, r7, #16
 80127ce:	9301      	str	r3, [sp, #4]
 80127d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f001 ff3d 	bl	8014658 <xTaskCreate>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d001      	beq.n	80127e8 <osThreadNew+0x13c>
          hTask = NULL;
 80127e4:	2300      	movs	r3, #0
 80127e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80127e8:	693b      	ldr	r3, [r7, #16]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3730      	adds	r7, #48	; 0x30
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	2000032c 	.word	0x2000032c

080127f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b086      	sub	sp, #24
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012800:	f3ef 8305 	mrs	r3, IPSR
 8012804:	613b      	str	r3, [r7, #16]
  return(result);
 8012806:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012808:	2b00      	cmp	r3, #0
 801280a:	d10f      	bne.n	801282c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801280c:	f3ef 8310 	mrs	r3, PRIMASK
 8012810:	60fb      	str	r3, [r7, #12]
  return(result);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d105      	bne.n	8012824 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012818:	f3ef 8311 	mrs	r3, BASEPRI
 801281c:	60bb      	str	r3, [r7, #8]
  return(result);
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d007      	beq.n	8012834 <osDelay+0x3c>
 8012824:	4b0a      	ldr	r3, [pc, #40]	; (8012850 <osDelay+0x58>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b02      	cmp	r3, #2
 801282a:	d103      	bne.n	8012834 <osDelay+0x3c>
    stat = osErrorISR;
 801282c:	f06f 0305 	mvn.w	r3, #5
 8012830:	617b      	str	r3, [r7, #20]
 8012832:	e007      	b.n	8012844 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012834:	2300      	movs	r3, #0
 8012836:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d002      	beq.n	8012844 <osDelay+0x4c>
      vTaskDelay(ticks);
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f002 f8d0 	bl	80149e4 <vTaskDelay>
    }
  }

  return (stat);
 8012844:	697b      	ldr	r3, [r7, #20]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3718      	adds	r7, #24
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	2000032c 	.word	0x2000032c

08012854 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8012854:	b580      	push	{r7, lr}
 8012856:	b088      	sub	sp, #32
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801285c:	f3ef 8305 	mrs	r3, IPSR
 8012860:	617b      	str	r3, [r7, #20]
  return(result);
 8012862:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10f      	bne.n	8012888 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012868:	f3ef 8310 	mrs	r3, PRIMASK
 801286c:	613b      	str	r3, [r7, #16]
  return(result);
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d105      	bne.n	8012880 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012874:	f3ef 8311 	mrs	r3, BASEPRI
 8012878:	60fb      	str	r3, [r7, #12]
  return(result);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d007      	beq.n	8012890 <osDelayUntil+0x3c>
 8012880:	4b13      	ldr	r3, [pc, #76]	; (80128d0 <osDelayUntil+0x7c>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b02      	cmp	r3, #2
 8012886:	d103      	bne.n	8012890 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8012888:	f06f 0305 	mvn.w	r3, #5
 801288c:	61fb      	str	r3, [r7, #28]
 801288e:	e019      	b.n	80128c4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8012890:	2300      	movs	r3, #0
 8012892:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8012894:	f002 f9f0 	bl	8014c78 <xTaskGetTickCount>
 8012898:	4603      	mov	r3, r0
 801289a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	1ad3      	subs	r3, r2, r3
 80128a2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d009      	beq.n	80128be <osDelayUntil+0x6a>
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	db06      	blt.n	80128be <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80128b0:	f107 0308 	add.w	r3, r7, #8
 80128b4:	69b9      	ldr	r1, [r7, #24]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f002 f814 	bl	80148e4 <vTaskDelayUntil>
 80128bc:	e002      	b.n	80128c4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80128be:	f06f 0303 	mvn.w	r3, #3
 80128c2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80128c4:	69fb      	ldr	r3, [r7, #28]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3720      	adds	r7, #32
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	2000032c 	.word	0x2000032c

080128d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b08a      	sub	sp, #40	; 0x28
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80128dc:	2300      	movs	r3, #0
 80128de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128e0:	f3ef 8305 	mrs	r3, IPSR
 80128e4:	613b      	str	r3, [r7, #16]
  return(result);
 80128e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f040 8085 	bne.w	80129f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128ee:	f3ef 8310 	mrs	r3, PRIMASK
 80128f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d105      	bne.n	8012906 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128fa:	f3ef 8311 	mrs	r3, BASEPRI
 80128fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d003      	beq.n	801290e <osMutexNew+0x3a>
 8012906:	4b3f      	ldr	r3, [pc, #252]	; (8012a04 <osMutexNew+0x130>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b02      	cmp	r3, #2
 801290c:	d074      	beq.n	80129f8 <osMutexNew+0x124>
    if (attr != NULL) {
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d003      	beq.n	801291c <osMutexNew+0x48>
      type = attr->attr_bits;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	623b      	str	r3, [r7, #32]
 801291a:	e001      	b.n	8012920 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801291c:	2300      	movs	r3, #0
 801291e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012920:	6a3b      	ldr	r3, [r7, #32]
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	2b00      	cmp	r3, #0
 8012928:	d002      	beq.n	8012930 <osMutexNew+0x5c>
      rmtx = 1U;
 801292a:	2301      	movs	r3, #1
 801292c:	61fb      	str	r3, [r7, #28]
 801292e:	e001      	b.n	8012934 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012930:	2300      	movs	r3, #0
 8012932:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012934:	6a3b      	ldr	r3, [r7, #32]
 8012936:	f003 0308 	and.w	r3, r3, #8
 801293a:	2b00      	cmp	r3, #0
 801293c:	d15c      	bne.n	80129f8 <osMutexNew+0x124>
      mem = -1;
 801293e:	f04f 33ff 	mov.w	r3, #4294967295
 8012942:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d015      	beq.n	8012976 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	689b      	ldr	r3, [r3, #8]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d006      	beq.n	8012960 <osMutexNew+0x8c>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	2b4f      	cmp	r3, #79	; 0x4f
 8012958:	d902      	bls.n	8012960 <osMutexNew+0x8c>
          mem = 1;
 801295a:	2301      	movs	r3, #1
 801295c:	61bb      	str	r3, [r7, #24]
 801295e:	e00c      	b.n	801297a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d108      	bne.n	801297a <osMutexNew+0xa6>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d104      	bne.n	801297a <osMutexNew+0xa6>
            mem = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	61bb      	str	r3, [r7, #24]
 8012974:	e001      	b.n	801297a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012976:	2300      	movs	r3, #0
 8012978:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d112      	bne.n	80129a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d007      	beq.n	8012996 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	689b      	ldr	r3, [r3, #8]
 801298a:	4619      	mov	r1, r3
 801298c:	2004      	movs	r0, #4
 801298e:	f000 fe7c 	bl	801368a <xQueueCreateMutexStatic>
 8012992:	6278      	str	r0, [r7, #36]	; 0x24
 8012994:	e016      	b.n	80129c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	4619      	mov	r1, r3
 801299c:	2001      	movs	r0, #1
 801299e:	f000 fe74 	bl	801368a <xQueueCreateMutexStatic>
 80129a2:	6278      	str	r0, [r7, #36]	; 0x24
 80129a4:	e00e      	b.n	80129c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10b      	bne.n	80129c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d004      	beq.n	80129bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80129b2:	2004      	movs	r0, #4
 80129b4:	f000 fe51 	bl	801365a <xQueueCreateMutex>
 80129b8:	6278      	str	r0, [r7, #36]	; 0x24
 80129ba:	e003      	b.n	80129c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80129bc:	2001      	movs	r0, #1
 80129be:	f000 fe4c 	bl	801365a <xQueueCreateMutex>
 80129c2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80129c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00c      	beq.n	80129e4 <osMutexNew+0x110>
        if (attr != NULL) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d003      	beq.n	80129d8 <osMutexNew+0x104>
          name = attr->name;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	e001      	b.n	80129dc <osMutexNew+0x108>
        } else {
          name = NULL;
 80129d8:	2300      	movs	r3, #0
 80129da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80129dc:	6979      	ldr	r1, [r7, #20]
 80129de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129e0:	f001 fd54 	bl	801448c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d006      	beq.n	80129f8 <osMutexNew+0x124>
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d003      	beq.n	80129f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	f043 0301 	orr.w	r3, r3, #1
 80129f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3728      	adds	r7, #40	; 0x28
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	2000032c 	.word	0x2000032c

08012a08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b088      	sub	sp, #32
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f023 0301 	bic.w	r3, r3, #1
 8012a18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f003 0301 	and.w	r3, r3, #1
 8012a20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a26:	f3ef 8305 	mrs	r3, IPSR
 8012a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8012a2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10f      	bne.n	8012a52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a32:	f3ef 8310 	mrs	r3, PRIMASK
 8012a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d105      	bne.n	8012a4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8012a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d007      	beq.n	8012a5a <osMutexAcquire+0x52>
 8012a4a:	4b1d      	ldr	r3, [pc, #116]	; (8012ac0 <osMutexAcquire+0xb8>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b02      	cmp	r3, #2
 8012a50:	d103      	bne.n	8012a5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8012a52:	f06f 0305 	mvn.w	r3, #5
 8012a56:	61fb      	str	r3, [r7, #28]
 8012a58:	e02c      	b.n	8012ab4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d103      	bne.n	8012a68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012a60:	f06f 0303 	mvn.w	r3, #3
 8012a64:	61fb      	str	r3, [r7, #28]
 8012a66:	e025      	b.n	8012ab4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d011      	beq.n	8012a92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012a6e:	6839      	ldr	r1, [r7, #0]
 8012a70:	69b8      	ldr	r0, [r7, #24]
 8012a72:	f000 fe73 	bl	801375c <xQueueTakeMutexRecursive>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d01b      	beq.n	8012ab4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8012a82:	f06f 0301 	mvn.w	r3, #1
 8012a86:	61fb      	str	r3, [r7, #28]
 8012a88:	e014      	b.n	8012ab4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012a8a:	f06f 0302 	mvn.w	r3, #2
 8012a8e:	61fb      	str	r3, [r7, #28]
 8012a90:	e010      	b.n	8012ab4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012a92:	6839      	ldr	r1, [r7, #0]
 8012a94:	69b8      	ldr	r0, [r7, #24]
 8012a96:	f001 fa19 	bl	8013ecc <xQueueSemaphoreTake>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d009      	beq.n	8012ab4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d003      	beq.n	8012aae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8012aa6:	f06f 0301 	mvn.w	r3, #1
 8012aaa:	61fb      	str	r3, [r7, #28]
 8012aac:	e002      	b.n	8012ab4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012aae:	f06f 0302 	mvn.w	r3, #2
 8012ab2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012ab4:	69fb      	ldr	r3, [r7, #28]
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3720      	adds	r7, #32
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	2000032c 	.word	0x2000032c

08012ac4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b088      	sub	sp, #32
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f023 0301 	bic.w	r3, r3, #1
 8012ad2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012adc:	2300      	movs	r3, #0
 8012ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ae0:	f3ef 8305 	mrs	r3, IPSR
 8012ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8012ae6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d10f      	bne.n	8012b0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012aec:	f3ef 8310 	mrs	r3, PRIMASK
 8012af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d105      	bne.n	8012b04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012af8:	f3ef 8311 	mrs	r3, BASEPRI
 8012afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d007      	beq.n	8012b14 <osMutexRelease+0x50>
 8012b04:	4b16      	ldr	r3, [pc, #88]	; (8012b60 <osMutexRelease+0x9c>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d103      	bne.n	8012b14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8012b0c:	f06f 0305 	mvn.w	r3, #5
 8012b10:	61fb      	str	r3, [r7, #28]
 8012b12:	e01f      	b.n	8012b54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d103      	bne.n	8012b22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8012b1a:	f06f 0303 	mvn.w	r3, #3
 8012b1e:	61fb      	str	r3, [r7, #28]
 8012b20:	e018      	b.n	8012b54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d009      	beq.n	8012b3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012b28:	69b8      	ldr	r0, [r7, #24]
 8012b2a:	f000 fde2 	bl	80136f2 <xQueueGiveMutexRecursive>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d00f      	beq.n	8012b54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8012b34:	f06f 0302 	mvn.w	r3, #2
 8012b38:	61fb      	str	r3, [r7, #28]
 8012b3a:	e00b      	b.n	8012b54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	2200      	movs	r2, #0
 8012b40:	2100      	movs	r1, #0
 8012b42:	69b8      	ldr	r0, [r7, #24]
 8012b44:	f000 feb0 	bl	80138a8 <xQueueGenericSend>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d002      	beq.n	8012b54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8012b4e:	f06f 0302 	mvn.w	r3, #2
 8012b52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8012b54:	69fb      	ldr	r3, [r7, #28]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3720      	adds	r7, #32
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	2000032c 	.word	0x2000032c

08012b64 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b088      	sub	sp, #32
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f023 0301 	bic.w	r3, r3, #1
 8012b72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b74:	f3ef 8305 	mrs	r3, IPSR
 8012b78:	617b      	str	r3, [r7, #20]
  return(result);
 8012b7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d112      	bne.n	8012ba6 <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b80:	f3ef 8310 	mrs	r3, PRIMASK
 8012b84:	613b      	str	r3, [r7, #16]
  return(result);
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d105      	bne.n	8012b98 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8012b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d003      	beq.n	8012ba0 <osMutexGetOwner+0x3c>
 8012b98:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <osMutexGetOwner+0x5c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d002      	beq.n	8012ba6 <osMutexGetOwner+0x42>
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d102      	bne.n	8012bac <osMutexGetOwner+0x48>
    owner = NULL;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	61fb      	str	r3, [r7, #28]
 8012baa:	e003      	b.n	8012bb4 <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8012bac:	69b8      	ldr	r0, [r7, #24]
 8012bae:	f000 fd87 	bl	80136c0 <xQueueGetMutexHolder>
 8012bb2:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 8012bb4:	69fb      	ldr	r3, [r7, #28]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3720      	adds	r7, #32
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	2000032c 	.word	0x2000032c

08012bc4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b08c      	sub	sp, #48	; 0x30
 8012bc8:	af02      	add	r7, sp, #8
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bd4:	f3ef 8305 	mrs	r3, IPSR
 8012bd8:	61bb      	str	r3, [r7, #24]
  return(result);
 8012bda:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f040 8087 	bne.w	8012cf0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012be2:	f3ef 8310 	mrs	r3, PRIMASK
 8012be6:	617b      	str	r3, [r7, #20]
  return(result);
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d105      	bne.n	8012bfa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012bee:	f3ef 8311 	mrs	r3, BASEPRI
 8012bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d003      	beq.n	8012c02 <osSemaphoreNew+0x3e>
 8012bfa:	4b40      	ldr	r3, [pc, #256]	; (8012cfc <osSemaphoreNew+0x138>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b02      	cmp	r3, #2
 8012c00:	d076      	beq.n	8012cf0 <osSemaphoreNew+0x12c>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d073      	beq.n	8012cf0 <osSemaphoreNew+0x12c>
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d86f      	bhi.n	8012cf0 <osSemaphoreNew+0x12c>
    mem = -1;
 8012c10:	f04f 33ff 	mov.w	r3, #4294967295
 8012c14:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d015      	beq.n	8012c48 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d006      	beq.n	8012c32 <osSemaphoreNew+0x6e>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	68db      	ldr	r3, [r3, #12]
 8012c28:	2b4f      	cmp	r3, #79	; 0x4f
 8012c2a:	d902      	bls.n	8012c32 <osSemaphoreNew+0x6e>
        mem = 1;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	623b      	str	r3, [r7, #32]
 8012c30:	e00c      	b.n	8012c4c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d108      	bne.n	8012c4c <osSemaphoreNew+0x88>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d104      	bne.n	8012c4c <osSemaphoreNew+0x88>
          mem = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	623b      	str	r3, [r7, #32]
 8012c46:	e001      	b.n	8012c4c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c52:	d04d      	beq.n	8012cf0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d129      	bne.n	8012cae <osSemaphoreNew+0xea>
        if (mem == 1) {
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d10b      	bne.n	8012c78 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	689a      	ldr	r2, [r3, #8]
 8012c64:	2303      	movs	r3, #3
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	2001      	movs	r0, #1
 8012c70:	f000 fbf8 	bl	8013464 <xQueueGenericCreateStatic>
 8012c74:	6278      	str	r0, [r7, #36]	; 0x24
 8012c76:	e005      	b.n	8012c84 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8012c78:	2203      	movs	r2, #3
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	2001      	movs	r0, #1
 8012c7e:	f000 fc6e 	bl	801355e <xQueueGenericCreate>
 8012c82:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d022      	beq.n	8012cd0 <osSemaphoreNew+0x10c>
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d01f      	beq.n	8012cd0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012c90:	2300      	movs	r3, #0
 8012c92:	2200      	movs	r2, #0
 8012c94:	2100      	movs	r1, #0
 8012c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c98:	f000 fe06 	bl	80138a8 <xQueueGenericSend>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d016      	beq.n	8012cd0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8012ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ca4:	f001 faa5 	bl	80141f2 <vQueueDelete>
            hSemaphore = NULL;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	627b      	str	r3, [r7, #36]	; 0x24
 8012cac:	e010      	b.n	8012cd0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8012cae:	6a3b      	ldr	r3, [r7, #32]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d108      	bne.n	8012cc6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	461a      	mov	r2, r3
 8012cba:	68b9      	ldr	r1, [r7, #8]
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f000 fd84 	bl	80137ca <xQueueCreateCountingSemaphoreStatic>
 8012cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8012cc4:	e004      	b.n	8012cd0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012cc6:	68b9      	ldr	r1, [r7, #8]
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	f000 fdb7 	bl	801383c <xQueueCreateCountingSemaphore>
 8012cce:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00c      	beq.n	8012cf0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d003      	beq.n	8012ce4 <osSemaphoreNew+0x120>
          name = attr->name;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	61fb      	str	r3, [r7, #28]
 8012ce2:	e001      	b.n	8012ce8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012ce8:	69f9      	ldr	r1, [r7, #28]
 8012cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cec:	f001 fbce 	bl	801448c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3728      	adds	r7, #40	; 0x28
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	2000032c 	.word	0x2000032c

08012d00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d103      	bne.n	8012d20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012d18:	f06f 0303 	mvn.w	r3, #3
 8012d1c:	61fb      	str	r3, [r7, #28]
 8012d1e:	e04b      	b.n	8012db8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d20:	f3ef 8305 	mrs	r3, IPSR
 8012d24:	617b      	str	r3, [r7, #20]
  return(result);
 8012d26:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d10f      	bne.n	8012d4c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8012d30:	613b      	str	r3, [r7, #16]
  return(result);
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d105      	bne.n	8012d44 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d38:	f3ef 8311 	mrs	r3, BASEPRI
 8012d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d026      	beq.n	8012d92 <osSemaphoreAcquire+0x92>
 8012d44:	4b1f      	ldr	r3, [pc, #124]	; (8012dc4 <osSemaphoreAcquire+0xc4>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b02      	cmp	r3, #2
 8012d4a:	d122      	bne.n	8012d92 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d003      	beq.n	8012d5a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8012d52:	f06f 0303 	mvn.w	r3, #3
 8012d56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012d58:	e02d      	b.n	8012db6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012d5e:	f107 0308 	add.w	r3, r7, #8
 8012d62:	461a      	mov	r2, r3
 8012d64:	2100      	movs	r1, #0
 8012d66:	69b8      	ldr	r0, [r7, #24]
 8012d68:	f001 f9c0 	bl	80140ec <xQueueReceiveFromISR>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d003      	beq.n	8012d7a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8012d72:	f06f 0302 	mvn.w	r3, #2
 8012d76:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012d78:	e01d      	b.n	8012db6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d01a      	beq.n	8012db6 <osSemaphoreAcquire+0xb6>
 8012d80:	4b11      	ldr	r3, [pc, #68]	; (8012dc8 <osSemaphoreAcquire+0xc8>)
 8012d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d86:	601a      	str	r2, [r3, #0]
 8012d88:	f3bf 8f4f 	dsb	sy
 8012d8c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8012d90:	e011      	b.n	8012db6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	69b8      	ldr	r0, [r7, #24]
 8012d96:	f001 f899 	bl	8013ecc <xQueueSemaphoreTake>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d00b      	beq.n	8012db8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d003      	beq.n	8012dae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8012da6:	f06f 0301 	mvn.w	r3, #1
 8012daa:	61fb      	str	r3, [r7, #28]
 8012dac:	e004      	b.n	8012db8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8012dae:	f06f 0302 	mvn.w	r3, #2
 8012db2:	61fb      	str	r3, [r7, #28]
 8012db4:	e000      	b.n	8012db8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8012db6:	bf00      	nop
      }
    }
  }

  return (stat);
 8012db8:	69fb      	ldr	r3, [r7, #28]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3720      	adds	r7, #32
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	2000032c 	.word	0x2000032c
 8012dc8:	e000ed04 	.word	0xe000ed04

08012dcc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d103      	bne.n	8012dea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012de2:	f06f 0303 	mvn.w	r3, #3
 8012de6:	61fb      	str	r3, [r7, #28]
 8012de8:	e03e      	b.n	8012e68 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dea:	f3ef 8305 	mrs	r3, IPSR
 8012dee:	617b      	str	r3, [r7, #20]
  return(result);
 8012df0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10f      	bne.n	8012e16 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012df6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dfa:	613b      	str	r3, [r7, #16]
  return(result);
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d105      	bne.n	8012e0e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012e02:	f3ef 8311 	mrs	r3, BASEPRI
 8012e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d01e      	beq.n	8012e4c <osSemaphoreRelease+0x80>
 8012e0e:	4b19      	ldr	r3, [pc, #100]	; (8012e74 <osSemaphoreRelease+0xa8>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b02      	cmp	r3, #2
 8012e14:	d11a      	bne.n	8012e4c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8012e16:	2300      	movs	r3, #0
 8012e18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e1a:	f107 0308 	add.w	r3, r7, #8
 8012e1e:	4619      	mov	r1, r3
 8012e20:	69b8      	ldr	r0, [r7, #24]
 8012e22:	f000 fedf 	bl	8013be4 <xQueueGiveFromISR>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d003      	beq.n	8012e34 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012e2c:	f06f 0302 	mvn.w	r3, #2
 8012e30:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e32:	e018      	b.n	8012e66 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d015      	beq.n	8012e66 <osSemaphoreRelease+0x9a>
 8012e3a:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <osSemaphoreRelease+0xac>)
 8012e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e40:	601a      	str	r2, [r3, #0]
 8012e42:	f3bf 8f4f 	dsb	sy
 8012e46:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e4a:	e00c      	b.n	8012e66 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	2200      	movs	r2, #0
 8012e50:	2100      	movs	r1, #0
 8012e52:	69b8      	ldr	r0, [r7, #24]
 8012e54:	f000 fd28 	bl	80138a8 <xQueueGenericSend>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	d004      	beq.n	8012e68 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8012e5e:	f06f 0302 	mvn.w	r3, #2
 8012e62:	61fb      	str	r3, [r7, #28]
 8012e64:	e000      	b.n	8012e68 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e66:	bf00      	nop
    }
  }

  return (stat);
 8012e68:	69fb      	ldr	r3, [r7, #28]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3720      	adds	r7, #32
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	2000032c 	.word	0x2000032c
 8012e78:	e000ed04 	.word	0xe000ed04

08012e7c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e88:	f3ef 8305 	mrs	r3, IPSR
 8012e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8012e8e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d10f      	bne.n	8012eb4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e94:	f3ef 8310 	mrs	r3, PRIMASK
 8012e98:	613b      	str	r3, [r7, #16]
  return(result);
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d105      	bne.n	8012eac <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8012ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d007      	beq.n	8012ebc <osSemaphoreDelete+0x40>
 8012eac:	4b0d      	ldr	r3, [pc, #52]	; (8012ee4 <osSemaphoreDelete+0x68>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d103      	bne.n	8012ebc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8012eb4:	f06f 0305 	mvn.w	r3, #5
 8012eb8:	61fb      	str	r3, [r7, #28]
 8012eba:	e00e      	b.n	8012eda <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d103      	bne.n	8012eca <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012ec2:	f06f 0303 	mvn.w	r3, #3
 8012ec6:	61fb      	str	r3, [r7, #28]
 8012ec8:	e007      	b.n	8012eda <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012eca:	69b8      	ldr	r0, [r7, #24]
 8012ecc:	f001 fb06 	bl	80144dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012ed4:	69b8      	ldr	r0, [r7, #24]
 8012ed6:	f001 f98c 	bl	80141f2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012eda:	69fb      	ldr	r3, [r7, #28]
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3720      	adds	r7, #32
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	2000032c 	.word	0x2000032c

08012ee8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b08c      	sub	sp, #48	; 0x30
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ef8:	f3ef 8305 	mrs	r3, IPSR
 8012efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8012efe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d170      	bne.n	8012fe6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f04:	f3ef 8310 	mrs	r3, PRIMASK
 8012f08:	617b      	str	r3, [r7, #20]
  return(result);
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d105      	bne.n	8012f1c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012f10:	f3ef 8311 	mrs	r3, BASEPRI
 8012f14:	613b      	str	r3, [r7, #16]
  return(result);
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d003      	beq.n	8012f24 <osMessageQueueNew+0x3c>
 8012f1c:	4b34      	ldr	r3, [pc, #208]	; (8012ff0 <osMessageQueueNew+0x108>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	2b02      	cmp	r3, #2
 8012f22:	d060      	beq.n	8012fe6 <osMessageQueueNew+0xfe>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d05d      	beq.n	8012fe6 <osMessageQueueNew+0xfe>
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d05a      	beq.n	8012fe6 <osMessageQueueNew+0xfe>
    mem = -1;
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295
 8012f34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d029      	beq.n	8012f90 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d012      	beq.n	8012f6a <osMessageQueueNew+0x82>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	2b4f      	cmp	r3, #79	; 0x4f
 8012f4a:	d90e      	bls.n	8012f6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00a      	beq.n	8012f6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	695a      	ldr	r2, [r3, #20]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	68b9      	ldr	r1, [r7, #8]
 8012f5c:	fb01 f303 	mul.w	r3, r1, r3
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d302      	bcc.n	8012f6a <osMessageQueueNew+0x82>
        mem = 1;
 8012f64:	2301      	movs	r3, #1
 8012f66:	623b      	str	r3, [r7, #32]
 8012f68:	e014      	b.n	8012f94 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d110      	bne.n	8012f94 <osMessageQueueNew+0xac>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d10c      	bne.n	8012f94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d108      	bne.n	8012f94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	695b      	ldr	r3, [r3, #20]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d104      	bne.n	8012f94 <osMessageQueueNew+0xac>
          mem = 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	623b      	str	r3, [r7, #32]
 8012f8e:	e001      	b.n	8012f94 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012f90:	2300      	movs	r3, #0
 8012f92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012f94:	6a3b      	ldr	r3, [r7, #32]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d10c      	bne.n	8012fb4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	691a      	ldr	r2, [r3, #16]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6899      	ldr	r1, [r3, #8]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	460b      	mov	r3, r1
 8012fa8:	68b9      	ldr	r1, [r7, #8]
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f000 fa5a 	bl	8013464 <xQueueGenericCreateStatic>
 8012fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8012fb2:	e008      	b.n	8012fc6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012fb4:	6a3b      	ldr	r3, [r7, #32]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d105      	bne.n	8012fc6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012fba:	2200      	movs	r2, #0
 8012fbc:	68b9      	ldr	r1, [r7, #8]
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	f000 facd 	bl	801355e <xQueueGenericCreate>
 8012fc4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00c      	beq.n	8012fe6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d003      	beq.n	8012fda <osMessageQueueNew+0xf2>
        name = attr->name;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	e001      	b.n	8012fde <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012fde:	69f9      	ldr	r1, [r7, #28]
 8012fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fe2:	f001 fa53 	bl	801448c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3728      	adds	r7, #40	; 0x28
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	2000032c 	.word	0x2000032c

08012ff4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b08a      	sub	sp, #40	; 0x28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	603b      	str	r3, [r7, #0]
 8013000:	4613      	mov	r3, r2
 8013002:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013008:	2300      	movs	r3, #0
 801300a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801300c:	f3ef 8305 	mrs	r3, IPSR
 8013010:	61fb      	str	r3, [r7, #28]
  return(result);
 8013012:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013014:	2b00      	cmp	r3, #0
 8013016:	d10f      	bne.n	8013038 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013018:	f3ef 8310 	mrs	r3, PRIMASK
 801301c:	61bb      	str	r3, [r7, #24]
  return(result);
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d105      	bne.n	8013030 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013024:	f3ef 8311 	mrs	r3, BASEPRI
 8013028:	617b      	str	r3, [r7, #20]
  return(result);
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d02c      	beq.n	801308a <osMessageQueuePut+0x96>
 8013030:	4b28      	ldr	r3, [pc, #160]	; (80130d4 <osMessageQueuePut+0xe0>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b02      	cmp	r3, #2
 8013036:	d128      	bne.n	801308a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013038:	6a3b      	ldr	r3, [r7, #32]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d005      	beq.n	801304a <osMessageQueuePut+0x56>
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d002      	beq.n	801304a <osMessageQueuePut+0x56>
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d003      	beq.n	8013052 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801304a:	f06f 0303 	mvn.w	r3, #3
 801304e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013050:	e039      	b.n	80130c6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013052:	2300      	movs	r3, #0
 8013054:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013056:	f107 0210 	add.w	r2, r7, #16
 801305a:	2300      	movs	r3, #0
 801305c:	68b9      	ldr	r1, [r7, #8]
 801305e:	6a38      	ldr	r0, [r7, #32]
 8013060:	f000 fd24 	bl	8013aac <xQueueGenericSendFromISR>
 8013064:	4603      	mov	r3, r0
 8013066:	2b01      	cmp	r3, #1
 8013068:	d003      	beq.n	8013072 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801306a:	f06f 0302 	mvn.w	r3, #2
 801306e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013070:	e029      	b.n	80130c6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d026      	beq.n	80130c6 <osMessageQueuePut+0xd2>
 8013078:	4b17      	ldr	r3, [pc, #92]	; (80130d8 <osMessageQueuePut+0xe4>)
 801307a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801307e:	601a      	str	r2, [r3, #0]
 8013080:	f3bf 8f4f 	dsb	sy
 8013084:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013088:	e01d      	b.n	80130c6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801308a:	6a3b      	ldr	r3, [r7, #32]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d002      	beq.n	8013096 <osMessageQueuePut+0xa2>
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d103      	bne.n	801309e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013096:	f06f 0303 	mvn.w	r3, #3
 801309a:	627b      	str	r3, [r7, #36]	; 0x24
 801309c:	e014      	b.n	80130c8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801309e:	2300      	movs	r3, #0
 80130a0:	683a      	ldr	r2, [r7, #0]
 80130a2:	68b9      	ldr	r1, [r7, #8]
 80130a4:	6a38      	ldr	r0, [r7, #32]
 80130a6:	f000 fbff 	bl	80138a8 <xQueueGenericSend>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d00b      	beq.n	80130c8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80130b6:	f06f 0301 	mvn.w	r3, #1
 80130ba:	627b      	str	r3, [r7, #36]	; 0x24
 80130bc:	e004      	b.n	80130c8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80130be:	f06f 0302 	mvn.w	r3, #2
 80130c2:	627b      	str	r3, [r7, #36]	; 0x24
 80130c4:	e000      	b.n	80130c8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80130c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3728      	adds	r7, #40	; 0x28
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	2000032c 	.word	0x2000032c
 80130d8:	e000ed04 	.word	0xe000ed04

080130dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80130dc:	b580      	push	{r7, lr}
 80130de:	b08a      	sub	sp, #40	; 0x28
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80130ee:	2300      	movs	r3, #0
 80130f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130f2:	f3ef 8305 	mrs	r3, IPSR
 80130f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80130f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10f      	bne.n	801311e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130fe:	f3ef 8310 	mrs	r3, PRIMASK
 8013102:	61bb      	str	r3, [r7, #24]
  return(result);
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801310a:	f3ef 8311 	mrs	r3, BASEPRI
 801310e:	617b      	str	r3, [r7, #20]
  return(result);
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d02c      	beq.n	8013170 <osMessageQueueGet+0x94>
 8013116:	4b28      	ldr	r3, [pc, #160]	; (80131b8 <osMessageQueueGet+0xdc>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b02      	cmp	r3, #2
 801311c:	d128      	bne.n	8013170 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d005      	beq.n	8013130 <osMessageQueueGet+0x54>
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d002      	beq.n	8013130 <osMessageQueueGet+0x54>
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d003      	beq.n	8013138 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013130:	f06f 0303 	mvn.w	r3, #3
 8013134:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013136:	e038      	b.n	80131aa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013138:	2300      	movs	r3, #0
 801313a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801313c:	f107 0310 	add.w	r3, r7, #16
 8013140:	461a      	mov	r2, r3
 8013142:	68b9      	ldr	r1, [r7, #8]
 8013144:	6a38      	ldr	r0, [r7, #32]
 8013146:	f000 ffd1 	bl	80140ec <xQueueReceiveFromISR>
 801314a:	4603      	mov	r3, r0
 801314c:	2b01      	cmp	r3, #1
 801314e:	d003      	beq.n	8013158 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013150:	f06f 0302 	mvn.w	r3, #2
 8013154:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013156:	e028      	b.n	80131aa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d025      	beq.n	80131aa <osMessageQueueGet+0xce>
 801315e:	4b17      	ldr	r3, [pc, #92]	; (80131bc <osMessageQueueGet+0xe0>)
 8013160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801316e:	e01c      	b.n	80131aa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013170:	6a3b      	ldr	r3, [r7, #32]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d002      	beq.n	801317c <osMessageQueueGet+0xa0>
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d103      	bne.n	8013184 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801317c:	f06f 0303 	mvn.w	r3, #3
 8013180:	627b      	str	r3, [r7, #36]	; 0x24
 8013182:	e013      	b.n	80131ac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013184:	683a      	ldr	r2, [r7, #0]
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	6a38      	ldr	r0, [r7, #32]
 801318a:	f000 fdbd 	bl	8013d08 <xQueueReceive>
 801318e:	4603      	mov	r3, r0
 8013190:	2b01      	cmp	r3, #1
 8013192:	d00b      	beq.n	80131ac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d003      	beq.n	80131a2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801319a:	f06f 0301 	mvn.w	r3, #1
 801319e:	627b      	str	r3, [r7, #36]	; 0x24
 80131a0:	e004      	b.n	80131ac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80131a2:	f06f 0302 	mvn.w	r3, #2
 80131a6:	627b      	str	r3, [r7, #36]	; 0x24
 80131a8:	e000      	b.n	80131ac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3728      	adds	r7, #40	; 0x28
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	2000032c 	.word	0x2000032c
 80131bc:	e000ed04 	.word	0xe000ed04

080131c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4a07      	ldr	r2, [pc, #28]	; (80131ec <vApplicationGetIdleTaskMemory+0x2c>)
 80131d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	4a06      	ldr	r2, [pc, #24]	; (80131f0 <vApplicationGetIdleTaskMemory+0x30>)
 80131d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2280      	movs	r2, #128	; 0x80
 80131dc:	601a      	str	r2, [r3, #0]
}
 80131de:	bf00      	nop
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	20000330 	.word	0x20000330
 80131f0:	2000038c 	.word	0x2000038c

080131f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	4a07      	ldr	r2, [pc, #28]	; (8013220 <vApplicationGetTimerTaskMemory+0x2c>)
 8013204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	4a06      	ldr	r2, [pc, #24]	; (8013224 <vApplicationGetTimerTaskMemory+0x30>)
 801320a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013212:	601a      	str	r2, [r3, #0]
}
 8013214:	bf00      	nop
 8013216:	3714      	adds	r7, #20
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr
 8013220:	2000058c 	.word	0x2000058c
 8013224:	200005e8 	.word	0x200005e8

08013228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f103 0208 	add.w	r2, r3, #8
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f04f 32ff 	mov.w	r2, #4294967295
 8013240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f103 0208 	add.w	r2, r3, #8
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f103 0208 	add.w	r2, r3, #8
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013276:	bf00      	nop
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013282:	b480      	push	{r7}
 8013284:	b085      	sub	sp, #20
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	689a      	ldr	r2, [r3, #8]
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	683a      	ldr	r2, [r7, #0]
 80132a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	683a      	ldr	r2, [r7, #0]
 80132ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	1c5a      	adds	r2, r3, #1
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	601a      	str	r2, [r3, #0]
}
 80132be:	bf00      	nop
 80132c0:	3714      	adds	r7, #20
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr

080132ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132ca:	b480      	push	{r7}
 80132cc:	b085      	sub	sp, #20
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
 80132d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132e0:	d103      	bne.n	80132ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	691b      	ldr	r3, [r3, #16]
 80132e6:	60fb      	str	r3, [r7, #12]
 80132e8:	e00c      	b.n	8013304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	3308      	adds	r3, #8
 80132ee:	60fb      	str	r3, [r7, #12]
 80132f0:	e002      	b.n	80132f8 <vListInsert+0x2e>
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	60fb      	str	r3, [r7, #12]
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	68ba      	ldr	r2, [r7, #8]
 8013300:	429a      	cmp	r2, r3
 8013302:	d2f6      	bcs.n	80132f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	685a      	ldr	r2, [r3, #4]
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	683a      	ldr	r2, [r7, #0]
 801331e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	687a      	ldr	r2, [r7, #4]
 8013324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	601a      	str	r2, [r3, #0]
}
 8013330:	bf00      	nop
 8013332:	3714      	adds	r7, #20
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801333c:	b480      	push	{r7}
 801333e:	b085      	sub	sp, #20
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	691b      	ldr	r3, [r3, #16]
 8013348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	6892      	ldr	r2, [r2, #8]
 8013352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	6852      	ldr	r2, [r2, #4]
 801335c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	687a      	ldr	r2, [r7, #4]
 8013364:	429a      	cmp	r2, r3
 8013366:	d103      	bne.n	8013370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	689a      	ldr	r2, [r3, #8]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	1e5a      	subs	r2, r3, #1
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681b      	ldr	r3, [r3, #0]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3714      	adds	r7, #20
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10b      	bne.n	80133bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	b672      	cpsid	i
 80133aa:	f383 8811 	msr	BASEPRI, r3
 80133ae:	f3bf 8f6f 	isb	sy
 80133b2:	f3bf 8f4f 	dsb	sy
 80133b6:	b662      	cpsie	i
 80133b8:	60bb      	str	r3, [r7, #8]
 80133ba:	e7fe      	b.n	80133ba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80133bc:	f002 fdf4 	bl	8015fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133c8:	68f9      	ldr	r1, [r7, #12]
 80133ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80133cc:	fb01 f303 	mul.w	r3, r1, r3
 80133d0:	441a      	add	r2, r3
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ec:	3b01      	subs	r3, #1
 80133ee:	68f9      	ldr	r1, [r7, #12]
 80133f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80133f2:	fb01 f303 	mul.w	r3, r1, r3
 80133f6:	441a      	add	r2, r3
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	22ff      	movs	r2, #255	; 0xff
 8013400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	22ff      	movs	r2, #255	; 0xff
 8013408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d114      	bne.n	801343c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	691b      	ldr	r3, [r3, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d01a      	beq.n	8013450 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	3310      	adds	r3, #16
 801341e:	4618      	mov	r0, r3
 8013420:	f001 fdb6 	bl	8014f90 <xTaskRemoveFromEventList>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d012      	beq.n	8013450 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801342a:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <xQueueGenericReset+0xd0>)
 801342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013430:	601a      	str	r2, [r3, #0]
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	f3bf 8f6f 	isb	sy
 801343a:	e009      	b.n	8013450 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	3310      	adds	r3, #16
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff fef1 	bl	8013228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	3324      	adds	r3, #36	; 0x24
 801344a:	4618      	mov	r0, r3
 801344c:	f7ff feec 	bl	8013228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013450:	f002 fddc 	bl	801600c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013454:	2301      	movs	r3, #1
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	e000ed04 	.word	0xe000ed04

08013464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013464:	b580      	push	{r7, lr}
 8013466:	b08e      	sub	sp, #56	; 0x38
 8013468:	af02      	add	r7, sp, #8
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	607a      	str	r2, [r7, #4]
 8013470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10b      	bne.n	8013490 <xQueueGenericCreateStatic+0x2c>
 8013478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801347c:	b672      	cpsid	i
 801347e:	f383 8811 	msr	BASEPRI, r3
 8013482:	f3bf 8f6f 	isb	sy
 8013486:	f3bf 8f4f 	dsb	sy
 801348a:	b662      	cpsie	i
 801348c:	62bb      	str	r3, [r7, #40]	; 0x28
 801348e:	e7fe      	b.n	801348e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10b      	bne.n	80134ae <xQueueGenericCreateStatic+0x4a>
 8013496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349a:	b672      	cpsid	i
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	b662      	cpsie	i
 80134aa:	627b      	str	r3, [r7, #36]	; 0x24
 80134ac:	e7fe      	b.n	80134ac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <xQueueGenericCreateStatic+0x56>
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d001      	beq.n	80134be <xQueueGenericCreateStatic+0x5a>
 80134ba:	2301      	movs	r3, #1
 80134bc:	e000      	b.n	80134c0 <xQueueGenericCreateStatic+0x5c>
 80134be:	2300      	movs	r3, #0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d10b      	bne.n	80134dc <xQueueGenericCreateStatic+0x78>
 80134c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c8:	b672      	cpsid	i
 80134ca:	f383 8811 	msr	BASEPRI, r3
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	f3bf 8f4f 	dsb	sy
 80134d6:	b662      	cpsie	i
 80134d8:	623b      	str	r3, [r7, #32]
 80134da:	e7fe      	b.n	80134da <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <xQueueGenericCreateStatic+0x84>
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d101      	bne.n	80134ec <xQueueGenericCreateStatic+0x88>
 80134e8:	2301      	movs	r3, #1
 80134ea:	e000      	b.n	80134ee <xQueueGenericCreateStatic+0x8a>
 80134ec:	2300      	movs	r3, #0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d10b      	bne.n	801350a <xQueueGenericCreateStatic+0xa6>
 80134f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f6:	b672      	cpsid	i
 80134f8:	f383 8811 	msr	BASEPRI, r3
 80134fc:	f3bf 8f6f 	isb	sy
 8013500:	f3bf 8f4f 	dsb	sy
 8013504:	b662      	cpsie	i
 8013506:	61fb      	str	r3, [r7, #28]
 8013508:	e7fe      	b.n	8013508 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801350a:	2350      	movs	r3, #80	; 0x50
 801350c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	2b50      	cmp	r3, #80	; 0x50
 8013512:	d00b      	beq.n	801352c <xQueueGenericCreateStatic+0xc8>
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	b672      	cpsid	i
 801351a:	f383 8811 	msr	BASEPRI, r3
 801351e:	f3bf 8f6f 	isb	sy
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	b662      	cpsie	i
 8013528:	61bb      	str	r3, [r7, #24]
 801352a:	e7fe      	b.n	801352a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801352c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013534:	2b00      	cmp	r3, #0
 8013536:	d00d      	beq.n	8013554 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353a:	2201      	movs	r2, #1
 801353c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013540:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4613      	mov	r3, r2
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	68b9      	ldr	r1, [r7, #8]
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f000 f846 	bl	80135e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013556:	4618      	mov	r0, r3
 8013558:	3730      	adds	r7, #48	; 0x30
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}

0801355e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801355e:	b580      	push	{r7, lr}
 8013560:	b08a      	sub	sp, #40	; 0x28
 8013562:	af02      	add	r7, sp, #8
 8013564:	60f8      	str	r0, [r7, #12]
 8013566:	60b9      	str	r1, [r7, #8]
 8013568:	4613      	mov	r3, r2
 801356a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d10b      	bne.n	801358a <xQueueGenericCreate+0x2c>
 8013572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013576:	b672      	cpsid	i
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	b662      	cpsie	i
 8013586:	613b      	str	r3, [r7, #16]
 8013588:	e7fe      	b.n	8013588 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d102      	bne.n	8013596 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013590:	2300      	movs	r3, #0
 8013592:	61fb      	str	r3, [r7, #28]
 8013594:	e004      	b.n	80135a0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	68ba      	ldr	r2, [r7, #8]
 801359a:	fb02 f303 	mul.w	r3, r2, r3
 801359e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	3350      	adds	r3, #80	; 0x50
 80135a4:	4618      	mov	r0, r3
 80135a6:	f002 fe21 	bl	80161ec <pvPortMalloc>
 80135aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d011      	beq.n	80135d6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	3350      	adds	r3, #80	; 0x50
 80135ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	2200      	movs	r2, #0
 80135c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135c4:	79fa      	ldrb	r2, [r7, #7]
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4613      	mov	r3, r2
 80135cc:	697a      	ldr	r2, [r7, #20]
 80135ce:	68b9      	ldr	r1, [r7, #8]
 80135d0:	68f8      	ldr	r0, [r7, #12]
 80135d2:	f000 f805 	bl	80135e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135d6:	69bb      	ldr	r3, [r7, #24]
	}
 80135d8:	4618      	mov	r0, r3
 80135da:	3720      	adds	r7, #32
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
 80135ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d103      	bne.n	80135fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	69ba      	ldr	r2, [r7, #24]
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	e002      	b.n	8013602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801360e:	2101      	movs	r1, #1
 8013610:	69b8      	ldr	r0, [r7, #24]
 8013612:	f7ff febd 	bl	8013390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	78fa      	ldrb	r2, [r7, #3]
 801361a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801361e:	bf00      	nop
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013626:	b580      	push	{r7, lr}
 8013628:	b082      	sub	sp, #8
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d00e      	beq.n	8013652 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2200      	movs	r2, #0
 801363e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2200      	movs	r2, #0
 8013644:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013646:	2300      	movs	r3, #0
 8013648:	2200      	movs	r2, #0
 801364a:	2100      	movs	r1, #0
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 f92b 	bl	80138a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013652:	bf00      	nop
 8013654:	3708      	adds	r7, #8
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801365a:	b580      	push	{r7, lr}
 801365c:	b086      	sub	sp, #24
 801365e:	af00      	add	r7, sp, #0
 8013660:	4603      	mov	r3, r0
 8013662:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013664:	2301      	movs	r3, #1
 8013666:	617b      	str	r3, [r7, #20]
 8013668:	2300      	movs	r3, #0
 801366a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801366c:	79fb      	ldrb	r3, [r7, #7]
 801366e:	461a      	mov	r2, r3
 8013670:	6939      	ldr	r1, [r7, #16]
 8013672:	6978      	ldr	r0, [r7, #20]
 8013674:	f7ff ff73 	bl	801355e <xQueueGenericCreate>
 8013678:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801367a:	68f8      	ldr	r0, [r7, #12]
 801367c:	f7ff ffd3 	bl	8013626 <prvInitialiseMutex>

		return xNewQueue;
 8013680:	68fb      	ldr	r3, [r7, #12]
	}
 8013682:	4618      	mov	r0, r3
 8013684:	3718      	adds	r7, #24
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801368a:	b580      	push	{r7, lr}
 801368c:	b088      	sub	sp, #32
 801368e:	af02      	add	r7, sp, #8
 8013690:	4603      	mov	r3, r0
 8013692:	6039      	str	r1, [r7, #0]
 8013694:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013696:	2301      	movs	r3, #1
 8013698:	617b      	str	r3, [r7, #20]
 801369a:	2300      	movs	r3, #0
 801369c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801369e:	79fb      	ldrb	r3, [r7, #7]
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	2200      	movs	r2, #0
 80136a6:	6939      	ldr	r1, [r7, #16]
 80136a8:	6978      	ldr	r0, [r7, #20]
 80136aa:	f7ff fedb 	bl	8013464 <xQueueGenericCreateStatic>
 80136ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f7ff ffb8 	bl	8013626 <prvInitialiseMutex>

		return xNewQueue;
 80136b6:	68fb      	ldr	r3, [r7, #12]
	}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 80136cc:	f002 fc6c 	bl	8015fa8 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d103      	bne.n	80136e0 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	689b      	ldr	r3, [r3, #8]
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	e001      	b.n	80136e4 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 80136e0:	2300      	movs	r3, #0
 80136e2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80136e4:	f002 fc92 	bl	801600c <vPortExitCritical>

		return pxReturn;
 80136e8:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 80136ea:	4618      	mov	r0, r3
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80136f2:	b590      	push	{r4, r7, lr}
 80136f4:	b087      	sub	sp, #28
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d10b      	bne.n	801371c <xQueueGiveMutexRecursive+0x2a>
 8013704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013708:	b672      	cpsid	i
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	b662      	cpsie	i
 8013718:	60fb      	str	r3, [r7, #12]
 801371a:	e7fe      	b.n	801371a <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	689c      	ldr	r4, [r3, #8]
 8013720:	f001 fdf4 	bl	801530c <xTaskGetCurrentTaskHandle>
 8013724:	4603      	mov	r3, r0
 8013726:	429c      	cmp	r4, r3
 8013728:	d111      	bne.n	801374e <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	1e5a      	subs	r2, r3, #1
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d105      	bne.n	8013748 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801373c:	2300      	movs	r3, #0
 801373e:	2200      	movs	r2, #0
 8013740:	2100      	movs	r1, #0
 8013742:	6938      	ldr	r0, [r7, #16]
 8013744:	f000 f8b0 	bl	80138a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8013748:	2301      	movs	r3, #1
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	e001      	b.n	8013752 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801374e:	2300      	movs	r3, #0
 8013750:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8013752:	697b      	ldr	r3, [r7, #20]
	}
 8013754:	4618      	mov	r0, r3
 8013756:	371c      	adds	r7, #28
 8013758:	46bd      	mov	sp, r7
 801375a:	bd90      	pop	{r4, r7, pc}

0801375c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801375c:	b590      	push	{r4, r7, lr}
 801375e:	b087      	sub	sp, #28
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10b      	bne.n	8013788 <xQueueTakeMutexRecursive+0x2c>
 8013770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013774:	b672      	cpsid	i
 8013776:	f383 8811 	msr	BASEPRI, r3
 801377a:	f3bf 8f6f 	isb	sy
 801377e:	f3bf 8f4f 	dsb	sy
 8013782:	b662      	cpsie	i
 8013784:	60fb      	str	r3, [r7, #12]
 8013786:	e7fe      	b.n	8013786 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	689c      	ldr	r4, [r3, #8]
 801378c:	f001 fdbe 	bl	801530c <xTaskGetCurrentTaskHandle>
 8013790:	4603      	mov	r3, r0
 8013792:	429c      	cmp	r4, r3
 8013794:	d107      	bne.n	80137a6 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80137a0:	2301      	movs	r3, #1
 80137a2:	617b      	str	r3, [r7, #20]
 80137a4:	e00c      	b.n	80137c0 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6938      	ldr	r0, [r7, #16]
 80137aa:	f000 fb8f 	bl	8013ecc <xQueueSemaphoreTake>
 80137ae:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d004      	beq.n	80137c0 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80137c0:	697b      	ldr	r3, [r7, #20]
	}
 80137c2:	4618      	mov	r0, r3
 80137c4:	371c      	adds	r7, #28
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd90      	pop	{r4, r7, pc}

080137ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80137ca:	b580      	push	{r7, lr}
 80137cc:	b08a      	sub	sp, #40	; 0x28
 80137ce:	af02      	add	r7, sp, #8
 80137d0:	60f8      	str	r0, [r7, #12]
 80137d2:	60b9      	str	r1, [r7, #8]
 80137d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10b      	bne.n	80137f4 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80137dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e0:	b672      	cpsid	i
 80137e2:	f383 8811 	msr	BASEPRI, r3
 80137e6:	f3bf 8f6f 	isb	sy
 80137ea:	f3bf 8f4f 	dsb	sy
 80137ee:	b662      	cpsie	i
 80137f0:	61bb      	str	r3, [r7, #24]
 80137f2:	e7fe      	b.n	80137f2 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80137f4:	68ba      	ldr	r2, [r7, #8]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d90b      	bls.n	8013814 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80137fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013800:	b672      	cpsid	i
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	b662      	cpsie	i
 8013810:	617b      	str	r3, [r7, #20]
 8013812:	e7fe      	b.n	8013812 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013814:	2302      	movs	r3, #2
 8013816:	9300      	str	r3, [sp, #0]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2200      	movs	r2, #0
 801381c:	2100      	movs	r1, #0
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	f7ff fe20 	bl	8013464 <xQueueGenericCreateStatic>
 8013824:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013826:	69fb      	ldr	r3, [r7, #28]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d002      	beq.n	8013832 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013832:	69fb      	ldr	r3, [r7, #28]
	}
 8013834:	4618      	mov	r0, r3
 8013836:	3720      	adds	r7, #32
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10b      	bne.n	8013864 <xQueueCreateCountingSemaphore+0x28>
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	b672      	cpsid	i
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	b662      	cpsie	i
 8013860:	613b      	str	r3, [r7, #16]
 8013862:	e7fe      	b.n	8013862 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013864:	683a      	ldr	r2, [r7, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	429a      	cmp	r2, r3
 801386a:	d90b      	bls.n	8013884 <xQueueCreateCountingSemaphore+0x48>
 801386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013870:	b672      	cpsid	i
 8013872:	f383 8811 	msr	BASEPRI, r3
 8013876:	f3bf 8f6f 	isb	sy
 801387a:	f3bf 8f4f 	dsb	sy
 801387e:	b662      	cpsie	i
 8013880:	60fb      	str	r3, [r7, #12]
 8013882:	e7fe      	b.n	8013882 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013884:	2202      	movs	r2, #2
 8013886:	2100      	movs	r1, #0
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7ff fe68 	bl	801355e <xQueueGenericCreate>
 801388e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d002      	beq.n	801389c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	683a      	ldr	r2, [r7, #0]
 801389a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801389c:	697b      	ldr	r3, [r7, #20]
	}
 801389e:	4618      	mov	r0, r3
 80138a0:	3718      	adds	r7, #24
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
	...

080138a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08e      	sub	sp, #56	; 0x38
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
 80138b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138b6:	2300      	movs	r3, #0
 80138b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d10b      	bne.n	80138dc <xQueueGenericSend+0x34>
 80138c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c8:	b672      	cpsid	i
 80138ca:	f383 8811 	msr	BASEPRI, r3
 80138ce:	f3bf 8f6f 	isb	sy
 80138d2:	f3bf 8f4f 	dsb	sy
 80138d6:	b662      	cpsie	i
 80138d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80138da:	e7fe      	b.n	80138da <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d103      	bne.n	80138ea <xQueueGenericSend+0x42>
 80138e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d101      	bne.n	80138ee <xQueueGenericSend+0x46>
 80138ea:	2301      	movs	r3, #1
 80138ec:	e000      	b.n	80138f0 <xQueueGenericSend+0x48>
 80138ee:	2300      	movs	r3, #0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d10b      	bne.n	801390c <xQueueGenericSend+0x64>
 80138f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f8:	b672      	cpsid	i
 80138fa:	f383 8811 	msr	BASEPRI, r3
 80138fe:	f3bf 8f6f 	isb	sy
 8013902:	f3bf 8f4f 	dsb	sy
 8013906:	b662      	cpsie	i
 8013908:	627b      	str	r3, [r7, #36]	; 0x24
 801390a:	e7fe      	b.n	801390a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	2b02      	cmp	r3, #2
 8013910:	d103      	bne.n	801391a <xQueueGenericSend+0x72>
 8013912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013916:	2b01      	cmp	r3, #1
 8013918:	d101      	bne.n	801391e <xQueueGenericSend+0x76>
 801391a:	2301      	movs	r3, #1
 801391c:	e000      	b.n	8013920 <xQueueGenericSend+0x78>
 801391e:	2300      	movs	r3, #0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d10b      	bne.n	801393c <xQueueGenericSend+0x94>
 8013924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013928:	b672      	cpsid	i
 801392a:	f383 8811 	msr	BASEPRI, r3
 801392e:	f3bf 8f6f 	isb	sy
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	b662      	cpsie	i
 8013938:	623b      	str	r3, [r7, #32]
 801393a:	e7fe      	b.n	801393a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801393c:	f001 fcf6 	bl	801532c <xTaskGetSchedulerState>
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d102      	bne.n	801394c <xQueueGenericSend+0xa4>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d101      	bne.n	8013950 <xQueueGenericSend+0xa8>
 801394c:	2301      	movs	r3, #1
 801394e:	e000      	b.n	8013952 <xQueueGenericSend+0xaa>
 8013950:	2300      	movs	r3, #0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d10b      	bne.n	801396e <xQueueGenericSend+0xc6>
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	b672      	cpsid	i
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	f3bf 8f6f 	isb	sy
 8013964:	f3bf 8f4f 	dsb	sy
 8013968:	b662      	cpsie	i
 801396a:	61fb      	str	r3, [r7, #28]
 801396c:	e7fe      	b.n	801396c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801396e:	f002 fb1b 	bl	8015fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397a:	429a      	cmp	r2, r3
 801397c:	d302      	bcc.n	8013984 <xQueueGenericSend+0xdc>
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b02      	cmp	r3, #2
 8013982:	d129      	bne.n	80139d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013984:	683a      	ldr	r2, [r7, #0]
 8013986:	68b9      	ldr	r1, [r7, #8]
 8013988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398a:	f000 fc6e 	bl	801426a <prvCopyDataToQueue>
 801398e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013994:	2b00      	cmp	r3, #0
 8013996:	d010      	beq.n	80139ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	3324      	adds	r3, #36	; 0x24
 801399c:	4618      	mov	r0, r3
 801399e:	f001 faf7 	bl	8014f90 <xTaskRemoveFromEventList>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d013      	beq.n	80139d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139a8:	4b3f      	ldr	r3, [pc, #252]	; (8013aa8 <xQueueGenericSend+0x200>)
 80139aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ae:	601a      	str	r2, [r3, #0]
 80139b0:	f3bf 8f4f 	dsb	sy
 80139b4:	f3bf 8f6f 	isb	sy
 80139b8:	e00a      	b.n	80139d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d007      	beq.n	80139d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139c0:	4b39      	ldr	r3, [pc, #228]	; (8013aa8 <xQueueGenericSend+0x200>)
 80139c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139c6:	601a      	str	r2, [r3, #0]
 80139c8:	f3bf 8f4f 	dsb	sy
 80139cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80139d0:	f002 fb1c 	bl	801600c <vPortExitCritical>
				return pdPASS;
 80139d4:	2301      	movs	r3, #1
 80139d6:	e063      	b.n	8013aa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d103      	bne.n	80139e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139de:	f002 fb15 	bl	801600c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80139e2:	2300      	movs	r3, #0
 80139e4:	e05c      	b.n	8013aa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d106      	bne.n	80139fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139ec:	f107 0314 	add.w	r3, r7, #20
 80139f0:	4618      	mov	r0, r3
 80139f2:	f001 fb31 	bl	8015058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139f6:	2301      	movs	r3, #1
 80139f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139fa:	f002 fb07 	bl	801600c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139fe:	f001 f88f 	bl	8014b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a02:	f002 fad1 	bl	8015fa8 <vPortEnterCritical>
 8013a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a0c:	b25b      	sxtb	r3, r3
 8013a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a12:	d103      	bne.n	8013a1c <xQueueGenericSend+0x174>
 8013a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a16:	2200      	movs	r2, #0
 8013a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a22:	b25b      	sxtb	r3, r3
 8013a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a28:	d103      	bne.n	8013a32 <xQueueGenericSend+0x18a>
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a32:	f002 faeb 	bl	801600c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a36:	1d3a      	adds	r2, r7, #4
 8013a38:	f107 0314 	add.w	r3, r7, #20
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f001 fb20 	bl	8015084 <xTaskCheckForTimeOut>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d124      	bne.n	8013a94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a4c:	f000 fd05 	bl	801445a <prvIsQueueFull>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d018      	beq.n	8013a88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	3310      	adds	r3, #16
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f001 fa44 	bl	8014eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a66:	f000 fc90 	bl	801438a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a6a:	f001 f867 	bl	8014b3c <xTaskResumeAll>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f47f af7c 	bne.w	801396e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013a76:	4b0c      	ldr	r3, [pc, #48]	; (8013aa8 <xQueueGenericSend+0x200>)
 8013a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a7c:	601a      	str	r2, [r3, #0]
 8013a7e:	f3bf 8f4f 	dsb	sy
 8013a82:	f3bf 8f6f 	isb	sy
 8013a86:	e772      	b.n	801396e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a8a:	f000 fc7e 	bl	801438a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a8e:	f001 f855 	bl	8014b3c <xTaskResumeAll>
 8013a92:	e76c      	b.n	801396e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a96:	f000 fc78 	bl	801438a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a9a:	f001 f84f 	bl	8014b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3738      	adds	r7, #56	; 0x38
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	e000ed04 	.word	0xe000ed04

08013aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b08e      	sub	sp, #56	; 0x38
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10b      	bne.n	8013adc <xQueueGenericSendFromISR+0x30>
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	b672      	cpsid	i
 8013aca:	f383 8811 	msr	BASEPRI, r3
 8013ace:	f3bf 8f6f 	isb	sy
 8013ad2:	f3bf 8f4f 	dsb	sy
 8013ad6:	b662      	cpsie	i
 8013ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8013ada:	e7fe      	b.n	8013ada <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d103      	bne.n	8013aea <xQueueGenericSendFromISR+0x3e>
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d101      	bne.n	8013aee <xQueueGenericSendFromISR+0x42>
 8013aea:	2301      	movs	r3, #1
 8013aec:	e000      	b.n	8013af0 <xQueueGenericSendFromISR+0x44>
 8013aee:	2300      	movs	r3, #0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10b      	bne.n	8013b0c <xQueueGenericSendFromISR+0x60>
 8013af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af8:	b672      	cpsid	i
 8013afa:	f383 8811 	msr	BASEPRI, r3
 8013afe:	f3bf 8f6f 	isb	sy
 8013b02:	f3bf 8f4f 	dsb	sy
 8013b06:	b662      	cpsie	i
 8013b08:	623b      	str	r3, [r7, #32]
 8013b0a:	e7fe      	b.n	8013b0a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2b02      	cmp	r3, #2
 8013b10:	d103      	bne.n	8013b1a <xQueueGenericSendFromISR+0x6e>
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d101      	bne.n	8013b1e <xQueueGenericSendFromISR+0x72>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e000      	b.n	8013b20 <xQueueGenericSendFromISR+0x74>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d10b      	bne.n	8013b3c <xQueueGenericSendFromISR+0x90>
 8013b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b28:	b672      	cpsid	i
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	b662      	cpsie	i
 8013b38:	61fb      	str	r3, [r7, #28]
 8013b3a:	e7fe      	b.n	8013b3a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b3c:	f002 fb14 	bl	8016168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b40:	f3ef 8211 	mrs	r2, BASEPRI
 8013b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b48:	b672      	cpsid	i
 8013b4a:	f383 8811 	msr	BASEPRI, r3
 8013b4e:	f3bf 8f6f 	isb	sy
 8013b52:	f3bf 8f4f 	dsb	sy
 8013b56:	b662      	cpsie	i
 8013b58:	61ba      	str	r2, [r7, #24]
 8013b5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d302      	bcc.n	8013b72 <xQueueGenericSendFromISR+0xc6>
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	2b02      	cmp	r3, #2
 8013b70:	d12c      	bne.n	8013bcc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	68b9      	ldr	r1, [r7, #8]
 8013b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b82:	f000 fb72 	bl	801426a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b8e:	d112      	bne.n	8013bb6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d016      	beq.n	8013bc6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9a:	3324      	adds	r3, #36	; 0x24
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f001 f9f7 	bl	8014f90 <xTaskRemoveFromEventList>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d00e      	beq.n	8013bc6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00b      	beq.n	8013bc6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	601a      	str	r2, [r3, #0]
 8013bb4:	e007      	b.n	8013bc6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013bba:	3301      	adds	r3, #1
 8013bbc:	b2db      	uxtb	r3, r3
 8013bbe:	b25a      	sxtb	r2, r3
 8013bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013bca:	e001      	b.n	8013bd0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	637b      	str	r3, [r7, #52]	; 0x34
 8013bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3738      	adds	r7, #56	; 0x38
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b08e      	sub	sp, #56	; 0x38
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10b      	bne.n	8013c10 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfc:	b672      	cpsid	i
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	b662      	cpsie	i
 8013c0c:	623b      	str	r3, [r7, #32]
 8013c0e:	e7fe      	b.n	8013c0e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00b      	beq.n	8013c30 <xQueueGiveFromISR+0x4c>
 8013c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1c:	b672      	cpsid	i
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	b662      	cpsie	i
 8013c2c:	61fb      	str	r3, [r7, #28]
 8013c2e:	e7fe      	b.n	8013c2e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d103      	bne.n	8013c40 <xQueueGiveFromISR+0x5c>
 8013c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3a:	689b      	ldr	r3, [r3, #8]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d101      	bne.n	8013c44 <xQueueGiveFromISR+0x60>
 8013c40:	2301      	movs	r3, #1
 8013c42:	e000      	b.n	8013c46 <xQueueGiveFromISR+0x62>
 8013c44:	2300      	movs	r3, #0
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10b      	bne.n	8013c62 <xQueueGiveFromISR+0x7e>
 8013c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4e:	b672      	cpsid	i
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	b662      	cpsie	i
 8013c5e:	61bb      	str	r3, [r7, #24]
 8013c60:	e7fe      	b.n	8013c60 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c62:	f002 fa81 	bl	8016168 <vPortValidateInterruptPriority>
	__asm volatile
 8013c66:	f3ef 8211 	mrs	r2, BASEPRI
 8013c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6e:	b672      	cpsid	i
 8013c70:	f383 8811 	msr	BASEPRI, r3
 8013c74:	f3bf 8f6f 	isb	sy
 8013c78:	f3bf 8f4f 	dsb	sy
 8013c7c:	b662      	cpsie	i
 8013c7e:	617a      	str	r2, [r7, #20]
 8013c80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013c82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d22b      	bcs.n	8013cee <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	1c5a      	adds	r2, r3, #1
 8013ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb0:	d112      	bne.n	8013cd8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d016      	beq.n	8013ce8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cbc:	3324      	adds	r3, #36	; 0x24
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f001 f966 	bl	8014f90 <xTaskRemoveFromEventList>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00e      	beq.n	8013ce8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00b      	beq.n	8013ce8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	601a      	str	r2, [r3, #0]
 8013cd6:	e007      	b.n	8013ce8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cdc:	3301      	adds	r3, #1
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	b25a      	sxtb	r2, r3
 8013ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	637b      	str	r3, [r7, #52]	; 0x34
 8013cec:	e001      	b.n	8013cf2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8013cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3738      	adds	r7, #56	; 0x38
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
	...

08013d08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b08c      	sub	sp, #48	; 0x30
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013d14:	2300      	movs	r3, #0
 8013d16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d10b      	bne.n	8013d3a <xQueueReceive+0x32>
	__asm volatile
 8013d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d26:	b672      	cpsid	i
 8013d28:	f383 8811 	msr	BASEPRI, r3
 8013d2c:	f3bf 8f6f 	isb	sy
 8013d30:	f3bf 8f4f 	dsb	sy
 8013d34:	b662      	cpsie	i
 8013d36:	623b      	str	r3, [r7, #32]
 8013d38:	e7fe      	b.n	8013d38 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d103      	bne.n	8013d48 <xQueueReceive+0x40>
 8013d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d101      	bne.n	8013d4c <xQueueReceive+0x44>
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e000      	b.n	8013d4e <xQueueReceive+0x46>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d10b      	bne.n	8013d6a <xQueueReceive+0x62>
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	b672      	cpsid	i
 8013d58:	f383 8811 	msr	BASEPRI, r3
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	b662      	cpsie	i
 8013d66:	61fb      	str	r3, [r7, #28]
 8013d68:	e7fe      	b.n	8013d68 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d6a:	f001 fadf 	bl	801532c <xTaskGetSchedulerState>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d102      	bne.n	8013d7a <xQueueReceive+0x72>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d101      	bne.n	8013d7e <xQueueReceive+0x76>
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	e000      	b.n	8013d80 <xQueueReceive+0x78>
 8013d7e:	2300      	movs	r3, #0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10b      	bne.n	8013d9c <xQueueReceive+0x94>
 8013d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d88:	b672      	cpsid	i
 8013d8a:	f383 8811 	msr	BASEPRI, r3
 8013d8e:	f3bf 8f6f 	isb	sy
 8013d92:	f3bf 8f4f 	dsb	sy
 8013d96:	b662      	cpsie	i
 8013d98:	61bb      	str	r3, [r7, #24]
 8013d9a:	e7fe      	b.n	8013d9a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d9c:	f002 f904 	bl	8015fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013da4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d01f      	beq.n	8013dec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013dac:	68b9      	ldr	r1, [r7, #8]
 8013dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013db0:	f000 fac5 	bl	801433e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db6:	1e5a      	subs	r2, r3, #1
 8013db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	691b      	ldr	r3, [r3, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d00f      	beq.n	8013de4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc6:	3310      	adds	r3, #16
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f001 f8e1 	bl	8014f90 <xTaskRemoveFromEventList>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d007      	beq.n	8013de4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013dd4:	4b3c      	ldr	r3, [pc, #240]	; (8013ec8 <xQueueReceive+0x1c0>)
 8013dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dda:	601a      	str	r2, [r3, #0]
 8013ddc:	f3bf 8f4f 	dsb	sy
 8013de0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013de4:	f002 f912 	bl	801600c <vPortExitCritical>
				return pdPASS;
 8013de8:	2301      	movs	r3, #1
 8013dea:	e069      	b.n	8013ec0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d103      	bne.n	8013dfa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013df2:	f002 f90b 	bl	801600c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013df6:	2300      	movs	r3, #0
 8013df8:	e062      	b.n	8013ec0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d106      	bne.n	8013e0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e00:	f107 0310 	add.w	r3, r7, #16
 8013e04:	4618      	mov	r0, r3
 8013e06:	f001 f927 	bl	8015058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013e0e:	f002 f8fd 	bl	801600c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e12:	f000 fe85 	bl	8014b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e16:	f002 f8c7 	bl	8015fa8 <vPortEnterCritical>
 8013e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e20:	b25b      	sxtb	r3, r3
 8013e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e26:	d103      	bne.n	8013e30 <xQueueReceive+0x128>
 8013e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e36:	b25b      	sxtb	r3, r3
 8013e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e3c:	d103      	bne.n	8013e46 <xQueueReceive+0x13e>
 8013e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e40:	2200      	movs	r2, #0
 8013e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e46:	f002 f8e1 	bl	801600c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e4a:	1d3a      	adds	r2, r7, #4
 8013e4c:	f107 0310 	add.w	r3, r7, #16
 8013e50:	4611      	mov	r1, r2
 8013e52:	4618      	mov	r0, r3
 8013e54:	f001 f916 	bl	8015084 <xTaskCheckForTimeOut>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d123      	bne.n	8013ea6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e60:	f000 fae5 	bl	801442e <prvIsQueueEmpty>
 8013e64:	4603      	mov	r3, r0
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d017      	beq.n	8013e9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6c:	3324      	adds	r3, #36	; 0x24
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	4611      	mov	r1, r2
 8013e72:	4618      	mov	r0, r3
 8013e74:	f001 f83a 	bl	8014eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e7a:	f000 fa86 	bl	801438a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e7e:	f000 fe5d 	bl	8014b3c <xTaskResumeAll>
 8013e82:	4603      	mov	r3, r0
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d189      	bne.n	8013d9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013e88:	4b0f      	ldr	r3, [pc, #60]	; (8013ec8 <xQueueReceive+0x1c0>)
 8013e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e8e:	601a      	str	r2, [r3, #0]
 8013e90:	f3bf 8f4f 	dsb	sy
 8013e94:	f3bf 8f6f 	isb	sy
 8013e98:	e780      	b.n	8013d9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e9c:	f000 fa75 	bl	801438a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ea0:	f000 fe4c 	bl	8014b3c <xTaskResumeAll>
 8013ea4:	e77a      	b.n	8013d9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ea8:	f000 fa6f 	bl	801438a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013eac:	f000 fe46 	bl	8014b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eb2:	f000 fabc 	bl	801442e <prvIsQueueEmpty>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f43f af6f 	beq.w	8013d9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013ebe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3730      	adds	r7, #48	; 0x30
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	e000ed04 	.word	0xe000ed04

08013ecc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b08e      	sub	sp, #56	; 0x38
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d10b      	bne.n	8013f00 <xQueueSemaphoreTake+0x34>
 8013ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eec:	b672      	cpsid	i
 8013eee:	f383 8811 	msr	BASEPRI, r3
 8013ef2:	f3bf 8f6f 	isb	sy
 8013ef6:	f3bf 8f4f 	dsb	sy
 8013efa:	b662      	cpsie	i
 8013efc:	623b      	str	r3, [r7, #32]
 8013efe:	e7fe      	b.n	8013efe <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00b      	beq.n	8013f20 <xQueueSemaphoreTake+0x54>
 8013f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0c:	b672      	cpsid	i
 8013f0e:	f383 8811 	msr	BASEPRI, r3
 8013f12:	f3bf 8f6f 	isb	sy
 8013f16:	f3bf 8f4f 	dsb	sy
 8013f1a:	b662      	cpsie	i
 8013f1c:	61fb      	str	r3, [r7, #28]
 8013f1e:	e7fe      	b.n	8013f1e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f20:	f001 fa04 	bl	801532c <xTaskGetSchedulerState>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d102      	bne.n	8013f30 <xQueueSemaphoreTake+0x64>
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d101      	bne.n	8013f34 <xQueueSemaphoreTake+0x68>
 8013f30:	2301      	movs	r3, #1
 8013f32:	e000      	b.n	8013f36 <xQueueSemaphoreTake+0x6a>
 8013f34:	2300      	movs	r3, #0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10b      	bne.n	8013f52 <xQueueSemaphoreTake+0x86>
 8013f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3e:	b672      	cpsid	i
 8013f40:	f383 8811 	msr	BASEPRI, r3
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	f3bf 8f4f 	dsb	sy
 8013f4c:	b662      	cpsie	i
 8013f4e:	61bb      	str	r3, [r7, #24]
 8013f50:	e7fe      	b.n	8013f50 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013f52:	f002 f829 	bl	8015fa8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f5a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d024      	beq.n	8013fac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	1e5a      	subs	r2, r3, #1
 8013f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f68:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d104      	bne.n	8013f7c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013f72:	f001 fb55 	bl	8015620 <pvTaskIncrementMutexHeldCount>
 8013f76:	4602      	mov	r2, r0
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7e:	691b      	ldr	r3, [r3, #16]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00f      	beq.n	8013fa4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f86:	3310      	adds	r3, #16
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f001 f801 	bl	8014f90 <xTaskRemoveFromEventList>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d007      	beq.n	8013fa4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013f94:	4b54      	ldr	r3, [pc, #336]	; (80140e8 <xQueueSemaphoreTake+0x21c>)
 8013f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f9a:	601a      	str	r2, [r3, #0]
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013fa4:	f002 f832 	bl	801600c <vPortExitCritical>
				return pdPASS;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e098      	b.n	80140de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d112      	bne.n	8013fd8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00b      	beq.n	8013fd0 <xQueueSemaphoreTake+0x104>
 8013fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fbc:	b672      	cpsid	i
 8013fbe:	f383 8811 	msr	BASEPRI, r3
 8013fc2:	f3bf 8f6f 	isb	sy
 8013fc6:	f3bf 8f4f 	dsb	sy
 8013fca:	b662      	cpsie	i
 8013fcc:	617b      	str	r3, [r7, #20]
 8013fce:	e7fe      	b.n	8013fce <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013fd0:	f002 f81c 	bl	801600c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	e082      	b.n	80140de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d106      	bne.n	8013fec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013fde:	f107 030c 	add.w	r3, r7, #12
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f001 f838 	bl	8015058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013fec:	f002 f80e 	bl	801600c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ff0:	f000 fd96 	bl	8014b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ff4:	f001 ffd8 	bl	8015fa8 <vPortEnterCritical>
 8013ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ffe:	b25b      	sxtb	r3, r3
 8014000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014004:	d103      	bne.n	801400e <xQueueSemaphoreTake+0x142>
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	2200      	movs	r2, #0
 801400a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014014:	b25b      	sxtb	r3, r3
 8014016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801401a:	d103      	bne.n	8014024 <xQueueSemaphoreTake+0x158>
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	2200      	movs	r2, #0
 8014020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014024:	f001 fff2 	bl	801600c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014028:	463a      	mov	r2, r7
 801402a:	f107 030c 	add.w	r3, r7, #12
 801402e:	4611      	mov	r1, r2
 8014030:	4618      	mov	r0, r3
 8014032:	f001 f827 	bl	8015084 <xTaskCheckForTimeOut>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d132      	bne.n	80140a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801403c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801403e:	f000 f9f6 	bl	801442e <prvIsQueueEmpty>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d026      	beq.n	8014096 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d109      	bne.n	8014064 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014050:	f001 ffaa 	bl	8015fa8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014056:	689b      	ldr	r3, [r3, #8]
 8014058:	4618      	mov	r0, r3
 801405a:	f001 f985 	bl	8015368 <xTaskPriorityInherit>
 801405e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014060:	f001 ffd4 	bl	801600c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014066:	3324      	adds	r3, #36	; 0x24
 8014068:	683a      	ldr	r2, [r7, #0]
 801406a:	4611      	mov	r1, r2
 801406c:	4618      	mov	r0, r3
 801406e:	f000 ff3d 	bl	8014eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014074:	f000 f989 	bl	801438a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014078:	f000 fd60 	bl	8014b3c <xTaskResumeAll>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	f47f af67 	bne.w	8013f52 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014084:	4b18      	ldr	r3, [pc, #96]	; (80140e8 <xQueueSemaphoreTake+0x21c>)
 8014086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	f3bf 8f4f 	dsb	sy
 8014090:	f3bf 8f6f 	isb	sy
 8014094:	e75d      	b.n	8013f52 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014098:	f000 f977 	bl	801438a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801409c:	f000 fd4e 	bl	8014b3c <xTaskResumeAll>
 80140a0:	e757      	b.n	8013f52 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80140a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140a4:	f000 f971 	bl	801438a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140a8:	f000 fd48 	bl	8014b3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140ae:	f000 f9be 	bl	801442e <prvIsQueueEmpty>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f43f af4c 	beq.w	8013f52 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80140ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00d      	beq.n	80140dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80140c0:	f001 ff72 	bl	8015fa8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80140c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140c6:	f000 f8b8 	bl	801423a <prvGetDisinheritPriorityAfterTimeout>
 80140ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80140cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ce:	689b      	ldr	r3, [r3, #8]
 80140d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140d2:	4618      	mov	r0, r3
 80140d4:	f001 fa20 	bl	8015518 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80140d8:	f001 ff98 	bl	801600c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80140dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3738      	adds	r7, #56	; 0x38
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	e000ed04 	.word	0xe000ed04

080140ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08e      	sub	sp, #56	; 0x38
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80140fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d10b      	bne.n	801411a <xQueueReceiveFromISR+0x2e>
 8014102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014106:	b672      	cpsid	i
 8014108:	f383 8811 	msr	BASEPRI, r3
 801410c:	f3bf 8f6f 	isb	sy
 8014110:	f3bf 8f4f 	dsb	sy
 8014114:	b662      	cpsie	i
 8014116:	623b      	str	r3, [r7, #32]
 8014118:	e7fe      	b.n	8014118 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d103      	bne.n	8014128 <xQueueReceiveFromISR+0x3c>
 8014120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014124:	2b00      	cmp	r3, #0
 8014126:	d101      	bne.n	801412c <xQueueReceiveFromISR+0x40>
 8014128:	2301      	movs	r3, #1
 801412a:	e000      	b.n	801412e <xQueueReceiveFromISR+0x42>
 801412c:	2300      	movs	r3, #0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d10b      	bne.n	801414a <xQueueReceiveFromISR+0x5e>
 8014132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014136:	b672      	cpsid	i
 8014138:	f383 8811 	msr	BASEPRI, r3
 801413c:	f3bf 8f6f 	isb	sy
 8014140:	f3bf 8f4f 	dsb	sy
 8014144:	b662      	cpsie	i
 8014146:	61fb      	str	r3, [r7, #28]
 8014148:	e7fe      	b.n	8014148 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801414a:	f002 f80d 	bl	8016168 <vPortValidateInterruptPriority>
	__asm volatile
 801414e:	f3ef 8211 	mrs	r2, BASEPRI
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	b672      	cpsid	i
 8014158:	f383 8811 	msr	BASEPRI, r3
 801415c:	f3bf 8f6f 	isb	sy
 8014160:	f3bf 8f4f 	dsb	sy
 8014164:	b662      	cpsie	i
 8014166:	61ba      	str	r2, [r7, #24]
 8014168:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801416a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801416c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014172:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014176:	2b00      	cmp	r3, #0
 8014178:	d02f      	beq.n	80141da <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014184:	68b9      	ldr	r1, [r7, #8]
 8014186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014188:	f000 f8d9 	bl	801433e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801418e:	1e5a      	subs	r2, r3, #1
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801419c:	d112      	bne.n	80141c4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d016      	beq.n	80141d4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a8:	3310      	adds	r3, #16
 80141aa:	4618      	mov	r0, r3
 80141ac:	f000 fef0 	bl	8014f90 <xTaskRemoveFromEventList>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d00e      	beq.n	80141d4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00b      	beq.n	80141d4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2201      	movs	r2, #1
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	e007      	b.n	80141d4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80141c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141c8:	3301      	adds	r3, #1
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	b25a      	sxtb	r2, r3
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80141d4:	2301      	movs	r3, #1
 80141d6:	637b      	str	r3, [r7, #52]	; 0x34
 80141d8:	e001      	b.n	80141de <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80141da:	2300      	movs	r3, #0
 80141dc:	637b      	str	r3, [r7, #52]	; 0x34
 80141de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80141e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3738      	adds	r7, #56	; 0x38
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80141f2:	b580      	push	{r7, lr}
 80141f4:	b084      	sub	sp, #16
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10b      	bne.n	801421c <vQueueDelete+0x2a>
	__asm volatile
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	b672      	cpsid	i
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	b662      	cpsie	i
 8014218:	60bb      	str	r3, [r7, #8]
 801421a:	e7fe      	b.n	801421a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801421c:	68f8      	ldr	r0, [r7, #12]
 801421e:	f000 f95d 	bl	80144dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014228:	2b00      	cmp	r3, #0
 801422a:	d102      	bne.n	8014232 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f002 f8a5 	bl	801637c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014232:	bf00      	nop
 8014234:	3710      	adds	r7, #16
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801423a:	b480      	push	{r7}
 801423c:	b085      	sub	sp, #20
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014246:	2b00      	cmp	r3, #0
 8014248:	d006      	beq.n	8014258 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014254:	60fb      	str	r3, [r7, #12]
 8014256:	e001      	b.n	801425c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014258:	2300      	movs	r3, #0
 801425a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801425c:	68fb      	ldr	r3, [r7, #12]
	}
 801425e:	4618      	mov	r0, r3
 8014260:	3714      	adds	r7, #20
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr

0801426a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b086      	sub	sp, #24
 801426e:	af00      	add	r7, sp, #0
 8014270:	60f8      	str	r0, [r7, #12]
 8014272:	60b9      	str	r1, [r7, #8]
 8014274:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014276:	2300      	movs	r3, #0
 8014278:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801427e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014284:	2b00      	cmp	r3, #0
 8014286:	d10d      	bne.n	80142a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d14d      	bne.n	801432c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	689b      	ldr	r3, [r3, #8]
 8014294:	4618      	mov	r0, r3
 8014296:	f001 f8cf 	bl	8015438 <xTaskPriorityDisinherit>
 801429a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2200      	movs	r2, #0
 80142a0:	609a      	str	r2, [r3, #8]
 80142a2:	e043      	b.n	801432c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d119      	bne.n	80142de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	6858      	ldr	r0, [r3, #4]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b2:	461a      	mov	r2, r3
 80142b4:	68b9      	ldr	r1, [r7, #8]
 80142b6:	f002 fef5 	bl	80170a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142c2:	441a      	add	r2, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	685a      	ldr	r2, [r3, #4]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	689b      	ldr	r3, [r3, #8]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d32b      	bcc.n	801432c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	605a      	str	r2, [r3, #4]
 80142dc:	e026      	b.n	801432c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	68d8      	ldr	r0, [r3, #12]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142e6:	461a      	mov	r2, r3
 80142e8:	68b9      	ldr	r1, [r7, #8]
 80142ea:	f002 fedb 	bl	80170a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	68da      	ldr	r2, [r3, #12]
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142f6:	425b      	negs	r3, r3
 80142f8:	441a      	add	r2, r3
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	68da      	ldr	r2, [r3, #12]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	429a      	cmp	r2, r3
 8014308:	d207      	bcs.n	801431a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	689a      	ldr	r2, [r3, #8]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014312:	425b      	negs	r3, r3
 8014314:	441a      	add	r2, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b02      	cmp	r3, #2
 801431e:	d105      	bne.n	801432c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d002      	beq.n	801432c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	3b01      	subs	r3, #1
 801432a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	1c5a      	adds	r2, r3, #1
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014334:	697b      	ldr	r3, [r7, #20]
}
 8014336:	4618      	mov	r0, r3
 8014338:	3718      	adds	r7, #24
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801433e:	b580      	push	{r7, lr}
 8014340:	b082      	sub	sp, #8
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
 8014346:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801434c:	2b00      	cmp	r3, #0
 801434e:	d018      	beq.n	8014382 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	68da      	ldr	r2, [r3, #12]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014358:	441a      	add	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	689b      	ldr	r3, [r3, #8]
 8014366:	429a      	cmp	r2, r3
 8014368:	d303      	bcc.n	8014372 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	68d9      	ldr	r1, [r3, #12]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801437a:	461a      	mov	r2, r3
 801437c:	6838      	ldr	r0, [r7, #0]
 801437e:	f002 fe91 	bl	80170a4 <memcpy>
	}
}
 8014382:	bf00      	nop
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b084      	sub	sp, #16
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014392:	f001 fe09 	bl	8015fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801439c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801439e:	e011      	b.n	80143c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d012      	beq.n	80143ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	3324      	adds	r3, #36	; 0x24
 80143ac:	4618      	mov	r0, r3
 80143ae:	f000 fdef 	bl	8014f90 <xTaskRemoveFromEventList>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80143b8:	f000 fec8 	bl	801514c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80143bc:	7bfb      	ldrb	r3, [r7, #15]
 80143be:	3b01      	subs	r3, #1
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80143c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	dce9      	bgt.n	80143a0 <prvUnlockQueue+0x16>
 80143cc:	e000      	b.n	80143d0 <prvUnlockQueue+0x46>
					break;
 80143ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	22ff      	movs	r2, #255	; 0xff
 80143d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80143d8:	f001 fe18 	bl	801600c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80143dc:	f001 fde4 	bl	8015fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80143e8:	e011      	b.n	801440e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	691b      	ldr	r3, [r3, #16]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d012      	beq.n	8014418 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	3310      	adds	r3, #16
 80143f6:	4618      	mov	r0, r3
 80143f8:	f000 fdca 	bl	8014f90 <xTaskRemoveFromEventList>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d001      	beq.n	8014406 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014402:	f000 fea3 	bl	801514c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014406:	7bbb      	ldrb	r3, [r7, #14]
 8014408:	3b01      	subs	r3, #1
 801440a:	b2db      	uxtb	r3, r3
 801440c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801440e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014412:	2b00      	cmp	r3, #0
 8014414:	dce9      	bgt.n	80143ea <prvUnlockQueue+0x60>
 8014416:	e000      	b.n	801441a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014418:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	22ff      	movs	r2, #255	; 0xff
 801441e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014422:	f001 fdf3 	bl	801600c <vPortExitCritical>
}
 8014426:	bf00      	nop
 8014428:	3710      	adds	r7, #16
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}

0801442e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801442e:	b580      	push	{r7, lr}
 8014430:	b084      	sub	sp, #16
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014436:	f001 fdb7 	bl	8015fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443e:	2b00      	cmp	r3, #0
 8014440:	d102      	bne.n	8014448 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014442:	2301      	movs	r3, #1
 8014444:	60fb      	str	r3, [r7, #12]
 8014446:	e001      	b.n	801444c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014448:	2300      	movs	r3, #0
 801444a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801444c:	f001 fdde 	bl	801600c <vPortExitCritical>

	return xReturn;
 8014450:	68fb      	ldr	r3, [r7, #12]
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b084      	sub	sp, #16
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014462:	f001 fda1 	bl	8015fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801446e:	429a      	cmp	r2, r3
 8014470:	d102      	bne.n	8014478 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014472:	2301      	movs	r3, #1
 8014474:	60fb      	str	r3, [r7, #12]
 8014476:	e001      	b.n	801447c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014478:	2300      	movs	r3, #0
 801447a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801447c:	f001 fdc6 	bl	801600c <vPortExitCritical>

	return xReturn;
 8014480:	68fb      	ldr	r3, [r7, #12]
}
 8014482:	4618      	mov	r0, r3
 8014484:	3710      	adds	r7, #16
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
	...

0801448c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801448c:	b480      	push	{r7}
 801448e:	b085      	sub	sp, #20
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014496:	2300      	movs	r3, #0
 8014498:	60fb      	str	r3, [r7, #12]
 801449a:	e014      	b.n	80144c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801449c:	4a0e      	ldr	r2, [pc, #56]	; (80144d8 <vQueueAddToRegistry+0x4c>)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10b      	bne.n	80144c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80144a8:	490b      	ldr	r1, [pc, #44]	; (80144d8 <vQueueAddToRegistry+0x4c>)
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	683a      	ldr	r2, [r7, #0]
 80144ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80144b2:	4a09      	ldr	r2, [pc, #36]	; (80144d8 <vQueueAddToRegistry+0x4c>)
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	4413      	add	r3, r2
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80144be:	e005      	b.n	80144cc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	3301      	adds	r3, #1
 80144c4:	60fb      	str	r3, [r7, #12]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b07      	cmp	r3, #7
 80144ca:	d9e7      	bls.n	801449c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80144cc:	bf00      	nop
 80144ce:	3714      	adds	r7, #20
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr
 80144d8:	200156a8 	.word	0x200156a8

080144dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80144dc:	b480      	push	{r7}
 80144de:	b085      	sub	sp, #20
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80144e4:	2300      	movs	r3, #0
 80144e6:	60fb      	str	r3, [r7, #12]
 80144e8:	e016      	b.n	8014518 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80144ea:	4a10      	ldr	r2, [pc, #64]	; (801452c <vQueueUnregisterQueue+0x50>)
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	00db      	lsls	r3, r3, #3
 80144f0:	4413      	add	r3, r2
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d10b      	bne.n	8014512 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80144fa:	4a0c      	ldr	r2, [pc, #48]	; (801452c <vQueueUnregisterQueue+0x50>)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2100      	movs	r1, #0
 8014500:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014504:	4a09      	ldr	r2, [pc, #36]	; (801452c <vQueueUnregisterQueue+0x50>)
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	4413      	add	r3, r2
 801450c:	2200      	movs	r2, #0
 801450e:	605a      	str	r2, [r3, #4]
				break;
 8014510:	e005      	b.n	801451e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	3301      	adds	r3, #1
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2b07      	cmp	r3, #7
 801451c:	d9e5      	bls.n	80144ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801451e:	bf00      	nop
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop
 801452c:	200156a8 	.word	0x200156a8

08014530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014540:	f001 fd32 	bl	8015fa8 <vPortEnterCritical>
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801454a:	b25b      	sxtb	r3, r3
 801454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014550:	d103      	bne.n	801455a <vQueueWaitForMessageRestricted+0x2a>
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	2200      	movs	r2, #0
 8014556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014560:	b25b      	sxtb	r3, r3
 8014562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014566:	d103      	bne.n	8014570 <vQueueWaitForMessageRestricted+0x40>
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	2200      	movs	r2, #0
 801456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014570:	f001 fd4c 	bl	801600c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014578:	2b00      	cmp	r3, #0
 801457a:	d106      	bne.n	801458a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	3324      	adds	r3, #36	; 0x24
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	68b9      	ldr	r1, [r7, #8]
 8014584:	4618      	mov	r0, r3
 8014586:	f000 fcd7 	bl	8014f38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801458a:	6978      	ldr	r0, [r7, #20]
 801458c:	f7ff fefd 	bl	801438a <prvUnlockQueue>
	}
 8014590:	bf00      	nop
 8014592:	3718      	adds	r7, #24
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014598:	b580      	push	{r7, lr}
 801459a:	b08e      	sub	sp, #56	; 0x38
 801459c:	af04      	add	r7, sp, #16
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
 80145a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80145a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d10b      	bne.n	80145c4 <xTaskCreateStatic+0x2c>
 80145ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b0:	b672      	cpsid	i
 80145b2:	f383 8811 	msr	BASEPRI, r3
 80145b6:	f3bf 8f6f 	isb	sy
 80145ba:	f3bf 8f4f 	dsb	sy
 80145be:	b662      	cpsie	i
 80145c0:	623b      	str	r3, [r7, #32]
 80145c2:	e7fe      	b.n	80145c2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d10b      	bne.n	80145e2 <xTaskCreateStatic+0x4a>
 80145ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ce:	b672      	cpsid	i
 80145d0:	f383 8811 	msr	BASEPRI, r3
 80145d4:	f3bf 8f6f 	isb	sy
 80145d8:	f3bf 8f4f 	dsb	sy
 80145dc:	b662      	cpsie	i
 80145de:	61fb      	str	r3, [r7, #28]
 80145e0:	e7fe      	b.n	80145e0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80145e2:	235c      	movs	r3, #92	; 0x5c
 80145e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	2b5c      	cmp	r3, #92	; 0x5c
 80145ea:	d00b      	beq.n	8014604 <xTaskCreateStatic+0x6c>
 80145ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f0:	b672      	cpsid	i
 80145f2:	f383 8811 	msr	BASEPRI, r3
 80145f6:	f3bf 8f6f 	isb	sy
 80145fa:	f3bf 8f4f 	dsb	sy
 80145fe:	b662      	cpsie	i
 8014600:	61bb      	str	r3, [r7, #24]
 8014602:	e7fe      	b.n	8014602 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014608:	2b00      	cmp	r3, #0
 801460a:	d01e      	beq.n	801464a <xTaskCreateStatic+0xb2>
 801460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801460e:	2b00      	cmp	r3, #0
 8014610:	d01b      	beq.n	801464a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014614:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801461a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461e:	2202      	movs	r2, #2
 8014620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014624:	2300      	movs	r3, #0
 8014626:	9303      	str	r3, [sp, #12]
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	9302      	str	r3, [sp, #8]
 801462c:	f107 0314 	add.w	r3, r7, #20
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014634:	9300      	str	r3, [sp, #0]
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	68b9      	ldr	r1, [r7, #8]
 801463c:	68f8      	ldr	r0, [r7, #12]
 801463e:	f000 f850 	bl	80146e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014644:	f000 f8de 	bl	8014804 <prvAddNewTaskToReadyList>
 8014648:	e001      	b.n	801464e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801464a:	2300      	movs	r3, #0
 801464c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801464e:	697b      	ldr	r3, [r7, #20]
	}
 8014650:	4618      	mov	r0, r3
 8014652:	3728      	adds	r7, #40	; 0x28
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014658:	b580      	push	{r7, lr}
 801465a:	b08c      	sub	sp, #48	; 0x30
 801465c:	af04      	add	r7, sp, #16
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	4613      	mov	r3, r2
 8014666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014668:	88fb      	ldrh	r3, [r7, #6]
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	4618      	mov	r0, r3
 801466e:	f001 fdbd 	bl	80161ec <pvPortMalloc>
 8014672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d00e      	beq.n	8014698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801467a:	205c      	movs	r0, #92	; 0x5c
 801467c:	f001 fdb6 	bl	80161ec <pvPortMalloc>
 8014680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d003      	beq.n	8014690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	697a      	ldr	r2, [r7, #20]
 801468c:	631a      	str	r2, [r3, #48]	; 0x30
 801468e:	e005      	b.n	801469c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014690:	6978      	ldr	r0, [r7, #20]
 8014692:	f001 fe73 	bl	801637c <vPortFree>
 8014696:	e001      	b.n	801469c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014698:	2300      	movs	r3, #0
 801469a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d017      	beq.n	80146d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	2200      	movs	r2, #0
 80146a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80146aa:	88fa      	ldrh	r2, [r7, #6]
 80146ac:	2300      	movs	r3, #0
 80146ae:	9303      	str	r3, [sp, #12]
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	9302      	str	r3, [sp, #8]
 80146b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b6:	9301      	str	r3, [sp, #4]
 80146b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	68b9      	ldr	r1, [r7, #8]
 80146c0:	68f8      	ldr	r0, [r7, #12]
 80146c2:	f000 f80e 	bl	80146e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80146c6:	69f8      	ldr	r0, [r7, #28]
 80146c8:	f000 f89c 	bl	8014804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80146cc:	2301      	movs	r3, #1
 80146ce:	61bb      	str	r3, [r7, #24]
 80146d0:	e002      	b.n	80146d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80146d2:	f04f 33ff 	mov.w	r3, #4294967295
 80146d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80146d8:	69bb      	ldr	r3, [r7, #24]
	}
 80146da:	4618      	mov	r0, r3
 80146dc:	3720      	adds	r7, #32
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b088      	sub	sp, #32
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	60f8      	str	r0, [r7, #12]
 80146ea:	60b9      	str	r1, [r7, #8]
 80146ec:	607a      	str	r2, [r7, #4]
 80146ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80146f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	461a      	mov	r2, r3
 80146fa:	21a5      	movs	r1, #165	; 0xa5
 80146fc:	f002 fcdd 	bl	80170ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014704:	6879      	ldr	r1, [r7, #4]
 8014706:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801470a:	440b      	add	r3, r1
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	4413      	add	r3, r2
 8014710:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	f023 0307 	bic.w	r3, r3, #7
 8014718:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	f003 0307 	and.w	r3, r3, #7
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00b      	beq.n	801473c <prvInitialiseNewTask+0x5a>
 8014724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014728:	b672      	cpsid	i
 801472a:	f383 8811 	msr	BASEPRI, r3
 801472e:	f3bf 8f6f 	isb	sy
 8014732:	f3bf 8f4f 	dsb	sy
 8014736:	b662      	cpsie	i
 8014738:	617b      	str	r3, [r7, #20]
 801473a:	e7fe      	b.n	801473a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d01f      	beq.n	8014782 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014742:	2300      	movs	r3, #0
 8014744:	61fb      	str	r3, [r7, #28]
 8014746:	e012      	b.n	801476e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014748:	68ba      	ldr	r2, [r7, #8]
 801474a:	69fb      	ldr	r3, [r7, #28]
 801474c:	4413      	add	r3, r2
 801474e:	7819      	ldrb	r1, [r3, #0]
 8014750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	4413      	add	r3, r2
 8014756:	3334      	adds	r3, #52	; 0x34
 8014758:	460a      	mov	r2, r1
 801475a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801475c:	68ba      	ldr	r2, [r7, #8]
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	4413      	add	r3, r2
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d006      	beq.n	8014776 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	3301      	adds	r3, #1
 801476c:	61fb      	str	r3, [r7, #28]
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	2b0f      	cmp	r3, #15
 8014772:	d9e9      	bls.n	8014748 <prvInitialiseNewTask+0x66>
 8014774:	e000      	b.n	8014778 <prvInitialiseNewTask+0x96>
			{
				break;
 8014776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477a:	2200      	movs	r2, #0
 801477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014780:	e003      	b.n	801478a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014784:	2200      	movs	r2, #0
 8014786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801478c:	2b37      	cmp	r3, #55	; 0x37
 801478e:	d901      	bls.n	8014794 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014790:	2337      	movs	r3, #55	; 0x37
 8014792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801479e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	2200      	movs	r2, #0
 80147a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80147a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a8:	3304      	adds	r3, #4
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fe fd5c 	bl	8013268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80147b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b2:	3318      	adds	r3, #24
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fe fd57 	bl	8013268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80147ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80147c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80147ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80147d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d2:	2200      	movs	r2, #0
 80147d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d8:	2200      	movs	r2, #0
 80147da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	68f9      	ldr	r1, [r7, #12]
 80147e2:	69b8      	ldr	r0, [r7, #24]
 80147e4:	f001 fad8 	bl	8015d98 <pxPortInitialiseStack>
 80147e8:	4602      	mov	r2, r0
 80147ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80147ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80147f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147fa:	bf00      	nop
 80147fc:	3720      	adds	r7, #32
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
	...

08014804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801480c:	f001 fbcc 	bl	8015fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014810:	4b2d      	ldr	r3, [pc, #180]	; (80148c8 <prvAddNewTaskToReadyList+0xc4>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	3301      	adds	r3, #1
 8014816:	4a2c      	ldr	r2, [pc, #176]	; (80148c8 <prvAddNewTaskToReadyList+0xc4>)
 8014818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801481a:	4b2c      	ldr	r3, [pc, #176]	; (80148cc <prvAddNewTaskToReadyList+0xc8>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d109      	bne.n	8014836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014822:	4a2a      	ldr	r2, [pc, #168]	; (80148cc <prvAddNewTaskToReadyList+0xc8>)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014828:	4b27      	ldr	r3, [pc, #156]	; (80148c8 <prvAddNewTaskToReadyList+0xc4>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d110      	bne.n	8014852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014830:	f000 fcb0 	bl	8015194 <prvInitialiseTaskLists>
 8014834:	e00d      	b.n	8014852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014836:	4b26      	ldr	r3, [pc, #152]	; (80148d0 <prvAddNewTaskToReadyList+0xcc>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d109      	bne.n	8014852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801483e:	4b23      	ldr	r3, [pc, #140]	; (80148cc <prvAddNewTaskToReadyList+0xc8>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014848:	429a      	cmp	r2, r3
 801484a:	d802      	bhi.n	8014852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801484c:	4a1f      	ldr	r2, [pc, #124]	; (80148cc <prvAddNewTaskToReadyList+0xc8>)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014852:	4b20      	ldr	r3, [pc, #128]	; (80148d4 <prvAddNewTaskToReadyList+0xd0>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3301      	adds	r3, #1
 8014858:	4a1e      	ldr	r2, [pc, #120]	; (80148d4 <prvAddNewTaskToReadyList+0xd0>)
 801485a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801485c:	4b1d      	ldr	r3, [pc, #116]	; (80148d4 <prvAddNewTaskToReadyList+0xd0>)
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014868:	4b1b      	ldr	r3, [pc, #108]	; (80148d8 <prvAddNewTaskToReadyList+0xd4>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	429a      	cmp	r2, r3
 801486e:	d903      	bls.n	8014878 <prvAddNewTaskToReadyList+0x74>
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014874:	4a18      	ldr	r2, [pc, #96]	; (80148d8 <prvAddNewTaskToReadyList+0xd4>)
 8014876:	6013      	str	r3, [r2, #0]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801487c:	4613      	mov	r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	4413      	add	r3, r2
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	4a15      	ldr	r2, [pc, #84]	; (80148dc <prvAddNewTaskToReadyList+0xd8>)
 8014886:	441a      	add	r2, r3
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	3304      	adds	r3, #4
 801488c:	4619      	mov	r1, r3
 801488e:	4610      	mov	r0, r2
 8014890:	f7fe fcf7 	bl	8013282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014894:	f001 fbba 	bl	801600c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014898:	4b0d      	ldr	r3, [pc, #52]	; (80148d0 <prvAddNewTaskToReadyList+0xcc>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00e      	beq.n	80148be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80148a0:	4b0a      	ldr	r3, [pc, #40]	; (80148cc <prvAddNewTaskToReadyList+0xc8>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d207      	bcs.n	80148be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80148ae:	4b0c      	ldr	r3, [pc, #48]	; (80148e0 <prvAddNewTaskToReadyList+0xdc>)
 80148b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148b4:	601a      	str	r2, [r3, #0]
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	20000ebc 	.word	0x20000ebc
 80148cc:	200009e8 	.word	0x200009e8
 80148d0:	20000ec8 	.word	0x20000ec8
 80148d4:	20000ed8 	.word	0x20000ed8
 80148d8:	20000ec4 	.word	0x20000ec4
 80148dc:	200009ec 	.word	0x200009ec
 80148e0:	e000ed04 	.word	0xe000ed04

080148e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b08a      	sub	sp, #40	; 0x28
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80148ee:	2300      	movs	r3, #0
 80148f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d10b      	bne.n	8014910 <vTaskDelayUntil+0x2c>
 80148f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fc:	b672      	cpsid	i
 80148fe:	f383 8811 	msr	BASEPRI, r3
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	b662      	cpsie	i
 801490c:	617b      	str	r3, [r7, #20]
 801490e:	e7fe      	b.n	801490e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d10b      	bne.n	801492e <vTaskDelayUntil+0x4a>
 8014916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491a:	b672      	cpsid	i
 801491c:	f383 8811 	msr	BASEPRI, r3
 8014920:	f3bf 8f6f 	isb	sy
 8014924:	f3bf 8f4f 	dsb	sy
 8014928:	b662      	cpsie	i
 801492a:	613b      	str	r3, [r7, #16]
 801492c:	e7fe      	b.n	801492c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 801492e:	4b2a      	ldr	r3, [pc, #168]	; (80149d8 <vTaskDelayUntil+0xf4>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00b      	beq.n	801494e <vTaskDelayUntil+0x6a>
 8014936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493a:	b672      	cpsid	i
 801493c:	f383 8811 	msr	BASEPRI, r3
 8014940:	f3bf 8f6f 	isb	sy
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	b662      	cpsie	i
 801494a:	60fb      	str	r3, [r7, #12]
 801494c:	e7fe      	b.n	801494c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 801494e:	f000 f8e7 	bl	8014b20 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014952:	4b22      	ldr	r3, [pc, #136]	; (80149dc <vTaskDelayUntil+0xf8>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	683a      	ldr	r2, [r7, #0]
 801495e:	4413      	add	r3, r2
 8014960:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	6a3a      	ldr	r2, [r7, #32]
 8014968:	429a      	cmp	r2, r3
 801496a:	d20b      	bcs.n	8014984 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	69fa      	ldr	r2, [r7, #28]
 8014972:	429a      	cmp	r2, r3
 8014974:	d211      	bcs.n	801499a <vTaskDelayUntil+0xb6>
 8014976:	69fa      	ldr	r2, [r7, #28]
 8014978:	6a3b      	ldr	r3, [r7, #32]
 801497a:	429a      	cmp	r2, r3
 801497c:	d90d      	bls.n	801499a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801497e:	2301      	movs	r3, #1
 8014980:	627b      	str	r3, [r7, #36]	; 0x24
 8014982:	e00a      	b.n	801499a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	69fa      	ldr	r2, [r7, #28]
 801498a:	429a      	cmp	r2, r3
 801498c:	d303      	bcc.n	8014996 <vTaskDelayUntil+0xb2>
 801498e:	69fa      	ldr	r2, [r7, #28]
 8014990:	6a3b      	ldr	r3, [r7, #32]
 8014992:	429a      	cmp	r2, r3
 8014994:	d901      	bls.n	801499a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014996:	2301      	movs	r3, #1
 8014998:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	69fa      	ldr	r2, [r7, #28]
 801499e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80149a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d006      	beq.n	80149b4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80149a6:	69fa      	ldr	r2, [r7, #28]
 80149a8:	6a3b      	ldr	r3, [r7, #32]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	2100      	movs	r1, #0
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 fe4a 	bl	8015648 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80149b4:	f000 f8c2 	bl	8014b3c <xTaskResumeAll>
 80149b8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d107      	bne.n	80149d0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80149c0:	4b07      	ldr	r3, [pc, #28]	; (80149e0 <vTaskDelayUntil+0xfc>)
 80149c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149c6:	601a      	str	r2, [r3, #0]
 80149c8:	f3bf 8f4f 	dsb	sy
 80149cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149d0:	bf00      	nop
 80149d2:	3728      	adds	r7, #40	; 0x28
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	20000ee4 	.word	0x20000ee4
 80149dc:	20000ec0 	.word	0x20000ec0
 80149e0:	e000ed04 	.word	0xe000ed04

080149e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80149ec:	2300      	movs	r3, #0
 80149ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d018      	beq.n	8014a28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80149f6:	4b14      	ldr	r3, [pc, #80]	; (8014a48 <vTaskDelay+0x64>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d00b      	beq.n	8014a16 <vTaskDelay+0x32>
 80149fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a02:	b672      	cpsid	i
 8014a04:	f383 8811 	msr	BASEPRI, r3
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	f3bf 8f4f 	dsb	sy
 8014a10:	b662      	cpsie	i
 8014a12:	60bb      	str	r3, [r7, #8]
 8014a14:	e7fe      	b.n	8014a14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014a16:	f000 f883 	bl	8014b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 fe13 	bl	8015648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014a22:	f000 f88b 	bl	8014b3c <xTaskResumeAll>
 8014a26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d107      	bne.n	8014a3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014a2e:	4b07      	ldr	r3, [pc, #28]	; (8014a4c <vTaskDelay+0x68>)
 8014a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	f3bf 8f4f 	dsb	sy
 8014a3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a3e:	bf00      	nop
 8014a40:	3710      	adds	r7, #16
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	20000ee4 	.word	0x20000ee4
 8014a4c:	e000ed04 	.word	0xe000ed04

08014a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b08a      	sub	sp, #40	; 0x28
 8014a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014a56:	2300      	movs	r3, #0
 8014a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014a5e:	463a      	mov	r2, r7
 8014a60:	1d39      	adds	r1, r7, #4
 8014a62:	f107 0308 	add.w	r3, r7, #8
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fe fbaa 	bl	80131c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	68ba      	ldr	r2, [r7, #8]
 8014a72:	9202      	str	r2, [sp, #8]
 8014a74:	9301      	str	r3, [sp, #4]
 8014a76:	2300      	movs	r3, #0
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	460a      	mov	r2, r1
 8014a7e:	4922      	ldr	r1, [pc, #136]	; (8014b08 <vTaskStartScheduler+0xb8>)
 8014a80:	4822      	ldr	r0, [pc, #136]	; (8014b0c <vTaskStartScheduler+0xbc>)
 8014a82:	f7ff fd89 	bl	8014598 <xTaskCreateStatic>
 8014a86:	4602      	mov	r2, r0
 8014a88:	4b21      	ldr	r3, [pc, #132]	; (8014b10 <vTaskStartScheduler+0xc0>)
 8014a8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014a8c:	4b20      	ldr	r3, [pc, #128]	; (8014b10 <vTaskStartScheduler+0xc0>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014a94:	2301      	movs	r3, #1
 8014a96:	617b      	str	r3, [r7, #20]
 8014a98:	e001      	b.n	8014a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d102      	bne.n	8014aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014aa4:	f000 fe24 	bl	80156f0 <xTimerCreateTimerTask>
 8014aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d117      	bne.n	8014ae0 <vTaskStartScheduler+0x90>
 8014ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab4:	b672      	cpsid	i
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	b662      	cpsie	i
 8014ac4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ac6:	4b13      	ldr	r3, [pc, #76]	; (8014b14 <vTaskStartScheduler+0xc4>)
 8014ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8014acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014ace:	4b12      	ldr	r3, [pc, #72]	; (8014b18 <vTaskStartScheduler+0xc8>)
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014ad4:	4b11      	ldr	r3, [pc, #68]	; (8014b1c <vTaskStartScheduler+0xcc>)
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014ada:	f001 f9e9 	bl	8015eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014ade:	e00f      	b.n	8014b00 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae6:	d10b      	bne.n	8014b00 <vTaskStartScheduler+0xb0>
 8014ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aec:	b672      	cpsid	i
 8014aee:	f383 8811 	msr	BASEPRI, r3
 8014af2:	f3bf 8f6f 	isb	sy
 8014af6:	f3bf 8f4f 	dsb	sy
 8014afa:	b662      	cpsie	i
 8014afc:	60fb      	str	r3, [r7, #12]
 8014afe:	e7fe      	b.n	8014afe <vTaskStartScheduler+0xae>
}
 8014b00:	bf00      	nop
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	08019e78 	.word	0x08019e78
 8014b0c:	08015165 	.word	0x08015165
 8014b10:	20000ee0 	.word	0x20000ee0
 8014b14:	20000edc 	.word	0x20000edc
 8014b18:	20000ec8 	.word	0x20000ec8
 8014b1c:	20000ec0 	.word	0x20000ec0

08014b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014b20:	b480      	push	{r7}
 8014b22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014b24:	4b04      	ldr	r3, [pc, #16]	; (8014b38 <vTaskSuspendAll+0x18>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	4a03      	ldr	r2, [pc, #12]	; (8014b38 <vTaskSuspendAll+0x18>)
 8014b2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014b2e:	bf00      	nop
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr
 8014b38:	20000ee4 	.word	0x20000ee4

08014b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014b46:	2300      	movs	r3, #0
 8014b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014b4a:	4b42      	ldr	r3, [pc, #264]	; (8014c54 <xTaskResumeAll+0x118>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d10b      	bne.n	8014b6a <xTaskResumeAll+0x2e>
 8014b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b56:	b672      	cpsid	i
 8014b58:	f383 8811 	msr	BASEPRI, r3
 8014b5c:	f3bf 8f6f 	isb	sy
 8014b60:	f3bf 8f4f 	dsb	sy
 8014b64:	b662      	cpsie	i
 8014b66:	603b      	str	r3, [r7, #0]
 8014b68:	e7fe      	b.n	8014b68 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014b6a:	f001 fa1d 	bl	8015fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014b6e:	4b39      	ldr	r3, [pc, #228]	; (8014c54 <xTaskResumeAll+0x118>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	3b01      	subs	r3, #1
 8014b74:	4a37      	ldr	r2, [pc, #220]	; (8014c54 <xTaskResumeAll+0x118>)
 8014b76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b78:	4b36      	ldr	r3, [pc, #216]	; (8014c54 <xTaskResumeAll+0x118>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d162      	bne.n	8014c46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014b80:	4b35      	ldr	r3, [pc, #212]	; (8014c58 <xTaskResumeAll+0x11c>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d05e      	beq.n	8014c46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014b88:	e02f      	b.n	8014bea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b8a:	4b34      	ldr	r3, [pc, #208]	; (8014c5c <xTaskResumeAll+0x120>)
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	3318      	adds	r3, #24
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7fe fbd0 	bl	801333c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	3304      	adds	r3, #4
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fe fbcb 	bl	801333c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014baa:	4b2d      	ldr	r3, [pc, #180]	; (8014c60 <xTaskResumeAll+0x124>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d903      	bls.n	8014bba <xTaskResumeAll+0x7e>
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bb6:	4a2a      	ldr	r2, [pc, #168]	; (8014c60 <xTaskResumeAll+0x124>)
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	4413      	add	r3, r2
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	4a27      	ldr	r2, [pc, #156]	; (8014c64 <xTaskResumeAll+0x128>)
 8014bc8:	441a      	add	r2, r3
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	3304      	adds	r3, #4
 8014bce:	4619      	mov	r1, r3
 8014bd0:	4610      	mov	r0, r2
 8014bd2:	f7fe fb56 	bl	8013282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bda:	4b23      	ldr	r3, [pc, #140]	; (8014c68 <xTaskResumeAll+0x12c>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d302      	bcc.n	8014bea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014be4:	4b21      	ldr	r3, [pc, #132]	; (8014c6c <xTaskResumeAll+0x130>)
 8014be6:	2201      	movs	r2, #1
 8014be8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014bea:	4b1c      	ldr	r3, [pc, #112]	; (8014c5c <xTaskResumeAll+0x120>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1cb      	bne.n	8014b8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d001      	beq.n	8014bfc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014bf8:	f000 fb68 	bl	80152cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014bfc:	4b1c      	ldr	r3, [pc, #112]	; (8014c70 <xTaskResumeAll+0x134>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d010      	beq.n	8014c2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014c08:	f000 f858 	bl	8014cbc <xTaskIncrementTick>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8014c12:	4b16      	ldr	r3, [pc, #88]	; (8014c6c <xTaskResumeAll+0x130>)
 8014c14:	2201      	movs	r2, #1
 8014c16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d1f1      	bne.n	8014c08 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8014c24:	4b12      	ldr	r3, [pc, #72]	; (8014c70 <xTaskResumeAll+0x134>)
 8014c26:	2200      	movs	r2, #0
 8014c28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014c2a:	4b10      	ldr	r3, [pc, #64]	; (8014c6c <xTaskResumeAll+0x130>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d009      	beq.n	8014c46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014c32:	2301      	movs	r3, #1
 8014c34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014c36:	4b0f      	ldr	r3, [pc, #60]	; (8014c74 <xTaskResumeAll+0x138>)
 8014c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	f3bf 8f4f 	dsb	sy
 8014c42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c46:	f001 f9e1 	bl	801600c <vPortExitCritical>

	return xAlreadyYielded;
 8014c4a:	68bb      	ldr	r3, [r7, #8]
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	20000ee4 	.word	0x20000ee4
 8014c58:	20000ebc 	.word	0x20000ebc
 8014c5c:	20000e7c 	.word	0x20000e7c
 8014c60:	20000ec4 	.word	0x20000ec4
 8014c64:	200009ec 	.word	0x200009ec
 8014c68:	200009e8 	.word	0x200009e8
 8014c6c:	20000ed0 	.word	0x20000ed0
 8014c70:	20000ecc 	.word	0x20000ecc
 8014c74:	e000ed04 	.word	0xe000ed04

08014c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014c7e:	4b05      	ldr	r3, [pc, #20]	; (8014c94 <xTaskGetTickCount+0x1c>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014c84:	687b      	ldr	r3, [r7, #4]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	370c      	adds	r7, #12
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	20000ec0 	.word	0x20000ec0

08014c98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c9e:	f001 fa63 	bl	8016168 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014ca6:	4b04      	ldr	r3, [pc, #16]	; (8014cb8 <xTaskGetTickCountFromISR+0x20>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014cac:	683b      	ldr	r3, [r7, #0]
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3708      	adds	r7, #8
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20000ec0 	.word	0x20000ec0

08014cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b086      	sub	sp, #24
 8014cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cc6:	4b4f      	ldr	r3, [pc, #316]	; (8014e04 <xTaskIncrementTick+0x148>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	f040 808a 	bne.w	8014de4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014cd0:	4b4d      	ldr	r3, [pc, #308]	; (8014e08 <xTaskIncrementTick+0x14c>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014cd8:	4a4b      	ldr	r2, [pc, #300]	; (8014e08 <xTaskIncrementTick+0x14c>)
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d121      	bne.n	8014d28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014ce4:	4b49      	ldr	r3, [pc, #292]	; (8014e0c <xTaskIncrementTick+0x150>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00b      	beq.n	8014d06 <xTaskIncrementTick+0x4a>
 8014cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf2:	b672      	cpsid	i
 8014cf4:	f383 8811 	msr	BASEPRI, r3
 8014cf8:	f3bf 8f6f 	isb	sy
 8014cfc:	f3bf 8f4f 	dsb	sy
 8014d00:	b662      	cpsie	i
 8014d02:	603b      	str	r3, [r7, #0]
 8014d04:	e7fe      	b.n	8014d04 <xTaskIncrementTick+0x48>
 8014d06:	4b41      	ldr	r3, [pc, #260]	; (8014e0c <xTaskIncrementTick+0x150>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	60fb      	str	r3, [r7, #12]
 8014d0c:	4b40      	ldr	r3, [pc, #256]	; (8014e10 <xTaskIncrementTick+0x154>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	4a3e      	ldr	r2, [pc, #248]	; (8014e0c <xTaskIncrementTick+0x150>)
 8014d12:	6013      	str	r3, [r2, #0]
 8014d14:	4a3e      	ldr	r2, [pc, #248]	; (8014e10 <xTaskIncrementTick+0x154>)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	6013      	str	r3, [r2, #0]
 8014d1a:	4b3e      	ldr	r3, [pc, #248]	; (8014e14 <xTaskIncrementTick+0x158>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	4a3c      	ldr	r2, [pc, #240]	; (8014e14 <xTaskIncrementTick+0x158>)
 8014d22:	6013      	str	r3, [r2, #0]
 8014d24:	f000 fad2 	bl	80152cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014d28:	4b3b      	ldr	r3, [pc, #236]	; (8014e18 <xTaskIncrementTick+0x15c>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	693a      	ldr	r2, [r7, #16]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d349      	bcc.n	8014dc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d32:	4b36      	ldr	r3, [pc, #216]	; (8014e0c <xTaskIncrementTick+0x150>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d104      	bne.n	8014d46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d3c:	4b36      	ldr	r3, [pc, #216]	; (8014e18 <xTaskIncrementTick+0x15c>)
 8014d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d42:	601a      	str	r2, [r3, #0]
					break;
 8014d44:	e03f      	b.n	8014dc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d46:	4b31      	ldr	r3, [pc, #196]	; (8014e0c <xTaskIncrementTick+0x150>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014d56:	693a      	ldr	r2, [r7, #16]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d203      	bcs.n	8014d66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014d5e:	4a2e      	ldr	r2, [pc, #184]	; (8014e18 <xTaskIncrementTick+0x15c>)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014d64:	e02f      	b.n	8014dc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fe fae6 	bl	801333c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d004      	beq.n	8014d82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	3318      	adds	r3, #24
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fe fadd 	bl	801333c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d86:	4b25      	ldr	r3, [pc, #148]	; (8014e1c <xTaskIncrementTick+0x160>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d903      	bls.n	8014d96 <xTaskIncrementTick+0xda>
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d92:	4a22      	ldr	r2, [pc, #136]	; (8014e1c <xTaskIncrementTick+0x160>)
 8014d94:	6013      	str	r3, [r2, #0]
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	4413      	add	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4a1f      	ldr	r2, [pc, #124]	; (8014e20 <xTaskIncrementTick+0x164>)
 8014da4:	441a      	add	r2, r3
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	3304      	adds	r3, #4
 8014daa:	4619      	mov	r1, r3
 8014dac:	4610      	mov	r0, r2
 8014dae:	f7fe fa68 	bl	8013282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014db6:	4b1b      	ldr	r3, [pc, #108]	; (8014e24 <xTaskIncrementTick+0x168>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d3b8      	bcc.n	8014d32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dc4:	e7b5      	b.n	8014d32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014dc6:	4b17      	ldr	r3, [pc, #92]	; (8014e24 <xTaskIncrementTick+0x168>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dcc:	4914      	ldr	r1, [pc, #80]	; (8014e20 <xTaskIncrementTick+0x164>)
 8014dce:	4613      	mov	r3, r2
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	4413      	add	r3, r2
 8014dd4:	009b      	lsls	r3, r3, #2
 8014dd6:	440b      	add	r3, r1
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b01      	cmp	r3, #1
 8014ddc:	d907      	bls.n	8014dee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014dde:	2301      	movs	r3, #1
 8014de0:	617b      	str	r3, [r7, #20]
 8014de2:	e004      	b.n	8014dee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014de4:	4b10      	ldr	r3, [pc, #64]	; (8014e28 <xTaskIncrementTick+0x16c>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	3301      	adds	r3, #1
 8014dea:	4a0f      	ldr	r2, [pc, #60]	; (8014e28 <xTaskIncrementTick+0x16c>)
 8014dec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014dee:	4b0f      	ldr	r3, [pc, #60]	; (8014e2c <xTaskIncrementTick+0x170>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d001      	beq.n	8014dfa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8014df6:	2301      	movs	r3, #1
 8014df8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014dfa:	697b      	ldr	r3, [r7, #20]
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3718      	adds	r7, #24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	20000ee4 	.word	0x20000ee4
 8014e08:	20000ec0 	.word	0x20000ec0
 8014e0c:	20000e74 	.word	0x20000e74
 8014e10:	20000e78 	.word	0x20000e78
 8014e14:	20000ed4 	.word	0x20000ed4
 8014e18:	20000edc 	.word	0x20000edc
 8014e1c:	20000ec4 	.word	0x20000ec4
 8014e20:	200009ec 	.word	0x200009ec
 8014e24:	200009e8 	.word	0x200009e8
 8014e28:	20000ecc 	.word	0x20000ecc
 8014e2c:	20000ed0 	.word	0x20000ed0

08014e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014e30:	b480      	push	{r7}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014e36:	4b28      	ldr	r3, [pc, #160]	; (8014ed8 <vTaskSwitchContext+0xa8>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d003      	beq.n	8014e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014e3e:	4b27      	ldr	r3, [pc, #156]	; (8014edc <vTaskSwitchContext+0xac>)
 8014e40:	2201      	movs	r2, #1
 8014e42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014e44:	e042      	b.n	8014ecc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8014e46:	4b25      	ldr	r3, [pc, #148]	; (8014edc <vTaskSwitchContext+0xac>)
 8014e48:	2200      	movs	r2, #0
 8014e4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e4c:	4b24      	ldr	r3, [pc, #144]	; (8014ee0 <vTaskSwitchContext+0xb0>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	e011      	b.n	8014e78 <vTaskSwitchContext+0x48>
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d10b      	bne.n	8014e72 <vTaskSwitchContext+0x42>
 8014e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e5e:	b672      	cpsid	i
 8014e60:	f383 8811 	msr	BASEPRI, r3
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	b662      	cpsie	i
 8014e6e:	607b      	str	r3, [r7, #4]
 8014e70:	e7fe      	b.n	8014e70 <vTaskSwitchContext+0x40>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	3b01      	subs	r3, #1
 8014e76:	60fb      	str	r3, [r7, #12]
 8014e78:	491a      	ldr	r1, [pc, #104]	; (8014ee4 <vTaskSwitchContext+0xb4>)
 8014e7a:	68fa      	ldr	r2, [r7, #12]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	4413      	add	r3, r2
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	440b      	add	r3, r1
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d0e3      	beq.n	8014e54 <vTaskSwitchContext+0x24>
 8014e8c:	68fa      	ldr	r2, [r7, #12]
 8014e8e:	4613      	mov	r3, r2
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	4413      	add	r3, r2
 8014e94:	009b      	lsls	r3, r3, #2
 8014e96:	4a13      	ldr	r2, [pc, #76]	; (8014ee4 <vTaskSwitchContext+0xb4>)
 8014e98:	4413      	add	r3, r2
 8014e9a:	60bb      	str	r3, [r7, #8]
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	685a      	ldr	r2, [r3, #4]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	605a      	str	r2, [r3, #4]
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	685a      	ldr	r2, [r3, #4]
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	3308      	adds	r3, #8
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d104      	bne.n	8014ebc <vTaskSwitchContext+0x8c>
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	685a      	ldr	r2, [r3, #4]
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	605a      	str	r2, [r3, #4]
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	68db      	ldr	r3, [r3, #12]
 8014ec2:	4a09      	ldr	r2, [pc, #36]	; (8014ee8 <vTaskSwitchContext+0xb8>)
 8014ec4:	6013      	str	r3, [r2, #0]
 8014ec6:	4a06      	ldr	r2, [pc, #24]	; (8014ee0 <vTaskSwitchContext+0xb0>)
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	6013      	str	r3, [r2, #0]
}
 8014ecc:	bf00      	nop
 8014ece:	3714      	adds	r7, #20
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed6:	4770      	bx	lr
 8014ed8:	20000ee4 	.word	0x20000ee4
 8014edc:	20000ed0 	.word	0x20000ed0
 8014ee0:	20000ec4 	.word	0x20000ec4
 8014ee4:	200009ec 	.word	0x200009ec
 8014ee8:	200009e8 	.word	0x200009e8

08014eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d10b      	bne.n	8014f14 <vTaskPlaceOnEventList+0x28>
 8014efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f00:	b672      	cpsid	i
 8014f02:	f383 8811 	msr	BASEPRI, r3
 8014f06:	f3bf 8f6f 	isb	sy
 8014f0a:	f3bf 8f4f 	dsb	sy
 8014f0e:	b662      	cpsie	i
 8014f10:	60fb      	str	r3, [r7, #12]
 8014f12:	e7fe      	b.n	8014f12 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014f14:	4b07      	ldr	r3, [pc, #28]	; (8014f34 <vTaskPlaceOnEventList+0x48>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	3318      	adds	r3, #24
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7fe f9d4 	bl	80132ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014f22:	2101      	movs	r1, #1
 8014f24:	6838      	ldr	r0, [r7, #0]
 8014f26:	f000 fb8f 	bl	8015648 <prvAddCurrentTaskToDelayedList>
}
 8014f2a:	bf00      	nop
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	200009e8 	.word	0x200009e8

08014f38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d10b      	bne.n	8014f62 <vTaskPlaceOnEventListRestricted+0x2a>
 8014f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f4e:	b672      	cpsid	i
 8014f50:	f383 8811 	msr	BASEPRI, r3
 8014f54:	f3bf 8f6f 	isb	sy
 8014f58:	f3bf 8f4f 	dsb	sy
 8014f5c:	b662      	cpsie	i
 8014f5e:	617b      	str	r3, [r7, #20]
 8014f60:	e7fe      	b.n	8014f60 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014f62:	4b0a      	ldr	r3, [pc, #40]	; (8014f8c <vTaskPlaceOnEventListRestricted+0x54>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	3318      	adds	r3, #24
 8014f68:	4619      	mov	r1, r3
 8014f6a:	68f8      	ldr	r0, [r7, #12]
 8014f6c:	f7fe f989 	bl	8013282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d002      	beq.n	8014f7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014f76:	f04f 33ff 	mov.w	r3, #4294967295
 8014f7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014f7c:	6879      	ldr	r1, [r7, #4]
 8014f7e:	68b8      	ldr	r0, [r7, #8]
 8014f80:	f000 fb62 	bl	8015648 <prvAddCurrentTaskToDelayedList>
	}
 8014f84:	bf00      	nop
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	200009e8 	.word	0x200009e8

08014f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b086      	sub	sp, #24
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d10b      	bne.n	8014fbe <xTaskRemoveFromEventList+0x2e>
 8014fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014faa:	b672      	cpsid	i
 8014fac:	f383 8811 	msr	BASEPRI, r3
 8014fb0:	f3bf 8f6f 	isb	sy
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	b662      	cpsie	i
 8014fba:	60fb      	str	r3, [r7, #12]
 8014fbc:	e7fe      	b.n	8014fbc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	3318      	adds	r3, #24
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe f9ba 	bl	801333c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fc8:	4b1d      	ldr	r3, [pc, #116]	; (8015040 <xTaskRemoveFromEventList+0xb0>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d11d      	bne.n	801500c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	3304      	adds	r3, #4
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fe f9b1 	bl	801333c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fde:	4b19      	ldr	r3, [pc, #100]	; (8015044 <xTaskRemoveFromEventList+0xb4>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d903      	bls.n	8014fee <xTaskRemoveFromEventList+0x5e>
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fea:	4a16      	ldr	r2, [pc, #88]	; (8015044 <xTaskRemoveFromEventList+0xb4>)
 8014fec:	6013      	str	r3, [r2, #0]
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4413      	add	r3, r2
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	4a13      	ldr	r2, [pc, #76]	; (8015048 <xTaskRemoveFromEventList+0xb8>)
 8014ffc:	441a      	add	r2, r3
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	3304      	adds	r3, #4
 8015002:	4619      	mov	r1, r3
 8015004:	4610      	mov	r0, r2
 8015006:	f7fe f93c 	bl	8013282 <vListInsertEnd>
 801500a:	e005      	b.n	8015018 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	3318      	adds	r3, #24
 8015010:	4619      	mov	r1, r3
 8015012:	480e      	ldr	r0, [pc, #56]	; (801504c <xTaskRemoveFromEventList+0xbc>)
 8015014:	f7fe f935 	bl	8013282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801501c:	4b0c      	ldr	r3, [pc, #48]	; (8015050 <xTaskRemoveFromEventList+0xc0>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015022:	429a      	cmp	r2, r3
 8015024:	d905      	bls.n	8015032 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015026:	2301      	movs	r3, #1
 8015028:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801502a:	4b0a      	ldr	r3, [pc, #40]	; (8015054 <xTaskRemoveFromEventList+0xc4>)
 801502c:	2201      	movs	r2, #1
 801502e:	601a      	str	r2, [r3, #0]
 8015030:	e001      	b.n	8015036 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015032:	2300      	movs	r3, #0
 8015034:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015036:	697b      	ldr	r3, [r7, #20]
}
 8015038:	4618      	mov	r0, r3
 801503a:	3718      	adds	r7, #24
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	20000ee4 	.word	0x20000ee4
 8015044:	20000ec4 	.word	0x20000ec4
 8015048:	200009ec 	.word	0x200009ec
 801504c:	20000e7c 	.word	0x20000e7c
 8015050:	200009e8 	.word	0x200009e8
 8015054:	20000ed0 	.word	0x20000ed0

08015058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015060:	4b06      	ldr	r3, [pc, #24]	; (801507c <vTaskInternalSetTimeOutState+0x24>)
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015068:	4b05      	ldr	r3, [pc, #20]	; (8015080 <vTaskInternalSetTimeOutState+0x28>)
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	605a      	str	r2, [r3, #4]
}
 8015070:	bf00      	nop
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr
 801507c:	20000ed4 	.word	0x20000ed4
 8015080:	20000ec0 	.word	0x20000ec0

08015084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b088      	sub	sp, #32
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d10b      	bne.n	80150ac <xTaskCheckForTimeOut+0x28>
 8015094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015098:	b672      	cpsid	i
 801509a:	f383 8811 	msr	BASEPRI, r3
 801509e:	f3bf 8f6f 	isb	sy
 80150a2:	f3bf 8f4f 	dsb	sy
 80150a6:	b662      	cpsie	i
 80150a8:	613b      	str	r3, [r7, #16]
 80150aa:	e7fe      	b.n	80150aa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d10b      	bne.n	80150ca <xTaskCheckForTimeOut+0x46>
 80150b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b6:	b672      	cpsid	i
 80150b8:	f383 8811 	msr	BASEPRI, r3
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f3bf 8f4f 	dsb	sy
 80150c4:	b662      	cpsie	i
 80150c6:	60fb      	str	r3, [r7, #12]
 80150c8:	e7fe      	b.n	80150c8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80150ca:	f000 ff6d 	bl	8015fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80150ce:	4b1d      	ldr	r3, [pc, #116]	; (8015144 <xTaskCheckForTimeOut+0xc0>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	69ba      	ldr	r2, [r7, #24]
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150e6:	d102      	bne.n	80150ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80150e8:	2300      	movs	r3, #0
 80150ea:	61fb      	str	r3, [r7, #28]
 80150ec:	e023      	b.n	8015136 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	4b15      	ldr	r3, [pc, #84]	; (8015148 <xTaskCheckForTimeOut+0xc4>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d007      	beq.n	801510a <xTaskCheckForTimeOut+0x86>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	69ba      	ldr	r2, [r7, #24]
 8015100:	429a      	cmp	r2, r3
 8015102:	d302      	bcc.n	801510a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015104:	2301      	movs	r3, #1
 8015106:	61fb      	str	r3, [r7, #28]
 8015108:	e015      	b.n	8015136 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	429a      	cmp	r2, r3
 8015112:	d20b      	bcs.n	801512c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	1ad2      	subs	r2, r2, r3
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f7ff ff99 	bl	8015058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015126:	2300      	movs	r3, #0
 8015128:	61fb      	str	r3, [r7, #28]
 801512a:	e004      	b.n	8015136 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	2200      	movs	r2, #0
 8015130:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015132:	2301      	movs	r3, #1
 8015134:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015136:	f000 ff69 	bl	801600c <vPortExitCritical>

	return xReturn;
 801513a:	69fb      	ldr	r3, [r7, #28]
}
 801513c:	4618      	mov	r0, r3
 801513e:	3720      	adds	r7, #32
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}
 8015144:	20000ec0 	.word	0x20000ec0
 8015148:	20000ed4 	.word	0x20000ed4

0801514c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801514c:	b480      	push	{r7}
 801514e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015150:	4b03      	ldr	r3, [pc, #12]	; (8015160 <vTaskMissedYield+0x14>)
 8015152:	2201      	movs	r2, #1
 8015154:	601a      	str	r2, [r3, #0]
}
 8015156:	bf00      	nop
 8015158:	46bd      	mov	sp, r7
 801515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515e:	4770      	bx	lr
 8015160:	20000ed0 	.word	0x20000ed0

08015164 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801516c:	f000 f852 	bl	8015214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015170:	4b06      	ldr	r3, [pc, #24]	; (801518c <prvIdleTask+0x28>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2b01      	cmp	r3, #1
 8015176:	d9f9      	bls.n	801516c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015178:	4b05      	ldr	r3, [pc, #20]	; (8015190 <prvIdleTask+0x2c>)
 801517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801517e:	601a      	str	r2, [r3, #0]
 8015180:	f3bf 8f4f 	dsb	sy
 8015184:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015188:	e7f0      	b.n	801516c <prvIdleTask+0x8>
 801518a:	bf00      	nop
 801518c:	200009ec 	.word	0x200009ec
 8015190:	e000ed04 	.word	0xe000ed04

08015194 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801519a:	2300      	movs	r3, #0
 801519c:	607b      	str	r3, [r7, #4]
 801519e:	e00c      	b.n	80151ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151a0:	687a      	ldr	r2, [r7, #4]
 80151a2:	4613      	mov	r3, r2
 80151a4:	009b      	lsls	r3, r3, #2
 80151a6:	4413      	add	r3, r2
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	4a12      	ldr	r2, [pc, #72]	; (80151f4 <prvInitialiseTaskLists+0x60>)
 80151ac:	4413      	add	r3, r2
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7fe f83a 	bl	8013228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	3301      	adds	r3, #1
 80151b8:	607b      	str	r3, [r7, #4]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2b37      	cmp	r3, #55	; 0x37
 80151be:	d9ef      	bls.n	80151a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80151c0:	480d      	ldr	r0, [pc, #52]	; (80151f8 <prvInitialiseTaskLists+0x64>)
 80151c2:	f7fe f831 	bl	8013228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80151c6:	480d      	ldr	r0, [pc, #52]	; (80151fc <prvInitialiseTaskLists+0x68>)
 80151c8:	f7fe f82e 	bl	8013228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80151cc:	480c      	ldr	r0, [pc, #48]	; (8015200 <prvInitialiseTaskLists+0x6c>)
 80151ce:	f7fe f82b 	bl	8013228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80151d2:	480c      	ldr	r0, [pc, #48]	; (8015204 <prvInitialiseTaskLists+0x70>)
 80151d4:	f7fe f828 	bl	8013228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80151d8:	480b      	ldr	r0, [pc, #44]	; (8015208 <prvInitialiseTaskLists+0x74>)
 80151da:	f7fe f825 	bl	8013228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80151de:	4b0b      	ldr	r3, [pc, #44]	; (801520c <prvInitialiseTaskLists+0x78>)
 80151e0:	4a05      	ldr	r2, [pc, #20]	; (80151f8 <prvInitialiseTaskLists+0x64>)
 80151e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80151e4:	4b0a      	ldr	r3, [pc, #40]	; (8015210 <prvInitialiseTaskLists+0x7c>)
 80151e6:	4a05      	ldr	r2, [pc, #20]	; (80151fc <prvInitialiseTaskLists+0x68>)
 80151e8:	601a      	str	r2, [r3, #0]
}
 80151ea:	bf00      	nop
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	200009ec 	.word	0x200009ec
 80151f8:	20000e4c 	.word	0x20000e4c
 80151fc:	20000e60 	.word	0x20000e60
 8015200:	20000e7c 	.word	0x20000e7c
 8015204:	20000e90 	.word	0x20000e90
 8015208:	20000ea8 	.word	0x20000ea8
 801520c:	20000e74 	.word	0x20000e74
 8015210:	20000e78 	.word	0x20000e78

08015214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801521a:	e019      	b.n	8015250 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801521c:	f000 fec4 	bl	8015fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015220:	4b0f      	ldr	r3, [pc, #60]	; (8015260 <prvCheckTasksWaitingTermination+0x4c>)
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	68db      	ldr	r3, [r3, #12]
 8015226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	3304      	adds	r3, #4
 801522c:	4618      	mov	r0, r3
 801522e:	f7fe f885 	bl	801333c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015232:	4b0c      	ldr	r3, [pc, #48]	; (8015264 <prvCheckTasksWaitingTermination+0x50>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	3b01      	subs	r3, #1
 8015238:	4a0a      	ldr	r2, [pc, #40]	; (8015264 <prvCheckTasksWaitingTermination+0x50>)
 801523a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801523c:	4b0a      	ldr	r3, [pc, #40]	; (8015268 <prvCheckTasksWaitingTermination+0x54>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	3b01      	subs	r3, #1
 8015242:	4a09      	ldr	r2, [pc, #36]	; (8015268 <prvCheckTasksWaitingTermination+0x54>)
 8015244:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015246:	f000 fee1 	bl	801600c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 f80e 	bl	801526c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015250:	4b05      	ldr	r3, [pc, #20]	; (8015268 <prvCheckTasksWaitingTermination+0x54>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d1e1      	bne.n	801521c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015258:	bf00      	nop
 801525a:	3708      	adds	r7, #8
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	20000e90 	.word	0x20000e90
 8015264:	20000ebc 	.word	0x20000ebc
 8015268:	20000ea4 	.word	0x20000ea4

0801526c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801527a:	2b00      	cmp	r3, #0
 801527c:	d108      	bne.n	8015290 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015282:	4618      	mov	r0, r3
 8015284:	f001 f87a 	bl	801637c <vPortFree>
				vPortFree( pxTCB );
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f001 f877 	bl	801637c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801528e:	e019      	b.n	80152c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015296:	2b01      	cmp	r3, #1
 8015298:	d103      	bne.n	80152a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f001 f86e 	bl	801637c <vPortFree>
	}
 80152a0:	e010      	b.n	80152c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152a8:	2b02      	cmp	r3, #2
 80152aa:	d00b      	beq.n	80152c4 <prvDeleteTCB+0x58>
 80152ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b0:	b672      	cpsid	i
 80152b2:	f383 8811 	msr	BASEPRI, r3
 80152b6:	f3bf 8f6f 	isb	sy
 80152ba:	f3bf 8f4f 	dsb	sy
 80152be:	b662      	cpsie	i
 80152c0:	60fb      	str	r3, [r7, #12]
 80152c2:	e7fe      	b.n	80152c2 <prvDeleteTCB+0x56>
	}
 80152c4:	bf00      	nop
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152d2:	4b0c      	ldr	r3, [pc, #48]	; (8015304 <prvResetNextTaskUnblockTime+0x38>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d104      	bne.n	80152e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80152dc:	4b0a      	ldr	r3, [pc, #40]	; (8015308 <prvResetNextTaskUnblockTime+0x3c>)
 80152de:	f04f 32ff 	mov.w	r2, #4294967295
 80152e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80152e4:	e008      	b.n	80152f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152e6:	4b07      	ldr	r3, [pc, #28]	; (8015304 <prvResetNextTaskUnblockTime+0x38>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	68db      	ldr	r3, [r3, #12]
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	4a04      	ldr	r2, [pc, #16]	; (8015308 <prvResetNextTaskUnblockTime+0x3c>)
 80152f6:	6013      	str	r3, [r2, #0]
}
 80152f8:	bf00      	nop
 80152fa:	370c      	adds	r7, #12
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr
 8015304:	20000e74 	.word	0x20000e74
 8015308:	20000edc 	.word	0x20000edc

0801530c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015312:	4b05      	ldr	r3, [pc, #20]	; (8015328 <xTaskGetCurrentTaskHandle+0x1c>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015318:	687b      	ldr	r3, [r7, #4]
	}
 801531a:	4618      	mov	r0, r3
 801531c:	370c      	adds	r7, #12
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr
 8015326:	bf00      	nop
 8015328:	200009e8 	.word	0x200009e8

0801532c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015332:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <xTaskGetSchedulerState+0x34>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d102      	bne.n	8015340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801533a:	2301      	movs	r3, #1
 801533c:	607b      	str	r3, [r7, #4]
 801533e:	e008      	b.n	8015352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <xTaskGetSchedulerState+0x38>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d102      	bne.n	801534e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015348:	2302      	movs	r3, #2
 801534a:	607b      	str	r3, [r7, #4]
 801534c:	e001      	b.n	8015352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801534e:	2300      	movs	r3, #0
 8015350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015352:	687b      	ldr	r3, [r7, #4]
	}
 8015354:	4618      	mov	r0, r3
 8015356:	370c      	adds	r7, #12
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr
 8015360:	20000ec8 	.word	0x20000ec8
 8015364:	20000ee4 	.word	0x20000ee4

08015368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015374:	2300      	movs	r3, #0
 8015376:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d051      	beq.n	8015422 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015382:	4b2a      	ldr	r3, [pc, #168]	; (801542c <xTaskPriorityInherit+0xc4>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015388:	429a      	cmp	r2, r3
 801538a:	d241      	bcs.n	8015410 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	699b      	ldr	r3, [r3, #24]
 8015390:	2b00      	cmp	r3, #0
 8015392:	db06      	blt.n	80153a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015394:	4b25      	ldr	r3, [pc, #148]	; (801542c <xTaskPriorityInherit+0xc4>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801539a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	6959      	ldr	r1, [r3, #20]
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153aa:	4613      	mov	r3, r2
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	4413      	add	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4a1f      	ldr	r2, [pc, #124]	; (8015430 <xTaskPriorityInherit+0xc8>)
 80153b4:	4413      	add	r3, r2
 80153b6:	4299      	cmp	r1, r3
 80153b8:	d122      	bne.n	8015400 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	3304      	adds	r3, #4
 80153be:	4618      	mov	r0, r3
 80153c0:	f7fd ffbc 	bl	801333c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80153c4:	4b19      	ldr	r3, [pc, #100]	; (801542c <xTaskPriorityInherit+0xc4>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153d2:	4b18      	ldr	r3, [pc, #96]	; (8015434 <xTaskPriorityInherit+0xcc>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d903      	bls.n	80153e2 <xTaskPriorityInherit+0x7a>
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153de:	4a15      	ldr	r2, [pc, #84]	; (8015434 <xTaskPriorityInherit+0xcc>)
 80153e0:	6013      	str	r3, [r2, #0]
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153e6:	4613      	mov	r3, r2
 80153e8:	009b      	lsls	r3, r3, #2
 80153ea:	4413      	add	r3, r2
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	4a10      	ldr	r2, [pc, #64]	; (8015430 <xTaskPriorityInherit+0xc8>)
 80153f0:	441a      	add	r2, r3
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	3304      	adds	r3, #4
 80153f6:	4619      	mov	r1, r3
 80153f8:	4610      	mov	r0, r2
 80153fa:	f7fd ff42 	bl	8013282 <vListInsertEnd>
 80153fe:	e004      	b.n	801540a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015400:	4b0a      	ldr	r3, [pc, #40]	; (801542c <xTaskPriorityInherit+0xc4>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801540a:	2301      	movs	r3, #1
 801540c:	60fb      	str	r3, [r7, #12]
 801540e:	e008      	b.n	8015422 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015414:	4b05      	ldr	r3, [pc, #20]	; (801542c <xTaskPriorityInherit+0xc4>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801541a:	429a      	cmp	r2, r3
 801541c:	d201      	bcs.n	8015422 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801541e:	2301      	movs	r3, #1
 8015420:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015422:	68fb      	ldr	r3, [r7, #12]
	}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	200009e8 	.word	0x200009e8
 8015430:	200009ec 	.word	0x200009ec
 8015434:	20000ec4 	.word	0x20000ec4

08015438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015438:	b580      	push	{r7, lr}
 801543a:	b086      	sub	sp, #24
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015444:	2300      	movs	r3, #0
 8015446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d058      	beq.n	8015500 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801544e:	4b2f      	ldr	r3, [pc, #188]	; (801550c <xTaskPriorityDisinherit+0xd4>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	693a      	ldr	r2, [r7, #16]
 8015454:	429a      	cmp	r2, r3
 8015456:	d00b      	beq.n	8015470 <xTaskPriorityDisinherit+0x38>
 8015458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801545c:	b672      	cpsid	i
 801545e:	f383 8811 	msr	BASEPRI, r3
 8015462:	f3bf 8f6f 	isb	sy
 8015466:	f3bf 8f4f 	dsb	sy
 801546a:	b662      	cpsie	i
 801546c:	60fb      	str	r3, [r7, #12]
 801546e:	e7fe      	b.n	801546e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015474:	2b00      	cmp	r3, #0
 8015476:	d10b      	bne.n	8015490 <xTaskPriorityDisinherit+0x58>
 8015478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801547c:	b672      	cpsid	i
 801547e:	f383 8811 	msr	BASEPRI, r3
 8015482:	f3bf 8f6f 	isb	sy
 8015486:	f3bf 8f4f 	dsb	sy
 801548a:	b662      	cpsie	i
 801548c:	60bb      	str	r3, [r7, #8]
 801548e:	e7fe      	b.n	801548e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015494:	1e5a      	subs	r2, r3, #1
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801549a:	693b      	ldr	r3, [r7, #16]
 801549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801549e:	693b      	ldr	r3, [r7, #16]
 80154a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d02c      	beq.n	8015500 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d128      	bne.n	8015500 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	3304      	adds	r3, #4
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fd ff42 	bl	801333c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d0:	4b0f      	ldr	r3, [pc, #60]	; (8015510 <xTaskPriorityDisinherit+0xd8>)
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d903      	bls.n	80154e0 <xTaskPriorityDisinherit+0xa8>
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154dc:	4a0c      	ldr	r2, [pc, #48]	; (8015510 <xTaskPriorityDisinherit+0xd8>)
 80154de:	6013      	str	r3, [r2, #0]
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154e4:	4613      	mov	r3, r2
 80154e6:	009b      	lsls	r3, r3, #2
 80154e8:	4413      	add	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	4a09      	ldr	r2, [pc, #36]	; (8015514 <xTaskPriorityDisinherit+0xdc>)
 80154ee:	441a      	add	r2, r3
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	3304      	adds	r3, #4
 80154f4:	4619      	mov	r1, r3
 80154f6:	4610      	mov	r0, r2
 80154f8:	f7fd fec3 	bl	8013282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80154fc:	2301      	movs	r3, #1
 80154fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015500:	697b      	ldr	r3, [r7, #20]
	}
 8015502:	4618      	mov	r0, r3
 8015504:	3718      	adds	r7, #24
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	200009e8 	.word	0x200009e8
 8015510:	20000ec4 	.word	0x20000ec4
 8015514:	200009ec 	.word	0x200009ec

08015518 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015518:	b580      	push	{r7, lr}
 801551a:	b088      	sub	sp, #32
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015526:	2301      	movs	r3, #1
 8015528:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d06c      	beq.n	801560a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10b      	bne.n	8015550 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8015538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553c:	b672      	cpsid	i
 801553e:	f383 8811 	msr	BASEPRI, r3
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	b662      	cpsie	i
 801554c:	60fb      	str	r3, [r7, #12]
 801554e:	e7fe      	b.n	801554e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015550:	69bb      	ldr	r3, [r7, #24]
 8015552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015554:	683a      	ldr	r2, [r7, #0]
 8015556:	429a      	cmp	r2, r3
 8015558:	d902      	bls.n	8015560 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	61fb      	str	r3, [r7, #28]
 801555e:	e002      	b.n	8015566 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015560:	69bb      	ldr	r3, [r7, #24]
 8015562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015564:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015566:	69bb      	ldr	r3, [r7, #24]
 8015568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556a:	69fa      	ldr	r2, [r7, #28]
 801556c:	429a      	cmp	r2, r3
 801556e:	d04c      	beq.n	801560a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015574:	697a      	ldr	r2, [r7, #20]
 8015576:	429a      	cmp	r2, r3
 8015578:	d147      	bne.n	801560a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801557a:	4b26      	ldr	r3, [pc, #152]	; (8015614 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	69ba      	ldr	r2, [r7, #24]
 8015580:	429a      	cmp	r2, r3
 8015582:	d10b      	bne.n	801559c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8015584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015588:	b672      	cpsid	i
 801558a:	f383 8811 	msr	BASEPRI, r3
 801558e:	f3bf 8f6f 	isb	sy
 8015592:	f3bf 8f4f 	dsb	sy
 8015596:	b662      	cpsie	i
 8015598:	60bb      	str	r3, [r7, #8]
 801559a:	e7fe      	b.n	801559a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	69fa      	ldr	r2, [r7, #28]
 80155a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	699b      	ldr	r3, [r3, #24]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	db04      	blt.n	80155ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	6959      	ldr	r1, [r3, #20]
 80155be:	693a      	ldr	r2, [r7, #16]
 80155c0:	4613      	mov	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	4a13      	ldr	r2, [pc, #76]	; (8015618 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80155ca:	4413      	add	r3, r2
 80155cc:	4299      	cmp	r1, r3
 80155ce:	d11c      	bne.n	801560a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155d0:	69bb      	ldr	r3, [r7, #24]
 80155d2:	3304      	adds	r3, #4
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7fd feb1 	bl	801333c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155de:	4b0f      	ldr	r3, [pc, #60]	; (801561c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d903      	bls.n	80155ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155ea:	4a0c      	ldr	r2, [pc, #48]	; (801561c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80155ec:	6013      	str	r3, [r2, #0]
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155f2:	4613      	mov	r3, r2
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	4413      	add	r3, r2
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	4a07      	ldr	r2, [pc, #28]	; (8015618 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80155fc:	441a      	add	r2, r3
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	3304      	adds	r3, #4
 8015602:	4619      	mov	r1, r3
 8015604:	4610      	mov	r0, r2
 8015606:	f7fd fe3c 	bl	8013282 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801560a:	bf00      	nop
 801560c:	3720      	adds	r7, #32
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	200009e8 	.word	0x200009e8
 8015618:	200009ec 	.word	0x200009ec
 801561c:	20000ec4 	.word	0x20000ec4

08015620 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015620:	b480      	push	{r7}
 8015622:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015624:	4b07      	ldr	r3, [pc, #28]	; (8015644 <pvTaskIncrementMutexHeldCount+0x24>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d004      	beq.n	8015636 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801562c:	4b05      	ldr	r3, [pc, #20]	; (8015644 <pvTaskIncrementMutexHeldCount+0x24>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015632:	3201      	adds	r2, #1
 8015634:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015636:	4b03      	ldr	r3, [pc, #12]	; (8015644 <pvTaskIncrementMutexHeldCount+0x24>)
 8015638:	681b      	ldr	r3, [r3, #0]
	}
 801563a:	4618      	mov	r0, r3
 801563c:	46bd      	mov	sp, r7
 801563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015642:	4770      	bx	lr
 8015644:	200009e8 	.word	0x200009e8

08015648 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015652:	4b21      	ldr	r3, [pc, #132]	; (80156d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015658:	4b20      	ldr	r3, [pc, #128]	; (80156dc <prvAddCurrentTaskToDelayedList+0x94>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	3304      	adds	r3, #4
 801565e:	4618      	mov	r0, r3
 8015660:	f7fd fe6c 	bl	801333c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801566a:	d10a      	bne.n	8015682 <prvAddCurrentTaskToDelayedList+0x3a>
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d007      	beq.n	8015682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015672:	4b1a      	ldr	r3, [pc, #104]	; (80156dc <prvAddCurrentTaskToDelayedList+0x94>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	3304      	adds	r3, #4
 8015678:	4619      	mov	r1, r3
 801567a:	4819      	ldr	r0, [pc, #100]	; (80156e0 <prvAddCurrentTaskToDelayedList+0x98>)
 801567c:	f7fd fe01 	bl	8013282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015680:	e026      	b.n	80156d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	4413      	add	r3, r2
 8015688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801568a:	4b14      	ldr	r3, [pc, #80]	; (80156dc <prvAddCurrentTaskToDelayedList+0x94>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	68ba      	ldr	r2, [r7, #8]
 8015690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015692:	68ba      	ldr	r2, [r7, #8]
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	429a      	cmp	r2, r3
 8015698:	d209      	bcs.n	80156ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801569a:	4b12      	ldr	r3, [pc, #72]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	4b0f      	ldr	r3, [pc, #60]	; (80156dc <prvAddCurrentTaskToDelayedList+0x94>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	3304      	adds	r3, #4
 80156a4:	4619      	mov	r1, r3
 80156a6:	4610      	mov	r0, r2
 80156a8:	f7fd fe0f 	bl	80132ca <vListInsert>
}
 80156ac:	e010      	b.n	80156d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156ae:	4b0e      	ldr	r3, [pc, #56]	; (80156e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80156b0:	681a      	ldr	r2, [r3, #0]
 80156b2:	4b0a      	ldr	r3, [pc, #40]	; (80156dc <prvAddCurrentTaskToDelayedList+0x94>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	3304      	adds	r3, #4
 80156b8:	4619      	mov	r1, r3
 80156ba:	4610      	mov	r0, r2
 80156bc:	f7fd fe05 	bl	80132ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80156c0:	4b0a      	ldr	r3, [pc, #40]	; (80156ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d202      	bcs.n	80156d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80156ca:	4a08      	ldr	r2, [pc, #32]	; (80156ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	6013      	str	r3, [r2, #0]
}
 80156d0:	bf00      	nop
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	20000ec0 	.word	0x20000ec0
 80156dc:	200009e8 	.word	0x200009e8
 80156e0:	20000ea8 	.word	0x20000ea8
 80156e4:	20000e78 	.word	0x20000e78
 80156e8:	20000e74 	.word	0x20000e74
 80156ec:	20000edc 	.word	0x20000edc

080156f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08a      	sub	sp, #40	; 0x28
 80156f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80156f6:	2300      	movs	r3, #0
 80156f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80156fa:	f000 fb0d 	bl	8015d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80156fe:	4b1d      	ldr	r3, [pc, #116]	; (8015774 <xTimerCreateTimerTask+0x84>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d021      	beq.n	801574a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015706:	2300      	movs	r3, #0
 8015708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801570a:	2300      	movs	r3, #0
 801570c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801570e:	1d3a      	adds	r2, r7, #4
 8015710:	f107 0108 	add.w	r1, r7, #8
 8015714:	f107 030c 	add.w	r3, r7, #12
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd fd6b 	bl	80131f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	68fa      	ldr	r2, [r7, #12]
 8015724:	9202      	str	r2, [sp, #8]
 8015726:	9301      	str	r3, [sp, #4]
 8015728:	2302      	movs	r3, #2
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	2300      	movs	r3, #0
 801572e:	460a      	mov	r2, r1
 8015730:	4911      	ldr	r1, [pc, #68]	; (8015778 <xTimerCreateTimerTask+0x88>)
 8015732:	4812      	ldr	r0, [pc, #72]	; (801577c <xTimerCreateTimerTask+0x8c>)
 8015734:	f7fe ff30 	bl	8014598 <xTaskCreateStatic>
 8015738:	4602      	mov	r2, r0
 801573a:	4b11      	ldr	r3, [pc, #68]	; (8015780 <xTimerCreateTimerTask+0x90>)
 801573c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801573e:	4b10      	ldr	r3, [pc, #64]	; (8015780 <xTimerCreateTimerTask+0x90>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d001      	beq.n	801574a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015746:	2301      	movs	r3, #1
 8015748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d10b      	bne.n	8015768 <xTimerCreateTimerTask+0x78>
 8015750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015754:	b672      	cpsid	i
 8015756:	f383 8811 	msr	BASEPRI, r3
 801575a:	f3bf 8f6f 	isb	sy
 801575e:	f3bf 8f4f 	dsb	sy
 8015762:	b662      	cpsie	i
 8015764:	613b      	str	r3, [r7, #16]
 8015766:	e7fe      	b.n	8015766 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8015768:	697b      	ldr	r3, [r7, #20]
}
 801576a:	4618      	mov	r0, r3
 801576c:	3718      	adds	r7, #24
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
 8015772:	bf00      	nop
 8015774:	20000f18 	.word	0x20000f18
 8015778:	08019e80 	.word	0x08019e80
 801577c:	080158bd 	.word	0x080158bd
 8015780:	20000f1c 	.word	0x20000f1c

08015784 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b08a      	sub	sp, #40	; 0x28
 8015788:	af00      	add	r7, sp, #0
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	607a      	str	r2, [r7, #4]
 8015790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015792:	2300      	movs	r3, #0
 8015794:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d10b      	bne.n	80157b4 <xTimerGenericCommand+0x30>
 801579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a0:	b672      	cpsid	i
 80157a2:	f383 8811 	msr	BASEPRI, r3
 80157a6:	f3bf 8f6f 	isb	sy
 80157aa:	f3bf 8f4f 	dsb	sy
 80157ae:	b662      	cpsie	i
 80157b0:	623b      	str	r3, [r7, #32]
 80157b2:	e7fe      	b.n	80157b2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80157b4:	4b19      	ldr	r3, [pc, #100]	; (801581c <xTimerGenericCommand+0x98>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d02a      	beq.n	8015812 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	2b05      	cmp	r3, #5
 80157cc:	dc18      	bgt.n	8015800 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80157ce:	f7ff fdad 	bl	801532c <xTaskGetSchedulerState>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b02      	cmp	r3, #2
 80157d6:	d109      	bne.n	80157ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80157d8:	4b10      	ldr	r3, [pc, #64]	; (801581c <xTimerGenericCommand+0x98>)
 80157da:	6818      	ldr	r0, [r3, #0]
 80157dc:	f107 0110 	add.w	r1, r7, #16
 80157e0:	2300      	movs	r3, #0
 80157e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157e4:	f7fe f860 	bl	80138a8 <xQueueGenericSend>
 80157e8:	6278      	str	r0, [r7, #36]	; 0x24
 80157ea:	e012      	b.n	8015812 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80157ec:	4b0b      	ldr	r3, [pc, #44]	; (801581c <xTimerGenericCommand+0x98>)
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	f107 0110 	add.w	r1, r7, #16
 80157f4:	2300      	movs	r3, #0
 80157f6:	2200      	movs	r2, #0
 80157f8:	f7fe f856 	bl	80138a8 <xQueueGenericSend>
 80157fc:	6278      	str	r0, [r7, #36]	; 0x24
 80157fe:	e008      	b.n	8015812 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015800:	4b06      	ldr	r3, [pc, #24]	; (801581c <xTimerGenericCommand+0x98>)
 8015802:	6818      	ldr	r0, [r3, #0]
 8015804:	f107 0110 	add.w	r1, r7, #16
 8015808:	2300      	movs	r3, #0
 801580a:	683a      	ldr	r2, [r7, #0]
 801580c:	f7fe f94e 	bl	8013aac <xQueueGenericSendFromISR>
 8015810:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015814:	4618      	mov	r0, r3
 8015816:	3728      	adds	r7, #40	; 0x28
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	20000f18 	.word	0x20000f18

08015820 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b088      	sub	sp, #32
 8015824:	af02      	add	r7, sp, #8
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801582a:	4b23      	ldr	r3, [pc, #140]	; (80158b8 <prvProcessExpiredTimer+0x98>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	68db      	ldr	r3, [r3, #12]
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	3304      	adds	r3, #4
 8015838:	4618      	mov	r0, r3
 801583a:	f7fd fd7f 	bl	801333c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015844:	f003 0304 	and.w	r3, r3, #4
 8015848:	2b00      	cmp	r3, #0
 801584a:	d023      	beq.n	8015894 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	699a      	ldr	r2, [r3, #24]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	18d1      	adds	r1, r2, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	683a      	ldr	r2, [r7, #0]
 8015858:	6978      	ldr	r0, [r7, #20]
 801585a:	f000 f8d3 	bl	8015a04 <prvInsertTimerInActiveList>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d020      	beq.n	80158a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015864:	2300      	movs	r3, #0
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	2300      	movs	r3, #0
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	2100      	movs	r1, #0
 801586e:	6978      	ldr	r0, [r7, #20]
 8015870:	f7ff ff88 	bl	8015784 <xTimerGenericCommand>
 8015874:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d114      	bne.n	80158a6 <prvProcessExpiredTimer+0x86>
 801587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015880:	b672      	cpsid	i
 8015882:	f383 8811 	msr	BASEPRI, r3
 8015886:	f3bf 8f6f 	isb	sy
 801588a:	f3bf 8f4f 	dsb	sy
 801588e:	b662      	cpsie	i
 8015890:	60fb      	str	r3, [r7, #12]
 8015892:	e7fe      	b.n	8015892 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801589a:	f023 0301 	bic.w	r3, r3, #1
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	6a1b      	ldr	r3, [r3, #32]
 80158aa:	6978      	ldr	r0, [r7, #20]
 80158ac:	4798      	blx	r3
}
 80158ae:	bf00      	nop
 80158b0:	3718      	adds	r7, #24
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	20000f10 	.word	0x20000f10

080158bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158c4:	f107 0308 	add.w	r3, r7, #8
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 f857 	bl	801597c <prvGetNextExpireTime>
 80158ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	4619      	mov	r1, r3
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f000 f803 	bl	80158e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80158da:	f000 f8d5 	bl	8015a88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158de:	e7f1      	b.n	80158c4 <prvTimerTask+0x8>

080158e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80158ea:	f7ff f919 	bl	8014b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80158ee:	f107 0308 	add.w	r3, r7, #8
 80158f2:	4618      	mov	r0, r3
 80158f4:	f000 f866 	bl	80159c4 <prvSampleTimeNow>
 80158f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d130      	bne.n	8015962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d10a      	bne.n	801591c <prvProcessTimerOrBlockTask+0x3c>
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	429a      	cmp	r2, r3
 801590c:	d806      	bhi.n	801591c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801590e:	f7ff f915 	bl	8014b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015912:	68f9      	ldr	r1, [r7, #12]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff ff83 	bl	8015820 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801591a:	e024      	b.n	8015966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d008      	beq.n	8015934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015922:	4b13      	ldr	r3, [pc, #76]	; (8015970 <prvProcessTimerOrBlockTask+0x90>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d101      	bne.n	8015930 <prvProcessTimerOrBlockTask+0x50>
 801592c:	2301      	movs	r3, #1
 801592e:	e000      	b.n	8015932 <prvProcessTimerOrBlockTask+0x52>
 8015930:	2300      	movs	r3, #0
 8015932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015934:	4b0f      	ldr	r3, [pc, #60]	; (8015974 <prvProcessTimerOrBlockTask+0x94>)
 8015936:	6818      	ldr	r0, [r3, #0]
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	683a      	ldr	r2, [r7, #0]
 8015940:	4619      	mov	r1, r3
 8015942:	f7fe fdf5 	bl	8014530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015946:	f7ff f8f9 	bl	8014b3c <xTaskResumeAll>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d10a      	bne.n	8015966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015950:	4b09      	ldr	r3, [pc, #36]	; (8015978 <prvProcessTimerOrBlockTask+0x98>)
 8015952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015956:	601a      	str	r2, [r3, #0]
 8015958:	f3bf 8f4f 	dsb	sy
 801595c:	f3bf 8f6f 	isb	sy
}
 8015960:	e001      	b.n	8015966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015962:	f7ff f8eb 	bl	8014b3c <xTaskResumeAll>
}
 8015966:	bf00      	nop
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	20000f14 	.word	0x20000f14
 8015974:	20000f18 	.word	0x20000f18
 8015978:	e000ed04 	.word	0xe000ed04

0801597c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801597c:	b480      	push	{r7}
 801597e:	b085      	sub	sp, #20
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015984:	4b0e      	ldr	r3, [pc, #56]	; (80159c0 <prvGetNextExpireTime+0x44>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d101      	bne.n	8015992 <prvGetNextExpireTime+0x16>
 801598e:	2201      	movs	r2, #1
 8015990:	e000      	b.n	8015994 <prvGetNextExpireTime+0x18>
 8015992:	2200      	movs	r2, #0
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d105      	bne.n	80159ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159a0:	4b07      	ldr	r3, [pc, #28]	; (80159c0 <prvGetNextExpireTime+0x44>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	60fb      	str	r3, [r7, #12]
 80159aa:	e001      	b.n	80159b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80159ac:	2300      	movs	r3, #0
 80159ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80159b0:	68fb      	ldr	r3, [r7, #12]
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	3714      	adds	r7, #20
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr
 80159be:	bf00      	nop
 80159c0:	20000f10 	.word	0x20000f10

080159c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80159cc:	f7ff f954 	bl	8014c78 <xTaskGetTickCount>
 80159d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80159d2:	4b0b      	ldr	r3, [pc, #44]	; (8015a00 <prvSampleTimeNow+0x3c>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d205      	bcs.n	80159e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80159dc:	f000 f936 	bl	8015c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2201      	movs	r2, #1
 80159e4:	601a      	str	r2, [r3, #0]
 80159e6:	e002      	b.n	80159ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2200      	movs	r2, #0
 80159ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80159ee:	4a04      	ldr	r2, [pc, #16]	; (8015a00 <prvSampleTimeNow+0x3c>)
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80159f4:	68fb      	ldr	r3, [r7, #12]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	20000f20 	.word	0x20000f20

08015a04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b086      	sub	sp, #24
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015a12:	2300      	movs	r3, #0
 8015a14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	68ba      	ldr	r2, [r7, #8]
 8015a1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	68fa      	ldr	r2, [r7, #12]
 8015a20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d812      	bhi.n	8015a50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	1ad2      	subs	r2, r2, r3
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	699b      	ldr	r3, [r3, #24]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d302      	bcc.n	8015a3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	617b      	str	r3, [r7, #20]
 8015a3c:	e01b      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015a3e:	4b10      	ldr	r3, [pc, #64]	; (8015a80 <prvInsertTimerInActiveList+0x7c>)
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3304      	adds	r3, #4
 8015a46:	4619      	mov	r1, r3
 8015a48:	4610      	mov	r0, r2
 8015a4a:	f7fd fc3e 	bl	80132ca <vListInsert>
 8015a4e:	e012      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d206      	bcs.n	8015a66 <prvInsertTimerInActiveList+0x62>
 8015a58:	68ba      	ldr	r2, [r7, #8]
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d302      	bcc.n	8015a66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015a60:	2301      	movs	r3, #1
 8015a62:	617b      	str	r3, [r7, #20]
 8015a64:	e007      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a66:	4b07      	ldr	r3, [pc, #28]	; (8015a84 <prvInsertTimerInActiveList+0x80>)
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	4619      	mov	r1, r3
 8015a70:	4610      	mov	r0, r2
 8015a72:	f7fd fc2a 	bl	80132ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015a76:	697b      	ldr	r3, [r7, #20]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3718      	adds	r7, #24
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	20000f14 	.word	0x20000f14
 8015a84:	20000f10 	.word	0x20000f10

08015a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b08e      	sub	sp, #56	; 0x38
 8015a8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015a8e:	e0cc      	b.n	8015c2a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	da19      	bge.n	8015aca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015a96:	1d3b      	adds	r3, r7, #4
 8015a98:	3304      	adds	r3, #4
 8015a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10b      	bne.n	8015aba <prvProcessReceivedCommands+0x32>
 8015aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa6:	b672      	cpsid	i
 8015aa8:	f383 8811 	msr	BASEPRI, r3
 8015aac:	f3bf 8f6f 	isb	sy
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	b662      	cpsie	i
 8015ab6:	61fb      	str	r3, [r7, #28]
 8015ab8:	e7fe      	b.n	8015ab8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac0:	6850      	ldr	r0, [r2, #4]
 8015ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac4:	6892      	ldr	r2, [r2, #8]
 8015ac6:	4611      	mov	r1, r2
 8015ac8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	f2c0 80ab 	blt.w	8015c28 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad8:	695b      	ldr	r3, [r3, #20]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d004      	beq.n	8015ae8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7fd fc2a 	bl	801333c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ae8:	463b      	mov	r3, r7
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7ff ff6a 	bl	80159c4 <prvSampleTimeNow>
 8015af0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2b09      	cmp	r3, #9
 8015af6:	f200 8098 	bhi.w	8015c2a <prvProcessReceivedCommands+0x1a2>
 8015afa:	a201      	add	r2, pc, #4	; (adr r2, 8015b00 <prvProcessReceivedCommands+0x78>)
 8015afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b00:	08015b29 	.word	0x08015b29
 8015b04:	08015b29 	.word	0x08015b29
 8015b08:	08015b29 	.word	0x08015b29
 8015b0c:	08015b9f 	.word	0x08015b9f
 8015b10:	08015bb3 	.word	0x08015bb3
 8015b14:	08015bff 	.word	0x08015bff
 8015b18:	08015b29 	.word	0x08015b29
 8015b1c:	08015b29 	.word	0x08015b29
 8015b20:	08015b9f 	.word	0x08015b9f
 8015b24:	08015bb3 	.word	0x08015bb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b2e:	f043 0301 	orr.w	r3, r3, #1
 8015b32:	b2da      	uxtb	r2, r3
 8015b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015b3a:	68ba      	ldr	r2, [r7, #8]
 8015b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3e:	699b      	ldr	r3, [r3, #24]
 8015b40:	18d1      	adds	r1, r2, r3
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b48:	f7ff ff5c 	bl	8015a04 <prvInsertTimerInActiveList>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d06b      	beq.n	8015c2a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	6a1b      	ldr	r3, [r3, #32]
 8015b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b60:	f003 0304 	and.w	r3, r3, #4
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d060      	beq.n	8015c2a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	441a      	add	r2, r3
 8015b70:	2300      	movs	r3, #0
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	2300      	movs	r3, #0
 8015b76:	2100      	movs	r1, #0
 8015b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b7a:	f7ff fe03 	bl	8015784 <xTimerGenericCommand>
 8015b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015b80:	6a3b      	ldr	r3, [r7, #32]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d151      	bne.n	8015c2a <prvProcessReceivedCommands+0x1a2>
 8015b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8a:	b672      	cpsid	i
 8015b8c:	f383 8811 	msr	BASEPRI, r3
 8015b90:	f3bf 8f6f 	isb	sy
 8015b94:	f3bf 8f4f 	dsb	sy
 8015b98:	b662      	cpsie	i
 8015b9a:	61bb      	str	r3, [r7, #24]
 8015b9c:	e7fe      	b.n	8015b9c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ba4:	f023 0301 	bic.w	r3, r3, #1
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015bb0:	e03b      	b.n	8015c2a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bb8:	f043 0301 	orr.w	r3, r3, #1
 8015bbc:	b2da      	uxtb	r2, r3
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015bc4:	68ba      	ldr	r2, [r7, #8]
 8015bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bcc:	699b      	ldr	r3, [r3, #24]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d10b      	bne.n	8015bea <prvProcessReceivedCommands+0x162>
 8015bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd6:	b672      	cpsid	i
 8015bd8:	f383 8811 	msr	BASEPRI, r3
 8015bdc:	f3bf 8f6f 	isb	sy
 8015be0:	f3bf 8f4f 	dsb	sy
 8015be4:	b662      	cpsie	i
 8015be6:	617b      	str	r3, [r7, #20]
 8015be8:	e7fe      	b.n	8015be8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	699a      	ldr	r2, [r3, #24]
 8015bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf0:	18d1      	adds	r1, r2, r3
 8015bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bf8:	f7ff ff04 	bl	8015a04 <prvInsertTimerInActiveList>
					break;
 8015bfc:	e015      	b.n	8015c2a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c04:	f003 0302 	and.w	r3, r3, #2
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d103      	bne.n	8015c14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c0e:	f000 fbb5 	bl	801637c <vPortFree>
 8015c12:	e00a      	b.n	8015c2a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c1a:	f023 0301 	bic.w	r3, r3, #1
 8015c1e:	b2da      	uxtb	r2, r3
 8015c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015c26:	e000      	b.n	8015c2a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015c28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c2a:	4b07      	ldr	r3, [pc, #28]	; (8015c48 <prvProcessReceivedCommands+0x1c0>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	1d39      	adds	r1, r7, #4
 8015c30:	2200      	movs	r2, #0
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fe f868 	bl	8013d08 <xQueueReceive>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f47f af28 	bne.w	8015a90 <prvProcessReceivedCommands+0x8>
	}
}
 8015c40:	bf00      	nop
 8015c42:	3730      	adds	r7, #48	; 0x30
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	20000f18 	.word	0x20000f18

08015c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b088      	sub	sp, #32
 8015c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c52:	e049      	b.n	8015ce8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c54:	4b2e      	ldr	r3, [pc, #184]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	68db      	ldr	r3, [r3, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c5e:	4b2c      	ldr	r3, [pc, #176]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7fd fb65 	bl	801333c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	6a1b      	ldr	r3, [r3, #32]
 8015c76:	68f8      	ldr	r0, [r7, #12]
 8015c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c80:	f003 0304 	and.w	r3, r3, #4
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d02f      	beq.n	8015ce8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	699b      	ldr	r3, [r3, #24]
 8015c8c:	693a      	ldr	r2, [r7, #16]
 8015c8e:	4413      	add	r3, r2
 8015c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015c92:	68ba      	ldr	r2, [r7, #8]
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d90e      	bls.n	8015cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	68fa      	ldr	r2, [r7, #12]
 8015ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015ca6:	4b1a      	ldr	r3, [pc, #104]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	3304      	adds	r3, #4
 8015cae:	4619      	mov	r1, r3
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	f7fd fb0a 	bl	80132ca <vListInsert>
 8015cb6:	e017      	b.n	8015ce8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015cb8:	2300      	movs	r3, #0
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	693a      	ldr	r2, [r7, #16]
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f7ff fd5e 	bl	8015784 <xTimerGenericCommand>
 8015cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d10b      	bne.n	8015ce8 <prvSwitchTimerLists+0x9c>
 8015cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd4:	b672      	cpsid	i
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	b662      	cpsie	i
 8015ce4:	603b      	str	r3, [r7, #0]
 8015ce6:	e7fe      	b.n	8015ce6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d1b0      	bne.n	8015c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015cf2:	4b07      	ldr	r3, [pc, #28]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015cf8:	4b06      	ldr	r3, [pc, #24]	; (8015d14 <prvSwitchTimerLists+0xc8>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	4a04      	ldr	r2, [pc, #16]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015cfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015d00:	4a04      	ldr	r2, [pc, #16]	; (8015d14 <prvSwitchTimerLists+0xc8>)
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	6013      	str	r3, [r2, #0]
}
 8015d06:	bf00      	nop
 8015d08:	3718      	adds	r7, #24
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	20000f10 	.word	0x20000f10
 8015d14:	20000f14 	.word	0x20000f14

08015d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015d1e:	f000 f943 	bl	8015fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015d22:	4b15      	ldr	r3, [pc, #84]	; (8015d78 <prvCheckForValidListAndQueue+0x60>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d120      	bne.n	8015d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015d2a:	4814      	ldr	r0, [pc, #80]	; (8015d7c <prvCheckForValidListAndQueue+0x64>)
 8015d2c:	f7fd fa7c 	bl	8013228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015d30:	4813      	ldr	r0, [pc, #76]	; (8015d80 <prvCheckForValidListAndQueue+0x68>)
 8015d32:	f7fd fa79 	bl	8013228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015d36:	4b13      	ldr	r3, [pc, #76]	; (8015d84 <prvCheckForValidListAndQueue+0x6c>)
 8015d38:	4a10      	ldr	r2, [pc, #64]	; (8015d7c <prvCheckForValidListAndQueue+0x64>)
 8015d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015d3c:	4b12      	ldr	r3, [pc, #72]	; (8015d88 <prvCheckForValidListAndQueue+0x70>)
 8015d3e:	4a10      	ldr	r2, [pc, #64]	; (8015d80 <prvCheckForValidListAndQueue+0x68>)
 8015d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015d42:	2300      	movs	r3, #0
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	4b11      	ldr	r3, [pc, #68]	; (8015d8c <prvCheckForValidListAndQueue+0x74>)
 8015d48:	4a11      	ldr	r2, [pc, #68]	; (8015d90 <prvCheckForValidListAndQueue+0x78>)
 8015d4a:	2110      	movs	r1, #16
 8015d4c:	200a      	movs	r0, #10
 8015d4e:	f7fd fb89 	bl	8013464 <xQueueGenericCreateStatic>
 8015d52:	4602      	mov	r2, r0
 8015d54:	4b08      	ldr	r3, [pc, #32]	; (8015d78 <prvCheckForValidListAndQueue+0x60>)
 8015d56:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015d58:	4b07      	ldr	r3, [pc, #28]	; (8015d78 <prvCheckForValidListAndQueue+0x60>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d005      	beq.n	8015d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d60:	4b05      	ldr	r3, [pc, #20]	; (8015d78 <prvCheckForValidListAndQueue+0x60>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	490b      	ldr	r1, [pc, #44]	; (8015d94 <prvCheckForValidListAndQueue+0x7c>)
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7fe fb90 	bl	801448c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d6c:	f000 f94e 	bl	801600c <vPortExitCritical>
}
 8015d70:	bf00      	nop
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	20000f18 	.word	0x20000f18
 8015d7c:	20000ee8 	.word	0x20000ee8
 8015d80:	20000efc 	.word	0x20000efc
 8015d84:	20000f10 	.word	0x20000f10
 8015d88:	20000f14 	.word	0x20000f14
 8015d8c:	20000fc4 	.word	0x20000fc4
 8015d90:	20000f24 	.word	0x20000f24
 8015d94:	08019e88 	.word	0x08019e88

08015d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015d98:	b480      	push	{r7}
 8015d9a:	b085      	sub	sp, #20
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	3b04      	subs	r3, #4
 8015da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	3b04      	subs	r3, #4
 8015db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	f023 0201 	bic.w	r2, r3, #1
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	3b04      	subs	r3, #4
 8015dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015dc8:	4a0c      	ldr	r2, [pc, #48]	; (8015dfc <pxPortInitialiseStack+0x64>)
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	3b14      	subs	r3, #20
 8015dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015dd4:	687a      	ldr	r2, [r7, #4]
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	3b04      	subs	r3, #4
 8015dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f06f 0202 	mvn.w	r2, #2
 8015de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	3b20      	subs	r3, #32
 8015dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015dee:	68fb      	ldr	r3, [r7, #12]
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3714      	adds	r7, #20
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr
 8015dfc:	08015e01 	.word	0x08015e01

08015e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e00:	b480      	push	{r7}
 8015e02:	b085      	sub	sp, #20
 8015e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e06:	2300      	movs	r3, #0
 8015e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e0a:	4b13      	ldr	r3, [pc, #76]	; (8015e58 <prvTaskExitError+0x58>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e12:	d00b      	beq.n	8015e2c <prvTaskExitError+0x2c>
 8015e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e18:	b672      	cpsid	i
 8015e1a:	f383 8811 	msr	BASEPRI, r3
 8015e1e:	f3bf 8f6f 	isb	sy
 8015e22:	f3bf 8f4f 	dsb	sy
 8015e26:	b662      	cpsie	i
 8015e28:	60fb      	str	r3, [r7, #12]
 8015e2a:	e7fe      	b.n	8015e2a <prvTaskExitError+0x2a>
 8015e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e30:	b672      	cpsid	i
 8015e32:	f383 8811 	msr	BASEPRI, r3
 8015e36:	f3bf 8f6f 	isb	sy
 8015e3a:	f3bf 8f4f 	dsb	sy
 8015e3e:	b662      	cpsie	i
 8015e40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e42:	bf00      	nop
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d0fc      	beq.n	8015e44 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e4a:	bf00      	nop
 8015e4c:	3714      	adds	r7, #20
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e54:	4770      	bx	lr
 8015e56:	bf00      	nop
 8015e58:	20000120 	.word	0x20000120
 8015e5c:	00000000 	.word	0x00000000

08015e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015e60:	4b07      	ldr	r3, [pc, #28]	; (8015e80 <pxCurrentTCBConst2>)
 8015e62:	6819      	ldr	r1, [r3, #0]
 8015e64:	6808      	ldr	r0, [r1, #0]
 8015e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6a:	f380 8809 	msr	PSP, r0
 8015e6e:	f3bf 8f6f 	isb	sy
 8015e72:	f04f 0000 	mov.w	r0, #0
 8015e76:	f380 8811 	msr	BASEPRI, r0
 8015e7a:	4770      	bx	lr
 8015e7c:	f3af 8000 	nop.w

08015e80 <pxCurrentTCBConst2>:
 8015e80:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop

08015e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015e88:	4808      	ldr	r0, [pc, #32]	; (8015eac <prvPortStartFirstTask+0x24>)
 8015e8a:	6800      	ldr	r0, [r0, #0]
 8015e8c:	6800      	ldr	r0, [r0, #0]
 8015e8e:	f380 8808 	msr	MSP, r0
 8015e92:	f04f 0000 	mov.w	r0, #0
 8015e96:	f380 8814 	msr	CONTROL, r0
 8015e9a:	b662      	cpsie	i
 8015e9c:	b661      	cpsie	f
 8015e9e:	f3bf 8f4f 	dsb	sy
 8015ea2:	f3bf 8f6f 	isb	sy
 8015ea6:	df00      	svc	0
 8015ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015eaa:	bf00      	nop
 8015eac:	e000ed08 	.word	0xe000ed08

08015eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015eb6:	4b36      	ldr	r3, [pc, #216]	; (8015f90 <xPortStartScheduler+0xe0>)
 8015eb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	22ff      	movs	r2, #255	; 0xff
 8015ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ed0:	78fb      	ldrb	r3, [r7, #3]
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ed8:	b2da      	uxtb	r2, r3
 8015eda:	4b2e      	ldr	r3, [pc, #184]	; (8015f94 <xPortStartScheduler+0xe4>)
 8015edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015ede:	4b2e      	ldr	r3, [pc, #184]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015ee0:	2207      	movs	r2, #7
 8015ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ee4:	e009      	b.n	8015efa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015ee6:	4b2c      	ldr	r3, [pc, #176]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	3b01      	subs	r3, #1
 8015eec:	4a2a      	ldr	r2, [pc, #168]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ef0:	78fb      	ldrb	r3, [r7, #3]
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015efa:	78fb      	ldrb	r3, [r7, #3]
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f02:	2b80      	cmp	r3, #128	; 0x80
 8015f04:	d0ef      	beq.n	8015ee6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015f06:	4b24      	ldr	r3, [pc, #144]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	f1c3 0307 	rsb	r3, r3, #7
 8015f0e:	2b04      	cmp	r3, #4
 8015f10:	d00b      	beq.n	8015f2a <xPortStartScheduler+0x7a>
 8015f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f16:	b672      	cpsid	i
 8015f18:	f383 8811 	msr	BASEPRI, r3
 8015f1c:	f3bf 8f6f 	isb	sy
 8015f20:	f3bf 8f4f 	dsb	sy
 8015f24:	b662      	cpsie	i
 8015f26:	60bb      	str	r3, [r7, #8]
 8015f28:	e7fe      	b.n	8015f28 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015f2a:	4b1b      	ldr	r3, [pc, #108]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	021b      	lsls	r3, r3, #8
 8015f30:	4a19      	ldr	r2, [pc, #100]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015f32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015f34:	4b18      	ldr	r3, [pc, #96]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f3c:	4a16      	ldr	r2, [pc, #88]	; (8015f98 <xPortStartScheduler+0xe8>)
 8015f3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	b2da      	uxtb	r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015f48:	4b14      	ldr	r3, [pc, #80]	; (8015f9c <xPortStartScheduler+0xec>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4a13      	ldr	r2, [pc, #76]	; (8015f9c <xPortStartScheduler+0xec>)
 8015f4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015f52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015f54:	4b11      	ldr	r3, [pc, #68]	; (8015f9c <xPortStartScheduler+0xec>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4a10      	ldr	r2, [pc, #64]	; (8015f9c <xPortStartScheduler+0xec>)
 8015f5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015f5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015f60:	f000 f8d4 	bl	801610c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015f64:	4b0e      	ldr	r3, [pc, #56]	; (8015fa0 <xPortStartScheduler+0xf0>)
 8015f66:	2200      	movs	r2, #0
 8015f68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015f6a:	f000 f8f3 	bl	8016154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015f6e:	4b0d      	ldr	r3, [pc, #52]	; (8015fa4 <xPortStartScheduler+0xf4>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4a0c      	ldr	r2, [pc, #48]	; (8015fa4 <xPortStartScheduler+0xf4>)
 8015f74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015f78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015f7a:	f7ff ff85 	bl	8015e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015f7e:	f7fe ff57 	bl	8014e30 <vTaskSwitchContext>
	prvTaskExitError();
 8015f82:	f7ff ff3d 	bl	8015e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015f86:	2300      	movs	r3, #0
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3710      	adds	r7, #16
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	e000e400 	.word	0xe000e400
 8015f94:	20001014 	.word	0x20001014
 8015f98:	20001018 	.word	0x20001018
 8015f9c:	e000ed20 	.word	0xe000ed20
 8015fa0:	20000120 	.word	0x20000120
 8015fa4:	e000ef34 	.word	0xe000ef34

08015fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb2:	b672      	cpsid	i
 8015fb4:	f383 8811 	msr	BASEPRI, r3
 8015fb8:	f3bf 8f6f 	isb	sy
 8015fbc:	f3bf 8f4f 	dsb	sy
 8015fc0:	b662      	cpsie	i
 8015fc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015fc4:	4b0f      	ldr	r3, [pc, #60]	; (8016004 <vPortEnterCritical+0x5c>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	4a0e      	ldr	r2, [pc, #56]	; (8016004 <vPortEnterCritical+0x5c>)
 8015fcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015fce:	4b0d      	ldr	r3, [pc, #52]	; (8016004 <vPortEnterCritical+0x5c>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2b01      	cmp	r3, #1
 8015fd4:	d110      	bne.n	8015ff8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015fd6:	4b0c      	ldr	r3, [pc, #48]	; (8016008 <vPortEnterCritical+0x60>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d00b      	beq.n	8015ff8 <vPortEnterCritical+0x50>
 8015fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe4:	b672      	cpsid	i
 8015fe6:	f383 8811 	msr	BASEPRI, r3
 8015fea:	f3bf 8f6f 	isb	sy
 8015fee:	f3bf 8f4f 	dsb	sy
 8015ff2:	b662      	cpsie	i
 8015ff4:	603b      	str	r3, [r7, #0]
 8015ff6:	e7fe      	b.n	8015ff6 <vPortEnterCritical+0x4e>
	}
}
 8015ff8:	bf00      	nop
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr
 8016004:	20000120 	.word	0x20000120
 8016008:	e000ed04 	.word	0xe000ed04

0801600c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016012:	4b12      	ldr	r3, [pc, #72]	; (801605c <vPortExitCritical+0x50>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d10b      	bne.n	8016032 <vPortExitCritical+0x26>
 801601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601e:	b672      	cpsid	i
 8016020:	f383 8811 	msr	BASEPRI, r3
 8016024:	f3bf 8f6f 	isb	sy
 8016028:	f3bf 8f4f 	dsb	sy
 801602c:	b662      	cpsie	i
 801602e:	607b      	str	r3, [r7, #4]
 8016030:	e7fe      	b.n	8016030 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016032:	4b0a      	ldr	r3, [pc, #40]	; (801605c <vPortExitCritical+0x50>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	3b01      	subs	r3, #1
 8016038:	4a08      	ldr	r2, [pc, #32]	; (801605c <vPortExitCritical+0x50>)
 801603a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801603c:	4b07      	ldr	r3, [pc, #28]	; (801605c <vPortExitCritical+0x50>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d104      	bne.n	801604e <vPortExitCritical+0x42>
 8016044:	2300      	movs	r3, #0
 8016046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801604e:	bf00      	nop
 8016050:	370c      	adds	r7, #12
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr
 801605a:	bf00      	nop
 801605c:	20000120 	.word	0x20000120

08016060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016060:	f3ef 8009 	mrs	r0, PSP
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	4b15      	ldr	r3, [pc, #84]	; (80160c0 <pxCurrentTCBConst>)
 801606a:	681a      	ldr	r2, [r3, #0]
 801606c:	f01e 0f10 	tst.w	lr, #16
 8016070:	bf08      	it	eq
 8016072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607a:	6010      	str	r0, [r2, #0]
 801607c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016084:	b672      	cpsid	i
 8016086:	f380 8811 	msr	BASEPRI, r0
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	f3bf 8f6f 	isb	sy
 8016092:	b662      	cpsie	i
 8016094:	f7fe fecc 	bl	8014e30 <vTaskSwitchContext>
 8016098:	f04f 0000 	mov.w	r0, #0
 801609c:	f380 8811 	msr	BASEPRI, r0
 80160a0:	bc09      	pop	{r0, r3}
 80160a2:	6819      	ldr	r1, [r3, #0]
 80160a4:	6808      	ldr	r0, [r1, #0]
 80160a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160aa:	f01e 0f10 	tst.w	lr, #16
 80160ae:	bf08      	it	eq
 80160b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80160b4:	f380 8809 	msr	PSP, r0
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop

080160c0 <pxCurrentTCBConst>:
 80160c0:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80160c4:	bf00      	nop
 80160c6:	bf00      	nop

080160c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
	__asm volatile
 80160ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d2:	b672      	cpsid	i
 80160d4:	f383 8811 	msr	BASEPRI, r3
 80160d8:	f3bf 8f6f 	isb	sy
 80160dc:	f3bf 8f4f 	dsb	sy
 80160e0:	b662      	cpsie	i
 80160e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80160e4:	f7fe fdea 	bl	8014cbc <xTaskIncrementTick>
 80160e8:	4603      	mov	r3, r0
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d003      	beq.n	80160f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80160ee:	4b06      	ldr	r3, [pc, #24]	; (8016108 <SysTick_Handler+0x40>)
 80160f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160f4:	601a      	str	r2, [r3, #0]
 80160f6:	2300      	movs	r3, #0
 80160f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016100:	bf00      	nop
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	e000ed04 	.word	0xe000ed04

0801610c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801610c:	b480      	push	{r7}
 801610e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016110:	4b0b      	ldr	r3, [pc, #44]	; (8016140 <vPortSetupTimerInterrupt+0x34>)
 8016112:	2200      	movs	r2, #0
 8016114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016116:	4b0b      	ldr	r3, [pc, #44]	; (8016144 <vPortSetupTimerInterrupt+0x38>)
 8016118:	2200      	movs	r2, #0
 801611a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801611c:	4b0a      	ldr	r3, [pc, #40]	; (8016148 <vPortSetupTimerInterrupt+0x3c>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	4a0a      	ldr	r2, [pc, #40]	; (801614c <vPortSetupTimerInterrupt+0x40>)
 8016122:	fba2 2303 	umull	r2, r3, r2, r3
 8016126:	099b      	lsrs	r3, r3, #6
 8016128:	4a09      	ldr	r2, [pc, #36]	; (8016150 <vPortSetupTimerInterrupt+0x44>)
 801612a:	3b01      	subs	r3, #1
 801612c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801612e:	4b04      	ldr	r3, [pc, #16]	; (8016140 <vPortSetupTimerInterrupt+0x34>)
 8016130:	2207      	movs	r2, #7
 8016132:	601a      	str	r2, [r3, #0]
}
 8016134:	bf00      	nop
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	e000e010 	.word	0xe000e010
 8016144:	e000e018 	.word	0xe000e018
 8016148:	20000000 	.word	0x20000000
 801614c:	10624dd3 	.word	0x10624dd3
 8016150:	e000e014 	.word	0xe000e014

08016154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016164 <vPortEnableVFP+0x10>
 8016158:	6801      	ldr	r1, [r0, #0]
 801615a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801615e:	6001      	str	r1, [r0, #0]
 8016160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016162:	bf00      	nop
 8016164:	e000ed88 	.word	0xe000ed88

08016168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801616e:	f3ef 8305 	mrs	r3, IPSR
 8016172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2b0f      	cmp	r3, #15
 8016178:	d915      	bls.n	80161a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801617a:	4a18      	ldr	r2, [pc, #96]	; (80161dc <vPortValidateInterruptPriority+0x74>)
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	4413      	add	r3, r2
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016184:	4b16      	ldr	r3, [pc, #88]	; (80161e0 <vPortValidateInterruptPriority+0x78>)
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	7afa      	ldrb	r2, [r7, #11]
 801618a:	429a      	cmp	r2, r3
 801618c:	d20b      	bcs.n	80161a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016192:	b672      	cpsid	i
 8016194:	f383 8811 	msr	BASEPRI, r3
 8016198:	f3bf 8f6f 	isb	sy
 801619c:	f3bf 8f4f 	dsb	sy
 80161a0:	b662      	cpsie	i
 80161a2:	607b      	str	r3, [r7, #4]
 80161a4:	e7fe      	b.n	80161a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80161a6:	4b0f      	ldr	r3, [pc, #60]	; (80161e4 <vPortValidateInterruptPriority+0x7c>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80161ae:	4b0e      	ldr	r3, [pc, #56]	; (80161e8 <vPortValidateInterruptPriority+0x80>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d90b      	bls.n	80161ce <vPortValidateInterruptPriority+0x66>
 80161b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ba:	b672      	cpsid	i
 80161bc:	f383 8811 	msr	BASEPRI, r3
 80161c0:	f3bf 8f6f 	isb	sy
 80161c4:	f3bf 8f4f 	dsb	sy
 80161c8:	b662      	cpsie	i
 80161ca:	603b      	str	r3, [r7, #0]
 80161cc:	e7fe      	b.n	80161cc <vPortValidateInterruptPriority+0x64>
	}
 80161ce:	bf00      	nop
 80161d0:	3714      	adds	r7, #20
 80161d2:	46bd      	mov	sp, r7
 80161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d8:	4770      	bx	lr
 80161da:	bf00      	nop
 80161dc:	e000e3f0 	.word	0xe000e3f0
 80161e0:	20001014 	.word	0x20001014
 80161e4:	e000ed0c 	.word	0xe000ed0c
 80161e8:	20001018 	.word	0x20001018

080161ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b08a      	sub	sp, #40	; 0x28
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80161f4:	2300      	movs	r3, #0
 80161f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80161f8:	f7fe fc92 	bl	8014b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80161fc:	4b5a      	ldr	r3, [pc, #360]	; (8016368 <pvPortMalloc+0x17c>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d101      	bne.n	8016208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016204:	f000 f916 	bl	8016434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016208:	4b58      	ldr	r3, [pc, #352]	; (801636c <pvPortMalloc+0x180>)
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	4013      	ands	r3, r2
 8016210:	2b00      	cmp	r3, #0
 8016212:	f040 8090 	bne.w	8016336 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d01e      	beq.n	801625a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801621c:	2208      	movs	r2, #8
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	4413      	add	r3, r2
 8016222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f003 0307 	and.w	r3, r3, #7
 801622a:	2b00      	cmp	r3, #0
 801622c:	d015      	beq.n	801625a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f023 0307 	bic.w	r3, r3, #7
 8016234:	3308      	adds	r3, #8
 8016236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f003 0307 	and.w	r3, r3, #7
 801623e:	2b00      	cmp	r3, #0
 8016240:	d00b      	beq.n	801625a <pvPortMalloc+0x6e>
 8016242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016246:	b672      	cpsid	i
 8016248:	f383 8811 	msr	BASEPRI, r3
 801624c:	f3bf 8f6f 	isb	sy
 8016250:	f3bf 8f4f 	dsb	sy
 8016254:	b662      	cpsie	i
 8016256:	617b      	str	r3, [r7, #20]
 8016258:	e7fe      	b.n	8016258 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d06a      	beq.n	8016336 <pvPortMalloc+0x14a>
 8016260:	4b43      	ldr	r3, [pc, #268]	; (8016370 <pvPortMalloc+0x184>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	687a      	ldr	r2, [r7, #4]
 8016266:	429a      	cmp	r2, r3
 8016268:	d865      	bhi.n	8016336 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801626a:	4b42      	ldr	r3, [pc, #264]	; (8016374 <pvPortMalloc+0x188>)
 801626c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801626e:	4b41      	ldr	r3, [pc, #260]	; (8016374 <pvPortMalloc+0x188>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016274:	e004      	b.n	8016280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	429a      	cmp	r2, r3
 8016288:	d903      	bls.n	8016292 <pvPortMalloc+0xa6>
 801628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1f1      	bne.n	8016276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016292:	4b35      	ldr	r3, [pc, #212]	; (8016368 <pvPortMalloc+0x17c>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016298:	429a      	cmp	r2, r3
 801629a:	d04c      	beq.n	8016336 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801629c:	6a3b      	ldr	r3, [r7, #32]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2208      	movs	r2, #8
 80162a2:	4413      	add	r3, r2
 80162a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80162a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a8:	681a      	ldr	r2, [r3, #0]
 80162aa:	6a3b      	ldr	r3, [r7, #32]
 80162ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80162ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b0:	685a      	ldr	r2, [r3, #4]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	1ad2      	subs	r2, r2, r3
 80162b6:	2308      	movs	r3, #8
 80162b8:	005b      	lsls	r3, r3, #1
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d920      	bls.n	8016300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80162be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	4413      	add	r3, r2
 80162c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	f003 0307 	and.w	r3, r3, #7
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d00b      	beq.n	80162e8 <pvPortMalloc+0xfc>
 80162d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d4:	b672      	cpsid	i
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	b662      	cpsie	i
 80162e4:	613b      	str	r3, [r7, #16]
 80162e6:	e7fe      	b.n	80162e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80162e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ea:	685a      	ldr	r2, [r3, #4]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	1ad2      	subs	r2, r2, r3
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80162f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f6:	687a      	ldr	r2, [r7, #4]
 80162f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80162fa:	69b8      	ldr	r0, [r7, #24]
 80162fc:	f000 f8fc 	bl	80164f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016300:	4b1b      	ldr	r3, [pc, #108]	; (8016370 <pvPortMalloc+0x184>)
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	1ad3      	subs	r3, r2, r3
 801630a:	4a19      	ldr	r2, [pc, #100]	; (8016370 <pvPortMalloc+0x184>)
 801630c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801630e:	4b18      	ldr	r3, [pc, #96]	; (8016370 <pvPortMalloc+0x184>)
 8016310:	681a      	ldr	r2, [r3, #0]
 8016312:	4b19      	ldr	r3, [pc, #100]	; (8016378 <pvPortMalloc+0x18c>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	429a      	cmp	r2, r3
 8016318:	d203      	bcs.n	8016322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801631a:	4b15      	ldr	r3, [pc, #84]	; (8016370 <pvPortMalloc+0x184>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	4a16      	ldr	r2, [pc, #88]	; (8016378 <pvPortMalloc+0x18c>)
 8016320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016324:	685a      	ldr	r2, [r3, #4]
 8016326:	4b11      	ldr	r3, [pc, #68]	; (801636c <pvPortMalloc+0x180>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	431a      	orrs	r2, r3
 801632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016332:	2200      	movs	r2, #0
 8016334:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016336:	f7fe fc01 	bl	8014b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801633a:	69fb      	ldr	r3, [r7, #28]
 801633c:	f003 0307 	and.w	r3, r3, #7
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00b      	beq.n	801635c <pvPortMalloc+0x170>
 8016344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016348:	b672      	cpsid	i
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	b662      	cpsie	i
 8016358:	60fb      	str	r3, [r7, #12]
 801635a:	e7fe      	b.n	801635a <pvPortMalloc+0x16e>
	return pvReturn;
 801635c:	69fb      	ldr	r3, [r7, #28]
}
 801635e:	4618      	mov	r0, r3
 8016360:	3728      	adds	r7, #40	; 0x28
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	20008824 	.word	0x20008824
 801636c:	20008830 	.word	0x20008830
 8016370:	20008828 	.word	0x20008828
 8016374:	2000881c 	.word	0x2000881c
 8016378:	2000882c 	.word	0x2000882c

0801637c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b086      	sub	sp, #24
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d04a      	beq.n	8016424 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801638e:	2308      	movs	r3, #8
 8016390:	425b      	negs	r3, r3
 8016392:	697a      	ldr	r2, [r7, #20]
 8016394:	4413      	add	r3, r2
 8016396:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	685a      	ldr	r2, [r3, #4]
 80163a0:	4b22      	ldr	r3, [pc, #136]	; (801642c <vPortFree+0xb0>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	4013      	ands	r3, r2
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d10b      	bne.n	80163c2 <vPortFree+0x46>
 80163aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ae:	b672      	cpsid	i
 80163b0:	f383 8811 	msr	BASEPRI, r3
 80163b4:	f3bf 8f6f 	isb	sy
 80163b8:	f3bf 8f4f 	dsb	sy
 80163bc:	b662      	cpsie	i
 80163be:	60fb      	str	r3, [r7, #12]
 80163c0:	e7fe      	b.n	80163c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d00b      	beq.n	80163e2 <vPortFree+0x66>
 80163ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ce:	b672      	cpsid	i
 80163d0:	f383 8811 	msr	BASEPRI, r3
 80163d4:	f3bf 8f6f 	isb	sy
 80163d8:	f3bf 8f4f 	dsb	sy
 80163dc:	b662      	cpsie	i
 80163de:	60bb      	str	r3, [r7, #8]
 80163e0:	e7fe      	b.n	80163e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	685a      	ldr	r2, [r3, #4]
 80163e6:	4b11      	ldr	r3, [pc, #68]	; (801642c <vPortFree+0xb0>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	4013      	ands	r3, r2
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d019      	beq.n	8016424 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d115      	bne.n	8016424 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	685a      	ldr	r2, [r3, #4]
 80163fc:	4b0b      	ldr	r3, [pc, #44]	; (801642c <vPortFree+0xb0>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	43db      	mvns	r3, r3
 8016402:	401a      	ands	r2, r3
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016408:	f7fe fb8a 	bl	8014b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	685a      	ldr	r2, [r3, #4]
 8016410:	4b07      	ldr	r3, [pc, #28]	; (8016430 <vPortFree+0xb4>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	4413      	add	r3, r2
 8016416:	4a06      	ldr	r2, [pc, #24]	; (8016430 <vPortFree+0xb4>)
 8016418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801641a:	6938      	ldr	r0, [r7, #16]
 801641c:	f000 f86c 	bl	80164f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016420:	f7fe fb8c 	bl	8014b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016424:	bf00      	nop
 8016426:	3718      	adds	r7, #24
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}
 801642c:	20008830 	.word	0x20008830
 8016430:	20008828 	.word	0x20008828

08016434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016434:	b480      	push	{r7}
 8016436:	b085      	sub	sp, #20
 8016438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801643a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016440:	4b27      	ldr	r3, [pc, #156]	; (80164e0 <prvHeapInit+0xac>)
 8016442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	f003 0307 	and.w	r3, r3, #7
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00c      	beq.n	8016468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	3307      	adds	r3, #7
 8016452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	f023 0307 	bic.w	r3, r3, #7
 801645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	1ad3      	subs	r3, r2, r3
 8016462:	4a1f      	ldr	r2, [pc, #124]	; (80164e0 <prvHeapInit+0xac>)
 8016464:	4413      	add	r3, r2
 8016466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801646c:	4a1d      	ldr	r2, [pc, #116]	; (80164e4 <prvHeapInit+0xb0>)
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016472:	4b1c      	ldr	r3, [pc, #112]	; (80164e4 <prvHeapInit+0xb0>)
 8016474:	2200      	movs	r2, #0
 8016476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	68ba      	ldr	r2, [r7, #8]
 801647c:	4413      	add	r3, r2
 801647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016480:	2208      	movs	r2, #8
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	1a9b      	subs	r3, r3, r2
 8016486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f023 0307 	bic.w	r3, r3, #7
 801648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	4a15      	ldr	r2, [pc, #84]	; (80164e8 <prvHeapInit+0xb4>)
 8016494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016496:	4b14      	ldr	r3, [pc, #80]	; (80164e8 <prvHeapInit+0xb4>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2200      	movs	r2, #0
 801649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801649e:	4b12      	ldr	r3, [pc, #72]	; (80164e8 <prvHeapInit+0xb4>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2200      	movs	r2, #0
 80164a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	68fa      	ldr	r2, [r7, #12]
 80164ae:	1ad2      	subs	r2, r2, r3
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80164b4:	4b0c      	ldr	r3, [pc, #48]	; (80164e8 <prvHeapInit+0xb4>)
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	4a0a      	ldr	r2, [pc, #40]	; (80164ec <prvHeapInit+0xb8>)
 80164c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	4a09      	ldr	r2, [pc, #36]	; (80164f0 <prvHeapInit+0xbc>)
 80164ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80164cc:	4b09      	ldr	r3, [pc, #36]	; (80164f4 <prvHeapInit+0xc0>)
 80164ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80164d2:	601a      	str	r2, [r3, #0]
}
 80164d4:	bf00      	nop
 80164d6:	3714      	adds	r7, #20
 80164d8:	46bd      	mov	sp, r7
 80164da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164de:	4770      	bx	lr
 80164e0:	2000101c 	.word	0x2000101c
 80164e4:	2000881c 	.word	0x2000881c
 80164e8:	20008824 	.word	0x20008824
 80164ec:	2000882c 	.word	0x2000882c
 80164f0:	20008828 	.word	0x20008828
 80164f4:	20008830 	.word	0x20008830

080164f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80164f8:	b480      	push	{r7}
 80164fa:	b085      	sub	sp, #20
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016500:	4b28      	ldr	r3, [pc, #160]	; (80165a4 <prvInsertBlockIntoFreeList+0xac>)
 8016502:	60fb      	str	r3, [r7, #12]
 8016504:	e002      	b.n	801650c <prvInsertBlockIntoFreeList+0x14>
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	60fb      	str	r3, [r7, #12]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	429a      	cmp	r2, r3
 8016514:	d8f7      	bhi.n	8016506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	68ba      	ldr	r2, [r7, #8]
 8016520:	4413      	add	r3, r2
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	429a      	cmp	r2, r3
 8016526:	d108      	bne.n	801653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	685a      	ldr	r2, [r3, #4]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	441a      	add	r2, r3
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	68ba      	ldr	r2, [r7, #8]
 8016544:	441a      	add	r2, r3
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	429a      	cmp	r2, r3
 801654c:	d118      	bne.n	8016580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	4b15      	ldr	r3, [pc, #84]	; (80165a8 <prvInsertBlockIntoFreeList+0xb0>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	429a      	cmp	r2, r3
 8016558:	d00d      	beq.n	8016576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	685a      	ldr	r2, [r3, #4]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	441a      	add	r2, r3
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	681a      	ldr	r2, [r3, #0]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	601a      	str	r2, [r3, #0]
 8016574:	e008      	b.n	8016588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016576:	4b0c      	ldr	r3, [pc, #48]	; (80165a8 <prvInsertBlockIntoFreeList+0xb0>)
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	601a      	str	r2, [r3, #0]
 801657e:	e003      	b.n	8016588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016588:	68fa      	ldr	r2, [r7, #12]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	429a      	cmp	r2, r3
 801658e:	d002      	beq.n	8016596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016596:	bf00      	nop
 8016598:	3714      	adds	r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	2000881c 	.word	0x2000881c
 80165a8:	20008824 	.word	0x20008824

080165ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80165b0:	2200      	movs	r2, #0
 80165b2:	4912      	ldr	r1, [pc, #72]	; (80165fc <MX_USB_DEVICE_Init+0x50>)
 80165b4:	4812      	ldr	r0, [pc, #72]	; (8016600 <MX_USB_DEVICE_Init+0x54>)
 80165b6:	f7f7 ff2d 	bl	800e414 <USBD_Init>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d001      	beq.n	80165c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80165c0:	f7ed faf2 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80165c4:	490f      	ldr	r1, [pc, #60]	; (8016604 <MX_USB_DEVICE_Init+0x58>)
 80165c6:	480e      	ldr	r0, [pc, #56]	; (8016600 <MX_USB_DEVICE_Init+0x54>)
 80165c8:	f7f7 ff5a 	bl	800e480 <USBD_RegisterClass>
 80165cc:	4603      	mov	r3, r0
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d001      	beq.n	80165d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80165d2:	f7ed fae9 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80165d6:	490c      	ldr	r1, [pc, #48]	; (8016608 <MX_USB_DEVICE_Init+0x5c>)
 80165d8:	4809      	ldr	r0, [pc, #36]	; (8016600 <MX_USB_DEVICE_Init+0x54>)
 80165da:	f7f7 feaf 	bl	800e33c <USBD_CDC_RegisterInterface>
 80165de:	4603      	mov	r3, r0
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d001      	beq.n	80165e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80165e4:	f7ed fae0 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80165e8:	4805      	ldr	r0, [pc, #20]	; (8016600 <MX_USB_DEVICE_Init+0x54>)
 80165ea:	f7f7 ff6a 	bl	800e4c2 <USBD_Start>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d001      	beq.n	80165f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80165f4:	f7ed fad8 	bl	8003ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80165f8:	bf00      	nop
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	20000138 	.word	0x20000138
 8016600:	200156e8 	.word	0x200156e8
 8016604:	2000001c 	.word	0x2000001c
 8016608:	20000124 	.word	0x20000124

0801660c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016610:	2200      	movs	r2, #0
 8016612:	4905      	ldr	r1, [pc, #20]	; (8016628 <CDC_Init_FS+0x1c>)
 8016614:	4805      	ldr	r0, [pc, #20]	; (801662c <CDC_Init_FS+0x20>)
 8016616:	f7f7 fea6 	bl	800e366 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801661a:	4905      	ldr	r1, [pc, #20]	; (8016630 <CDC_Init_FS+0x24>)
 801661c:	4803      	ldr	r0, [pc, #12]	; (801662c <CDC_Init_FS+0x20>)
 801661e:	f7f7 febb 	bl	800e398 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016624:	4618      	mov	r0, r3
 8016626:	bd80      	pop	{r7, pc}
 8016628:	200161b8 	.word	0x200161b8
 801662c:	200156e8 	.word	0x200156e8
 8016630:	200159b8 	.word	0x200159b8

08016634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016634:	b480      	push	{r7}
 8016636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801663a:	4618      	mov	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	4603      	mov	r3, r0
 801664c:	6039      	str	r1, [r7, #0]
 801664e:	71fb      	strb	r3, [r7, #7]
 8016650:	4613      	mov	r3, r2
 8016652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016654:	79fb      	ldrb	r3, [r7, #7]
 8016656:	2b23      	cmp	r3, #35	; 0x23
 8016658:	d84a      	bhi.n	80166f0 <CDC_Control_FS+0xac>
 801665a:	a201      	add	r2, pc, #4	; (adr r2, 8016660 <CDC_Control_FS+0x1c>)
 801665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016660:	080166f1 	.word	0x080166f1
 8016664:	080166f1 	.word	0x080166f1
 8016668:	080166f1 	.word	0x080166f1
 801666c:	080166f1 	.word	0x080166f1
 8016670:	080166f1 	.word	0x080166f1
 8016674:	080166f1 	.word	0x080166f1
 8016678:	080166f1 	.word	0x080166f1
 801667c:	080166f1 	.word	0x080166f1
 8016680:	080166f1 	.word	0x080166f1
 8016684:	080166f1 	.word	0x080166f1
 8016688:	080166f1 	.word	0x080166f1
 801668c:	080166f1 	.word	0x080166f1
 8016690:	080166f1 	.word	0x080166f1
 8016694:	080166f1 	.word	0x080166f1
 8016698:	080166f1 	.word	0x080166f1
 801669c:	080166f1 	.word	0x080166f1
 80166a0:	080166f1 	.word	0x080166f1
 80166a4:	080166f1 	.word	0x080166f1
 80166a8:	080166f1 	.word	0x080166f1
 80166ac:	080166f1 	.word	0x080166f1
 80166b0:	080166f1 	.word	0x080166f1
 80166b4:	080166f1 	.word	0x080166f1
 80166b8:	080166f1 	.word	0x080166f1
 80166bc:	080166f1 	.word	0x080166f1
 80166c0:	080166f1 	.word	0x080166f1
 80166c4:	080166f1 	.word	0x080166f1
 80166c8:	080166f1 	.word	0x080166f1
 80166cc:	080166f1 	.word	0x080166f1
 80166d0:	080166f1 	.word	0x080166f1
 80166d4:	080166f1 	.word	0x080166f1
 80166d8:	080166f1 	.word	0x080166f1
 80166dc:	080166f1 	.word	0x080166f1
 80166e0:	080166f1 	.word	0x080166f1
 80166e4:	080166f1 	.word	0x080166f1
 80166e8:	080166f1 	.word	0x080166f1
 80166ec:	080166f1 	.word	0x080166f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80166f0:	bf00      	nop
  }

  return (USBD_OK);
 80166f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801670a:	6879      	ldr	r1, [r7, #4]
 801670c:	4805      	ldr	r0, [pc, #20]	; (8016724 <CDC_Receive_FS+0x24>)
 801670e:	f7f7 fe43 	bl	800e398 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016712:	4804      	ldr	r0, [pc, #16]	; (8016724 <CDC_Receive_FS+0x24>)
 8016714:	f7f7 fe54 	bl	800e3c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801671a:	4618      	mov	r0, r3
 801671c:	3708      	adds	r7, #8
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	200156e8 	.word	0x200156e8

08016728 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016728:	b480      	push	{r7}
 801672a:	b087      	sub	sp, #28
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	4613      	mov	r3, r2
 8016734:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801673a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801673e:	4618      	mov	r0, r3
 8016740:	371c      	adds	r7, #28
 8016742:	46bd      	mov	sp, r7
 8016744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016748:	4770      	bx	lr
	...

0801674c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801674c:	b480      	push	{r7}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
 8016752:	4603      	mov	r3, r0
 8016754:	6039      	str	r1, [r7, #0]
 8016756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	2212      	movs	r2, #18
 801675c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801675e:	4b03      	ldr	r3, [pc, #12]	; (801676c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016760:	4618      	mov	r0, r3
 8016762:	370c      	adds	r7, #12
 8016764:	46bd      	mov	sp, r7
 8016766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676a:	4770      	bx	lr
 801676c:	20000158 	.word	0x20000158

08016770 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016770:	b480      	push	{r7}
 8016772:	b083      	sub	sp, #12
 8016774:	af00      	add	r7, sp, #0
 8016776:	4603      	mov	r3, r0
 8016778:	6039      	str	r1, [r7, #0]
 801677a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	2204      	movs	r2, #4
 8016780:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016782:	4b03      	ldr	r3, [pc, #12]	; (8016790 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016784:	4618      	mov	r0, r3
 8016786:	370c      	adds	r7, #12
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr
 8016790:	20000178 	.word	0x20000178

08016794 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	4603      	mov	r3, r0
 801679c:	6039      	str	r1, [r7, #0]
 801679e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80167a0:	79fb      	ldrb	r3, [r7, #7]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d105      	bne.n	80167b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80167a6:	683a      	ldr	r2, [r7, #0]
 80167a8:	4907      	ldr	r1, [pc, #28]	; (80167c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80167aa:	4808      	ldr	r0, [pc, #32]	; (80167cc <USBD_FS_ProductStrDescriptor+0x38>)
 80167ac:	f7f8 fe81 	bl	800f4b2 <USBD_GetString>
 80167b0:	e004      	b.n	80167bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80167b2:	683a      	ldr	r2, [r7, #0]
 80167b4:	4904      	ldr	r1, [pc, #16]	; (80167c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80167b6:	4805      	ldr	r0, [pc, #20]	; (80167cc <USBD_FS_ProductStrDescriptor+0x38>)
 80167b8:	f7f8 fe7b 	bl	800f4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167bc:	4b02      	ldr	r3, [pc, #8]	; (80167c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	200169b8 	.word	0x200169b8
 80167cc:	08019e90 	.word	0x08019e90

080167d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	4603      	mov	r3, r0
 80167d8:	6039      	str	r1, [r7, #0]
 80167da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80167dc:	683a      	ldr	r2, [r7, #0]
 80167de:	4904      	ldr	r1, [pc, #16]	; (80167f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80167e0:	4804      	ldr	r0, [pc, #16]	; (80167f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80167e2:	f7f8 fe66 	bl	800f4b2 <USBD_GetString>
  return USBD_StrDesc;
 80167e6:	4b02      	ldr	r3, [pc, #8]	; (80167f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	200169b8 	.word	0x200169b8
 80167f4:	08019ea8 	.word	0x08019ea8

080167f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	4603      	mov	r3, r0
 8016800:	6039      	str	r1, [r7, #0]
 8016802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	221a      	movs	r2, #26
 8016808:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801680a:	f000 f855 	bl	80168b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801680e:	4b02      	ldr	r3, [pc, #8]	; (8016818 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016810:	4618      	mov	r0, r3
 8016812:	3708      	adds	r7, #8
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	2000017c 	.word	0x2000017c

0801681c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	4603      	mov	r3, r0
 8016824:	6039      	str	r1, [r7, #0]
 8016826:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016828:	79fb      	ldrb	r3, [r7, #7]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d105      	bne.n	801683a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801682e:	683a      	ldr	r2, [r7, #0]
 8016830:	4907      	ldr	r1, [pc, #28]	; (8016850 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016832:	4808      	ldr	r0, [pc, #32]	; (8016854 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016834:	f7f8 fe3d 	bl	800f4b2 <USBD_GetString>
 8016838:	e004      	b.n	8016844 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	4904      	ldr	r1, [pc, #16]	; (8016850 <USBD_FS_ConfigStrDescriptor+0x34>)
 801683e:	4805      	ldr	r0, [pc, #20]	; (8016854 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016840:	f7f8 fe37 	bl	800f4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016844:	4b02      	ldr	r3, [pc, #8]	; (8016850 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016846:	4618      	mov	r0, r3
 8016848:	3708      	adds	r7, #8
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	200169b8 	.word	0x200169b8
 8016854:	08019ebc 	.word	0x08019ebc

08016858 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	6039      	str	r1, [r7, #0]
 8016862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016864:	79fb      	ldrb	r3, [r7, #7]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d105      	bne.n	8016876 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801686a:	683a      	ldr	r2, [r7, #0]
 801686c:	4907      	ldr	r1, [pc, #28]	; (801688c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801686e:	4808      	ldr	r0, [pc, #32]	; (8016890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016870:	f7f8 fe1f 	bl	800f4b2 <USBD_GetString>
 8016874:	e004      	b.n	8016880 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	4904      	ldr	r1, [pc, #16]	; (801688c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801687a:	4805      	ldr	r0, [pc, #20]	; (8016890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801687c:	f7f8 fe19 	bl	800f4b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016880:	4b02      	ldr	r3, [pc, #8]	; (801688c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016882:	4618      	mov	r0, r3
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	200169b8 	.word	0x200169b8
 8016890:	08019ec8 	.word	0x08019ec8

08016894 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016894:	b480      	push	{r7}
 8016896:	b083      	sub	sp, #12
 8016898:	af00      	add	r7, sp, #0
 801689a:	4603      	mov	r3, r0
 801689c:	6039      	str	r1, [r7, #0]
 801689e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	220c      	movs	r2, #12
 80168a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80168a6:	4b03      	ldr	r3, [pc, #12]	; (80168b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	370c      	adds	r7, #12
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr
 80168b4:	2000016c 	.word	0x2000016c

080168b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80168be:	4b0f      	ldr	r3, [pc, #60]	; (80168fc <Get_SerialNum+0x44>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80168c4:	4b0e      	ldr	r3, [pc, #56]	; (8016900 <Get_SerialNum+0x48>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80168ca:	4b0e      	ldr	r3, [pc, #56]	; (8016904 <Get_SerialNum+0x4c>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80168d0:	68fa      	ldr	r2, [r7, #12]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4413      	add	r3, r2
 80168d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d009      	beq.n	80168f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80168de:	2208      	movs	r2, #8
 80168e0:	4909      	ldr	r1, [pc, #36]	; (8016908 <Get_SerialNum+0x50>)
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f000 f814 	bl	8016910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80168e8:	2204      	movs	r2, #4
 80168ea:	4908      	ldr	r1, [pc, #32]	; (801690c <Get_SerialNum+0x54>)
 80168ec:	68b8      	ldr	r0, [r7, #8]
 80168ee:	f000 f80f 	bl	8016910 <IntToUnicode>
  }
}
 80168f2:	bf00      	nop
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}
 80168fa:	bf00      	nop
 80168fc:	1ff0f420 	.word	0x1ff0f420
 8016900:	1ff0f424 	.word	0x1ff0f424
 8016904:	1ff0f428 	.word	0x1ff0f428
 8016908:	2000017e 	.word	0x2000017e
 801690c:	2000018e 	.word	0x2000018e

08016910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016910:	b480      	push	{r7}
 8016912:	b087      	sub	sp, #28
 8016914:	af00      	add	r7, sp, #0
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	4613      	mov	r3, r2
 801691c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801691e:	2300      	movs	r3, #0
 8016920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016922:	2300      	movs	r3, #0
 8016924:	75fb      	strb	r3, [r7, #23]
 8016926:	e027      	b.n	8016978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	0f1b      	lsrs	r3, r3, #28
 801692c:	2b09      	cmp	r3, #9
 801692e:	d80b      	bhi.n	8016948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	0f1b      	lsrs	r3, r3, #28
 8016934:	b2da      	uxtb	r2, r3
 8016936:	7dfb      	ldrb	r3, [r7, #23]
 8016938:	005b      	lsls	r3, r3, #1
 801693a:	4619      	mov	r1, r3
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	440b      	add	r3, r1
 8016940:	3230      	adds	r2, #48	; 0x30
 8016942:	b2d2      	uxtb	r2, r2
 8016944:	701a      	strb	r2, [r3, #0]
 8016946:	e00a      	b.n	801695e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	0f1b      	lsrs	r3, r3, #28
 801694c:	b2da      	uxtb	r2, r3
 801694e:	7dfb      	ldrb	r3, [r7, #23]
 8016950:	005b      	lsls	r3, r3, #1
 8016952:	4619      	mov	r1, r3
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	440b      	add	r3, r1
 8016958:	3237      	adds	r2, #55	; 0x37
 801695a:	b2d2      	uxtb	r2, r2
 801695c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	011b      	lsls	r3, r3, #4
 8016962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016964:	7dfb      	ldrb	r3, [r7, #23]
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	3301      	adds	r3, #1
 801696a:	68ba      	ldr	r2, [r7, #8]
 801696c:	4413      	add	r3, r2
 801696e:	2200      	movs	r2, #0
 8016970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016972:	7dfb      	ldrb	r3, [r7, #23]
 8016974:	3301      	adds	r3, #1
 8016976:	75fb      	strb	r3, [r7, #23]
 8016978:	7dfa      	ldrb	r2, [r7, #23]
 801697a:	79fb      	ldrb	r3, [r7, #7]
 801697c:	429a      	cmp	r2, r3
 801697e:	d3d3      	bcc.n	8016928 <IntToUnicode+0x18>
  }
}
 8016980:	bf00      	nop
 8016982:	371c      	adds	r7, #28
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr

0801698c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b08a      	sub	sp, #40	; 0x28
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016994:	f107 0314 	add.w	r3, r7, #20
 8016998:	2200      	movs	r2, #0
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	605a      	str	r2, [r3, #4]
 801699e:	609a      	str	r2, [r3, #8]
 80169a0:	60da      	str	r2, [r3, #12]
 80169a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80169ac:	d13c      	bne.n	8016a28 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169ae:	4b20      	ldr	r3, [pc, #128]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169b2:	4a1f      	ldr	r2, [pc, #124]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169b4:	f043 0301 	orr.w	r3, r3, #1
 80169b8:	6313      	str	r3, [r2, #48]	; 0x30
 80169ba:	4b1d      	ldr	r3, [pc, #116]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169be:	f003 0301 	and.w	r3, r3, #1
 80169c2:	613b      	str	r3, [r7, #16]
 80169c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80169c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80169ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169cc:	2302      	movs	r3, #2
 80169ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169d0:	2300      	movs	r3, #0
 80169d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80169d4:	2303      	movs	r3, #3
 80169d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80169d8:	230a      	movs	r3, #10
 80169da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80169dc:	f107 0314 	add.w	r3, r7, #20
 80169e0:	4619      	mov	r1, r3
 80169e2:	4814      	ldr	r0, [pc, #80]	; (8016a34 <HAL_PCD_MspInit+0xa8>)
 80169e4:	f7ef f852 	bl	8005a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80169e8:	4b11      	ldr	r3, [pc, #68]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169ec:	4a10      	ldr	r2, [pc, #64]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169f2:	6353      	str	r3, [r2, #52]	; 0x34
 80169f4:	4b0e      	ldr	r3, [pc, #56]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 80169f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169fc:	60fb      	str	r3, [r7, #12]
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	4b0b      	ldr	r3, [pc, #44]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 8016a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a04:	4a0a      	ldr	r2, [pc, #40]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 8016a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8016a0c:	4b08      	ldr	r3, [pc, #32]	; (8016a30 <HAL_PCD_MspInit+0xa4>)
 8016a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016a14:	60bb      	str	r3, [r7, #8]
 8016a16:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016a18:	2200      	movs	r2, #0
 8016a1a:	2105      	movs	r1, #5
 8016a1c:	2043      	movs	r0, #67	; 0x43
 8016a1e:	f7ee fc67 	bl	80052f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016a22:	2043      	movs	r0, #67	; 0x43
 8016a24:	f7ee fc80 	bl	8005328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016a28:	bf00      	nop
 8016a2a:	3728      	adds	r7, #40	; 0x28
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	40023800 	.word	0x40023800
 8016a34:	40020000 	.word	0x40020000

08016a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	4610      	mov	r0, r2
 8016a50:	f7f7 fd82 	bl	800e558 <USBD_LL_SetupStage>
}
 8016a54:	bf00      	nop
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	460b      	mov	r3, r1
 8016a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016a6e:	78fa      	ldrb	r2, [r7, #3]
 8016a70:	6879      	ldr	r1, [r7, #4]
 8016a72:	4613      	mov	r3, r2
 8016a74:	00db      	lsls	r3, r3, #3
 8016a76:	1a9b      	subs	r3, r3, r2
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	440b      	add	r3, r1
 8016a7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	78fb      	ldrb	r3, [r7, #3]
 8016a84:	4619      	mov	r1, r3
 8016a86:	f7f7 fdba 	bl	800e5fe <USBD_LL_DataOutStage>
}
 8016a8a:	bf00      	nop
 8016a8c:	3708      	adds	r7, #8
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a92:	b580      	push	{r7, lr}
 8016a94:	b082      	sub	sp, #8
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016aa4:	78fa      	ldrb	r2, [r7, #3]
 8016aa6:	6879      	ldr	r1, [r7, #4]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	1a9b      	subs	r3, r3, r2
 8016aae:	009b      	lsls	r3, r3, #2
 8016ab0:	440b      	add	r3, r1
 8016ab2:	3348      	adds	r3, #72	; 0x48
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	78fb      	ldrb	r3, [r7, #3]
 8016ab8:	4619      	mov	r1, r3
 8016aba:	f7f7 fe03 	bl	800e6c4 <USBD_LL_DataInStage>
}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b082      	sub	sp, #8
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7f7 ff07 	bl	800e8e8 <USBD_LL_SOF>
}
 8016ada:	bf00      	nop
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	b084      	sub	sp, #16
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016aea:	2301      	movs	r3, #1
 8016aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	68db      	ldr	r3, [r3, #12]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d102      	bne.n	8016afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016af6:	2300      	movs	r3, #0
 8016af8:	73fb      	strb	r3, [r7, #15]
 8016afa:	e008      	b.n	8016b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	68db      	ldr	r3, [r3, #12]
 8016b00:	2b02      	cmp	r3, #2
 8016b02:	d102      	bne.n	8016b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b04:	2301      	movs	r3, #1
 8016b06:	73fb      	strb	r3, [r7, #15]
 8016b08:	e001      	b.n	8016b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b0a:	f7ed f84d 	bl	8003ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b14:	7bfa      	ldrb	r2, [r7, #15]
 8016b16:	4611      	mov	r1, r2
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7f7 feaa 	bl	800e872 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f7 fe63 	bl	800e7f0 <USBD_LL_Reset>
}
 8016b2a:	bf00      	nop
 8016b2c:	3710      	adds	r7, #16
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
	...

08016b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b082      	sub	sp, #8
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b42:	4618      	mov	r0, r3
 8016b44:	f7f7 fea5 	bl	800e892 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	6812      	ldr	r2, [r2, #0]
 8016b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b5a:	f043 0301 	orr.w	r3, r3, #1
 8016b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	6a1b      	ldr	r3, [r3, #32]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d005      	beq.n	8016b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b68:	4b04      	ldr	r3, [pc, #16]	; (8016b7c <HAL_PCD_SuspendCallback+0x48>)
 8016b6a:	691b      	ldr	r3, [r3, #16]
 8016b6c:	4a03      	ldr	r2, [pc, #12]	; (8016b7c <HAL_PCD_SuspendCallback+0x48>)
 8016b6e:	f043 0306 	orr.w	r3, r3, #6
 8016b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	e000ed00 	.word	0xe000ed00

08016b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7f7 fe94 	bl	800e8bc <USBD_LL_Resume>
}
 8016b94:	bf00      	nop
 8016b96:	3708      	adds	r7, #8
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}

08016b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b082      	sub	sp, #8
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016bae:	78fa      	ldrb	r2, [r7, #3]
 8016bb0:	4611      	mov	r1, r2
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7f7 febf 	bl	800e936 <USBD_LL_IsoOUTIncomplete>
}
 8016bb8:	bf00      	nop
 8016bba:	3708      	adds	r7, #8
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}

08016bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	460b      	mov	r3, r1
 8016bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016bd2:	78fa      	ldrb	r2, [r7, #3]
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7f7 fea0 	bl	800e91c <USBD_LL_IsoINIncomplete>
}
 8016bdc:	bf00      	nop
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7f7 feac 	bl	800e950 <USBD_LL_DevConnected>
}
 8016bf8:	bf00      	nop
 8016bfa:	3708      	adds	r7, #8
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7f7 fea9 	bl	800e966 <USBD_LL_DevDisconnected>
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d13c      	bne.n	8016ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016c2c:	4a20      	ldr	r2, [pc, #128]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	4a1e      	ldr	r2, [pc, #120]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016c3c:	4b1c      	ldr	r3, [pc, #112]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016c44:	4b1a      	ldr	r3, [pc, #104]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c46:	2206      	movs	r2, #6
 8016c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016c4a:	4b19      	ldr	r3, [pc, #100]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c4c:	2202      	movs	r2, #2
 8016c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016c50:	4b17      	ldr	r3, [pc, #92]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c52:	2200      	movs	r2, #0
 8016c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c56:	4b16      	ldr	r3, [pc, #88]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c58:	2202      	movs	r2, #2
 8016c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016c5c:	4b14      	ldr	r3, [pc, #80]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c5e:	2200      	movs	r2, #0
 8016c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016c62:	4b13      	ldr	r3, [pc, #76]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c64:	2200      	movs	r2, #0
 8016c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016c68:	4b11      	ldr	r3, [pc, #68]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016c6e:	4b10      	ldr	r3, [pc, #64]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016c74:	4b0e      	ldr	r3, [pc, #56]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c76:	2200      	movs	r2, #0
 8016c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016c7a:	480d      	ldr	r0, [pc, #52]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c7c:	f7ef f8e3 	bl	8005e46 <HAL_PCD_Init>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d001      	beq.n	8016c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016c86:	f7ec ff8f 	bl	8003ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016c8a:	2180      	movs	r1, #128	; 0x80
 8016c8c:	4808      	ldr	r0, [pc, #32]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c8e:	f7f0 fa64 	bl	800715a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016c92:	2240      	movs	r2, #64	; 0x40
 8016c94:	2100      	movs	r1, #0
 8016c96:	4806      	ldr	r0, [pc, #24]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016c98:	f7f0 fa18 	bl	80070cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016c9c:	2280      	movs	r2, #128	; 0x80
 8016c9e:	2101      	movs	r1, #1
 8016ca0:	4803      	ldr	r0, [pc, #12]	; (8016cb0 <USBD_LL_Init+0x94>)
 8016ca2:	f7f0 fa13 	bl	80070cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016ca6:	2300      	movs	r3, #0
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	20016bb8 	.word	0x20016bb8

08016cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7ef f9df 	bl	800608e <HAL_PCD_Start>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016cd4:	7bfb      	ldrb	r3, [r7, #15]
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f000 f97e 	bl	8016fd8 <USBD_Get_USB_Status>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}

08016cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016cea:	b580      	push	{r7, lr}
 8016cec:	b084      	sub	sp, #16
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	6078      	str	r0, [r7, #4]
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	4611      	mov	r1, r2
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	70fb      	strb	r3, [r7, #3]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	70bb      	strb	r3, [r7, #2]
 8016d00:	4613      	mov	r3, r2
 8016d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d12:	78bb      	ldrb	r3, [r7, #2]
 8016d14:	883a      	ldrh	r2, [r7, #0]
 8016d16:	78f9      	ldrb	r1, [r7, #3]
 8016d18:	f7ef fddf 	bl	80068da <HAL_PCD_EP_Open>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d20:	7bfb      	ldrb	r3, [r7, #15]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 f958 	bl	8016fd8 <USBD_Get_USB_Status>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b084      	sub	sp, #16
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d50:	78fa      	ldrb	r2, [r7, #3]
 8016d52:	4611      	mov	r1, r2
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7ef fe28 	bl	80069aa <HAL_PCD_EP_Close>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016d5e:	7bfb      	ldrb	r3, [r7, #15]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f000 f939 	bl	8016fd8 <USBD_Get_USB_Status>
 8016d66:	4603      	mov	r3, r0
 8016d68:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d8e:	78fa      	ldrb	r2, [r7, #3]
 8016d90:	4611      	mov	r1, r2
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7ef ff00 	bl	8006b98 <HAL_PCD_EP_SetStall>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d9c:	7bfb      	ldrb	r3, [r7, #15]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 f91a 	bl	8016fd8 <USBD_Get_USB_Status>
 8016da4:	4603      	mov	r3, r0
 8016da6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3710      	adds	r7, #16
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b084      	sub	sp, #16
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
 8016dba:	460b      	mov	r3, r1
 8016dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016dcc:	78fa      	ldrb	r2, [r7, #3]
 8016dce:	4611      	mov	r1, r2
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7ef ff45 	bl	8006c60 <HAL_PCD_EP_ClrStall>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016dda:	7bfb      	ldrb	r3, [r7, #15]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 f8fb 	bl	8016fd8 <USBD_Get_USB_Status>
 8016de2:	4603      	mov	r3, r0
 8016de4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3710      	adds	r7, #16
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	460b      	mov	r3, r1
 8016dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e02:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	da0b      	bge.n	8016e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016e0c:	78fb      	ldrb	r3, [r7, #3]
 8016e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e12:	68f9      	ldr	r1, [r7, #12]
 8016e14:	4613      	mov	r3, r2
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	1a9b      	subs	r3, r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	440b      	add	r3, r1
 8016e1e:	333e      	adds	r3, #62	; 0x3e
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	e00b      	b.n	8016e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016e24:	78fb      	ldrb	r3, [r7, #3]
 8016e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e2a:	68f9      	ldr	r1, [r7, #12]
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	1a9b      	subs	r3, r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	440b      	add	r3, r1
 8016e36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3714      	adds	r7, #20
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr

08016e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b084      	sub	sp, #16
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	460b      	mov	r3, r1
 8016e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e54:	2300      	movs	r3, #0
 8016e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e62:	78fa      	ldrb	r2, [r7, #3]
 8016e64:	4611      	mov	r1, r2
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7ef fd12 	bl	8006890 <HAL_PCD_SetAddress>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f000 f8b0 	bl	8016fd8 <USBD_Get_USB_Status>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}

08016e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e86:	b580      	push	{r7, lr}
 8016e88:	b086      	sub	sp, #24
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	60f8      	str	r0, [r7, #12]
 8016e8e:	607a      	str	r2, [r7, #4]
 8016e90:	603b      	str	r3, [r7, #0]
 8016e92:	460b      	mov	r3, r1
 8016e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016ea4:	7af9      	ldrb	r1, [r7, #11]
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	f7ef fe2b 	bl	8006b04 <HAL_PCD_EP_Transmit>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016eb2:	7dfb      	ldrb	r3, [r7, #23]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 f88f 	bl	8016fd8 <USBD_Get_USB_Status>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3718      	adds	r7, #24
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b086      	sub	sp, #24
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	607a      	str	r2, [r7, #4]
 8016ed2:	603b      	str	r3, [r7, #0]
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016edc:	2300      	movs	r3, #0
 8016ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016ee6:	7af9      	ldrb	r1, [r7, #11]
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	f7ef fda7 	bl	8006a3e <HAL_PCD_EP_Receive>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016ef4:	7dfb      	ldrb	r3, [r7, #23]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f000 f86e 	bl	8016fd8 <USBD_Get_USB_Status>
 8016efc:	4603      	mov	r3, r0
 8016efe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	3718      	adds	r7, #24
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f0a:	b580      	push	{r7, lr}
 8016f0c:	b082      	sub	sp, #8
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	6078      	str	r0, [r7, #4]
 8016f12:	460b      	mov	r3, r1
 8016f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016f1c:	78fa      	ldrb	r2, [r7, #3]
 8016f1e:	4611      	mov	r1, r2
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7ef fdd7 	bl	8006ad4 <HAL_PCD_EP_GetRxCount>
 8016f26:	4603      	mov	r3, r0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3708      	adds	r7, #8
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b082      	sub	sp, #8
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	460b      	mov	r3, r1
 8016f3a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016f3c:	78fb      	ldrb	r3, [r7, #3]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d002      	beq.n	8016f48 <HAL_PCDEx_LPM_Callback+0x18>
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d01f      	beq.n	8016f86 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8016f46:	e03b      	b.n	8016fc0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6a1b      	ldr	r3, [r3, #32]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d007      	beq.n	8016f60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016f50:	f000 f83c 	bl	8016fcc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016f54:	4b1c      	ldr	r3, [pc, #112]	; (8016fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8016f56:	691b      	ldr	r3, [r3, #16]
 8016f58:	4a1b      	ldr	r2, [pc, #108]	; (8016fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8016f5a:	f023 0306 	bic.w	r3, r3, #6
 8016f5e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	6812      	ldr	r2, [r2, #0]
 8016f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016f72:	f023 0301 	bic.w	r3, r3, #1
 8016f76:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7f7 fc9c 	bl	800e8bc <USBD_LL_Resume>
    break;
 8016f84:	e01c      	b.n	8016fc0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	6812      	ldr	r2, [r2, #0]
 8016f94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016f98:	f043 0301 	orr.w	r3, r3, #1
 8016f9c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7f7 fc74 	bl	800e892 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6a1b      	ldr	r3, [r3, #32]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d005      	beq.n	8016fbe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016fb2:	4b05      	ldr	r3, [pc, #20]	; (8016fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	4a04      	ldr	r2, [pc, #16]	; (8016fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8016fb8:	f043 0306 	orr.w	r3, r3, #6
 8016fbc:	6113      	str	r3, [r2, #16]
    break;   
 8016fbe:	bf00      	nop
}
 8016fc0:	bf00      	nop
 8016fc2:	3708      	adds	r7, #8
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	e000ed00 	.word	0xe000ed00

08016fcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016fd0:	f7ec fba8 	bl	8003724 <SystemClock_Config>
}
 8016fd4:	bf00      	nop
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b085      	sub	sp, #20
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	4603      	mov	r3, r0
 8016fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016fe6:	79fb      	ldrb	r3, [r7, #7]
 8016fe8:	2b03      	cmp	r3, #3
 8016fea:	d817      	bhi.n	801701c <USBD_Get_USB_Status+0x44>
 8016fec:	a201      	add	r2, pc, #4	; (adr r2, 8016ff4 <USBD_Get_USB_Status+0x1c>)
 8016fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ff2:	bf00      	nop
 8016ff4:	08017005 	.word	0x08017005
 8016ff8:	0801700b 	.word	0x0801700b
 8016ffc:	08017011 	.word	0x08017011
 8017000:	08017017 	.word	0x08017017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017004:	2300      	movs	r3, #0
 8017006:	73fb      	strb	r3, [r7, #15]
    break;
 8017008:	e00b      	b.n	8017022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801700a:	2303      	movs	r3, #3
 801700c:	73fb      	strb	r3, [r7, #15]
    break;
 801700e:	e008      	b.n	8017022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017010:	2301      	movs	r3, #1
 8017012:	73fb      	strb	r3, [r7, #15]
    break;
 8017014:	e005      	b.n	8017022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017016:	2303      	movs	r3, #3
 8017018:	73fb      	strb	r3, [r7, #15]
    break;
 801701a:	e002      	b.n	8017022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801701c:	2303      	movs	r3, #3
 801701e:	73fb      	strb	r3, [r7, #15]
    break;
 8017020:	bf00      	nop
  }
  return usb_status;
 8017022:	7bfb      	ldrb	r3, [r7, #15]
}
 8017024:	4618      	mov	r0, r3
 8017026:	3714      	adds	r7, #20
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr

08017030 <__errno>:
 8017030:	4b01      	ldr	r3, [pc, #4]	; (8017038 <__errno+0x8>)
 8017032:	6818      	ldr	r0, [r3, #0]
 8017034:	4770      	bx	lr
 8017036:	bf00      	nop
 8017038:	20000198 	.word	0x20000198

0801703c <__libc_init_array>:
 801703c:	b570      	push	{r4, r5, r6, lr}
 801703e:	4e0d      	ldr	r6, [pc, #52]	; (8017074 <__libc_init_array+0x38>)
 8017040:	4c0d      	ldr	r4, [pc, #52]	; (8017078 <__libc_init_array+0x3c>)
 8017042:	1ba4      	subs	r4, r4, r6
 8017044:	10a4      	asrs	r4, r4, #2
 8017046:	2500      	movs	r5, #0
 8017048:	42a5      	cmp	r5, r4
 801704a:	d109      	bne.n	8017060 <__libc_init_array+0x24>
 801704c:	4e0b      	ldr	r6, [pc, #44]	; (801707c <__libc_init_array+0x40>)
 801704e:	4c0c      	ldr	r4, [pc, #48]	; (8017080 <__libc_init_array+0x44>)
 8017050:	f002 faa2 	bl	8019598 <_init>
 8017054:	1ba4      	subs	r4, r4, r6
 8017056:	10a4      	asrs	r4, r4, #2
 8017058:	2500      	movs	r5, #0
 801705a:	42a5      	cmp	r5, r4
 801705c:	d105      	bne.n	801706a <__libc_init_array+0x2e>
 801705e:	bd70      	pop	{r4, r5, r6, pc}
 8017060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017064:	4798      	blx	r3
 8017066:	3501      	adds	r5, #1
 8017068:	e7ee      	b.n	8017048 <__libc_init_array+0xc>
 801706a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801706e:	4798      	blx	r3
 8017070:	3501      	adds	r5, #1
 8017072:	e7f2      	b.n	801705a <__libc_init_array+0x1e>
 8017074:	0801a138 	.word	0x0801a138
 8017078:	0801a138 	.word	0x0801a138
 801707c:	0801a138 	.word	0x0801a138
 8017080:	0801a13c 	.word	0x0801a13c

08017084 <malloc>:
 8017084:	4b02      	ldr	r3, [pc, #8]	; (8017090 <malloc+0xc>)
 8017086:	4601      	mov	r1, r0
 8017088:	6818      	ldr	r0, [r3, #0]
 801708a:	f000 b86d 	b.w	8017168 <_malloc_r>
 801708e:	bf00      	nop
 8017090:	20000198 	.word	0x20000198

08017094 <free>:
 8017094:	4b02      	ldr	r3, [pc, #8]	; (80170a0 <free+0xc>)
 8017096:	4601      	mov	r1, r0
 8017098:	6818      	ldr	r0, [r3, #0]
 801709a:	f000 b817 	b.w	80170cc <_free_r>
 801709e:	bf00      	nop
 80170a0:	20000198 	.word	0x20000198

080170a4 <memcpy>:
 80170a4:	b510      	push	{r4, lr}
 80170a6:	1e43      	subs	r3, r0, #1
 80170a8:	440a      	add	r2, r1
 80170aa:	4291      	cmp	r1, r2
 80170ac:	d100      	bne.n	80170b0 <memcpy+0xc>
 80170ae:	bd10      	pop	{r4, pc}
 80170b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170b8:	e7f7      	b.n	80170aa <memcpy+0x6>

080170ba <memset>:
 80170ba:	4402      	add	r2, r0
 80170bc:	4603      	mov	r3, r0
 80170be:	4293      	cmp	r3, r2
 80170c0:	d100      	bne.n	80170c4 <memset+0xa>
 80170c2:	4770      	bx	lr
 80170c4:	f803 1b01 	strb.w	r1, [r3], #1
 80170c8:	e7f9      	b.n	80170be <memset+0x4>
	...

080170cc <_free_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	4605      	mov	r5, r0
 80170d0:	2900      	cmp	r1, #0
 80170d2:	d045      	beq.n	8017160 <_free_r+0x94>
 80170d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170d8:	1f0c      	subs	r4, r1, #4
 80170da:	2b00      	cmp	r3, #0
 80170dc:	bfb8      	it	lt
 80170de:	18e4      	addlt	r4, r4, r3
 80170e0:	f000 f8e0 	bl	80172a4 <__malloc_lock>
 80170e4:	4a1f      	ldr	r2, [pc, #124]	; (8017164 <_free_r+0x98>)
 80170e6:	6813      	ldr	r3, [r2, #0]
 80170e8:	4610      	mov	r0, r2
 80170ea:	b933      	cbnz	r3, 80170fa <_free_r+0x2e>
 80170ec:	6063      	str	r3, [r4, #4]
 80170ee:	6014      	str	r4, [r2, #0]
 80170f0:	4628      	mov	r0, r5
 80170f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170f6:	f000 b8d6 	b.w	80172a6 <__malloc_unlock>
 80170fa:	42a3      	cmp	r3, r4
 80170fc:	d90c      	bls.n	8017118 <_free_r+0x4c>
 80170fe:	6821      	ldr	r1, [r4, #0]
 8017100:	1862      	adds	r2, r4, r1
 8017102:	4293      	cmp	r3, r2
 8017104:	bf04      	itt	eq
 8017106:	681a      	ldreq	r2, [r3, #0]
 8017108:	685b      	ldreq	r3, [r3, #4]
 801710a:	6063      	str	r3, [r4, #4]
 801710c:	bf04      	itt	eq
 801710e:	1852      	addeq	r2, r2, r1
 8017110:	6022      	streq	r2, [r4, #0]
 8017112:	6004      	str	r4, [r0, #0]
 8017114:	e7ec      	b.n	80170f0 <_free_r+0x24>
 8017116:	4613      	mov	r3, r2
 8017118:	685a      	ldr	r2, [r3, #4]
 801711a:	b10a      	cbz	r2, 8017120 <_free_r+0x54>
 801711c:	42a2      	cmp	r2, r4
 801711e:	d9fa      	bls.n	8017116 <_free_r+0x4a>
 8017120:	6819      	ldr	r1, [r3, #0]
 8017122:	1858      	adds	r0, r3, r1
 8017124:	42a0      	cmp	r0, r4
 8017126:	d10b      	bne.n	8017140 <_free_r+0x74>
 8017128:	6820      	ldr	r0, [r4, #0]
 801712a:	4401      	add	r1, r0
 801712c:	1858      	adds	r0, r3, r1
 801712e:	4282      	cmp	r2, r0
 8017130:	6019      	str	r1, [r3, #0]
 8017132:	d1dd      	bne.n	80170f0 <_free_r+0x24>
 8017134:	6810      	ldr	r0, [r2, #0]
 8017136:	6852      	ldr	r2, [r2, #4]
 8017138:	605a      	str	r2, [r3, #4]
 801713a:	4401      	add	r1, r0
 801713c:	6019      	str	r1, [r3, #0]
 801713e:	e7d7      	b.n	80170f0 <_free_r+0x24>
 8017140:	d902      	bls.n	8017148 <_free_r+0x7c>
 8017142:	230c      	movs	r3, #12
 8017144:	602b      	str	r3, [r5, #0]
 8017146:	e7d3      	b.n	80170f0 <_free_r+0x24>
 8017148:	6820      	ldr	r0, [r4, #0]
 801714a:	1821      	adds	r1, r4, r0
 801714c:	428a      	cmp	r2, r1
 801714e:	bf04      	itt	eq
 8017150:	6811      	ldreq	r1, [r2, #0]
 8017152:	6852      	ldreq	r2, [r2, #4]
 8017154:	6062      	str	r2, [r4, #4]
 8017156:	bf04      	itt	eq
 8017158:	1809      	addeq	r1, r1, r0
 801715a:	6021      	streq	r1, [r4, #0]
 801715c:	605c      	str	r4, [r3, #4]
 801715e:	e7c7      	b.n	80170f0 <_free_r+0x24>
 8017160:	bd38      	pop	{r3, r4, r5, pc}
 8017162:	bf00      	nop
 8017164:	20008834 	.word	0x20008834

08017168 <_malloc_r>:
 8017168:	b570      	push	{r4, r5, r6, lr}
 801716a:	1ccd      	adds	r5, r1, #3
 801716c:	f025 0503 	bic.w	r5, r5, #3
 8017170:	3508      	adds	r5, #8
 8017172:	2d0c      	cmp	r5, #12
 8017174:	bf38      	it	cc
 8017176:	250c      	movcc	r5, #12
 8017178:	2d00      	cmp	r5, #0
 801717a:	4606      	mov	r6, r0
 801717c:	db01      	blt.n	8017182 <_malloc_r+0x1a>
 801717e:	42a9      	cmp	r1, r5
 8017180:	d903      	bls.n	801718a <_malloc_r+0x22>
 8017182:	230c      	movs	r3, #12
 8017184:	6033      	str	r3, [r6, #0]
 8017186:	2000      	movs	r0, #0
 8017188:	bd70      	pop	{r4, r5, r6, pc}
 801718a:	f000 f88b 	bl	80172a4 <__malloc_lock>
 801718e:	4a21      	ldr	r2, [pc, #132]	; (8017214 <_malloc_r+0xac>)
 8017190:	6814      	ldr	r4, [r2, #0]
 8017192:	4621      	mov	r1, r4
 8017194:	b991      	cbnz	r1, 80171bc <_malloc_r+0x54>
 8017196:	4c20      	ldr	r4, [pc, #128]	; (8017218 <_malloc_r+0xb0>)
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	b91b      	cbnz	r3, 80171a4 <_malloc_r+0x3c>
 801719c:	4630      	mov	r0, r6
 801719e:	f000 f83d 	bl	801721c <_sbrk_r>
 80171a2:	6020      	str	r0, [r4, #0]
 80171a4:	4629      	mov	r1, r5
 80171a6:	4630      	mov	r0, r6
 80171a8:	f000 f838 	bl	801721c <_sbrk_r>
 80171ac:	1c43      	adds	r3, r0, #1
 80171ae:	d124      	bne.n	80171fa <_malloc_r+0x92>
 80171b0:	230c      	movs	r3, #12
 80171b2:	6033      	str	r3, [r6, #0]
 80171b4:	4630      	mov	r0, r6
 80171b6:	f000 f876 	bl	80172a6 <__malloc_unlock>
 80171ba:	e7e4      	b.n	8017186 <_malloc_r+0x1e>
 80171bc:	680b      	ldr	r3, [r1, #0]
 80171be:	1b5b      	subs	r3, r3, r5
 80171c0:	d418      	bmi.n	80171f4 <_malloc_r+0x8c>
 80171c2:	2b0b      	cmp	r3, #11
 80171c4:	d90f      	bls.n	80171e6 <_malloc_r+0x7e>
 80171c6:	600b      	str	r3, [r1, #0]
 80171c8:	50cd      	str	r5, [r1, r3]
 80171ca:	18cc      	adds	r4, r1, r3
 80171cc:	4630      	mov	r0, r6
 80171ce:	f000 f86a 	bl	80172a6 <__malloc_unlock>
 80171d2:	f104 000b 	add.w	r0, r4, #11
 80171d6:	1d23      	adds	r3, r4, #4
 80171d8:	f020 0007 	bic.w	r0, r0, #7
 80171dc:	1ac3      	subs	r3, r0, r3
 80171de:	d0d3      	beq.n	8017188 <_malloc_r+0x20>
 80171e0:	425a      	negs	r2, r3
 80171e2:	50e2      	str	r2, [r4, r3]
 80171e4:	e7d0      	b.n	8017188 <_malloc_r+0x20>
 80171e6:	428c      	cmp	r4, r1
 80171e8:	684b      	ldr	r3, [r1, #4]
 80171ea:	bf16      	itet	ne
 80171ec:	6063      	strne	r3, [r4, #4]
 80171ee:	6013      	streq	r3, [r2, #0]
 80171f0:	460c      	movne	r4, r1
 80171f2:	e7eb      	b.n	80171cc <_malloc_r+0x64>
 80171f4:	460c      	mov	r4, r1
 80171f6:	6849      	ldr	r1, [r1, #4]
 80171f8:	e7cc      	b.n	8017194 <_malloc_r+0x2c>
 80171fa:	1cc4      	adds	r4, r0, #3
 80171fc:	f024 0403 	bic.w	r4, r4, #3
 8017200:	42a0      	cmp	r0, r4
 8017202:	d005      	beq.n	8017210 <_malloc_r+0xa8>
 8017204:	1a21      	subs	r1, r4, r0
 8017206:	4630      	mov	r0, r6
 8017208:	f000 f808 	bl	801721c <_sbrk_r>
 801720c:	3001      	adds	r0, #1
 801720e:	d0cf      	beq.n	80171b0 <_malloc_r+0x48>
 8017210:	6025      	str	r5, [r4, #0]
 8017212:	e7db      	b.n	80171cc <_malloc_r+0x64>
 8017214:	20008834 	.word	0x20008834
 8017218:	20008838 	.word	0x20008838

0801721c <_sbrk_r>:
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4c06      	ldr	r4, [pc, #24]	; (8017238 <_sbrk_r+0x1c>)
 8017220:	2300      	movs	r3, #0
 8017222:	4605      	mov	r5, r0
 8017224:	4608      	mov	r0, r1
 8017226:	6023      	str	r3, [r4, #0]
 8017228:	f7ec ffdc 	bl	80041e4 <_sbrk>
 801722c:	1c43      	adds	r3, r0, #1
 801722e:	d102      	bne.n	8017236 <_sbrk_r+0x1a>
 8017230:	6823      	ldr	r3, [r4, #0]
 8017232:	b103      	cbz	r3, 8017236 <_sbrk_r+0x1a>
 8017234:	602b      	str	r3, [r5, #0]
 8017236:	bd38      	pop	{r3, r4, r5, pc}
 8017238:	20016fbc 	.word	0x20016fbc

0801723c <sniprintf>:
 801723c:	b40c      	push	{r2, r3}
 801723e:	b530      	push	{r4, r5, lr}
 8017240:	4b17      	ldr	r3, [pc, #92]	; (80172a0 <sniprintf+0x64>)
 8017242:	1e0c      	subs	r4, r1, #0
 8017244:	b09d      	sub	sp, #116	; 0x74
 8017246:	681d      	ldr	r5, [r3, #0]
 8017248:	da08      	bge.n	801725c <sniprintf+0x20>
 801724a:	238b      	movs	r3, #139	; 0x8b
 801724c:	602b      	str	r3, [r5, #0]
 801724e:	f04f 30ff 	mov.w	r0, #4294967295
 8017252:	b01d      	add	sp, #116	; 0x74
 8017254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017258:	b002      	add	sp, #8
 801725a:	4770      	bx	lr
 801725c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017260:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017264:	bf14      	ite	ne
 8017266:	f104 33ff 	addne.w	r3, r4, #4294967295
 801726a:	4623      	moveq	r3, r4
 801726c:	9304      	str	r3, [sp, #16]
 801726e:	9307      	str	r3, [sp, #28]
 8017270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017274:	9002      	str	r0, [sp, #8]
 8017276:	9006      	str	r0, [sp, #24]
 8017278:	f8ad 3016 	strh.w	r3, [sp, #22]
 801727c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801727e:	ab21      	add	r3, sp, #132	; 0x84
 8017280:	a902      	add	r1, sp, #8
 8017282:	4628      	mov	r0, r5
 8017284:	9301      	str	r3, [sp, #4]
 8017286:	f000 f869 	bl	801735c <_svfiprintf_r>
 801728a:	1c43      	adds	r3, r0, #1
 801728c:	bfbc      	itt	lt
 801728e:	238b      	movlt	r3, #139	; 0x8b
 8017290:	602b      	strlt	r3, [r5, #0]
 8017292:	2c00      	cmp	r4, #0
 8017294:	d0dd      	beq.n	8017252 <sniprintf+0x16>
 8017296:	9b02      	ldr	r3, [sp, #8]
 8017298:	2200      	movs	r2, #0
 801729a:	701a      	strb	r2, [r3, #0]
 801729c:	e7d9      	b.n	8017252 <sniprintf+0x16>
 801729e:	bf00      	nop
 80172a0:	20000198 	.word	0x20000198

080172a4 <__malloc_lock>:
 80172a4:	4770      	bx	lr

080172a6 <__malloc_unlock>:
 80172a6:	4770      	bx	lr

080172a8 <__ssputs_r>:
 80172a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172ac:	688e      	ldr	r6, [r1, #8]
 80172ae:	429e      	cmp	r6, r3
 80172b0:	4682      	mov	sl, r0
 80172b2:	460c      	mov	r4, r1
 80172b4:	4690      	mov	r8, r2
 80172b6:	4699      	mov	r9, r3
 80172b8:	d837      	bhi.n	801732a <__ssputs_r+0x82>
 80172ba:	898a      	ldrh	r2, [r1, #12]
 80172bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172c0:	d031      	beq.n	8017326 <__ssputs_r+0x7e>
 80172c2:	6825      	ldr	r5, [r4, #0]
 80172c4:	6909      	ldr	r1, [r1, #16]
 80172c6:	1a6f      	subs	r7, r5, r1
 80172c8:	6965      	ldr	r5, [r4, #20]
 80172ca:	2302      	movs	r3, #2
 80172cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80172d4:	f109 0301 	add.w	r3, r9, #1
 80172d8:	443b      	add	r3, r7
 80172da:	429d      	cmp	r5, r3
 80172dc:	bf38      	it	cc
 80172de:	461d      	movcc	r5, r3
 80172e0:	0553      	lsls	r3, r2, #21
 80172e2:	d530      	bpl.n	8017346 <__ssputs_r+0x9e>
 80172e4:	4629      	mov	r1, r5
 80172e6:	f7ff ff3f 	bl	8017168 <_malloc_r>
 80172ea:	4606      	mov	r6, r0
 80172ec:	b950      	cbnz	r0, 8017304 <__ssputs_r+0x5c>
 80172ee:	230c      	movs	r3, #12
 80172f0:	f8ca 3000 	str.w	r3, [sl]
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172fa:	81a3      	strh	r3, [r4, #12]
 80172fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017304:	463a      	mov	r2, r7
 8017306:	6921      	ldr	r1, [r4, #16]
 8017308:	f7ff fecc 	bl	80170a4 <memcpy>
 801730c:	89a3      	ldrh	r3, [r4, #12]
 801730e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017316:	81a3      	strh	r3, [r4, #12]
 8017318:	6126      	str	r6, [r4, #16]
 801731a:	6165      	str	r5, [r4, #20]
 801731c:	443e      	add	r6, r7
 801731e:	1bed      	subs	r5, r5, r7
 8017320:	6026      	str	r6, [r4, #0]
 8017322:	60a5      	str	r5, [r4, #8]
 8017324:	464e      	mov	r6, r9
 8017326:	454e      	cmp	r6, r9
 8017328:	d900      	bls.n	801732c <__ssputs_r+0x84>
 801732a:	464e      	mov	r6, r9
 801732c:	4632      	mov	r2, r6
 801732e:	4641      	mov	r1, r8
 8017330:	6820      	ldr	r0, [r4, #0]
 8017332:	f000 fa93 	bl	801785c <memmove>
 8017336:	68a3      	ldr	r3, [r4, #8]
 8017338:	1b9b      	subs	r3, r3, r6
 801733a:	60a3      	str	r3, [r4, #8]
 801733c:	6823      	ldr	r3, [r4, #0]
 801733e:	441e      	add	r6, r3
 8017340:	6026      	str	r6, [r4, #0]
 8017342:	2000      	movs	r0, #0
 8017344:	e7dc      	b.n	8017300 <__ssputs_r+0x58>
 8017346:	462a      	mov	r2, r5
 8017348:	f000 faa1 	bl	801788e <_realloc_r>
 801734c:	4606      	mov	r6, r0
 801734e:	2800      	cmp	r0, #0
 8017350:	d1e2      	bne.n	8017318 <__ssputs_r+0x70>
 8017352:	6921      	ldr	r1, [r4, #16]
 8017354:	4650      	mov	r0, sl
 8017356:	f7ff feb9 	bl	80170cc <_free_r>
 801735a:	e7c8      	b.n	80172ee <__ssputs_r+0x46>

0801735c <_svfiprintf_r>:
 801735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	461d      	mov	r5, r3
 8017362:	898b      	ldrh	r3, [r1, #12]
 8017364:	061f      	lsls	r7, r3, #24
 8017366:	b09d      	sub	sp, #116	; 0x74
 8017368:	4680      	mov	r8, r0
 801736a:	460c      	mov	r4, r1
 801736c:	4616      	mov	r6, r2
 801736e:	d50f      	bpl.n	8017390 <_svfiprintf_r+0x34>
 8017370:	690b      	ldr	r3, [r1, #16]
 8017372:	b96b      	cbnz	r3, 8017390 <_svfiprintf_r+0x34>
 8017374:	2140      	movs	r1, #64	; 0x40
 8017376:	f7ff fef7 	bl	8017168 <_malloc_r>
 801737a:	6020      	str	r0, [r4, #0]
 801737c:	6120      	str	r0, [r4, #16]
 801737e:	b928      	cbnz	r0, 801738c <_svfiprintf_r+0x30>
 8017380:	230c      	movs	r3, #12
 8017382:	f8c8 3000 	str.w	r3, [r8]
 8017386:	f04f 30ff 	mov.w	r0, #4294967295
 801738a:	e0c8      	b.n	801751e <_svfiprintf_r+0x1c2>
 801738c:	2340      	movs	r3, #64	; 0x40
 801738e:	6163      	str	r3, [r4, #20]
 8017390:	2300      	movs	r3, #0
 8017392:	9309      	str	r3, [sp, #36]	; 0x24
 8017394:	2320      	movs	r3, #32
 8017396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801739a:	2330      	movs	r3, #48	; 0x30
 801739c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173a0:	9503      	str	r5, [sp, #12]
 80173a2:	f04f 0b01 	mov.w	fp, #1
 80173a6:	4637      	mov	r7, r6
 80173a8:	463d      	mov	r5, r7
 80173aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80173ae:	b10b      	cbz	r3, 80173b4 <_svfiprintf_r+0x58>
 80173b0:	2b25      	cmp	r3, #37	; 0x25
 80173b2:	d13e      	bne.n	8017432 <_svfiprintf_r+0xd6>
 80173b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80173b8:	d00b      	beq.n	80173d2 <_svfiprintf_r+0x76>
 80173ba:	4653      	mov	r3, sl
 80173bc:	4632      	mov	r2, r6
 80173be:	4621      	mov	r1, r4
 80173c0:	4640      	mov	r0, r8
 80173c2:	f7ff ff71 	bl	80172a8 <__ssputs_r>
 80173c6:	3001      	adds	r0, #1
 80173c8:	f000 80a4 	beq.w	8017514 <_svfiprintf_r+0x1b8>
 80173cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ce:	4453      	add	r3, sl
 80173d0:	9309      	str	r3, [sp, #36]	; 0x24
 80173d2:	783b      	ldrb	r3, [r7, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	f000 809d 	beq.w	8017514 <_svfiprintf_r+0x1b8>
 80173da:	2300      	movs	r3, #0
 80173dc:	f04f 32ff 	mov.w	r2, #4294967295
 80173e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173e4:	9304      	str	r3, [sp, #16]
 80173e6:	9307      	str	r3, [sp, #28]
 80173e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173ec:	931a      	str	r3, [sp, #104]	; 0x68
 80173ee:	462f      	mov	r7, r5
 80173f0:	2205      	movs	r2, #5
 80173f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80173f6:	4850      	ldr	r0, [pc, #320]	; (8017538 <_svfiprintf_r+0x1dc>)
 80173f8:	f7e8 ff12 	bl	8000220 <memchr>
 80173fc:	9b04      	ldr	r3, [sp, #16]
 80173fe:	b9d0      	cbnz	r0, 8017436 <_svfiprintf_r+0xda>
 8017400:	06d9      	lsls	r1, r3, #27
 8017402:	bf44      	itt	mi
 8017404:	2220      	movmi	r2, #32
 8017406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801740a:	071a      	lsls	r2, r3, #28
 801740c:	bf44      	itt	mi
 801740e:	222b      	movmi	r2, #43	; 0x2b
 8017410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017414:	782a      	ldrb	r2, [r5, #0]
 8017416:	2a2a      	cmp	r2, #42	; 0x2a
 8017418:	d015      	beq.n	8017446 <_svfiprintf_r+0xea>
 801741a:	9a07      	ldr	r2, [sp, #28]
 801741c:	462f      	mov	r7, r5
 801741e:	2000      	movs	r0, #0
 8017420:	250a      	movs	r5, #10
 8017422:	4639      	mov	r1, r7
 8017424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017428:	3b30      	subs	r3, #48	; 0x30
 801742a:	2b09      	cmp	r3, #9
 801742c:	d94d      	bls.n	80174ca <_svfiprintf_r+0x16e>
 801742e:	b1b8      	cbz	r0, 8017460 <_svfiprintf_r+0x104>
 8017430:	e00f      	b.n	8017452 <_svfiprintf_r+0xf6>
 8017432:	462f      	mov	r7, r5
 8017434:	e7b8      	b.n	80173a8 <_svfiprintf_r+0x4c>
 8017436:	4a40      	ldr	r2, [pc, #256]	; (8017538 <_svfiprintf_r+0x1dc>)
 8017438:	1a80      	subs	r0, r0, r2
 801743a:	fa0b f000 	lsl.w	r0, fp, r0
 801743e:	4318      	orrs	r0, r3
 8017440:	9004      	str	r0, [sp, #16]
 8017442:	463d      	mov	r5, r7
 8017444:	e7d3      	b.n	80173ee <_svfiprintf_r+0x92>
 8017446:	9a03      	ldr	r2, [sp, #12]
 8017448:	1d11      	adds	r1, r2, #4
 801744a:	6812      	ldr	r2, [r2, #0]
 801744c:	9103      	str	r1, [sp, #12]
 801744e:	2a00      	cmp	r2, #0
 8017450:	db01      	blt.n	8017456 <_svfiprintf_r+0xfa>
 8017452:	9207      	str	r2, [sp, #28]
 8017454:	e004      	b.n	8017460 <_svfiprintf_r+0x104>
 8017456:	4252      	negs	r2, r2
 8017458:	f043 0302 	orr.w	r3, r3, #2
 801745c:	9207      	str	r2, [sp, #28]
 801745e:	9304      	str	r3, [sp, #16]
 8017460:	783b      	ldrb	r3, [r7, #0]
 8017462:	2b2e      	cmp	r3, #46	; 0x2e
 8017464:	d10c      	bne.n	8017480 <_svfiprintf_r+0x124>
 8017466:	787b      	ldrb	r3, [r7, #1]
 8017468:	2b2a      	cmp	r3, #42	; 0x2a
 801746a:	d133      	bne.n	80174d4 <_svfiprintf_r+0x178>
 801746c:	9b03      	ldr	r3, [sp, #12]
 801746e:	1d1a      	adds	r2, r3, #4
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	9203      	str	r2, [sp, #12]
 8017474:	2b00      	cmp	r3, #0
 8017476:	bfb8      	it	lt
 8017478:	f04f 33ff 	movlt.w	r3, #4294967295
 801747c:	3702      	adds	r7, #2
 801747e:	9305      	str	r3, [sp, #20]
 8017480:	4d2e      	ldr	r5, [pc, #184]	; (801753c <_svfiprintf_r+0x1e0>)
 8017482:	7839      	ldrb	r1, [r7, #0]
 8017484:	2203      	movs	r2, #3
 8017486:	4628      	mov	r0, r5
 8017488:	f7e8 feca 	bl	8000220 <memchr>
 801748c:	b138      	cbz	r0, 801749e <_svfiprintf_r+0x142>
 801748e:	2340      	movs	r3, #64	; 0x40
 8017490:	1b40      	subs	r0, r0, r5
 8017492:	fa03 f000 	lsl.w	r0, r3, r0
 8017496:	9b04      	ldr	r3, [sp, #16]
 8017498:	4303      	orrs	r3, r0
 801749a:	3701      	adds	r7, #1
 801749c:	9304      	str	r3, [sp, #16]
 801749e:	7839      	ldrb	r1, [r7, #0]
 80174a0:	4827      	ldr	r0, [pc, #156]	; (8017540 <_svfiprintf_r+0x1e4>)
 80174a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174a6:	2206      	movs	r2, #6
 80174a8:	1c7e      	adds	r6, r7, #1
 80174aa:	f7e8 feb9 	bl	8000220 <memchr>
 80174ae:	2800      	cmp	r0, #0
 80174b0:	d038      	beq.n	8017524 <_svfiprintf_r+0x1c8>
 80174b2:	4b24      	ldr	r3, [pc, #144]	; (8017544 <_svfiprintf_r+0x1e8>)
 80174b4:	bb13      	cbnz	r3, 80174fc <_svfiprintf_r+0x1a0>
 80174b6:	9b03      	ldr	r3, [sp, #12]
 80174b8:	3307      	adds	r3, #7
 80174ba:	f023 0307 	bic.w	r3, r3, #7
 80174be:	3308      	adds	r3, #8
 80174c0:	9303      	str	r3, [sp, #12]
 80174c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c4:	444b      	add	r3, r9
 80174c6:	9309      	str	r3, [sp, #36]	; 0x24
 80174c8:	e76d      	b.n	80173a6 <_svfiprintf_r+0x4a>
 80174ca:	fb05 3202 	mla	r2, r5, r2, r3
 80174ce:	2001      	movs	r0, #1
 80174d0:	460f      	mov	r7, r1
 80174d2:	e7a6      	b.n	8017422 <_svfiprintf_r+0xc6>
 80174d4:	2300      	movs	r3, #0
 80174d6:	3701      	adds	r7, #1
 80174d8:	9305      	str	r3, [sp, #20]
 80174da:	4619      	mov	r1, r3
 80174dc:	250a      	movs	r5, #10
 80174de:	4638      	mov	r0, r7
 80174e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174e4:	3a30      	subs	r2, #48	; 0x30
 80174e6:	2a09      	cmp	r2, #9
 80174e8:	d903      	bls.n	80174f2 <_svfiprintf_r+0x196>
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d0c8      	beq.n	8017480 <_svfiprintf_r+0x124>
 80174ee:	9105      	str	r1, [sp, #20]
 80174f0:	e7c6      	b.n	8017480 <_svfiprintf_r+0x124>
 80174f2:	fb05 2101 	mla	r1, r5, r1, r2
 80174f6:	2301      	movs	r3, #1
 80174f8:	4607      	mov	r7, r0
 80174fa:	e7f0      	b.n	80174de <_svfiprintf_r+0x182>
 80174fc:	ab03      	add	r3, sp, #12
 80174fe:	9300      	str	r3, [sp, #0]
 8017500:	4622      	mov	r2, r4
 8017502:	4b11      	ldr	r3, [pc, #68]	; (8017548 <_svfiprintf_r+0x1ec>)
 8017504:	a904      	add	r1, sp, #16
 8017506:	4640      	mov	r0, r8
 8017508:	f3af 8000 	nop.w
 801750c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017510:	4681      	mov	r9, r0
 8017512:	d1d6      	bne.n	80174c2 <_svfiprintf_r+0x166>
 8017514:	89a3      	ldrh	r3, [r4, #12]
 8017516:	065b      	lsls	r3, r3, #25
 8017518:	f53f af35 	bmi.w	8017386 <_svfiprintf_r+0x2a>
 801751c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801751e:	b01d      	add	sp, #116	; 0x74
 8017520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017524:	ab03      	add	r3, sp, #12
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	4622      	mov	r2, r4
 801752a:	4b07      	ldr	r3, [pc, #28]	; (8017548 <_svfiprintf_r+0x1ec>)
 801752c:	a904      	add	r1, sp, #16
 801752e:	4640      	mov	r0, r8
 8017530:	f000 f882 	bl	8017638 <_printf_i>
 8017534:	e7ea      	b.n	801750c <_svfiprintf_r+0x1b0>
 8017536:	bf00      	nop
 8017538:	0801a088 	.word	0x0801a088
 801753c:	0801a08e 	.word	0x0801a08e
 8017540:	0801a092 	.word	0x0801a092
 8017544:	00000000 	.word	0x00000000
 8017548:	080172a9 	.word	0x080172a9

0801754c <_printf_common>:
 801754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017550:	4691      	mov	r9, r2
 8017552:	461f      	mov	r7, r3
 8017554:	688a      	ldr	r2, [r1, #8]
 8017556:	690b      	ldr	r3, [r1, #16]
 8017558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801755c:	4293      	cmp	r3, r2
 801755e:	bfb8      	it	lt
 8017560:	4613      	movlt	r3, r2
 8017562:	f8c9 3000 	str.w	r3, [r9]
 8017566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801756a:	4606      	mov	r6, r0
 801756c:	460c      	mov	r4, r1
 801756e:	b112      	cbz	r2, 8017576 <_printf_common+0x2a>
 8017570:	3301      	adds	r3, #1
 8017572:	f8c9 3000 	str.w	r3, [r9]
 8017576:	6823      	ldr	r3, [r4, #0]
 8017578:	0699      	lsls	r1, r3, #26
 801757a:	bf42      	ittt	mi
 801757c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017580:	3302      	addmi	r3, #2
 8017582:	f8c9 3000 	strmi.w	r3, [r9]
 8017586:	6825      	ldr	r5, [r4, #0]
 8017588:	f015 0506 	ands.w	r5, r5, #6
 801758c:	d107      	bne.n	801759e <_printf_common+0x52>
 801758e:	f104 0a19 	add.w	sl, r4, #25
 8017592:	68e3      	ldr	r3, [r4, #12]
 8017594:	f8d9 2000 	ldr.w	r2, [r9]
 8017598:	1a9b      	subs	r3, r3, r2
 801759a:	42ab      	cmp	r3, r5
 801759c:	dc28      	bgt.n	80175f0 <_printf_common+0xa4>
 801759e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80175a2:	6822      	ldr	r2, [r4, #0]
 80175a4:	3300      	adds	r3, #0
 80175a6:	bf18      	it	ne
 80175a8:	2301      	movne	r3, #1
 80175aa:	0692      	lsls	r2, r2, #26
 80175ac:	d42d      	bmi.n	801760a <_printf_common+0xbe>
 80175ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175b2:	4639      	mov	r1, r7
 80175b4:	4630      	mov	r0, r6
 80175b6:	47c0      	blx	r8
 80175b8:	3001      	adds	r0, #1
 80175ba:	d020      	beq.n	80175fe <_printf_common+0xb2>
 80175bc:	6823      	ldr	r3, [r4, #0]
 80175be:	68e5      	ldr	r5, [r4, #12]
 80175c0:	f8d9 2000 	ldr.w	r2, [r9]
 80175c4:	f003 0306 	and.w	r3, r3, #6
 80175c8:	2b04      	cmp	r3, #4
 80175ca:	bf08      	it	eq
 80175cc:	1aad      	subeq	r5, r5, r2
 80175ce:	68a3      	ldr	r3, [r4, #8]
 80175d0:	6922      	ldr	r2, [r4, #16]
 80175d2:	bf0c      	ite	eq
 80175d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175d8:	2500      	movne	r5, #0
 80175da:	4293      	cmp	r3, r2
 80175dc:	bfc4      	itt	gt
 80175de:	1a9b      	subgt	r3, r3, r2
 80175e0:	18ed      	addgt	r5, r5, r3
 80175e2:	f04f 0900 	mov.w	r9, #0
 80175e6:	341a      	adds	r4, #26
 80175e8:	454d      	cmp	r5, r9
 80175ea:	d11a      	bne.n	8017622 <_printf_common+0xd6>
 80175ec:	2000      	movs	r0, #0
 80175ee:	e008      	b.n	8017602 <_printf_common+0xb6>
 80175f0:	2301      	movs	r3, #1
 80175f2:	4652      	mov	r2, sl
 80175f4:	4639      	mov	r1, r7
 80175f6:	4630      	mov	r0, r6
 80175f8:	47c0      	blx	r8
 80175fa:	3001      	adds	r0, #1
 80175fc:	d103      	bne.n	8017606 <_printf_common+0xba>
 80175fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017606:	3501      	adds	r5, #1
 8017608:	e7c3      	b.n	8017592 <_printf_common+0x46>
 801760a:	18e1      	adds	r1, r4, r3
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	2030      	movs	r0, #48	; 0x30
 8017610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017614:	4422      	add	r2, r4
 8017616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801761a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801761e:	3302      	adds	r3, #2
 8017620:	e7c5      	b.n	80175ae <_printf_common+0x62>
 8017622:	2301      	movs	r3, #1
 8017624:	4622      	mov	r2, r4
 8017626:	4639      	mov	r1, r7
 8017628:	4630      	mov	r0, r6
 801762a:	47c0      	blx	r8
 801762c:	3001      	adds	r0, #1
 801762e:	d0e6      	beq.n	80175fe <_printf_common+0xb2>
 8017630:	f109 0901 	add.w	r9, r9, #1
 8017634:	e7d8      	b.n	80175e8 <_printf_common+0x9c>
	...

08017638 <_printf_i>:
 8017638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801763c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017640:	460c      	mov	r4, r1
 8017642:	7e09      	ldrb	r1, [r1, #24]
 8017644:	b085      	sub	sp, #20
 8017646:	296e      	cmp	r1, #110	; 0x6e
 8017648:	4617      	mov	r7, r2
 801764a:	4606      	mov	r6, r0
 801764c:	4698      	mov	r8, r3
 801764e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017650:	f000 80b3 	beq.w	80177ba <_printf_i+0x182>
 8017654:	d822      	bhi.n	801769c <_printf_i+0x64>
 8017656:	2963      	cmp	r1, #99	; 0x63
 8017658:	d036      	beq.n	80176c8 <_printf_i+0x90>
 801765a:	d80a      	bhi.n	8017672 <_printf_i+0x3a>
 801765c:	2900      	cmp	r1, #0
 801765e:	f000 80b9 	beq.w	80177d4 <_printf_i+0x19c>
 8017662:	2958      	cmp	r1, #88	; 0x58
 8017664:	f000 8083 	beq.w	801776e <_printf_i+0x136>
 8017668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801766c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017670:	e032      	b.n	80176d8 <_printf_i+0xa0>
 8017672:	2964      	cmp	r1, #100	; 0x64
 8017674:	d001      	beq.n	801767a <_printf_i+0x42>
 8017676:	2969      	cmp	r1, #105	; 0x69
 8017678:	d1f6      	bne.n	8017668 <_printf_i+0x30>
 801767a:	6820      	ldr	r0, [r4, #0]
 801767c:	6813      	ldr	r3, [r2, #0]
 801767e:	0605      	lsls	r5, r0, #24
 8017680:	f103 0104 	add.w	r1, r3, #4
 8017684:	d52a      	bpl.n	80176dc <_printf_i+0xa4>
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	6011      	str	r1, [r2, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	da03      	bge.n	8017696 <_printf_i+0x5e>
 801768e:	222d      	movs	r2, #45	; 0x2d
 8017690:	425b      	negs	r3, r3
 8017692:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017696:	486f      	ldr	r0, [pc, #444]	; (8017854 <_printf_i+0x21c>)
 8017698:	220a      	movs	r2, #10
 801769a:	e039      	b.n	8017710 <_printf_i+0xd8>
 801769c:	2973      	cmp	r1, #115	; 0x73
 801769e:	f000 809d 	beq.w	80177dc <_printf_i+0x1a4>
 80176a2:	d808      	bhi.n	80176b6 <_printf_i+0x7e>
 80176a4:	296f      	cmp	r1, #111	; 0x6f
 80176a6:	d020      	beq.n	80176ea <_printf_i+0xb2>
 80176a8:	2970      	cmp	r1, #112	; 0x70
 80176aa:	d1dd      	bne.n	8017668 <_printf_i+0x30>
 80176ac:	6823      	ldr	r3, [r4, #0]
 80176ae:	f043 0320 	orr.w	r3, r3, #32
 80176b2:	6023      	str	r3, [r4, #0]
 80176b4:	e003      	b.n	80176be <_printf_i+0x86>
 80176b6:	2975      	cmp	r1, #117	; 0x75
 80176b8:	d017      	beq.n	80176ea <_printf_i+0xb2>
 80176ba:	2978      	cmp	r1, #120	; 0x78
 80176bc:	d1d4      	bne.n	8017668 <_printf_i+0x30>
 80176be:	2378      	movs	r3, #120	; 0x78
 80176c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80176c4:	4864      	ldr	r0, [pc, #400]	; (8017858 <_printf_i+0x220>)
 80176c6:	e055      	b.n	8017774 <_printf_i+0x13c>
 80176c8:	6813      	ldr	r3, [r2, #0]
 80176ca:	1d19      	adds	r1, r3, #4
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	6011      	str	r1, [r2, #0]
 80176d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176d8:	2301      	movs	r3, #1
 80176da:	e08c      	b.n	80177f6 <_printf_i+0x1be>
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	6011      	str	r1, [r2, #0]
 80176e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80176e4:	bf18      	it	ne
 80176e6:	b21b      	sxthne	r3, r3
 80176e8:	e7cf      	b.n	801768a <_printf_i+0x52>
 80176ea:	6813      	ldr	r3, [r2, #0]
 80176ec:	6825      	ldr	r5, [r4, #0]
 80176ee:	1d18      	adds	r0, r3, #4
 80176f0:	6010      	str	r0, [r2, #0]
 80176f2:	0628      	lsls	r0, r5, #24
 80176f4:	d501      	bpl.n	80176fa <_printf_i+0xc2>
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	e002      	b.n	8017700 <_printf_i+0xc8>
 80176fa:	0668      	lsls	r0, r5, #25
 80176fc:	d5fb      	bpl.n	80176f6 <_printf_i+0xbe>
 80176fe:	881b      	ldrh	r3, [r3, #0]
 8017700:	4854      	ldr	r0, [pc, #336]	; (8017854 <_printf_i+0x21c>)
 8017702:	296f      	cmp	r1, #111	; 0x6f
 8017704:	bf14      	ite	ne
 8017706:	220a      	movne	r2, #10
 8017708:	2208      	moveq	r2, #8
 801770a:	2100      	movs	r1, #0
 801770c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017710:	6865      	ldr	r5, [r4, #4]
 8017712:	60a5      	str	r5, [r4, #8]
 8017714:	2d00      	cmp	r5, #0
 8017716:	f2c0 8095 	blt.w	8017844 <_printf_i+0x20c>
 801771a:	6821      	ldr	r1, [r4, #0]
 801771c:	f021 0104 	bic.w	r1, r1, #4
 8017720:	6021      	str	r1, [r4, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d13d      	bne.n	80177a2 <_printf_i+0x16a>
 8017726:	2d00      	cmp	r5, #0
 8017728:	f040 808e 	bne.w	8017848 <_printf_i+0x210>
 801772c:	4665      	mov	r5, ip
 801772e:	2a08      	cmp	r2, #8
 8017730:	d10b      	bne.n	801774a <_printf_i+0x112>
 8017732:	6823      	ldr	r3, [r4, #0]
 8017734:	07db      	lsls	r3, r3, #31
 8017736:	d508      	bpl.n	801774a <_printf_i+0x112>
 8017738:	6923      	ldr	r3, [r4, #16]
 801773a:	6862      	ldr	r2, [r4, #4]
 801773c:	429a      	cmp	r2, r3
 801773e:	bfde      	ittt	le
 8017740:	2330      	movle	r3, #48	; 0x30
 8017742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017746:	f105 35ff 	addle.w	r5, r5, #4294967295
 801774a:	ebac 0305 	sub.w	r3, ip, r5
 801774e:	6123      	str	r3, [r4, #16]
 8017750:	f8cd 8000 	str.w	r8, [sp]
 8017754:	463b      	mov	r3, r7
 8017756:	aa03      	add	r2, sp, #12
 8017758:	4621      	mov	r1, r4
 801775a:	4630      	mov	r0, r6
 801775c:	f7ff fef6 	bl	801754c <_printf_common>
 8017760:	3001      	adds	r0, #1
 8017762:	d14d      	bne.n	8017800 <_printf_i+0x1c8>
 8017764:	f04f 30ff 	mov.w	r0, #4294967295
 8017768:	b005      	add	sp, #20
 801776a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801776e:	4839      	ldr	r0, [pc, #228]	; (8017854 <_printf_i+0x21c>)
 8017770:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017774:	6813      	ldr	r3, [r2, #0]
 8017776:	6821      	ldr	r1, [r4, #0]
 8017778:	1d1d      	adds	r5, r3, #4
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	6015      	str	r5, [r2, #0]
 801777e:	060a      	lsls	r2, r1, #24
 8017780:	d50b      	bpl.n	801779a <_printf_i+0x162>
 8017782:	07ca      	lsls	r2, r1, #31
 8017784:	bf44      	itt	mi
 8017786:	f041 0120 	orrmi.w	r1, r1, #32
 801778a:	6021      	strmi	r1, [r4, #0]
 801778c:	b91b      	cbnz	r3, 8017796 <_printf_i+0x15e>
 801778e:	6822      	ldr	r2, [r4, #0]
 8017790:	f022 0220 	bic.w	r2, r2, #32
 8017794:	6022      	str	r2, [r4, #0]
 8017796:	2210      	movs	r2, #16
 8017798:	e7b7      	b.n	801770a <_printf_i+0xd2>
 801779a:	064d      	lsls	r5, r1, #25
 801779c:	bf48      	it	mi
 801779e:	b29b      	uxthmi	r3, r3
 80177a0:	e7ef      	b.n	8017782 <_printf_i+0x14a>
 80177a2:	4665      	mov	r5, ip
 80177a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80177a8:	fb02 3311 	mls	r3, r2, r1, r3
 80177ac:	5cc3      	ldrb	r3, [r0, r3]
 80177ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80177b2:	460b      	mov	r3, r1
 80177b4:	2900      	cmp	r1, #0
 80177b6:	d1f5      	bne.n	80177a4 <_printf_i+0x16c>
 80177b8:	e7b9      	b.n	801772e <_printf_i+0xf6>
 80177ba:	6813      	ldr	r3, [r2, #0]
 80177bc:	6825      	ldr	r5, [r4, #0]
 80177be:	6961      	ldr	r1, [r4, #20]
 80177c0:	1d18      	adds	r0, r3, #4
 80177c2:	6010      	str	r0, [r2, #0]
 80177c4:	0628      	lsls	r0, r5, #24
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	d501      	bpl.n	80177ce <_printf_i+0x196>
 80177ca:	6019      	str	r1, [r3, #0]
 80177cc:	e002      	b.n	80177d4 <_printf_i+0x19c>
 80177ce:	066a      	lsls	r2, r5, #25
 80177d0:	d5fb      	bpl.n	80177ca <_printf_i+0x192>
 80177d2:	8019      	strh	r1, [r3, #0]
 80177d4:	2300      	movs	r3, #0
 80177d6:	6123      	str	r3, [r4, #16]
 80177d8:	4665      	mov	r5, ip
 80177da:	e7b9      	b.n	8017750 <_printf_i+0x118>
 80177dc:	6813      	ldr	r3, [r2, #0]
 80177de:	1d19      	adds	r1, r3, #4
 80177e0:	6011      	str	r1, [r2, #0]
 80177e2:	681d      	ldr	r5, [r3, #0]
 80177e4:	6862      	ldr	r2, [r4, #4]
 80177e6:	2100      	movs	r1, #0
 80177e8:	4628      	mov	r0, r5
 80177ea:	f7e8 fd19 	bl	8000220 <memchr>
 80177ee:	b108      	cbz	r0, 80177f4 <_printf_i+0x1bc>
 80177f0:	1b40      	subs	r0, r0, r5
 80177f2:	6060      	str	r0, [r4, #4]
 80177f4:	6863      	ldr	r3, [r4, #4]
 80177f6:	6123      	str	r3, [r4, #16]
 80177f8:	2300      	movs	r3, #0
 80177fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177fe:	e7a7      	b.n	8017750 <_printf_i+0x118>
 8017800:	6923      	ldr	r3, [r4, #16]
 8017802:	462a      	mov	r2, r5
 8017804:	4639      	mov	r1, r7
 8017806:	4630      	mov	r0, r6
 8017808:	47c0      	blx	r8
 801780a:	3001      	adds	r0, #1
 801780c:	d0aa      	beq.n	8017764 <_printf_i+0x12c>
 801780e:	6823      	ldr	r3, [r4, #0]
 8017810:	079b      	lsls	r3, r3, #30
 8017812:	d413      	bmi.n	801783c <_printf_i+0x204>
 8017814:	68e0      	ldr	r0, [r4, #12]
 8017816:	9b03      	ldr	r3, [sp, #12]
 8017818:	4298      	cmp	r0, r3
 801781a:	bfb8      	it	lt
 801781c:	4618      	movlt	r0, r3
 801781e:	e7a3      	b.n	8017768 <_printf_i+0x130>
 8017820:	2301      	movs	r3, #1
 8017822:	464a      	mov	r2, r9
 8017824:	4639      	mov	r1, r7
 8017826:	4630      	mov	r0, r6
 8017828:	47c0      	blx	r8
 801782a:	3001      	adds	r0, #1
 801782c:	d09a      	beq.n	8017764 <_printf_i+0x12c>
 801782e:	3501      	adds	r5, #1
 8017830:	68e3      	ldr	r3, [r4, #12]
 8017832:	9a03      	ldr	r2, [sp, #12]
 8017834:	1a9b      	subs	r3, r3, r2
 8017836:	42ab      	cmp	r3, r5
 8017838:	dcf2      	bgt.n	8017820 <_printf_i+0x1e8>
 801783a:	e7eb      	b.n	8017814 <_printf_i+0x1dc>
 801783c:	2500      	movs	r5, #0
 801783e:	f104 0919 	add.w	r9, r4, #25
 8017842:	e7f5      	b.n	8017830 <_printf_i+0x1f8>
 8017844:	2b00      	cmp	r3, #0
 8017846:	d1ac      	bne.n	80177a2 <_printf_i+0x16a>
 8017848:	7803      	ldrb	r3, [r0, #0]
 801784a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801784e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017852:	e76c      	b.n	801772e <_printf_i+0xf6>
 8017854:	0801a099 	.word	0x0801a099
 8017858:	0801a0aa 	.word	0x0801a0aa

0801785c <memmove>:
 801785c:	4288      	cmp	r0, r1
 801785e:	b510      	push	{r4, lr}
 8017860:	eb01 0302 	add.w	r3, r1, r2
 8017864:	d807      	bhi.n	8017876 <memmove+0x1a>
 8017866:	1e42      	subs	r2, r0, #1
 8017868:	4299      	cmp	r1, r3
 801786a:	d00a      	beq.n	8017882 <memmove+0x26>
 801786c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017870:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017874:	e7f8      	b.n	8017868 <memmove+0xc>
 8017876:	4283      	cmp	r3, r0
 8017878:	d9f5      	bls.n	8017866 <memmove+0xa>
 801787a:	1881      	adds	r1, r0, r2
 801787c:	1ad2      	subs	r2, r2, r3
 801787e:	42d3      	cmn	r3, r2
 8017880:	d100      	bne.n	8017884 <memmove+0x28>
 8017882:	bd10      	pop	{r4, pc}
 8017884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017888:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801788c:	e7f7      	b.n	801787e <memmove+0x22>

0801788e <_realloc_r>:
 801788e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017890:	4607      	mov	r7, r0
 8017892:	4614      	mov	r4, r2
 8017894:	460e      	mov	r6, r1
 8017896:	b921      	cbnz	r1, 80178a2 <_realloc_r+0x14>
 8017898:	4611      	mov	r1, r2
 801789a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801789e:	f7ff bc63 	b.w	8017168 <_malloc_r>
 80178a2:	b922      	cbnz	r2, 80178ae <_realloc_r+0x20>
 80178a4:	f7ff fc12 	bl	80170cc <_free_r>
 80178a8:	4625      	mov	r5, r4
 80178aa:	4628      	mov	r0, r5
 80178ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178ae:	f000 f814 	bl	80178da <_malloc_usable_size_r>
 80178b2:	42a0      	cmp	r0, r4
 80178b4:	d20f      	bcs.n	80178d6 <_realloc_r+0x48>
 80178b6:	4621      	mov	r1, r4
 80178b8:	4638      	mov	r0, r7
 80178ba:	f7ff fc55 	bl	8017168 <_malloc_r>
 80178be:	4605      	mov	r5, r0
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d0f2      	beq.n	80178aa <_realloc_r+0x1c>
 80178c4:	4631      	mov	r1, r6
 80178c6:	4622      	mov	r2, r4
 80178c8:	f7ff fbec 	bl	80170a4 <memcpy>
 80178cc:	4631      	mov	r1, r6
 80178ce:	4638      	mov	r0, r7
 80178d0:	f7ff fbfc 	bl	80170cc <_free_r>
 80178d4:	e7e9      	b.n	80178aa <_realloc_r+0x1c>
 80178d6:	4635      	mov	r5, r6
 80178d8:	e7e7      	b.n	80178aa <_realloc_r+0x1c>

080178da <_malloc_usable_size_r>:
 80178da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178de:	1f18      	subs	r0, r3, #4
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	bfbc      	itt	lt
 80178e4:	580b      	ldrlt	r3, [r1, r0]
 80178e6:	18c0      	addlt	r0, r0, r3
 80178e8:	4770      	bx	lr

080178ea <fmaxf>:
 80178ea:	b508      	push	{r3, lr}
 80178ec:	ed2d 8b02 	vpush	{d8}
 80178f0:	eeb0 8a40 	vmov.f32	s16, s0
 80178f4:	eef0 8a60 	vmov.f32	s17, s1
 80178f8:	f000 f82e 	bl	8017958 <__fpclassifyf>
 80178fc:	b148      	cbz	r0, 8017912 <fmaxf+0x28>
 80178fe:	eeb0 0a68 	vmov.f32	s0, s17
 8017902:	f000 f829 	bl	8017958 <__fpclassifyf>
 8017906:	b130      	cbz	r0, 8017916 <fmaxf+0x2c>
 8017908:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017910:	dc01      	bgt.n	8017916 <fmaxf+0x2c>
 8017912:	eeb0 8a68 	vmov.f32	s16, s17
 8017916:	eeb0 0a48 	vmov.f32	s0, s16
 801791a:	ecbd 8b02 	vpop	{d8}
 801791e:	bd08      	pop	{r3, pc}

08017920 <fminf>:
 8017920:	b508      	push	{r3, lr}
 8017922:	ed2d 8b02 	vpush	{d8}
 8017926:	eeb0 8a40 	vmov.f32	s16, s0
 801792a:	eef0 8a60 	vmov.f32	s17, s1
 801792e:	f000 f813 	bl	8017958 <__fpclassifyf>
 8017932:	b148      	cbz	r0, 8017948 <fminf+0x28>
 8017934:	eeb0 0a68 	vmov.f32	s0, s17
 8017938:	f000 f80e 	bl	8017958 <__fpclassifyf>
 801793c:	b130      	cbz	r0, 801794c <fminf+0x2c>
 801793e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017946:	d401      	bmi.n	801794c <fminf+0x2c>
 8017948:	eeb0 8a68 	vmov.f32	s16, s17
 801794c:	eeb0 0a48 	vmov.f32	s0, s16
 8017950:	ecbd 8b02 	vpop	{d8}
 8017954:	bd08      	pop	{r3, pc}
	...

08017958 <__fpclassifyf>:
 8017958:	ee10 3a10 	vmov	r3, s0
 801795c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8017960:	d00d      	beq.n	801797e <__fpclassifyf+0x26>
 8017962:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8017966:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801796a:	d30a      	bcc.n	8017982 <__fpclassifyf+0x2a>
 801796c:	4b07      	ldr	r3, [pc, #28]	; (801798c <__fpclassifyf+0x34>)
 801796e:	1e42      	subs	r2, r0, #1
 8017970:	429a      	cmp	r2, r3
 8017972:	d908      	bls.n	8017986 <__fpclassifyf+0x2e>
 8017974:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8017978:	4258      	negs	r0, r3
 801797a:	4158      	adcs	r0, r3
 801797c:	4770      	bx	lr
 801797e:	2002      	movs	r0, #2
 8017980:	4770      	bx	lr
 8017982:	2004      	movs	r0, #4
 8017984:	4770      	bx	lr
 8017986:	2003      	movs	r0, #3
 8017988:	4770      	bx	lr
 801798a:	bf00      	nop
 801798c:	007ffffe 	.word	0x007ffffe

08017990 <pow>:
 8017990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017994:	ed2d 8b04 	vpush	{d8-d9}
 8017998:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8017c6c <pow+0x2dc>
 801799c:	b08d      	sub	sp, #52	; 0x34
 801799e:	ec57 6b10 	vmov	r6, r7, d0
 80179a2:	ec55 4b11 	vmov	r4, r5, d1
 80179a6:	f000 fb73 	bl	8018090 <__ieee754_pow>
 80179aa:	f999 3000 	ldrsb.w	r3, [r9]
 80179ae:	9300      	str	r3, [sp, #0]
 80179b0:	3301      	adds	r3, #1
 80179b2:	eeb0 8a40 	vmov.f32	s16, s0
 80179b6:	eef0 8a60 	vmov.f32	s17, s1
 80179ba:	46c8      	mov	r8, r9
 80179bc:	d05f      	beq.n	8017a7e <pow+0xee>
 80179be:	4622      	mov	r2, r4
 80179c0:	462b      	mov	r3, r5
 80179c2:	4620      	mov	r0, r4
 80179c4:	4629      	mov	r1, r5
 80179c6:	f7e9 f8d1 	bl	8000b6c <__aeabi_dcmpun>
 80179ca:	4683      	mov	fp, r0
 80179cc:	2800      	cmp	r0, #0
 80179ce:	d156      	bne.n	8017a7e <pow+0xee>
 80179d0:	4632      	mov	r2, r6
 80179d2:	463b      	mov	r3, r7
 80179d4:	4630      	mov	r0, r6
 80179d6:	4639      	mov	r1, r7
 80179d8:	f7e9 f8c8 	bl	8000b6c <__aeabi_dcmpun>
 80179dc:	9001      	str	r0, [sp, #4]
 80179de:	b1e8      	cbz	r0, 8017a1c <pow+0x8c>
 80179e0:	2200      	movs	r2, #0
 80179e2:	2300      	movs	r3, #0
 80179e4:	4620      	mov	r0, r4
 80179e6:	4629      	mov	r1, r5
 80179e8:	f7e9 f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d046      	beq.n	8017a7e <pow+0xee>
 80179f0:	2301      	movs	r3, #1
 80179f2:	9302      	str	r3, [sp, #8]
 80179f4:	4b96      	ldr	r3, [pc, #600]	; (8017c50 <pow+0x2c0>)
 80179f6:	9303      	str	r3, [sp, #12]
 80179f8:	4b96      	ldr	r3, [pc, #600]	; (8017c54 <pow+0x2c4>)
 80179fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80179fe:	2200      	movs	r2, #0
 8017a00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017a04:	9b00      	ldr	r3, [sp, #0]
 8017a06:	2b02      	cmp	r3, #2
 8017a08:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017a0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017a10:	d033      	beq.n	8017a7a <pow+0xea>
 8017a12:	a802      	add	r0, sp, #8
 8017a14:	f001 fbce 	bl	80191b4 <matherr>
 8017a18:	bb48      	cbnz	r0, 8017a6e <pow+0xde>
 8017a1a:	e05d      	b.n	8017ad8 <pow+0x148>
 8017a1c:	f04f 0a00 	mov.w	sl, #0
 8017a20:	f04f 0b00 	mov.w	fp, #0
 8017a24:	4652      	mov	r2, sl
 8017a26:	465b      	mov	r3, fp
 8017a28:	4630      	mov	r0, r6
 8017a2a:	4639      	mov	r1, r7
 8017a2c:	f7e9 f86c 	bl	8000b08 <__aeabi_dcmpeq>
 8017a30:	ec4b ab19 	vmov	d9, sl, fp
 8017a34:	2800      	cmp	r0, #0
 8017a36:	d054      	beq.n	8017ae2 <pow+0x152>
 8017a38:	4652      	mov	r2, sl
 8017a3a:	465b      	mov	r3, fp
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	4629      	mov	r1, r5
 8017a40:	f7e9 f862 	bl	8000b08 <__aeabi_dcmpeq>
 8017a44:	4680      	mov	r8, r0
 8017a46:	b318      	cbz	r0, 8017a90 <pow+0x100>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	9302      	str	r3, [sp, #8]
 8017a4c:	4b80      	ldr	r3, [pc, #512]	; (8017c50 <pow+0x2c0>)
 8017a4e:	9303      	str	r3, [sp, #12]
 8017a50:	9b01      	ldr	r3, [sp, #4]
 8017a52:	930a      	str	r3, [sp, #40]	; 0x28
 8017a54:	9b00      	ldr	r3, [sp, #0]
 8017a56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017a5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017a5e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d0d5      	beq.n	8017a12 <pow+0x82>
 8017a66:	4b7b      	ldr	r3, [pc, #492]	; (8017c54 <pow+0x2c4>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a70:	b11b      	cbz	r3, 8017a7a <pow+0xea>
 8017a72:	f7ff fadd 	bl	8017030 <__errno>
 8017a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a78:	6003      	str	r3, [r0, #0]
 8017a7a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8017a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8017a82:	eef0 0a68 	vmov.f32	s1, s17
 8017a86:	b00d      	add	sp, #52	; 0x34
 8017a88:	ecbd 8b04 	vpop	{d8-d9}
 8017a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a90:	ec45 4b10 	vmov	d0, r4, r5
 8017a94:	f001 fb86 	bl	80191a4 <finite>
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d0f0      	beq.n	8017a7e <pow+0xee>
 8017a9c:	4652      	mov	r2, sl
 8017a9e:	465b      	mov	r3, fp
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	f7e9 f83a 	bl	8000b1c <__aeabi_dcmplt>
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d0e8      	beq.n	8017a7e <pow+0xee>
 8017aac:	2301      	movs	r3, #1
 8017aae:	9302      	str	r3, [sp, #8]
 8017ab0:	4b67      	ldr	r3, [pc, #412]	; (8017c50 <pow+0x2c0>)
 8017ab2:	9303      	str	r3, [sp, #12]
 8017ab4:	f999 3000 	ldrsb.w	r3, [r9]
 8017ab8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017abc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017ac0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017ac4:	b913      	cbnz	r3, 8017acc <pow+0x13c>
 8017ac6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017aca:	e7a2      	b.n	8017a12 <pow+0x82>
 8017acc:	4962      	ldr	r1, [pc, #392]	; (8017c58 <pow+0x2c8>)
 8017ace:	2000      	movs	r0, #0
 8017ad0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017ad4:	2b02      	cmp	r3, #2
 8017ad6:	d19c      	bne.n	8017a12 <pow+0x82>
 8017ad8:	f7ff faaa 	bl	8017030 <__errno>
 8017adc:	2321      	movs	r3, #33	; 0x21
 8017ade:	6003      	str	r3, [r0, #0]
 8017ae0:	e7c5      	b.n	8017a6e <pow+0xde>
 8017ae2:	eeb0 0a48 	vmov.f32	s0, s16
 8017ae6:	eef0 0a68 	vmov.f32	s1, s17
 8017aea:	f001 fb5b 	bl	80191a4 <finite>
 8017aee:	9000      	str	r0, [sp, #0]
 8017af0:	2800      	cmp	r0, #0
 8017af2:	f040 8081 	bne.w	8017bf8 <pow+0x268>
 8017af6:	ec47 6b10 	vmov	d0, r6, r7
 8017afa:	f001 fb53 	bl	80191a4 <finite>
 8017afe:	2800      	cmp	r0, #0
 8017b00:	d07a      	beq.n	8017bf8 <pow+0x268>
 8017b02:	ec45 4b10 	vmov	d0, r4, r5
 8017b06:	f001 fb4d 	bl	80191a4 <finite>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	d074      	beq.n	8017bf8 <pow+0x268>
 8017b0e:	ec53 2b18 	vmov	r2, r3, d8
 8017b12:	ee18 0a10 	vmov	r0, s16
 8017b16:	4619      	mov	r1, r3
 8017b18:	f7e9 f828 	bl	8000b6c <__aeabi_dcmpun>
 8017b1c:	f999 9000 	ldrsb.w	r9, [r9]
 8017b20:	4b4b      	ldr	r3, [pc, #300]	; (8017c50 <pow+0x2c0>)
 8017b22:	b1b0      	cbz	r0, 8017b52 <pow+0x1c2>
 8017b24:	2201      	movs	r2, #1
 8017b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017b2a:	9b00      	ldr	r3, [sp, #0]
 8017b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8017b2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017b32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017b36:	f1b9 0f00 	cmp.w	r9, #0
 8017b3a:	d0c4      	beq.n	8017ac6 <pow+0x136>
 8017b3c:	4652      	mov	r2, sl
 8017b3e:	465b      	mov	r3, fp
 8017b40:	4650      	mov	r0, sl
 8017b42:	4659      	mov	r1, fp
 8017b44:	f7e8 fea2 	bl	800088c <__aeabi_ddiv>
 8017b48:	f1b9 0f02 	cmp.w	r9, #2
 8017b4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017b50:	e7c1      	b.n	8017ad6 <pow+0x146>
 8017b52:	2203      	movs	r2, #3
 8017b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017b58:	900a      	str	r0, [sp, #40]	; 0x28
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	2200      	movs	r2, #0
 8017b60:	4b3e      	ldr	r3, [pc, #248]	; (8017c5c <pow+0x2cc>)
 8017b62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017b66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017b6a:	f7e8 fd65 	bl	8000638 <__aeabi_dmul>
 8017b6e:	4604      	mov	r4, r0
 8017b70:	460d      	mov	r5, r1
 8017b72:	f1b9 0f00 	cmp.w	r9, #0
 8017b76:	d124      	bne.n	8017bc2 <pow+0x232>
 8017b78:	4b39      	ldr	r3, [pc, #228]	; (8017c60 <pow+0x2d0>)
 8017b7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017b7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017b82:	4630      	mov	r0, r6
 8017b84:	4652      	mov	r2, sl
 8017b86:	465b      	mov	r3, fp
 8017b88:	4639      	mov	r1, r7
 8017b8a:	f7e8 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d056      	beq.n	8017c40 <pow+0x2b0>
 8017b92:	ec45 4b10 	vmov	d0, r4, r5
 8017b96:	f001 fb17 	bl	80191c8 <rint>
 8017b9a:	4622      	mov	r2, r4
 8017b9c:	462b      	mov	r3, r5
 8017b9e:	ec51 0b10 	vmov	r0, r1, d0
 8017ba2:	f7e8 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 8017ba6:	b920      	cbnz	r0, 8017bb2 <pow+0x222>
 8017ba8:	4b2e      	ldr	r3, [pc, #184]	; (8017c64 <pow+0x2d4>)
 8017baa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017bb2:	f998 3000 	ldrsb.w	r3, [r8]
 8017bb6:	2b02      	cmp	r3, #2
 8017bb8:	d142      	bne.n	8017c40 <pow+0x2b0>
 8017bba:	f7ff fa39 	bl	8017030 <__errno>
 8017bbe:	2322      	movs	r3, #34	; 0x22
 8017bc0:	e78d      	b.n	8017ade <pow+0x14e>
 8017bc2:	4b29      	ldr	r3, [pc, #164]	; (8017c68 <pow+0x2d8>)
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017bca:	4630      	mov	r0, r6
 8017bcc:	4652      	mov	r2, sl
 8017bce:	465b      	mov	r3, fp
 8017bd0:	4639      	mov	r1, r7
 8017bd2:	f7e8 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	d0eb      	beq.n	8017bb2 <pow+0x222>
 8017bda:	ec45 4b10 	vmov	d0, r4, r5
 8017bde:	f001 faf3 	bl	80191c8 <rint>
 8017be2:	4622      	mov	r2, r4
 8017be4:	462b      	mov	r3, r5
 8017be6:	ec51 0b10 	vmov	r0, r1, d0
 8017bea:	f7e8 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d1df      	bne.n	8017bb2 <pow+0x222>
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	4b18      	ldr	r3, [pc, #96]	; (8017c58 <pow+0x2c8>)
 8017bf6:	e7da      	b.n	8017bae <pow+0x21e>
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	ec51 0b18 	vmov	r0, r1, d8
 8017c00:	f7e8 ff82 	bl	8000b08 <__aeabi_dcmpeq>
 8017c04:	2800      	cmp	r0, #0
 8017c06:	f43f af3a 	beq.w	8017a7e <pow+0xee>
 8017c0a:	ec47 6b10 	vmov	d0, r6, r7
 8017c0e:	f001 fac9 	bl	80191a4 <finite>
 8017c12:	2800      	cmp	r0, #0
 8017c14:	f43f af33 	beq.w	8017a7e <pow+0xee>
 8017c18:	ec45 4b10 	vmov	d0, r4, r5
 8017c1c:	f001 fac2 	bl	80191a4 <finite>
 8017c20:	2800      	cmp	r0, #0
 8017c22:	f43f af2c 	beq.w	8017a7e <pow+0xee>
 8017c26:	2304      	movs	r3, #4
 8017c28:	9302      	str	r3, [sp, #8]
 8017c2a:	4b09      	ldr	r3, [pc, #36]	; (8017c50 <pow+0x2c0>)
 8017c2c:	9303      	str	r3, [sp, #12]
 8017c2e:	2300      	movs	r3, #0
 8017c30:	930a      	str	r3, [sp, #40]	; 0x28
 8017c32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017c36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017c3a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8017c3e:	e7b8      	b.n	8017bb2 <pow+0x222>
 8017c40:	a802      	add	r0, sp, #8
 8017c42:	f001 fab7 	bl	80191b4 <matherr>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	f47f af11 	bne.w	8017a6e <pow+0xde>
 8017c4c:	e7b5      	b.n	8017bba <pow+0x22a>
 8017c4e:	bf00      	nop
 8017c50:	0801a0bb 	.word	0x0801a0bb
 8017c54:	3ff00000 	.word	0x3ff00000
 8017c58:	fff00000 	.word	0xfff00000
 8017c5c:	3fe00000 	.word	0x3fe00000
 8017c60:	47efffff 	.word	0x47efffff
 8017c64:	c7efffff 	.word	0xc7efffff
 8017c68:	7ff00000 	.word	0x7ff00000
 8017c6c:	200001fc 	.word	0x200001fc

08017c70 <sqrt>:
 8017c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c74:	ed2d 8b02 	vpush	{d8}
 8017c78:	b08b      	sub	sp, #44	; 0x2c
 8017c7a:	ec55 4b10 	vmov	r4, r5, d0
 8017c7e:	f000 ff15 	bl	8018aac <__ieee754_sqrt>
 8017c82:	4b26      	ldr	r3, [pc, #152]	; (8017d1c <sqrt+0xac>)
 8017c84:	eeb0 8a40 	vmov.f32	s16, s0
 8017c88:	eef0 8a60 	vmov.f32	s17, s1
 8017c8c:	f993 6000 	ldrsb.w	r6, [r3]
 8017c90:	1c73      	adds	r3, r6, #1
 8017c92:	d02a      	beq.n	8017cea <sqrt+0x7a>
 8017c94:	4622      	mov	r2, r4
 8017c96:	462b      	mov	r3, r5
 8017c98:	4620      	mov	r0, r4
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	f7e8 ff66 	bl	8000b6c <__aeabi_dcmpun>
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	bb10      	cbnz	r0, 8017cea <sqrt+0x7a>
 8017ca4:	f04f 0800 	mov.w	r8, #0
 8017ca8:	f04f 0900 	mov.w	r9, #0
 8017cac:	4642      	mov	r2, r8
 8017cae:	464b      	mov	r3, r9
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	4629      	mov	r1, r5
 8017cb4:	f7e8 ff32 	bl	8000b1c <__aeabi_dcmplt>
 8017cb8:	b1b8      	cbz	r0, 8017cea <sqrt+0x7a>
 8017cba:	2301      	movs	r3, #1
 8017cbc:	9300      	str	r3, [sp, #0]
 8017cbe:	4b18      	ldr	r3, [pc, #96]	; (8017d20 <sqrt+0xb0>)
 8017cc0:	9301      	str	r3, [sp, #4]
 8017cc2:	9708      	str	r7, [sp, #32]
 8017cc4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8017cc8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017ccc:	b9b6      	cbnz	r6, 8017cfc <sqrt+0x8c>
 8017cce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017cd2:	4668      	mov	r0, sp
 8017cd4:	f001 fa6e 	bl	80191b4 <matherr>
 8017cd8:	b1d0      	cbz	r0, 8017d10 <sqrt+0xa0>
 8017cda:	9b08      	ldr	r3, [sp, #32]
 8017cdc:	b11b      	cbz	r3, 8017ce6 <sqrt+0x76>
 8017cde:	f7ff f9a7 	bl	8017030 <__errno>
 8017ce2:	9b08      	ldr	r3, [sp, #32]
 8017ce4:	6003      	str	r3, [r0, #0]
 8017ce6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8017cea:	eeb0 0a48 	vmov.f32	s0, s16
 8017cee:	eef0 0a68 	vmov.f32	s1, s17
 8017cf2:	b00b      	add	sp, #44	; 0x2c
 8017cf4:	ecbd 8b02 	vpop	{d8}
 8017cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cfc:	4642      	mov	r2, r8
 8017cfe:	464b      	mov	r3, r9
 8017d00:	4640      	mov	r0, r8
 8017d02:	4649      	mov	r1, r9
 8017d04:	f7e8 fdc2 	bl	800088c <__aeabi_ddiv>
 8017d08:	2e02      	cmp	r6, #2
 8017d0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017d0e:	d1e0      	bne.n	8017cd2 <sqrt+0x62>
 8017d10:	f7ff f98e 	bl	8017030 <__errno>
 8017d14:	2321      	movs	r3, #33	; 0x21
 8017d16:	6003      	str	r3, [r0, #0]
 8017d18:	e7df      	b.n	8017cda <sqrt+0x6a>
 8017d1a:	bf00      	nop
 8017d1c:	200001fc 	.word	0x200001fc
 8017d20:	0801a0bf 	.word	0x0801a0bf

08017d24 <powf>:
 8017d24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8017d28:	ed2d 8b04 	vpush	{d8-d9}
 8017d2c:	4ca7      	ldr	r4, [pc, #668]	; (8017fcc <powf+0x2a8>)
 8017d2e:	b08a      	sub	sp, #40	; 0x28
 8017d30:	eef0 8a40 	vmov.f32	s17, s0
 8017d34:	eeb0 8a60 	vmov.f32	s16, s1
 8017d38:	f000 ff68 	bl	8018c0c <__ieee754_powf>
 8017d3c:	f994 5000 	ldrsb.w	r5, [r4]
 8017d40:	1c6b      	adds	r3, r5, #1
 8017d42:	eeb0 9a40 	vmov.f32	s18, s0
 8017d46:	4626      	mov	r6, r4
 8017d48:	d05f      	beq.n	8017e0a <powf+0xe6>
 8017d4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8017d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d52:	d65a      	bvs.n	8017e0a <powf+0xe6>
 8017d54:	eef4 8a68 	vcmp.f32	s17, s17
 8017d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d5c:	d721      	bvc.n	8017da2 <powf+0x7e>
 8017d5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	d150      	bne.n	8017e0a <powf+0xe6>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	9300      	str	r3, [sp, #0]
 8017d6c:	4b98      	ldr	r3, [pc, #608]	; (8017fd0 <powf+0x2ac>)
 8017d6e:	9301      	str	r3, [sp, #4]
 8017d70:	ee18 0a90 	vmov	r0, s17
 8017d74:	2300      	movs	r3, #0
 8017d76:	9308      	str	r3, [sp, #32]
 8017d78:	f7e8 fc06 	bl	8000588 <__aeabi_f2d>
 8017d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d80:	ee18 0a10 	vmov	r0, s16
 8017d84:	f7e8 fc00 	bl	8000588 <__aeabi_f2d>
 8017d88:	4b92      	ldr	r3, [pc, #584]	; (8017fd4 <powf+0x2b0>)
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	2d02      	cmp	r5, #2
 8017d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017d96:	d032      	beq.n	8017dfe <powf+0xda>
 8017d98:	4668      	mov	r0, sp
 8017d9a:	f001 fa0b 	bl	80191b4 <matherr>
 8017d9e:	bb40      	cbnz	r0, 8017df2 <powf+0xce>
 8017da0:	e065      	b.n	8017e6e <powf+0x14a>
 8017da2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8017fd8 <powf+0x2b4>
 8017da6:	eef4 8a69 	vcmp.f32	s17, s19
 8017daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dae:	d163      	bne.n	8017e78 <powf+0x154>
 8017db0:	eeb4 8a69 	vcmp.f32	s16, s19
 8017db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db8:	d12e      	bne.n	8017e18 <powf+0xf4>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	4b84      	ldr	r3, [pc, #528]	; (8017fd0 <powf+0x2ac>)
 8017dc0:	9301      	str	r3, [sp, #4]
 8017dc2:	ee18 0a90 	vmov	r0, s17
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	9308      	str	r3, [sp, #32]
 8017dca:	f7e8 fbdd 	bl	8000588 <__aeabi_f2d>
 8017dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017dd2:	ee18 0a10 	vmov	r0, s16
 8017dd6:	f7e8 fbd7 	bl	8000588 <__aeabi_f2d>
 8017dda:	2200      	movs	r2, #0
 8017ddc:	2300      	movs	r3, #0
 8017dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017de2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017de6:	2d00      	cmp	r5, #0
 8017de8:	d0d6      	beq.n	8017d98 <powf+0x74>
 8017dea:	4b7a      	ldr	r3, [pc, #488]	; (8017fd4 <powf+0x2b0>)
 8017dec:	2200      	movs	r2, #0
 8017dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017df2:	9b08      	ldr	r3, [sp, #32]
 8017df4:	b11b      	cbz	r3, 8017dfe <powf+0xda>
 8017df6:	f7ff f91b 	bl	8017030 <__errno>
 8017dfa:	9b08      	ldr	r3, [sp, #32]
 8017dfc:	6003      	str	r3, [r0, #0]
 8017dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017e02:	f7e8 fec9 	bl	8000b98 <__aeabi_d2f>
 8017e06:	ee09 0a10 	vmov	s18, r0
 8017e0a:	eeb0 0a49 	vmov.f32	s0, s18
 8017e0e:	b00a      	add	sp, #40	; 0x28
 8017e10:	ecbd 8b04 	vpop	{d8-d9}
 8017e14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8017e18:	eeb0 0a48 	vmov.f32	s0, s16
 8017e1c:	f001 fad5 	bl	80193ca <finitef>
 8017e20:	2800      	cmp	r0, #0
 8017e22:	d0f2      	beq.n	8017e0a <powf+0xe6>
 8017e24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e2c:	d5ed      	bpl.n	8017e0a <powf+0xe6>
 8017e2e:	2301      	movs	r3, #1
 8017e30:	9300      	str	r3, [sp, #0]
 8017e32:	4b67      	ldr	r3, [pc, #412]	; (8017fd0 <powf+0x2ac>)
 8017e34:	9301      	str	r3, [sp, #4]
 8017e36:	ee18 0a90 	vmov	r0, s17
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	9308      	str	r3, [sp, #32]
 8017e3e:	f7e8 fba3 	bl	8000588 <__aeabi_f2d>
 8017e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e46:	ee18 0a10 	vmov	r0, s16
 8017e4a:	f7e8 fb9d 	bl	8000588 <__aeabi_f2d>
 8017e4e:	f994 3000 	ldrsb.w	r3, [r4]
 8017e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017e56:	b923      	cbnz	r3, 8017e62 <powf+0x13e>
 8017e58:	2200      	movs	r2, #0
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017e60:	e79a      	b.n	8017d98 <powf+0x74>
 8017e62:	495e      	ldr	r1, [pc, #376]	; (8017fdc <powf+0x2b8>)
 8017e64:	2000      	movs	r0, #0
 8017e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017e6a:	2b02      	cmp	r3, #2
 8017e6c:	d194      	bne.n	8017d98 <powf+0x74>
 8017e6e:	f7ff f8df 	bl	8017030 <__errno>
 8017e72:	2321      	movs	r3, #33	; 0x21
 8017e74:	6003      	str	r3, [r0, #0]
 8017e76:	e7bc      	b.n	8017df2 <powf+0xce>
 8017e78:	f001 faa7 	bl	80193ca <finitef>
 8017e7c:	4605      	mov	r5, r0
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	d173      	bne.n	8017f6a <powf+0x246>
 8017e82:	eeb0 0a68 	vmov.f32	s0, s17
 8017e86:	f001 faa0 	bl	80193ca <finitef>
 8017e8a:	2800      	cmp	r0, #0
 8017e8c:	d06d      	beq.n	8017f6a <powf+0x246>
 8017e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8017e92:	f001 fa9a 	bl	80193ca <finitef>
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d067      	beq.n	8017f6a <powf+0x246>
 8017e9a:	ee18 0a90 	vmov	r0, s17
 8017e9e:	f7e8 fb73 	bl	8000588 <__aeabi_f2d>
 8017ea2:	4680      	mov	r8, r0
 8017ea4:	ee18 0a10 	vmov	r0, s16
 8017ea8:	4689      	mov	r9, r1
 8017eaa:	f7e8 fb6d 	bl	8000588 <__aeabi_f2d>
 8017eae:	eeb4 9a49 	vcmp.f32	s18, s18
 8017eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb6:	f994 4000 	ldrsb.w	r4, [r4]
 8017eba:	4b45      	ldr	r3, [pc, #276]	; (8017fd0 <powf+0x2ac>)
 8017ebc:	d713      	bvc.n	8017ee6 <powf+0x1c2>
 8017ebe:	2201      	movs	r2, #1
 8017ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8017ec4:	9508      	str	r5, [sp, #32]
 8017ec6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017eca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017ece:	2c00      	cmp	r4, #0
 8017ed0:	d0c2      	beq.n	8017e58 <powf+0x134>
 8017ed2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8017ed6:	ee17 0a90 	vmov	r0, s15
 8017eda:	f7e8 fb55 	bl	8000588 <__aeabi_f2d>
 8017ede:	2c02      	cmp	r4, #2
 8017ee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017ee4:	e7c2      	b.n	8017e6c <powf+0x148>
 8017ee6:	2203      	movs	r2, #3
 8017ee8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017eec:	e9cd 2300 	strd	r2, r3, [sp]
 8017ef0:	9508      	str	r5, [sp, #32]
 8017ef2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017efa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017efe:	b9fc      	cbnz	r4, 8017f40 <powf+0x21c>
 8017f00:	4b37      	ldr	r3, [pc, #220]	; (8017fe0 <powf+0x2bc>)
 8017f02:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8017f06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017f12:	d553      	bpl.n	8017fbc <powf+0x298>
 8017f14:	eeb0 0a48 	vmov.f32	s0, s16
 8017f18:	f001 fa68 	bl	80193ec <rintf>
 8017f1c:	eeb4 0a48 	vcmp.f32	s0, s16
 8017f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f24:	d004      	beq.n	8017f30 <powf+0x20c>
 8017f26:	4b2f      	ldr	r3, [pc, #188]	; (8017fe4 <powf+0x2c0>)
 8017f28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017f2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017f30:	f996 3000 	ldrsb.w	r3, [r6]
 8017f34:	2b02      	cmp	r3, #2
 8017f36:	d141      	bne.n	8017fbc <powf+0x298>
 8017f38:	f7ff f87a 	bl	8017030 <__errno>
 8017f3c:	2322      	movs	r3, #34	; 0x22
 8017f3e:	e799      	b.n	8017e74 <powf+0x150>
 8017f40:	4b29      	ldr	r3, [pc, #164]	; (8017fe8 <powf+0x2c4>)
 8017f42:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8017f46:	2200      	movs	r2, #0
 8017f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017f50:	d5ee      	bpl.n	8017f30 <powf+0x20c>
 8017f52:	eeb0 0a48 	vmov.f32	s0, s16
 8017f56:	f001 fa49 	bl	80193ec <rintf>
 8017f5a:	eeb4 0a48 	vcmp.f32	s0, s16
 8017f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f62:	d0e5      	beq.n	8017f30 <powf+0x20c>
 8017f64:	2200      	movs	r2, #0
 8017f66:	4b1d      	ldr	r3, [pc, #116]	; (8017fdc <powf+0x2b8>)
 8017f68:	e7e0      	b.n	8017f2c <powf+0x208>
 8017f6a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f72:	f47f af4a 	bne.w	8017e0a <powf+0xe6>
 8017f76:	eeb0 0a68 	vmov.f32	s0, s17
 8017f7a:	f001 fa26 	bl	80193ca <finitef>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	f43f af43 	beq.w	8017e0a <powf+0xe6>
 8017f84:	eeb0 0a48 	vmov.f32	s0, s16
 8017f88:	f001 fa1f 	bl	80193ca <finitef>
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	f43f af3c 	beq.w	8017e0a <powf+0xe6>
 8017f92:	2304      	movs	r3, #4
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	4b0e      	ldr	r3, [pc, #56]	; (8017fd0 <powf+0x2ac>)
 8017f98:	9301      	str	r3, [sp, #4]
 8017f9a:	ee18 0a90 	vmov	r0, s17
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	9308      	str	r3, [sp, #32]
 8017fa2:	f7e8 faf1 	bl	8000588 <__aeabi_f2d>
 8017fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017faa:	ee18 0a10 	vmov	r0, s16
 8017fae:	f7e8 faeb 	bl	8000588 <__aeabi_f2d>
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017fb8:	2300      	movs	r3, #0
 8017fba:	e7b7      	b.n	8017f2c <powf+0x208>
 8017fbc:	4668      	mov	r0, sp
 8017fbe:	f001 f8f9 	bl	80191b4 <matherr>
 8017fc2:	2800      	cmp	r0, #0
 8017fc4:	f47f af15 	bne.w	8017df2 <powf+0xce>
 8017fc8:	e7b6      	b.n	8017f38 <powf+0x214>
 8017fca:	bf00      	nop
 8017fcc:	200001fc 	.word	0x200001fc
 8017fd0:	0801a0c4 	.word	0x0801a0c4
 8017fd4:	3ff00000 	.word	0x3ff00000
 8017fd8:	00000000 	.word	0x00000000
 8017fdc:	fff00000 	.word	0xfff00000
 8017fe0:	47efffff 	.word	0x47efffff
 8017fe4:	c7efffff 	.word	0xc7efffff
 8017fe8:	7ff00000 	.word	0x7ff00000

08017fec <sqrtf>:
 8017fec:	b510      	push	{r4, lr}
 8017fee:	ed2d 8b02 	vpush	{d8}
 8017ff2:	b08a      	sub	sp, #40	; 0x28
 8017ff4:	eeb0 8a40 	vmov.f32	s16, s0
 8017ff8:	f001 f8c8 	bl	801918c <__ieee754_sqrtf>
 8017ffc:	4b21      	ldr	r3, [pc, #132]	; (8018084 <sqrtf+0x98>)
 8017ffe:	f993 4000 	ldrsb.w	r4, [r3]
 8018002:	1c63      	adds	r3, r4, #1
 8018004:	d02c      	beq.n	8018060 <sqrtf+0x74>
 8018006:	eeb4 8a48 	vcmp.f32	s16, s16
 801800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800e:	d627      	bvs.n	8018060 <sqrtf+0x74>
 8018010:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018018:	d522      	bpl.n	8018060 <sqrtf+0x74>
 801801a:	2301      	movs	r3, #1
 801801c:	9300      	str	r3, [sp, #0]
 801801e:	4b1a      	ldr	r3, [pc, #104]	; (8018088 <sqrtf+0x9c>)
 8018020:	9301      	str	r3, [sp, #4]
 8018022:	ee18 0a10 	vmov	r0, s16
 8018026:	2300      	movs	r3, #0
 8018028:	9308      	str	r3, [sp, #32]
 801802a:	f7e8 faad 	bl	8000588 <__aeabi_f2d>
 801802e:	2200      	movs	r2, #0
 8018030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018038:	2300      	movs	r3, #0
 801803a:	b9ac      	cbnz	r4, 8018068 <sqrtf+0x7c>
 801803c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018040:	4668      	mov	r0, sp
 8018042:	f001 f8b7 	bl	80191b4 <matherr>
 8018046:	b1b8      	cbz	r0, 8018078 <sqrtf+0x8c>
 8018048:	9b08      	ldr	r3, [sp, #32]
 801804a:	b11b      	cbz	r3, 8018054 <sqrtf+0x68>
 801804c:	f7fe fff0 	bl	8017030 <__errno>
 8018050:	9b08      	ldr	r3, [sp, #32]
 8018052:	6003      	str	r3, [r0, #0]
 8018054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018058:	f7e8 fd9e 	bl	8000b98 <__aeabi_d2f>
 801805c:	ee00 0a10 	vmov	s0, r0
 8018060:	b00a      	add	sp, #40	; 0x28
 8018062:	ecbd 8b02 	vpop	{d8}
 8018066:	bd10      	pop	{r4, pc}
 8018068:	4610      	mov	r0, r2
 801806a:	4619      	mov	r1, r3
 801806c:	f7e8 fc0e 	bl	800088c <__aeabi_ddiv>
 8018070:	2c02      	cmp	r4, #2
 8018072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018076:	d1e3      	bne.n	8018040 <sqrtf+0x54>
 8018078:	f7fe ffda 	bl	8017030 <__errno>
 801807c:	2321      	movs	r3, #33	; 0x21
 801807e:	6003      	str	r3, [r0, #0]
 8018080:	e7e2      	b.n	8018048 <sqrtf+0x5c>
 8018082:	bf00      	nop
 8018084:	200001fc 	.word	0x200001fc
 8018088:	0801a0c9 	.word	0x0801a0c9
 801808c:	00000000 	.word	0x00000000

08018090 <__ieee754_pow>:
 8018090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018094:	b091      	sub	sp, #68	; 0x44
 8018096:	ed8d 1b00 	vstr	d1, [sp]
 801809a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801809e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80180a2:	ea58 0302 	orrs.w	r3, r8, r2
 80180a6:	ec57 6b10 	vmov	r6, r7, d0
 80180aa:	f000 84be 	beq.w	8018a2a <__ieee754_pow+0x99a>
 80180ae:	4b7a      	ldr	r3, [pc, #488]	; (8018298 <__ieee754_pow+0x208>)
 80180b0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80180b4:	429c      	cmp	r4, r3
 80180b6:	463d      	mov	r5, r7
 80180b8:	ee10 aa10 	vmov	sl, s0
 80180bc:	dc09      	bgt.n	80180d2 <__ieee754_pow+0x42>
 80180be:	d103      	bne.n	80180c8 <__ieee754_pow+0x38>
 80180c0:	b93e      	cbnz	r6, 80180d2 <__ieee754_pow+0x42>
 80180c2:	45a0      	cmp	r8, r4
 80180c4:	dc0d      	bgt.n	80180e2 <__ieee754_pow+0x52>
 80180c6:	e001      	b.n	80180cc <__ieee754_pow+0x3c>
 80180c8:	4598      	cmp	r8, r3
 80180ca:	dc02      	bgt.n	80180d2 <__ieee754_pow+0x42>
 80180cc:	4598      	cmp	r8, r3
 80180ce:	d10e      	bne.n	80180ee <__ieee754_pow+0x5e>
 80180d0:	b16a      	cbz	r2, 80180ee <__ieee754_pow+0x5e>
 80180d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80180d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80180da:	ea54 030a 	orrs.w	r3, r4, sl
 80180de:	f000 84a4 	beq.w	8018a2a <__ieee754_pow+0x99a>
 80180e2:	486e      	ldr	r0, [pc, #440]	; (801829c <__ieee754_pow+0x20c>)
 80180e4:	b011      	add	sp, #68	; 0x44
 80180e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180ea:	f001 b865 	b.w	80191b8 <nan>
 80180ee:	2d00      	cmp	r5, #0
 80180f0:	da53      	bge.n	801819a <__ieee754_pow+0x10a>
 80180f2:	4b6b      	ldr	r3, [pc, #428]	; (80182a0 <__ieee754_pow+0x210>)
 80180f4:	4598      	cmp	r8, r3
 80180f6:	dc4d      	bgt.n	8018194 <__ieee754_pow+0x104>
 80180f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80180fc:	4598      	cmp	r8, r3
 80180fe:	dd4c      	ble.n	801819a <__ieee754_pow+0x10a>
 8018100:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018104:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018108:	2b14      	cmp	r3, #20
 801810a:	dd26      	ble.n	801815a <__ieee754_pow+0xca>
 801810c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018110:	fa22 f103 	lsr.w	r1, r2, r3
 8018114:	fa01 f303 	lsl.w	r3, r1, r3
 8018118:	4293      	cmp	r3, r2
 801811a:	d13e      	bne.n	801819a <__ieee754_pow+0x10a>
 801811c:	f001 0101 	and.w	r1, r1, #1
 8018120:	f1c1 0b02 	rsb	fp, r1, #2
 8018124:	2a00      	cmp	r2, #0
 8018126:	d15b      	bne.n	80181e0 <__ieee754_pow+0x150>
 8018128:	4b5b      	ldr	r3, [pc, #364]	; (8018298 <__ieee754_pow+0x208>)
 801812a:	4598      	cmp	r8, r3
 801812c:	d124      	bne.n	8018178 <__ieee754_pow+0xe8>
 801812e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018132:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018136:	ea53 030a 	orrs.w	r3, r3, sl
 801813a:	f000 8476 	beq.w	8018a2a <__ieee754_pow+0x99a>
 801813e:	4b59      	ldr	r3, [pc, #356]	; (80182a4 <__ieee754_pow+0x214>)
 8018140:	429c      	cmp	r4, r3
 8018142:	dd2d      	ble.n	80181a0 <__ieee754_pow+0x110>
 8018144:	f1b9 0f00 	cmp.w	r9, #0
 8018148:	f280 8473 	bge.w	8018a32 <__ieee754_pow+0x9a2>
 801814c:	2000      	movs	r0, #0
 801814e:	2100      	movs	r1, #0
 8018150:	ec41 0b10 	vmov	d0, r0, r1
 8018154:	b011      	add	sp, #68	; 0x44
 8018156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815a:	2a00      	cmp	r2, #0
 801815c:	d13e      	bne.n	80181dc <__ieee754_pow+0x14c>
 801815e:	f1c3 0314 	rsb	r3, r3, #20
 8018162:	fa48 f103 	asr.w	r1, r8, r3
 8018166:	fa01 f303 	lsl.w	r3, r1, r3
 801816a:	4543      	cmp	r3, r8
 801816c:	f040 8469 	bne.w	8018a42 <__ieee754_pow+0x9b2>
 8018170:	f001 0101 	and.w	r1, r1, #1
 8018174:	f1c1 0b02 	rsb	fp, r1, #2
 8018178:	4b4b      	ldr	r3, [pc, #300]	; (80182a8 <__ieee754_pow+0x218>)
 801817a:	4598      	cmp	r8, r3
 801817c:	d118      	bne.n	80181b0 <__ieee754_pow+0x120>
 801817e:	f1b9 0f00 	cmp.w	r9, #0
 8018182:	f280 845a 	bge.w	8018a3a <__ieee754_pow+0x9aa>
 8018186:	4948      	ldr	r1, [pc, #288]	; (80182a8 <__ieee754_pow+0x218>)
 8018188:	4632      	mov	r2, r6
 801818a:	463b      	mov	r3, r7
 801818c:	2000      	movs	r0, #0
 801818e:	f7e8 fb7d 	bl	800088c <__aeabi_ddiv>
 8018192:	e7dd      	b.n	8018150 <__ieee754_pow+0xc0>
 8018194:	f04f 0b02 	mov.w	fp, #2
 8018198:	e7c4      	b.n	8018124 <__ieee754_pow+0x94>
 801819a:	f04f 0b00 	mov.w	fp, #0
 801819e:	e7c1      	b.n	8018124 <__ieee754_pow+0x94>
 80181a0:	f1b9 0f00 	cmp.w	r9, #0
 80181a4:	dad2      	bge.n	801814c <__ieee754_pow+0xbc>
 80181a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80181aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80181ae:	e7cf      	b.n	8018150 <__ieee754_pow+0xc0>
 80181b0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80181b4:	d106      	bne.n	80181c4 <__ieee754_pow+0x134>
 80181b6:	4632      	mov	r2, r6
 80181b8:	463b      	mov	r3, r7
 80181ba:	4610      	mov	r0, r2
 80181bc:	4619      	mov	r1, r3
 80181be:	f7e8 fa3b 	bl	8000638 <__aeabi_dmul>
 80181c2:	e7c5      	b.n	8018150 <__ieee754_pow+0xc0>
 80181c4:	4b39      	ldr	r3, [pc, #228]	; (80182ac <__ieee754_pow+0x21c>)
 80181c6:	4599      	cmp	r9, r3
 80181c8:	d10a      	bne.n	80181e0 <__ieee754_pow+0x150>
 80181ca:	2d00      	cmp	r5, #0
 80181cc:	db08      	blt.n	80181e0 <__ieee754_pow+0x150>
 80181ce:	ec47 6b10 	vmov	d0, r6, r7
 80181d2:	b011      	add	sp, #68	; 0x44
 80181d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d8:	f000 bc68 	b.w	8018aac <__ieee754_sqrt>
 80181dc:	f04f 0b00 	mov.w	fp, #0
 80181e0:	ec47 6b10 	vmov	d0, r6, r7
 80181e4:	f000 ffd5 	bl	8019192 <fabs>
 80181e8:	ec51 0b10 	vmov	r0, r1, d0
 80181ec:	f1ba 0f00 	cmp.w	sl, #0
 80181f0:	d127      	bne.n	8018242 <__ieee754_pow+0x1b2>
 80181f2:	b124      	cbz	r4, 80181fe <__ieee754_pow+0x16e>
 80181f4:	4b2c      	ldr	r3, [pc, #176]	; (80182a8 <__ieee754_pow+0x218>)
 80181f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d121      	bne.n	8018242 <__ieee754_pow+0x1b2>
 80181fe:	f1b9 0f00 	cmp.w	r9, #0
 8018202:	da05      	bge.n	8018210 <__ieee754_pow+0x180>
 8018204:	4602      	mov	r2, r0
 8018206:	460b      	mov	r3, r1
 8018208:	2000      	movs	r0, #0
 801820a:	4927      	ldr	r1, [pc, #156]	; (80182a8 <__ieee754_pow+0x218>)
 801820c:	f7e8 fb3e 	bl	800088c <__aeabi_ddiv>
 8018210:	2d00      	cmp	r5, #0
 8018212:	da9d      	bge.n	8018150 <__ieee754_pow+0xc0>
 8018214:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018218:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801821c:	ea54 030b 	orrs.w	r3, r4, fp
 8018220:	d108      	bne.n	8018234 <__ieee754_pow+0x1a4>
 8018222:	4602      	mov	r2, r0
 8018224:	460b      	mov	r3, r1
 8018226:	4610      	mov	r0, r2
 8018228:	4619      	mov	r1, r3
 801822a:	f7e8 f84d 	bl	80002c8 <__aeabi_dsub>
 801822e:	4602      	mov	r2, r0
 8018230:	460b      	mov	r3, r1
 8018232:	e7ac      	b.n	801818e <__ieee754_pow+0xfe>
 8018234:	f1bb 0f01 	cmp.w	fp, #1
 8018238:	d18a      	bne.n	8018150 <__ieee754_pow+0xc0>
 801823a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801823e:	4619      	mov	r1, r3
 8018240:	e786      	b.n	8018150 <__ieee754_pow+0xc0>
 8018242:	0fed      	lsrs	r5, r5, #31
 8018244:	1e6b      	subs	r3, r5, #1
 8018246:	930d      	str	r3, [sp, #52]	; 0x34
 8018248:	ea5b 0303 	orrs.w	r3, fp, r3
 801824c:	d102      	bne.n	8018254 <__ieee754_pow+0x1c4>
 801824e:	4632      	mov	r2, r6
 8018250:	463b      	mov	r3, r7
 8018252:	e7e8      	b.n	8018226 <__ieee754_pow+0x196>
 8018254:	4b16      	ldr	r3, [pc, #88]	; (80182b0 <__ieee754_pow+0x220>)
 8018256:	4598      	cmp	r8, r3
 8018258:	f340 80fe 	ble.w	8018458 <__ieee754_pow+0x3c8>
 801825c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018260:	4598      	cmp	r8, r3
 8018262:	dd0a      	ble.n	801827a <__ieee754_pow+0x1ea>
 8018264:	4b0f      	ldr	r3, [pc, #60]	; (80182a4 <__ieee754_pow+0x214>)
 8018266:	429c      	cmp	r4, r3
 8018268:	dc0d      	bgt.n	8018286 <__ieee754_pow+0x1f6>
 801826a:	f1b9 0f00 	cmp.w	r9, #0
 801826e:	f6bf af6d 	bge.w	801814c <__ieee754_pow+0xbc>
 8018272:	a307      	add	r3, pc, #28	; (adr r3, 8018290 <__ieee754_pow+0x200>)
 8018274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018278:	e79f      	b.n	80181ba <__ieee754_pow+0x12a>
 801827a:	4b0e      	ldr	r3, [pc, #56]	; (80182b4 <__ieee754_pow+0x224>)
 801827c:	429c      	cmp	r4, r3
 801827e:	ddf4      	ble.n	801826a <__ieee754_pow+0x1da>
 8018280:	4b09      	ldr	r3, [pc, #36]	; (80182a8 <__ieee754_pow+0x218>)
 8018282:	429c      	cmp	r4, r3
 8018284:	dd18      	ble.n	80182b8 <__ieee754_pow+0x228>
 8018286:	f1b9 0f00 	cmp.w	r9, #0
 801828a:	dcf2      	bgt.n	8018272 <__ieee754_pow+0x1e2>
 801828c:	e75e      	b.n	801814c <__ieee754_pow+0xbc>
 801828e:	bf00      	nop
 8018290:	8800759c 	.word	0x8800759c
 8018294:	7e37e43c 	.word	0x7e37e43c
 8018298:	7ff00000 	.word	0x7ff00000
 801829c:	0801a08d 	.word	0x0801a08d
 80182a0:	433fffff 	.word	0x433fffff
 80182a4:	3fefffff 	.word	0x3fefffff
 80182a8:	3ff00000 	.word	0x3ff00000
 80182ac:	3fe00000 	.word	0x3fe00000
 80182b0:	41e00000 	.word	0x41e00000
 80182b4:	3feffffe 	.word	0x3feffffe
 80182b8:	2200      	movs	r2, #0
 80182ba:	4b63      	ldr	r3, [pc, #396]	; (8018448 <__ieee754_pow+0x3b8>)
 80182bc:	f7e8 f804 	bl	80002c8 <__aeabi_dsub>
 80182c0:	a355      	add	r3, pc, #340	; (adr r3, 8018418 <__ieee754_pow+0x388>)
 80182c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182c6:	4604      	mov	r4, r0
 80182c8:	460d      	mov	r5, r1
 80182ca:	f7e8 f9b5 	bl	8000638 <__aeabi_dmul>
 80182ce:	a354      	add	r3, pc, #336	; (adr r3, 8018420 <__ieee754_pow+0x390>)
 80182d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d4:	4606      	mov	r6, r0
 80182d6:	460f      	mov	r7, r1
 80182d8:	4620      	mov	r0, r4
 80182da:	4629      	mov	r1, r5
 80182dc:	f7e8 f9ac 	bl	8000638 <__aeabi_dmul>
 80182e0:	2200      	movs	r2, #0
 80182e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182e6:	4b59      	ldr	r3, [pc, #356]	; (801844c <__ieee754_pow+0x3bc>)
 80182e8:	4620      	mov	r0, r4
 80182ea:	4629      	mov	r1, r5
 80182ec:	f7e8 f9a4 	bl	8000638 <__aeabi_dmul>
 80182f0:	4602      	mov	r2, r0
 80182f2:	460b      	mov	r3, r1
 80182f4:	a14c      	add	r1, pc, #304	; (adr r1, 8018428 <__ieee754_pow+0x398>)
 80182f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182fa:	f7e7 ffe5 	bl	80002c8 <__aeabi_dsub>
 80182fe:	4622      	mov	r2, r4
 8018300:	462b      	mov	r3, r5
 8018302:	f7e8 f999 	bl	8000638 <__aeabi_dmul>
 8018306:	4602      	mov	r2, r0
 8018308:	460b      	mov	r3, r1
 801830a:	2000      	movs	r0, #0
 801830c:	4950      	ldr	r1, [pc, #320]	; (8018450 <__ieee754_pow+0x3c0>)
 801830e:	f7e7 ffdb 	bl	80002c8 <__aeabi_dsub>
 8018312:	4622      	mov	r2, r4
 8018314:	462b      	mov	r3, r5
 8018316:	4680      	mov	r8, r0
 8018318:	4689      	mov	r9, r1
 801831a:	4620      	mov	r0, r4
 801831c:	4629      	mov	r1, r5
 801831e:	f7e8 f98b 	bl	8000638 <__aeabi_dmul>
 8018322:	4602      	mov	r2, r0
 8018324:	460b      	mov	r3, r1
 8018326:	4640      	mov	r0, r8
 8018328:	4649      	mov	r1, r9
 801832a:	f7e8 f985 	bl	8000638 <__aeabi_dmul>
 801832e:	a340      	add	r3, pc, #256	; (adr r3, 8018430 <__ieee754_pow+0x3a0>)
 8018330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018334:	f7e8 f980 	bl	8000638 <__aeabi_dmul>
 8018338:	4602      	mov	r2, r0
 801833a:	460b      	mov	r3, r1
 801833c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018340:	f7e7 ffc2 	bl	80002c8 <__aeabi_dsub>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	4604      	mov	r4, r0
 801834a:	460d      	mov	r5, r1
 801834c:	4630      	mov	r0, r6
 801834e:	4639      	mov	r1, r7
 8018350:	f7e7 ffbc 	bl	80002cc <__adddf3>
 8018354:	2000      	movs	r0, #0
 8018356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801835a:	4632      	mov	r2, r6
 801835c:	463b      	mov	r3, r7
 801835e:	f7e7 ffb3 	bl	80002c8 <__aeabi_dsub>
 8018362:	4602      	mov	r2, r0
 8018364:	460b      	mov	r3, r1
 8018366:	4620      	mov	r0, r4
 8018368:	4629      	mov	r1, r5
 801836a:	f7e7 ffad 	bl	80002c8 <__aeabi_dsub>
 801836e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018370:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018374:	4313      	orrs	r3, r2
 8018376:	4606      	mov	r6, r0
 8018378:	460f      	mov	r7, r1
 801837a:	f040 81eb 	bne.w	8018754 <__ieee754_pow+0x6c4>
 801837e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018438 <__ieee754_pow+0x3a8>
 8018382:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018386:	2400      	movs	r4, #0
 8018388:	4622      	mov	r2, r4
 801838a:	462b      	mov	r3, r5
 801838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018394:	f7e7 ff98 	bl	80002c8 <__aeabi_dsub>
 8018398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801839c:	f7e8 f94c 	bl	8000638 <__aeabi_dmul>
 80183a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183a4:	4680      	mov	r8, r0
 80183a6:	4689      	mov	r9, r1
 80183a8:	4630      	mov	r0, r6
 80183aa:	4639      	mov	r1, r7
 80183ac:	f7e8 f944 	bl	8000638 <__aeabi_dmul>
 80183b0:	4602      	mov	r2, r0
 80183b2:	460b      	mov	r3, r1
 80183b4:	4640      	mov	r0, r8
 80183b6:	4649      	mov	r1, r9
 80183b8:	f7e7 ff88 	bl	80002cc <__adddf3>
 80183bc:	4622      	mov	r2, r4
 80183be:	462b      	mov	r3, r5
 80183c0:	4680      	mov	r8, r0
 80183c2:	4689      	mov	r9, r1
 80183c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80183c8:	f7e8 f936 	bl	8000638 <__aeabi_dmul>
 80183cc:	460b      	mov	r3, r1
 80183ce:	4604      	mov	r4, r0
 80183d0:	460d      	mov	r5, r1
 80183d2:	4602      	mov	r2, r0
 80183d4:	4649      	mov	r1, r9
 80183d6:	4640      	mov	r0, r8
 80183d8:	e9cd 4500 	strd	r4, r5, [sp]
 80183dc:	f7e7 ff76 	bl	80002cc <__adddf3>
 80183e0:	4b1c      	ldr	r3, [pc, #112]	; (8018454 <__ieee754_pow+0x3c4>)
 80183e2:	4299      	cmp	r1, r3
 80183e4:	4606      	mov	r6, r0
 80183e6:	460f      	mov	r7, r1
 80183e8:	468b      	mov	fp, r1
 80183ea:	f340 82f7 	ble.w	80189dc <__ieee754_pow+0x94c>
 80183ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80183f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80183f6:	4303      	orrs	r3, r0
 80183f8:	f000 81ea 	beq.w	80187d0 <__ieee754_pow+0x740>
 80183fc:	a310      	add	r3, pc, #64	; (adr r3, 8018440 <__ieee754_pow+0x3b0>)
 80183fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018406:	f7e8 f917 	bl	8000638 <__aeabi_dmul>
 801840a:	a30d      	add	r3, pc, #52	; (adr r3, 8018440 <__ieee754_pow+0x3b0>)
 801840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018410:	e6d5      	b.n	80181be <__ieee754_pow+0x12e>
 8018412:	bf00      	nop
 8018414:	f3af 8000 	nop.w
 8018418:	60000000 	.word	0x60000000
 801841c:	3ff71547 	.word	0x3ff71547
 8018420:	f85ddf44 	.word	0xf85ddf44
 8018424:	3e54ae0b 	.word	0x3e54ae0b
 8018428:	55555555 	.word	0x55555555
 801842c:	3fd55555 	.word	0x3fd55555
 8018430:	652b82fe 	.word	0x652b82fe
 8018434:	3ff71547 	.word	0x3ff71547
 8018438:	00000000 	.word	0x00000000
 801843c:	bff00000 	.word	0xbff00000
 8018440:	8800759c 	.word	0x8800759c
 8018444:	7e37e43c 	.word	0x7e37e43c
 8018448:	3ff00000 	.word	0x3ff00000
 801844c:	3fd00000 	.word	0x3fd00000
 8018450:	3fe00000 	.word	0x3fe00000
 8018454:	408fffff 	.word	0x408fffff
 8018458:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801845c:	f04f 0200 	mov.w	r2, #0
 8018460:	da05      	bge.n	801846e <__ieee754_pow+0x3de>
 8018462:	4bd3      	ldr	r3, [pc, #844]	; (80187b0 <__ieee754_pow+0x720>)
 8018464:	f7e8 f8e8 	bl	8000638 <__aeabi_dmul>
 8018468:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801846c:	460c      	mov	r4, r1
 801846e:	1523      	asrs	r3, r4, #20
 8018470:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018474:	4413      	add	r3, r2
 8018476:	9309      	str	r3, [sp, #36]	; 0x24
 8018478:	4bce      	ldr	r3, [pc, #824]	; (80187b4 <__ieee754_pow+0x724>)
 801847a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801847e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018482:	429c      	cmp	r4, r3
 8018484:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018488:	dd08      	ble.n	801849c <__ieee754_pow+0x40c>
 801848a:	4bcb      	ldr	r3, [pc, #812]	; (80187b8 <__ieee754_pow+0x728>)
 801848c:	429c      	cmp	r4, r3
 801848e:	f340 815e 	ble.w	801874e <__ieee754_pow+0x6be>
 8018492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018494:	3301      	adds	r3, #1
 8018496:	9309      	str	r3, [sp, #36]	; 0x24
 8018498:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801849c:	f04f 0a00 	mov.w	sl, #0
 80184a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80184a4:	930c      	str	r3, [sp, #48]	; 0x30
 80184a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80184a8:	4bc4      	ldr	r3, [pc, #784]	; (80187bc <__ieee754_pow+0x72c>)
 80184aa:	4413      	add	r3, r2
 80184ac:	ed93 7b00 	vldr	d7, [r3]
 80184b0:	4629      	mov	r1, r5
 80184b2:	ec53 2b17 	vmov	r2, r3, d7
 80184b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80184ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80184be:	f7e7 ff03 	bl	80002c8 <__aeabi_dsub>
 80184c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80184c6:	4606      	mov	r6, r0
 80184c8:	460f      	mov	r7, r1
 80184ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80184ce:	f7e7 fefd 	bl	80002cc <__adddf3>
 80184d2:	4602      	mov	r2, r0
 80184d4:	460b      	mov	r3, r1
 80184d6:	2000      	movs	r0, #0
 80184d8:	49b9      	ldr	r1, [pc, #740]	; (80187c0 <__ieee754_pow+0x730>)
 80184da:	f7e8 f9d7 	bl	800088c <__aeabi_ddiv>
 80184de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80184e2:	4602      	mov	r2, r0
 80184e4:	460b      	mov	r3, r1
 80184e6:	4630      	mov	r0, r6
 80184e8:	4639      	mov	r1, r7
 80184ea:	f7e8 f8a5 	bl	8000638 <__aeabi_dmul>
 80184ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80184f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80184f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80184fa:	2300      	movs	r3, #0
 80184fc:	9302      	str	r3, [sp, #8]
 80184fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018502:	106d      	asrs	r5, r5, #1
 8018504:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018508:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801850c:	2200      	movs	r2, #0
 801850e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8018512:	4640      	mov	r0, r8
 8018514:	4649      	mov	r1, r9
 8018516:	4614      	mov	r4, r2
 8018518:	461d      	mov	r5, r3
 801851a:	f7e8 f88d 	bl	8000638 <__aeabi_dmul>
 801851e:	4602      	mov	r2, r0
 8018520:	460b      	mov	r3, r1
 8018522:	4630      	mov	r0, r6
 8018524:	4639      	mov	r1, r7
 8018526:	f7e7 fecf 	bl	80002c8 <__aeabi_dsub>
 801852a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801852e:	4606      	mov	r6, r0
 8018530:	460f      	mov	r7, r1
 8018532:	4620      	mov	r0, r4
 8018534:	4629      	mov	r1, r5
 8018536:	f7e7 fec7 	bl	80002c8 <__aeabi_dsub>
 801853a:	4602      	mov	r2, r0
 801853c:	460b      	mov	r3, r1
 801853e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018542:	f7e7 fec1 	bl	80002c8 <__aeabi_dsub>
 8018546:	4642      	mov	r2, r8
 8018548:	464b      	mov	r3, r9
 801854a:	f7e8 f875 	bl	8000638 <__aeabi_dmul>
 801854e:	4602      	mov	r2, r0
 8018550:	460b      	mov	r3, r1
 8018552:	4630      	mov	r0, r6
 8018554:	4639      	mov	r1, r7
 8018556:	f7e7 feb7 	bl	80002c8 <__aeabi_dsub>
 801855a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801855e:	f7e8 f86b 	bl	8000638 <__aeabi_dmul>
 8018562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018566:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801856a:	4610      	mov	r0, r2
 801856c:	4619      	mov	r1, r3
 801856e:	f7e8 f863 	bl	8000638 <__aeabi_dmul>
 8018572:	a37b      	add	r3, pc, #492	; (adr r3, 8018760 <__ieee754_pow+0x6d0>)
 8018574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018578:	4604      	mov	r4, r0
 801857a:	460d      	mov	r5, r1
 801857c:	f7e8 f85c 	bl	8000638 <__aeabi_dmul>
 8018580:	a379      	add	r3, pc, #484	; (adr r3, 8018768 <__ieee754_pow+0x6d8>)
 8018582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018586:	f7e7 fea1 	bl	80002cc <__adddf3>
 801858a:	4622      	mov	r2, r4
 801858c:	462b      	mov	r3, r5
 801858e:	f7e8 f853 	bl	8000638 <__aeabi_dmul>
 8018592:	a377      	add	r3, pc, #476	; (adr r3, 8018770 <__ieee754_pow+0x6e0>)
 8018594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018598:	f7e7 fe98 	bl	80002cc <__adddf3>
 801859c:	4622      	mov	r2, r4
 801859e:	462b      	mov	r3, r5
 80185a0:	f7e8 f84a 	bl	8000638 <__aeabi_dmul>
 80185a4:	a374      	add	r3, pc, #464	; (adr r3, 8018778 <__ieee754_pow+0x6e8>)
 80185a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185aa:	f7e7 fe8f 	bl	80002cc <__adddf3>
 80185ae:	4622      	mov	r2, r4
 80185b0:	462b      	mov	r3, r5
 80185b2:	f7e8 f841 	bl	8000638 <__aeabi_dmul>
 80185b6:	a372      	add	r3, pc, #456	; (adr r3, 8018780 <__ieee754_pow+0x6f0>)
 80185b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185bc:	f7e7 fe86 	bl	80002cc <__adddf3>
 80185c0:	4622      	mov	r2, r4
 80185c2:	462b      	mov	r3, r5
 80185c4:	f7e8 f838 	bl	8000638 <__aeabi_dmul>
 80185c8:	a36f      	add	r3, pc, #444	; (adr r3, 8018788 <__ieee754_pow+0x6f8>)
 80185ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ce:	f7e7 fe7d 	bl	80002cc <__adddf3>
 80185d2:	4622      	mov	r2, r4
 80185d4:	4606      	mov	r6, r0
 80185d6:	460f      	mov	r7, r1
 80185d8:	462b      	mov	r3, r5
 80185da:	4620      	mov	r0, r4
 80185dc:	4629      	mov	r1, r5
 80185de:	f7e8 f82b 	bl	8000638 <__aeabi_dmul>
 80185e2:	4602      	mov	r2, r0
 80185e4:	460b      	mov	r3, r1
 80185e6:	4630      	mov	r0, r6
 80185e8:	4639      	mov	r1, r7
 80185ea:	f7e8 f825 	bl	8000638 <__aeabi_dmul>
 80185ee:	4642      	mov	r2, r8
 80185f0:	4604      	mov	r4, r0
 80185f2:	460d      	mov	r5, r1
 80185f4:	464b      	mov	r3, r9
 80185f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80185fa:	f7e7 fe67 	bl	80002cc <__adddf3>
 80185fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018602:	f7e8 f819 	bl	8000638 <__aeabi_dmul>
 8018606:	4622      	mov	r2, r4
 8018608:	462b      	mov	r3, r5
 801860a:	f7e7 fe5f 	bl	80002cc <__adddf3>
 801860e:	4642      	mov	r2, r8
 8018610:	4606      	mov	r6, r0
 8018612:	460f      	mov	r7, r1
 8018614:	464b      	mov	r3, r9
 8018616:	4640      	mov	r0, r8
 8018618:	4649      	mov	r1, r9
 801861a:	f7e8 f80d 	bl	8000638 <__aeabi_dmul>
 801861e:	2200      	movs	r2, #0
 8018620:	4b68      	ldr	r3, [pc, #416]	; (80187c4 <__ieee754_pow+0x734>)
 8018622:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018626:	f7e7 fe51 	bl	80002cc <__adddf3>
 801862a:	4632      	mov	r2, r6
 801862c:	463b      	mov	r3, r7
 801862e:	f7e7 fe4d 	bl	80002cc <__adddf3>
 8018632:	9802      	ldr	r0, [sp, #8]
 8018634:	460d      	mov	r5, r1
 8018636:	4604      	mov	r4, r0
 8018638:	4602      	mov	r2, r0
 801863a:	460b      	mov	r3, r1
 801863c:	4640      	mov	r0, r8
 801863e:	4649      	mov	r1, r9
 8018640:	f7e7 fffa 	bl	8000638 <__aeabi_dmul>
 8018644:	2200      	movs	r2, #0
 8018646:	4680      	mov	r8, r0
 8018648:	4689      	mov	r9, r1
 801864a:	4b5e      	ldr	r3, [pc, #376]	; (80187c4 <__ieee754_pow+0x734>)
 801864c:	4620      	mov	r0, r4
 801864e:	4629      	mov	r1, r5
 8018650:	f7e7 fe3a 	bl	80002c8 <__aeabi_dsub>
 8018654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018658:	f7e7 fe36 	bl	80002c8 <__aeabi_dsub>
 801865c:	4602      	mov	r2, r0
 801865e:	460b      	mov	r3, r1
 8018660:	4630      	mov	r0, r6
 8018662:	4639      	mov	r1, r7
 8018664:	f7e7 fe30 	bl	80002c8 <__aeabi_dsub>
 8018668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801866c:	f7e7 ffe4 	bl	8000638 <__aeabi_dmul>
 8018670:	4622      	mov	r2, r4
 8018672:	4606      	mov	r6, r0
 8018674:	460f      	mov	r7, r1
 8018676:	462b      	mov	r3, r5
 8018678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801867c:	f7e7 ffdc 	bl	8000638 <__aeabi_dmul>
 8018680:	4602      	mov	r2, r0
 8018682:	460b      	mov	r3, r1
 8018684:	4630      	mov	r0, r6
 8018686:	4639      	mov	r1, r7
 8018688:	f7e7 fe20 	bl	80002cc <__adddf3>
 801868c:	4606      	mov	r6, r0
 801868e:	460f      	mov	r7, r1
 8018690:	4602      	mov	r2, r0
 8018692:	460b      	mov	r3, r1
 8018694:	4640      	mov	r0, r8
 8018696:	4649      	mov	r1, r9
 8018698:	f7e7 fe18 	bl	80002cc <__adddf3>
 801869c:	9802      	ldr	r0, [sp, #8]
 801869e:	a33c      	add	r3, pc, #240	; (adr r3, 8018790 <__ieee754_pow+0x700>)
 80186a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186a4:	4604      	mov	r4, r0
 80186a6:	460d      	mov	r5, r1
 80186a8:	f7e7 ffc6 	bl	8000638 <__aeabi_dmul>
 80186ac:	4642      	mov	r2, r8
 80186ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80186b2:	464b      	mov	r3, r9
 80186b4:	4620      	mov	r0, r4
 80186b6:	4629      	mov	r1, r5
 80186b8:	f7e7 fe06 	bl	80002c8 <__aeabi_dsub>
 80186bc:	4602      	mov	r2, r0
 80186be:	460b      	mov	r3, r1
 80186c0:	4630      	mov	r0, r6
 80186c2:	4639      	mov	r1, r7
 80186c4:	f7e7 fe00 	bl	80002c8 <__aeabi_dsub>
 80186c8:	a333      	add	r3, pc, #204	; (adr r3, 8018798 <__ieee754_pow+0x708>)
 80186ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ce:	f7e7 ffb3 	bl	8000638 <__aeabi_dmul>
 80186d2:	a333      	add	r3, pc, #204	; (adr r3, 80187a0 <__ieee754_pow+0x710>)
 80186d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d8:	4606      	mov	r6, r0
 80186da:	460f      	mov	r7, r1
 80186dc:	4620      	mov	r0, r4
 80186de:	4629      	mov	r1, r5
 80186e0:	f7e7 ffaa 	bl	8000638 <__aeabi_dmul>
 80186e4:	4602      	mov	r2, r0
 80186e6:	460b      	mov	r3, r1
 80186e8:	4630      	mov	r0, r6
 80186ea:	4639      	mov	r1, r7
 80186ec:	f7e7 fdee 	bl	80002cc <__adddf3>
 80186f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186f2:	4b35      	ldr	r3, [pc, #212]	; (80187c8 <__ieee754_pow+0x738>)
 80186f4:	4413      	add	r3, r2
 80186f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fa:	f7e7 fde7 	bl	80002cc <__adddf3>
 80186fe:	4604      	mov	r4, r0
 8018700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018702:	460d      	mov	r5, r1
 8018704:	f7e7 ff2e 	bl	8000564 <__aeabi_i2d>
 8018708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801870a:	4b30      	ldr	r3, [pc, #192]	; (80187cc <__ieee754_pow+0x73c>)
 801870c:	4413      	add	r3, r2
 801870e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018712:	4606      	mov	r6, r0
 8018714:	460f      	mov	r7, r1
 8018716:	4622      	mov	r2, r4
 8018718:	462b      	mov	r3, r5
 801871a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801871e:	f7e7 fdd5 	bl	80002cc <__adddf3>
 8018722:	4642      	mov	r2, r8
 8018724:	464b      	mov	r3, r9
 8018726:	f7e7 fdd1 	bl	80002cc <__adddf3>
 801872a:	4632      	mov	r2, r6
 801872c:	463b      	mov	r3, r7
 801872e:	f7e7 fdcd 	bl	80002cc <__adddf3>
 8018732:	9802      	ldr	r0, [sp, #8]
 8018734:	4632      	mov	r2, r6
 8018736:	463b      	mov	r3, r7
 8018738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801873c:	f7e7 fdc4 	bl	80002c8 <__aeabi_dsub>
 8018740:	4642      	mov	r2, r8
 8018742:	464b      	mov	r3, r9
 8018744:	f7e7 fdc0 	bl	80002c8 <__aeabi_dsub>
 8018748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801874c:	e607      	b.n	801835e <__ieee754_pow+0x2ce>
 801874e:	f04f 0a01 	mov.w	sl, #1
 8018752:	e6a5      	b.n	80184a0 <__ieee754_pow+0x410>
 8018754:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80187a8 <__ieee754_pow+0x718>
 8018758:	e613      	b.n	8018382 <__ieee754_pow+0x2f2>
 801875a:	bf00      	nop
 801875c:	f3af 8000 	nop.w
 8018760:	4a454eef 	.word	0x4a454eef
 8018764:	3fca7e28 	.word	0x3fca7e28
 8018768:	93c9db65 	.word	0x93c9db65
 801876c:	3fcd864a 	.word	0x3fcd864a
 8018770:	a91d4101 	.word	0xa91d4101
 8018774:	3fd17460 	.word	0x3fd17460
 8018778:	518f264d 	.word	0x518f264d
 801877c:	3fd55555 	.word	0x3fd55555
 8018780:	db6fabff 	.word	0xdb6fabff
 8018784:	3fdb6db6 	.word	0x3fdb6db6
 8018788:	33333303 	.word	0x33333303
 801878c:	3fe33333 	.word	0x3fe33333
 8018790:	e0000000 	.word	0xe0000000
 8018794:	3feec709 	.word	0x3feec709
 8018798:	dc3a03fd 	.word	0xdc3a03fd
 801879c:	3feec709 	.word	0x3feec709
 80187a0:	145b01f5 	.word	0x145b01f5
 80187a4:	be3e2fe0 	.word	0xbe3e2fe0
 80187a8:	00000000 	.word	0x00000000
 80187ac:	3ff00000 	.word	0x3ff00000
 80187b0:	43400000 	.word	0x43400000
 80187b4:	0003988e 	.word	0x0003988e
 80187b8:	000bb679 	.word	0x000bb679
 80187bc:	0801a0d0 	.word	0x0801a0d0
 80187c0:	3ff00000 	.word	0x3ff00000
 80187c4:	40080000 	.word	0x40080000
 80187c8:	0801a0f0 	.word	0x0801a0f0
 80187cc:	0801a0e0 	.word	0x0801a0e0
 80187d0:	a3b4      	add	r3, pc, #720	; (adr r3, 8018aa4 <__ieee754_pow+0xa14>)
 80187d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187d6:	4640      	mov	r0, r8
 80187d8:	4649      	mov	r1, r9
 80187da:	f7e7 fd77 	bl	80002cc <__adddf3>
 80187de:	4622      	mov	r2, r4
 80187e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80187e4:	462b      	mov	r3, r5
 80187e6:	4630      	mov	r0, r6
 80187e8:	4639      	mov	r1, r7
 80187ea:	f7e7 fd6d 	bl	80002c8 <__aeabi_dsub>
 80187ee:	4602      	mov	r2, r0
 80187f0:	460b      	mov	r3, r1
 80187f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80187f6:	f7e8 f9af 	bl	8000b58 <__aeabi_dcmpgt>
 80187fa:	2800      	cmp	r0, #0
 80187fc:	f47f adfe 	bne.w	80183fc <__ieee754_pow+0x36c>
 8018800:	4aa3      	ldr	r2, [pc, #652]	; (8018a90 <__ieee754_pow+0xa00>)
 8018802:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018806:	4293      	cmp	r3, r2
 8018808:	f340 810a 	ble.w	8018a20 <__ieee754_pow+0x990>
 801880c:	151b      	asrs	r3, r3, #20
 801880e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018812:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018816:	fa4a f303 	asr.w	r3, sl, r3
 801881a:	445b      	add	r3, fp
 801881c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018820:	4e9c      	ldr	r6, [pc, #624]	; (8018a94 <__ieee754_pow+0xa04>)
 8018822:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018826:	4116      	asrs	r6, r2
 8018828:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801882c:	2000      	movs	r0, #0
 801882e:	ea23 0106 	bic.w	r1, r3, r6
 8018832:	f1c2 0214 	rsb	r2, r2, #20
 8018836:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801883a:	fa4a fa02 	asr.w	sl, sl, r2
 801883e:	f1bb 0f00 	cmp.w	fp, #0
 8018842:	4602      	mov	r2, r0
 8018844:	460b      	mov	r3, r1
 8018846:	4620      	mov	r0, r4
 8018848:	4629      	mov	r1, r5
 801884a:	bfb8      	it	lt
 801884c:	f1ca 0a00 	rsblt	sl, sl, #0
 8018850:	f7e7 fd3a 	bl	80002c8 <__aeabi_dsub>
 8018854:	e9cd 0100 	strd	r0, r1, [sp]
 8018858:	4642      	mov	r2, r8
 801885a:	464b      	mov	r3, r9
 801885c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018860:	f7e7 fd34 	bl	80002cc <__adddf3>
 8018864:	2000      	movs	r0, #0
 8018866:	a378      	add	r3, pc, #480	; (adr r3, 8018a48 <__ieee754_pow+0x9b8>)
 8018868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886c:	4604      	mov	r4, r0
 801886e:	460d      	mov	r5, r1
 8018870:	f7e7 fee2 	bl	8000638 <__aeabi_dmul>
 8018874:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018878:	4606      	mov	r6, r0
 801887a:	460f      	mov	r7, r1
 801887c:	4620      	mov	r0, r4
 801887e:	4629      	mov	r1, r5
 8018880:	f7e7 fd22 	bl	80002c8 <__aeabi_dsub>
 8018884:	4602      	mov	r2, r0
 8018886:	460b      	mov	r3, r1
 8018888:	4640      	mov	r0, r8
 801888a:	4649      	mov	r1, r9
 801888c:	f7e7 fd1c 	bl	80002c8 <__aeabi_dsub>
 8018890:	a36f      	add	r3, pc, #444	; (adr r3, 8018a50 <__ieee754_pow+0x9c0>)
 8018892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018896:	f7e7 fecf 	bl	8000638 <__aeabi_dmul>
 801889a:	a36f      	add	r3, pc, #444	; (adr r3, 8018a58 <__ieee754_pow+0x9c8>)
 801889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188a0:	4680      	mov	r8, r0
 80188a2:	4689      	mov	r9, r1
 80188a4:	4620      	mov	r0, r4
 80188a6:	4629      	mov	r1, r5
 80188a8:	f7e7 fec6 	bl	8000638 <__aeabi_dmul>
 80188ac:	4602      	mov	r2, r0
 80188ae:	460b      	mov	r3, r1
 80188b0:	4640      	mov	r0, r8
 80188b2:	4649      	mov	r1, r9
 80188b4:	f7e7 fd0a 	bl	80002cc <__adddf3>
 80188b8:	4604      	mov	r4, r0
 80188ba:	460d      	mov	r5, r1
 80188bc:	4602      	mov	r2, r0
 80188be:	460b      	mov	r3, r1
 80188c0:	4630      	mov	r0, r6
 80188c2:	4639      	mov	r1, r7
 80188c4:	f7e7 fd02 	bl	80002cc <__adddf3>
 80188c8:	4632      	mov	r2, r6
 80188ca:	463b      	mov	r3, r7
 80188cc:	4680      	mov	r8, r0
 80188ce:	4689      	mov	r9, r1
 80188d0:	f7e7 fcfa 	bl	80002c8 <__aeabi_dsub>
 80188d4:	4602      	mov	r2, r0
 80188d6:	460b      	mov	r3, r1
 80188d8:	4620      	mov	r0, r4
 80188da:	4629      	mov	r1, r5
 80188dc:	f7e7 fcf4 	bl	80002c8 <__aeabi_dsub>
 80188e0:	4642      	mov	r2, r8
 80188e2:	4606      	mov	r6, r0
 80188e4:	460f      	mov	r7, r1
 80188e6:	464b      	mov	r3, r9
 80188e8:	4640      	mov	r0, r8
 80188ea:	4649      	mov	r1, r9
 80188ec:	f7e7 fea4 	bl	8000638 <__aeabi_dmul>
 80188f0:	a35b      	add	r3, pc, #364	; (adr r3, 8018a60 <__ieee754_pow+0x9d0>)
 80188f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f6:	4604      	mov	r4, r0
 80188f8:	460d      	mov	r5, r1
 80188fa:	f7e7 fe9d 	bl	8000638 <__aeabi_dmul>
 80188fe:	a35a      	add	r3, pc, #360	; (adr r3, 8018a68 <__ieee754_pow+0x9d8>)
 8018900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018904:	f7e7 fce0 	bl	80002c8 <__aeabi_dsub>
 8018908:	4622      	mov	r2, r4
 801890a:	462b      	mov	r3, r5
 801890c:	f7e7 fe94 	bl	8000638 <__aeabi_dmul>
 8018910:	a357      	add	r3, pc, #348	; (adr r3, 8018a70 <__ieee754_pow+0x9e0>)
 8018912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018916:	f7e7 fcd9 	bl	80002cc <__adddf3>
 801891a:	4622      	mov	r2, r4
 801891c:	462b      	mov	r3, r5
 801891e:	f7e7 fe8b 	bl	8000638 <__aeabi_dmul>
 8018922:	a355      	add	r3, pc, #340	; (adr r3, 8018a78 <__ieee754_pow+0x9e8>)
 8018924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018928:	f7e7 fcce 	bl	80002c8 <__aeabi_dsub>
 801892c:	4622      	mov	r2, r4
 801892e:	462b      	mov	r3, r5
 8018930:	f7e7 fe82 	bl	8000638 <__aeabi_dmul>
 8018934:	a352      	add	r3, pc, #328	; (adr r3, 8018a80 <__ieee754_pow+0x9f0>)
 8018936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893a:	f7e7 fcc7 	bl	80002cc <__adddf3>
 801893e:	4622      	mov	r2, r4
 8018940:	462b      	mov	r3, r5
 8018942:	f7e7 fe79 	bl	8000638 <__aeabi_dmul>
 8018946:	4602      	mov	r2, r0
 8018948:	460b      	mov	r3, r1
 801894a:	4640      	mov	r0, r8
 801894c:	4649      	mov	r1, r9
 801894e:	f7e7 fcbb 	bl	80002c8 <__aeabi_dsub>
 8018952:	4604      	mov	r4, r0
 8018954:	460d      	mov	r5, r1
 8018956:	4602      	mov	r2, r0
 8018958:	460b      	mov	r3, r1
 801895a:	4640      	mov	r0, r8
 801895c:	4649      	mov	r1, r9
 801895e:	f7e7 fe6b 	bl	8000638 <__aeabi_dmul>
 8018962:	2200      	movs	r2, #0
 8018964:	e9cd 0100 	strd	r0, r1, [sp]
 8018968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801896c:	4620      	mov	r0, r4
 801896e:	4629      	mov	r1, r5
 8018970:	f7e7 fcaa 	bl	80002c8 <__aeabi_dsub>
 8018974:	4602      	mov	r2, r0
 8018976:	460b      	mov	r3, r1
 8018978:	e9dd 0100 	ldrd	r0, r1, [sp]
 801897c:	f7e7 ff86 	bl	800088c <__aeabi_ddiv>
 8018980:	4632      	mov	r2, r6
 8018982:	4604      	mov	r4, r0
 8018984:	460d      	mov	r5, r1
 8018986:	463b      	mov	r3, r7
 8018988:	4640      	mov	r0, r8
 801898a:	4649      	mov	r1, r9
 801898c:	f7e7 fe54 	bl	8000638 <__aeabi_dmul>
 8018990:	4632      	mov	r2, r6
 8018992:	463b      	mov	r3, r7
 8018994:	f7e7 fc9a 	bl	80002cc <__adddf3>
 8018998:	4602      	mov	r2, r0
 801899a:	460b      	mov	r3, r1
 801899c:	4620      	mov	r0, r4
 801899e:	4629      	mov	r1, r5
 80189a0:	f7e7 fc92 	bl	80002c8 <__aeabi_dsub>
 80189a4:	4642      	mov	r2, r8
 80189a6:	464b      	mov	r3, r9
 80189a8:	f7e7 fc8e 	bl	80002c8 <__aeabi_dsub>
 80189ac:	4602      	mov	r2, r0
 80189ae:	460b      	mov	r3, r1
 80189b0:	2000      	movs	r0, #0
 80189b2:	4939      	ldr	r1, [pc, #228]	; (8018a98 <__ieee754_pow+0xa08>)
 80189b4:	f7e7 fc88 	bl	80002c8 <__aeabi_dsub>
 80189b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80189bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80189c0:	4602      	mov	r2, r0
 80189c2:	460b      	mov	r3, r1
 80189c4:	da2f      	bge.n	8018a26 <__ieee754_pow+0x996>
 80189c6:	4650      	mov	r0, sl
 80189c8:	ec43 2b10 	vmov	d0, r2, r3
 80189cc:	f000 fc80 	bl	80192d0 <scalbn>
 80189d0:	ec51 0b10 	vmov	r0, r1, d0
 80189d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80189d8:	f7ff bbf1 	b.w	80181be <__ieee754_pow+0x12e>
 80189dc:	4b2f      	ldr	r3, [pc, #188]	; (8018a9c <__ieee754_pow+0xa0c>)
 80189de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80189e2:	429e      	cmp	r6, r3
 80189e4:	f77f af0c 	ble.w	8018800 <__ieee754_pow+0x770>
 80189e8:	4b2d      	ldr	r3, [pc, #180]	; (8018aa0 <__ieee754_pow+0xa10>)
 80189ea:	440b      	add	r3, r1
 80189ec:	4303      	orrs	r3, r0
 80189ee:	d00b      	beq.n	8018a08 <__ieee754_pow+0x978>
 80189f0:	a325      	add	r3, pc, #148	; (adr r3, 8018a88 <__ieee754_pow+0x9f8>)
 80189f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80189fa:	f7e7 fe1d 	bl	8000638 <__aeabi_dmul>
 80189fe:	a322      	add	r3, pc, #136	; (adr r3, 8018a88 <__ieee754_pow+0x9f8>)
 8018a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a04:	f7ff bbdb 	b.w	80181be <__ieee754_pow+0x12e>
 8018a08:	4622      	mov	r2, r4
 8018a0a:	462b      	mov	r3, r5
 8018a0c:	f7e7 fc5c 	bl	80002c8 <__aeabi_dsub>
 8018a10:	4642      	mov	r2, r8
 8018a12:	464b      	mov	r3, r9
 8018a14:	f7e8 f896 	bl	8000b44 <__aeabi_dcmpge>
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	f43f aef1 	beq.w	8018800 <__ieee754_pow+0x770>
 8018a1e:	e7e7      	b.n	80189f0 <__ieee754_pow+0x960>
 8018a20:	f04f 0a00 	mov.w	sl, #0
 8018a24:	e718      	b.n	8018858 <__ieee754_pow+0x7c8>
 8018a26:	4621      	mov	r1, r4
 8018a28:	e7d4      	b.n	80189d4 <__ieee754_pow+0x944>
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	491a      	ldr	r1, [pc, #104]	; (8018a98 <__ieee754_pow+0xa08>)
 8018a2e:	f7ff bb8f 	b.w	8018150 <__ieee754_pow+0xc0>
 8018a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a36:	f7ff bb8b 	b.w	8018150 <__ieee754_pow+0xc0>
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	4639      	mov	r1, r7
 8018a3e:	f7ff bb87 	b.w	8018150 <__ieee754_pow+0xc0>
 8018a42:	4693      	mov	fp, r2
 8018a44:	f7ff bb98 	b.w	8018178 <__ieee754_pow+0xe8>
 8018a48:	00000000 	.word	0x00000000
 8018a4c:	3fe62e43 	.word	0x3fe62e43
 8018a50:	fefa39ef 	.word	0xfefa39ef
 8018a54:	3fe62e42 	.word	0x3fe62e42
 8018a58:	0ca86c39 	.word	0x0ca86c39
 8018a5c:	be205c61 	.word	0xbe205c61
 8018a60:	72bea4d0 	.word	0x72bea4d0
 8018a64:	3e663769 	.word	0x3e663769
 8018a68:	c5d26bf1 	.word	0xc5d26bf1
 8018a6c:	3ebbbd41 	.word	0x3ebbbd41
 8018a70:	af25de2c 	.word	0xaf25de2c
 8018a74:	3f11566a 	.word	0x3f11566a
 8018a78:	16bebd93 	.word	0x16bebd93
 8018a7c:	3f66c16c 	.word	0x3f66c16c
 8018a80:	5555553e 	.word	0x5555553e
 8018a84:	3fc55555 	.word	0x3fc55555
 8018a88:	c2f8f359 	.word	0xc2f8f359
 8018a8c:	01a56e1f 	.word	0x01a56e1f
 8018a90:	3fe00000 	.word	0x3fe00000
 8018a94:	000fffff 	.word	0x000fffff
 8018a98:	3ff00000 	.word	0x3ff00000
 8018a9c:	4090cbff 	.word	0x4090cbff
 8018aa0:	3f6f3400 	.word	0x3f6f3400
 8018aa4:	652b82fe 	.word	0x652b82fe
 8018aa8:	3c971547 	.word	0x3c971547

08018aac <__ieee754_sqrt>:
 8018aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ab0:	4955      	ldr	r1, [pc, #340]	; (8018c08 <__ieee754_sqrt+0x15c>)
 8018ab2:	ec55 4b10 	vmov	r4, r5, d0
 8018ab6:	43a9      	bics	r1, r5
 8018ab8:	462b      	mov	r3, r5
 8018aba:	462a      	mov	r2, r5
 8018abc:	d112      	bne.n	8018ae4 <__ieee754_sqrt+0x38>
 8018abe:	ee10 2a10 	vmov	r2, s0
 8018ac2:	ee10 0a10 	vmov	r0, s0
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	f7e7 fdb6 	bl	8000638 <__aeabi_dmul>
 8018acc:	4602      	mov	r2, r0
 8018ace:	460b      	mov	r3, r1
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	4629      	mov	r1, r5
 8018ad4:	f7e7 fbfa 	bl	80002cc <__adddf3>
 8018ad8:	4604      	mov	r4, r0
 8018ada:	460d      	mov	r5, r1
 8018adc:	ec45 4b10 	vmov	d0, r4, r5
 8018ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ae4:	2d00      	cmp	r5, #0
 8018ae6:	ee10 0a10 	vmov	r0, s0
 8018aea:	4621      	mov	r1, r4
 8018aec:	dc0f      	bgt.n	8018b0e <__ieee754_sqrt+0x62>
 8018aee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018af2:	4330      	orrs	r0, r6
 8018af4:	d0f2      	beq.n	8018adc <__ieee754_sqrt+0x30>
 8018af6:	b155      	cbz	r5, 8018b0e <__ieee754_sqrt+0x62>
 8018af8:	ee10 2a10 	vmov	r2, s0
 8018afc:	4620      	mov	r0, r4
 8018afe:	4629      	mov	r1, r5
 8018b00:	f7e7 fbe2 	bl	80002c8 <__aeabi_dsub>
 8018b04:	4602      	mov	r2, r0
 8018b06:	460b      	mov	r3, r1
 8018b08:	f7e7 fec0 	bl	800088c <__aeabi_ddiv>
 8018b0c:	e7e4      	b.n	8018ad8 <__ieee754_sqrt+0x2c>
 8018b0e:	151b      	asrs	r3, r3, #20
 8018b10:	d073      	beq.n	8018bfa <__ieee754_sqrt+0x14e>
 8018b12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018b16:	07dd      	lsls	r5, r3, #31
 8018b18:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018b1c:	bf48      	it	mi
 8018b1e:	0fc8      	lsrmi	r0, r1, #31
 8018b20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018b24:	bf44      	itt	mi
 8018b26:	0049      	lslmi	r1, r1, #1
 8018b28:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8018b2c:	2500      	movs	r5, #0
 8018b2e:	1058      	asrs	r0, r3, #1
 8018b30:	0fcb      	lsrs	r3, r1, #31
 8018b32:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018b36:	0049      	lsls	r1, r1, #1
 8018b38:	2316      	movs	r3, #22
 8018b3a:	462c      	mov	r4, r5
 8018b3c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018b40:	19a7      	adds	r7, r4, r6
 8018b42:	4297      	cmp	r7, r2
 8018b44:	bfde      	ittt	le
 8018b46:	19bc      	addle	r4, r7, r6
 8018b48:	1bd2      	suble	r2, r2, r7
 8018b4a:	19ad      	addle	r5, r5, r6
 8018b4c:	0fcf      	lsrs	r7, r1, #31
 8018b4e:	3b01      	subs	r3, #1
 8018b50:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018b54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018b58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018b5c:	d1f0      	bne.n	8018b40 <__ieee754_sqrt+0x94>
 8018b5e:	f04f 0c20 	mov.w	ip, #32
 8018b62:	469e      	mov	lr, r3
 8018b64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018b68:	42a2      	cmp	r2, r4
 8018b6a:	eb06 070e 	add.w	r7, r6, lr
 8018b6e:	dc02      	bgt.n	8018b76 <__ieee754_sqrt+0xca>
 8018b70:	d112      	bne.n	8018b98 <__ieee754_sqrt+0xec>
 8018b72:	428f      	cmp	r7, r1
 8018b74:	d810      	bhi.n	8018b98 <__ieee754_sqrt+0xec>
 8018b76:	2f00      	cmp	r7, #0
 8018b78:	eb07 0e06 	add.w	lr, r7, r6
 8018b7c:	da42      	bge.n	8018c04 <__ieee754_sqrt+0x158>
 8018b7e:	f1be 0f00 	cmp.w	lr, #0
 8018b82:	db3f      	blt.n	8018c04 <__ieee754_sqrt+0x158>
 8018b84:	f104 0801 	add.w	r8, r4, #1
 8018b88:	1b12      	subs	r2, r2, r4
 8018b8a:	428f      	cmp	r7, r1
 8018b8c:	bf88      	it	hi
 8018b8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018b92:	1bc9      	subs	r1, r1, r7
 8018b94:	4433      	add	r3, r6
 8018b96:	4644      	mov	r4, r8
 8018b98:	0052      	lsls	r2, r2, #1
 8018b9a:	f1bc 0c01 	subs.w	ip, ip, #1
 8018b9e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8018ba2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018ba6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018baa:	d1dd      	bne.n	8018b68 <__ieee754_sqrt+0xbc>
 8018bac:	430a      	orrs	r2, r1
 8018bae:	d006      	beq.n	8018bbe <__ieee754_sqrt+0x112>
 8018bb0:	1c5c      	adds	r4, r3, #1
 8018bb2:	bf13      	iteet	ne
 8018bb4:	3301      	addne	r3, #1
 8018bb6:	3501      	addeq	r5, #1
 8018bb8:	4663      	moveq	r3, ip
 8018bba:	f023 0301 	bicne.w	r3, r3, #1
 8018bbe:	106a      	asrs	r2, r5, #1
 8018bc0:	085b      	lsrs	r3, r3, #1
 8018bc2:	07e9      	lsls	r1, r5, #31
 8018bc4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018bc8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018bcc:	bf48      	it	mi
 8018bce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018bd2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018bd6:	461c      	mov	r4, r3
 8018bd8:	e780      	b.n	8018adc <__ieee754_sqrt+0x30>
 8018bda:	0aca      	lsrs	r2, r1, #11
 8018bdc:	3815      	subs	r0, #21
 8018bde:	0549      	lsls	r1, r1, #21
 8018be0:	2a00      	cmp	r2, #0
 8018be2:	d0fa      	beq.n	8018bda <__ieee754_sqrt+0x12e>
 8018be4:	02d6      	lsls	r6, r2, #11
 8018be6:	d50a      	bpl.n	8018bfe <__ieee754_sqrt+0x152>
 8018be8:	f1c3 0420 	rsb	r4, r3, #32
 8018bec:	fa21 f404 	lsr.w	r4, r1, r4
 8018bf0:	1e5d      	subs	r5, r3, #1
 8018bf2:	4099      	lsls	r1, r3
 8018bf4:	4322      	orrs	r2, r4
 8018bf6:	1b43      	subs	r3, r0, r5
 8018bf8:	e78b      	b.n	8018b12 <__ieee754_sqrt+0x66>
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	e7f0      	b.n	8018be0 <__ieee754_sqrt+0x134>
 8018bfe:	0052      	lsls	r2, r2, #1
 8018c00:	3301      	adds	r3, #1
 8018c02:	e7ef      	b.n	8018be4 <__ieee754_sqrt+0x138>
 8018c04:	46a0      	mov	r8, r4
 8018c06:	e7bf      	b.n	8018b88 <__ieee754_sqrt+0xdc>
 8018c08:	7ff00000 	.word	0x7ff00000

08018c0c <__ieee754_powf>:
 8018c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c10:	ee10 5a90 	vmov	r5, s1
 8018c14:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8018c18:	ed2d 8b02 	vpush	{d8}
 8018c1c:	eeb0 8a40 	vmov.f32	s16, s0
 8018c20:	eef0 8a60 	vmov.f32	s17, s1
 8018c24:	f000 8293 	beq.w	801914e <__ieee754_powf+0x542>
 8018c28:	ee10 8a10 	vmov	r8, s0
 8018c2c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8018c30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018c34:	dc06      	bgt.n	8018c44 <__ieee754_powf+0x38>
 8018c36:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018c3a:	dd0a      	ble.n	8018c52 <__ieee754_powf+0x46>
 8018c3c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018c40:	f000 8285 	beq.w	801914e <__ieee754_powf+0x542>
 8018c44:	ecbd 8b02 	vpop	{d8}
 8018c48:	48d9      	ldr	r0, [pc, #868]	; (8018fb0 <__ieee754_powf+0x3a4>)
 8018c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c4e:	f000 bbc7 	b.w	80193e0 <nanf>
 8018c52:	f1b8 0f00 	cmp.w	r8, #0
 8018c56:	da1d      	bge.n	8018c94 <__ieee754_powf+0x88>
 8018c58:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8018c5c:	da2c      	bge.n	8018cb8 <__ieee754_powf+0xac>
 8018c5e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018c62:	db30      	blt.n	8018cc6 <__ieee754_powf+0xba>
 8018c64:	15fb      	asrs	r3, r7, #23
 8018c66:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018c6a:	fa47 f603 	asr.w	r6, r7, r3
 8018c6e:	fa06 f303 	lsl.w	r3, r6, r3
 8018c72:	42bb      	cmp	r3, r7
 8018c74:	d127      	bne.n	8018cc6 <__ieee754_powf+0xba>
 8018c76:	f006 0601 	and.w	r6, r6, #1
 8018c7a:	f1c6 0602 	rsb	r6, r6, #2
 8018c7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018c82:	d122      	bne.n	8018cca <__ieee754_powf+0xbe>
 8018c84:	2d00      	cmp	r5, #0
 8018c86:	f280 8268 	bge.w	801915a <__ieee754_powf+0x54e>
 8018c8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c8e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018c92:	e00d      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018c94:	2600      	movs	r6, #0
 8018c96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018c9a:	d1f0      	bne.n	8018c7e <__ieee754_powf+0x72>
 8018c9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018ca0:	f000 8255 	beq.w	801914e <__ieee754_powf+0x542>
 8018ca4:	dd0a      	ble.n	8018cbc <__ieee754_powf+0xb0>
 8018ca6:	2d00      	cmp	r5, #0
 8018ca8:	f280 8254 	bge.w	8019154 <__ieee754_powf+0x548>
 8018cac:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8018fb4 <__ieee754_powf+0x3a8>
 8018cb0:	ecbd 8b02 	vpop	{d8}
 8018cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cb8:	2602      	movs	r6, #2
 8018cba:	e7ec      	b.n	8018c96 <__ieee754_powf+0x8a>
 8018cbc:	2d00      	cmp	r5, #0
 8018cbe:	daf5      	bge.n	8018cac <__ieee754_powf+0xa0>
 8018cc0:	eeb1 0a68 	vneg.f32	s0, s17
 8018cc4:	e7f4      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018cc6:	2600      	movs	r6, #0
 8018cc8:	e7d9      	b.n	8018c7e <__ieee754_powf+0x72>
 8018cca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8018cce:	d102      	bne.n	8018cd6 <__ieee754_powf+0xca>
 8018cd0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018cd4:	e7ec      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018cd6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8018cda:	eeb0 0a48 	vmov.f32	s0, s16
 8018cde:	d108      	bne.n	8018cf2 <__ieee754_powf+0xe6>
 8018ce0:	f1b8 0f00 	cmp.w	r8, #0
 8018ce4:	db05      	blt.n	8018cf2 <__ieee754_powf+0xe6>
 8018ce6:	ecbd 8b02 	vpop	{d8}
 8018cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cee:	f000 ba4d 	b.w	801918c <__ieee754_sqrtf>
 8018cf2:	f000 fb63 	bl	80193bc <fabsf>
 8018cf6:	b124      	cbz	r4, 8018d02 <__ieee754_powf+0xf6>
 8018cf8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8018cfc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018d00:	d117      	bne.n	8018d32 <__ieee754_powf+0x126>
 8018d02:	2d00      	cmp	r5, #0
 8018d04:	bfbc      	itt	lt
 8018d06:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018d0a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018d0e:	f1b8 0f00 	cmp.w	r8, #0
 8018d12:	dacd      	bge.n	8018cb0 <__ieee754_powf+0xa4>
 8018d14:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8018d18:	ea54 0306 	orrs.w	r3, r4, r6
 8018d1c:	d104      	bne.n	8018d28 <__ieee754_powf+0x11c>
 8018d1e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d22:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018d26:	e7c3      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018d28:	2e01      	cmp	r6, #1
 8018d2a:	d1c1      	bne.n	8018cb0 <__ieee754_powf+0xa4>
 8018d2c:	eeb1 0a40 	vneg.f32	s0, s0
 8018d30:	e7be      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018d32:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8018d36:	3801      	subs	r0, #1
 8018d38:	ea56 0300 	orrs.w	r3, r6, r0
 8018d3c:	d104      	bne.n	8018d48 <__ieee754_powf+0x13c>
 8018d3e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018d42:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018d46:	e7b3      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018d48:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8018d4c:	dd6d      	ble.n	8018e2a <__ieee754_powf+0x21e>
 8018d4e:	4b9a      	ldr	r3, [pc, #616]	; (8018fb8 <__ieee754_powf+0x3ac>)
 8018d50:	429c      	cmp	r4, r3
 8018d52:	dc06      	bgt.n	8018d62 <__ieee754_powf+0x156>
 8018d54:	2d00      	cmp	r5, #0
 8018d56:	daa9      	bge.n	8018cac <__ieee754_powf+0xa0>
 8018d58:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8018fbc <__ieee754_powf+0x3b0>
 8018d5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018d60:	e7a6      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018d62:	4b97      	ldr	r3, [pc, #604]	; (8018fc0 <__ieee754_powf+0x3b4>)
 8018d64:	429c      	cmp	r4, r3
 8018d66:	dd02      	ble.n	8018d6e <__ieee754_powf+0x162>
 8018d68:	2d00      	cmp	r5, #0
 8018d6a:	dcf5      	bgt.n	8018d58 <__ieee754_powf+0x14c>
 8018d6c:	e79e      	b.n	8018cac <__ieee754_powf+0xa0>
 8018d6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018d72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d76:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8018fc4 <__ieee754_powf+0x3b8>
 8018d7a:	eef1 6a40 	vneg.f32	s13, s0
 8018d7e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018d82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018d86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018d8a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8018d8e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8018d92:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8018fc8 <__ieee754_powf+0x3bc>
 8018d96:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8018d9a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8018fcc <__ieee754_powf+0x3c0>
 8018d9e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8018da2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018da6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018fd0 <__ieee754_powf+0x3c4>
 8018daa:	eeb0 6a67 	vmov.f32	s12, s15
 8018dae:	eea0 6a07 	vfma.f32	s12, s0, s14
 8018db2:	ee16 3a10 	vmov	r3, s12
 8018db6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018dba:	f023 030f 	bic.w	r3, r3, #15
 8018dbe:	ee00 3a90 	vmov	s1, r3
 8018dc2:	eee6 0a87 	vfma.f32	s1, s13, s14
 8018dc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018dca:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8018dce:	f025 050f 	bic.w	r5, r5, #15
 8018dd2:	ee07 5a10 	vmov	s14, r5
 8018dd6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018dda:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018dde:	ee07 3a90 	vmov	s15, r3
 8018de2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018de6:	3e01      	subs	r6, #1
 8018de8:	ea56 0200 	orrs.w	r2, r6, r0
 8018dec:	ee07 5a10 	vmov	s14, r5
 8018df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018df4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018df8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018dfc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018e00:	ee17 4a10 	vmov	r4, s14
 8018e04:	bf08      	it	eq
 8018e06:	eeb0 8a40 	vmoveq.f32	s16, s0
 8018e0a:	2c00      	cmp	r4, #0
 8018e0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018e10:	f340 8184 	ble.w	801911c <__ieee754_powf+0x510>
 8018e14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018e18:	f340 80fc 	ble.w	8019014 <__ieee754_powf+0x408>
 8018e1c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8018fbc <__ieee754_powf+0x3b0>
 8018e20:	ee28 0a27 	vmul.f32	s0, s16, s15
 8018e24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018e28:	e742      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8018e2a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8018e2e:	bfbf      	itttt	lt
 8018e30:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8018fd4 <__ieee754_powf+0x3c8>
 8018e34:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018e38:	f06f 0217 	mvnlt.w	r2, #23
 8018e3c:	ee17 4a90 	vmovlt	r4, s15
 8018e40:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8018e44:	bfa8      	it	ge
 8018e46:	2200      	movge	r2, #0
 8018e48:	3b7f      	subs	r3, #127	; 0x7f
 8018e4a:	4413      	add	r3, r2
 8018e4c:	4a62      	ldr	r2, [pc, #392]	; (8018fd8 <__ieee754_powf+0x3cc>)
 8018e4e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8018e52:	4294      	cmp	r4, r2
 8018e54:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8018e58:	dd06      	ble.n	8018e68 <__ieee754_powf+0x25c>
 8018e5a:	4a60      	ldr	r2, [pc, #384]	; (8018fdc <__ieee754_powf+0x3d0>)
 8018e5c:	4294      	cmp	r4, r2
 8018e5e:	f340 80a5 	ble.w	8018fac <__ieee754_powf+0x3a0>
 8018e62:	3301      	adds	r3, #1
 8018e64:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018e68:	2400      	movs	r4, #0
 8018e6a:	4a5d      	ldr	r2, [pc, #372]	; (8018fe0 <__ieee754_powf+0x3d4>)
 8018e6c:	00a7      	lsls	r7, r4, #2
 8018e6e:	443a      	add	r2, r7
 8018e70:	ee07 1a90 	vmov	s15, r1
 8018e74:	ed92 7a00 	vldr	s14, [r2]
 8018e78:	4a5a      	ldr	r2, [pc, #360]	; (8018fe4 <__ieee754_powf+0x3d8>)
 8018e7a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018e7e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8018e82:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018e86:	1049      	asrs	r1, r1, #1
 8018e88:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018e8c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018e90:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8018e94:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8018e98:	ee06 1a10 	vmov	s12, r1
 8018e9c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8018ea0:	ee14 ca90 	vmov	ip, s9
 8018ea4:	ea02 0c0c 	and.w	ip, r2, ip
 8018ea8:	ee05 ca10 	vmov	s10, ip
 8018eac:	eeb1 4a45 	vneg.f32	s8, s10
 8018eb0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8018eb4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8018eb8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018fe8 <__ieee754_powf+0x3dc>
 8018ebc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8018ec0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8018ec4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8018ec8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8018ecc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8018ed0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8018fec <__ieee754_powf+0x3e0>
 8018ed4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8018ed8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8018ff0 <__ieee754_powf+0x3e4>
 8018edc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018ee0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018fc4 <__ieee754_powf+0x3b8>
 8018ee4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018ee8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8018ff4 <__ieee754_powf+0x3e8>
 8018eec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018ef0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018ff8 <__ieee754_powf+0x3ec>
 8018ef4:	ee75 6a24 	vadd.f32	s13, s10, s9
 8018ef8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018efc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018f00:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8018f04:	eef0 7a65 	vmov.f32	s15, s11
 8018f08:	eee3 6a87 	vfma.f32	s13, s7, s14
 8018f0c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8018f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f14:	ee17 1a90 	vmov	r1, s15
 8018f18:	4011      	ands	r1, r2
 8018f1a:	ee07 1a90 	vmov	s15, r1
 8018f1e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8018f22:	eddf 5a36 	vldr	s11, [pc, #216]	; 8018ffc <__ieee754_powf+0x3f0>
 8018f26:	eea4 7a05 	vfma.f32	s14, s8, s10
 8018f2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018f2e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018f32:	eea7 7a86 	vfma.f32	s14, s15, s12
 8018f36:	eeb0 6a47 	vmov.f32	s12, s14
 8018f3a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8018f3e:	ee16 1a10 	vmov	r1, s12
 8018f42:	4011      	ands	r1, r2
 8018f44:	ee06 1a90 	vmov	s13, r1
 8018f48:	eee4 6a27 	vfma.f32	s13, s8, s15
 8018f4c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019000 <__ieee754_powf+0x3f4>
 8018f50:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018f54:	ee06 1a10 	vmov	s12, r1
 8018f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f5c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019004 <__ieee754_powf+0x3f8>
 8018f60:	4929      	ldr	r1, [pc, #164]	; (8019008 <__ieee754_powf+0x3fc>)
 8018f62:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018f66:	4439      	add	r1, r7
 8018f68:	edd1 7a00 	vldr	s15, [r1]
 8018f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f70:	ee07 3a90 	vmov	s15, r3
 8018f74:	eef0 0a47 	vmov.f32	s1, s14
 8018f78:	4b24      	ldr	r3, [pc, #144]	; (801900c <__ieee754_powf+0x400>)
 8018f7a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8018f7e:	443b      	add	r3, r7
 8018f80:	ed93 5a00 	vldr	s10, [r3]
 8018f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018f88:	ee70 0a85 	vadd.f32	s1, s1, s10
 8018f8c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8018f90:	ee17 3a90 	vmov	r3, s15
 8018f94:	4013      	ands	r3, r2
 8018f96:	ee07 3a90 	vmov	s15, r3
 8018f9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018f9e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018fa2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8018fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018faa:	e70e      	b.n	8018dca <__ieee754_powf+0x1be>
 8018fac:	2401      	movs	r4, #1
 8018fae:	e75c      	b.n	8018e6a <__ieee754_powf+0x25e>
 8018fb0:	0801a08d 	.word	0x0801a08d
 8018fb4:	00000000 	.word	0x00000000
 8018fb8:	3f7ffff7 	.word	0x3f7ffff7
 8018fbc:	7149f2ca 	.word	0x7149f2ca
 8018fc0:	3f800007 	.word	0x3f800007
 8018fc4:	3eaaaaab 	.word	0x3eaaaaab
 8018fc8:	36eca570 	.word	0x36eca570
 8018fcc:	3fb8aa3b 	.word	0x3fb8aa3b
 8018fd0:	3fb8aa00 	.word	0x3fb8aa00
 8018fd4:	4b800000 	.word	0x4b800000
 8018fd8:	001cc471 	.word	0x001cc471
 8018fdc:	005db3d6 	.word	0x005db3d6
 8018fe0:	0801a100 	.word	0x0801a100
 8018fe4:	fffff000 	.word	0xfffff000
 8018fe8:	3e6c3255 	.word	0x3e6c3255
 8018fec:	3e53f142 	.word	0x3e53f142
 8018ff0:	3e8ba305 	.word	0x3e8ba305
 8018ff4:	3edb6db7 	.word	0x3edb6db7
 8018ff8:	3f19999a 	.word	0x3f19999a
 8018ffc:	3f763800 	.word	0x3f763800
 8019000:	3f76384f 	.word	0x3f76384f
 8019004:	369dc3a0 	.word	0x369dc3a0
 8019008:	0801a110 	.word	0x0801a110
 801900c:	0801a108 	.word	0x0801a108
 8019010:	3338aa3c 	.word	0x3338aa3c
 8019014:	f040 8092 	bne.w	801913c <__ieee754_powf+0x530>
 8019018:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019010 <__ieee754_powf+0x404>
 801901c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019020:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019024:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801902c:	f73f aef6 	bgt.w	8018e1c <__ieee754_powf+0x210>
 8019030:	15db      	asrs	r3, r3, #23
 8019032:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019036:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801903a:	4103      	asrs	r3, r0
 801903c:	4423      	add	r3, r4
 801903e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019042:	4947      	ldr	r1, [pc, #284]	; (8019160 <__ieee754_powf+0x554>)
 8019044:	3a7f      	subs	r2, #127	; 0x7f
 8019046:	4111      	asrs	r1, r2
 8019048:	ea23 0101 	bic.w	r1, r3, r1
 801904c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019050:	ee07 1a10 	vmov	s14, r1
 8019054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019058:	f1c2 0217 	rsb	r2, r2, #23
 801905c:	4110      	asrs	r0, r2
 801905e:	2c00      	cmp	r4, #0
 8019060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019064:	bfb8      	it	lt
 8019066:	4240      	neglt	r0, r0
 8019068:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801906c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019164 <__ieee754_powf+0x558>
 8019070:	ee17 3a10 	vmov	r3, s14
 8019074:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019078:	f023 030f 	bic.w	r3, r3, #15
 801907c:	ee07 3a10 	vmov	s14, r3
 8019080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019084:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019088:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019168 <__ieee754_powf+0x55c>
 801908c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019090:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019094:	eddf 6a35 	vldr	s13, [pc, #212]	; 801916c <__ieee754_powf+0x560>
 8019098:	eeb0 0a67 	vmov.f32	s0, s15
 801909c:	eea7 0a26 	vfma.f32	s0, s14, s13
 80190a0:	eeb0 6a40 	vmov.f32	s12, s0
 80190a4:	eea7 6a66 	vfms.f32	s12, s14, s13
 80190a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80190ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80190b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019170 <__ieee754_powf+0x564>
 80190b4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019174 <__ieee754_powf+0x568>
 80190b8:	eea7 6a26 	vfma.f32	s12, s14, s13
 80190bc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019178 <__ieee754_powf+0x56c>
 80190c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80190c4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801917c <__ieee754_powf+0x570>
 80190c8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80190cc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019180 <__ieee754_powf+0x574>
 80190d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80190d4:	eeb0 6a40 	vmov.f32	s12, s0
 80190d8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80190dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80190e0:	eeb0 7a46 	vmov.f32	s14, s12
 80190e4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80190e8:	ee20 6a06 	vmul.f32	s12, s0, s12
 80190ec:	eee0 7a27 	vfma.f32	s15, s0, s15
 80190f0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80190f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80190fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019100:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019104:	ee10 3a10 	vmov	r3, s0
 8019108:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801910c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019110:	da1a      	bge.n	8019148 <__ieee754_powf+0x53c>
 8019112:	f000 f9c5 	bl	80194a0 <scalbnf>
 8019116:	ee20 0a08 	vmul.f32	s0, s0, s16
 801911a:	e5c9      	b.n	8018cb0 <__ieee754_powf+0xa4>
 801911c:	4a19      	ldr	r2, [pc, #100]	; (8019184 <__ieee754_powf+0x578>)
 801911e:	4293      	cmp	r3, r2
 8019120:	dd02      	ble.n	8019128 <__ieee754_powf+0x51c>
 8019122:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019188 <__ieee754_powf+0x57c>
 8019126:	e67b      	b.n	8018e20 <__ieee754_powf+0x214>
 8019128:	d108      	bne.n	801913c <__ieee754_powf+0x530>
 801912a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801912e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019136:	f6ff af7b 	blt.w	8019030 <__ieee754_powf+0x424>
 801913a:	e7f2      	b.n	8019122 <__ieee754_powf+0x516>
 801913c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019140:	f73f af76 	bgt.w	8019030 <__ieee754_powf+0x424>
 8019144:	2000      	movs	r0, #0
 8019146:	e78f      	b.n	8019068 <__ieee754_powf+0x45c>
 8019148:	ee00 3a10 	vmov	s0, r3
 801914c:	e7e3      	b.n	8019116 <__ieee754_powf+0x50a>
 801914e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019152:	e5ad      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8019154:	eeb0 0a68 	vmov.f32	s0, s17
 8019158:	e5aa      	b.n	8018cb0 <__ieee754_powf+0xa4>
 801915a:	eeb0 0a48 	vmov.f32	s0, s16
 801915e:	e5a7      	b.n	8018cb0 <__ieee754_powf+0xa4>
 8019160:	007fffff 	.word	0x007fffff
 8019164:	3f317218 	.word	0x3f317218
 8019168:	35bfbe8c 	.word	0x35bfbe8c
 801916c:	3f317200 	.word	0x3f317200
 8019170:	3331bb4c 	.word	0x3331bb4c
 8019174:	b5ddea0e 	.word	0xb5ddea0e
 8019178:	388ab355 	.word	0x388ab355
 801917c:	bb360b61 	.word	0xbb360b61
 8019180:	3e2aaaab 	.word	0x3e2aaaab
 8019184:	43160000 	.word	0x43160000
 8019188:	0da24260 	.word	0x0da24260

0801918c <__ieee754_sqrtf>:
 801918c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019190:	4770      	bx	lr

08019192 <fabs>:
 8019192:	ec51 0b10 	vmov	r0, r1, d0
 8019196:	ee10 2a10 	vmov	r2, s0
 801919a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801919e:	ec43 2b10 	vmov	d0, r2, r3
 80191a2:	4770      	bx	lr

080191a4 <finite>:
 80191a4:	ee10 3a90 	vmov	r3, s1
 80191a8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80191ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80191b0:	0fc0      	lsrs	r0, r0, #31
 80191b2:	4770      	bx	lr

080191b4 <matherr>:
 80191b4:	2000      	movs	r0, #0
 80191b6:	4770      	bx	lr

080191b8 <nan>:
 80191b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80191c0 <nan+0x8>
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop
 80191c0:	00000000 	.word	0x00000000
 80191c4:	7ff80000 	.word	0x7ff80000

080191c8 <rint>:
 80191c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191ca:	ec51 0b10 	vmov	r0, r1, d0
 80191ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80191d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80191d6:	2e13      	cmp	r6, #19
 80191d8:	460b      	mov	r3, r1
 80191da:	ee10 4a10 	vmov	r4, s0
 80191de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80191e2:	dc56      	bgt.n	8019292 <rint+0xca>
 80191e4:	2e00      	cmp	r6, #0
 80191e6:	da2b      	bge.n	8019240 <rint+0x78>
 80191e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80191ec:	4302      	orrs	r2, r0
 80191ee:	d023      	beq.n	8019238 <rint+0x70>
 80191f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80191f4:	4302      	orrs	r2, r0
 80191f6:	4254      	negs	r4, r2
 80191f8:	4314      	orrs	r4, r2
 80191fa:	0c4b      	lsrs	r3, r1, #17
 80191fc:	0b24      	lsrs	r4, r4, #12
 80191fe:	045b      	lsls	r3, r3, #17
 8019200:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019204:	ea44 0103 	orr.w	r1, r4, r3
 8019208:	460b      	mov	r3, r1
 801920a:	492f      	ldr	r1, [pc, #188]	; (80192c8 <rint+0x100>)
 801920c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019210:	e9d1 6700 	ldrd	r6, r7, [r1]
 8019214:	4602      	mov	r2, r0
 8019216:	4639      	mov	r1, r7
 8019218:	4630      	mov	r0, r6
 801921a:	f7e7 f857 	bl	80002cc <__adddf3>
 801921e:	e9cd 0100 	strd	r0, r1, [sp]
 8019222:	463b      	mov	r3, r7
 8019224:	4632      	mov	r2, r6
 8019226:	e9dd 0100 	ldrd	r0, r1, [sp]
 801922a:	f7e7 f84d 	bl	80002c8 <__aeabi_dsub>
 801922e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019232:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019236:	4639      	mov	r1, r7
 8019238:	ec41 0b10 	vmov	d0, r0, r1
 801923c:	b003      	add	sp, #12
 801923e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019240:	4a22      	ldr	r2, [pc, #136]	; (80192cc <rint+0x104>)
 8019242:	4132      	asrs	r2, r6
 8019244:	ea01 0702 	and.w	r7, r1, r2
 8019248:	4307      	orrs	r7, r0
 801924a:	d0f5      	beq.n	8019238 <rint+0x70>
 801924c:	0852      	lsrs	r2, r2, #1
 801924e:	4011      	ands	r1, r2
 8019250:	430c      	orrs	r4, r1
 8019252:	d00b      	beq.n	801926c <rint+0xa4>
 8019254:	ea23 0202 	bic.w	r2, r3, r2
 8019258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801925c:	2e13      	cmp	r6, #19
 801925e:	fa43 f306 	asr.w	r3, r3, r6
 8019262:	bf0c      	ite	eq
 8019264:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019268:	2400      	movne	r4, #0
 801926a:	4313      	orrs	r3, r2
 801926c:	4916      	ldr	r1, [pc, #88]	; (80192c8 <rint+0x100>)
 801926e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019272:	4622      	mov	r2, r4
 8019274:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019278:	4620      	mov	r0, r4
 801927a:	4629      	mov	r1, r5
 801927c:	f7e7 f826 	bl	80002cc <__adddf3>
 8019280:	e9cd 0100 	strd	r0, r1, [sp]
 8019284:	4622      	mov	r2, r4
 8019286:	462b      	mov	r3, r5
 8019288:	e9dd 0100 	ldrd	r0, r1, [sp]
 801928c:	f7e7 f81c 	bl	80002c8 <__aeabi_dsub>
 8019290:	e7d2      	b.n	8019238 <rint+0x70>
 8019292:	2e33      	cmp	r6, #51	; 0x33
 8019294:	dd07      	ble.n	80192a6 <rint+0xde>
 8019296:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801929a:	d1cd      	bne.n	8019238 <rint+0x70>
 801929c:	ee10 2a10 	vmov	r2, s0
 80192a0:	f7e7 f814 	bl	80002cc <__adddf3>
 80192a4:	e7c8      	b.n	8019238 <rint+0x70>
 80192a6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80192aa:	f04f 32ff 	mov.w	r2, #4294967295
 80192ae:	40f2      	lsrs	r2, r6
 80192b0:	4210      	tst	r0, r2
 80192b2:	d0c1      	beq.n	8019238 <rint+0x70>
 80192b4:	0852      	lsrs	r2, r2, #1
 80192b6:	4210      	tst	r0, r2
 80192b8:	bf1f      	itttt	ne
 80192ba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80192be:	ea20 0202 	bicne.w	r2, r0, r2
 80192c2:	4134      	asrne	r4, r6
 80192c4:	4314      	orrne	r4, r2
 80192c6:	e7d1      	b.n	801926c <rint+0xa4>
 80192c8:	0801a118 	.word	0x0801a118
 80192cc:	000fffff 	.word	0x000fffff

080192d0 <scalbn>:
 80192d0:	b570      	push	{r4, r5, r6, lr}
 80192d2:	ec55 4b10 	vmov	r4, r5, d0
 80192d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80192da:	4606      	mov	r6, r0
 80192dc:	462b      	mov	r3, r5
 80192de:	b9aa      	cbnz	r2, 801930c <scalbn+0x3c>
 80192e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80192e4:	4323      	orrs	r3, r4
 80192e6:	d03b      	beq.n	8019360 <scalbn+0x90>
 80192e8:	4b31      	ldr	r3, [pc, #196]	; (80193b0 <scalbn+0xe0>)
 80192ea:	4629      	mov	r1, r5
 80192ec:	2200      	movs	r2, #0
 80192ee:	ee10 0a10 	vmov	r0, s0
 80192f2:	f7e7 f9a1 	bl	8000638 <__aeabi_dmul>
 80192f6:	4b2f      	ldr	r3, [pc, #188]	; (80193b4 <scalbn+0xe4>)
 80192f8:	429e      	cmp	r6, r3
 80192fa:	4604      	mov	r4, r0
 80192fc:	460d      	mov	r5, r1
 80192fe:	da12      	bge.n	8019326 <scalbn+0x56>
 8019300:	a327      	add	r3, pc, #156	; (adr r3, 80193a0 <scalbn+0xd0>)
 8019302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019306:	f7e7 f997 	bl	8000638 <__aeabi_dmul>
 801930a:	e009      	b.n	8019320 <scalbn+0x50>
 801930c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019310:	428a      	cmp	r2, r1
 8019312:	d10c      	bne.n	801932e <scalbn+0x5e>
 8019314:	ee10 2a10 	vmov	r2, s0
 8019318:	4620      	mov	r0, r4
 801931a:	4629      	mov	r1, r5
 801931c:	f7e6 ffd6 	bl	80002cc <__adddf3>
 8019320:	4604      	mov	r4, r0
 8019322:	460d      	mov	r5, r1
 8019324:	e01c      	b.n	8019360 <scalbn+0x90>
 8019326:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801932a:	460b      	mov	r3, r1
 801932c:	3a36      	subs	r2, #54	; 0x36
 801932e:	4432      	add	r2, r6
 8019330:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019334:	428a      	cmp	r2, r1
 8019336:	dd0b      	ble.n	8019350 <scalbn+0x80>
 8019338:	ec45 4b11 	vmov	d1, r4, r5
 801933c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80193a8 <scalbn+0xd8>
 8019340:	f000 f90e 	bl	8019560 <copysign>
 8019344:	a318      	add	r3, pc, #96	; (adr r3, 80193a8 <scalbn+0xd8>)
 8019346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934a:	ec51 0b10 	vmov	r0, r1, d0
 801934e:	e7da      	b.n	8019306 <scalbn+0x36>
 8019350:	2a00      	cmp	r2, #0
 8019352:	dd08      	ble.n	8019366 <scalbn+0x96>
 8019354:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019358:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801935c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019360:	ec45 4b10 	vmov	d0, r4, r5
 8019364:	bd70      	pop	{r4, r5, r6, pc}
 8019366:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801936a:	da0d      	bge.n	8019388 <scalbn+0xb8>
 801936c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019370:	429e      	cmp	r6, r3
 8019372:	ec45 4b11 	vmov	d1, r4, r5
 8019376:	dce1      	bgt.n	801933c <scalbn+0x6c>
 8019378:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80193a0 <scalbn+0xd0>
 801937c:	f000 f8f0 	bl	8019560 <copysign>
 8019380:	a307      	add	r3, pc, #28	; (adr r3, 80193a0 <scalbn+0xd0>)
 8019382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019386:	e7e0      	b.n	801934a <scalbn+0x7a>
 8019388:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801938c:	3236      	adds	r2, #54	; 0x36
 801938e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019392:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019396:	4620      	mov	r0, r4
 8019398:	4629      	mov	r1, r5
 801939a:	2200      	movs	r2, #0
 801939c:	4b06      	ldr	r3, [pc, #24]	; (80193b8 <scalbn+0xe8>)
 801939e:	e7b2      	b.n	8019306 <scalbn+0x36>
 80193a0:	c2f8f359 	.word	0xc2f8f359
 80193a4:	01a56e1f 	.word	0x01a56e1f
 80193a8:	8800759c 	.word	0x8800759c
 80193ac:	7e37e43c 	.word	0x7e37e43c
 80193b0:	43500000 	.word	0x43500000
 80193b4:	ffff3cb0 	.word	0xffff3cb0
 80193b8:	3c900000 	.word	0x3c900000

080193bc <fabsf>:
 80193bc:	ee10 3a10 	vmov	r3, s0
 80193c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80193c4:	ee00 3a10 	vmov	s0, r3
 80193c8:	4770      	bx	lr

080193ca <finitef>:
 80193ca:	ee10 3a10 	vmov	r3, s0
 80193ce:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80193d2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80193d6:	bfac      	ite	ge
 80193d8:	2000      	movge	r0, #0
 80193da:	2001      	movlt	r0, #1
 80193dc:	4770      	bx	lr
	...

080193e0 <nanf>:
 80193e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80193e8 <nanf+0x8>
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	7fc00000 	.word	0x7fc00000

080193ec <rintf>:
 80193ec:	b513      	push	{r0, r1, r4, lr}
 80193ee:	ee10 1a10 	vmov	r1, s0
 80193f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80193f6:	0ddc      	lsrs	r4, r3, #23
 80193f8:	3c7f      	subs	r4, #127	; 0x7f
 80193fa:	2c16      	cmp	r4, #22
 80193fc:	dc46      	bgt.n	801948c <rintf+0xa0>
 80193fe:	b32b      	cbz	r3, 801944c <rintf+0x60>
 8019400:	2c00      	cmp	r4, #0
 8019402:	ee10 2a10 	vmov	r2, s0
 8019406:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801940a:	da21      	bge.n	8019450 <rintf+0x64>
 801940c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019410:	425b      	negs	r3, r3
 8019412:	4a21      	ldr	r2, [pc, #132]	; (8019498 <rintf+0xac>)
 8019414:	0a5b      	lsrs	r3, r3, #9
 8019416:	0d09      	lsrs	r1, r1, #20
 8019418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801941c:	0509      	lsls	r1, r1, #20
 801941e:	430b      	orrs	r3, r1
 8019420:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019424:	ee07 3a90 	vmov	s15, r3
 8019428:	edd2 6a00 	vldr	s13, [r2]
 801942c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019430:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019434:	eddd 7a01 	vldr	s15, [sp, #4]
 8019438:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801943c:	ee17 3a90 	vmov	r3, s15
 8019440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019444:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019448:	ee00 3a10 	vmov	s0, r3
 801944c:	b002      	add	sp, #8
 801944e:	bd10      	pop	{r4, pc}
 8019450:	4b12      	ldr	r3, [pc, #72]	; (801949c <rintf+0xb0>)
 8019452:	4123      	asrs	r3, r4
 8019454:	4219      	tst	r1, r3
 8019456:	d0f9      	beq.n	801944c <rintf+0x60>
 8019458:	085b      	lsrs	r3, r3, #1
 801945a:	4219      	tst	r1, r3
 801945c:	d006      	beq.n	801946c <rintf+0x80>
 801945e:	ea21 0203 	bic.w	r2, r1, r3
 8019462:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019466:	fa43 f404 	asr.w	r4, r3, r4
 801946a:	4322      	orrs	r2, r4
 801946c:	4b0a      	ldr	r3, [pc, #40]	; (8019498 <rintf+0xac>)
 801946e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019472:	ed90 7a00 	vldr	s14, [r0]
 8019476:	ee07 2a90 	vmov	s15, r2
 801947a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801947e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019482:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019486:	ee30 0a47 	vsub.f32	s0, s0, s14
 801948a:	e7df      	b.n	801944c <rintf+0x60>
 801948c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019490:	d3dc      	bcc.n	801944c <rintf+0x60>
 8019492:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019496:	e7d9      	b.n	801944c <rintf+0x60>
 8019498:	0801a128 	.word	0x0801a128
 801949c:	007fffff 	.word	0x007fffff

080194a0 <scalbnf>:
 80194a0:	b508      	push	{r3, lr}
 80194a2:	ee10 2a10 	vmov	r2, s0
 80194a6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80194aa:	ed2d 8b02 	vpush	{d8}
 80194ae:	eef0 0a40 	vmov.f32	s1, s0
 80194b2:	d004      	beq.n	80194be <scalbnf+0x1e>
 80194b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80194b8:	d306      	bcc.n	80194c8 <scalbnf+0x28>
 80194ba:	ee70 0a00 	vadd.f32	s1, s0, s0
 80194be:	ecbd 8b02 	vpop	{d8}
 80194c2:	eeb0 0a60 	vmov.f32	s0, s1
 80194c6:	bd08      	pop	{r3, pc}
 80194c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80194cc:	d21c      	bcs.n	8019508 <scalbnf+0x68>
 80194ce:	4b1f      	ldr	r3, [pc, #124]	; (801954c <scalbnf+0xac>)
 80194d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019550 <scalbnf+0xb0>
 80194d4:	4298      	cmp	r0, r3
 80194d6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80194da:	db10      	blt.n	80194fe <scalbnf+0x5e>
 80194dc:	ee10 2a90 	vmov	r2, s1
 80194e0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80194e4:	3b19      	subs	r3, #25
 80194e6:	4403      	add	r3, r0
 80194e8:	2bfe      	cmp	r3, #254	; 0xfe
 80194ea:	dd0f      	ble.n	801950c <scalbnf+0x6c>
 80194ec:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8019554 <scalbnf+0xb4>
 80194f0:	eeb0 0a48 	vmov.f32	s0, s16
 80194f4:	f000 f843 	bl	801957e <copysignf>
 80194f8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80194fc:	e7df      	b.n	80194be <scalbnf+0x1e>
 80194fe:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019558 <scalbnf+0xb8>
 8019502:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019506:	e7da      	b.n	80194be <scalbnf+0x1e>
 8019508:	0ddb      	lsrs	r3, r3, #23
 801950a:	e7ec      	b.n	80194e6 <scalbnf+0x46>
 801950c:	2b00      	cmp	r3, #0
 801950e:	dd06      	ble.n	801951e <scalbnf+0x7e>
 8019510:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019514:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019518:	ee00 3a90 	vmov	s1, r3
 801951c:	e7cf      	b.n	80194be <scalbnf+0x1e>
 801951e:	f113 0f16 	cmn.w	r3, #22
 8019522:	da06      	bge.n	8019532 <scalbnf+0x92>
 8019524:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019528:	4298      	cmp	r0, r3
 801952a:	dcdf      	bgt.n	80194ec <scalbnf+0x4c>
 801952c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8019558 <scalbnf+0xb8>
 8019530:	e7de      	b.n	80194f0 <scalbnf+0x50>
 8019532:	3319      	adds	r3, #25
 8019534:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019538:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801953c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801955c <scalbnf+0xbc>
 8019540:	ee07 3a10 	vmov	s14, r3
 8019544:	ee67 0a27 	vmul.f32	s1, s14, s15
 8019548:	e7b9      	b.n	80194be <scalbnf+0x1e>
 801954a:	bf00      	nop
 801954c:	ffff3cb0 	.word	0xffff3cb0
 8019550:	4c000000 	.word	0x4c000000
 8019554:	7149f2ca 	.word	0x7149f2ca
 8019558:	0da24260 	.word	0x0da24260
 801955c:	33000000 	.word	0x33000000

08019560 <copysign>:
 8019560:	ec51 0b10 	vmov	r0, r1, d0
 8019564:	ee11 0a90 	vmov	r0, s3
 8019568:	ee10 2a10 	vmov	r2, s0
 801956c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019570:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019574:	ea41 0300 	orr.w	r3, r1, r0
 8019578:	ec43 2b10 	vmov	d0, r2, r3
 801957c:	4770      	bx	lr

0801957e <copysignf>:
 801957e:	ee10 3a10 	vmov	r3, s0
 8019582:	ee10 2a90 	vmov	r2, s1
 8019586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801958a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801958e:	4313      	orrs	r3, r2
 8019590:	ee00 3a10 	vmov	s0, r3
 8019594:	4770      	bx	lr
	...

08019598 <_init>:
 8019598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801959a:	bf00      	nop
 801959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801959e:	bc08      	pop	{r3}
 80195a0:	469e      	mov	lr, r3
 80195a2:	4770      	bx	lr

080195a4 <_fini>:
 80195a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a6:	bf00      	nop
 80195a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195aa:	bc08      	pop	{r3}
 80195ac:	469e      	mov	lr, r3
 80195ae:	4770      	bx	lr
