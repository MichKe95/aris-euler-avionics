
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  080168e8  080168e8  000268e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fd0  08016fd0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08016fd0  08016fd0  00026fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fd8  08016fd8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fd8  08016fd8  00026fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fdc  08016fdc  00026fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08016fe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d20  200001fc  080171dc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20012f1c  080171dc  00032f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000356a6  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000673d  00000000  00000000  000658d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002328  00000000  00000000  0006c010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002030  00000000  00000000  0006e338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b0fe  00000000  00000000  00070368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023cca  00000000  00000000  0007b466  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff0a0  00000000  00000000  0009f130  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019e1d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a0c  00000000  00000000  0019e24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080168cc 	.word	0x080168cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	080168cc 	.word	0x080168cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b095      	sub	sp, #84	; 0x54
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f002 fe88 	bl	8003c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8c9 	bl	8001118 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 8000f86:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <main+0x12c>)
 8000f88:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <main+0x130>)
 8000f8a:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <main+0x12c>)
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <main+0x134>)
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa3d 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fa15 	bl	80013c4 <MX_DMA_Init>
  MX_SPI3_Init();
 8000f9a:	f000 f9db 	bl	8001354 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f969 	bl	8001274 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000fa2:	f000 f947 	bl	8001234 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000fa6:	f000 f99d 	bl	80012e4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000faa:	f00a fb8b 	bl	800b6c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000fae:	f013 f9bd 	bl	801432c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb2:	f00f f979 	bl	80102a8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <main+0x138>)
 8000fb8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8000fc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00f fb40 	bl	801064c <osMutexNew>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <main+0x13c>)
 8000fd0:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <main+0x140>)
 8000fd4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8000fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00f fb32 	bl	801064c <osMutexNew>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <main+0x144>)
 8000fec:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <main+0x148>)
 8000ff0:	f107 0420 	add.w	r4, r7, #32
 8000ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00f fb24 	bl	801064c <osMutexNew>
 8001004:	4602      	mov	r2, r0
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <main+0x14c>)
 8001008:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <main+0x150>)
 800100c:	f107 0410 	add.w	r4, r7, #16
 8001010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4618      	mov	r0, r3
 800101c:	f00f fb16 	bl	801064c <osMutexNew>
 8001020:	4602      	mov	r2, r0
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <main+0x154>)
 8001024:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <main+0x158>)
 8001028:	463c      	mov	r4, r7
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8001030:	463b      	mov	r3, r7
 8001032:	4618      	mov	r0, r3
 8001034:	f00f fb0a 	bl	801064c <osMutexNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <main+0x15c>)
 800103c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800103e:	2200      	movs	r2, #0
 8001040:	2196      	movs	r1, #150	; 0x96
 8001042:	2080      	movs	r0, #128	; 0x80
 8001044:	f00f fe0c 	bl	8010c60 <osMessageQueueNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <main+0x160>)
 800104c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <main+0x164>)
 8001050:	2100      	movs	r1, #0
 8001052:	4823      	ldr	r0, [pc, #140]	; (80010e0 <main+0x168>)
 8001054:	f00f f9e6 	bl	8010424 <osThreadNew>
 8001058:	4602      	mov	r2, r0
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <main+0x16c>)
 800105c:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800105e:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <main+0x170>)
 8001060:	2100      	movs	r1, #0
 8001062:	4822      	ldr	r0, [pc, #136]	; (80010ec <main+0x174>)
 8001064:	f00f f9de 	bl	8010424 <osThreadNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <main+0x178>)
 800106c:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <main+0x17c>)
 8001070:	2100      	movs	r1, #0
 8001072:	4821      	ldr	r0, [pc, #132]	; (80010f8 <main+0x180>)
 8001074:	f00f f9d6 	bl	8010424 <osThreadNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <main+0x184>)
 800107c:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800107e:	4a20      	ldr	r2, [pc, #128]	; (8001100 <main+0x188>)
 8001080:	2100      	movs	r1, #0
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <main+0x18c>)
 8001084:	f00f f9ce 	bl	8010424 <osThreadNew>
 8001088:	4602      	mov	r2, r0
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <main+0x190>)
 800108c:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <main+0x194>)
 8001090:	2100      	movs	r1, #0
 8001092:	481f      	ldr	r0, [pc, #124]	; (8001110 <main+0x198>)
 8001094:	f00f f9c6 	bl	8010424 <osThreadNew>
 8001098:	4602      	mov	r2, r0
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <main+0x19c>)
 800109c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800109e:	f00f f959 	bl	8010354 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x12a>
 80010a4:	e0042000 	.word	0xe0042000
 80010a8:	07e01bff 	.word	0x07e01bff
 80010ac:	00070003 	.word	0x00070003
 80010b0:	08016940 	.word	0x08016940
 80010b4:	2000aa3c 	.word	0x2000aa3c
 80010b8:	0801695c 	.word	0x0801695c
 80010bc:	20010ce8 	.word	0x20010ce8
 80010c0:	08016978 	.word	0x08016978
 80010c4:	2000aa40 	.word	0x2000aa40
 80010c8:	08016998 	.word	0x08016998
 80010cc:	2000aa44 	.word	0x2000aa44
 80010d0:	080169b4 	.word	0x080169b4
 80010d4:	2000caa4 	.word	0x2000caa4
 80010d8:	2000cbc8 	.word	0x2000cbc8
 80010dc:	08016dec 	.word	0x08016dec
 80010e0:	080014d5 	.word	0x080014d5
 80010e4:	20008818 	.word	0x20008818
 80010e8:	08016e10 	.word	0x08016e10
 80010ec:	080025ad 	.word	0x080025ad
 80010f0:	2000aa38 	.word	0x2000aa38
 80010f4:	08016e34 	.word	0x08016e34
 80010f8:	08001d89 	.word	0x08001d89
 80010fc:	20010ce4 	.word	0x20010ce4
 8001100:	08016e58 	.word	0x08016e58
 8001104:	0800240d 	.word	0x0800240d
 8001108:	20008908 	.word	0x20008908
 800110c:	08016e7c 	.word	0x08016e7c
 8001110:	08002079 	.word	0x08002079
 8001114:	20008880 	.word	0x20008880

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0b4      	sub	sp, #208	; 0xd0
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f013 fead 	bl	8014e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	2284      	movs	r2, #132	; 0x84
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f013 fe9e 	bl	8014e86 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <SystemClock_Config+0x114>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a37      	ldr	r2, [pc, #220]	; (800122c <SystemClock_Config+0x114>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <SystemClock_Config+0x114>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <SystemClock_Config+0x118>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <SystemClock_Config+0x118>)
 800116c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <SystemClock_Config+0x118>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a0:	23a8      	movs	r3, #168	; 0xa8
 80011a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fddc 	bl	8005d74 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011c2:	f000 f9a1 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ec:	2105      	movs	r1, #5
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 f864 	bl	80062bc <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80011fa:	f000 f985 	bl	8001508 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80011fe:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001202:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f005 fa67 	bl	80066e8 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001220:	f000 f972 	bl	8001508 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	37d0      	adds	r7, #208	; 0xd0
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 800123c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <MX_SDMMC1_SD_Init+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20008884 	.word	0x20008884
 8001270:	40012c00 	.word	0x40012c00

08001274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SPI1_Init+0x68>)
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <MX_SPI1_Init+0x6c>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI1_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_SPI1_Init+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI1_Init+0x68>)
 800128c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001290:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI1_Init+0x68>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_SPI1_Init+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI1_Init+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_SPI1_Init+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI1_Init+0x68>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_SPI1_Init+0x68>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI1_Init+0x68>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_SPI1_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI1_Init+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_SPI1_Init+0x68>)
 80012ca:	f007 f8b9 	bl	8008440 <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80012d4:	f000 f918 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000cb64 	.word	0x2000cb64
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_SPI2_Init+0x68>)
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <MX_SPI2_Init+0x6c>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SPI2_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_SPI2_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SPI2_Init+0x68>)
 80012fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001300:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SPI2_Init+0x68>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_SPI2_Init+0x68>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SPI2_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_SPI2_Init+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SPI2_Init+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SPI2_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SPI2_Init+0x68>)
 8001328:	2207      	movs	r2, #7
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SPI2_Init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SPI2_Init+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SPI2_Init+0x68>)
 800133a:	f007 f881 	bl	8008440 <HAL_SPI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001344:	f000 f8e0 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000881c 	.word	0x2000881c
 8001350:	40003800 	.word	0x40003800

08001354 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_SPI3_Init+0x68>)
 800135a:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <MX_SPI3_Init+0x6c>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_SPI3_Init+0x68>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_SPI3_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_SPI3_Init+0x68>)
 800136c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001370:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_SPI3_Init+0x68>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_SPI3_Init+0x68>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_SPI3_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_SPI3_Init+0x68>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_SPI3_Init+0x68>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_SPI3_Init+0x68>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_SPI3_Init+0x68>)
 8001398:	2207      	movs	r2, #7
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SPI3_Init+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_SPI3_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_SPI3_Init+0x68>)
 80013aa:	f007 f849 	bl	8008440 <HAL_SPI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80013b4:	f000 f8a8 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000a90c 	.word	0x2000a90c
 80013c0:	40003c00 	.word	0x40003c00

080013c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_DMA_Init+0x48>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <MX_DMA_Init+0x48>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_DMA_Init+0x48>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	203b      	movs	r0, #59	; 0x3b
 80013e8:	f002 fd5a 	bl	8003ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013ec:	203b      	movs	r0, #59	; 0x3b
 80013ee:	f002 fd73 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2045      	movs	r0, #69	; 0x45
 80013f8:	f002 fd52 	bl	8003ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013fc:	2045      	movs	r0, #69	; 0x45
 80013fe:	f002 fd6b 	bl	8003ed8 <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a28      	ldr	r2, [pc, #160]	; (80014cc <MX_GPIO_Init+0xbc>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_GPIO_Init+0xbc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_GPIO_Init+0xbc>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_GPIO_Init+0xbc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <MX_GPIO_Init+0xbc>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_GPIO_Init+0xbc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2108      	movs	r1, #8
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <MX_GPIO_Init+0xc0>)
 80014a4:	f003 fa74 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_GPIO_Init+0xc0>)
 80014c0:	f003 f8bc 	bl	800463c <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020800 	.word	0x40020800

080014d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f00f f847 	bl	8010570 <osDelay>
 80014e2:	e7fb      	b.n	80014dc <StartDefaultTask+0x8>

080014e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014f6:	f002 fbd9 	bl	8003cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40010000 	.word	0x40010000

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	210f      	movs	r1, #15
 8001552:	f06f 0001 	mvn.w	r0, #1
 8001556:	f002 fca3 	bl	8003ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6d      	ldr	r2, [pc, #436]	; (800173c <HAL_SD_MspInit+0x1d4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	f040 80d4 	bne.w	8001734 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800158c:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	4a6b      	ldr	r2, [pc, #428]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 8001592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001596:	6453      	str	r3, [r2, #68]	; 0x44
 8001598:	4b69      	ldr	r3, [pc, #420]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	4b60      	ldr	r3, [pc, #384]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_SD_MspInit+0x1d8>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015e6:	230c      	movs	r3, #12
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4854      	ldr	r0, [pc, #336]	; (8001744 <HAL_SD_MspInit+0x1dc>)
 80015f2:	f003 f823 	bl	800463c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001608:	230c      	movs	r3, #12
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	484c      	ldr	r0, [pc, #304]	; (8001744 <HAL_SD_MspInit+0x1dc>)
 8001614:	f003 f812 	bl	800463c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001618:	2304      	movs	r3, #4
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001628:	230c      	movs	r3, #12
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4845      	ldr	r0, [pc, #276]	; (8001748 <HAL_SD_MspInit+0x1e0>)
 8001634:	f003 f802 	bl	800463c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001638:	4b44      	ldr	r3, [pc, #272]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800163a:	4a45      	ldr	r2, [pc, #276]	; (8001750 <HAL_SD_MspInit+0x1e8>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001678:	2204      	movs	r2, #4
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800167c:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800167e:	2203      	movs	r2, #3
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001684:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_SD_MspInit+0x1e4>)
 800168c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001692:	482e      	ldr	r0, [pc, #184]	; (800174c <HAL_SD_MspInit+0x1e4>)
 8001694:	f002 fc2e 	bl	8003ef4 <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800169e:	f7ff ff33 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_SD_MspInit+0x1e4>)
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_SD_MspInit+0x1e4>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <HAL_SD_MspInit+0x1f0>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016de:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016f4:	2203      	movs	r2, #3
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 80016fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 8001702:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 800170a:	f002 fbf3 	bl	8003ef4 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001714:	f7ff fef8 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_SD_MspInit+0x1ec>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2105      	movs	r1, #5
 8001728:	2031      	movs	r0, #49	; 0x31
 800172a:	f002 fbb9 	bl	8003ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800172e:	2031      	movs	r0, #49	; 0x31
 8001730:	f002 fbd2 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40023800 	.word	0x40023800
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	2000cb04 	.word	0x2000cb04
 8001750:	40026458 	.word	0x40026458
 8001754:	20010c84 	.word	0x20010c84
 8001758:	400264a0 	.word	0x400264a0

0800175c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a68      	ldr	r2, [pc, #416]	; (800191c <HAL_SPI_MspInit+0x1c0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d131      	bne.n	80017e2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177e:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a67      	ldr	r2, [pc, #412]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001792:	623b      	str	r3, [r7, #32]
 8001794:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a61      	ldr	r2, [pc, #388]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80017ae:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c0:	2305      	movs	r3, #5
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4856      	ldr	r0, [pc, #344]	; (8001924 <HAL_SPI_MspInit+0x1c8>)
 80017cc:	f002 ff36 	bl	800463c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	2023      	movs	r0, #35	; 0x23
 80017d6:	f002 fb63 	bl	8003ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017da:	2023      	movs	r0, #35	; 0x23
 80017dc:	f002 fb7c 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e0:	e097      	b.n	8001912 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a50      	ldr	r2, [pc, #320]	; (8001928 <HAL_SPI_MspInit+0x1cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d131      	bne.n	8001850 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a4b      	ldr	r2, [pc, #300]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800181c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182e:	2305      	movs	r3, #5
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	483c      	ldr	r0, [pc, #240]	; (800192c <HAL_SPI_MspInit+0x1d0>)
 800183a:	f002 feff 	bl	800463c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2105      	movs	r1, #5
 8001842:	2024      	movs	r0, #36	; 0x24
 8001844:	f002 fb2c 	bl	8003ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001848:	2024      	movs	r0, #36	; 0x24
 800184a:	f002 fb45 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
}
 800184e:	e060      	b.n	8001912 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a36      	ldr	r2, [pc, #216]	; (8001930 <HAL_SPI_MspInit+0x1d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d15b      	bne.n	8001912 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a30      	ldr	r2, [pc, #192]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_SPI_MspInit+0x1c4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a2:	2310      	movs	r3, #16
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b2:	2306      	movs	r3, #6
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4819      	ldr	r0, [pc, #100]	; (8001924 <HAL_SPI_MspInit+0x1c8>)
 80018be:	f002 febd 	bl	800463c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c2:	2304      	movs	r3, #4
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80018d2:	2307      	movs	r3, #7
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	4619      	mov	r1, r3
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <HAL_SPI_MspInit+0x1d0>)
 80018de:	f002 fead 	bl	800463c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018e2:	2318      	movs	r3, #24
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f2:	2306      	movs	r3, #6
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <HAL_SPI_MspInit+0x1d0>)
 80018fe:	f002 fe9d 	bl	800463c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	2033      	movs	r0, #51	; 0x33
 8001908:	f002 faca 	bl	8003ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800190c:	2033      	movs	r0, #51	; 0x33
 800190e:	f002 fae3 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3738      	adds	r7, #56	; 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40013000 	.word	0x40013000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40003800 	.word	0x40003800
 800192c:	40020400 	.word	0x40020400
 8001930:	40003c00 	.word	0x40003c00

08001934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	2019      	movs	r0, #25
 800194a:	f002 faa9 	bl	8003ea0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800194e:	2019      	movs	r0, #25
 8001950:	f002 fac2 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_InitTick+0xa0>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_InitTick+0xa0>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6453      	str	r3, [r2, #68]	; 0x44
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_InitTick+0xa0>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800196c:	f107 0210 	add.w	r2, r7, #16
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fe84 	bl	8006684 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800197c:	f004 fe6e 	bl	800665c <HAL_RCC_GetPCLK2Freq>
 8001980:	4603      	mov	r3, r0
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_InitTick+0xa4>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	3b01      	subs	r3, #1
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_InitTick+0xa8>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_InitTick+0xac>)
 8001998:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_InitTick+0xa8>)
 800199c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_InitTick+0xa8>)
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_InitTick+0xa8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_InitTick+0xa8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_InitTick+0xa8>)
 80019b6:	f007 fb96 	bl	80090e6 <HAL_TIM_Base_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d104      	bne.n	80019ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_InitTick+0xa8>)
 80019c2:	f007 fbc5 	bl	8009150 <HAL_TIM_Base_Start_IT>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	20010cec 	.word	0x20010cec
 80019e0:	40010000 	.word	0x40010000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a1e:	f007 fbc1 	bl	80091a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20010cec 	.word	0x20010cec

08001a2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <SPI1_IRQHandler+0x10>)
 8001a32:	f006 feef 	bl	8008814 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000cb64 	.word	0x2000cb64

08001a40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <SPI2_IRQHandler+0x10>)
 8001a46:	f006 fee5 	bl	8008814 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000881c 	.word	0x2000881c

08001a54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <SDMMC1_IRQHandler+0x10>)
 8001a5a:	f005 fc6d 	bl	8007338 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20008884 	.word	0x20008884

08001a68 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SPI3_IRQHandler+0x10>)
 8001a6e:	f006 fed1 	bl	8008814 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000a90c 	.word	0x2000a90c

08001a7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DMA2_Stream3_IRQHandler+0x10>)
 8001a82:	f002 fb67 	bl	8004154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000cb04 	.word	0x2000cb04

08001a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <OTG_FS_IRQHandler+0x10>)
 8001a96:	f003 f8f4 	bl	8004c82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20012b14 	.word	0x20012b14

08001aa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA2_Stream6_IRQHandler+0x10>)
 8001aaa:	f002 fb53 	bl	8004154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20010c84 	.word	0x20010c84

08001ab8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x50>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x16>
		heap_end = &end;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <_sbrk+0x50>)
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <_sbrk+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <_sbrk+0x50>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <_sbrk+0x50>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	466a      	mov	r2, sp
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d907      	bls.n	8001af2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ae2:	f013 f98b 	bl	8014dfc <__errno>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	230c      	movs	r3, #12
 8001aea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e006      	b.n	8001b00 <_sbrk+0x48>
	}

	heap_end += incr;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_sbrk+0x50>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <_sbrk+0x50>)
 8001afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200002c8 	.word	0x200002c8
 8001b0c:	20012f20 	.word	0x20012f20

08001b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <SystemInit+0x5c>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <SystemInit+0x5c>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <SystemInit+0x60>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <SystemInit+0x60>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <SystemInit+0x60>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <SystemInit+0x60>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <SystemInit+0x60>)
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <SystemInit+0x64>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <SystemInit+0x60>)
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <SystemInit+0x68>)
 8001b46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <SystemInit+0x60>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <SystemInit+0x60>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SystemInit+0x60>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SystemInit+0x5c>)
 8001b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b60:	609a      	str	r2, [r3, #8]
#endif
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	fef6ffff 	.word	0xfef6ffff
 8001b78:	24003010 	.word	0x24003010

08001b7c <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b0b3      	sub	sp, #204	; 0xcc
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	72fb      	strb	r3, [r7, #11]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2296      	movs	r2, #150	; 0x96
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f013 f975 	bl	8014e86 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	7aba      	ldrb	r2, [r7, #10]
 8001ba0:	f107 0010 	add.w	r0, r7, #16
 8001ba4:	9202      	str	r2, [sp, #8]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <logSensor+0x138>)
 8001bb0:	2196      	movs	r1, #150	; 0x96
 8001bb2:	f013 fa29 	bl	8015008 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d002      	beq.n	8001bc2 <logSensor+0x46>
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d01d      	beq.n	8001bfc <logSensor+0x80>
 8001bc0:	e055      	b.n	8001c6e <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fb1f 	bl	8000210 <strlen>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	1898      	adds	r0, r3, r2
 8001bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001bea:	6892      	ldr	r2, [r2, #8]
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <logSensor+0x13c>)
 8001bf4:	2196      	movs	r1, #150	; 0x96
 8001bf6:	f013 fa07 	bl	8015008 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8001bfa:	e04e      	b.n	8001c9a <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb02 	bl	8000210 <strlen>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8001c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c1c:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c26:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c30:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c36:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c3a:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8001c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c44:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8001c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c4e:	461e      	mov	r6, r3
 8001c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	9305      	str	r3, [sp, #20]
 8001c58:	9604      	str	r6, [sp, #16]
 8001c5a:	9503      	str	r5, [sp, #12]
 8001c5c:	9402      	str	r4, [sp, #8]
 8001c5e:	9101      	str	r1, [sp, #4]
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	4663      	mov	r3, ip
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <logSensor+0x140>)
 8001c66:	2196      	movs	r1, #150	; 0x96
 8001c68:	f013 f9ce 	bl	8015008 <sniprintf>
	}
		break;
 8001c6c:	e015      	b.n	8001c9a <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe facc 	bl	8000210 <strlen>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <logSensor+0x144>)
 8001c82:	461d      	mov	r5, r3
 8001c84:	4614      	mov	r4, r2
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	6028      	str	r0, [r5, #0]
 8001c8a:	6069      	str	r1, [r5, #4]
 8001c8c:	60aa      	str	r2, [r5, #8]
 8001c8e:	60eb      	str	r3, [r5, #12]
 8001c90:	6820      	ldr	r0, [r4, #0]
 8001c92:	6128      	str	r0, [r5, #16]
 8001c94:	7923      	ldrb	r3, [r4, #4]
 8001c96:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8001c98:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <logSensor+0x148>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f107 0110 	add.w	r1, r7, #16
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f00f f861 	bl	8010d6c <osMessageQueuePut>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	37b4      	adds	r7, #180	; 0xb4
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	080169c4 	.word	0x080169c4
 8001cb8:	080169d4 	.word	0x080169d4
 8001cbc:	080169e4 	.word	0x080169e4
 8001cc0:	08016a04 	.word	0x08016a04
 8001cc4:	2000cbc8 	.word	0x2000cbc8

08001cc8 <logEstimatorVar>:
			rocket_state);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ae      	sub	sp, #184	; 0xb8
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	e883 0006 	stmia.w	r3, {r1, r2}
	log_entry_t log_entry = { 0 };
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	2296      	movs	r2, #150	; 0x96
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f013 f8d1 	bl	8014e86 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	f107 0010 	add.w	r0, r7, #16
 8001cec:	9202      	str	r2, [sp, #8]
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <logEstimatorVar+0x50>)
 8001cf8:	2196      	movs	r1, #150	; 0x96
 8001cfa:	f013 f985 	bl	8015008 <sniprintf>
			estimator_data.altitude_above_GL, estimator_data.velocity);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <logEstimatorVar+0x54>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	f107 0110 	add.w	r1, r7, #16
 8001d06:	2300      	movs	r3, #0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f00f f82f 	bl	8010d6c <osMessageQueuePut>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	37a8      	adds	r7, #168	; 0xa8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08016a28 	.word	0x08016a28
 8001d1c:	2000cbc8 	.word	0x2000cbc8

08001d20 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001d20:	b40f      	push	{r0, r1, r2, r3}
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <UsbPrint+0x60>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00e fd24 	bl	8010780 <osMutexAcquire>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	21c8      	movs	r1, #200	; 0xc8
 8001d4a:	480e      	ldr	r0, [pc, #56]	; (8001d84 <UsbPrint+0x64>)
 8001d4c:	f013 f9bc 	bl	80150c8 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <UsbPrint+0x64>)
 8001d52:	f7fe fa5d 	bl	8000210 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <UsbPrint+0x64>)
 8001d5e:	f012 fba3 	bl	80144a8 <CDC_Transmit_FS>
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <UsbPrint+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f00e fd66 	bl	801083c <osMutexRelease>
	}
#endif
	return ret;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7c:	b004      	add	sp, #16
 8001d7e:	4770      	bx	lr
 8001d80:	2000caa4 	.word	0x2000caa4
 8001d84:	2000a970 	.word	0x2000a970

08001d88 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2100      	movs	r1, #0
 8001da2:	f013 f870 	bl	8014e86 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	6053      	str	r3, [r2, #4]
 8001dc2:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 8001dee:	2301      	movs	r3, #1
 8001df0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001df4:	f00e fae4 	bl	80103c0 <osKernelGetTickCount>
 8001df8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001dfc:	f00e fb08 	bl	8010410 <osKernelGetTickFreq>
 8001e00:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8001e04:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001e08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8001e12:	f107 021c 	add.w	r2, r7, #28
 8001e16:	f107 0110 	add.w	r1, r7, #16
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4618      	mov	r0, r3
 8001e20:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8001e24:	f000 f898 	bl	8001f58 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb1 7a67 	vneg.f32	s14, s15
 8001e48:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e58:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e6c:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001e78:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8001e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e80:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8001e84:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001e88:	f7fe fb7e 	bl	8000588 <__aeabi_f2d>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001f38 <vTaskController+0x1b0>
 8001e94:	ec44 3b10 	vmov	d0, r3, r4
 8001e98:	f013 fc6e 	bl	8015778 <fmin>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	eef0 7a60 	vmov.f32	s15, s1
 8001ea4:	eeb0 1a47 	vmov.f32	s2, s14
 8001ea8:	eef0 1a67 	vmov.f32	s3, s15
 8001eac:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001f40 <vTaskController+0x1b8>
 8001eb0:	f013 fc3b 	bl	801572a <fmax>
 8001eb4:	ec54 3b10 	vmov	r3, r4, d0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4621      	mov	r1, r4
 8001ebc:	f7fe fe8c 	bl	8000bd8 <__aeabi_d2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8001ec6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ed2:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eda:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	ee17 0a90 	vmov	r0, s15
 8001ee6:	f7fe fb4f 	bl	8000588 <__aeabi_f2d>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001f48 <vTaskController+0x1c0>
 8001ef2:	ec44 3b10 	vmov	d0, r3, r4
 8001ef6:	f013 fc3f 	bl	8015778 <fmin>
 8001efa:	eeb0 7a40 	vmov.f32	s14, s0
 8001efe:	eef0 7a60 	vmov.f32	s15, s1
 8001f02:	eeb0 1a47 	vmov.f32	s2, s14
 8001f06:	eef0 1a67 	vmov.f32	s3, s15
 8001f0a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001f50 <vTaskController+0x1c8>
 8001f0e:	f013 fc0c 	bl	801572a <fmax>
 8001f12:	ec54 3b10 	vmov	r3, r4, d0
 8001f16:	4618      	mov	r0, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7fe fe5d 	bl	8000bd8 <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8001f24:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f28:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		/* Sleep */
		osDelayUntil(tick_count);
 8001f2c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f30:	f00e fb4c 	bl	80105cc <osDelayUntil>
		tick_count += tick_update;
 8001f34:	e766      	b.n	8001e04 <vTaskController+0x7c>
 8001f36:	bf00      	nop
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	3ff00000 	.word	0x3ff00000
	...
 8001f4c:	40240000 	.word	0x40240000
 8001f50:	00000000 	.word	0x00000000
 8001f54:	c0240000 	.word	0xc0240000

08001f58 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f62:	60b8      	str	r0, [r7, #8]
 8001f64:	6079      	str	r1, [r7, #4]
 8001f66:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e07b      	b.n	800206a <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7fe fb08 	bl	8000588 <__aeabi_f2d>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f1c3 031d 	rsb	r3, r3, #29
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe faee 	bl	8000564 <__aeabi_i2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	ec43 2b11 	vmov	d1, r2, r3
 8001f90:	ec45 4b10 	vmov	d0, r4, r5
 8001f94:	f013 fc44 	bl	8015820 <pow>
 8001f98:	ec54 3b10 	vmov	r3, r4, d0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	f7fe fdfa 	bl	8000b98 <__aeabi_d2uiz>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	edd3 6a00 	vldr	s13, [r3]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3308      	adds	r3, #8
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	edd3 6a00 	vldr	s13, [r3]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3308      	adds	r3, #8
 800202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002032:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	edd3 6a00 	vldr	s13, [r3]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b1d      	cmp	r3, #29
 800206e:	dd80      	ble.n	8001f72 <CalcPolynomial+0x1a>
	}

}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}

08002078 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b0cc      	sub	sp, #304	; 0x130
 800207c:	af00      	add	r7, sp, #0
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8002094:	48c3      	ldr	r0, [pc, #780]	; (80023a4 <vTaskSdCard+0x32c>)
 8002096:	f7ff fe43 	bl	8001d20 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 800209a:	48c3      	ldr	r0, [pc, #780]	; (80023a8 <vTaskSdCard+0x330>)
 800209c:	f7ff fe40 	bl	8001d20 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	49c2      	ldr	r1, [pc, #776]	; (80023ac <vTaskSdCard+0x334>)
 80020a4:	48c2      	ldr	r0, [pc, #776]	; (80023b0 <vTaskSdCard+0x338>)
 80020a6:	f00d f87f 	bl	800f1a8 <f_mount>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80020b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80020b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020bc:	4619      	mov	r1, r3
 80020be:	48bd      	ldr	r0, [pc, #756]	; (80023b4 <vTaskSdCard+0x33c>)
 80020c0:	f7ff fe2e 	bl	8001d20 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 80020c4:	4bbc      	ldr	r3, [pc, #752]	; (80023b8 <vTaskSdCard+0x340>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 80020ca:	2064      	movs	r0, #100	; 0x64
 80020cc:	f00e fa50 	bl	8010570 <osDelay>
		}
	} while (res != FR_OK);
 80020d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e3      	bne.n	80020a0 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 80020d8:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 80a9 	bne.w	8002234 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 80020e2:	48b6      	ldr	r0, [pc, #728]	; (80023bc <vTaskSdCard+0x344>)
 80020e4:	f7ff fe1c 	bl	8001d20 <UsbPrint>

		unsigned int file_number = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80020ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80020f2:	f107 0008 	add.w	r0, r7, #8
 80020f6:	4bb2      	ldr	r3, [pc, #712]	; (80023c0 <vTaskSdCard+0x348>)
 80020f8:	4aac      	ldr	r2, [pc, #688]	; (80023ac <vTaskSdCard+0x334>)
 80020fa:	f00e f80d 	bl	8010118 <f_findfirst>
 80020fe:	4603      	mov	r3, r0
 8002100:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8002104:	e02b      	b.n	800215e <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8002106:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800210a:	3b30      	subs	r3, #48	; 0x30
 800210c:	2264      	movs	r2, #100	; 0x64
 800210e:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8002112:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002116:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	18ca      	adds	r2, r1, r3
 8002124:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002128:	3b30      	subs	r3, #48	; 0x30
 800212a:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800212c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if (current_file_number + 1 > file_number) {
 8002130:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002134:	3301      	adds	r3, #1
 8002136:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800213a:	429a      	cmp	r2, r3
 800213c:	d204      	bcs.n	8002148 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 800213e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002142:	3301      	adds	r3, #1
 8002144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8002148:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f00d ffb8 	bl	80100c8 <f_findnext>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 800215e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <vTaskSdCard+0xf6>
 8002166:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1cb      	bne.n	8002106 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 800216e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8002176:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800217a:	4619      	mov	r1, r3
 800217c:	4891      	ldr	r0, [pc, #580]	; (80023c4 <vTaskSdCard+0x34c>)
 800217e:	f7ff fdcf 	bl	8001d20 <UsbPrint>
					res);
			goto resetSDCard;
 8002182:	e78a      	b.n	800209a <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8002184:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002188:	4a8f      	ldr	r2, [pc, #572]	; (80023c8 <vTaskSdCard+0x350>)
 800218a:	ca07      	ldmia	r2, {r0, r1, r2}
 800218c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8002190:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002194:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <vTaskSdCard+0x354>)
 8002196:	fba3 2301 	umull	r2, r3, r3, r1
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	1aca      	subs	r2, r1, r3
 80021a6:	b2d3      	uxtb	r3, r2
 80021a8:	3330      	adds	r3, #48	; 0x30
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80021b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021b4:	4a85      	ldr	r2, [pc, #532]	; (80023cc <vTaskSdCard+0x354>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	08d9      	lsrs	r1, r3, #3
 80021bc:	4b83      	ldr	r3, [pc, #524]	; (80023cc <vTaskSdCard+0x354>)
 80021be:	fba3 2301 	umull	r2, r3, r3, r1
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	1aca      	subs	r2, r1, r3
 80021ce:	b2d3      	uxtb	r3, r2
 80021d0:	3330      	adds	r3, #48	; 0x30
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 80021d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021dc:	4a7c      	ldr	r2, [pc, #496]	; (80023d0 <vTaskSdCard+0x358>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0959      	lsrs	r1, r3, #5
 80021e4:	4b79      	ldr	r3, [pc, #484]	; (80023cc <vTaskSdCard+0x354>)
 80021e6:	fba3 2301 	umull	r2, r3, r3, r1
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	1aca      	subs	r2, r1, r3
 80021f6:	b2d3      	uxtb	r3, r2
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8002200:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002204:	4619      	mov	r1, r3
 8002206:	4873      	ldr	r0, [pc, #460]	; (80023d4 <vTaskSdCard+0x35c>)
 8002208:	f7ff fd8a 	bl	8001d20 <UsbPrint>

		res = f_closedir(&dj);
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	4618      	mov	r0, r3
 8002212:	f00d feeb 	bl	800ffec <f_closedir>
 8002216:	4603      	mov	r3, r0
 8002218:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 800221c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8002224:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002228:	4619      	mov	r1, r3
 800222a:	486b      	ldr	r0, [pc, #428]	; (80023d8 <vTaskSdCard+0x360>)
 800222c:	f7ff fd78 	bl	8001d20 <UsbPrint>
			goto resetSDCard;
 8002230:	bf00      	nop
 8002232:	e732      	b.n	800209a <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8002234:	4869      	ldr	r0, [pc, #420]	; (80023dc <vTaskSdCard+0x364>)
 8002236:	f7ff fd73 	bl	8001d20 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800223a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800223e:	2212      	movs	r2, #18
 8002240:	4619      	mov	r1, r3
 8002242:	4867      	ldr	r0, [pc, #412]	; (80023e0 <vTaskSdCard+0x368>)
 8002244:	f00d f814 	bl	800f270 <f_open>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 800224e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8002256:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800225a:	4619      	mov	r1, r3
 800225c:	4861      	ldr	r0, [pc, #388]	; (80023e4 <vTaskSdCard+0x36c>)
 800225e:	f7ff fd5f 	bl	8001d20 <UsbPrint>
		goto resetSDCard;
 8002262:	e71a      	b.n	800209a <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8002264:	4860      	ldr	r0, [pc, #384]	; (80023e8 <vTaskSdCard+0x370>)
 8002266:	f7ff fd5b 	bl	8001d20 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <vTaskSdCard+0x368>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4619      	mov	r1, r3
 8002270:	485b      	ldr	r0, [pc, #364]	; (80023e0 <vTaskSdCard+0x368>)
 8002272:	f00d fbef 	bl	800fa54 <f_lseek>
 8002276:	4603      	mov	r3, r0
 8002278:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 800227c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8002284:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002288:	4619      	mov	r1, r3
 800228a:	4858      	ldr	r0, [pc, #352]	; (80023ec <vTaskSdCard+0x374>)
 800228c:	f7ff fd48 	bl	8001d20 <UsbPrint>
		goto resetSDCard;
 8002290:	e703      	b.n	800209a <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8002298:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <vTaskSdCard+0x378>)
 800229a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800229e:	461d      	mov	r5, r3
 80022a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022a8:	c407      	stmia	r4!, {r0, r1, r2}
 80022aa:	8023      	strh	r3, [r4, #0]
 80022ac:	3402      	adds	r4, #2
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	7023      	strb	r3, [r4, #0]
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80022be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fd ffa4 	bl	8000210 <strlen>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <vTaskSdCard+0x37c>)
 80022d0:	4843      	ldr	r0, [pc, #268]	; (80023e0 <vTaskSdCard+0x368>)
 80022d2:	f00d f992 	bl	800f5fa <f_write>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 80022dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80022e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022e8:	4619      	mov	r1, r3
 80022ea:	4843      	ldr	r0, [pc, #268]	; (80023f8 <vTaskSdCard+0x380>)
 80022ec:	f7ff fd18 	bl	8001d20 <UsbPrint>
		goto resetSDCard;
 80022f0:	e6d3      	b.n	800209a <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 80022f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f6:	2296      	movs	r2, #150	; 0x96
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f012 fdc3 	bl	8014e86 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <vTaskSdCard+0x384>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	2200      	movs	r2, #0
 800230e:	f00e fda1 	bl	8010e54 <osMessageQueueGet>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f3      	bne.n	8002300 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8002318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800231c:	4618      	mov	r0, r3
 800231e:	f7fd ff77 	bl	8000210 <strlen>
 8002322:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			if (num_bytes > 0) {
 8002326:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d015      	beq.n	800235a <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800232e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <vTaskSdCard+0x37c>)
 8002334:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002338:	4829      	ldr	r0, [pc, #164]	; (80023e0 <vTaskSdCard+0x368>)
 800233a:	f00d f95e 	bl	800f5fa <f_write>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8002344:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 800234c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002350:	4619      	mov	r1, r3
 8002352:	4829      	ldr	r0, [pc, #164]	; (80023f8 <vTaskSdCard+0x380>)
 8002354:	f7ff fce4 	bl	8001d20 <UsbPrint>
							res);
					goto resetSDCard;
 8002358:	e69f      	b.n	800209a <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 800235a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800235e:	3301      	adds	r3, #1
 8002360:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8002364:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002368:	2b7f      	cmp	r3, #127	; 0x7f
 800236a:	ddc9      	ble.n	8002300 <vTaskSdCard+0x288>
				msgCounter = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8002372:	4823      	ldr	r0, [pc, #140]	; (8002400 <vTaskSdCard+0x388>)
 8002374:	f7ff fcd4 	bl	8001d20 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002378:	2108      	movs	r1, #8
 800237a:	4822      	ldr	r0, [pc, #136]	; (8002404 <vTaskSdCard+0x38c>)
 800237c:	f002 fb21 	bl	80049c2 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8002380:	4817      	ldr	r0, [pc, #92]	; (80023e0 <vTaskSdCard+0x368>)
 8002382:	f00d fade 	bl	800f942 <f_sync>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 800238c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0b5      	beq.n	8002300 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8002394:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002398:	4619      	mov	r1, r3
 800239a:	481b      	ldr	r0, [pc, #108]	; (8002408 <vTaskSdCard+0x390>)
 800239c:	f7ff fcc0 	bl	8001d20 <UsbPrint>
					goto resetSDCard;
 80023a0:	e67b      	b.n	800209a <vTaskSdCard+0x22>
 80023a2:	bf00      	nop
 80023a4:	08016a44 	.word	0x08016a44
 80023a8:	08016a6c 	.word	0x08016a6c
 80023ac:	08016a90 	.word	0x08016a90
 80023b0:	20010f5c 	.word	0x20010f5c
 80023b4:	08016a94 	.word	0x08016a94
 80023b8:	200002fc 	.word	0x200002fc
 80023bc:	08016ac0 	.word	0x08016ac0
 80023c0:	08016ae4 	.word	0x08016ae4
 80023c4:	08016af0 	.word	0x08016af0
 80023c8:	08016b28 	.word	0x08016b28
 80023cc:	cccccccd 	.word	0xcccccccd
 80023d0:	51eb851f 	.word	0x51eb851f
 80023d4:	08016b34 	.word	0x08016b34
 80023d8:	08016b58 	.word	0x08016b58
 80023dc:	08016b88 	.word	0x08016b88
 80023e0:	20010d2c 	.word	0x20010d2c
 80023e4:	08016bac 	.word	0x08016bac
 80023e8:	08016bd8 	.word	0x08016bd8
 80023ec:	08016c00 	.word	0x08016c00
 80023f0:	08016ca4 	.word	0x08016ca4
 80023f4:	20011190 	.word	0x20011190
 80023f8:	08016c30 	.word	0x08016c30
 80023fc:	2000cbc8 	.word	0x2000cbc8
 8002400:	08016c5c 	.word	0x08016c5c
 8002404:	40020800 	.word	0x40020800
 8002408:	08016c7c 	.word	0x08016c7c

0800240c <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af04      	add	r7, sp, #16
 8002412:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8002414:	f00d ffd4 	bl	80103c0 <osKernelGetTickCount>
 8002418:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800241a:	f00d fff9 	bl	8010410 <osKernelGetTickFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <vTaskSensRead+0x144>)
 8002422:	fba3 2302 	umull	r2, r3, r3, r2
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8002432:	221c      	movs	r2, #28
 8002434:	4947      	ldr	r1, [pc, #284]	; (8002554 <vTaskSensRead+0x148>)
 8002436:	4848      	ldr	r0, [pc, #288]	; (8002558 <vTaskSensRead+0x14c>)
 8002438:	f006 f894 	bl	8008564 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 800243c:	4b47      	ldr	r3, [pc, #284]	; (800255c <vTaskSensRead+0x150>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	211e      	movs	r1, #30
 8002442:	4618      	mov	r0, r3
 8002444:	f00e f99c 	bl	8010780 <osMutexAcquire>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d110      	bne.n	8002470 <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 800244e:	4b44      	ldr	r3, [pc, #272]	; (8002560 <vTaskSensRead+0x154>)
 8002450:	4a40      	ldr	r2, [pc, #256]	; (8002554 <vTaskSensRead+0x148>)
 8002452:	ca07      	ldmia	r2, {r0, r1, r2}
 8002454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <vTaskSensRead+0x158>)
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <vTaskSensRead+0x148>)
 800245c:	4614      	mov	r4, r2
 800245e:	330c      	adds	r3, #12
 8002460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <vTaskSensRead+0x150>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f00e f9e6 	bl	801083c <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <vTaskSensRead+0x15c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	211e      	movs	r1, #30
 8002476:	4618      	mov	r0, r3
 8002478:	f00e f982 	bl	8010780 <osMutexAcquire>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d110      	bne.n	80024a4 <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <vTaskSensRead+0x160>)
 8002484:	4a33      	ldr	r2, [pc, #204]	; (8002554 <vTaskSensRead+0x148>)
 8002486:	ca07      	ldmia	r2, {r0, r1, r2}
 8002488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <vTaskSensRead+0x164>)
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <vTaskSensRead+0x148>)
 8002490:	4614      	mov	r4, r2
 8002492:	330c      	adds	r3, #12
 8002494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <vTaskSensRead+0x15c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f00e f9cc 	bl	801083c <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <vTaskSensRead+0x168>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	211e      	movs	r1, #30
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e f968 	bl	8010780 <osMutexAcquire>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d110      	bne.n	80024d8 <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <vTaskSensRead+0x16c>)
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <vTaskSensRead+0x148>)
 80024ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80024bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 80024c0:	4a2e      	ldr	r2, [pc, #184]	; (800257c <vTaskSensRead+0x170>)
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <vTaskSensRead+0x148>)
 80024c4:	4614      	mov	r4, r2
 80024c6:	330c      	adds	r3, #12
 80024c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <vTaskSensRead+0x168>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00e f9b2 	bl	801083c <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <vTaskSensRead+0x154>)
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <vTaskSensRead+0x154>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <vTaskSensRead+0x174>)
 80024e4:	f7ff fc1c 	bl	8001d20 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <vTaskSensRead+0x158>)
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 80024ee:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <vTaskSensRead+0x158>)
 80024f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 80024f6:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <vTaskSensRead+0x158>)
 80024fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 80024fe:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <vTaskSensRead+0x158>)
 8002502:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8002506:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <vTaskSensRead+0x158>)
 800250a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 800250e:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <vTaskSensRead+0x158>)
 8002512:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8002516:	4618      	mov	r0, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	9002      	str	r0, [sp, #8]
 800251e:	9101      	str	r1, [sp, #4]
 8002520:	9200      	str	r2, [sp, #0]
 8002522:	4633      	mov	r3, r6
 8002524:	462a      	mov	r2, r5
 8002526:	4621      	mov	r1, r4
 8002528:	4816      	ldr	r0, [pc, #88]	; (8002584 <vTaskSensRead+0x178>)
 800252a:	f7ff fbf9 	bl	8001d20 <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <vTaskSensRead+0x154>)
 8002530:	2201      	movs	r2, #1
 8002532:	2103      	movs	r1, #3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fb21 	bl	8001b7c <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <vTaskSensRead+0x158>)
 800253c:	2202      	movs	r2, #2
 800253e:	2103      	movs	r1, #3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fb1b 	bl	8001b7c <logSensor>

		osDelayUntil(tick_count);
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f00e f840 	bl	80105cc <osDelayUntil>
		tick_count += tick_update;
 800254c:	e76d      	b.n	800242a <vTaskSensRead+0x1e>
 800254e:	bf00      	nop
 8002550:	51eb851f 	.word	0x51eb851f
 8002554:	200002a4 	.word	0x200002a4
 8002558:	2000a90c 	.word	0x2000a90c
 800255c:	2000aa40 	.word	0x2000aa40
 8002560:	20000288 	.word	0x20000288
 8002564:	20000294 	.word	0x20000294
 8002568:	20010ce8 	.word	0x20010ce8
 800256c:	20000250 	.word	0x20000250
 8002570:	2000025c 	.word	0x2000025c
 8002574:	2000aa3c 	.word	0x2000aa3c
 8002578:	20000218 	.word	0x20000218
 800257c:	20000224 	.word	0x20000224
 8002580:	08016cc4 	.word	0x08016cc4
 8002584:	08016ce4 	.word	0x08016ce4

08002588 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8002590:	221c      	movs	r2, #28
 8002592:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_SPI_RxCpltCallback+0x1c>)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <HAL_SPI_RxCpltCallback+0x20>)
 8002596:	f005 ffe5 	bl	8008564 <HAL_SPI_Receive_IT>

}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002a4 	.word	0x200002a4
 80025a8:	2000a90c 	.word	0x2000a90c

080025ac <vTaskStateEst>:

void Do_Kalman_iteration(float u[NUMBER_INPUTS], float x_est[NUMBER_STATES], float P_est[NUMBER_STATES][NUMBER_STATES], float measurements[NUMBER_SENSOR]);



void vTaskStateEst(void *argument) {
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 80025b2:	af04      	add	r7, sp, #16
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;

	/* Variables */

	/* Fixed Variables */
	float Ad[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80025b8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80025bc:	2224      	movs	r2, #36	; 0x24
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f012 fc60 	bl	8014e86 <memset>
	float Ad_T[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80025c6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f012 fc59 	bl	8014e86 <memset>
	float Bd[NUMBER_STATES][NUMBER_INPUTS] = { 0 };
 80025d4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
	float Gd[NUMBER_STATES][NUMBER_NOISE] = { 0 };
 80025e0:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
	float Gd_T[NUMBER_NOISE][NUMBER_STATES] = { 0 };
 80025ec:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][NUMBER_STATES] = { 0 };
 80025f8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80025fc:	4618      	mov	r0, r3
 80025fe:	2348      	movs	r3, #72	; 0x48
 8002600:	461a      	mov	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	f012 fc3f 	bl	8014e86 <memset>
	float H_T[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8002608:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800260c:	4618      	mov	r0, r3
 800260e:	2348      	movs	r3, #72	; 0x48
 8002610:	461a      	mov	r2, r3
 8002612:	2100      	movs	r1, #0
 8002614:	f012 fc37 	bl	8014e86 <memset>
	float Q[NUMBER_NOISE][NUMBER_NOISE] = { 0 };
 8002618:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8002622:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8002626:	4618      	mov	r0, r3
 8002628:	2390      	movs	r3, #144	; 0x90
 800262a:	461a      	mov	r2, r3
 800262c:	2100      	movs	r1, #0
 800262e:	f012 fc2a 	bl	8014e86 <memset>


	/* State Variables */
	float u[NUMBER_INPUTS] = { 0 };
 8002632:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
	float x_priori[NUMBER_STATES] = { 0 };
 800263c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8002640:	461a      	mov	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	6053      	str	r3, [r2, #4]
 8002648:	6093      	str	r3, [r2, #8]
	float x_est[NUMBER_STATES] = { 0 };
 800264a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	6053      	str	r3, [r2, #4]
 8002656:	6093      	str	r3, [r2, #8]
	float P_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002658:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800265c:	4618      	mov	r0, r3
 800265e:	2324      	movs	r3, #36	; 0x24
 8002660:	461a      	mov	r2, r3
 8002662:	2100      	movs	r1, #0
 8002664:	f012 fc0f 	bl	8014e86 <memset>
	float P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002668:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800266c:	4618      	mov	r0, r3
 800266e:	2324      	movs	r3, #36	; 0x24
 8002670:	461a      	mov	r2, r3
 8002672:	2100      	movs	r1, #0
 8002674:	f012 fc07 	bl	8014e86 <memset>
	float State_Inovation[NUMBER_SENSOR] = { 0 };
 8002678:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800267c:	461a      	mov	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	6053      	str	r3, [r2, #4]
 8002684:	6093      	str	r3, [r2, #8]
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	6113      	str	r3, [r2, #16]
 800268a:	6153      	str	r3, [r2, #20]
	float Cov_Inovation[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800268c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002690:	4618      	mov	r0, r3
 8002692:	2390      	movs	r3, #144	; 0x90
 8002694:	461a      	mov	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f012 fbf5 	bl	8014e86 <memset>
	float Cov_Inovation_Inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800269c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80026a0:	4618      	mov	r0, r3
 80026a2:	2390      	movs	r3, #144	; 0x90
 80026a4:	461a      	mov	r2, r3
 80026a6:	2100      	movs	r1, #0
 80026a8:	f012 fbed 	bl	8014e86 <memset>
	float K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80026ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026b0:	4618      	mov	r0, r3
 80026b2:	2348      	movs	r3, #72	; 0x48
 80026b4:	461a      	mov	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f012 fbe5 	bl	8014e86 <memset>
	float measurements[NUMBER_SENSOR] = { 0 };
 80026bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026c0:	461a      	mov	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	6053      	str	r3, [r2, #4]
 80026c8:	6093      	str	r3, [r2, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	6113      	str	r3, [r2, #16]
 80026ce:	6153      	str	r3, [r2, #20]

	/* Placeholder Variables for increased speed */
	float Placeholder_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80026d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80026d4:	4618      	mov	r0, r3
 80026d6:	2324      	movs	r3, #36	; 0x24
 80026d8:	461a      	mov	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f012 fbd3 	bl	8014e86 <memset>
	float Placeholder_est[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80026e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026e4:	4618      	mov	r0, r3
 80026e6:	2390      	movs	r3, #144	; 0x90
 80026e8:	461a      	mov	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f012 fbcb 	bl	8014e86 <memset>
	float Placeholder_K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80026f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f4:	4618      	mov	r0, r3
 80026f6:	2348      	movs	r3, #72	; 0x48
 80026f8:	461a      	mov	r2, r3
 80026fa:	2100      	movs	r1, #0
 80026fc:	f012 fbc3 	bl	8014e86 <memset>
	float Placeholder_P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	4618      	mov	r0, r3
 8002706:	2324      	movs	r3, #36	; 0x24
 8002708:	461a      	mov	r2, r3
 800270a:	2100      	movs	r1, #0
 800270c:	f012 fbbb 	bl	8014e86 <memset>
	float Placeholder_measurement[2] = { 0 };
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	461a      	mov	r2, r3
 8002716:	2300      	movs	r3, #0
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	6053      	str	r3, [r2, #4]

	/* Initialise Variables */
	Initialise_Kalman(Ad, Bd, Gd, H, Q,	R, x_est, P_est);
 800271c:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8002720:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002724:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8002728:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 800272c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002730:	9303      	str	r3, [sp, #12]
 8002732:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4623      	mov	r3, r4
 8002746:	f000 fdc3 	bl	80032d0 <Initialise_Kalman>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800274a:	f00d fe39 	bl	80103c0 <osKernelGetTickCount>
 800274e:	f8c7 0534 	str.w	r0, [r7, #1332]	; 0x534
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8002752:	f00d fe5d 	bl	8010410 <osKernelGetTickFreq>
 8002756:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc
	for (;;) {
		tick_count += tick_update;
 800275a:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 800275e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8002762:	4413      	add	r3, r2
 8002764:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534

		/* Acquire the Sensor data */
		/* TODO: get correct input sequence */
		/* Sensor Board 1 */
		if(osMutexGetOwner(sb1_mutex) == NULL){
 8002768:	4bc8      	ldr	r3, [pc, #800]	; (8002a8c <vTaskStateEst+0x4e0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f00e f8b5 	bl	80108dc <osMutexGetOwner>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d128      	bne.n	80027ca <vTaskStateEst+0x21e>
			Placeholder_measurement[0] = (float) sb1_data.baro.pressure;
 8002778:	4bc5      	ldr	r3, [pc, #788]	; (8002a90 <vTaskStateEst+0x4e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb1_data.imu.acc_z;
 800278c:	4bc0      	ldr	r3, [pc, #768]	; (8002a90 <vTaskStateEst+0x4e4>)
 800278e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb1_mutex) == NULL){
 80027a2:	4bba      	ldr	r3, [pc, #744]	; (8002a8c <vTaskStateEst+0x4e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00e f898 	bl	80108dc <osMutexGetOwner>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <vTaskStateEst+0x21e>
				measurements[0] = Placeholder_measurement[0];
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027bc:	601a      	str	r2, [r3, #0]
				measurements[1] = Placeholder_measurement[1];
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027c8:	605a      	str	r2, [r3, #4]
			}
		}

		/* Sensor Board 2 */
		if(osMutexGetOwner(sb2_mutex) == NULL){
 80027ca:	4bb2      	ldr	r3, [pc, #712]	; (8002a94 <vTaskStateEst+0x4e8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00e f884 	bl	80108dc <osMutexGetOwner>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d128      	bne.n	800282c <vTaskStateEst+0x280>
			Placeholder_measurement[0] = (float) sb2_data.baro.pressure;
 80027da:	4baf      	ldr	r3, [pc, #700]	; (8002a98 <vTaskStateEst+0x4ec>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb2_data.imu.acc_z;
 80027ee:	4baa      	ldr	r3, [pc, #680]	; (8002a98 <vTaskStateEst+0x4ec>)
 80027f0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb2_mutex) == NULL){
 8002804:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <vTaskStateEst+0x4e8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f00e f867 	bl	80108dc <osMutexGetOwner>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <vTaskStateEst+0x280>
				measurements[2] = Placeholder_measurement[0];
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800281e:	609a      	str	r2, [r3, #8]
				measurements[3] = Placeholder_measurement[1];
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800282a:	60da      	str	r2, [r3, #12]
			}
		}

		/* Sensor Board 3 */
		if(osMutexGetOwner(sb3_mutex) == NULL){
 800282c:	4b9b      	ldr	r3, [pc, #620]	; (8002a9c <vTaskStateEst+0x4f0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f00e f853 	bl	80108dc <osMutexGetOwner>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d128      	bne.n	800288e <vTaskStateEst+0x2e2>
			Placeholder_measurement[0] = (float) sb3_data.baro.pressure;
 800283c:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <vTaskStateEst+0x4f4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb3_data.imu.acc_z;
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <vTaskStateEst+0x4f4>)
 8002852:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb3_mutex) == NULL){
 8002866:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <vTaskStateEst+0x4f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f00e f836 	bl	80108dc <osMutexGetOwner>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <vTaskStateEst+0x2e2>
				measurements[4] = Placeholder_measurement[0];
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002880:	611a      	str	r2, [r3, #16]
				measurements[5] = Placeholder_measurement[1];
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800288c:	615a      	str	r2, [r3, #20]
		/* End TODO */

		/* START KALMAN UPDATE */
		/* Prediction Step */
		/* Calculation of x_priori */
		memset(x_priori, 0, NUMBER_STATES*sizeof(x_priori[0]));
 800288e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8002892:	220c      	movs	r2, #12
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f012 faf5 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80028a2:	e071      	b.n	8002988 <vTaskStateEst+0x3dc>
			for(int i = 0; i < NUMBER_STATES; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80028aa:	e02f      	b.n	800290c <vTaskStateEst+0x360>
				x_priori[j] += Ad[j][i] * x_est[i];
 80028ac:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 80028b0:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80028d2:	4413      	add	r3, r2
 80028d4:	3ba0      	subs	r3, #160	; 0xa0
 80028d6:	edd3 6a00 	vldr	s13, [r3]
 80028da:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80028de:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f2:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 80028f6:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8002902:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8002906:	3301      	adds	r3, #1
 8002908:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800290c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8002910:	2b02      	cmp	r3, #2
 8002912:	ddcb      	ble.n	80028ac <vTaskStateEst+0x300>
			}
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800291a:	e02c      	b.n	8002976 <vTaskStateEst+0x3ca>
				x_priori[j] += Bd[j][k] * u[k];
 800291c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002920:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8002930:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800293c:	4413      	add	r3, r2
 800293e:	3bd0      	subs	r3, #208	; 0xd0
 8002940:	edd3 6a00 	vldr	s13, [r3]
 8002944:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8002948:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002960:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_INPUTS; k++){
 800296c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8002976:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800297a:	2b00      	cmp	r3, #0
 800297c:	ddce      	ble.n	800291c <vTaskStateEst+0x370>
		for(int j = 0; j < NUMBER_STATES; j++){
 800297e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002982:	3301      	adds	r3, #1
 8002984:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8002988:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800298c:	2b02      	cmp	r3, #2
 800298e:	dd89      	ble.n	80028a4 <vTaskStateEst+0x2f8>
			}
		}

		/* Calculation of P_priori */
		/* Ad * P_est_prior * Ad_T */
		memset(Placeholder_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_priori[0][0]));
 8002990:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002994:	2224      	movs	r2, #36	; 0x24
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f012 fa74 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80029a4:	e05b      	b.n	8002a5e <vTaskStateEst+0x4b2>
			for(int i = 0; i < NUMBER_STATES; i++){
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80029ac:	e04e      	b.n	8002a4c <vTaskStateEst+0x4a0>
				for(int k = 0; k < NUMBER_STATES; k++){
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80029b4:	e041      	b.n	8002a3a <vTaskStateEst+0x48e>
					Placeholder_priori[j][i] +=  Ad[j][k] * P_est[k][i];
 80029b6:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80029ba:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80029e8:	4413      	add	r3, r2
 80029ea:	3ba0      	subs	r3, #160	; 0xa0
 80029ec:	edd3 6a00 	vldr	s13, [r3]
 80029f0:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80029f4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002a18:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002a30:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002a34:	3301      	adds	r3, #1
 8002a36:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8002a3a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	ddb9      	ble.n	80029b6 <vTaskStateEst+0x40a>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002a42:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002a46:	3301      	adds	r3, #1
 8002a48:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002a4c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	ddac      	ble.n	80029ae <vTaskStateEst+0x402>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002a54:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8002a5e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	dd9f      	ble.n	80029a6 <vTaskStateEst+0x3fa>
				}
			}
		}
		memset(P_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(P_priori[0][0]));
 8002a66:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f012 fa09 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8002a7a:	e069      	b.n	8002b50 <vTaskStateEst+0x5a4>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8002a82:	e05c      	b.n	8002b3e <vTaskStateEst+0x592>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002a8a:	e04f      	b.n	8002b2c <vTaskStateEst+0x580>
 8002a8c:	2000aa3c 	.word	0x2000aa3c
 8002a90:	20000234 	.word	0x20000234
 8002a94:	20010ce8 	.word	0x20010ce8
 8002a98:	2000026c 	.word	0x2000026c
 8002a9c:	2000aa40 	.word	0x2000aa40
 8002aa0:	200002a4 	.word	0x200002a4
 8002aa4:	3dcccccd 	.word	0x3dcccccd
					P_priori[j][i] +=  Placeholder_priori[j][k] * Ad_T[k][i];
 8002aa8:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8002aac:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002ac8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	edd3 6a00 	vldr	s13, [r3]
 8002ae0:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8002af6:	4413      	add	r3, r2
 8002af8:	3bc4      	subs	r3, #196	; 0xc4
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8002b0a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002b22:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002b26:	3301      	adds	r3, #1
 8002b28:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002b2c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	ddb9      	ble.n	8002aa8 <vTaskStateEst+0x4fc>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002b34:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8002b3e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	dd9e      	ble.n	8002a84 <vTaskStateEst+0x4d8>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002b46:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8002b50:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	dd91      	ble.n	8002a7c <vTaskStateEst+0x4d0>
		/* TODO */

		/* Update Step */
		/* state_inov = measurement - H * x_priori */
		/* H*P_priori */
		memset(State_Inovation, 0, NUMBER_SENSOR*sizeof(State_Inovation[0]));
 8002b58:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f012 f990 	bl	8014e86 <memset>
		memset(Placeholder_est, 0, NUMBER_SENSOR*NUMBER_STATES*sizeof(Placeholder_est[0][0]));
 8002b66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b6a:	2248      	movs	r2, #72	; 0x48
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f012 f989 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8002b7a:	e091      	b.n	8002ca0 <vTaskStateEst+0x6f4>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8002b82:	e083      	b.n	8002c8c <vTaskStateEst+0x6e0>
				State_Inovation[j] += measurements[j] - H[j][i]*x_priori[i];
 8002b84:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002b88:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002b98:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	edd3 6a00 	vldr	s13, [r3]
 8002ba4:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002ba8:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f8d7 2508 	ldr.w	r2, [r7, #1288]	; 0x508
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	ed93 6a00 	vldr	s12, [r3]
 8002bc0:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002bc4:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002be0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8002bf2:	e042      	b.n	8002c7a <vTaskStateEst+0x6ce>
					Placeholder_est[j][i] += H[j][k] * P_priori[k][i];
 8002bf4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002bf8:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	f8d7 2508 	ldr.w	r2, [r7, #1288]	; 0x508
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	ed93 7a00 	vldr	s14, [r3]
 8002c12:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002c16:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	edd3 6a00 	vldr	s13, [r3]
 8002c2e:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8002c32:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f8d7 2508 	ldr.w	r2, [r7, #1288]	; 0x508
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002c56:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	f8d7 2508 	ldr.w	r2, [r7, #1288]	; 0x508
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002c70:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002c74:	3301      	adds	r3, #1
 8002c76:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8002c7a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	ddb8      	ble.n	8002bf4 <vTaskStateEst+0x648>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002c82:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8002c86:	3301      	adds	r3, #1
 8002c88:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8002c8c:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f77f af77 	ble.w	8002b84 <vTaskStateEst+0x5d8>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002c96:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8002ca0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	f77f af69 	ble.w	8002b7c <vTaskStateEst+0x5d0>
		}

		/* CHECK AGAIN STARTING HERE */

		/* S = H*P*H_T + R */
		memset(Cov_Inovation, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Cov_Inovation[0][0]));
 8002caa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002cae:	2290      	movs	r2, #144	; 0x90
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f012 f8e7 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002cbe:	e08e      	b.n	8002dde <vTaskStateEst+0x832>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8002cc6:	e080      	b.n	8002dca <vTaskStateEst+0x81e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8002cce:	e044      	b.n	8002d5a <vTaskStateEst+0x7ae>
					Cov_Inovation[j][i] += Placeholder_est[j][k] * H_T[k][i];
 8002cd0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002cd4:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	ed93 7a00 	vldr	s14, [r3]
 8002cee:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002cf2:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	edd3 6a00 	vldr	s13, [r3]
 8002d0c:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 8002d10:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002d36:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002d50:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8002d54:	3301      	adds	r3, #1
 8002d56:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8002d5a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	ddb6      	ble.n	8002cd0 <vTaskStateEst+0x724>
				}
				Cov_Inovation[j][i] += R[j][i];
 8002d62:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002d66:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	ed93 7a00 	vldr	s14, [r3]
 8002d80:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 8002d84:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002da6:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002dc0:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8002dca:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	f77f af7a 	ble.w	8002cc8 <vTaskStateEst+0x71c>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002dd4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002dde:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	f77f af6c 	ble.w	8002cc0 <vTaskStateEst+0x714>
			}
		}

		/* Calculate Pseudoinverse of Cov_Inovation */
		memset(Cov_Inovation_Inv, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8002de8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002dec:	2290      	movs	r2, #144	; 0x90
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f012 f848 	bl	8014e86 <memset>
		pinv(LAMBDA, Cov_Inovation, Cov_Inovation_Inv);
 8002df6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002dfa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	ed1f 0ad8 	vldr	s0, [pc, #-864]	; 8002aa4 <vTaskStateEst+0x4f8>
 8002e06:	f000 faf9 	bl	80033fc <pinv>

		/* K  = P_priori * H_T * Cov_Inovation_Inv */
		memset(Placeholder_K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8002e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e0e:	2248      	movs	r2, #72	; 0x48
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f012 f837 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8002e1e:	e05d      	b.n	8002edc <vTaskStateEst+0x930>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8002e26:	e050      	b.n	8002eca <vTaskStateEst+0x91e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8002e2e:	e043      	b.n	8002eb8 <vTaskStateEst+0x90c>
					Placeholder_K[j][i] += P_priori[j][k] * H_T[k][i];
 8002e30:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002e34:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	ed93 7a00 	vldr	s14, [r3]
 8002e4e:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8002e52:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	edd3 6a00 	vldr	s13, [r3]
 8002e6a:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 8002e6e:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002e94:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002eae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8002eb8:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	ddb7      	ble.n	8002e30 <vTaskStateEst+0x884>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002ec0:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8002eca:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	ddaa      	ble.n	8002e28 <vTaskStateEst+0x87c>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ed2:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8002edc:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	dd9d      	ble.n	8002e20 <vTaskStateEst+0x874>
				}
			}
		}
		memset(K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(K[0][0]));
 8002ee4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ee8:	2248      	movs	r2, #72	; 0x48
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f011 ffca 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8002ef8:	e05e      	b.n	8002fb8 <vTaskStateEst+0xa0c>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8002f00:	e051      	b.n	8002fa6 <vTaskStateEst+0x9fa>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8002f08:	e044      	b.n	8002f94 <vTaskStateEst+0x9e8>
					K[j][i] += Placeholder_K[j][k] * Cov_Inovation_Inv[k][i];
 8002f0a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002f0e:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	ed93 7a00 	vldr	s14, [r3]
 8002f28:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002f2c:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	edd3 6a00 	vldr	s13, [r3]
 8002f46:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8002f4a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002f70:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f8a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8002f94:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	ddb6      	ble.n	8002f0a <vTaskStateEst+0x95e>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002f9c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8002fa6:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	dda9      	ble.n	8002f02 <vTaskStateEst+0x956>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002fae:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8002fb8:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	dd9c      	ble.n	8002efa <vTaskStateEst+0x94e>
				}
			}
		}

		/* x_est = x_priori + K*measurements */
		memset(x_est, 0, NUMBER_STATES*sizeof(x_est[0]));
 8002fc0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f011 ff5c 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8002fd4:	e046      	b.n	8003064 <vTaskStateEst+0xab8>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8002fdc:	e039      	b.n	8003052 <vTaskStateEst+0xaa6>
				x_est[j] += x_priori[j] + K[j][i]*State_Inovation[i];
 8002fde:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8002fe2:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	ed93 7a00 	vldr	s14, [r3]
 8002fee:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002ff2:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	edd3 6a00 	vldr	s13, [r3]
 8002ffe:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003002:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	ed93 6a00 	vldr	s12, [r3]
 800301c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8003020:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003038:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800303c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8003048:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 800304c:	3301      	adds	r3, #1
 800304e:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8003052:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003056:	2b05      	cmp	r3, #5
 8003058:	ddc1      	ble.n	8002fde <vTaskStateEst+0xa32>
		for(int j = 0; j < NUMBER_STATES; j++){
 800305a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800305e:	3301      	adds	r3, #1
 8003060:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8003064:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8003068:	2b02      	cmp	r3, #2
 800306a:	ddb4      	ble.n	8002fd6 <vTaskStateEst+0xa2a>
			}
		}


		/* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
		memset(Placeholder_P_est, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_P_est[0][0]));
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f011 ff06 	bl	8014e86 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8003080:	e081      	b.n	8003186 <vTaskStateEst+0xbda>
			for(int i = 0; i < NUMBER_STATES; i++){
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8003088:	e074      	b.n	8003174 <vTaskStateEst+0xbc8>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8003090:	e041      	b.n	8003116 <vTaskStateEst+0xb6a>
					Placeholder_P_est[j][i] -= K[j][k] * H[k][i];
 8003092:	f107 0110 	add.w	r1, r7, #16
 8003096:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	ed93 7a00 	vldr	s14, [r3]
 80030ae:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80030b2:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	edd3 6a00 	vldr	s13, [r3]
 80030cc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80030d0:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f0:	f107 0110 	add.w	r1, r7, #16
 80030f4:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 800310c:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8003110:	3301      	adds	r3, #1
 8003112:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8003116:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800311a:	2b05      	cmp	r3, #5
 800311c:	ddb9      	ble.n	8003092 <vTaskStateEst+0xae6>
				}
				if(j == i){
 800311e:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8003122:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8003126:	429a      	cmp	r2, r3
 8003128:	d11f      	bne.n	800316a <vTaskStateEst+0xbbe>
					Placeholder_P_est[j][i] += 1;
 800312a:	f107 0110 	add.w	r1, r7, #16
 800312e:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800314e:	f107 0110 	add.w	r1, r7, #16
 8003152:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 800316a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800316e:	3301      	adds	r3, #1
 8003170:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8003174:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8003178:	2b02      	cmp	r3, #2
 800317a:	dd86      	ble.n	800308a <vTaskStateEst+0xade>
		for(int j = 0; j < NUMBER_STATES; j++){
 800317c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8003180:	3301      	adds	r3, #1
 8003182:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8003186:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800318a:	2b02      	cmp	r3, #2
 800318c:	f77f af79 	ble.w	8003082 <vTaskStateEst+0xad6>
				}
			}
		}
		for(int j = 0; j < NUMBER_STATES; j++){
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8003196:	e05a      	b.n	800324e <vTaskStateEst+0xca2>
			for(int i = 0; i < NUMBER_STATES; i++){
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800319e:	e04d      	b.n	800323c <vTaskStateEst+0xc90>
				for(int k = 0; k < NUMBER_STATES; k++){
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 80031a6:	e040      	b.n	800322a <vTaskStateEst+0xc7e>
					P_est[j][i] += Placeholder_P_est[j][k] * P_priori[k][i];
 80031a8:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80031ac:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	ed93 7a00 	vldr	s14, [r3]
 80031c4:	f107 0110 	add.w	r1, r7, #16
 80031c8:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	edd3 6a00 	vldr	s13, [r3]
 80031e0:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 80031e4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003204:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8003208:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8003220:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800322a:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800322e:	2b02      	cmp	r3, #2
 8003230:	ddba      	ble.n	80031a8 <vTaskStateEst+0xbfc>
			for(int i = 0; i < NUMBER_STATES; i++){
 8003232:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800323c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8003240:	2b02      	cmp	r3, #2
 8003242:	ddad      	ble.n	80031a0 <vTaskStateEst+0xbf4>
		for(int j = 0; j < NUMBER_STATES; j++){
 8003244:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8003248:	3301      	adds	r3, #1
 800324a:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800324e:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8003252:	2b02      	cmp	r3, #2
 8003254:	dda0      	ble.n	8003198 <vTaskStateEst+0xbec>
			}
		}

		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <vTaskStateEst+0xd18>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	210a      	movs	r1, #10
 800325c:	4618      	mov	r0, r3
 800325e:	f00d fa8f 	bl	8010780 <osMutexAcquire>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d120      	bne.n	80032aa <vTaskStateEst+0xcfe>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data.altitude_above_GL = (int32_t)(x_est[0]*1000);
 8003268:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80032c8 <vTaskStateEst+0xd1c>
 8003274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327c:	ee17 2a90 	vmov	r2, s15
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <vTaskStateEst+0xd20>)
 8003282:	605a      	str	r2, [r3, #4]
			state_est_data.velocity = (int32_t)(x_est[1]*1000);
 8003284:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003288:	edd3 7a01 	vldr	s15, [r3, #4]
 800328c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80032c8 <vTaskStateEst+0xd1c>
 8003290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003298:	ee17 2a90 	vmov	r2, s15
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <vTaskStateEst+0xd20>)
 800329e:	601a      	str	r2, [r3, #0]
			osMutexRelease(state_est_mutex);
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <vTaskStateEst+0xd18>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00d fac9 	bl	801083c <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 80032aa:	f00d f889 	bl	80103c0 <osKernelGetTickCount>
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <vTaskStateEst+0xd20>)
 80032b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032b4:	f7fe fd08 	bl	8001cc8 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80032b8:	f8d7 0534 	ldr.w	r0, [r7, #1332]	; 0x534
 80032bc:	f00d f986 	bl	80105cc <osDelayUntil>
		tick_count += tick_update;
 80032c0:	f7ff ba4b 	b.w	800275a <vTaskStateEst+0x1ae>
 80032c4:	2000aa44 	.word	0x2000aa44
 80032c8:	447a0000 	.word	0x447a0000
 80032cc:	200002c0 	.word	0x200002c0

080032d0 <Initialise_Kalman>:

void Initialise_Kalman(float Ad[NUMBER_STATES][NUMBER_STATES],
		float Bd[NUMBER_STATES][NUMBER_INPUTS], float Gd[NUMBER_STATES][NUMBER_NOISE],
		float H[NUMBER_SENSOR][NUMBER_STATES], float Q[NUMBER_NOISE][NUMBER_NOISE],
		float R[NUMBER_SENSOR][NUMBER_SENSOR], float x_est[NUMBER_STATES],
		float P_est[NUMBER_STATES][NUMBER_STATES]){
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b0d6      	sub	sp, #344	; 0x158
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	f107 040c 	add.w	r4, r7, #12
 80032da:	6020      	str	r0, [r4, #0]
 80032dc:	f107 0008 	add.w	r0, r7, #8
 80032e0:	6001      	str	r1, [r0, #0]
 80032e2:	1d39      	adds	r1, r7, #4
 80032e4:	600a      	str	r2, [r1, #0]
 80032e6:	463a      	mov	r2, r7
 80032e8:	6013      	str	r3, [r2, #0]

	float A_init[NUMBER_STATES][NUMBER_STATES] = {{0, 1, 0}, {0, 0, 1}, {0, 0, 0}};
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <Initialise_Kalman+0x128>)
 80032ec:	f507 749a 	add.w	r4, r7, #308	; 0x134
 80032f0:	461d      	mov	r5, r3
 80032f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fa:	682b      	ldr	r3, [r5, #0]
 80032fc:	6023      	str	r3, [r4, #0]
	float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{0}, {1}, {0}};
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800330a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	float G_init[NUMBER_STATES][NUMBER_NOISE] = {{0}, {1}, {0}};
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800331e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003322:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	float H_init[NUMBER_SENSOR][NUMBER_STATES] = {{1, 0, 0},{1, 0, 0}, {1, 0, 0}};
 800332e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003332:	2248      	movs	r2, #72	; 0x48
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f011 fda5 	bl	8014e86 <memset>
 800333c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003344:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800334c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float Q_init[NUMBER_NOISE][NUMBER_NOISE] = {{ 1 }};
 8003354:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float R_init[NUMBER_SENSOR][NUMBER_SENSOR] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
 800335c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003360:	4618      	mov	r0, r3
 8003362:	2390      	movs	r3, #144	; 0x90
 8003364:	461a      	mov	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f011 fd8d 	bl	8014e86 <memset>
 800336c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003370:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800337a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800337e:	61da      	str	r2, [r3, #28]
 8003380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003384:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003388:	639a      	str	r2, [r3, #56]	; 0x38

	float x_est_init[NUMBER_STATES] = {0, 0};
 800338a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	6053      	str	r3, [r2, #4]
 8003396:	6093      	str	r3, [r2, #8]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	4618      	mov	r0, r3
 800339e:	2324      	movs	r3, #36	; 0x24
 80033a0:	461a      	mov	r2, r3
 80033a2:	2100      	movs	r1, #0
 80033a4:	f011 fd6f 	bl	8014e86 <memset>

	H = H_init;
 80033a8:	463b      	mov	r3, r7
 80033aa:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80033ae:	601a      	str	r2, [r3, #0]
	Q = Q_init;
 80033b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	R = R_init;
 80033b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	Ad = A_init;
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80033c8:	601a      	str	r2, [r3, #0]
	Bd = B_init;
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80033d2:	601a      	str	r2, [r3, #0]
	Gd = G_init;
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80033da:	601a      	str	r2, [r3, #0]
	x_est = x_est_init;
 80033dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033e0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	P_est = P_est_init;
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174



}
 80033ec:	bf00      	nop
 80033ee:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	08016d24 	.word	0x08016d24

080033fc <pinv>:

void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0f8      	sub	sp, #480	; 0x1e0
 8003400:	af00      	add	r7, sp, #0
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	ed83 0a00 	vstr	s0, [r3]
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	6018      	str	r0, [r3, #0]
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	6019      	str	r1, [r3, #0]

	/* More Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003418:	2290      	movs	r2, #144	; 0x90
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f011 fd32 	bl	8014e86 <memset>
	float Matrix_to_inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003422:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003426:	4618      	mov	r0, r3
 8003428:	2390      	movs	r3, #144	; 0x90
 800342a:	461a      	mov	r2, r3
 800342c:	2100      	movs	r1, #0
 800342e:	f011 fd2a 	bl	8014e86 <memset>
	float First_Inverse[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	4618      	mov	r0, r3
 8003438:	2390      	movs	r3, #144	; 0x90
 800343a:	461a      	mov	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	f011 fd22 	bl	8014e86 <memset>

	/* Get Transpose */
	for(int j = 0; j < NUMBER_SENSOR; j++){
 8003442:	2300      	movs	r3, #0
 8003444:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003448:	e030      	b.n	80034ac <pinv+0xb0>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003450:	e023      	b.n	800349a <pinv+0x9e>
			Matrix_T[j][i] = Matrix[i][j];
 8003452:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	461a      	mov	r2, r3
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	441a      	add	r2, r3
 8003468:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800348a:	4413      	add	r3, r2
 800348c:	3bb0      	subs	r3, #176	; 0xb0
 800348e:	6019      	str	r1, [r3, #0]
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003490:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003494:	3301      	adds	r3, #1
 8003496:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800349a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800349e:	2b05      	cmp	r3, #5
 80034a0:	ddd7      	ble.n	8003452 <pinv+0x56>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80034a2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80034a6:	3301      	adds	r3, #1
 80034a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034ac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	ddca      	ble.n	800344a <pinv+0x4e>
		}
	}

	/* Calculate the Matrix to be inversed A*A_T*lambda^2*eye(size(A))*/
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80034ba:	e090      	b.n	80035de <pinv+0x1e2>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80034c2:	e082      	b.n	80035ca <pinv+0x1ce>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80034ca:	e075      	b.n	80035b8 <pinv+0x1bc>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 80034cc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80034d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	461a      	mov	r2, r3
 80034f8:	f107 0308 	add.w	r3, r7, #8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	441a      	add	r2, r3
 8003500:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edd3 6a00 	vldr	s13, [r3]
 800350c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003524:	4413      	add	r3, r2
 8003526:	3bb0      	subs	r3, #176	; 0xb0
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003538:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 8003552:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8003556:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800355a:	429a      	cmp	r2, r3
 800355c:	d127      	bne.n	80035ae <pinv+0x1b2>
					Matrix_to_inv[j][i] += lambda * lambda;
 800355e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003562:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	ed93 7a00 	vldr	s14, [r3]
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	edd3 6a00 	vldr	s13, [r3]
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003590:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003594:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80035ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80035b2:	3301      	adds	r3, #1
 80035b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80035b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80035bc:	2b05      	cmp	r3, #5
 80035be:	dd85      	ble.n	80034cc <pinv+0xd0>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80035c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035c4:	3301      	adds	r3, #1
 80035c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80035ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	f77f af78 	ble.w	80034c4 <pinv+0xc8>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80035d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80035d8:	3301      	adds	r3, #1
 80035da:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80035de:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	f77f af6a 	ble.w	80034bc <pinv+0xc0>
			}
		}
	}

	/* Calculate inverse */
	cofactor(Matrix_to_inv, First_Inverse, NUMBER_SENSOR);
 80035e8:	f107 0210 	add.w	r2, r7, #16
 80035ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035f0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f962 	bl	80038c0 <cofactor>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003602:	e061      	b.n	80036c8 <pinv+0x2cc>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800360a:	e054      	b.n	80036b6 <pinv+0x2ba>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003612:	e047      	b.n	80036a4 <pinv+0x2a8>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 8003614:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	461a      	mov	r2, r3
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	441a      	add	r2, r3
 8003628:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800364c:	4413      	add	r3, r2
 800364e:	3bb0      	subs	r3, #176	; 0xb0
 8003650:	edd3 6a00 	vldr	s13, [r3]
 8003654:	f107 0110 	add.w	r1, r7, #16
 8003658:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003676:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	461a      	mov	r2, r3
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	441a      	add	r2, r3
 800368a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800369a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800369e:	3301      	adds	r3, #1
 80036a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	ddb3      	ble.n	8003614 <pinv+0x218>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80036ac:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80036b0:	3301      	adds	r3, #1
 80036b2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	dda6      	ble.n	800360c <pinv+0x210>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80036be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036c2:	3301      	adds	r3, #1
 80036c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80036c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	dd99      	ble.n	8003604 <pinv+0x208>
			}
		}
	}


}
 80036d0:	bf00      	nop
 80036d2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	ed2d 8b02 	vpush	{d8}
 80036e0:	b0ae      	sub	sp, #184	; 0xb8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	ed87 0a00 	vstr	s0, [r7]
	float s = 1, det = 0, b[NUMBER_SENSOR][NUMBER_SENSOR];
 80036ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80036ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int i, j, m, n, c;
	if (size == 1)
 80036fa:	edd7 7a00 	vldr	s15, [r7]
 80036fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003702:	eef4 7a47 	vcmp.f32	s15, s14
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d102      	bne.n	8003712 <determinant+0x38>
	{
		return (a[0][0]);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	e0cd      	b.n	80038ae <determinant+0x1d4>
	}
	else
	{
		det = 0;
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (c = 0; c < size; c++)
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003720:	e0b5      	b.n	800388e <determinant+0x1b4>
		{
			m = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			n = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			for (i = 0;i < size; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003734:	e071      	b.n	800381a <determinant+0x140>
			{
				for (j = 0 ;j < size; j++)
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800373c:	e05b      	b.n	80037f6 <determinant+0x11c>
				{
					b[i][j] = 0;
 800373e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003756:	4413      	add	r3, r2
 8003758:	3bac      	subs	r3, #172	; 0xac
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8003760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003764:	2b00      	cmp	r3, #0
 8003766:	d041      	beq.n	80037ec <determinant+0x112>
 8003768:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003770:	429a      	cmp	r2, r3
 8003772:	d03b      	beq.n	80037ec <determinant+0x112>
					{
						b[m][n] = a[i][j];
 8003774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	441a      	add	r2, r3
 8003786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80037a8:	4413      	add	r3, r2
 80037aa:	3bac      	subs	r3, #172	; 0xac
 80037ac:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 80037ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ba:	edd7 7a00 	vldr	s15, [r7]
 80037be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80037c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	d505      	bpl.n	80037dc <determinant+0x102>
							n++;
 80037d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d4:	3301      	adds	r3, #1
 80037d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037da:	e007      	b.n	80037ec <determinant+0x112>
						else
						{
							n = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
							m++;
 80037e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037e6:	3301      	adds	r3, #1
 80037e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				for (j = 0 ;j < size; j++)
 80037ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f0:	3301      	adds	r3, #1
 80037f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003802:	ed97 7a00 	vldr	s14, [r7]
 8003806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	dc96      	bgt.n	800373e <determinant+0x64>
			for (i = 0;i < size; i++)
 8003810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003814:	3301      	adds	r3, #1
 8003816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800381a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003826:	ed97 7a00 	vldr	s14, [r7]
 800382a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	dc80      	bgt.n	8003736 <determinant+0x5c>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, size - 1));
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	ed93 8a00 	vldr	s16, [r3]
 8003842:	edd7 7a00 	vldr	s15, [r7]
 8003846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	eeb0 0a67 	vmov.f32	s0, s15
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff3f 	bl	80036da <determinant>
 800385c:	eef0 7a40 	vmov.f32	s15, s0
 8003860:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003864:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
			s = -1 * s;
 8003878:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800387c:	eef1 7a67 	vneg.f32	s15, s15
 8003880:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		for (c = 0; c < size; c++)
 8003884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003888:	3301      	adds	r3, #1
 800388a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800388e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389a:	ed97 7a00 	vldr	s14, [r7]
 800389e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	f73f af3c 	bgt.w	8003722 <determinant+0x48>
		}
	}

	return (det);
 80038aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038ae:	ee07 3a90 	vmov	s15, r3
}
 80038b2:	eeb0 0a67 	vmov.f32	s0, s15
 80038b6:	37b8      	adds	r7, #184	; 0xb8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	ecbd 8b02 	vpop	{d8}
 80038be:	bd80      	pop	{r7, pc}

080038c0 <cofactor>:

void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b0d3      	sub	sp, #332	; 0x14c
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	6018      	str	r0, [r3, #0]
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	6019      	str	r1, [r3, #0]
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	ed83 0a00 	vstr	s0, [r3]
	float b[NUMBER_SENSOR][NUMBER_SENSOR], fac[NUMBER_SENSOR][NUMBER_SENSOR];
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80038de:	e0dc      	b.n	8003a9a <cofactor+0x1da>
	{
		for (p = 0;p < size; p++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80038e6:	e0c4      	b.n	8003a72 <cofactor+0x1b2>
		{
			m = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			n = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			for (i = 0;i < size; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80038fa:	e066      	b.n	80039ca <cofactor+0x10a>
			{
				for (j = 0;j < size; j++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003902:	e04f      	b.n	80039a4 <cofactor+0xe4>
				{
					if (i != q && j != p)
 8003904:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003908:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800390c:	429a      	cmp	r2, r3
 800390e:	d044      	beq.n	800399a <cofactor+0xda>
 8003910:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003914:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003918:	429a      	cmp	r2, r3
 800391a:	d03e      	beq.n	800399a <cofactor+0xda>
					{
						b[m][n] = num[i][j];
 800391c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	461a      	mov	r2, r3
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	441a      	add	r2, r3
 8003932:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003954:	4413      	add	r3, r2
 8003956:	3ba8      	subs	r3, #168	; 0xa8
 8003958:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 800395a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d505      	bpl.n	800398a <cofactor+0xca>
							n++;
 800397e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003982:	3301      	adds	r3, #1
 8003984:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003988:	e007      	b.n	800399a <cofactor+0xda>
						else
						{
							n = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
							m++;
 8003990:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003994:	3301      	adds	r3, #1
 8003996:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				for (j = 0;j < size; j++)
 800399a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800399e:	3301      	adds	r3, #1
 80039a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80039a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	dca1      	bgt.n	8003904 <cofactor+0x44>
			for (i = 0;i < size; i++)
 80039c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039c4:	3301      	adds	r3, #1
 80039c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80039ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	ed93 7a00 	vldr	s14, [r3]
 80039dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	dc8a      	bgt.n	80038fc <cofactor+0x3c>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, size - 1);
 80039e6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80039ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039ee:	4413      	add	r3, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fdb7 	bl	8000564 <__aeabi_i2d>
 80039f6:	4603      	mov	r3, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	ec44 3b11 	vmov	d1, r3, r4
 80039fe:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8003ae0 <cofactor+0x220>
 8003a02:	f011 ff0d 	bl	8015820 <pow>
 8003a06:	ec56 5b10 	vmov	r5, r6, d0
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a18:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fe5a 	bl	80036da <determinant>
 8003a26:	ee10 3a10 	vmov	r3, s0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fdac 	bl	8000588 <__aeabi_f2d>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	f7fc fdfc 	bl	8000638 <__aeabi_dmul>
 8003a40:	4603      	mov	r3, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	4618      	mov	r0, r3
 8003a46:	4621      	mov	r1, r4
 8003a48:	f7fd f8c6 	bl	8000bd8 <__aeabi_d2f>
 8003a4c:	f107 0110 	add.w	r1, r7, #16
 8003a50:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	6018      	str	r0, [r3, #0]
		for (p = 0;p < size; p++)
 8003a68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003a72:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	ed93 7a00 	vldr	s14, [r3]
 8003a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8c:	f73f af2c 	bgt.w	80038e8 <cofactor+0x28>
	for (q = 0;q < size; q++)
 8003a90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003a94:	3301      	adds	r3, #1
 8003a96:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003a9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	ed93 7a00 	vldr	s14, [r3]
 8003aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	f73f af14 	bgt.w	80038e0 <cofactor+0x20>
		}
	}
	transpose(inverse, num, fac, size);
 8003ab8:	1d3a      	adds	r2, r7, #4
 8003aba:	f107 0010 	add.w	r0, r7, #16
 8003abe:	f107 010c 	add.w	r1, r7, #12
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	ed92 0a00 	vldr	s0, [r2]
 8003aca:	4602      	mov	r2, r0
 8003acc:	6809      	ldr	r1, [r1, #0]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	f000 f80a 	bl	8003ae8 <transpose>
}
 8003ad4:	bf00      	nop
 8003ad6:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	bff00000 	.word	0xbff00000

08003ae8 <transpose>:
/*Finding transpose of matrix*/
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ac      	sub	sp, #176	; 0xb0
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	ed87 0a00 	vstr	s0, [r7]
	int i, j;
	float b[NUMBER_SENSOR][NUMBER_SENSOR], d;

	for (i = 0;i < size; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003afe:	e037      	b.n	8003b70 <transpose+0x88>
	{
		for (j = 0;j < size; j++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b06:	e021      	b.n	8003b4c <transpose+0x64>
		{
			b[i][j] = fac[j][i];
 8003b08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	441a      	add	r2, r3
 8003b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3b9c      	subs	r3, #156	; 0x9c
 8003b40:	6019      	str	r1, [r3, #0]
		for (j = 0;j < size; j++)
 8003b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b46:	3301      	adds	r3, #1
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b58:	ed97 7a00 	vldr	s14, [r7]
 8003b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	dcd0      	bgt.n	8003b08 <transpose+0x20>
	for (i = 0;i < size; i++)
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b7c:	ed97 7a00 	vldr	s14, [r7]
 8003b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	dcba      	bgt.n	8003b00 <transpose+0x18>
		}
	}
	d = determinant(num, size);
 8003b8a:	ed97 0a00 	vldr	s0, [r7]
 8003b8e:	68b8      	ldr	r0, [r7, #8]
 8003b90:	f7ff fda3 	bl	80036da <determinant>
 8003b94:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	for (i = 0;i < size; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b9e:	e03d      	b.n	8003c1c <transpose+0x134>
	{
		for (j = 0;j < size; j++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ba6:	e027      	b.n	8003bf8 <transpose+0x110>
		{
			inverse[i][j] = b[i][j] / d;
 8003ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b9c      	subs	r3, #156	; 0x9c
 8003bc4:	edd3 6a00 	vldr	s13, [r3]
 8003bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	441a      	add	r2, r3
 8003bda:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8003bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c04:	ed97 7a00 	vldr	s14, [r7]
 8003c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	dcca      	bgt.n	8003ba8 <transpose+0xc0>
	for (i = 0;i < size; i++)
 8003c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c16:	3301      	adds	r3, #1
 8003c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c28:	ed97 7a00 	vldr	s14, [r7]
 8003c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	dcb4      	bgt.n	8003ba0 <transpose+0xb8>
		}
	}
}
 8003c36:	bf00      	nop
 8003c38:	37b0      	adds	r7, #176	; 0xb0
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c46:	e003      	b.n	8003c50 <LoopCopyDataInit>

08003c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c4e:	3104      	adds	r1, #4

08003c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c58:	d3f6      	bcc.n	8003c48 <CopyDataInit>
  ldr  r2, =_sbss
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c5c:	e002      	b.n	8003c64 <LoopFillZerobss>

08003c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c60:	f842 3b04 	str.w	r3, [r2], #4

08003c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c68:	d3f9      	bcc.n	8003c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c6a:	f7fd ff51 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c6e:	f011 f8cb 	bl	8014e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c72:	f7fd f981 	bl	8000f78 <main>
  bx  lr    
 8003c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003c7c:	08016fe0 	.word	0x08016fe0
  ldr  r0, =_sdata
 8003c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c84:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8003c88:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8003c8c:	20012f1c 	.word	0x20012f1c

08003c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c90:	e7fe      	b.n	8003c90 <ADC_IRQHandler>

08003c92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c96:	2003      	movs	r0, #3
 8003c98:	f000 f8f7 	bl	8003e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7fd fe49 	bl	8001934 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ca2:	f7fd fc39 	bl	8001518 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_IncTick+0x20>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_IncTick+0x24>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_IncTick+0x24>)
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000008 	.word	0x20000008
 8003cd0:	20011194 	.word	0x20011194

08003cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_GetTick+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20011194 	.word	0x20011194

08003cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7ff ffee 	bl	8003cd4 <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d005      	beq.n	8003d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_Delay+0x40>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d12:	bf00      	nop
 8003d14:	f7ff ffde 	bl	8003cd4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d8f7      	bhi.n	8003d14 <HAL_Delay+0x28>
  {
  }
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000008 	.word	0x20000008

08003d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <__NVIC_SetPriorityGrouping+0x40>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <__NVIC_SetPriorityGrouping+0x40>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00
 8003d74:	05fa0000 	.word	0x05fa0000

08003d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <__NVIC_GetPriorityGrouping+0x18>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	f003 0307 	and.w	r3, r3, #7
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db0b      	blt.n	8003dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	f003 021f 	and.w	r2, r3, #31
 8003dac:	4907      	ldr	r1, [pc, #28]	; (8003dcc <__NVIC_EnableIRQ+0x38>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2001      	movs	r0, #1
 8003db6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000e100 	.word	0xe000e100

08003dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	6039      	str	r1, [r7, #0]
 8003dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db0a      	blt.n	8003dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	490c      	ldr	r1, [pc, #48]	; (8003e1c <__NVIC_SetPriority+0x4c>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	440b      	add	r3, r1
 8003df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df8:	e00a      	b.n	8003e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4908      	ldr	r1, [pc, #32]	; (8003e20 <__NVIC_SetPriority+0x50>)
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	3b04      	subs	r3, #4
 8003e08:	0112      	lsls	r2, r2, #4
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	761a      	strb	r2, [r3, #24]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000e100 	.word	0xe000e100
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f1c3 0307 	rsb	r3, r3, #7
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	bf28      	it	cs
 8003e42:	2304      	movcs	r3, #4
 8003e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d902      	bls.n	8003e54 <NVIC_EncodePriority+0x30>
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3b03      	subs	r3, #3
 8003e52:	e000      	b.n	8003e56 <NVIC_EncodePriority+0x32>
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	401a      	ands	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	fa01 f303 	lsl.w	r3, r1, r3
 8003e76:	43d9      	mvns	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	4313      	orrs	r3, r2
         );
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ff4c 	bl	8003d30 <__NVIC_SetPriorityGrouping>
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb2:	f7ff ff61 	bl	8003d78 <__NVIC_GetPriorityGrouping>
 8003eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	6978      	ldr	r0, [r7, #20]
 8003ebe:	f7ff ffb1 	bl	8003e24 <NVIC_EncodePriority>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff80 	bl	8003dd0 <__NVIC_SetPriority>
}
 8003ed0:	bf00      	nop
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff54 	bl	8003d94 <__NVIC_EnableIRQ>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f00:	f7ff fee8 	bl	8003cd4 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e099      	b.n	8004044 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f30:	e00f      	b.n	8003f52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f32:	f7ff fecf 	bl	8003cd4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d908      	bls.n	8003f52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2203      	movs	r2, #3
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e078      	b.n	8004044 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e8      	bne.n	8003f32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <HAL_DMA_Init+0x158>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d107      	bne.n	8003fbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0307 	bic.w	r3, r3, #7
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d117      	bne.n	8004016 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 faa5 	bl	8004548 <DMA_CheckFifoParam>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004012:	2301      	movs	r3, #1
 8004014:	e016      	b.n	8004044 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa5c 	bl	80044dc <DMA_CalcBaseAndBitshift>
 8004024:	4603      	mov	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	223f      	movs	r2, #63	; 0x3f
 800402e:	409a      	lsls	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	f010803f 	.word	0xf010803f

08004050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_DMA_Start_IT+0x26>
 8004072:	2302      	movs	r3, #2
 8004074:	e048      	b.n	8004108 <HAL_DMA_Start_IT+0xb8>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d137      	bne.n	80040fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9ee 	bl	8004480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	223f      	movs	r2, #63	; 0x3f
 80040aa:	409a      	lsls	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0216 	orr.w	r2, r2, #22
 80040be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0208 	orr.w	r2, r2, #8
 80040e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e005      	b.n	8004106 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d004      	beq.n	800412e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e00c      	b.n	8004148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2205      	movs	r2, #5
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004160:	4b92      	ldr	r3, [pc, #584]	; (80043ac <HAL_DMA_IRQHandler+0x258>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a92      	ldr	r2, [pc, #584]	; (80043b0 <HAL_DMA_IRQHandler+0x25c>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	2208      	movs	r2, #8
 8004180:	409a      	lsls	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2208      	movs	r2, #8
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d012      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f043 0202 	orr.w	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2204      	movs	r2, #4
 80041fc:	409a      	lsls	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2204      	movs	r2, #4
 800421a:	409a      	lsls	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2210      	movs	r2, #16
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d043      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03c      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2210      	movs	r2, #16
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d018      	beq.n	8004296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d024      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
 8004282:	e01f      	b.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e016      	b.n	80042c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0208 	bic.w	r2, r2, #8
 80042b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2220      	movs	r2, #32
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 808e 	beq.w	80043f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8086 	beq.w	80043f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2220      	movs	r2, #32
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d136      	bne.n	800436c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0216 	bic.w	r2, r2, #22
 800430c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_DMA_IRQHandler+0x1da>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0208 	bic.w	r2, r2, #8
 800433c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	223f      	movs	r2, #63	; 0x3f
 8004344:	409a      	lsls	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d07d      	beq.n	800445e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
        }
        return;
 800436a:	e078      	b.n	800445e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01c      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	2b00      	cmp	r3, #0
 800438e:	d030      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e02b      	b.n	80043f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d027      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
 80043aa:	e022      	b.n	80043f2 <HAL_DMA_IRQHandler+0x29e>
 80043ac:	20000000 	.word	0x20000000
 80043b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0210 	bic.w	r2, r2, #16
 80043d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d032      	beq.n	8004460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d022      	beq.n	800444c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2205      	movs	r2, #5
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3301      	adds	r3, #1
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	429a      	cmp	r2, r3
 8004428:	d307      	bcc.n	800443a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f2      	bne.n	800441e <HAL_DMA_IRQHandler+0x2ca>
 8004438:	e000      	b.n	800443c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800443a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
 800445c:	e000      	b.n	8004460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800445e:	bf00      	nop
    }
  }
}
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800449c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d108      	bne.n	80044c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044be:	e007      	b.n	80044d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3b10      	subs	r3, #16
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <DMA_CalcBaseAndBitshift+0x60>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f6:	4a12      	ldr	r2, [pc, #72]	; (8004540 <DMA_CalcBaseAndBitshift+0x64>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d908      	bls.n	800451c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <DMA_CalcBaseAndBitshift+0x68>)
 8004512:	4013      	ands	r3, r2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	659a      	str	r2, [r3, #88]	; 0x58
 800451a:	e006      	b.n	800452a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <DMA_CalcBaseAndBitshift+0x68>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	aaaaaaab 	.word	0xaaaaaaab
 8004540:	08016eb8 	.word	0x08016eb8
 8004544:	fffffc00 	.word	0xfffffc00

08004548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11f      	bne.n	80045a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d855      	bhi.n	8004614 <DMA_CheckFifoParam+0xcc>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <DMA_CheckFifoParam+0x28>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	08004593 	.word	0x08004593
 8004578:	08004581 	.word	0x08004581
 800457c:	08004615 	.word	0x08004615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d045      	beq.n	8004618 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e042      	b.n	8004618 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459a:	d13f      	bne.n	800461c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a0:	e03c      	b.n	800461c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d121      	bne.n	80045f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d836      	bhi.n	8004620 <DMA_CheckFifoParam+0xd8>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <DMA_CheckFifoParam+0x70>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045cf 	.word	0x080045cf
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	080045e1 	.word	0x080045e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e02f      	b.n	800462e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d024      	beq.n	8004624 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045de:	e021      	b.n	8004624 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e8:	d11e      	bne.n	8004628 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ee:	e01b      	b.n	8004628 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d902      	bls.n	80045fc <DMA_CheckFifoParam+0xb4>
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d003      	beq.n	8004602 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045fa:	e018      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e015      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      break;
 8004612:	e00b      	b.n	800462c <DMA_CheckFifoParam+0xe4>
      break;
 8004614:	bf00      	nop
 8004616:	e00a      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 8004618:	bf00      	nop
 800461a:	e008      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 800461c:	bf00      	nop
 800461e:	e006      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 8004620:	bf00      	nop
 8004622:	e004      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;   
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 800462c:	bf00      	nop
    }
  } 
  
  return status; 
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e175      	b.n	8004948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	f040 8164 	bne.w	8004942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d00b      	beq.n	800469a <HAL_GPIO_Init+0x5e>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800468e:	2b11      	cmp	r3, #17
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b12      	cmp	r3, #18
 8004698:	d130      	bne.n	80046fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d0:	2201      	movs	r2, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 0201 	and.w	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x100>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b12      	cmp	r3, #18
 800473a:	d123      	bne.n	8004784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	08da      	lsrs	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3208      	adds	r2, #8
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	08da      	lsrs	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3208      	adds	r2, #8
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0203 	and.w	r2, r3, #3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80be 	beq.w	8004942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_GPIO_Init+0x320>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a64      	ldr	r2, [pc, #400]	; (800495c <HAL_GPIO_Init+0x320>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b62      	ldr	r3, [pc, #392]	; (800495c <HAL_GPIO_Init+0x320>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047de:	4a60      	ldr	r2, [pc, #384]	; (8004960 <HAL_GPIO_Init+0x324>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a57      	ldr	r2, [pc, #348]	; (8004964 <HAL_GPIO_Init+0x328>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d037      	beq.n	800487a <HAL_GPIO_Init+0x23e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a56      	ldr	r2, [pc, #344]	; (8004968 <HAL_GPIO_Init+0x32c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d031      	beq.n	8004876 <HAL_GPIO_Init+0x23a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a55      	ldr	r2, [pc, #340]	; (800496c <HAL_GPIO_Init+0x330>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02b      	beq.n	8004872 <HAL_GPIO_Init+0x236>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a54      	ldr	r2, [pc, #336]	; (8004970 <HAL_GPIO_Init+0x334>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d025      	beq.n	800486e <HAL_GPIO_Init+0x232>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a53      	ldr	r2, [pc, #332]	; (8004974 <HAL_GPIO_Init+0x338>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <HAL_GPIO_Init+0x22e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a52      	ldr	r2, [pc, #328]	; (8004978 <HAL_GPIO_Init+0x33c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d019      	beq.n	8004866 <HAL_GPIO_Init+0x22a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a51      	ldr	r2, [pc, #324]	; (800497c <HAL_GPIO_Init+0x340>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_GPIO_Init+0x226>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a50      	ldr	r2, [pc, #320]	; (8004980 <HAL_GPIO_Init+0x344>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00d      	beq.n	800485e <HAL_GPIO_Init+0x222>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a4f      	ldr	r2, [pc, #316]	; (8004984 <HAL_GPIO_Init+0x348>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <HAL_GPIO_Init+0x21e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a4e      	ldr	r2, [pc, #312]	; (8004988 <HAL_GPIO_Init+0x34c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <HAL_GPIO_Init+0x21a>
 8004852:	2309      	movs	r3, #9
 8004854:	e012      	b.n	800487c <HAL_GPIO_Init+0x240>
 8004856:	230a      	movs	r3, #10
 8004858:	e010      	b.n	800487c <HAL_GPIO_Init+0x240>
 800485a:	2308      	movs	r3, #8
 800485c:	e00e      	b.n	800487c <HAL_GPIO_Init+0x240>
 800485e:	2307      	movs	r3, #7
 8004860:	e00c      	b.n	800487c <HAL_GPIO_Init+0x240>
 8004862:	2306      	movs	r3, #6
 8004864:	e00a      	b.n	800487c <HAL_GPIO_Init+0x240>
 8004866:	2305      	movs	r3, #5
 8004868:	e008      	b.n	800487c <HAL_GPIO_Init+0x240>
 800486a:	2304      	movs	r3, #4
 800486c:	e006      	b.n	800487c <HAL_GPIO_Init+0x240>
 800486e:	2303      	movs	r3, #3
 8004870:	e004      	b.n	800487c <HAL_GPIO_Init+0x240>
 8004872:	2302      	movs	r3, #2
 8004874:	e002      	b.n	800487c <HAL_GPIO_Init+0x240>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_GPIO_Init+0x240>
 800487a:	2300      	movs	r3, #0
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	f002 0203 	and.w	r2, r2, #3
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	4093      	lsls	r3, r2
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800488c:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_GPIO_Init+0x324>)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	3302      	adds	r3, #2
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <HAL_GPIO_Init+0x350>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048be:	4a33      	ldr	r2, [pc, #204]	; (800498c <HAL_GPIO_Init+0x350>)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_GPIO_Init+0x350>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e8:	4a28      	ldr	r2, [pc, #160]	; (800498c <HAL_GPIO_Init+0x350>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_GPIO_Init+0x350>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <HAL_GPIO_Init+0x350>)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004918:	4b1c      	ldr	r3, [pc, #112]	; (800498c <HAL_GPIO_Init+0x350>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800493c:	4a13      	ldr	r2, [pc, #76]	; (800498c <HAL_GPIO_Init+0x350>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3301      	adds	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	f67f ae86 	bls.w	800465c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004950:	bf00      	nop
 8004952:	3724      	adds	r7, #36	; 0x24
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40023800 	.word	0x40023800
 8004960:	40013800 	.word	0x40013800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40021400 	.word	0x40021400
 800497c:	40021800 	.word	0x40021800
 8004980:	40021c00 	.word	0x40021c00
 8004984:	40022000 	.word	0x40022000
 8004988:	40022400 	.word	0x40022400
 800498c:	40013c00 	.word	0x40013c00

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049da:	887b      	ldrh	r3, [r7, #2]
 80049dc:	041a      	lsls	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80049e2:	e002      	b.n	80049ea <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049e4:	887a      	ldrh	r2, [r7, #2]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f8:	b08f      	sub	sp, #60	; 0x3c
 80049fa:	af0a      	add	r7, sp, #40	; 0x28
 80049fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e116      	b.n	8004c36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f00f fe98 	bl	8014758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 fc25 	bl	800a296 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	687e      	ldr	r6, [r7, #4]
 8004a54:	466d      	mov	r5, sp
 8004a56:	f106 0410 	add.w	r4, r6, #16
 8004a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a6a:	1d33      	adds	r3, r6, #4
 8004a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a6e:	6838      	ldr	r0, [r7, #0]
 8004a70:	f005 fb06 	bl	800a080 <USB_CoreInit>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e0d7      	b.n	8004c36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 fc13 	bl	800a2b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e04a      	b.n	8004b2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	333d      	adds	r3, #61	; 0x3d
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	333c      	adds	r3, #60	; 0x3c
 8004abc:	7bfa      	ldrb	r2, [r7, #15]
 8004abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	b298      	uxth	r0, r3
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3342      	adds	r3, #66	; 0x42
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	333f      	adds	r3, #63	; 0x3f
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	3344      	adds	r3, #68	; 0x44
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3348      	adds	r3, #72	; 0x48
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	3350      	adds	r3, #80	; 0x50
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3af      	bcc.n	8004a98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e044      	b.n	8004bc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d3b5      	bcc.n	8004b3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	687e      	ldr	r6, [r7, #4]
 8004bda:	466d      	mov	r5, sp
 8004bdc:	f106 0410 	add.w	r4, r6, #16
 8004be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004be8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bf0:	1d33      	adds	r3, r6, #4
 8004bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf4:	6838      	ldr	r0, [r7, #0]
 8004bf6:	f005 fb89 	bl	800a30c <USB_DevInit>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e014      	b.n	8004c36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d102      	bne.n	8004c2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 f881 	bl	8005d2c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f006 fbd8 	bl	800b3e4 <USB_DevDisconnect>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_PCD_Start+0x16>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e012      	b.n	8004c7a <HAL_PCD_Start+0x3c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f006 fba7 	bl	800b3b4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f005 fb02 	bl	800a274 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c82:	b590      	push	{r4, r7, lr}
 8004c84:	b08d      	sub	sp, #52	; 0x34
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f006 fc4e 	bl	800b53a <USB_GetMode>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 83ca 	bne.w	800543a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f006 fbb2 	bl	800b414 <USB_ReadInterrupts>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 83c0 	beq.w	8005438 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f006 fba9 	bl	800b414 <USB_ReadInterrupts>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d107      	bne.n	8004cdc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f002 0202 	and.w	r2, r2, #2
 8004cda:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f006 fb97 	bl	800b414 <USB_ReadInterrupts>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d161      	bne.n	8004db4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0210 	bic.w	r2, r2, #16
 8004cfe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	0c5b      	lsrs	r3, r3, #17
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d124      	bne.n	8004d76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d035      	beq.n	8004da4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6a38      	ldr	r0, [r7, #32]
 8004d4c:	f006 fa0f 	bl	800b16e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d5c:	441a      	add	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d6e:	441a      	add	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	619a      	str	r2, [r3, #24]
 8004d74:	e016      	b.n	8004da4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	0c5b      	lsrs	r3, r3, #17
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d110      	bne.n	8004da4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d88:	2208      	movs	r2, #8
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6a38      	ldr	r0, [r7, #32]
 8004d8e:	f006 f9ee 	bl	800b16e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9e:	441a      	add	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0210 	orr.w	r2, r2, #16
 8004db2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f006 fb2b 	bl	800b414 <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dc8:	d16e      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f006 fb31 	bl	800b43a <USB_ReadDevAllOutEpInterrupt>
 8004dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004dda:	e062      	b.n	8004ea2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d057      	beq.n	8004e96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f006 fb56 	bl	800b4a2 <USB_ReadDevOutEPInterrupt>
 8004df6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2301      	movs	r3, #1
 8004e12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fdde 	bl	80059d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	2308      	movs	r3, #8
 8004e36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fed8 	bl	8005bf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	461a      	mov	r2, r3
 8004e58:	2310      	movs	r3, #16
 8004e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	461a      	mov	r2, r3
 8004e74:	2320      	movs	r3, #32
 8004e76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3301      	adds	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d199      	bne.n	8004ddc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f006 fab1 	bl	800b414 <USB_ReadInterrupts>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ebc:	f040 80c0 	bne.w	8005040 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f006 fad2 	bl	800b46e <USB_ReadDevAllInEpInterrupt>
 8004eca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ed0:	e0b2      	b.n	8005038 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a7 	beq.w	800502c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f006 faf8 	bl	800b4de <USB_ReadDevInEPInterrupt>
 8004eee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d057      	beq.n	8004faa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2201      	movs	r2, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d132      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	3348      	adds	r3, #72	; 0x48
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4403      	add	r3, r0
 8004f58:	3344      	adds	r3, #68	; 0x44
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4419      	add	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4403      	add	r3, r0
 8004f6c:	3348      	adds	r3, #72	; 0x48
 8004f6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x31c>
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3350      	adds	r3, #80	; 0x50
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f96:	461a      	mov	r2, r3
 8004f98:	2101      	movs	r1, #1
 8004f9a:	f006 fb01 	bl	800b5a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f00f fc5a 	bl	801485e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2310      	movs	r3, #16
 8004fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2340      	movs	r3, #64	; 0x40
 8004ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	2302      	movs	r3, #2
 8005018:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fc48 	bl	80058bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	3301      	adds	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	f47f af49 	bne.w	8004ed2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f006 f9e5 	bl	800b414 <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005054:	d122      	bne.n	800509c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005070:	2b01      	cmp	r3, #1
 8005072:	d108      	bne.n	8005086 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800507c:	2100      	movs	r1, #0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f00f fe3c 	bl	8014cfc <HAL_PCDEx_LPM_Callback>
 8005084:	e002      	b.n	800508c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f00f fc60 	bl	801494c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800509a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f006 f9b7 	bl	800b414 <USB_ReadInterrupts>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d112      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f00f fc1c 	bl	8014900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050d6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 f999 	bl	800b414 <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ec:	d121      	bne.n	8005132 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80050fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d111      	bne.n	800512c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	f003 020f 	and.w	r2, r3, #15
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005122:	2101      	movs	r1, #1
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f00f fde9 	bl	8014cfc <HAL_PCDEx_LPM_Callback>
 800512a:	e002      	b.n	8005132 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f00f fbe7 	bl	8014900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f006 f96c 	bl	800b414 <USB_ReadInterrupts>
 800513c:	4603      	mov	r3, r0
 800513e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	f040 80c7 	bne.w	80052d8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2110      	movs	r1, #16
 8005164:	4618      	mov	r0, r3
 8005166:	f005 fa3f 	bl	800a5e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	e056      	b.n	800521e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	461a      	mov	r2, r3
 800517e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005182:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005216:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	3301      	adds	r3, #1
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	429a      	cmp	r2, r3
 8005226:	d3a3      	bcc.n	8005170 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005236:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800523a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2b00      	cmp	r3, #0
 8005242:	d016      	beq.n	8005272 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005254:	f043 030b 	orr.w	r3, r3, #11
 8005258:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526a:	f043 030b 	orr.w	r3, r3, #11
 800526e:	6453      	str	r3, [r2, #68]	; 0x44
 8005270:	e015      	b.n	800529e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	4619      	mov	r1, r3
 8005282:	f242 032b 	movw	r3, #8235	; 0x202b
 8005286:	4313      	orrs	r3, r2
 8005288:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005298:	f043 030b 	orr.w	r3, r3, #11
 800529c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052c2:	461a      	mov	r2, r3
 80052c4:	f006 f96c 	bl	800b5a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80052d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f006 f899 	bl	800b414 <USB_ReadInterrupts>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ec:	d124      	bne.n	8005338 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f006 f930 	bl	800b558 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f005 f9d4 	bl	800a6aa <USB_GetDevSpeed>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681c      	ldr	r4, [r3, #0]
 800530e:	f001 f999 	bl	8006644 <HAL_RCC_GetHCLKFreq>
 8005312:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	4620      	mov	r0, r4
 800531e:	f004 ff07 	bl	800a130 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f00f fac3 	bl	80148ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005336:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f006 f869 	bl	800b414 <USB_ReadInterrupts>
 8005342:	4603      	mov	r3, r0
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10a      	bne.n	8005362 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f00f faa0 	bl	8014892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 0208 	and.w	r2, r2, #8
 8005360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f006 f854 	bl	800b414 <USB_ReadInterrupts>
 800536c:	4603      	mov	r3, r0
 800536e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005376:	d10f      	bne.n	8005398 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	b2db      	uxtb	r3, r3
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f00f fb02 	bl	801498c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f006 f839 	bl	800b414 <USB_ReadInterrupts>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ac:	d10f      	bne.n	80053ce <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f00f fad5 	bl	8014968 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80053cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f006 f81e 	bl	800b414 <USB_ReadInterrupts>
 80053d8:	4603      	mov	r3, r0
 80053da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d10a      	bne.n	80053fa <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f00f fae3 	bl	80149b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f006 f808 	bl	800b414 <USB_ReadInterrupts>
 8005404:	4603      	mov	r3, r0
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d115      	bne.n	800543a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f00f fad3 	bl	80149cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e000      	b.n	800543a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005438:	bf00      	nop
    }
  }
}
 800543a:	3734      	adds	r7, #52	; 0x34
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}

08005440 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_PCD_SetAddress+0x1a>
 8005456:	2302      	movs	r3, #2
 8005458:	e013      	b.n	8005482 <HAL_PCD_SetAddress+0x42>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f005 ff78 	bl	800b368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	4608      	mov	r0, r1
 8005494:	4611      	mov	r1, r2
 8005496:	461a      	mov	r2, r3
 8005498:	4603      	mov	r3, r0
 800549a:	70fb      	strb	r3, [r7, #3]
 800549c:	460b      	mov	r3, r1
 800549e:	803b      	strh	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da0f      	bge.n	80054d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 020f 	and.w	r2, r3, #15
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3338      	adds	r3, #56	; 0x38
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	3304      	adds	r3, #4
 80054c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	705a      	strb	r2, [r3, #1]
 80054ce:	e00f      	b.n	80054f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	3304      	adds	r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054fc:	883a      	ldrh	r2, [r7, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	78ba      	ldrb	r2, [r7, #2]
 8005506:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800551a:	78bb      	ldrb	r3, [r7, #2]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d102      	bne.n	8005526 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_PCD_EP_Open+0xaa>
 8005530:	2302      	movs	r3, #2
 8005532:	e00e      	b.n	8005552 <HAL_PCD_EP_Open+0xc8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	4618      	mov	r0, r3
 8005544:	f005 f8d6 	bl	800a6f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005550:	7afb      	ldrb	r3, [r7, #11]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800556a:	2b00      	cmp	r3, #0
 800556c:	da0f      	bge.n	800558e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3338      	adds	r3, #56	; 0x38
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	705a      	strb	r2, [r3, #1]
 800558c:	e00f      	b.n	80055ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 020f 	and.w	r2, r3, #15
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	3304      	adds	r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_EP_Close+0x6e>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e00e      	b.n	80055e6 <HAL_PCD_EP_Close+0x8c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f005 f914 	bl	800a804 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b086      	sub	sp, #24
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	460b      	mov	r3, r1
 80055fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	3304      	adds	r3, #4
 8005616:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2da      	uxtb	r2, r3
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800564a:	7afb      	ldrb	r3, [r7, #11]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	6979      	ldr	r1, [r7, #20]
 8005662:	f005 fbf7 	bl	800ae54 <USB_EP0StartXfer>
 8005666:	e008      	b.n	800567a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	f005 f9a1 	bl	800a9bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	f003 020f 	and.w	r2, r3, #15
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80056a6:	681b      	ldr	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056c4:	7afb      	ldrb	r3, [r7, #11]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3338      	adds	r3, #56	; 0x38
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2201      	movs	r2, #1
 80056f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f4:	7afb      	ldrb	r3, [r7, #11]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d102      	bne.n	800570e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	6979      	ldr	r1, [r7, #20]
 8005726:	f005 fb95 	bl	800ae54 <USB_EP0StartXfer>
 800572a:	e008      	b.n	800573e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	f005 f93f 	bl	800a9bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	d901      	bls.n	8005766 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e050      	b.n	8005808 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da0f      	bge.n	800578e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	3338      	adds	r3, #56	; 0x38
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	3304      	adds	r3, #4
 8005784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	705a      	strb	r2, [r3, #1]
 800578c:	e00d      	b.n	80057aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_PCD_EP_SetStall+0x82>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e01e      	b.n	8005808 <HAL_PCD_EP_SetStall+0xc0>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	4618      	mov	r0, r3
 80057da:	f005 fcf1 	bl	800b1c0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	b2d9      	uxtb	r1, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057f8:	461a      	mov	r2, r3
 80057fa:	f005 fed1 	bl	800b5a0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d901      	bls.n	800582e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e042      	b.n	80058b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800582e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	da0f      	bge.n	8005856 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3338      	adds	r3, #56	; 0x38
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	3304      	adds	r3, #4
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	705a      	strb	r2, [r3, #1]
 8005854:	e00f      	b.n	8005876 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_PCD_EP_ClrStall+0x86>
 8005892:	2302      	movs	r3, #2
 8005894:	e00e      	b.n	80058b4 <HAL_PCD_EP_ClrStall+0xa4>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f005 fcf9 	bl	800b29c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	3338      	adds	r3, #56	; 0x38
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4413      	add	r3, r2
 80058e0:	3304      	adds	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d901      	bls.n	80058f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e06c      	b.n	80059ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	429a      	cmp	r2, r3
 8005908:	d902      	bls.n	8005910 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3303      	adds	r3, #3
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005918:	e02b      	b.n	8005972 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	429a      	cmp	r2, r3
 800592e:	d902      	bls.n	8005936 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3303      	adds	r3, #3
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68d9      	ldr	r1, [r3, #12]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800594e:	b2db      	uxtb	r3, r3
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4603      	mov	r3, r0
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f005 fbd5 	bl	800b104 <USB_WritePacket>

    ep->xfer_buff  += len;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	b29b      	uxth	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	d809      	bhi.n	800599c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005990:	429a      	cmp	r2, r3
 8005992:	d203      	bcs.n	800599c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1be      	bne.n	800591a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d811      	bhi.n	80059cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	2201      	movs	r2, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	6939      	ldr	r1, [r7, #16]
 80059c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c8:	4013      	ands	r3, r2
 80059ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	333c      	adds	r3, #60	; 0x3c
 80059f0:	3304      	adds	r3, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	f040 80a0 	bne.w	8005b50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d015      	beq.n	8005a46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a72      	ldr	r2, [pc, #456]	; (8005be8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	f240 80dd 	bls.w	8005bde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 80d7 	beq.w	8005bde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a42:	6093      	str	r3, [r2, #8]
 8005a44:	e0cb      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2320      	movs	r3, #32
 8005a60:	6093      	str	r3, [r2, #8]
 8005a62:	e0bc      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80b7 	bne.w	8005bde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a5d      	ldr	r2, [pc, #372]	; (8005be8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d90f      	bls.n	8005a98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a94:	6093      	str	r3, [r2, #8]
 8005a96:	e0a2      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005aaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	0159      	lsls	r1, r3, #5
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005abe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4403      	add	r3, r0
 8005ace:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005ad2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4403      	add	r3, r0
 8005af6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4419      	add	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4403      	add	r3, r0
 8005b0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d114      	bne.n	8005b42 <PCD_EP_OutXfrComplete_int+0x16a>
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d108      	bne.n	8005b42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	f005 fd2f 	bl	800b5a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f00e fe6d 	bl	8014828 <HAL_PCD_DataOutStageCallback>
 8005b4e:	e046      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a26      	ldr	r2, [pc, #152]	; (8005bec <PCD_EP_OutXfrComplete_int+0x214>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d124      	bne.n	8005ba2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b74:	6093      	str	r3, [r2, #8]
 8005b76:	e032      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2320      	movs	r3, #32
 8005b92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f00e fe44 	bl	8014828 <HAL_PCD_DataOutStageCallback>
 8005ba0:	e01d      	b.n	8005bde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d114      	bne.n	8005bd2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f005 fce7 	bl	800b5a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f00e fe25 	bl	8014828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	4f54300a 	.word	0x4f54300a
 8005bec:	4f54310a 	.word	0x4f54310a

08005bf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	333c      	adds	r3, #60	; 0x3c
 8005c08:	3304      	adds	r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d90e      	bls.n	8005c44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f00e fddd 	bl	8014804 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d90c      	bls.n	8005c6c <PCD_EP_OutSetupPacket_int+0x7c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d108      	bne.n	8005c6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c64:	461a      	mov	r2, r3
 8005c66:	2101      	movs	r1, #1
 8005c68:	f005 fc9a 	bl	800b5a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	4f54300a 	.word	0x4f54300a

08005c7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c9a:	883b      	ldrh	r3, [r7, #0]
 8005c9c:	0419      	lsls	r1, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ca8:	e028      	b.n	8005cfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	e00d      	b.n	8005cda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	3340      	adds	r3, #64	; 0x40
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3ec      	bcc.n	8005cbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ce4:	883b      	ldrh	r3, [r7, #0]
 8005ce6:	0418      	lsls	r0, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	4302      	orrs	r2, r0
 8005cf4:	3340      	adds	r3, #64	; 0x40
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	10000003 	.word	0x10000003

08005d74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e291      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8087 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d98:	4b96      	ldr	r3, [pc, #600]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d00c      	beq.n	8005dbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da4:	4b93      	ldr	r3, [pc, #588]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d112      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x62>
 8005db0:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbe:	4b8d      	ldr	r3, [pc, #564]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d06c      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x130>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d168      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e26b      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_OscConfig+0x7a>
 8005de0:	4b84      	ldr	r3, [pc, #528]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a83      	ldr	r2, [pc, #524]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e02e      	b.n	8005e4c <HAL_RCC_OscConfig+0xd8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x9c>
 8005df6:	4b7f      	ldr	r3, [pc, #508]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a7e      	ldr	r2, [pc, #504]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b7c      	ldr	r3, [pc, #496]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a7b      	ldr	r2, [pc, #492]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e01d      	b.n	8005e4c <HAL_RCC_OscConfig+0xd8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCC_OscConfig+0xc0>
 8005e1a:	4b76      	ldr	r3, [pc, #472]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a75      	ldr	r2, [pc, #468]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4b73      	ldr	r3, [pc, #460]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a72      	ldr	r2, [pc, #456]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	e00b      	b.n	8005e4c <HAL_RCC_OscConfig+0xd8>
 8005e34:	4b6f      	ldr	r3, [pc, #444]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6e      	ldr	r2, [pc, #440]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a6b      	ldr	r2, [pc, #428]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d013      	beq.n	8005e7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fd ff3e 	bl	8003cd4 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e5c:	f7fd ff3a 	bl	8003cd4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b64      	cmp	r3, #100	; 0x64
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e21f      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0xe8>
 8005e7a:	e014      	b.n	8005ea6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fd ff2a 	bl	8003cd4 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e84:	f7fd ff26 	bl	8003cd4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b64      	cmp	r3, #100	; 0x64
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e20b      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e96:	4b57      	ldr	r3, [pc, #348]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x110>
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d069      	beq.n	8005f86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eb2:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b4d      	ldr	r3, [pc, #308]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d11c      	bne.n	8005f04 <HAL_RCC_OscConfig+0x190>
 8005eca:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d116      	bne.n	8005f04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_RCC_OscConfig+0x17a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e1df      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eee:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	493d      	ldr	r1, [pc, #244]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f02:	e040      	b.n	8005f86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d023      	beq.n	8005f54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f0c:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a38      	ldr	r2, [pc, #224]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fd fedc 	bl	8003cd4 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f20:	f7fd fed8 	bl	8003cd4 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e1bd      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f32:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3e:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4929      	ldr	r1, [pc, #164]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]
 8005f52:	e018      	b.n	8005f86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f54:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	f023 0301 	bic.w	r3, r3, #1
 8005f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fd feb8 	bl	8003cd4 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f68:	f7fd feb4 	bl	8003cd4 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e199      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1f0      	bne.n	8005f68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d038      	beq.n	8006004 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d019      	beq.n	8005fce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f9a:	4b16      	ldr	r3, [pc, #88]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fd fe95 	bl	8003cd4 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fae:	f7fd fe91 	bl	8003cd4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e176      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x23a>
 8005fcc:	e01a      	b.n	8006004 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd2:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <HAL_RCC_OscConfig+0x280>)
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fda:	f7fd fe7b 	bl	8003cd4 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe2:	f7fd fe77 	bl	8003cd4 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d903      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e15c      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
 8005ff4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff8:	4b91      	ldr	r3, [pc, #580]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8005ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ee      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80a4 	beq.w	800615a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006012:	4b8b      	ldr	r3, [pc, #556]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800601e:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4a87      	ldr	r2, [pc, #540]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	; 0x40
 800602a:	4b85      	ldr	r3, [pc, #532]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603a:	4b82      	ldr	r3, [pc, #520]	; (8006244 <HAL_RCC_OscConfig+0x4d0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d118      	bne.n	8006078 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006046:	4b7f      	ldr	r3, [pc, #508]	; (8006244 <HAL_RCC_OscConfig+0x4d0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a7e      	ldr	r2, [pc, #504]	; (8006244 <HAL_RCC_OscConfig+0x4d0>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006052:	f7fd fe3f 	bl	8003cd4 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605a:	f7fd fe3b 	bl	8003cd4 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b64      	cmp	r3, #100	; 0x64
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e120      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606c:	4b75      	ldr	r3, [pc, #468]	; (8006244 <HAL_RCC_OscConfig+0x4d0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d106      	bne.n	800608e <HAL_RCC_OscConfig+0x31a>
 8006080:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a6e      	ldr	r2, [pc, #440]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
 800608c:	e02d      	b.n	80060ea <HAL_RCC_OscConfig+0x376>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0x33c>
 8006096:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a69      	ldr	r2, [pc, #420]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
 80060a2:	4b67      	ldr	r3, [pc, #412]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a66      	ldr	r2, [pc, #408]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	6713      	str	r3, [r2, #112]	; 0x70
 80060ae:	e01c      	b.n	80060ea <HAL_RCC_OscConfig+0x376>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCC_OscConfig+0x35e>
 80060b8:	4b61      	ldr	r3, [pc, #388]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	4a60      	ldr	r2, [pc, #384]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060be:	f043 0304 	orr.w	r3, r3, #4
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
 80060c4:	4b5e      	ldr	r3, [pc, #376]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	4a5d      	ldr	r2, [pc, #372]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	; 0x70
 80060d0:	e00b      	b.n	80060ea <HAL_RCC_OscConfig+0x376>
 80060d2:	4b5b      	ldr	r3, [pc, #364]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a5a      	ldr	r2, [pc, #360]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70
 80060de:	4b58      	ldr	r3, [pc, #352]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	4a57      	ldr	r2, [pc, #348]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80060e4:	f023 0304 	bic.w	r3, r3, #4
 80060e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d015      	beq.n	800611e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f2:	f7fd fdef 	bl	8003cd4 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fa:	f7fd fdeb 	bl	8003cd4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e0ce      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006110:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ee      	beq.n	80060fa <HAL_RCC_OscConfig+0x386>
 800611c:	e014      	b.n	8006148 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611e:	f7fd fdd9 	bl	8003cd4 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006124:	e00a      	b.n	800613c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006126:	f7fd fdd5 	bl	8003cd4 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	4293      	cmp	r3, r2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e0b8      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613c:	4b40      	ldr	r3, [pc, #256]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ee      	bne.n	8006126 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800614e:	4b3c      	ldr	r3, [pc, #240]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	4a3b      	ldr	r2, [pc, #236]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80a4 	beq.w	80062ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006164:	4b36      	ldr	r3, [pc, #216]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 030c 	and.w	r3, r3, #12
 800616c:	2b08      	cmp	r3, #8
 800616e:	d06b      	beq.n	8006248 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d149      	bne.n	800620c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006178:	4b31      	ldr	r3, [pc, #196]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a30      	ldr	r2, [pc, #192]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fd fda6 	bl	8003cd4 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fd fda2 	bl	8003cd4 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e087      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	3b01      	subs	r3, #1
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	4313      	orrs	r3, r2
 80061d0:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80061d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 80061de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fd fd76 	bl	8003cd4 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fd fd72 	bl	8003cd4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e057      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x478>
 800620a:	e04f      	b.n	80062ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fd fd5c 	bl	8003cd4 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006220:	f7fd fd58 	bl	8003cd4 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e03d      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006232:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_RCC_OscConfig+0x4cc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x4ac>
 800623e:	e035      	b.n	80062ac <HAL_RCC_OscConfig+0x538>
 8006240:	40023800 	.word	0x40023800
 8006244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006248:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <HAL_RCC_OscConfig+0x544>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d028      	beq.n	80062a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d121      	bne.n	80062a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d11a      	bne.n	80062a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800627e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006280:	4293      	cmp	r3, r2
 8006282:	d111      	bne.n	80062a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	3b01      	subs	r3, #1
 8006292:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d107      	bne.n	80062a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800

080062bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0d0      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d4:	4b6a      	ldr	r3, [pc, #424]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d910      	bls.n	8006304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e2:	4b67      	ldr	r3, [pc, #412]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 020f 	bic.w	r2, r3, #15
 80062ea:	4965      	ldr	r1, [pc, #404]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0b8      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800631c:	4b59      	ldr	r3, [pc, #356]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4a58      	ldr	r2, [pc, #352]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006334:	4b53      	ldr	r3, [pc, #332]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800633a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800633e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b50      	ldr	r3, [pc, #320]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	494d      	ldr	r1, [pc, #308]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d040      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b47      	ldr	r3, [pc, #284]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d115      	bne.n	800639e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	4b41      	ldr	r3, [pc, #260]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e073      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638e:	4b3d      	ldr	r3, [pc, #244]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06b      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800639e:	4b39      	ldr	r3, [pc, #228]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f023 0203 	bic.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4936      	ldr	r1, [pc, #216]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b0:	f7fd fc90 	bl	8003cd4 <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b8:	f7fd fc8c 	bl	8003cd4 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e053      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 020c 	and.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1eb      	bne.n	80063b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e0:	4b27      	ldr	r3, [pc, #156]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d210      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 020f 	bic.w	r2, r3, #15
 80063f6:	4922      	ldr	r1, [pc, #136]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e032      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4916      	ldr	r1, [pc, #88]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	490e      	ldr	r1, [pc, #56]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800644e:	f000 f821 	bl	8006494 <HAL_RCC_GetSysClockFreq>
 8006452:	4601      	mov	r1, r0
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <HAL_RCC_ClockConfig+0x1cc>)
 8006460:	5cd3      	ldrb	r3, [r2, r3]
 8006462:	fa21 f303 	lsr.w	r3, r1, r3
 8006466:	4a09      	ldr	r2, [pc, #36]	; (800648c <HAL_RCC_ClockConfig+0x1d0>)
 8006468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1d4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fb fa60 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023c00 	.word	0x40023c00
 8006484:	40023800 	.word	0x40023800
 8006488:	08016ea0 	.word	0x08016ea0
 800648c:	20000000 	.word	0x20000000
 8006490:	20000004 	.word	0x20000004

08006494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	2300      	movs	r3, #0
 80064a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d007      	beq.n	80064c6 <HAL_RCC_GetSysClockFreq+0x32>
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d008      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x38>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 80b4 	bne.w	8006628 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c0:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064c2:	60bb      	str	r3, [r7, #8]
      break;
 80064c4:	e0b3      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064c6:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80064c8:	60bb      	str	r3, [r7, #8]
      break;
 80064ca:	e0b0      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064cc:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064d6:	4b58      	ldr	r3, [pc, #352]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04a      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b55      	ldr	r3, [pc, #340]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	f04f 0400 	mov.w	r4, #0
 80064ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	ea03 0501 	and.w	r5, r3, r1
 80064f8:	ea04 0602 	and.w	r6, r4, r2
 80064fc:	4629      	mov	r1, r5
 80064fe:	4632      	mov	r2, r6
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	0154      	lsls	r4, r2, #5
 800650a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800650e:	014b      	lsls	r3, r1, #5
 8006510:	4619      	mov	r1, r3
 8006512:	4622      	mov	r2, r4
 8006514:	1b49      	subs	r1, r1, r5
 8006516:	eb62 0206 	sbc.w	r2, r2, r6
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	f04f 0400 	mov.w	r4, #0
 8006522:	0194      	lsls	r4, r2, #6
 8006524:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006528:	018b      	lsls	r3, r1, #6
 800652a:	1a5b      	subs	r3, r3, r1
 800652c:	eb64 0402 	sbc.w	r4, r4, r2
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	00e2      	lsls	r2, r4, #3
 800653a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800653e:	00d9      	lsls	r1, r3, #3
 8006540:	460b      	mov	r3, r1
 8006542:	4614      	mov	r4, r2
 8006544:	195b      	adds	r3, r3, r5
 8006546:	eb44 0406 	adc.w	r4, r4, r6
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	0262      	lsls	r2, r4, #9
 8006554:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006558:	0259      	lsls	r1, r3, #9
 800655a:	460b      	mov	r3, r1
 800655c:	4614      	mov	r4, r2
 800655e:	4618      	mov	r0, r3
 8006560:	4621      	mov	r1, r4
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f04f 0400 	mov.w	r4, #0
 8006568:	461a      	mov	r2, r3
 800656a:	4623      	mov	r3, r4
 800656c:	f7fa fb84 	bl	8000c78 <__aeabi_uldivmod>
 8006570:	4603      	mov	r3, r0
 8006572:	460c      	mov	r4, r1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e049      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006578:	4b2f      	ldr	r3, [pc, #188]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	099b      	lsrs	r3, r3, #6
 800657e:	f04f 0400 	mov.w	r4, #0
 8006582:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	ea03 0501 	and.w	r5, r3, r1
 800658e:	ea04 0602 	and.w	r6, r4, r2
 8006592:	4629      	mov	r1, r5
 8006594:	4632      	mov	r2, r6
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	f04f 0400 	mov.w	r4, #0
 800659e:	0154      	lsls	r4, r2, #5
 80065a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065a4:	014b      	lsls	r3, r1, #5
 80065a6:	4619      	mov	r1, r3
 80065a8:	4622      	mov	r2, r4
 80065aa:	1b49      	subs	r1, r1, r5
 80065ac:	eb62 0206 	sbc.w	r2, r2, r6
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f04f 0400 	mov.w	r4, #0
 80065b8:	0194      	lsls	r4, r2, #6
 80065ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065be:	018b      	lsls	r3, r1, #6
 80065c0:	1a5b      	subs	r3, r3, r1
 80065c2:	eb64 0402 	sbc.w	r4, r4, r2
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	00e2      	lsls	r2, r4, #3
 80065d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065d4:	00d9      	lsls	r1, r3, #3
 80065d6:	460b      	mov	r3, r1
 80065d8:	4614      	mov	r4, r2
 80065da:	195b      	adds	r3, r3, r5
 80065dc:	eb44 0406 	adc.w	r4, r4, r6
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	02a2      	lsls	r2, r4, #10
 80065ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065ee:	0299      	lsls	r1, r3, #10
 80065f0:	460b      	mov	r3, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	4621      	mov	r1, r4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f04f 0400 	mov.w	r4, #0
 80065fe:	461a      	mov	r2, r3
 8006600:	4623      	mov	r3, r4
 8006602:	f7fa fb39 	bl	8000c78 <__aeabi_uldivmod>
 8006606:	4603      	mov	r3, r0
 8006608:	460c      	mov	r4, r1
 800660a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	60bb      	str	r3, [r7, #8]
      break;
 8006626:	e002      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800662a:	60bb      	str	r3, [r7, #8]
      break;
 800662c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800662e:	68bb      	ldr	r3, [r7, #8]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006638:	40023800 	.word	0x40023800
 800663c:	00f42400 	.word	0x00f42400
 8006640:	007a1200 	.word	0x007a1200

08006644 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_RCC_GetHCLKFreq+0x14>)
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000000 	.word	0x20000000

0800665c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006660:	f7ff fff0 	bl	8006644 <HAL_RCC_GetHCLKFreq>
 8006664:	4601      	mov	r1, r0
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	0b5b      	lsrs	r3, r3, #13
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	4a03      	ldr	r2, [pc, #12]	; (8006680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006678:	4618      	mov	r0, r3
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40023800 	.word	0x40023800
 8006680:	08016eb0 	.word	0x08016eb0

08006684 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	220f      	movs	r2, #15
 8006692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006694:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <HAL_RCC_GetClockConfig+0x5c>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0203 	and.w	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066a0:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <HAL_RCC_GetClockConfig+0x5c>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <HAL_RCC_GetClockConfig+0x5c>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <HAL_RCC_GetClockConfig+0x5c>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	08db      	lsrs	r3, r3, #3
 80066be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <HAL_RCC_GetClockConfig+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40023c00 	.word	0x40023c00

080066e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006710:	4b69      	ldr	r3, [pc, #420]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a68      	ldr	r2, [pc, #416]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800671a:	6093      	str	r3, [r2, #8]
 800671c:	4b66      	ldr	r3, [pc, #408]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	4964      	ldr	r1, [pc, #400]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	4313      	orrs	r3, r2
 8006728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006732:	2301      	movs	r3, #1
 8006734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d017      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006742:	4b5d      	ldr	r3, [pc, #372]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	4959      	ldr	r1, [pc, #356]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006760:	d101      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800676e:	2301      	movs	r3, #1
 8006770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d017      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800677e:	4b4e      	ldr	r3, [pc, #312]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	494a      	ldr	r1, [pc, #296]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800679c:	d101      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800679e:	2301      	movs	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80067aa:	2301      	movs	r3, #1
 80067ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 808b 	beq.w	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067cc:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	4a39      	ldr	r2, [pc, #228]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6413      	str	r3, [r2, #64]	; 0x40
 80067d8:	4b37      	ldr	r3, [pc, #220]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067e4:	4b35      	ldr	r3, [pc, #212]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a34      	ldr	r2, [pc, #208]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80067ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067f0:	f7fd fa70 	bl	8003cd4 <HAL_GetTick>
 80067f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f8:	f7fd fa6c 	bl	8003cd4 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b64      	cmp	r3, #100	; 0x64
 8006804:	d901      	bls.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e31e      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800680a:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d035      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	429a      	cmp	r2, r3
 8006832:	d02e      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006834:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800683e:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d114      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fd fa34 	bl	8003cd4 <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686e:	e00a      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006870:	f7fd fa30 	bl	8003cd4 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	f241 3288 	movw	r2, #5000	; 0x1388
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e2e0      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0ee      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800689e:	d111      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	4901      	ldr	r1, [pc, #4]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	608b      	str	r3, [r1, #8]
 80068b6:	e00b      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80068b8:	40023800 	.word	0x40023800
 80068bc:	40007000 	.word	0x40007000
 80068c0:	0ffffcff 	.word	0x0ffffcff
 80068c4:	4bac      	ldr	r3, [pc, #688]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	4aab      	ldr	r2, [pc, #684]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068ce:	6093      	str	r3, [r2, #8]
 80068d0:	4ba9      	ldr	r3, [pc, #676]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068dc:	49a6      	ldr	r1, [pc, #664]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068ee:	4ba2      	ldr	r3, [pc, #648]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f4:	4aa0      	ldr	r2, [pc, #640]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80068fe:	4b9e      	ldr	r3, [pc, #632]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	499b      	ldr	r1, [pc, #620]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800691c:	4b96      	ldr	r3, [pc, #600]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800692a:	4993      	ldr	r1, [pc, #588]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800693e:	4b8e      	ldr	r3, [pc, #568]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694c:	498a      	ldr	r1, [pc, #552]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006960:	4b85      	ldr	r3, [pc, #532]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	4982      	ldr	r1, [pc, #520]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006982:	4b7d      	ldr	r3, [pc, #500]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	4979      	ldr	r1, [pc, #484]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069a4:	4b74      	ldr	r3, [pc, #464]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f023 0203 	bic.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	4971      	ldr	r1, [pc, #452]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069c6:	4b6c      	ldr	r3, [pc, #432]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	f023 020c 	bic.w	r2, r3, #12
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d4:	4968      	ldr	r1, [pc, #416]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069e8:	4b63      	ldr	r3, [pc, #396]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	4960      	ldr	r1, [pc, #384]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	4957      	ldr	r1, [pc, #348]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a2c:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	494f      	ldr	r1, [pc, #316]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006a4e:	4b4a      	ldr	r3, [pc, #296]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5c:	4946      	ldr	r1, [pc, #280]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006a70:	4b41      	ldr	r3, [pc, #260]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	493e      	ldr	r1, [pc, #248]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006a92:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	4935      	ldr	r1, [pc, #212]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ab4:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d011      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ad6:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae4:	4924      	ldr	r1, [pc, #144]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af4:	d101      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006af6:	2301      	movs	r3, #1
 8006af8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b06:	4b1c      	ldr	r3, [pc, #112]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	4918      	ldr	r1, [pc, #96]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	490f      	ldr	r1, [pc, #60]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d005      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4e:	f040 80d8 	bne.w	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b52:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b5e:	f7fd f8b9 	bl	8003cd4 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b66:	f7fd f8b5 	bl	8003cd4 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b64      	cmp	r3, #100	; 0x64
 8006b72:	d903      	bls.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e167      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006b78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b7c:	4bad      	ldr	r3, [pc, #692]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ee      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d021      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11d      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b9c:	4ba5      	ldr	r3, [pc, #660]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006baa:	4ba2      	ldr	r3, [pc, #648]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb0:	0e1b      	lsrs	r3, r3, #24
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	019a      	lsls	r2, r3, #6
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	071b      	lsls	r3, r3, #28
 8006bd0:	4998      	ldr	r1, [pc, #608]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bec:	d00a      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d02e      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c02:	d129      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c04:	4b8b      	ldr	r3, [pc, #556]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c12:	4b88      	ldr	r3, [pc, #544]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c18:	0f1b      	lsrs	r3, r3, #28
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	019a      	lsls	r2, r3, #6
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	431a      	orrs	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	071b      	lsls	r3, r3, #28
 8006c38:	497e      	ldr	r1, [pc, #504]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c40:	4b7c      	ldr	r3, [pc, #496]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c46:	f023 021f 	bic.w	r2, r3, #31
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	4978      	ldr	r1, [pc, #480]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01d      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c64:	4b73      	ldr	r3, [pc, #460]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c6a:	0e1b      	lsrs	r3, r3, #24
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c72:	4b70      	ldr	r3, [pc, #448]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c78:	0f1b      	lsrs	r3, r3, #28
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	019a      	lsls	r2, r3, #6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	431a      	orrs	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	071b      	lsls	r3, r3, #28
 8006c98:	4966      	ldr	r1, [pc, #408]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d011      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	019a      	lsls	r2, r3, #6
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	061b      	lsls	r3, r3, #24
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	071b      	lsls	r3, r3, #28
 8006cc8:	495a      	ldr	r1, [pc, #360]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cd0:	4b58      	ldr	r3, [pc, #352]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a57      	ldr	r2, [pc, #348]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cdc:	f7fc fffa 	bl	8003cd4 <HAL_GetTick>
 8006ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ce4:	f7fc fff6 	bl	8003cd4 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e0a8      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cf6:	4b4f      	ldr	r3, [pc, #316]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 809e 	bne.w	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d0a:	4b4a      	ldr	r3, [pc, #296]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a49      	ldr	r2, [pc, #292]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d16:	f7fc ffdd 	bl	8003cd4 <HAL_GetTick>
 8006d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d1e:	f7fc ffd9 	bl	8003cd4 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b64      	cmp	r3, #100	; 0x64
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e08b      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d30:	4b40      	ldr	r3, [pc, #256]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d3c:	d0ef      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d02e      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d12a      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d66:	4b33      	ldr	r3, [pc, #204]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d74:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	019a      	lsls	r2, r3, #6
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	071b      	lsls	r3, r3, #28
 8006d9a:	4926      	ldr	r1, [pc, #152]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	3b01      	subs	r3, #1
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	491f      	ldr	r1, [pc, #124]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d022      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd0:	d11d      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	0e1b      	lsrs	r3, r3, #24
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006de0:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de6:	0f1b      	lsrs	r3, r3, #28
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	019a      	lsls	r2, r3, #6
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	061b      	lsls	r3, r3, #24
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	071b      	lsls	r3, r3, #28
 8006e06:	490b      	ldr	r1, [pc, #44]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1a:	f7fc ff5b 	bl	8003cd4 <HAL_GetTick>
 8006e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e22:	f7fc ff57 	bl	8003cd4 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b64      	cmp	r3, #100	; 0x64
 8006e2e:	d903      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e009      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006e34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e44:	d1ed      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3720      	adds	r7, #32
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800

08006e54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e022      	b.n	8006eac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fa fb75 	bl	8001568 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2203      	movs	r2, #3
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f814 	bl	8006eb4 <HAL_SD_InitCard>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00a      	b.n	8006eac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006eb4:	b5b0      	push	{r4, r5, r7, lr}
 8006eb6:	b08e      	sub	sp, #56	; 0x38
 8006eb8:	af04      	add	r7, sp, #16
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006ed0:	2376      	movs	r3, #118	; 0x76
 8006ed2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681d      	ldr	r5, [r3, #0]
 8006ed8:	466c      	mov	r4, sp
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ee6:	f107 0308 	add.w	r3, r7, #8
 8006eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006eec:	4628      	mov	r0, r5
 8006eee:	f002 fb5f 	bl	80095b0 <SDMMC_Init>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e03b      	b.n	8006f7c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f12:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fb93 	bl	8009644 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f2c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 ffca 	bl	8007ec8 <SD_PowerON>
 8006f34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e013      	b.n	8006f7c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fee9 	bl	8007d2c <SD_InitCard>
 8006f5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3728      	adds	r7, #40	; 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bdb0      	pop	{r4, r5, r7, pc}

08006f84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08c      	sub	sp, #48	; 0x30
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d107      	bne.n	8006fac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0cc      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	f040 80c5 	bne.w	8007144 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d907      	bls.n	8006fde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0b3      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2200      	movs	r2, #0
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	4a53      	ldr	r2, [pc, #332]	; (8007150 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	4a52      	ldr	r2, [pc, #328]	; (8007154 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800700c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2200      	movs	r2, #0
 8007014:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3380      	adds	r3, #128	; 0x80
 8007020:	4619      	mov	r1, r3
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	025b      	lsls	r3, r3, #9
 8007028:	089b      	lsrs	r3, r3, #2
 800702a:	f7fd f811 	bl	8004050 <HAL_DMA_Start_IT>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007042:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a43      	ldr	r2, [pc, #268]	; (8007158 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e070      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0208 	orr.w	r2, r2, #8
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	2b01      	cmp	r3, #1
 800707a:	d002      	beq.n	8007082 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	025b      	lsls	r3, r3, #9
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fb6e 	bl	800976c <SDMMC_CmdBlockLength>
 8007090:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00f      	beq.n	80070b8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2e      	ldr	r2, [pc, #184]	; (8007158 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	431a      	orrs	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e046      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
 80070bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	025b      	lsls	r3, r3, #9
 80070c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80070c4:	2390      	movs	r3, #144	; 0x90
 80070c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070c8:	2302      	movs	r3, #2
 80070ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f107 0210 	add.w	r2, r7, #16
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 fb18 	bl	8009714 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d90a      	bls.n	8007100 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2282      	movs	r2, #130	; 0x82
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070f6:	4618      	mov	r0, r3
 80070f8:	f002 fb7c 	bl	80097f4 <SDMMC_CmdReadMultiBlock>
 80070fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80070fe:	e009      	b.n	8007114 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2281      	movs	r2, #129	; 0x81
 8007104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800710c:	4618      	mov	r0, r3
 800710e:	f002 fb4f 	bl	80097b0 <SDMMC_CmdReadSingleBlock>
 8007112:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d012      	beq.n	8007140 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a0e      	ldr	r2, [pc, #56]	; (8007158 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e002      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3730      	adds	r7, #48	; 0x30
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	08007b3b 	.word	0x08007b3b
 8007154:	08007bad 	.word	0x08007bad
 8007158:	004005ff 	.word	0x004005ff

0800715c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	; 0x30
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d107      	bne.n	8007184 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0cf      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	f040 80c8 	bne.w	8007322 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	441a      	add	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d907      	bls.n	80071b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e0b6      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2203      	movs	r2, #3
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 021a 	orr.w	r2, r2, #26
 80071d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	4a54      	ldr	r2, [pc, #336]	; (800732c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	4a53      	ldr	r2, [pc, #332]	; (8007330 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80071e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ea:	2200      	movs	r2, #0
 80071ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d002      	beq.n	80071fc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007204:	4618      	mov	r0, r3
 8007206:	f002 fab1 	bl	800976c <SDMMC_CmdBlockLength>
 800720a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00f      	beq.n	8007232 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a47      	ldr	r2, [pc, #284]	; (8007334 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	431a      	orrs	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e078      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d90a      	bls.n	800724e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	22a0      	movs	r2, #160	; 0xa0
 800723c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007244:	4618      	mov	r0, r3
 8007246:	f002 fb19 	bl	800987c <SDMMC_CmdWriteMultiBlock>
 800724a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800724c:	e009      	b.n	8007262 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2290      	movs	r2, #144	; 0x90
 8007252:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800725a:	4618      	mov	r0, r3
 800725c:	f002 faec 	bl	8009838 <SDMMC_CmdWriteSingleBlock>
 8007260:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d012      	beq.n	800728e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a31      	ldr	r2, [pc, #196]	; (8007334 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	431a      	orrs	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e04a      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0208 	orr.w	r2, r2, #8
 800729c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3380      	adds	r3, #128	; 0x80
 80072aa:	461a      	mov	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	025b      	lsls	r3, r3, #9
 80072b0:	089b      	lsrs	r3, r3, #2
 80072b2:	f7fc fecd 	bl	8004050 <HAL_DMA_Start_IT>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01a      	beq.n	80072f2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 021a 	bic.w	r2, r2, #26
 80072ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a18      	ldr	r2, [pc, #96]	; (8007334 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e018      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	025b      	lsls	r3, r3, #9
 80072fc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80072fe:	2390      	movs	r3, #144	; 0x90
 8007300:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007306:	2300      	movs	r3, #0
 8007308:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800730a:	2301      	movs	r3, #1
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f107 0210 	add.w	r2, r7, #16
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f002 f9fb 	bl	8009714 <SDMMC_ConfigData>

      return HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	e000      	b.n	8007324 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007322:	2302      	movs	r3, #2
  }
}
 8007324:	4618      	mov	r0, r3
 8007326:	3730      	adds	r7, #48	; 0x30
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	08007b11 	.word	0x08007b11
 8007330:	08007bad 	.word	0x08007bad
 8007334:	004005ff 	.word	0x004005ff

08007338 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_SD_IRQHandler+0x2e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 ffc8 	bl	80082f4 <SD_Read_IT>
 8007364:	e153      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 808d 	beq.w	8007490 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800737e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4ba3      	ldr	r3, [pc, #652]	; (8007618 <HAL_SD_IRQHandler+0x2e0>)
 800738c:	400b      	ands	r3, r1
 800738e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d039      	beq.n	800741e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_SD_IRQHandler+0x86>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d011      	beq.n	80073e2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 fa7c 	bl	80098c0 <SDMMC_CmdStopTransfer>
 80073c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f921 	bl	8007624 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_SD_IRQHandler+0xd6>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f004 f9fe 	bl	800b810 <HAL_SD_RxCpltCallback>
 8007414:	e0fb      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f004 f9f0 	bl	800b7fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800741c:	e0f7      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80f2 	beq.w	800760e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f002 fa41 	bl	80098c0 <SDMMC_CmdStopTransfer>
 800743e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8e6 	bl	8007624 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 80d5 	bne.w	800760e <HAL_SD_IRQHandler+0x2d6>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 80cf 	bne.w	800760e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0208 	bic.w	r2, r2, #8
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f004 f9b7 	bl	800b7fc <HAL_SD_TxCpltCallback>
}
 800748e:	e0be      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_SD_IRQHandler+0x178>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 ff74 	bl	8008396 <SD_Write_IT>
 80074ae:	e0ae      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80a7 	beq.w	800760e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	f043 0202 	orr.w	r2, r3, #2
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	f043 0208 	orr.w	r2, r3, #8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	f043 0210 	orr.w	r2, r3, #16
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007540:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f002 f9ba 	bl	80098c0 <SDMMC_CmdStopTransfer>
 800754c:	4602      	mov	r2, r0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f857 	bl	8007624 <HAL_SD_ErrorCallback>
}
 8007576:	e04a      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d045      	beq.n	800760e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <HAL_SD_IRQHandler+0x25e>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d011      	beq.n	80075ba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	4a20      	ldr	r2, [pc, #128]	; (800761c <HAL_SD_IRQHandler+0x2e4>)
 800759c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fc fdb4 	bl	8004110 <HAL_DMA_Abort_IT>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02f      	beq.n	800760e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fb4c 	bl	8007c50 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075b8:	e029      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_SD_IRQHandler+0x296>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d011      	beq.n	80075f2 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a13      	ldr	r2, [pc, #76]	; (8007620 <HAL_SD_IRQHandler+0x2e8>)
 80075d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fc fd98 	bl	8004110 <HAL_DMA_Abort_IT>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d013      	beq.n	800760e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb67 	bl	8007cbe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075f0:	e00d      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f004 f8ee 	bl	800b7e8 <HAL_SD_AbortCallback>
}
 800760c:	e7ff      	b.n	800760e <HAL_SD_IRQHandler+0x2d6>
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	ffff3ec5 	.word	0xffff3ec5
 800761c:	08007c51 	.word	0x08007c51
 8007620:	08007cbf 	.word	0x08007cbf

08007624 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007646:	0f9b      	lsrs	r3, r3, #30
 8007648:	b2da      	uxtb	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007652:	0e9b      	lsrs	r3, r3, #26
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	b2da      	uxtb	r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	b2da      	uxtb	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	b2da      	uxtb	r2, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b2da      	uxtb	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768e:	b2da      	uxtb	r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007698:	0d1b      	lsrs	r3, r3, #20
 800769a:	b29a      	uxth	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076b6:	0bdb      	lsrs	r3, r3, #15
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c8:	0b9b      	lsrs	r3, r3, #14
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076da:	0b5b      	lsrs	r3, r3, #13
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ec:	0b1b      	lsrs	r3, r3, #12
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2200      	movs	r2, #0
 80076fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	2b00      	cmp	r3, #0
 8007706:	d163      	bne.n	80077d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800770c:	009a      	lsls	r2, r3, #2
 800770e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007712:	4013      	ands	r3, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007718:	0f92      	lsrs	r2, r2, #30
 800771a:	431a      	orrs	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007724:	0edb      	lsrs	r3, r3, #27
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	b2da      	uxtb	r2, r3
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	b2da      	uxtb	r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007748:	0d5b      	lsrs	r3, r3, #21
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	b2da      	uxtb	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775a:	0c9b      	lsrs	r3, r3, #18
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	b2da      	uxtb	r2, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776c:	0bdb      	lsrs	r3, r3, #15
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	b2da      	uxtb	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	7e1b      	ldrb	r3, [r3, #24]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	3302      	adds	r3, #2
 8007790:	2201      	movs	r2, #1
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800779a:	fb02 f203 	mul.w	r2, r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	7a1b      	ldrb	r3, [r3, #8]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	2201      	movs	r2, #1
 80077ae:	409a      	lsls	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80077bc:	0a52      	lsrs	r2, r2, #9
 80077be:	fb02 f203 	mul.w	r2, r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077cc:	661a      	str	r2, [r3, #96]	; 0x60
 80077ce:	e031      	b.n	8007834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d11d      	bne.n	8007814 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077dc:	041b      	lsls	r3, r3, #16
 80077de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	431a      	orrs	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	3301      	adds	r3, #1
 80077f4:	029a      	lsls	r2, r3, #10
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007808:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	661a      	str	r2, [r3, #96]	; 0x60
 8007812:	e00f      	b.n	8007834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a58      	ldr	r2, [pc, #352]	; (800797c <HAL_SD_GetCardCSD+0x344>)
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e09d      	b.n	8007970 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007838:	0b9b      	lsrs	r3, r3, #14
 800783a:	b2db      	uxtb	r3, r3
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784a:	09db      	lsrs	r3, r3, #7
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007852:	b2da      	uxtb	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	b2da      	uxtb	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	0fdb      	lsrs	r3, r3, #31
 800786e:	b2da      	uxtb	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	0f5b      	lsrs	r3, r3, #29
 800787a:	b2db      	uxtb	r3, r3
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	b2da      	uxtb	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	0e9b      	lsrs	r3, r3, #26
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	0d9b      	lsrs	r3, r3, #22
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	0d5b      	lsrs	r3, r3, #21
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	0c1b      	lsrs	r3, r3, #16
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	0bdb      	lsrs	r3, r3, #15
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	0b9b      	lsrs	r3, r3, #14
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	0b5b      	lsrs	r3, r3, #13
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	0b1b      	lsrs	r3, r3, #12
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	0a9b      	lsrs	r3, r3, #10
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	b2da      	uxtb	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	0a1b      	lsrs	r3, r3, #8
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	004005ff 	.word	0x004005ff

08007980 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079d8:	b5b0      	push	{r4, r5, r7, lr}
 80079da:	b08e      	sub	sp, #56	; 0x38
 80079dc:	af04      	add	r7, sp, #16
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d02e      	beq.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	d106      	bne.n	8007a08 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
 8007a06:	e029      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d10a      	bne.n	8007a26 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb0f 	bl	8008034 <SD_WideBus_Enable>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
 8007a24:	e01a      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb4c 	bl	80080ca <SD_WideBus_Disable>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a40:	e00c      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a4e:	e005      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e024      	b.n	8007ac2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	466c      	mov	r4, sp
 8007aa0:	f107 0318 	add.w	r3, r7, #24
 8007aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f001 fd7c 	bl	80095b0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	; 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8007aca:	bf00      	nop
 8007acc:	004005ff 	.word	0x004005ff

08007ad0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa7e 	bl	8007fe4 <SD_SendStatus>
 8007ae8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0a5b      	lsrs	r3, r3, #9
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b06:	693b      	ldr	r3, [r7, #16]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	2b82      	cmp	r3, #130	; 0x82
 8007b4e:	d111      	bne.n	8007b74 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 feb3 	bl	80098c0 <SDMMC_CmdStopTransfer>
 8007b5a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fd58 	bl	8007624 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0208 	bic.w	r2, r2, #8
 8007b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f003 fe37 	bl	800b810 <HAL_SD_RxCpltCallback>
#endif
}
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fc fc54 	bl	8004468 <HAL_DMA_GetError>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d03e      	beq.n	8007c44 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d002      	beq.n	8007be2 <SD_DMAError+0x36>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d12d      	bne.n	8007c3e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <SD_DMAError+0xa0>)
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007bf8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff62 	bl	8007ad0 <HAL_SD_GetCardState>
 8007c0c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b06      	cmp	r3, #6
 8007c12:	d002      	beq.n	8007c1a <SD_DMAError+0x6e>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d10a      	bne.n	8007c30 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fe4e 	bl	80098c0 <SDMMC_CmdStopTransfer>
 8007c24:	4602      	mov	r2, r0
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007c3e:	6978      	ldr	r0, [r7, #20]
 8007c40:	f7ff fcf0 	bl	8007624 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007c44:	bf00      	nop
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	004005ff 	.word	0x004005ff

08007c50 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff ff31 	bl	8007ad0 <HAL_SD_GetCardState>
 8007c6e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b06      	cmp	r3, #6
 8007c82:	d002      	beq.n	8007c8a <SD_DMATxAbort+0x3a>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d10a      	bne.n	8007ca0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fe16 	bl	80098c0 <SDMMC_CmdStopTransfer>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f003 fd9d 	bl	800b7e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007cae:	e002      	b.n	8007cb6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fcb7 	bl	8007624 <HAL_SD_ErrorCallback>
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fefa 	bl	8007ad0 <HAL_SD_GetCardState>
 8007cdc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d002      	beq.n	8007cf8 <SD_DMARxAbort+0x3a>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d10a      	bne.n	8007d0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fddf 	bl	80098c0 <SDMMC_CmdStopTransfer>
 8007d02:	4602      	mov	r2, r0
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f003 fd66 	bl	800b7e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d1c:	e002      	b.n	8007d24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fc80 	bl	8007624 <HAL_SD_ErrorCallback>
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d2c:	b5b0      	push	{r4, r5, r7, lr}
 8007d2e:	b094      	sub	sp, #80	; 0x50
 8007d30:	af04      	add	r7, sp, #16
 8007d32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d34:	2301      	movs	r3, #1
 8007d36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 fc90 	bl	8009662 <SDMMC_GetPowerState>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d4c:	e0b7      	b.n	8007ebe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d02f      	beq.n	8007db6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f001 febb 	bl	8009ad6 <SDMMC_CmdSendCID>
 8007d60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <SD_InitCard+0x40>
    {
      return errorstate;
 8007d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6a:	e0a8      	b.n	8007ebe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fcbb 	bl	80096ee <SDMMC_GetResponse>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2104      	movs	r1, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fcb2 	bl	80096ee <SDMMC_GetResponse>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2108      	movs	r1, #8
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fca9 	bl	80096ee <SDMMC_GetResponse>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	210c      	movs	r1, #12
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fca0 	bl	80096ee <SDMMC_GetResponse>
 8007dae:	4602      	mov	r2, r0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d00d      	beq.n	8007dda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f107 020e 	add.w	r2, r7, #14
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fec1 	bl	8009b50 <SDMMC_CmdSetRelAdd>
 8007dce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <SD_InitCard+0xae>
    {
      return errorstate;
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd8:	e071      	b.n	8007ebe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d036      	beq.n	8007e50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007de2:	89fb      	ldrh	r3, [r7, #14]
 8007de4:	461a      	mov	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f001 fe8b 	bl	8009b12 <SDMMC_CmdSendCSD>
 8007dfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	e05a      	b.n	8007ebe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fc6d 	bl	80096ee <SDMMC_GetResponse>
 8007e14:	4602      	mov	r2, r0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 fc64 	bl	80096ee <SDMMC_GetResponse>
 8007e26:	4602      	mov	r2, r0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2108      	movs	r1, #8
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fc5b 	bl	80096ee <SDMMC_GetResponse>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	210c      	movs	r1, #12
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fc52 	bl	80096ee <SDMMC_GetResponse>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2104      	movs	r1, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fc49 	bl	80096ee <SDMMC_GetResponse>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	0d1a      	lsrs	r2, r3, #20
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e64:	f107 0310 	add.w	r3, r7, #16
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fbe4 	bl	8007638 <HAL_SD_GetCardCSD>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e7a:	e020      	b.n	8007ebe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	f04f 0400 	mov.w	r4, #0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	4608      	mov	r0, r1
 8007e90:	f001 fd38 	bl	8009904 <SDMMC_CmdSelDesel>
 8007e94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <SD_InitCard+0x174>
  {
    return errorstate;
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	e00e      	b.n	8007ebe <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681d      	ldr	r5, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	466c      	mov	r4, sp
 8007ea8:	f103 0210 	add.w	r2, r3, #16
 8007eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f001 fb7a 	bl	80095b0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3740      	adds	r7, #64	; 0x40
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ec8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 fd32 	bl	800994a <SDMMC_CmdGoIdleState>
 8007ee6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	e072      	b.n	8007fd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fd45 	bl	8009986 <SDMMC_CmdOperCond>
 8007efc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00d      	beq.n	8007f20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 fd1b 	bl	800994a <SDMMC_CmdGoIdleState>
 8007f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e05b      	b.n	8007fd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d137      	bne.n	8007f9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 fd45 	bl	80099c4 <SDMMC_CmdAppCommand>
 8007f3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d02d      	beq.n	8007f9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f46:	e047      	b.n	8007fd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fd38 	bl	80099c4 <SDMMC_CmdAppCommand>
 8007f54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <SD_PowerON+0x98>
    {
      return errorstate;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	e03b      	b.n	8007fd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	491e      	ldr	r1, [pc, #120]	; (8007fe0 <SD_PowerON+0x118>)
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 fd4e 	bl	8009a08 <SDMMC_CmdAppOperCommand>
 8007f6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f78:	e02e      	b.n	8007fd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fbb4 	bl	80096ee <SDMMC_GetResponse>
 8007f86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	0fdb      	lsrs	r3, r3, #31
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <SD_PowerON+0xcc>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <SD_PowerON+0xce>
 8007f94:	2300      	movs	r3, #0
 8007f96:	613b      	str	r3, [r7, #16]

    count++;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d802      	bhi.n	8007fae <SD_PowerON+0xe6>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0cc      	beq.n	8007f48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d902      	bls.n	8007fbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fbc:	e00c      	b.n	8007fd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	645a      	str	r2, [r3, #68]	; 0x44
 8007fce:	e002      	b.n	8007fd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	c1100000 	.word	0xc1100000

08007fe4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ff4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ff8:	e018      	b.n	800802c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f001 fdc3 	bl	8009b92 <SDMMC_CmdSendStatus>
 800800c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	e009      	b.n	800802c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fb65 	bl	80096ee <SDMMC_GetResponse>
 8008024:	4602      	mov	r2, r0
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 fb4f 	bl	80096ee <SDMMC_GetResponse>
 8008050:	4603      	mov	r3, r0
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800805a:	d102      	bne.n	8008062 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800805c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008060:	e02f      	b.n	80080c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f879 	bl	8008160 <SD_FindSCR>
 800806e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e023      	b.n	80080c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01c      	beq.n	80080be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808c:	041b      	lsls	r3, r3, #16
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f001 fc97 	bl	80099c4 <SDMMC_CmdAppCommand>
 8008096:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	e00f      	b.n	80080c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fcd1 	bl	8009a50 <SDMMC_CmdBusWidth>
 80080ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	e003      	b.n	80080c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e001      	b.n	80080c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 fb04 	bl	80096ee <SDMMC_GetResponse>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f0:	d102      	bne.n	80080f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080f6:	e02f      	b.n	8008158 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f82e 	bl	8008160 <SD_FindSCR>
 8008104:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	e023      	b.n	8008158 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01c      	beq.n	8008154 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f001 fc4c 	bl	80099c4 <SDMMC_CmdAppCommand>
 800812c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	e00f      	b.n	8008158 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2100      	movs	r1, #0
 800813e:	4618      	mov	r0, r3
 8008140:	f001 fc86 	bl	8009a50 <SDMMC_CmdBusWidth>
 8008144:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	e003      	b.n	8008158 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008150:	2300      	movs	r3, #0
 8008152:	e001      	b.n	8008158 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008154:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008160:	b590      	push	{r4, r7, lr}
 8008162:	b08f      	sub	sp, #60	; 0x3c
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800816a:	f7fb fdb3 	bl	8003cd4 <HAL_GetTick>
 800816e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008174:	2300      	movs	r3, #0
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2108      	movs	r1, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f001 faf0 	bl	800976c <SDMMC_CmdBlockLength>
 800818c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	e0a9      	b.n	80082ec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f001 fc0d 	bl	80099c4 <SDMMC_CmdAppCommand>
 80081aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	e09a      	b.n	80082ec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80081bc:	2308      	movs	r3, #8
 80081be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80081c0:	2330      	movs	r3, #48	; 0x30
 80081c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081c4:	2302      	movs	r3, #2
 80081c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f107 0210 	add.w	r2, r7, #16
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fa9a 	bl	8009714 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fc55 	bl	8009a94 <SDMMC_CmdSendSCR>
 80081ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d022      	beq.n	8008238 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	e07a      	b.n	80082ec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00e      	beq.n	8008222 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6819      	ldr	r1, [r3, #0]
 8008208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	f107 0208 	add.w	r2, r7, #8
 8008210:	18d4      	adds	r4, r2, r3
 8008212:	4608      	mov	r0, r1
 8008214:	f001 f9f8 	bl	8009608 <SDMMC_ReadFIFO>
 8008218:	4603      	mov	r3, r0
 800821a:	6023      	str	r3, [r4, #0]
      index++;
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	3301      	adds	r3, #1
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008222:	f7fb fd57 	bl	8003cd4 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d102      	bne.n	8008238 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008236:	e059      	b.n	80082ec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800823e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008242:	4013      	ands	r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0d6      	beq.n	80081f6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2208      	movs	r2, #8
 800825c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800825e:	2308      	movs	r3, #8
 8008260:	e044      	b.n	80082ec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2202      	movs	r2, #2
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008278:	2302      	movs	r3, #2
 800827a:	e037      	b.n	80082ec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2220      	movs	r2, #32
 8008290:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008292:	2320      	movs	r3, #32
 8008294:	e02a      	b.n	80082ec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f240 523a 	movw	r2, #1338	; 0x53a
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	061a      	lsls	r2, r3, #24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	0e1b      	lsrs	r3, r3, #24
 80082bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	601a      	str	r2, [r3, #0]
    scr++;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	3304      	adds	r3, #4
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	061a      	lsls	r2, r3, #24
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	0e1b      	lsrs	r3, r3, #24
 80082e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	373c      	adds	r7, #60	; 0x3c
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}

080082f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d03f      	beq.n	800838e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e033      	b.n	800837c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f001 f975 	bl	8009608 <SDMMC_ReadFIFO>
 800831e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	b2da      	uxtb	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3b01      	subs	r3, #1
 8008332:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	b2da      	uxtb	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	3b01      	subs	r3, #1
 8008348:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	b2da      	uxtb	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3b01      	subs	r3, #1
 800835e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	0e1b      	lsrs	r3, r3, #24
 8008364:	b2da      	uxtb	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	701a      	strb	r2, [r3, #0]
      tmp++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	3b01      	subs	r3, #1
 8008374:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	3301      	adds	r3, #1
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2b07      	cmp	r3, #7
 8008380:	d9c8      	bls.n	8008314 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800838e:	bf00      	nop
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d043      	beq.n	8008438 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e037      	b.n	8008426 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	021a      	lsls	r2, r3, #8
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3b01      	subs	r3, #1
 80083de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	041a      	lsls	r2, r3, #16
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	061a      	lsls	r2, r3, #24
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	4313      	orrs	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	3b01      	subs	r3, #1
 800840e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f001 f901 	bl	8009622 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3301      	adds	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2b07      	cmp	r3, #7
 800842a:	d9c4      	bls.n	80083b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008438:	bf00      	nop
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e084      	b.n	800855c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7f9 f975 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008488:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008492:	d902      	bls.n	800849a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e002      	b.n	80084a0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800849a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800849e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084a8:	d007      	beq.n	80084ba <HAL_SPI_Init+0x7a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084b2:	d002      	beq.n	80084ba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084ca:	d903      	bls.n	80084d4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
 80084d2:	e002      	b.n	80084da <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	ea42 0103 	orr.w	r1, r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	f003 0204 	and.w	r2, r3, #4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	ea42 0103 	orr.w	r1, r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800854a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d110      	bne.n	80085a0 <HAL_SPI_Receive_IT+0x3c>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008586:	d10b      	bne.n	80085a0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2204      	movs	r2, #4
 800858c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	68b9      	ldr	r1, [r7, #8]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f88c 	bl	80086b4 <HAL_SPI_TransmitReceive_IT>
 800859c:	4603      	mov	r3, r0
 800859e:	e081      	b.n	80086a4 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_SPI_Receive_IT+0x4a>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e07a      	b.n	80086a4 <HAL_SPI_Receive_IT+0x140>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d002      	beq.n	80085c8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
 80085c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085c6:	e068      	b.n	800869a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_SPI_Receive_IT+0x70>
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085d8:	e05f      	b.n	800869a <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2204      	movs	r2, #4
 80085de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	88fa      	ldrh	r2, [r7, #6]
 80085fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800861e:	d90b      	bls.n	8008638 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800862e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <HAL_SPI_Receive_IT+0x148>)
 8008634:	64da      	str	r2, [r3, #76]	; 0x4c
 8008636:	e00a      	b.n	800864e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008646:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <HAL_SPI_Receive_IT+0x14c>)
 800864c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008656:	d107      	bne.n	8008668 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008666:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008676:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d008      	beq.n	8008698 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e000      	b.n	800869a <HAL_SPI_Receive_IT+0x136>
  }

error :
 8008698:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	08008ccd 	.word	0x08008ccd
 80086b0:	08008c7d 	.word	0x08008c7d

080086b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_SPI_TransmitReceive_IT+0x20>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e091      	b.n	80087f8 <HAL_SPI_TransmitReceive_IT+0x144>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086ea:	7dbb      	ldrb	r3, [r7, #22]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d00d      	beq.n	800870c <HAL_SPI_TransmitReceive_IT+0x58>
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f6:	d106      	bne.n	8008706 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <HAL_SPI_TransmitReceive_IT+0x52>
 8008700:	7dbb      	ldrb	r3, [r7, #22]
 8008702:	2b04      	cmp	r3, #4
 8008704:	d002      	beq.n	800870c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008706:	2302      	movs	r3, #2
 8008708:	75fb      	strb	r3, [r7, #23]
    goto error;
 800870a:	e070      	b.n	80087ee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <HAL_SPI_TransmitReceive_IT+0x6a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_SPI_TransmitReceive_IT+0x6a>
 8008718:	887b      	ldrh	r3, [r7, #2]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008722:	e064      	b.n	80087ee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b04      	cmp	r3, #4
 800872e:	d003      	beq.n	8008738 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2205      	movs	r2, #5
 8008734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	887a      	ldrh	r2, [r7, #2]
 8008748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	887a      	ldrh	r2, [r7, #2]
 800874e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	887a      	ldrh	r2, [r7, #2]
 800875a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	887a      	ldrh	r2, [r7, #2]
 8008762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800876e:	d906      	bls.n	800877e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a24      	ldr	r2, [pc, #144]	; (8008804 <HAL_SPI_TransmitReceive_IT+0x150>)
 8008774:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4a23      	ldr	r2, [pc, #140]	; (8008808 <HAL_SPI_TransmitReceive_IT+0x154>)
 800877a:	651a      	str	r2, [r3, #80]	; 0x50
 800877c:	e005      	b.n	800878a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a22      	ldr	r2, [pc, #136]	; (800880c <HAL_SPI_TransmitReceive_IT+0x158>)
 8008782:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a22      	ldr	r2, [pc, #136]	; (8008810 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008788:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008792:	d802      	bhi.n	800879a <HAL_SPI_TransmitReceive_IT+0xe6>
 8008794:	887b      	ldrh	r3, [r7, #2]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d908      	bls.n	80087ac <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e007      	b.n	80087bc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087ba:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80087ca:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d6:	2b40      	cmp	r3, #64	; 0x40
 80087d8:	d008      	beq.n	80087ec <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e000      	b.n	80087ee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80087ec:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	08008bb7 	.word	0x08008bb7
 8008808:	08008c1d 	.word	0x08008c1d
 800880c:	08008a67 	.word	0x08008a67
 8008810:	08008b25 	.word	0x08008b25

08008814 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	099b      	lsrs	r3, r3, #6
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10f      	bne.n	8008858 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	099b      	lsrs	r3, r3, #6
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
    return;
 8008856:	e0d8      	b.n	8008a0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <HAL_SPI_IRQHandler+0x66>
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	09db      	lsrs	r3, r3, #7
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
    return;
 8008878:	e0c7      	b.n	8008a0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10c      	bne.n	80088a0 <HAL_SPI_IRQHandler+0x8c>
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	099b      	lsrs	r3, r3, #6
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_SPI_IRQHandler+0x8c>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80b5 	beq.w	8008a0a <HAL_SPI_IRQHandler+0x1f6>
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	095b      	lsrs	r3, r3, #5
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80ae 	beq.w	8008a0a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	099b      	lsrs	r3, r3, #6
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d023      	beq.n	8008902 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d011      	beq.n	80088ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ca:	f043 0204 	orr.w	r2, r3, #4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	e00b      	b.n	8008902 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ea:	2300      	movs	r3, #0
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	613b      	str	r3, [r7, #16]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	693b      	ldr	r3, [r7, #16]
        return;
 8008900:	e083      	b.n	8008a0a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d014      	beq.n	8008938 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	f043 0201 	orr.w	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00c      	beq.n	800895e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008948:	f043 0208 	orr.w	r2, r3, #8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008950:	2300      	movs	r3, #0
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	60bb      	str	r3, [r7, #8]
 800895c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	2b00      	cmp	r3, #0
 8008964:	d050      	beq.n	8008a08 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008974:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <HAL_SPI_IRQHandler+0x17e>
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d034      	beq.n	80089fc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0203 	bic.w	r2, r2, #3
 80089a0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ae:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <HAL_SPI_IRQHandler+0x1fc>)
 80089b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fb fbaa 	bl	8004110 <HAL_DMA_Abort_IT>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d016      	beq.n	8008a04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089da:	4a0d      	ldr	r2, [pc, #52]	; (8008a10 <HAL_SPI_IRQHandler+0x1fc>)
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fb fb94 	bl	8004110 <HAL_DMA_Abort_IT>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80089fa:	e003      	b.n	8008a04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f813 	bl	8008a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a02:	e000      	b.n	8008a06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008a04:	bf00      	nop
    return;
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
  }
}
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	08008a3d 	.word	0x08008a3d

08008a14 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff ffe5 	bl	8008a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d923      	bls.n	8008ac2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	b292      	uxth	r2, r2
 8008a86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	1c9a      	adds	r2, r3, #2
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b02      	subs	r3, #2
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11f      	bne.n	8008af0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008abe:	605a      	str	r2, [r3, #4]
 8008ac0:	e016      	b.n	8008af0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f103 020c 	add.w	r2, r3, #12
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	b2d2      	uxtb	r2, r2
 8008ad2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10f      	bne.n	8008b1c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d102      	bne.n	8008b1c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa73 	bl	8009002 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d912      	bls.n	8008b5c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	881a      	ldrh	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	1c9a      	adds	r2, r3, #2
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	3b02      	subs	r3, #2
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b5a:	e012      	b.n	8008b82 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	7812      	ldrb	r2, [r2, #0]
 8008b68:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d110      	bne.n	8008bae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b9a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa2a 	bl	8009002 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	b292      	uxth	r2, r2
 8008bca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	1c9a      	adds	r2, r3, #2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10f      	bne.n	8008c14 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9f7 	bl	8009002 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	881a      	ldrh	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	1c9a      	adds	r2, r3, #2
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d110      	bne.n	8008c74 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c60:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9c7 	bl	8009002 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f103 020c 	add.w	r2, r3, #12
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	7812      	ldrb	r2, [r2, #0]
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f9e1 	bl	8009086 <SPI_CloseRx_ISR>
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	b292      	uxth	r2, r2
 8008ce0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	1c9a      	adds	r2, r3, #2
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f9bb 	bl	8009086 <SPI_CloseRx_ISR>
  }
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	4613      	mov	r3, r2
 8008d26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d28:	e04c      	b.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d048      	beq.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008d32:	f7fa ffcf 	bl	8003cd4 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d902      	bls.n	8008d48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d13d      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d60:	d111      	bne.n	8008d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6a:	d004      	beq.n	8008d76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d74:	d107      	bne.n	8008d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d8e:	d10f      	bne.n	8008db0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e00f      	b.n	8008de4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d1a3      	bne.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008dfa:	e057      	b.n	8008eac <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e02:	d106      	bne.n	8008e12 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d103      	bne.n	8008e12 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	330c      	adds	r3, #12
 8008e10:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d048      	beq.n	8008eac <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008e1a:	f7fa ff5b 	bl	8003cd4 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d902      	bls.n	8008e30 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d13d      	bne.n	8008eac <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e48:	d111      	bne.n	8008e6e <SPI_WaitFifoStateUntilTimeout+0x82>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e52:	d004      	beq.n	8008e5e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5c:	d107      	bne.n	8008e6e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e76:	d10f      	bne.n	8008e98 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e008      	b.n	8008ebe <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d19f      	bne.n	8008dfc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af02      	add	r7, sp, #8
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eda:	d111      	bne.n	8008f00 <SPI_EndRxTransaction+0x3a>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee4:	d004      	beq.n	8008ef0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eee:	d107      	bne.n	8008f00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008efe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff ff04 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1a:	f043 0220 	orr.w	r2, r3, #32
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e023      	b.n	8008f6e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f2e:	d11d      	bne.n	8008f6c <SPI_EndRxTransaction+0xa6>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f38:	d004      	beq.n	8008f44 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f42:	d113      	bne.n	8008f6c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ff4b 	bl	8008dec <SPI_WaitFifoStateUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e000      	b.n	8008f6e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af02      	add	r7, sp, #8
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff ff2c 	bl	8008dec <SPI_WaitFifoStateUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9e:	f043 0220 	orr.w	r2, r3, #32
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e027      	b.n	8008ffa <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff feaf 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc4:	f043 0220 	orr.w	r2, r3, #32
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e014      	b.n	8008ffa <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7ff ff05 	bl	8008dec <SPI_WaitFifoStateUntilTimeout>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fec:	f043 0220 	orr.w	r2, r3, #32
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e000      	b.n	8008ffa <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800900a:	f7fa fe63 	bl	8003cd4 <HAL_GetTick>
 800900e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0220 	bic.w	r2, r2, #32
 800901e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	2164      	movs	r1, #100	; 0x64
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ffa6 	bl	8008f76 <SPI_EndRxTxTransaction>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009034:	f043 0220 	orr.w	r2, r3, #32
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009040:	2b00      	cmp	r3, #0
 8009042:	d115      	bne.n	8009070 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b04      	cmp	r3, #4
 800904e:	d107      	bne.n	8009060 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7f9 fa95 	bl	8002588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800905e:	e00e      	b.n	800907e <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff fcd3 	bl	8008a14 <HAL_SPI_TxRxCpltCallback>
}
 800906e:	e006      	b.n	800907e <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fcd5 	bl	8008a28 <HAL_SPI_ErrorCallback>
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800909c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800909e:	f7fa fe19 	bl	8003cd4 <HAL_GetTick>
 80090a2:	4603      	mov	r3, r0
 80090a4:	461a      	mov	r2, r3
 80090a6:	2164      	movs	r1, #100	; 0x64
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff ff0c 	bl	8008ec6 <SPI_EndRxTransaction>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7f9 fa59 	bl	8002588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80090d6:	e002      	b.n	80090de <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fca5 	bl	8008a28 <HAL_SPI_ErrorCallback>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e01d      	b.n	8009134 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f815 	bl	800913c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3304      	adds	r3, #4
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f000 f985 	bl	8009434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <HAL_TIM_Base_Start_IT+0x50>)
 8009170:	4013      	ands	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b06      	cmp	r3, #6
 8009178:	d00b      	beq.n	8009192 <HAL_TIM_Base_Start_IT+0x42>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009180:	d007      	beq.n	8009192 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0201 	orr.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	00010007 	.word	0x00010007

080091a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0202 	mvn.w	r2, #2
 80091d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f905 	bl	80093f6 <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f8f7 	bl	80093e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f908 	bl	800940a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b04      	cmp	r3, #4
 800920c:	d122      	bne.n	8009254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b04      	cmp	r3, #4
 800921a:	d11b      	bne.n	8009254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0204 	mvn.w	r2, #4
 8009224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f8db 	bl	80093f6 <HAL_TIM_IC_CaptureCallback>
 8009240:	e005      	b.n	800924e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8cd 	bl	80093e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8de 	bl	800940a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	2b08      	cmp	r3, #8
 8009260:	d122      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b08      	cmp	r3, #8
 800926e:	d11b      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0208 	mvn.w	r2, #8
 8009278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2204      	movs	r2, #4
 800927e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8b1 	bl	80093f6 <HAL_TIM_IC_CaptureCallback>
 8009294:	e005      	b.n	80092a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8a3 	bl	80093e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f8b4 	bl	800940a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0310 	and.w	r3, r3, #16
 80092b2:	2b10      	cmp	r3, #16
 80092b4:	d122      	bne.n	80092fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d11b      	bne.n	80092fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f06f 0210 	mvn.w	r2, #16
 80092cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2208      	movs	r2, #8
 80092d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f887 	bl	80093f6 <HAL_TIM_IC_CaptureCallback>
 80092e8:	e005      	b.n	80092f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f879 	bl	80093e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f88a 	bl	800940a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b01      	cmp	r3, #1
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0201 	mvn.w	r2, #1
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7f8 f8de 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d10e      	bne.n	8009354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d107      	bne.n	8009354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800934c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f91a 	bl	8009588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009362:	d10e      	bne.n	8009382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800936e:	2b80      	cmp	r3, #128	; 0x80
 8009370:	d107      	bne.n	8009382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f90d 	bl	800959c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938c:	2b40      	cmp	r3, #64	; 0x40
 800938e:	d10e      	bne.n	80093ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d107      	bne.n	80093ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f838 	bl	800941e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d10e      	bne.n	80093da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d107      	bne.n	80093da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f06f 0220 	mvn.w	r2, #32
 80093d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8cd 	bl	8009574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a40      	ldr	r2, [pc, #256]	; (8009548 <TIM_Base_SetConfig+0x114>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009452:	d00f      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a3d      	ldr	r2, [pc, #244]	; (800954c <TIM_Base_SetConfig+0x118>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a3c      	ldr	r2, [pc, #240]	; (8009550 <TIM_Base_SetConfig+0x11c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a3b      	ldr	r2, [pc, #236]	; (8009554 <TIM_Base_SetConfig+0x120>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a3a      	ldr	r2, [pc, #232]	; (8009558 <TIM_Base_SetConfig+0x124>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d108      	bne.n	8009486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2f      	ldr	r2, [pc, #188]	; (8009548 <TIM_Base_SetConfig+0x114>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d02b      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009494:	d027      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a2c      	ldr	r2, [pc, #176]	; (800954c <TIM_Base_SetConfig+0x118>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d023      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a2b      	ldr	r2, [pc, #172]	; (8009550 <TIM_Base_SetConfig+0x11c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d01f      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a2a      	ldr	r2, [pc, #168]	; (8009554 <TIM_Base_SetConfig+0x120>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d01b      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a29      	ldr	r2, [pc, #164]	; (8009558 <TIM_Base_SetConfig+0x124>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d017      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a28      	ldr	r2, [pc, #160]	; (800955c <TIM_Base_SetConfig+0x128>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a27      	ldr	r2, [pc, #156]	; (8009560 <TIM_Base_SetConfig+0x12c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00f      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a26      	ldr	r2, [pc, #152]	; (8009564 <TIM_Base_SetConfig+0x130>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00b      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a25      	ldr	r2, [pc, #148]	; (8009568 <TIM_Base_SetConfig+0x134>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d007      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a24      	ldr	r2, [pc, #144]	; (800956c <TIM_Base_SetConfig+0x138>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_Base_SetConfig+0xb2>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a23      	ldr	r2, [pc, #140]	; (8009570 <TIM_Base_SetConfig+0x13c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d108      	bne.n	80094f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <TIM_Base_SetConfig+0x114>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_Base_SetConfig+0xf8>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <TIM_Base_SetConfig+0x124>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d103      	bne.n	8009534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	615a      	str	r2, [r3, #20]
}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40010000 	.word	0x40010000
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40010400 	.word	0x40010400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800
 8009568:	40001800 	.word	0x40001800
 800956c:	40001c00 	.word	0x40001c00
 8009570:	40002000 	.word	0x40002000

08009574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80095b0:	b084      	sub	sp, #16
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	f107 001c 	add.w	r0, r7, #28
 80095be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80095c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80095c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80095ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80095ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80095d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80095d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80095da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <SDMMC_Init+0x54>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	b004      	add	sp, #16
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	ffff8100 	.word	0xffff8100

08009608 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2203      	movs	r2, #3
 8009650:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009652:	2002      	movs	r0, #2
 8009654:	f7fa fb4a 	bl	8003cec <HAL_Delay>
  
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0303 	and.w	r3, r3, #3
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
	...

08009680 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800969e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <SDMMC_SendCommand+0x50>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	fffff000 	.word	0xfffff000

080096d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	b2db      	uxtb	r3, r3
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3314      	adds	r3, #20
 80096fc:	461a      	mov	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	4413      	add	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
}  
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800973a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009740:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009746:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800975e:	2300      	movs	r3, #0

}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800977a:	2310      	movs	r3, #16
 800977c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ff74 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009798:	f241 3288 	movw	r2, #5000	; 0x1388
 800979c:	2110      	movs	r1, #16
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa42 	bl	8009c28 <SDMMC_GetCmdResp1>
 80097a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a6:	69fb      	ldr	r3, [r7, #28]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80097be:	2311      	movs	r3, #17
 80097c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ff52 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80097dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e0:	2111      	movs	r1, #17
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa20 	bl	8009c28 <SDMMC_GetCmdResp1>
 80097e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ea:	69fb      	ldr	r3, [r7, #28]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009802:	2312      	movs	r3, #18
 8009804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009806:	2340      	movs	r3, #64	; 0x40
 8009808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800980e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009812:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009814:	f107 0308 	add.w	r3, r7, #8
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff30 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	2112      	movs	r1, #18
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9fe 	bl	8009c28 <SDMMC_GetCmdResp1>
 800982c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800982e:	69fb      	ldr	r3, [r7, #28]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3720      	adds	r7, #32
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009846:	2318      	movs	r3, #24
 8009848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009858:	f107 0308 	add.w	r3, r7, #8
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff ff0e 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009864:	f241 3288 	movw	r2, #5000	; 0x1388
 8009868:	2118      	movs	r1, #24
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f9dc 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009872:	69fb      	ldr	r3, [r7, #28]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3720      	adds	r7, #32
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800988a:	2319      	movs	r3, #25
 800988c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800989a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800989c:	f107 0308 	add.w	r3, r7, #8
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff feec 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80098a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ac:	2119      	movs	r1, #25
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f9ba 	bl	8009c28 <SDMMC_GetCmdResp1>
 80098b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098b6:	69fb      	ldr	r3, [r7, #28]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3720      	adds	r7, #32
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80098cc:	230c      	movs	r3, #12
 80098ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098d4:	2300      	movs	r3, #0
 80098d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098de:	f107 0308 	add.w	r3, r7, #8
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff fecb 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80098ea:	4a05      	ldr	r2, [pc, #20]	; (8009900 <SDMMC_CmdStopTransfer+0x40>)
 80098ec:	210c      	movs	r1, #12
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f99a 	bl	8009c28 <SDMMC_GetCmdResp1>
 80098f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	05f5e100 	.word	0x05f5e100

08009904 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	; 0x28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009914:	2307      	movs	r3, #7
 8009916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800991c:	2300      	movs	r3, #0
 800991e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009924:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009926:	f107 0310 	add.w	r3, r7, #16
 800992a:	4619      	mov	r1, r3
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7ff fea7 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009932:	f241 3288 	movw	r2, #5000	; 0x1388
 8009936:	2107      	movs	r1, #7
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 f975 	bl	8009c28 <SDMMC_GetCmdResp1>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009942:	4618      	mov	r0, r3
 8009944:	3728      	adds	r7, #40	; 0x28
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b088      	sub	sp, #32
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009968:	f107 0308 	add.w	r3, r7, #8
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fe86 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f92f 	bl	8009bd8 <SDMMC_GetCmdError>
 800997a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800997c:	69fb      	ldr	r3, [r7, #28]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b088      	sub	sp, #32
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800998e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009994:	2308      	movs	r3, #8
 8009996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff fe67 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb18 	bl	8009fe8 <SDMMC_GetCmdResp7>
 80099b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ba:	69fb      	ldr	r3, [r7, #28]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80099d2:	2337      	movs	r3, #55	; 0x37
 80099d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff fe48 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80099f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f4:	2137      	movs	r1, #55	; 0x37
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f916 	bl	8009c28 <SDMMC_GetCmdResp1>
 80099fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099fe:	69fb      	ldr	r3, [r7, #28]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <SDMMC_CmdAppOperCommand+0x44>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a1a:	2329      	movs	r3, #41	; 0x29
 8009a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe24 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa27 	bl	8009e8c <SDMMC_GetCmdResp3>
 8009a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a40:	69fb      	ldr	r3, [r7, #28]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	80100000 	.word	0x80100000

08009a50 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009a5e:	2306      	movs	r3, #6
 8009a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a62:	2340      	movs	r3, #64	; 0x40
 8009a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a70:	f107 0308 	add.w	r3, r7, #8
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fe02 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a80:	2106      	movs	r1, #6
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8d0 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009aa0:	2333      	movs	r3, #51	; 0x33
 8009aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa4:	2340      	movs	r3, #64	; 0x40
 8009aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab2:	f107 0308 	add.w	r3, r7, #8
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff fde1 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac2:	2133      	movs	r1, #51	; 0x33
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f8af 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009aca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009acc:	69fb      	ldr	r3, [r7, #28]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ae6:	23c0      	movs	r3, #192	; 0xc0
 8009ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fdc0 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f97d 	bl	8009e00 <SDMMC_GetCmdResp2>
 8009b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b08:	69fb      	ldr	r3, [r7, #28]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b20:	2309      	movs	r3, #9
 8009b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b24:	23c0      	movs	r3, #192	; 0xc0
 8009b26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b32:	f107 0308 	add.w	r3, r7, #8
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fda1 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f95e 	bl	8009e00 <SDMMC_GetCmdResp2>
 8009b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b46:	69fb      	ldr	r3, [r7, #28]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3720      	adds	r7, #32
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b62:	2340      	movs	r3, #64	; 0x40
 8009b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b70:	f107 0308 	add.w	r3, r7, #8
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff fd82 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	2103      	movs	r1, #3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9bd 	bl	8009f00 <SDMMC_GetCmdResp6>
 8009b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b88:	69fb      	ldr	r3, [r7, #28]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b088      	sub	sp, #32
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009ba0:	230d      	movs	r3, #13
 8009ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff fd61 	bl	8009680 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc2:	210d      	movs	r1, #13
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f82f 	bl	8009c28 <SDMMC_GetCmdResp1>
 8009bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009bd8:	b490      	push	{r4, r7}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009be0:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <SDMMC_GetCmdError+0x48>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a0f      	ldr	r2, [pc, #60]	; (8009c24 <SDMMC_GetCmdError+0x4c>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	0a5b      	lsrs	r3, r3, #9
 8009bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	1e5c      	subs	r4, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c00:	e009      	b.n	8009c16 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f2      	beq.n	8009bf4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	22c5      	movs	r2, #197	; 0xc5
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc90      	pop	{r4, r7}
 8009c1e:	4770      	bx	lr
 8009c20:	20000000 	.word	0x20000000
 8009c24:	10624dd3 	.word	0x10624dd3

08009c28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	460b      	mov	r3, r1
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c36:	4b6f      	ldr	r3, [pc, #444]	; (8009df4 <SDMMC_GetCmdResp1+0x1cc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a6f      	ldr	r2, [pc, #444]	; (8009df8 <SDMMC_GetCmdResp1+0x1d0>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	0a5b      	lsrs	r3, r3, #9
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c48:	4623      	mov	r3, r4
 8009c4a:	1e5c      	subs	r4, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c54:	e0c9      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0f0      	beq.n	8009c48 <SDMMC_GetCmdResp1+0x20>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1eb      	bne.n	8009c48 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e0b1      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e0a6      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22c5      	movs	r2, #197	; 0xc5
 8009ca0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff fd16 	bl	80096d4 <SDMMC_GetCommandResponse>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d001      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e099      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fd18 	bl	80096ee <SDMMC_GetResponse>
 8009cbe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4b4e      	ldr	r3, [pc, #312]	; (8009dfc <SDMMC_GetCmdResp1+0x1d4>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e08d      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da02      	bge.n	8009cda <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cd8:	e087      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	e080      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009cf2:	2380      	movs	r3, #128	; 0x80
 8009cf4:	e079      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d04:	e071      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d14:	e069      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d24:	e061      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d34:	e059      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d44:	e051      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d54:	e049      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d64:	e041      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d74:	e039      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d84:	e031      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d94:	e029      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009da0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009da4:	e021      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009db4:	e019      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dc4:	e011      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009dd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dd4:	e009      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009de0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009de4:	e001      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd90      	pop	{r4, r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000000 	.word	0x20000000
 8009df8:	10624dd3 	.word	0x10624dd3
 8009dfc:	fdffe008 	.word	0xfdffe008

08009e00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009e00:	b490      	push	{r4, r7}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e08:	4b1e      	ldr	r3, [pc, #120]	; (8009e84 <SDMMC_GetCmdResp2+0x84>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a1e      	ldr	r2, [pc, #120]	; (8009e88 <SDMMC_GetCmdResp2+0x88>)
 8009e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e12:	0a5b      	lsrs	r3, r3, #9
 8009e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	1e5c      	subs	r4, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e28:	e026      	b.n	8009e78 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0f0      	beq.n	8009e1c <SDMMC_GetCmdResp2+0x1c>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1eb      	bne.n	8009e1c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2204      	movs	r2, #4
 8009e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e56:	2304      	movs	r3, #4
 8009e58:	e00e      	b.n	8009e78 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e003      	b.n	8009e78 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	22c5      	movs	r2, #197	; 0xc5
 8009e74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc90      	pop	{r4, r7}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000000 	.word	0x20000000
 8009e88:	10624dd3 	.word	0x10624dd3

08009e8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009e8c:	b490      	push	{r4, r7}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e94:	4b18      	ldr	r3, [pc, #96]	; (8009ef8 <SDMMC_GetCmdResp3+0x6c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a18      	ldr	r2, [pc, #96]	; (8009efc <SDMMC_GetCmdResp3+0x70>)
 8009e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9e:	0a5b      	lsrs	r3, r3, #9
 8009ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	1e5c      	subs	r4, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb4:	e01b      	b.n	8009eee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0f0      	beq.n	8009ea8 <SDMMC_GetCmdResp3+0x1c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1eb      	bne.n	8009ea8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	e003      	b.n	8009eee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	22c5      	movs	r2, #197	; 0xc5
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc90      	pop	{r4, r7}
 8009ef6:	4770      	bx	lr
 8009ef8:	20000000 	.word	0x20000000
 8009efc:	10624dd3 	.word	0x10624dd3

08009f00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f0e:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <SDMMC_GetCmdResp6+0xe0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a34      	ldr	r2, [pc, #208]	; (8009fe4 <SDMMC_GetCmdResp6+0xe4>)
 8009f14:	fba2 2303 	umull	r2, r3, r2, r3
 8009f18:	0a5b      	lsrs	r3, r3, #9
 8009f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f22:	4623      	mov	r3, r4
 8009f24:	1e5c      	subs	r4, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d102      	bne.n	8009f30 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f2e:	e052      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f0      	beq.n	8009f22 <SDMMC_GetCmdResp6+0x22>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1eb      	bne.n	8009f22 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	e03a      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e02f      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff fbac 	bl	80096d4 <SDMMC_GetCommandResponse>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	7afb      	ldrb	r3, [r7, #11]
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d001      	beq.n	8009f8a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e025      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	22c5      	movs	r2, #197	; 0xc5
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f90:	2100      	movs	r1, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff fbab 	bl	80096ee <SDMMC_GetResponse>
 8009f98:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	0c1b      	lsrs	r3, r3, #16
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e011      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fc0:	e009      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd0:	e001      	b.n	8009fd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd90      	pop	{r4, r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000000 	.word	0x20000000
 8009fe4:	10624dd3 	.word	0x10624dd3

08009fe8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009fe8:	b490      	push	{r4, r7}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ff0:	4b21      	ldr	r3, [pc, #132]	; (800a078 <SDMMC_GetCmdResp7+0x90>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a21      	ldr	r2, [pc, #132]	; (800a07c <SDMMC_GetCmdResp7+0x94>)
 8009ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffa:	0a5b      	lsrs	r3, r3, #9
 8009ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a000:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a004:	4623      	mov	r3, r4
 800a006:	1e5c      	subs	r4, r3, #1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a00c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a010:	e02c      	b.n	800a06c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a016:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f0      	beq.n	800a004 <SDMMC_GetCmdResp7+0x1c>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1eb      	bne.n	800a004 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2204      	movs	r2, #4
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a03e:	2304      	movs	r3, #4
 800a040:	e014      	b.n	800a06c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d004      	beq.n	800a058 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a054:	2301      	movs	r3, #1
 800a056:	e009      	b.n	800a06c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2240      	movs	r2, #64	; 0x40
 800a068:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a06a:	2300      	movs	r3, #0
  
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bc90      	pop	{r4, r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000000 	.word	0x20000000
 800a07c:	10624dd3 	.word	0x10624dd3

0800a080 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a080:	b084      	sub	sp, #16
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	f107 001c 	add.w	r0, r7, #28
 800a08e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	2b01      	cmp	r3, #1
 800a096:	d120      	bne.n	800a0da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	4b20      	ldr	r3, [pc, #128]	; (800a12c <USB_CoreInit+0xac>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d105      	bne.n	800a0ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fac4 	bl	800b65c <USB_CoreReset>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73fb      	strb	r3, [r7, #15]
 800a0d8:	e010      	b.n	800a0fc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f001 fab8 	bl	800b65c <USB_CoreReset>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d10b      	bne.n	800a11a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f043 0206 	orr.w	r2, r3, #6
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f043 0220 	orr.w	r2, r3, #32
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a126:	b004      	add	sp, #16
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	ffbdffbf 	.word	0xffbdffbf

0800a130 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4613      	mov	r3, r2
 800a13c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d165      	bne.n	800a210 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4a41      	ldr	r2, [pc, #260]	; (800a24c <USB_SetTurnaroundTime+0x11c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d906      	bls.n	800a15a <USB_SetTurnaroundTime+0x2a>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4a40      	ldr	r2, [pc, #256]	; (800a250 <USB_SetTurnaroundTime+0x120>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d802      	bhi.n	800a15a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a154:	230f      	movs	r3, #15
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e062      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	4a3c      	ldr	r2, [pc, #240]	; (800a250 <USB_SetTurnaroundTime+0x120>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d906      	bls.n	800a170 <USB_SetTurnaroundTime+0x40>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	4a3b      	ldr	r2, [pc, #236]	; (800a254 <USB_SetTurnaroundTime+0x124>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d802      	bhi.n	800a170 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a16a:	230e      	movs	r3, #14
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	e057      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4a38      	ldr	r2, [pc, #224]	; (800a254 <USB_SetTurnaroundTime+0x124>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d906      	bls.n	800a186 <USB_SetTurnaroundTime+0x56>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	4a37      	ldr	r2, [pc, #220]	; (800a258 <USB_SetTurnaroundTime+0x128>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d802      	bhi.n	800a186 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a180:	230d      	movs	r3, #13
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e04c      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a33      	ldr	r2, [pc, #204]	; (800a258 <USB_SetTurnaroundTime+0x128>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d906      	bls.n	800a19c <USB_SetTurnaroundTime+0x6c>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4a32      	ldr	r2, [pc, #200]	; (800a25c <USB_SetTurnaroundTime+0x12c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d802      	bhi.n	800a19c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a196:	230c      	movs	r3, #12
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e041      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4a2f      	ldr	r2, [pc, #188]	; (800a25c <USB_SetTurnaroundTime+0x12c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d906      	bls.n	800a1b2 <USB_SetTurnaroundTime+0x82>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a2e      	ldr	r2, [pc, #184]	; (800a260 <USB_SetTurnaroundTime+0x130>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d802      	bhi.n	800a1b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a1ac:	230b      	movs	r3, #11
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e036      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a2a      	ldr	r2, [pc, #168]	; (800a260 <USB_SetTurnaroundTime+0x130>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d906      	bls.n	800a1c8 <USB_SetTurnaroundTime+0x98>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4a29      	ldr	r2, [pc, #164]	; (800a264 <USB_SetTurnaroundTime+0x134>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d802      	bhi.n	800a1c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e02b      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4a26      	ldr	r2, [pc, #152]	; (800a264 <USB_SetTurnaroundTime+0x134>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d906      	bls.n	800a1de <USB_SetTurnaroundTime+0xae>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4a25      	ldr	r2, [pc, #148]	; (800a268 <USB_SetTurnaroundTime+0x138>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d802      	bhi.n	800a1de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1d8:	2309      	movs	r3, #9
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e020      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4a21      	ldr	r2, [pc, #132]	; (800a268 <USB_SetTurnaroundTime+0x138>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d906      	bls.n	800a1f4 <USB_SetTurnaroundTime+0xc4>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4a20      	ldr	r2, [pc, #128]	; (800a26c <USB_SetTurnaroundTime+0x13c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d802      	bhi.n	800a1f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e015      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4a1d      	ldr	r2, [pc, #116]	; (800a26c <USB_SetTurnaroundTime+0x13c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d906      	bls.n	800a20a <USB_SetTurnaroundTime+0xda>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	4a1c      	ldr	r2, [pc, #112]	; (800a270 <USB_SetTurnaroundTime+0x140>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d802      	bhi.n	800a20a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a204:	2307      	movs	r3, #7
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e00a      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a20a:	2306      	movs	r3, #6
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e007      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a216:	2309      	movs	r3, #9
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	e001      	b.n	800a220 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a21c:	2309      	movs	r3, #9
 800a21e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	029b      	lsls	r3, r3, #10
 800a234:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a238:	431a      	orrs	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	00d8acbf 	.word	0x00d8acbf
 800a250:	00e4e1bf 	.word	0x00e4e1bf
 800a254:	00f423ff 	.word	0x00f423ff
 800a258:	0106737f 	.word	0x0106737f
 800a25c:	011a499f 	.word	0x011a499f
 800a260:	01312cff 	.word	0x01312cff
 800a264:	014ca43f 	.word	0x014ca43f
 800a268:	016e35ff 	.word	0x016e35ff
 800a26c:	01a6ab1f 	.word	0x01a6ab1f
 800a270:	01e847ff 	.word	0x01e847ff

0800a274 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f043 0201 	orr.w	r2, r3, #1
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f023 0201 	bic.w	r2, r3, #1
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d106      	bne.n	800a2e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60da      	str	r2, [r3, #12]
 800a2e2:	e00b      	b.n	800a2fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2e4:	78fb      	ldrb	r3, [r7, #3]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	e001      	b.n	800a2fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e003      	b.n	800a304 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a2fc:	2032      	movs	r0, #50	; 0x32
 800a2fe:	f7f9 fcf5 	bl	8003cec <HAL_Delay>

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a30c:	b084      	sub	sp, #16
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	e009      	b.n	800a340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	3340      	adds	r3, #64	; 0x40
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3301      	adds	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b0e      	cmp	r3, #14
 800a344:	d9f2      	bls.n	800a32c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11c      	bne.n	800a386 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e005      	b.n	800a392 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a398:	461a      	mov	r2, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	680b      	ldr	r3, [r1, #0]
 800a3b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d10c      	bne.n	800a3d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f959 	bl	800a678 <USB_SetDevSpeed>
 800a3c6:	e018      	b.n	800a3fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f954 	bl	800a678 <USB_SetDevSpeed>
 800a3d0:	e013      	b.n	800a3fa <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d10c      	bne.n	800a3f2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d104      	bne.n	800a3e8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f949 	bl	800a678 <USB_SetDevSpeed>
 800a3e6:	e008      	b.n	800a3fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f944 	bl	800a678 <USB_SetDevSpeed>
 800a3f0:	e003      	b.n	800a3fa <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3f2:	2103      	movs	r1, #3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f93f 	bl	800a678 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3fa:	2110      	movs	r1, #16
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f8f3 	bl	800a5e8 <USB_FlushTxFifo>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f911 	bl	800a634 <USB_FlushRxFifo>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a422:	461a      	mov	r2, r3
 800a424:	2300      	movs	r3, #0
 800a426:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a42e:	461a      	mov	r2, r3
 800a430:	2300      	movs	r3, #0
 800a432:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43a:	461a      	mov	r2, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a440:	2300      	movs	r3, #0
 800a442:	613b      	str	r3, [r7, #16]
 800a444:	e043      	b.n	800a4ce <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a45c:	d118      	bne.n	800a490 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	461a      	mov	r2, r3
 800a472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	e013      	b.n	800a4a2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a486:	461a      	mov	r2, r3
 800a488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	e008      	b.n	800a4a2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a49c:	461a      	mov	r2, r3
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d3b7      	bcc.n	800a446 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	e043      	b.n	800a564 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4f2:	d118      	bne.n	800a526 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a506:	461a      	mov	r2, r3
 800a508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e013      	b.n	800a538 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51c:	461a      	mov	r2, r3
 800a51e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	e008      	b.n	800a538 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a532:	461a      	mov	r2, r3
 800a534:	2300      	movs	r3, #0
 800a536:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	461a      	mov	r2, r3
 800a546:	2300      	movs	r3, #0
 800a548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a556:	461a      	mov	r2, r3
 800a558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a55c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3301      	adds	r3, #1
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d3b7      	bcc.n	800a4dc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a57a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a57e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a58c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f043 0210 	orr.w	r2, r3, #16
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	699a      	ldr	r2, [r3, #24]
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	; (800a5e0 <USB_DevInit+0x2d4>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	f043 0208 	orr.w	r2, r3, #8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d105      	bne.n	800a5d0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699a      	ldr	r2, [r3, #24]
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <USB_DevInit+0x2d8>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	803c3800 	.word	0x803c3800
 800a5e4:	40000004 	.word	0x40000004

0800a5e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	019b      	lsls	r3, r3, #6
 800a5fa:	f043 0220 	orr.w	r2, r3, #32
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3301      	adds	r3, #1
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4a09      	ldr	r2, [pc, #36]	; (800a630 <USB_FlushTxFifo+0x48>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d901      	bls.n	800a614 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e006      	b.n	800a622 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	f003 0320 	and.w	r3, r3, #32
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d0f0      	beq.n	800a602 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	00030d40 	.word	0x00030d40

0800a634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2210      	movs	r2, #16
 800a644:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3301      	adds	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4a09      	ldr	r2, [pc, #36]	; (800a674 <USB_FlushRxFifo+0x40>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d901      	bls.n	800a658 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e006      	b.n	800a666 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b10      	cmp	r3, #16
 800a662:	d0f0      	beq.n	800a646 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	00030d40 	.word	0x00030d40

0800a678 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a698:	4313      	orrs	r3, r2
 800a69a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b087      	sub	sp, #28
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f003 0306 	and.w	r3, r3, #6
 800a6c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75fb      	strb	r3, [r7, #23]
 800a6ce:	e00a      	b.n	800a6e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d002      	beq.n	800a6dc <USB_GetDevSpeed+0x32>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b06      	cmp	r3, #6
 800a6da:	d102      	bne.n	800a6e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	75fb      	strb	r3, [r7, #23]
 800a6e0:	e001      	b.n	800a6e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6e2:	230f      	movs	r3, #15
 800a6e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	785b      	ldrb	r3, [r3, #1]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d139      	bne.n	800a784 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	2101      	movs	r1, #1
 800a722:	fa01 f303 	lsl.w	r3, r1, r3
 800a726:	b29b      	uxth	r3, r3
 800a728:	68f9      	ldr	r1, [r7, #12]
 800a72a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a72e:	4313      	orrs	r3, r2
 800a730:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d153      	bne.n	800a7f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	78db      	ldrb	r3, [r3, #3]
 800a762:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a764:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	059b      	lsls	r3, r3, #22
 800a76a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a76c:	431a      	orrs	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	0159      	lsls	r1, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	440b      	add	r3, r1
 800a776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77a:	4619      	mov	r1, r3
 800a77c:	4b20      	ldr	r3, [pc, #128]	; (800a800 <USB_ActivateEndpoint+0x10c>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	600b      	str	r3, [r1, #0]
 800a782:	e035      	b.n	800a7f0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	2101      	movs	r1, #1
 800a796:	fa01 f303 	lsl.w	r3, r1, r3
 800a79a:	041b      	lsls	r3, r3, #16
 800a79c:	68f9      	ldr	r1, [r7, #12]
 800a79e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d119      	bne.n	800a7f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	78db      	ldrb	r3, [r3, #3]
 800a7d6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	0159      	lsls	r1, r3, #5
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	440b      	add	r3, r1
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <USB_ActivateEndpoint+0x10c>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	10008000 	.word	0x10008000

0800a804 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	785b      	ldrb	r3, [r3, #1]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d161      	bne.n	800a8e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a836:	d11f      	bne.n	800a878 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	0151      	lsls	r1, r2, #5
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	440a      	add	r2, r1
 800a84e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a856:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a876:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	2101      	movs	r1, #1
 800a88a:	fa01 f303 	lsl.w	r3, r1, r3
 800a88e:	b29b      	uxth	r3, r3
 800a890:	43db      	mvns	r3, r3
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a898:	4013      	ands	r3, r2
 800a89a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8bc:	4013      	ands	r3, r2
 800a8be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	0159      	lsls	r1, r3, #5
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4b35      	ldr	r3, [pc, #212]	; (800a9b4 <USB_DeactivateEndpoint+0x1b0>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	600b      	str	r3, [r1, #0]
 800a8e2:	e060      	b.n	800a9a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8fa:	d11f      	bne.n	800a93c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	0151      	lsls	r1, r2, #5
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	440a      	add	r2, r1
 800a912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a91a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a93a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	2101      	movs	r1, #1
 800a94e:	fa01 f303 	lsl.w	r3, r1, r3
 800a952:	041b      	lsls	r3, r3, #16
 800a954:	43db      	mvns	r3, r3
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a95c:	4013      	ands	r3, r2
 800a95e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	2101      	movs	r1, #1
 800a972:	fa01 f303 	lsl.w	r3, r1, r3
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	43db      	mvns	r3, r3
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a980:	4013      	ands	r3, r2
 800a982:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	0159      	lsls	r1, r3, #5
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	440b      	add	r3, r1
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <USB_DeactivateEndpoint+0x1b4>)
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	ec337800 	.word	0xec337800
 800a9b8:	eff37800 	.word	0xeff37800

0800a9bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 8163 	bne.w	800aca4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d132      	bne.n	800aa4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f2:	691a      	ldr	r2, [r3, #16]
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	0159      	lsls	r1, r3, #5
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	440b      	add	r3, r1
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa00:	4619      	mov	r1, r3
 800aa02:	4ba5      	ldr	r3, [pc, #660]	; (800ac98 <USB_EPStartXfer+0x2dc>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	015a      	lsls	r2, r3, #5
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	0151      	lsls	r1, r2, #5
 800aa1a:	69fa      	ldr	r2, [r7, #28]
 800aa1c:	440a      	add	r2, r1
 800aa1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	0159      	lsls	r1, r3, #5
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	440b      	add	r3, r1
 800aa3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa42:	4619      	mov	r1, r3
 800aa44:	4b95      	ldr	r3, [pc, #596]	; (800ac9c <USB_EPStartXfer+0x2e0>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	610b      	str	r3, [r1, #16]
 800aa4a:	e074      	b.n	800ab36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	0159      	lsls	r1, r3, #5
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	440b      	add	r3, r1
 800aa62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa66:	4619      	mov	r1, r3
 800aa68:	4b8c      	ldr	r3, [pc, #560]	; (800ac9c <USB_EPStartXfer+0x2e0>)
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	0159      	lsls	r1, r3, #5
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	440b      	add	r3, r1
 800aa84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4b83      	ldr	r3, [pc, #524]	; (800ac98 <USB_EPStartXfer+0x2dc>)
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	691a      	ldr	r2, [r3, #16]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6959      	ldr	r1, [r3, #20]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	440b      	add	r3, r1
 800aaa8:	1e59      	subs	r1, r3, #1
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	fbb1 f3f3 	udiv	r3, r1, r3
 800aab2:	04d9      	lsls	r1, r3, #19
 800aab4:	4b7a      	ldr	r3, [pc, #488]	; (800aca0 <USB_EPStartXfer+0x2e4>)
 800aab6:	400b      	ands	r3, r1
 800aab8:	69b9      	ldr	r1, [r7, #24]
 800aaba:	0148      	lsls	r0, r1, #5
 800aabc:	69f9      	ldr	r1, [r7, #28]
 800aabe:	4401      	add	r1, r0
 800aac0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aac4:	4313      	orrs	r3, r2
 800aac6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aade:	69b9      	ldr	r1, [r7, #24]
 800aae0:	0148      	lsls	r0, r1, #5
 800aae2:	69f9      	ldr	r1, [r7, #28]
 800aae4:	4401      	add	r1, r0
 800aae6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaea:	4313      	orrs	r3, r2
 800aaec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	78db      	ldrb	r3, [r3, #3]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d11f      	bne.n	800ab36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ab14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d14b      	bne.n	800abd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab50:	461a      	mov	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	78db      	ldrb	r3, [r3, #3]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d128      	bne.n	800abb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d110      	bne.n	800ab92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	0151      	lsls	r1, r2, #5
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	440a      	add	r2, r1
 800ab86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	e00f      	b.n	800abb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	0151      	lsls	r1, r2, #5
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	440a      	add	r2, r1
 800aba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e133      	b.n	800ae3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	69fa      	ldr	r2, [r7, #28]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	78db      	ldrb	r3, [r3, #3]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d015      	beq.n	800ac28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 811b 	beq.w	800ae3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	f003 030f 	and.w	r3, r3, #15
 800ac16:	2101      	movs	r1, #1
 800ac18:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac22:	4313      	orrs	r3, r2
 800ac24:	634b      	str	r3, [r1, #52]	; 0x34
 800ac26:	e109      	b.n	800ae3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d110      	bne.n	800ac5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e00f      	b.n	800ac7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68d9      	ldr	r1, [r3, #12]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	781a      	ldrb	r2, [r3, #0]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	b298      	uxth	r0, r3
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 fa38 	bl	800b104 <USB_WritePacket>
 800ac94:	e0d2      	b.n	800ae3c <USB_EPStartXfer+0x480>
 800ac96:	bf00      	nop
 800ac98:	e007ffff 	.word	0xe007ffff
 800ac9c:	fff80000 	.word	0xfff80000
 800aca0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	0159      	lsls	r1, r3, #5
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	440b      	add	r3, r1
 800acba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acbe:	4619      	mov	r1, r3
 800acc0:	4b61      	ldr	r3, [pc, #388]	; (800ae48 <USB_EPStartXfer+0x48c>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	0159      	lsls	r1, r3, #5
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	440b      	add	r3, r1
 800acdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace0:	4619      	mov	r1, r3
 800ace2:	4b5a      	ldr	r3, [pc, #360]	; (800ae4c <USB_EPStartXfer+0x490>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d123      	bne.n	800ad38 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad06:	69b9      	ldr	r1, [r7, #24]
 800ad08:	0148      	lsls	r0, r1, #5
 800ad0a:	69f9      	ldr	r1, [r7, #28]
 800ad0c:	4401      	add	r1, r0
 800ad0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad12:	4313      	orrs	r3, r2
 800ad14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	0151      	lsls	r1, r2, #5
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad34:	6113      	str	r3, [r2, #16]
 800ad36:	e033      	b.n	800ada0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	695a      	ldr	r2, [r3, #20]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	4413      	add	r3, r2
 800ad42:	1e5a      	subs	r2, r3, #1
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5a:	691a      	ldr	r2, [r3, #16]
 800ad5c:	8afb      	ldrh	r3, [r7, #22]
 800ad5e:	04d9      	lsls	r1, r3, #19
 800ad60:	4b3b      	ldr	r3, [pc, #236]	; (800ae50 <USB_EPStartXfer+0x494>)
 800ad62:	400b      	ands	r3, r1
 800ad64:	69b9      	ldr	r1, [r7, #24]
 800ad66:	0148      	lsls	r0, r1, #5
 800ad68:	69f9      	ldr	r1, [r7, #28]
 800ad6a:	4401      	add	r1, r0
 800ad6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad70:	4313      	orrs	r3, r2
 800ad72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad80:	691a      	ldr	r2, [r3, #16]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	8af9      	ldrh	r1, [r7, #22]
 800ad88:	fb01 f303 	mul.w	r3, r1, r3
 800ad8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad90:	69b9      	ldr	r1, [r7, #24]
 800ad92:	0148      	lsls	r0, r1, #5
 800ad94:	69f9      	ldr	r1, [r7, #28]
 800ad96:	4401      	add	r1, r0
 800ad98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d10d      	bne.n	800adc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	68d9      	ldr	r1, [r3, #12]
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	460a      	mov	r2, r1
 800adc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	78db      	ldrb	r3, [r3, #3]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d128      	bne.n	800ae1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add6:	2b00      	cmp	r3, #0
 800add8:	d110      	bne.n	800adfc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	015a      	lsls	r2, r3, #5
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	0151      	lsls	r1, r2, #5
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	440a      	add	r2, r1
 800adf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	e00f      	b.n	800ae1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	0151      	lsls	r1, r2, #5
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	440a      	add	r2, r1
 800ae12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	fff80000 	.word	0xfff80000
 800ae4c:	e007ffff 	.word	0xe007ffff
 800ae50:	1ff80000 	.word	0x1ff80000

0800ae54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	f040 80cd 	bne.w	800b010 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d132      	bne.n	800aee4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	0159      	lsls	r1, r3, #5
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	440b      	add	r3, r1
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4b98      	ldr	r3, [pc, #608]	; (800b0fc <USB_EP0StartXfer+0x2a8>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	691a      	ldr	r2, [r3, #16]
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	0159      	lsls	r1, r3, #5
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	440b      	add	r3, r1
 800aed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeda:	4619      	mov	r1, r3
 800aedc:	4b88      	ldr	r3, [pc, #544]	; (800b100 <USB_EP0StartXfer+0x2ac>)
 800aede:	4013      	ands	r3, r2
 800aee0:	610b      	str	r3, [r1, #16]
 800aee2:	e04e      	b.n	800af82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	0159      	lsls	r1, r3, #5
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	440b      	add	r3, r1
 800aefa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefe:	4619      	mov	r1, r3
 800af00:	4b7f      	ldr	r3, [pc, #508]	; (800b100 <USB_EP0StartXfer+0x2ac>)
 800af02:	4013      	ands	r3, r2
 800af04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af12:	691a      	ldr	r2, [r3, #16]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	0159      	lsls	r1, r3, #5
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	440b      	add	r3, r1
 800af1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af20:	4619      	mov	r1, r3
 800af22:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <USB_EP0StartXfer+0x2a8>)
 800af24:	4013      	ands	r3, r2
 800af26:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	695a      	ldr	r2, [r3, #20]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	429a      	cmp	r2, r3
 800af32:	d903      	bls.n	800af3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	689a      	ldr	r2, [r3, #8]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	0151      	lsls	r1, r2, #5
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	440a      	add	r2, r1
 800af52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af72:	6939      	ldr	r1, [r7, #16]
 800af74:	0148      	lsls	r0, r1, #5
 800af76:	6979      	ldr	r1, [r7, #20]
 800af78:	4401      	add	r1, r0
 800af7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af7e:	4313      	orrs	r3, r2
 800af80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af82:	79fb      	ldrb	r3, [r7, #7]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d11e      	bne.n	800afc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d009      	beq.n	800afa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9c:	461a      	mov	r2, r3
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	0151      	lsls	r1, r2, #5
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	440a      	add	r2, r1
 800afba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	e092      	b.n	800b0ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	0151      	lsls	r1, r2, #5
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	440a      	add	r2, r1
 800afdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afe4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d07e      	beq.n	800b0ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	2101      	movs	r1, #1
 800b000:	fa01 f303 	lsl.w	r3, r1, r3
 800b004:	6979      	ldr	r1, [r7, #20]
 800b006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b00a:	4313      	orrs	r3, r2
 800b00c:	634b      	str	r3, [r1, #52]	; 0x34
 800b00e:	e06d      	b.n	800b0ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	0159      	lsls	r1, r3, #5
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	440b      	add	r3, r1
 800b026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02a:	4619      	mov	r1, r3
 800b02c:	4b34      	ldr	r3, [pc, #208]	; (800b100 <USB_EP0StartXfer+0x2ac>)
 800b02e:	4013      	ands	r3, r2
 800b030:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	691a      	ldr	r2, [r3, #16]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	0159      	lsls	r1, r3, #5
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	440b      	add	r3, r1
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	4619      	mov	r1, r3
 800b04e:	4b2b      	ldr	r3, [pc, #172]	; (800b0fc <USB_EP0StartXfer+0x2a8>)
 800b050:	4013      	ands	r3, r2
 800b052:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b07e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b09a:	6939      	ldr	r1, [r7, #16]
 800b09c:	0148      	lsls	r0, r1, #5
 800b09e:	6979      	ldr	r1, [r7, #20]
 800b0a0:	4401      	add	r1, r0
 800b0a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b0aa:	79fb      	ldrb	r3, [r7, #7]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d10d      	bne.n	800b0cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d009      	beq.n	800b0cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	68d9      	ldr	r1, [r3, #12]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	015a      	lsls	r2, r3, #5
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c8:	460a      	mov	r2, r1
 800b0ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	0151      	lsls	r1, r2, #5
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	440a      	add	r2, r1
 800b0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	e007ffff 	.word	0xe007ffff
 800b100:	fff80000 	.word	0xfff80000

0800b104 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b104:	b480      	push	{r7}
 800b106:	b089      	sub	sp, #36	; 0x24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4611      	mov	r1, r2
 800b110:	461a      	mov	r2, r3
 800b112:	460b      	mov	r3, r1
 800b114:	71fb      	strb	r3, [r7, #7]
 800b116:	4613      	mov	r3, r2
 800b118:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b126:	2b00      	cmp	r3, #0
 800b128:	d11a      	bne.n	800b160 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b12a:	88bb      	ldrh	r3, [r7, #4]
 800b12c:	3303      	adds	r3, #3
 800b12e:	089b      	lsrs	r3, r3, #2
 800b130:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b132:	2300      	movs	r3, #0
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	e00f      	b.n	800b158 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	031a      	lsls	r2, r3, #12
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b144:	461a      	mov	r2, r3
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	3304      	adds	r3, #4
 800b150:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	3301      	adds	r3, #1
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d3eb      	bcc.n	800b138 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3724      	adds	r7, #36	; 0x24
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b16e:	b480      	push	{r7}
 800b170:	b089      	sub	sp, #36	; 0x24
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	4613      	mov	r3, r2
 800b17a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b184:	88fb      	ldrh	r3, [r7, #6]
 800b186:	3303      	adds	r3, #3
 800b188:	089b      	lsrs	r3, r3, #2
 800b18a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	61bb      	str	r3, [r7, #24]
 800b190:	e00b      	b.n	800b1aa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3ef      	bcc.n	800b192 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3724      	adds	r7, #36	; 0x24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	785b      	ldrb	r3, [r3, #1]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d12c      	bne.n	800b236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	db12      	blt.n	800b214 <USB_EPSetStall+0x54>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00f      	beq.n	800b214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	0151      	lsls	r1, r2, #5
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	440a      	add	r2, r1
 800b20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	0151      	lsls	r1, r2, #5
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	440a      	add	r2, r1
 800b22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b22e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	e02b      	b.n	800b28e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	015a      	lsls	r2, r3, #5
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	4413      	add	r3, r2
 800b23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	db12      	blt.n	800b26e <USB_EPSetStall+0xae>
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00f      	beq.n	800b26e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	440a      	add	r2, r1
 800b264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b26c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b28c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d128      	bne.n	800b30a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	0151      	lsls	r1, r2, #5
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	440a      	add	r2, r1
 800b2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	78db      	ldrb	r3, [r3, #3]
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d003      	beq.n	800b2e8 <USB_EPClearStall+0x4c>
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	78db      	ldrb	r3, [r3, #3]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d138      	bne.n	800b35a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	0151      	lsls	r1, r2, #5
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	440a      	add	r2, r1
 800b2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	e027      	b.n	800b35a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	0151      	lsls	r1, r2, #5
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	440a      	add	r2, r1
 800b320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	78db      	ldrb	r3, [r3, #3]
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d003      	beq.n	800b33a <USB_EPClearStall+0x9e>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	78db      	ldrb	r3, [r3, #3]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d10f      	bne.n	800b35a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	0151      	lsls	r1, r2, #5
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	440a      	add	r2, r1
 800b350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b38a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b39c:	68f9      	ldr	r1, [r7, #12]
 800b39e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3ce:	f023 0302 	bic.w	r3, r3, #2
 800b3d2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b3d4:	2003      	movs	r0, #3
 800b3d6:	f7f8 fc89 	bl	8003cec <HAL_Delay>

  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3fe:	f043 0302 	orr.w	r3, r3, #2
 800b402:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b404:	2003      	movs	r0, #3
 800b406:	f7f8 fc71 	bl	8003cec <HAL_Delay>

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4013      	ands	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b42c:	68fb      	ldr	r3, [r7, #12]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	4013      	ands	r3, r2
 800b45c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	0c1b      	lsrs	r3, r3, #16
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4013      	ands	r3, r2
 800b490:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	b29b      	uxth	r3, r3
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	01db      	lsls	r3, r3, #7
 800b510:	b2db      	uxtb	r3, r3
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	4313      	orrs	r3, r2
 800b516:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4013      	ands	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b52c:	68bb      	ldr	r3, [r7, #8]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0301 	and.w	r3, r3, #1
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b572:	4619      	mov	r1, r3
 800b574:	4b09      	ldr	r3, [pc, #36]	; (800b59c <USB_ActivateSetup+0x44>)
 800b576:	4013      	ands	r3, r2
 800b578:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b58c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	fffff800 	.word	0xfffff800

0800b5a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	333c      	adds	r3, #60	; 0x3c
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	4a26      	ldr	r2, [pc, #152]	; (800b658 <USB_EP0_OutStart+0xb8>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d90a      	bls.n	800b5da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5d4:	d101      	bne.n	800b5da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e037      	b.n	800b64a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b608:	f043 0318 	orr.w	r3, r3, #24
 800b60c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b61c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b620:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b622:	7afb      	ldrb	r3, [r7, #11]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10f      	bne.n	800b648 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b642:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	4f54300a 	.word	0x4f54300a

0800b65c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60fb      	str	r3, [r7, #12]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4a13      	ldr	r2, [pc, #76]	; (800b6c0 <USB_CoreReset+0x64>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d901      	bls.n	800b67a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e01b      	b.n	800b6b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	daf2      	bge.n	800b668 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f043 0201 	orr.w	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3301      	adds	r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4a09      	ldr	r2, [pc, #36]	; (800b6c0 <USB_CoreReset+0x64>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d901      	bls.n	800b6a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e006      	b.n	800b6b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d0f0      	beq.n	800b692 <USB_CoreReset+0x36>

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	00030d40 	.word	0x00030d40

0800b6c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b6c8:	4904      	ldr	r1, [pc, #16]	; (800b6dc <MX_FATFS_Init+0x18>)
 800b6ca:	4805      	ldr	r0, [pc, #20]	; (800b6e0 <MX_FATFS_Init+0x1c>)
 800b6cc:	f004 fd8e 	bl	80101ec <FATFS_LinkDriver>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b03      	ldr	r3, [pc, #12]	; (800b6e4 <MX_FATFS_Init+0x20>)
 800b6d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b6d8:	bf00      	nop
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	2001119c 	.word	0x2001119c
 800b6e0:	08016ec0 	.word	0x08016ec0
 800b6e4:	20011198 	.word	0x20011198

0800b6e8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b6ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b702:	f000 f896 	bl	800b832 <BSP_SD_IsDetected>
 800b706:	4603      	mov	r3, r0
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d001      	beq.n	800b710 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b70c:	2302      	movs	r3, #2
 800b70e:	e012      	b.n	800b736 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b710:	480b      	ldr	r0, [pc, #44]	; (800b740 <BSP_SD_Init+0x48>)
 800b712:	f7fb fb9f 	bl	8006e54 <HAL_SD_Init>
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b724:	4806      	ldr	r0, [pc, #24]	; (800b740 <BSP_SD_Init+0x48>)
 800b726:	f7fc f957 	bl	80079d8 <HAL_SD_ConfigWideBusOperation>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b734:	79fb      	ldrb	r3, [r7, #7]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20008884 	.word	0x20008884

0800b744 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	68f9      	ldr	r1, [r7, #12]
 800b75a:	4806      	ldr	r0, [pc, #24]	; (800b774 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b75c:	f7fb fc12 	bl	8006f84 <HAL_SD_ReadBlocks_DMA>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20008884 	.word	0x20008884

0800b778 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	68f9      	ldr	r1, [r7, #12]
 800b78e:	4806      	ldr	r0, [pc, #24]	; (800b7a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b790:	f7fb fce4 	bl	800715c <HAL_SD_WriteBlocks_DMA>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20008884 	.word	0x20008884

0800b7ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b7b0:	4805      	ldr	r0, [pc, #20]	; (800b7c8 <BSP_SD_GetCardState+0x1c>)
 800b7b2:	f7fc f98d 	bl	8007ad0 <HAL_SD_GetCardState>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	bf14      	ite	ne
 800b7bc:	2301      	movne	r3, #1
 800b7be:	2300      	moveq	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20008884 	.word	0x20008884

0800b7cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	4803      	ldr	r0, [pc, #12]	; (800b7e4 <BSP_SD_GetCardInfo+0x18>)
 800b7d8:	f7fc f8d2 	bl	8007980 <HAL_SD_GetCardInfo>
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20008884 	.word	0x20008884

0800b7e8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b7f0:	f000 f818 	bl	800b824 <BSP_SD_AbortCallback>
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b804:	f000 f998 	bl	800bb38 <BSP_SD_WriteCpltCallback>
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b818:	f000 f9a0 	bl	800bb5c <BSP_SD_ReadCpltCallback>
}
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0

}
 800b828:	bf00      	nop
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b838:	2301      	movs	r3, #1
 800b83a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	b2db      	uxtb	r3, r3
}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b854:	f004 fdb4 	bl	80103c0 <osKernelGetTickCount>
 800b858:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b85a:	e006      	b.n	800b86a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b85c:	f7ff ffa6 	bl	800b7ac <BSP_SD_GetCardState>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b866:	2300      	movs	r3, #0
 800b868:	e009      	b.n	800b87e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b86a:	f004 fda9 	bl	80103c0 <osKernelGetTickCount>
 800b86e:	4602      	mov	r2, r0
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d8f0      	bhi.n	800b85c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b892:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <SD_CheckStatus+0x38>)
 800b894:	2201      	movs	r2, #1
 800b896:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b898:	f7ff ff88 	bl	800b7ac <BSP_SD_GetCardState>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d107      	bne.n	800b8b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b8a2:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <SD_CheckStatus+0x38>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	f023 0301 	bic.w	r3, r3, #1
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <SD_CheckStatus+0x38>)
 800b8b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b8b2:	4b03      	ldr	r3, [pc, #12]	; (800b8c0 <SD_CheckStatus+0x38>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	b2db      	uxtb	r3, r3
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20000009 	.word	0x20000009

0800b8c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b8ce:	4b1c      	ldr	r3, [pc, #112]	; (800b940 <SD_initialize+0x7c>)
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b8d4:	f004 fd1c 	bl	8010310 <osKernelGetState>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d129      	bne.n	800b932 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b8de:	f7ff ff0b 	bl	800b6f8 <BSP_SD_Init>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d107      	bne.n	800b8f8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff ffcc 	bl	800b888 <SD_CheckStatus>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4b12      	ldr	r3, [pc, #72]	; (800b940 <SD_initialize+0x7c>)
 800b8f6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <SD_initialize+0x7c>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d017      	beq.n	800b932 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b902:	4b10      	ldr	r3, [pc, #64]	; (800b944 <SD_initialize+0x80>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d107      	bne.n	800b91a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b90a:	2200      	movs	r2, #0
 800b90c:	2102      	movs	r1, #2
 800b90e:	200a      	movs	r0, #10
 800b910:	f005 f9a6 	bl	8010c60 <osMessageQueueNew>
 800b914:	4602      	mov	r2, r0
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <SD_initialize+0x80>)
 800b918:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b91a:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <SD_initialize+0x80>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d107      	bne.n	800b932 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <SD_initialize+0x7c>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	f043 0301 	orr.w	r3, r3, #1
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	4b04      	ldr	r3, [pc, #16]	; (800b940 <SD_initialize+0x7c>)
 800b930:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <SD_initialize+0x7c>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000009 	.word	0x20000009
 800b944:	200002cc 	.word	0x200002cc

0800b948 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b952:	79fb      	ldrb	r3, [r7, #7]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff ff97 	bl	800b888 <SD_CheckStatus>
 800b95a:	4603      	mov	r3, r0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	607a      	str	r2, [r7, #4]
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b978:	f247 5030 	movw	r0, #30000	; 0x7530
 800b97c:	f7ff ff66 	bl	800b84c <SD_CheckStatusWithTimeout>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	da01      	bge.n	800b98a <SD_read+0x26>
  {
    return res;
 800b986:	7ffb      	ldrb	r3, [r7, #31]
 800b988:	e02f      	b.n	800b9ea <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	6879      	ldr	r1, [r7, #4]
 800b98e:	68b8      	ldr	r0, [r7, #8]
 800b990:	f7ff fed8 	bl	800b744 <BSP_SD_ReadBlocks_DMA>
 800b994:	4603      	mov	r3, r0
 800b996:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b998:	7fbb      	ldrb	r3, [r7, #30]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d124      	bne.n	800b9e8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b99e:	4b15      	ldr	r3, [pc, #84]	; (800b9f4 <SD_read+0x90>)
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f107 0112 	add.w	r1, r7, #18
 800b9a6:	f247 5330 	movw	r3, #30000	; 0x7530
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f005 fa52 	bl	8010e54 <osMessageQueueGet>
 800b9b0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d117      	bne.n	800b9e8 <SD_read+0x84>
 800b9b8:	8a7b      	ldrh	r3, [r7, #18]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d114      	bne.n	800b9e8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b9be:	f004 fcff 	bl	80103c0 <osKernelGetTickCount>
 800b9c2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b9c4:	e007      	b.n	800b9d6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9c6:	f7ff fef1 	bl	800b7ac <BSP_SD_GetCardState>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <SD_read+0x72>
              {
                res = RES_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b9d4:	e008      	b.n	800b9e8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b9d6:	f004 fcf3 	bl	80103c0 <osKernelGetTickCount>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d9ee      	bls.n	800b9c6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200002cc 	.word	0x200002cc

0800b9f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	607a      	str	r2, [r7, #4]
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	4603      	mov	r3, r0
 800ba06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ba0c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ba10:	f7ff ff1c 	bl	800b84c <SD_CheckStatusWithTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da01      	bge.n	800ba1e <SD_write+0x26>
  {
    return res;
 800ba1a:	7ffb      	ldrb	r3, [r7, #31]
 800ba1c:	e02d      	b.n	800ba7a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	68b8      	ldr	r0, [r7, #8]
 800ba24:	f7ff fea8 	bl	800b778 <BSP_SD_WriteBlocks_DMA>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d124      	bne.n	800ba78 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ba2e:	4b15      	ldr	r3, [pc, #84]	; (800ba84 <SD_write+0x8c>)
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	f107 0112 	add.w	r1, r7, #18
 800ba36:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f005 fa0a 	bl	8010e54 <osMessageQueueGet>
 800ba40:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d117      	bne.n	800ba78 <SD_write+0x80>
 800ba48:	8a7b      	ldrh	r3, [r7, #18]
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d114      	bne.n	800ba78 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ba4e:	f004 fcb7 	bl	80103c0 <osKernelGetTickCount>
 800ba52:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ba54:	e007      	b.n	800ba66 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba56:	f7ff fea9 	bl	800b7ac <BSP_SD_GetCardState>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <SD_write+0x6e>
          {
            res = RES_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	77fb      	strb	r3, [r7, #31]
            break;
 800ba64:	e008      	b.n	800ba78 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ba66:	f004 fcab 	bl	80103c0 <osKernelGetTickCount>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d9ee      	bls.n	800ba56 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ba78:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	200002cc 	.word	0x200002cc

0800ba88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08c      	sub	sp, #48	; 0x30
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	603a      	str	r2, [r7, #0]
 800ba92:	71fb      	strb	r3, [r7, #7]
 800ba94:	460b      	mov	r3, r1
 800ba96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba9e:	4b25      	ldr	r3, [pc, #148]	; (800bb34 <SD_ioctl+0xac>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <SD_ioctl+0x28>
 800baac:	2303      	movs	r3, #3
 800baae:	e03c      	b.n	800bb2a <SD_ioctl+0xa2>

  switch (cmd)
 800bab0:	79bb      	ldrb	r3, [r7, #6]
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d834      	bhi.n	800bb20 <SD_ioctl+0x98>
 800bab6:	a201      	add	r2, pc, #4	; (adr r2, 800babc <SD_ioctl+0x34>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800bacd 	.word	0x0800bacd
 800bac0:	0800bad5 	.word	0x0800bad5
 800bac4:	0800baed 	.word	0x0800baed
 800bac8:	0800bb07 	.word	0x0800bb07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bad2:	e028      	b.n	800bb26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bad4:	f107 030c 	add.w	r3, r7, #12
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fe77 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800baea:	e01c      	b.n	800bb26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fe6b 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb04:	e00f      	b.n	800bb26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb06:	f107 030c 	add.w	r3, r7, #12
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fe5e 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	0a5a      	lsrs	r2, r3, #9
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb1e:	e002      	b.n	800bb26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb20:	2304      	movs	r3, #4
 800bb22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bb26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3730      	adds	r7, #48	; 0x30
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000009 	.word	0x20000009

0800bb38 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <BSP_SD_WriteCpltCallback+0x20>)
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	1db9      	adds	r1, r7, #6
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f005 f90e 	bl	8010d6c <osMessageQueuePut>
#endif
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200002cc 	.word	0x200002cc

0800bb5c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bb62:	2301      	movs	r3, #1
 800bb64:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <BSP_SD_ReadCpltCallback+0x20>)
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	1db9      	adds	r1, r7, #6
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f005 f8fc 	bl	8010d6c <osMessageQueuePut>
#endif
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	200002cc 	.word	0x200002cc

0800bb80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb90:	f009 f95e 	bl	8014e50 <malloc>
 800bb94:	4603      	mov	r3, r0
 800bb96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d105      	bne.n	800bbaa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bba6:	2302      	movs	r3, #2
 800bba8:	e066      	b.n	800bc78 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7c1b      	ldrb	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d119      	bne.n	800bbee <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	2181      	movs	r1, #129	; 0x81
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f008 ff77 	bl	8014ab6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f008 ff6d 	bl	8014ab6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2210      	movs	r2, #16
 800bbe8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbec:	e016      	b.n	800bc1c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbee:	2340      	movs	r3, #64	; 0x40
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	2181      	movs	r1, #129	; 0x81
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f008 ff5e 	bl	8014ab6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	2202      	movs	r2, #2
 800bc04:	2101      	movs	r1, #1
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f008 ff55 	bl	8014ab6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2210      	movs	r2, #16
 800bc18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc1c:	2308      	movs	r3, #8
 800bc1e:	2203      	movs	r2, #3
 800bc20:	2182      	movs	r1, #130	; 0x82
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f008 ff47 	bl	8014ab6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7c1b      	ldrb	r3, [r3, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d109      	bne.n	800bc66 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f009 f818 	bl	8014c94 <USBD_LL_PrepareReceive>
 800bc64:	e007      	b.n	800bc76 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc6c:	2340      	movs	r3, #64	; 0x40
 800bc6e:	2101      	movs	r1, #1
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f009 f80f 	bl	8014c94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc90:	2181      	movs	r1, #129	; 0x81
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f008 ff35 	bl	8014b02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc9e:	2101      	movs	r1, #1
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f008 ff2e 	bl	8014b02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bcae:	2182      	movs	r1, #130	; 0x82
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f008 ff26 	bl	8014b02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00e      	beq.n	800bcee <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce0:	4618      	mov	r0, r3
 800bce2:	f009 f8bd 	bl	8014e60 <free>
    pdev->pClassData = NULL;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd08:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d03a      	beq.n	800bd98 <USBD_CDC_Setup+0xa0>
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	f040 8097 	bne.w	800be56 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	88db      	ldrh	r3, [r3, #6]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d029      	beq.n	800bd84 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b25b      	sxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	da11      	bge.n	800bd5e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bd46:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	88d2      	ldrh	r2, [r2, #6]
 800bd4c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd4e:	6939      	ldr	r1, [r7, #16]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	88db      	ldrh	r3, [r3, #6]
 800bd54:	461a      	mov	r2, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f001 fac7 	bl	800d2ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800bd5c:	e082      	b.n	800be64 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	785a      	ldrb	r2, [r3, #1]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	88db      	ldrh	r3, [r3, #6]
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd74:	6939      	ldr	r1, [r7, #16]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	88db      	ldrh	r3, [r3, #6]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f001 fae0 	bl	800d342 <USBD_CtlPrepareRx>
    break;
 800bd82:	e06f      	b.n	800be64 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	7850      	ldrb	r0, [r2, #1]
 800bd90:	2200      	movs	r2, #0
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	4798      	blx	r3
    break;
 800bd96:	e065      	b.n	800be64 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	2b0b      	cmp	r3, #11
 800bd9e:	d84f      	bhi.n	800be40 <USBD_CDC_Setup+0x148>
 800bda0:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <USBD_CDC_Setup+0xb0>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdd9 	.word	0x0800bdd9
 800bdac:	0800be4f 	.word	0x0800be4f
 800bdb0:	0800be41 	.word	0x0800be41
 800bdb4:	0800be41 	.word	0x0800be41
 800bdb8:	0800be41 	.word	0x0800be41
 800bdbc:	0800be41 	.word	0x0800be41
 800bdc0:	0800be41 	.word	0x0800be41
 800bdc4:	0800be41 	.word	0x0800be41
 800bdc8:	0800be41 	.word	0x0800be41
 800bdcc:	0800be41 	.word	0x0800be41
 800bdd0:	0800be01 	.word	0x0800be01
 800bdd4:	0800be29 	.word	0x0800be29
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d107      	bne.n	800bdf2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bde2:	f107 030c 	add.w	r3, r7, #12
 800bde6:	2202      	movs	r2, #2
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 fa7d 	bl	800d2ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bdf0:	e030      	b.n	800be54 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 fa07 	bl	800d208 <USBD_CtlError>
        ret = USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	75fb      	strb	r3, [r7, #23]
      break;
 800bdfe:	e029      	b.n	800be54 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be06:	2b03      	cmp	r3, #3
 800be08:	d107      	bne.n	800be1a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be0a:	f107 030f 	add.w	r3, r7, #15
 800be0e:	2201      	movs	r2, #1
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 fa69 	bl	800d2ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800be18:	e01c      	b.n	800be54 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f9f3 	bl	800d208 <USBD_CtlError>
        ret = USBD_FAIL;
 800be22:	2303      	movs	r3, #3
 800be24:	75fb      	strb	r3, [r7, #23]
      break;
 800be26:	e015      	b.n	800be54 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d00f      	beq.n	800be52 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f001 f9e7 	bl	800d208 <USBD_CtlError>
        ret = USBD_FAIL;
 800be3a:	2303      	movs	r3, #3
 800be3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be3e:	e008      	b.n	800be52 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 f9e0 	bl	800d208 <USBD_CtlError>
      ret = USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	75fb      	strb	r3, [r7, #23]
      break;
 800be4c:	e002      	b.n	800be54 <USBD_CDC_Setup+0x15c>
      break;
 800be4e:	bf00      	nop
 800be50:	e008      	b.n	800be64 <USBD_CDC_Setup+0x16c>
      break;
 800be52:	bf00      	nop
    }
    break;
 800be54:	e006      	b.n	800be64 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 f9d5 	bl	800d208 <USBD_CtlError>
    ret = USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	75fb      	strb	r3, [r7, #23]
    break;
 800be62:	bf00      	nop
  }

  return (uint8_t)ret;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop

0800be70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be8e:	2303      	movs	r3, #3
 800be90:	e049      	b.n	800bf26 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be9a:	78fa      	ldrb	r2, [r7, #3]
 800be9c:	6879      	ldr	r1, [r7, #4]
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	3318      	adds	r3, #24
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d029      	beq.n	800bf04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800beb0:	78fa      	ldrb	r2, [r7, #3]
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	440b      	add	r3, r1
 800bebe:	3318      	adds	r3, #24
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	78f9      	ldrb	r1, [r7, #3]
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	460b      	mov	r3, r1
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	1a5b      	subs	r3, r3, r1
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4403      	add	r3, r0
 800bed0:	3344      	adds	r3, #68	; 0x44
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bed8:	fb03 f301 	mul.w	r3, r3, r1
 800bedc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d110      	bne.n	800bf04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	3318      	adds	r3, #24
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bef6:	78f9      	ldrb	r1, [r7, #3]
 800bef8:	2300      	movs	r3, #0
 800befa:	2200      	movs	r2, #0
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f008 fea8 	bl	8014c52 <USBD_LL_Transmit>
 800bf02:	e00f      	b.n	800bf24 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e015      	b.n	800bf7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f008 febe 	bl	8014cd6 <USBD_LL_GetRxDataSize>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf76:	4611      	mov	r1, r2
 800bf78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf92:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d015      	beq.n	800bfca <USBD_CDC_EP0_RxReady+0x46>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfa4:	2bff      	cmp	r3, #255	; 0xff
 800bfa6:	d010      	beq.n	800bfca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfb6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfbe:	b292      	uxth	r2, r2
 800bfc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	22ff      	movs	r2, #255	; 0xff
 800bfc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2243      	movs	r2, #67	; 0x43
 800bfe0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bfe2:	4b03      	ldr	r3, [pc, #12]	; (800bff0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	20000094 	.word	0x20000094

0800bff4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2243      	movs	r2, #67	; 0x43
 800c000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c002:	4b03      	ldr	r3, [pc, #12]	; (800c010 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	20000050 	.word	0x20000050

0800c014 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2243      	movs	r2, #67	; 0x43
 800c020:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c022:	4b03      	ldr	r3, [pc, #12]	; (800c030 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c024:	4618      	mov	r0, r3
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	200000d8 	.word	0x200000d8

0800c034 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	220a      	movs	r2, #10
 800c040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c042:	4b03      	ldr	r3, [pc, #12]	; (800c050 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	2000000c 	.word	0x2000000c

0800c054 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	e004      	b.n	800c072 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c07e:	b480      	push	{r7}
 800c080:	b087      	sub	sp, #28
 800c082:	af00      	add	r7, sp, #0
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c090:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	371c      	adds	r7, #28
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0c0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e01a      	b.n	800c130 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c100:	2b00      	cmp	r3, #0
 800c102:	d114      	bne.n	800c12e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2201      	movs	r2, #1
 800c108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c122:	2181      	movs	r1, #129	; 0x81
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f008 fd94 	bl	8014c52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c152:	2303      	movs	r3, #3
 800c154:	e016      	b.n	800c184 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	7c1b      	ldrb	r3, [r3, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c164:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c168:	2101      	movs	r1, #1
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f008 fd92 	bl	8014c94 <USBD_LL_PrepareReceive>
 800c170:	e007      	b.n	800c182 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c178:	2340      	movs	r3, #64	; 0x40
 800c17a:	2101      	movs	r1, #1
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f008 fd89 	bl	8014c94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	4613      	mov	r3, r2
 800c198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e025      	b.n	800c1f0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	79fa      	ldrb	r2, [r7, #7]
 800c1e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f008 fbff 	bl	80149e8 <USBD_LL_Init>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	e010      	b.n	800c232 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c220:	f107 020e 	add.w	r2, r7, #14
 800c224:	4610      	mov	r0, r2
 800c226:	4798      	blx	r3
 800c228:	4602      	mov	r2, r0
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f008 fc1c 	bl	8014a80 <USBD_LL_Start>
 800c248:	4603      	mov	r3, r0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c274:	2303      	movs	r3, #3
 800c276:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d009      	beq.n	800c296 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	4611      	mov	r1, r2
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	4798      	blx	r3
 800c292:	4603      	mov	r3, r0
 800c294:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	78fa      	ldrb	r2, [r7, #3]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	4798      	blx	r3
  }

  return USBD_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 ff56 	bl	800d194 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c304:	f003 031f 	and.w	r3, r3, #31
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d00e      	beq.n	800c32a <USBD_LL_SetupStage+0x5a>
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d302      	bcc.n	800c316 <USBD_LL_SetupStage+0x46>
 800c310:	2b02      	cmp	r3, #2
 800c312:	d014      	beq.n	800c33e <USBD_LL_SetupStage+0x6e>
 800c314:	e01d      	b.n	800c352 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fa18 	bl	800c754 <USBD_StdDevReq>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]
      break;
 800c328:	e020      	b.n	800c36c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa7c 	bl	800c830 <USBD_StdItfReq>
 800c338:	4603      	mov	r3, r0
 800c33a:	73fb      	strb	r3, [r7, #15]
      break;
 800c33c:	e016      	b.n	800c36c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fab8 	bl	800c8bc <USBD_StdEPReq>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]
      break;
 800c350:	e00c      	b.n	800c36c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f008 fbed 	bl	8014b40 <USBD_LL_StallEP>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]
      break;
 800c36a:	bf00      	nop
  }

  return ret;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	460b      	mov	r3, r1
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d137      	bne.n	800c3fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d14a      	bne.n	800c432 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d913      	bls.n	800c3d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	689a      	ldr	r2, [r3, #8]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	bf28      	it	cs
 800c3c2:	4613      	movcs	r3, r2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 ffd7 	bl	800d37c <USBD_CtlContinueRx>
 800c3ce:	e030      	b.n	800c432 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00a      	beq.n	800c3f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d105      	bne.n	800c3f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 ffd3 	bl	800d39e <USBD_CtlSendStatus>
 800c3f8:	e01b      	b.n	800c432 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d013      	beq.n	800c42e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d10e      	bne.n	800c42e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	7afa      	ldrb	r2, [r7, #11]
 800c41a:	4611      	mov	r1, r2
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	4798      	blx	r3
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	e002      	b.n	800c434 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c42e:	2303      	movs	r3, #3
 800c430:	e000      	b.n	800c434 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	460b      	mov	r3, r1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c44a:	7afb      	ldrb	r3, [r7, #11]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d16a      	bne.n	800c526 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3314      	adds	r3, #20
 800c454:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d155      	bne.n	800c50c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	689a      	ldr	r2, [r3, #8]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d914      	bls.n	800c496 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	461a      	mov	r2, r3
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f000 ff4c 	bl	800d320 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c488:	2300      	movs	r3, #0
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f008 fc00 	bl	8014c94 <USBD_LL_PrepareReceive>
 800c494:	e03a      	b.n	800c50c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d11c      	bne.n	800c4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d316      	bcc.n	800c4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d20f      	bcs.n	800c4dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2100      	movs	r1, #0
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 ff2d 	bl	800d320 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f008 fbdd 	bl	8014c94 <USBD_LL_PrepareReceive>
 800c4da:	e017      	b.n	800c50c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d105      	bne.n	800c4fe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4fe:	2180      	movs	r1, #128	; 0x80
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f008 fb1d 	bl	8014b40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f000 ff5c 	bl	800d3c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d123      	bne.n	800c55e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff fe9b 	bl	800c252 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c524:	e01b      	b.n	800c55e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d013      	beq.n	800c55a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d10e      	bne.n	800c55a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	7afa      	ldrb	r2, [r7, #11]
 800c546:	4611      	mov	r1, r2
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	4798      	blx	r3
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	e002      	b.n	800c560 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e000      	b.n	800c560 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c594:	2b00      	cmp	r3, #0
 800c596:	d009      	beq.n	800c5ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6852      	ldr	r2, [r2, #4]
 800c5a4:	b2d2      	uxtb	r2, r2
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f008 fa7f 	bl	8014ab6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2240      	movs	r2, #64	; 0x40
 800c5c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2180      	movs	r1, #128	; 0x80
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f008 fa71 	bl	8014ab6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2240      	movs	r2, #64	; 0x40
 800c5de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	78fa      	ldrb	r2, [r7, #3]
 800c5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2204      	movs	r2, #4
 800c622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c642:	2b04      	cmp	r3, #4
 800c644:	d105      	bne.n	800c652 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d10b      	bne.n	800c68a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c678:	69db      	ldr	r3, [r3, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d005      	beq.n	800c68a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d009      	beq.n	800c70c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	6852      	ldr	r2, [r2, #4]
 800c704:	b2d2      	uxtb	r2, r2
 800c706:	4611      	mov	r1, r2
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	4798      	blx	r3
  }

  return USBD_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c716:	b480      	push	{r7}
 800c718:	b087      	sub	sp, #28
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	3301      	adds	r3, #1
 800c72c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c734:	8a3b      	ldrh	r3, [r7, #16]
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	b21a      	sxth	r2, r3
 800c73a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c73e:	4313      	orrs	r3, r2
 800c740:	b21b      	sxth	r3, r3
 800c742:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c744:	89fb      	ldrh	r3, [r7, #14]
}
 800c746:	4618      	mov	r0, r3
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
	...

0800c754 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c76a:	2b20      	cmp	r3, #32
 800c76c:	d004      	beq.n	800c778 <USBD_StdDevReq+0x24>
 800c76e:	2b40      	cmp	r3, #64	; 0x40
 800c770:	d002      	beq.n	800c778 <USBD_StdDevReq+0x24>
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <USBD_StdDevReq+0x38>
 800c776:	e050      	b.n	800c81a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	4798      	blx	r3
 800c786:	4603      	mov	r3, r0
 800c788:	73fb      	strb	r3, [r7, #15]
    break;
 800c78a:	e04b      	b.n	800c824 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b09      	cmp	r3, #9
 800c792:	d83c      	bhi.n	800c80e <USBD_StdDevReq+0xba>
 800c794:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <USBD_StdDevReq+0x48>)
 800c796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79a:	bf00      	nop
 800c79c:	0800c7f1 	.word	0x0800c7f1
 800c7a0:	0800c805 	.word	0x0800c805
 800c7a4:	0800c80f 	.word	0x0800c80f
 800c7a8:	0800c7fb 	.word	0x0800c7fb
 800c7ac:	0800c80f 	.word	0x0800c80f
 800c7b0:	0800c7cf 	.word	0x0800c7cf
 800c7b4:	0800c7c5 	.word	0x0800c7c5
 800c7b8:	0800c80f 	.word	0x0800c80f
 800c7bc:	0800c7e7 	.word	0x0800c7e7
 800c7c0:	0800c7d9 	.word	0x0800c7d9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f9ce 	bl	800cb68 <USBD_GetDescriptor>
      break;
 800c7cc:	e024      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fb5d 	bl	800ce90 <USBD_SetAddress>
      break;
 800c7d6:	e01f      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fb9a 	bl	800cf14 <USBD_SetConfig>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e4:	e018      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fc37 	bl	800d05c <USBD_GetConfig>
      break;
 800c7ee:	e013      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fc66 	bl	800d0c4 <USBD_GetStatus>
      break;
 800c7f8:	e00e      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fc94 	bl	800d12a <USBD_SetFeature>
      break;
 800c802:	e009      	b.n	800c818 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fca3 	bl	800d152 <USBD_ClrFeature>
      break;
 800c80c:	e004      	b.n	800c818 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fcf9 	bl	800d208 <USBD_CtlError>
      break;
 800c816:	bf00      	nop
    }
    break;
 800c818:	e004      	b.n	800c824 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fcf3 	bl	800d208 <USBD_CtlError>
    break;
 800c822:	bf00      	nop
  }

  return ret;
 800c824:	7bfb      	ldrb	r3, [r7, #15]
}
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop

0800c830 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c846:	2b20      	cmp	r3, #32
 800c848:	d003      	beq.n	800c852 <USBD_StdItfReq+0x22>
 800c84a:	2b40      	cmp	r3, #64	; 0x40
 800c84c:	d001      	beq.n	800c852 <USBD_StdItfReq+0x22>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d12a      	bne.n	800c8a8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c858:	3b01      	subs	r3, #1
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d81d      	bhi.n	800c89a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	889b      	ldrh	r3, [r3, #4]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b01      	cmp	r3, #1
 800c866:	d813      	bhi.n	800c890 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	4798      	blx	r3
 800c876:	4603      	mov	r3, r0
 800c878:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	88db      	ldrh	r3, [r3, #6]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d110      	bne.n	800c8a4 <USBD_StdItfReq+0x74>
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10d      	bne.n	800c8a4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fd88 	bl	800d39e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c88e:	e009      	b.n	800c8a4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fcb8 	bl	800d208 <USBD_CtlError>
      break;
 800c898:	e004      	b.n	800c8a4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fcb3 	bl	800d208 <USBD_CtlError>
      break;
 800c8a2:	e000      	b.n	800c8a6 <USBD_StdItfReq+0x76>
      break;
 800c8a4:	bf00      	nop
    }
    break;
 800c8a6:	e004      	b.n	800c8b2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fcac 	bl	800d208 <USBD_CtlError>
    break;
 800c8b0:	bf00      	nop
  }

  return ret;
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	889b      	ldrh	r3, [r3, #4]
 800c8ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8d8:	2b20      	cmp	r3, #32
 800c8da:	d004      	beq.n	800c8e6 <USBD_StdEPReq+0x2a>
 800c8dc:	2b40      	cmp	r3, #64	; 0x40
 800c8de:	d002      	beq.n	800c8e6 <USBD_StdEPReq+0x2a>
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00a      	beq.n	800c8fa <USBD_StdEPReq+0x3e>
 800c8e4:	e135      	b.n	800cb52 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	4798      	blx	r3
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8f8:	e130      	b.n	800cb5c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	785b      	ldrb	r3, [r3, #1]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d03e      	beq.n	800c980 <USBD_StdEPReq+0xc4>
 800c902:	2b03      	cmp	r3, #3
 800c904:	d002      	beq.n	800c90c <USBD_StdEPReq+0x50>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d077      	beq.n	800c9fa <USBD_StdEPReq+0x13e>
 800c90a:	e11c      	b.n	800cb46 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c912:	2b02      	cmp	r3, #2
 800c914:	d002      	beq.n	800c91c <USBD_StdEPReq+0x60>
 800c916:	2b03      	cmp	r3, #3
 800c918:	d015      	beq.n	800c946 <USBD_StdEPReq+0x8a>
 800c91a:	e02b      	b.n	800c974 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00c      	beq.n	800c93c <USBD_StdEPReq+0x80>
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	2b80      	cmp	r3, #128	; 0x80
 800c926:	d009      	beq.n	800c93c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f008 f907 	bl	8014b40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c932:	2180      	movs	r1, #128	; 0x80
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f008 f903 	bl	8014b40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c93a:	e020      	b.n	800c97e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fc62 	bl	800d208 <USBD_CtlError>
        break;
 800c944:	e01b      	b.n	800c97e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	885b      	ldrh	r3, [r3, #2]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10e      	bne.n	800c96c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c94e:	7bbb      	ldrb	r3, [r7, #14]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <USBD_StdEPReq+0xb0>
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2b80      	cmp	r3, #128	; 0x80
 800c958:	d008      	beq.n	800c96c <USBD_StdEPReq+0xb0>
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	88db      	ldrh	r3, [r3, #6]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f008 f8ea 	bl	8014b40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fd16 	bl	800d39e <USBD_CtlSendStatus>

        break;
 800c972:	e004      	b.n	800c97e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fc46 	bl	800d208 <USBD_CtlError>
        break;
 800c97c:	bf00      	nop
      }
      break;
 800c97e:	e0e7      	b.n	800cb50 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c986:	2b02      	cmp	r3, #2
 800c988:	d002      	beq.n	800c990 <USBD_StdEPReq+0xd4>
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d015      	beq.n	800c9ba <USBD_StdEPReq+0xfe>
 800c98e:	e02d      	b.n	800c9ec <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00c      	beq.n	800c9b0 <USBD_StdEPReq+0xf4>
 800c996:	7bbb      	ldrb	r3, [r7, #14]
 800c998:	2b80      	cmp	r3, #128	; 0x80
 800c99a:	d009      	beq.n	800c9b0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c99c:	7bbb      	ldrb	r3, [r7, #14]
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f008 f8cd 	bl	8014b40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9a6:	2180      	movs	r1, #128	; 0x80
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f008 f8c9 	bl	8014b40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c9ae:	e023      	b.n	800c9f8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fc28 	bl	800d208 <USBD_CtlError>
        break;
 800c9b8:	e01e      	b.n	800c9f8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d119      	bne.n	800c9f6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c9c2:	7bbb      	ldrb	r3, [r7, #14]
 800c9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f008 f8d4 	bl	8014b7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fce1 	bl	800d39e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	4798      	blx	r3
        }
        break;
 800c9ea:	e004      	b.n	800c9f6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fc0a 	bl	800d208 <USBD_CtlError>
        break;
 800c9f4:	e000      	b.n	800c9f8 <USBD_StdEPReq+0x13c>
        break;
 800c9f6:	bf00      	nop
      }
      break;
 800c9f8:	e0aa      	b.n	800cb50 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d002      	beq.n	800ca0a <USBD_StdEPReq+0x14e>
 800ca04:	2b03      	cmp	r3, #3
 800ca06:	d032      	beq.n	800ca6e <USBD_StdEPReq+0x1b2>
 800ca08:	e097      	b.n	800cb3a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca0a:	7bbb      	ldrb	r3, [r7, #14]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <USBD_StdEPReq+0x164>
 800ca10:	7bbb      	ldrb	r3, [r7, #14]
 800ca12:	2b80      	cmp	r3, #128	; 0x80
 800ca14:	d004      	beq.n	800ca20 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fbf5 	bl	800d208 <USBD_CtlError>
          break;
 800ca1e:	e091      	b.n	800cb44 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	da0b      	bge.n	800ca40 <USBD_StdEPReq+0x184>
 800ca28:	7bbb      	ldrb	r3, [r7, #14]
 800ca2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	3310      	adds	r3, #16
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	e00b      	b.n	800ca58 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	4413      	add	r3, r2
 800ca56:	3304      	adds	r3, #4
 800ca58:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2202      	movs	r2, #2
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fc3f 	bl	800d2ea <USBD_CtlSendData>
        break;
 800ca6c:	e06a      	b.n	800cb44 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ca6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	da11      	bge.n	800ca9a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	f003 020f 	and.w	r2, r3, #15
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	440b      	add	r3, r1
 800ca88:	3324      	adds	r3, #36	; 0x24
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d117      	bne.n	800cac0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fbb8 	bl	800d208 <USBD_CtlError>
            break;
 800ca98:	e054      	b.n	800cb44 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	f003 020f 	and.w	r2, r3, #15
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	440b      	add	r3, r1
 800caac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d104      	bne.n	800cac0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fba5 	bl	800d208 <USBD_CtlError>
            break;
 800cabe:	e041      	b.n	800cb44 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	da0b      	bge.n	800cae0 <USBD_StdEPReq+0x224>
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	3310      	adds	r3, #16
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	3304      	adds	r3, #4
 800cade:	e00b      	b.n	800caf8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	4413      	add	r3, r2
 800caf6:	3304      	adds	r3, #4
 800caf8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <USBD_StdEPReq+0x24a>
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
 800cb02:	2b80      	cmp	r3, #128	; 0x80
 800cb04:	d103      	bne.n	800cb0e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e00e      	b.n	800cb2c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f008 f852 	bl	8014bbc <USBD_LL_IsStallEP>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2201      	movs	r2, #1
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	e002      	b.n	800cb2c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fbd9 	bl	800d2ea <USBD_CtlSendData>
          break;
 800cb38:	e004      	b.n	800cb44 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fb63 	bl	800d208 <USBD_CtlError>
        break;
 800cb42:	bf00      	nop
      }
      break;
 800cb44:	e004      	b.n	800cb50 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fb5d 	bl	800d208 <USBD_CtlError>
      break;
 800cb4e:	bf00      	nop
    }
    break;
 800cb50:	e004      	b.n	800cb5c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fb57 	bl	800d208 <USBD_CtlError>
    break;
 800cb5a:	bf00      	nop
  }

  return ret;
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	885b      	ldrh	r3, [r3, #2]
 800cb82:	0a1b      	lsrs	r3, r3, #8
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	3b01      	subs	r3, #1
 800cb88:	2b0e      	cmp	r3, #14
 800cb8a:	f200 8152 	bhi.w	800ce32 <USBD_GetDescriptor+0x2ca>
 800cb8e:	a201      	add	r2, pc, #4	; (adr r2, 800cb94 <USBD_GetDescriptor+0x2c>)
 800cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb94:	0800cc05 	.word	0x0800cc05
 800cb98:	0800cc1d 	.word	0x0800cc1d
 800cb9c:	0800cc5d 	.word	0x0800cc5d
 800cba0:	0800ce33 	.word	0x0800ce33
 800cba4:	0800ce33 	.word	0x0800ce33
 800cba8:	0800cdd3 	.word	0x0800cdd3
 800cbac:	0800cdff 	.word	0x0800cdff
 800cbb0:	0800ce33 	.word	0x0800ce33
 800cbb4:	0800ce33 	.word	0x0800ce33
 800cbb8:	0800ce33 	.word	0x0800ce33
 800cbbc:	0800ce33 	.word	0x0800ce33
 800cbc0:	0800ce33 	.word	0x0800ce33
 800cbc4:	0800ce33 	.word	0x0800ce33
 800cbc8:	0800ce33 	.word	0x0800ce33
 800cbcc:	0800cbd1 	.word	0x0800cbd1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00b      	beq.n	800cbf4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbe2:	69db      	ldr	r3, [r3, #28]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	7c12      	ldrb	r2, [r2, #16]
 800cbe8:	f107 0108 	add.w	r1, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cbf2:	e126      	b.n	800ce42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fb06 	bl	800d208 <USBD_CtlError>
      err++;
 800cbfc:	7afb      	ldrb	r3, [r7, #11]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	72fb      	strb	r3, [r7, #11]
    break;
 800cc02:	e11e      	b.n	800ce42 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	7c12      	ldrb	r2, [r2, #16]
 800cc10:	f107 0108 	add.w	r1, r7, #8
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60f8      	str	r0, [r7, #12]
    break;
 800cc1a:	e112      	b.n	800ce42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	7c1b      	ldrb	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10d      	bne.n	800cc40 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2c:	f107 0208 	add.w	r2, r7, #8
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
 800cc34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cc3e:	e100      	b.n	800ce42 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	f107 0208 	add.w	r2, r7, #8
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3301      	adds	r3, #1
 800cc56:	2202      	movs	r2, #2
 800cc58:	701a      	strb	r2, [r3, #0]
    break;
 800cc5a:	e0f2      	b.n	800ce42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	885b      	ldrh	r3, [r3, #2]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	f200 80ac 	bhi.w	800cdc0 <USBD_GetDescriptor+0x258>
 800cc68:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <USBD_GetDescriptor+0x108>)
 800cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6e:	bf00      	nop
 800cc70:	0800cc89 	.word	0x0800cc89
 800cc74:	0800ccbd 	.word	0x0800ccbd
 800cc78:	0800ccf1 	.word	0x0800ccf1
 800cc7c:	0800cd25 	.word	0x0800cd25
 800cc80:	0800cd59 	.word	0x0800cd59
 800cc84:	0800cd8d 	.word	0x0800cd8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	7c12      	ldrb	r2, [r2, #16]
 800cca0:	f107 0108 	add.w	r1, r7, #8
 800cca4:	4610      	mov	r0, r2
 800cca6:	4798      	blx	r3
 800cca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccaa:	e091      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 faaa 	bl	800d208 <USBD_CtlError>
        err++;
 800ccb4:	7afb      	ldrb	r3, [r7, #11]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	72fb      	strb	r3, [r7, #11]
      break;
 800ccba:	e089      	b.n	800cdd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00b      	beq.n	800cce0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	7c12      	ldrb	r2, [r2, #16]
 800ccd4:	f107 0108 	add.w	r1, r7, #8
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
 800ccdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccde:	e077      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fa90 	bl	800d208 <USBD_CtlError>
        err++;
 800cce8:	7afb      	ldrb	r3, [r7, #11]
 800ccea:	3301      	adds	r3, #1
 800ccec:	72fb      	strb	r3, [r7, #11]
      break;
 800ccee:	e06f      	b.n	800cdd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00b      	beq.n	800cd14 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	7c12      	ldrb	r2, [r2, #16]
 800cd08:	f107 0108 	add.w	r1, r7, #8
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd12:	e05d      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa76 	bl	800d208 <USBD_CtlError>
        err++;
 800cd1c:	7afb      	ldrb	r3, [r7, #11]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	72fb      	strb	r3, [r7, #11]
      break;
 800cd22:	e055      	b.n	800cdd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00b      	beq.n	800cd48 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	7c12      	ldrb	r2, [r2, #16]
 800cd3c:	f107 0108 	add.w	r1, r7, #8
 800cd40:	4610      	mov	r0, r2
 800cd42:	4798      	blx	r3
 800cd44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd46:	e043      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fa5c 	bl	800d208 <USBD_CtlError>
        err++;
 800cd50:	7afb      	ldrb	r3, [r7, #11]
 800cd52:	3301      	adds	r3, #1
 800cd54:	72fb      	strb	r3, [r7, #11]
      break;
 800cd56:	e03b      	b.n	800cdd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7c12      	ldrb	r2, [r2, #16]
 800cd70:	f107 0108 	add.w	r1, r7, #8
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
 800cd78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd7a:	e029      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa42 	bl	800d208 <USBD_CtlError>
        err++;
 800cd84:	7afb      	ldrb	r3, [r7, #11]
 800cd86:	3301      	adds	r3, #1
 800cd88:	72fb      	strb	r3, [r7, #11]
      break;
 800cd8a:	e021      	b.n	800cdd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	7c12      	ldrb	r2, [r2, #16]
 800cda4:	f107 0108 	add.w	r1, r7, #8
 800cda8:	4610      	mov	r0, r2
 800cdaa:	4798      	blx	r3
 800cdac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdae:	e00f      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fa28 	bl	800d208 <USBD_CtlError>
        err++;
 800cdb8:	7afb      	ldrb	r3, [r7, #11]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	72fb      	strb	r3, [r7, #11]
      break;
 800cdbe:	e007      	b.n	800cdd0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fa20 	bl	800d208 <USBD_CtlError>
      err++;
 800cdc8:	7afb      	ldrb	r3, [r7, #11]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cdce:	bf00      	nop
    }
    break;
 800cdd0:	e037      	b.n	800ce42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7c1b      	ldrb	r3, [r3, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d109      	bne.n	800cdee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde2:	f107 0208 	add.w	r2, r7, #8
 800cde6:	4610      	mov	r0, r2
 800cde8:	4798      	blx	r3
 800cdea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cdec:	e029      	b.n	800ce42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fa09 	bl	800d208 <USBD_CtlError>
      err++;
 800cdf6:	7afb      	ldrb	r3, [r7, #11]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	72fb      	strb	r3, [r7, #11]
    break;
 800cdfc:	e021      	b.n	800ce42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1b      	ldrb	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10d      	bne.n	800ce22 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce0e:	f107 0208 	add.w	r2, r7, #8
 800ce12:	4610      	mov	r0, r2
 800ce14:	4798      	blx	r3
 800ce16:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	2207      	movs	r2, #7
 800ce1e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ce20:	e00f      	b.n	800ce42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f9ef 	bl	800d208 <USBD_CtlError>
      err++;
 800ce2a:	7afb      	ldrb	r3, [r7, #11]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	72fb      	strb	r3, [r7, #11]
    break;
 800ce30:	e007      	b.n	800ce42 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f9e7 	bl	800d208 <USBD_CtlError>
    err++;
 800ce3a:	7afb      	ldrb	r3, [r7, #11]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	72fb      	strb	r3, [r7, #11]
    break;
 800ce40:	bf00      	nop
  }

  if (err != 0U)
 800ce42:	7afb      	ldrb	r3, [r7, #11]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d11e      	bne.n	800ce86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	88db      	ldrh	r3, [r3, #6]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d016      	beq.n	800ce7e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800ce50:	893b      	ldrh	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00e      	beq.n	800ce74 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	88da      	ldrh	r2, [r3, #6]
 800ce5a:	893b      	ldrh	r3, [r7, #8]
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	bf28      	it	cs
 800ce60:	4613      	movcs	r3, r2
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce66:	893b      	ldrh	r3, [r7, #8]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68f9      	ldr	r1, [r7, #12]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fa3c 	bl	800d2ea <USBD_CtlSendData>
 800ce72:	e009      	b.n	800ce88 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f9c6 	bl	800d208 <USBD_CtlError>
 800ce7c:	e004      	b.n	800ce88 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fa8d 	bl	800d39e <USBD_CtlSendStatus>
 800ce84:	e000      	b.n	800ce88 <USBD_GetDescriptor+0x320>
    return;
 800ce86:	bf00      	nop
    }
  }
}
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop

0800ce90 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	889b      	ldrh	r3, [r3, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d130      	bne.n	800cf04 <USBD_SetAddress+0x74>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	88db      	ldrh	r3, [r3, #6]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d12c      	bne.n	800cf04 <USBD_SetAddress+0x74>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	885b      	ldrh	r3, [r3, #2]
 800ceae:	2b7f      	cmp	r3, #127	; 0x7f
 800ceb0:	d828      	bhi.n	800cf04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	885b      	ldrh	r3, [r3, #2]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cebc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	d104      	bne.n	800ced2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 f99c 	bl	800d208 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced0:	e01c      	b.n	800cf0c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	7bfa      	ldrb	r2, [r7, #15]
 800ced6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f007 fe98 	bl	8014c14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fa5a 	bl	800d39e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d004      	beq.n	800cefa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2202      	movs	r2, #2
 800cef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef8:	e008      	b.n	800cf0c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf02:	e003      	b.n	800cf0c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f97e 	bl	800d208 <USBD_CtlError>
  }
}
 800cf0c:	bf00      	nop
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	885b      	ldrh	r3, [r3, #2]
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	4b4b      	ldr	r3, [pc, #300]	; (800d058 <USBD_SetConfig+0x144>)
 800cf2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf2c:	4b4a      	ldr	r3, [pc, #296]	; (800d058 <USBD_SetConfig+0x144>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d905      	bls.n	800cf40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f966 	bl	800d208 <USBD_CtlError>
    return USBD_FAIL;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	e087      	b.n	800d050 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d002      	beq.n	800cf50 <USBD_SetConfig+0x3c>
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d025      	beq.n	800cf9a <USBD_SetConfig+0x86>
 800cf4e:	e071      	b.n	800d034 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cf50:	4b41      	ldr	r3, [pc, #260]	; (800d058 <USBD_SetConfig+0x144>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01c      	beq.n	800cf92 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cf58:	4b3f      	ldr	r3, [pc, #252]	; (800d058 <USBD_SetConfig+0x144>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf62:	4b3d      	ldr	r3, [pc, #244]	; (800d058 <USBD_SetConfig+0x144>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff f97d 	bl	800c268 <USBD_SetClassConfig>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d004      	beq.n	800cf82 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f944 	bl	800d208 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cf80:	e065      	b.n	800d04e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fa0b 	bl	800d39e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2203      	movs	r2, #3
 800cf8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cf90:	e05d      	b.n	800d04e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fa03 	bl	800d39e <USBD_CtlSendStatus>
    break;
 800cf98:	e059      	b.n	800d04e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cf9a:	4b2f      	ldr	r3, [pc, #188]	; (800d058 <USBD_SetConfig+0x144>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d112      	bne.n	800cfc8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cfaa:	4b2b      	ldr	r3, [pc, #172]	; (800d058 <USBD_SetConfig+0x144>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfb4:	4b28      	ldr	r3, [pc, #160]	; (800d058 <USBD_SetConfig+0x144>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff f970 	bl	800c2a0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f9ec 	bl	800d39e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cfc6:	e042      	b.n	800d04e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cfc8:	4b23      	ldr	r3, [pc, #140]	; (800d058 <USBD_SetConfig+0x144>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d02a      	beq.n	800d02c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff f95e 	bl	800c2a0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cfe4:	4b1c      	ldr	r3, [pc, #112]	; (800d058 <USBD_SetConfig+0x144>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	461a      	mov	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfee:	4b1a      	ldr	r3, [pc, #104]	; (800d058 <USBD_SetConfig+0x144>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff f937 	bl	800c268 <USBD_SetClassConfig>
 800cffa:	4603      	mov	r3, r0
 800cffc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00f      	beq.n	800d024 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f8fe 	bl	800d208 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff f943 	bl	800c2a0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2202      	movs	r2, #2
 800d01e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d022:	e014      	b.n	800d04e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f9ba 	bl	800d39e <USBD_CtlSendStatus>
    break;
 800d02a:	e010      	b.n	800d04e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f9b6 	bl	800d39e <USBD_CtlSendStatus>
    break;
 800d032:	e00c      	b.n	800d04e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f8e6 	bl	800d208 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <USBD_SetConfig+0x144>)
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff f92c 	bl	800c2a0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d048:	2303      	movs	r3, #3
 800d04a:	73fb      	strb	r3, [r7, #15]
    break;
 800d04c:	bf00      	nop
  }

  return ret;
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	200002d0 	.word	0x200002d0

0800d05c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d004      	beq.n	800d078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 f8c9 	bl	800d208 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d076:	e021      	b.n	800d0bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d07e:	2b01      	cmp	r3, #1
 800d080:	db17      	blt.n	800d0b2 <USBD_GetConfig+0x56>
 800d082:	2b02      	cmp	r3, #2
 800d084:	dd02      	ble.n	800d08c <USBD_GetConfig+0x30>
 800d086:	2b03      	cmp	r3, #3
 800d088:	d00b      	beq.n	800d0a2 <USBD_GetConfig+0x46>
 800d08a:	e012      	b.n	800d0b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3308      	adds	r3, #8
 800d096:	2201      	movs	r2, #1
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f925 	bl	800d2ea <USBD_CtlSendData>
      break;
 800d0a0:	e00c      	b.n	800d0bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f91d 	bl	800d2ea <USBD_CtlSendData>
      break;
 800d0b0:	e004      	b.n	800d0bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f8a7 	bl	800d208 <USBD_CtlError>
      break;
 800d0ba:	bf00      	nop
}
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d81e      	bhi.n	800d118 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	88db      	ldrh	r3, [r3, #6]
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d004      	beq.n	800d0ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f88f 	bl	800d208 <USBD_CtlError>
      break;
 800d0ea:	e01a      	b.n	800d122 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f043 0202 	orr.w	r2, r3, #2
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	330c      	adds	r3, #12
 800d10c:	2202      	movs	r2, #2
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f8ea 	bl	800d2ea <USBD_CtlSendData>
    break;
 800d116:	e004      	b.n	800d122 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f874 	bl	800d208 <USBD_CtlError>
    break;
 800d120:	bf00      	nop
  }
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	885b      	ldrh	r3, [r3, #2]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d106      	bne.n	800d14a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f92a 	bl	800d39e <USBD_CtlSendStatus>
  }
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d162:	3b01      	subs	r3, #1
 800d164:	2b02      	cmp	r3, #2
 800d166:	d80b      	bhi.n	800d180 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	885b      	ldrh	r3, [r3, #2]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10c      	bne.n	800d18a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f910 	bl	800d39e <USBD_CtlSendStatus>
      }
      break;
 800d17e:	e004      	b.n	800d18a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f840 	bl	800d208 <USBD_CtlError>
      break;
 800d188:	e000      	b.n	800d18c <USBD_ClrFeature+0x3a>
      break;
 800d18a:	bf00      	nop
  }
}
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	781a      	ldrb	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	781a      	ldrb	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff faa9 	bl	800c716 <SWAPBYTE>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fa9c 	bl	800c716 <SWAPBYTE>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7ff fa8f 	bl	800c716 <SWAPBYTE>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	80da      	strh	r2, [r3, #6]
}
 800d200:	bf00      	nop
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d212:	2180      	movs	r1, #128	; 0x80
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f007 fc93 	bl	8014b40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d21a:	2100      	movs	r1, #0
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f007 fc8f 	bl	8014b40 <USBD_LL_StallEP>
}
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b086      	sub	sp, #24
 800d22e:	af00      	add	r7, sp, #0
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d236:	2300      	movs	r3, #0
 800d238:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d036      	beq.n	800d2ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d244:	6938      	ldr	r0, [r7, #16]
 800d246:	f000 f836 	bl	800d2b6 <USBD_GetLen>
 800d24a:	4603      	mov	r3, r0
 800d24c:	3301      	adds	r3, #1
 800d24e:	b29b      	uxth	r3, r3
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	4413      	add	r3, r2
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	7812      	ldrb	r2, [r2, #0]
 800d262:	701a      	strb	r2, [r3, #0]
  idx++;
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	3301      	adds	r3, #1
 800d268:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	4413      	add	r3, r2
 800d270:	2203      	movs	r2, #3
 800d272:	701a      	strb	r2, [r3, #0]
  idx++;
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	3301      	adds	r3, #1
 800d278:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d27a:	e013      	b.n	800d2a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	3301      	adds	r3, #1
 800d28c:	613b      	str	r3, [r7, #16]
    idx++;
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	3301      	adds	r3, #1
 800d292:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	4413      	add	r3, r2
 800d29a:	2200      	movs	r2, #0
 800d29c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d29e:	7dfb      	ldrb	r3, [r7, #23]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e7      	bne.n	800d27c <USBD_GetString+0x52>
 800d2ac:	e000      	b.n	800d2b0 <USBD_GetString+0x86>
    return;
 800d2ae:	bf00      	nop
  }
}
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2c6:	e005      	b.n	800d2d4 <USBD_GetLen+0x1e>
  {
    len++;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f5      	bne.n	800d2c8 <USBD_GetLen+0x12>
  }

  return len;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3714      	adds	r7, #20
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	2100      	movs	r1, #0
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f007 fc9e 	bl	8014c52 <USBD_LL_Transmit>

  return USBD_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	2100      	movs	r1, #0
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f007 fc8d 	bl	8014c52 <USBD_LL_Transmit>

  return USBD_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2203      	movs	r2, #3
 800d352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	2100      	movs	r1, #0
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f007 fc91 	bl	8014c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	2100      	movs	r1, #0
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f007 fc80 	bl	8014c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2204      	movs	r2, #4
 800d3aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f007 fc4c 	bl	8014c52 <USBD_LL_Transmit>

  return USBD_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2100      	movs	r1, #0
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f007 fc5a 	bl	8014c94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	4a08      	ldr	r2, [pc, #32]	; (800d41c <disk_status+0x30>)
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	79fa      	ldrb	r2, [r7, #7]
 800d404:	4905      	ldr	r1, [pc, #20]	; (800d41c <disk_status+0x30>)
 800d406:	440a      	add	r2, r1
 800d408:	7a12      	ldrb	r2, [r2, #8]
 800d40a:	4610      	mov	r0, r2
 800d40c:	4798      	blx	r3
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d412:	7bfb      	ldrb	r3, [r7, #15]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	200002fc 	.word	0x200002fc

0800d420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	4a0d      	ldr	r2, [pc, #52]	; (800d468 <disk_initialize+0x48>)
 800d432:	5cd3      	ldrb	r3, [r2, r3]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d111      	bne.n	800d45c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	4a0b      	ldr	r2, [pc, #44]	; (800d468 <disk_initialize+0x48>)
 800d43c:	2101      	movs	r1, #1
 800d43e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	4a09      	ldr	r2, [pc, #36]	; (800d468 <disk_initialize+0x48>)
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	79fa      	ldrb	r2, [r7, #7]
 800d44e:	4906      	ldr	r1, [pc, #24]	; (800d468 <disk_initialize+0x48>)
 800d450:	440a      	add	r2, r1
 800d452:	7a12      	ldrb	r2, [r2, #8]
 800d454:	4610      	mov	r0, r2
 800d456:	4798      	blx	r3
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200002fc 	.word	0x200002fc

0800d46c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
 800d476:	603b      	str	r3, [r7, #0]
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	4a0a      	ldr	r2, [pc, #40]	; (800d4a8 <disk_read+0x3c>)
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4413      	add	r3, r2
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	689c      	ldr	r4, [r3, #8]
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	4a07      	ldr	r2, [pc, #28]	; (800d4a8 <disk_read+0x3c>)
 800d48c:	4413      	add	r3, r2
 800d48e:	7a18      	ldrb	r0, [r3, #8]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	68b9      	ldr	r1, [r7, #8]
 800d496:	47a0      	blx	r4
 800d498:	4603      	mov	r3, r0
 800d49a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	371c      	adds	r7, #28
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd90      	pop	{r4, r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200002fc 	.word	0x200002fc

0800d4ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d4ac:	b590      	push	{r4, r7, lr}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <disk_write+0x3c>)
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	68dc      	ldr	r4, [r3, #12]
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	4a07      	ldr	r2, [pc, #28]	; (800d4e8 <disk_write+0x3c>)
 800d4cc:	4413      	add	r3, r2
 800d4ce:	7a18      	ldrb	r0, [r3, #8]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	68b9      	ldr	r1, [r7, #8]
 800d4d6:	47a0      	blx	r4
 800d4d8:	4603      	mov	r3, r0
 800d4da:	75fb      	strb	r3, [r7, #23]
  return res;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd90      	pop	{r4, r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	200002fc 	.word	0x200002fc

0800d4ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	603a      	str	r2, [r7, #0]
 800d4f6:	71fb      	strb	r3, [r7, #7]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	4a09      	ldr	r2, [pc, #36]	; (800d524 <disk_ioctl+0x38>)
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	79fa      	ldrb	r2, [r7, #7]
 800d50a:	4906      	ldr	r1, [pc, #24]	; (800d524 <disk_ioctl+0x38>)
 800d50c:	440a      	add	r2, r1
 800d50e:	7a10      	ldrb	r0, [r2, #8]
 800d510:	79b9      	ldrb	r1, [r7, #6]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4798      	blx	r3
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]
  return res;
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	200002fc 	.word	0x200002fc

0800d528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3301      	adds	r3, #1
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	021b      	lsls	r3, r3, #8
 800d53c:	b21a      	sxth	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	b21b      	sxth	r3, r3
 800d544:	4313      	orrs	r3, r2
 800d546:	b21b      	sxth	r3, r3
 800d548:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d54a:	89fb      	ldrh	r3, [r7, #14]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3303      	adds	r3, #3
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	021b      	lsls	r3, r3, #8
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	3202      	adds	r2, #2
 800d570:	7812      	ldrb	r2, [r2, #0]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	3201      	adds	r2, #1
 800d57e:	7812      	ldrb	r2, [r2, #0]
 800d580:	4313      	orrs	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	021b      	lsls	r3, r3, #8
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	7812      	ldrb	r2, [r2, #0]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d590:	68fb      	ldr	r3, [r7, #12]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	887a      	ldrh	r2, [r7, #2]
 800d5b2:	b2d2      	uxtb	r2, r2
 800d5b4:	701a      	strb	r2, [r3, #0]
 800d5b6:	887b      	ldrh	r3, [r7, #2]
 800d5b8:	0a1b      	lsrs	r3, r3, #8
 800d5ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	1c5a      	adds	r2, r3, #1
 800d5c0:	607a      	str	r2, [r7, #4]
 800d5c2:	887a      	ldrh	r2, [r7, #2]
 800d5c4:	b2d2      	uxtb	r2, r2
 800d5c6:	701a      	strb	r2, [r3, #0]
}
 800d5c8:	bf00      	nop
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	1c5a      	adds	r2, r3, #1
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	0a1b      	lsrs	r3, r3, #8
 800d5ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	b2d2      	uxtb	r2, r2
 800d5fa:	701a      	strb	r2, [r3, #0]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	0a1b      	lsrs	r3, r3, #8
 800d600:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	1c5a      	adds	r2, r3, #1
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	b2d2      	uxtb	r2, r2
 800d60c:	701a      	strb	r2, [r3, #0]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	0a1b      	lsrs	r3, r3, #8
 800d612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	607a      	str	r2, [r7, #4]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	b2d2      	uxtb	r2, r2
 800d61e:	701a      	strb	r2, [r3, #0]
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00d      	beq.n	800d662 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	1c53      	adds	r3, r2, #1
 800d64a:	613b      	str	r3, [r7, #16]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	1c59      	adds	r1, r3, #1
 800d650:	6179      	str	r1, [r7, #20]
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	3b01      	subs	r3, #1
 800d65a:	607b      	str	r3, [r7, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1f1      	bne.n	800d646 <mem_cpy+0x1a>
	}
}
 800d662:	bf00      	nop
 800d664:	371c      	adds	r7, #28
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d66e:	b480      	push	{r7}
 800d670:	b087      	sub	sp, #28
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	617a      	str	r2, [r7, #20]
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	b2d2      	uxtb	r2, r2
 800d688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	607b      	str	r3, [r7, #4]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f3      	bne.n	800d67e <mem_set+0x10>
}
 800d696:	bf00      	nop
 800d698:	371c      	adds	r7, #28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d6a2:	b480      	push	{r7}
 800d6a4:	b089      	sub	sp, #36	; 0x24
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	61fb      	str	r3, [r7, #28]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	61fa      	str	r2, [r7, #28]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	61ba      	str	r2, [r7, #24]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	1acb      	subs	r3, r1, r3
 800d6ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	607b      	str	r3, [r7, #4]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <mem_cmp+0x40>
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d0eb      	beq.n	800d6ba <mem_cmp+0x18>

	return r;
 800d6e2:	697b      	ldr	r3, [r7, #20]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3724      	adds	r7, #36	; 0x24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d6fa:	e002      	b.n	800d702 <chk_chr+0x12>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3301      	adds	r3, #1
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d005      	beq.n	800d716 <chk_chr+0x26>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	4293      	cmp	r3, r2
 800d714:	d1f2      	bne.n	800d6fc <chk_chr+0xc>
	return *str;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	781b      	ldrb	r3, [r3, #0]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d009      	beq.n	800d748 <lock_fs+0x22>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	4618      	mov	r0, r3
 800d73a:	f002 fd8d 	bl	8010258 <ff_req_grant>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <lock_fs+0x22>
 800d744:	2301      	movs	r3, #1
 800d746:	e000      	b.n	800d74a <lock_fs+0x24>
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b082      	sub	sp, #8
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
 800d75a:	460b      	mov	r3, r1
 800d75c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00d      	beq.n	800d780 <unlock_fs+0x2e>
 800d764:	78fb      	ldrb	r3, [r7, #3]
 800d766:	2b0c      	cmp	r3, #12
 800d768:	d00a      	beq.n	800d780 <unlock_fs+0x2e>
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	2b0b      	cmp	r3, #11
 800d76e:	d007      	beq.n	800d780 <unlock_fs+0x2e>
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	2b0f      	cmp	r3, #15
 800d774:	d004      	beq.n	800d780 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f002 fd81 	bl	8010282 <ff_rel_grant>
	}
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d792:	2300      	movs	r3, #0
 800d794:	60bb      	str	r3, [r7, #8]
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	e029      	b.n	800d7f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d79c:	4a27      	ldr	r2, [pc, #156]	; (800d83c <chk_lock+0xb4>)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	4413      	add	r3, r2
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d01d      	beq.n	800d7e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d7aa:	4a24      	ldr	r2, [pc, #144]	; (800d83c <chk_lock+0xb4>)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	011b      	lsls	r3, r3, #4
 800d7b0:	4413      	add	r3, r2
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d116      	bne.n	800d7ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d7bc:	4a1f      	ldr	r2, [pc, #124]	; (800d83c <chk_lock+0xb4>)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	4413      	add	r3, r2
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d10c      	bne.n	800d7ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7d0:	4a1a      	ldr	r2, [pc, #104]	; (800d83c <chk_lock+0xb4>)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	4413      	add	r3, r2
 800d7d8:	3308      	adds	r3, #8
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d102      	bne.n	800d7ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7e4:	e007      	b.n	800d7f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d9d2      	bls.n	800d79c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d109      	bne.n	800d810 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <chk_lock+0x80>
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2b02      	cmp	r3, #2
 800d806:	d101      	bne.n	800d80c <chk_lock+0x84>
 800d808:	2300      	movs	r3, #0
 800d80a:	e010      	b.n	800d82e <chk_lock+0xa6>
 800d80c:	2312      	movs	r3, #18
 800d80e:	e00e      	b.n	800d82e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d108      	bne.n	800d828 <chk_lock+0xa0>
 800d816:	4a09      	ldr	r2, [pc, #36]	; (800d83c <chk_lock+0xb4>)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	011b      	lsls	r3, r3, #4
 800d81c:	4413      	add	r3, r2
 800d81e:	330c      	adds	r3, #12
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d826:	d101      	bne.n	800d82c <chk_lock+0xa4>
 800d828:	2310      	movs	r3, #16
 800d82a:	e000      	b.n	800d82e <chk_lock+0xa6>
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	200002dc 	.word	0x200002dc

0800d840 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d846:	2300      	movs	r3, #0
 800d848:	607b      	str	r3, [r7, #4]
 800d84a:	e002      	b.n	800d852 <enq_lock+0x12>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3301      	adds	r3, #1
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d806      	bhi.n	800d866 <enq_lock+0x26>
 800d858:	4a09      	ldr	r2, [pc, #36]	; (800d880 <enq_lock+0x40>)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	011b      	lsls	r3, r3, #4
 800d85e:	4413      	add	r3, r2
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1f2      	bne.n	800d84c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	bf14      	ite	ne
 800d86c:	2301      	movne	r3, #1
 800d86e:	2300      	moveq	r3, #0
 800d870:	b2db      	uxtb	r3, r3
}
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	200002dc 	.word	0x200002dc

0800d884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d88e:	2300      	movs	r3, #0
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e01f      	b.n	800d8d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d894:	4a41      	ldr	r2, [pc, #260]	; (800d99c <inc_lock+0x118>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	011b      	lsls	r3, r3, #4
 800d89a:	4413      	add	r3, r2
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d113      	bne.n	800d8ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d8a6:	4a3d      	ldr	r2, [pc, #244]	; (800d99c <inc_lock+0x118>)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	011b      	lsls	r3, r3, #4
 800d8ac:	4413      	add	r3, r2
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d109      	bne.n	800d8ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d8ba:	4a38      	ldr	r2, [pc, #224]	; (800d99c <inc_lock+0x118>)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	011b      	lsls	r3, r3, #4
 800d8c0:	4413      	add	r3, r2
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d006      	beq.n	800d8dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d9dc      	bls.n	800d894 <inc_lock+0x10>
 800d8da:	e000      	b.n	800d8de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d8dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d132      	bne.n	800d94a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	e002      	b.n	800d8f0 <inc_lock+0x6c>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	60fb      	str	r3, [r7, #12]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d806      	bhi.n	800d904 <inc_lock+0x80>
 800d8f6:	4a29      	ldr	r2, [pc, #164]	; (800d99c <inc_lock+0x118>)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	4413      	add	r3, r2
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1f2      	bne.n	800d8ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b02      	cmp	r3, #2
 800d908:	d101      	bne.n	800d90e <inc_lock+0x8a>
 800d90a:	2300      	movs	r3, #0
 800d90c:	e040      	b.n	800d990 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4922      	ldr	r1, [pc, #136]	; (800d99c <inc_lock+0x118>)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	440b      	add	r3, r1
 800d91a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	491e      	ldr	r1, [pc, #120]	; (800d99c <inc_lock+0x118>)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	011b      	lsls	r3, r3, #4
 800d926:	440b      	add	r3, r1
 800d928:	3304      	adds	r3, #4
 800d92a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	695a      	ldr	r2, [r3, #20]
 800d930:	491a      	ldr	r1, [pc, #104]	; (800d99c <inc_lock+0x118>)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	011b      	lsls	r3, r3, #4
 800d936:	440b      	add	r3, r1
 800d938:	3308      	adds	r3, #8
 800d93a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d93c:	4a17      	ldr	r2, [pc, #92]	; (800d99c <inc_lock+0x118>)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	011b      	lsls	r3, r3, #4
 800d942:	4413      	add	r3, r2
 800d944:	330c      	adds	r3, #12
 800d946:	2200      	movs	r2, #0
 800d948:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d009      	beq.n	800d964 <inc_lock+0xe0>
 800d950:	4a12      	ldr	r2, [pc, #72]	; (800d99c <inc_lock+0x118>)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	4413      	add	r3, r2
 800d958:	330c      	adds	r3, #12
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <inc_lock+0xe0>
 800d960:	2300      	movs	r3, #0
 800d962:	e015      	b.n	800d990 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d108      	bne.n	800d97c <inc_lock+0xf8>
 800d96a:	4a0c      	ldr	r2, [pc, #48]	; (800d99c <inc_lock+0x118>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	4413      	add	r3, r2
 800d972:	330c      	adds	r3, #12
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	b29a      	uxth	r2, r3
 800d97a:	e001      	b.n	800d980 <inc_lock+0xfc>
 800d97c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d980:	4906      	ldr	r1, [pc, #24]	; (800d99c <inc_lock+0x118>)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	011b      	lsls	r3, r3, #4
 800d986:	440b      	add	r3, r1
 800d988:	330c      	adds	r3, #12
 800d98a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3301      	adds	r3, #1
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	200002dc 	.word	0x200002dc

0800d9a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	607b      	str	r3, [r7, #4]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d825      	bhi.n	800da00 <dec_lock+0x60>
		n = Files[i].ctr;
 800d9b4:	4a17      	ldr	r2, [pc, #92]	; (800da14 <dec_lock+0x74>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	4413      	add	r3, r2
 800d9bc:	330c      	adds	r3, #12
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d9c2:	89fb      	ldrh	r3, [r7, #14]
 800d9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9c8:	d101      	bne.n	800d9ce <dec_lock+0x2e>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d9ce:	89fb      	ldrh	r3, [r7, #14]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <dec_lock+0x3a>
 800d9d4:	89fb      	ldrh	r3, [r7, #14]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d9da:	4a0e      	ldr	r2, [pc, #56]	; (800da14 <dec_lock+0x74>)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	4413      	add	r3, r2
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	89fa      	ldrh	r2, [r7, #14]
 800d9e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d105      	bne.n	800d9fa <dec_lock+0x5a>
 800d9ee:	4a09      	ldr	r2, [pc, #36]	; (800da14 <dec_lock+0x74>)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	4413      	add	r3, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	737b      	strb	r3, [r7, #13]
 800d9fe:	e001      	b.n	800da04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800da00:	2302      	movs	r3, #2
 800da02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800da04:	7b7b      	ldrb	r3, [r7, #13]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	200002dc 	.word	0x200002dc

0800da18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e010      	b.n	800da48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da26:	4a0d      	ldr	r2, [pc, #52]	; (800da5c <clear_lock+0x44>)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	011b      	lsls	r3, r3, #4
 800da2c:	4413      	add	r3, r2
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	429a      	cmp	r2, r3
 800da34:	d105      	bne.n	800da42 <clear_lock+0x2a>
 800da36:	4a09      	ldr	r2, [pc, #36]	; (800da5c <clear_lock+0x44>)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	011b      	lsls	r3, r3, #4
 800da3c:	4413      	add	r3, r2
 800da3e:	2200      	movs	r2, #0
 800da40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3301      	adds	r3, #1
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d9eb      	bls.n	800da26 <clear_lock+0xe>
	}
}
 800da4e:	bf00      	nop
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	200002dc 	.word	0x200002dc

0800da60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	78db      	ldrb	r3, [r3, #3]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d034      	beq.n	800dade <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7858      	ldrb	r0, [r3, #1]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da84:	2301      	movs	r3, #1
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	f7ff fd10 	bl	800d4ac <disk_write>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <sync_window+0x38>
			res = FR_DISK_ERR;
 800da92:	2301      	movs	r3, #1
 800da94:	73fb      	strb	r3, [r7, #15]
 800da96:	e022      	b.n	800dade <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	1ad2      	subs	r2, r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d217      	bcs.n	800dade <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	789b      	ldrb	r3, [r3, #2]
 800dab2:	613b      	str	r3, [r7, #16]
 800dab4:	e010      	b.n	800dad8 <sync_window+0x78>
					wsect += fs->fsize;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	4413      	add	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	7858      	ldrb	r0, [r3, #1]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800daca:	2301      	movs	r3, #1
 800dacc:	697a      	ldr	r2, [r7, #20]
 800dace:	f7ff fced 	bl	800d4ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d8eb      	bhi.n	800dab6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d01b      	beq.n	800db38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7ff ffad 	bl	800da60 <sync_window>
 800db06:	4603      	mov	r3, r0
 800db08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d113      	bne.n	800db38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7858      	ldrb	r0, [r3, #1]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db1a:	2301      	movs	r3, #1
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	f7ff fca5 	bl	800d46c <disk_read>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db28:	f04f 33ff 	mov.w	r3, #4294967295
 800db2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db2e:	2301      	movs	r3, #1
 800db30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800db38:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
	...

0800db44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ff87 	bl	800da60 <sync_window>
 800db52:	4603      	mov	r3, r0
 800db54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db56:	7bfb      	ldrb	r3, [r7, #15]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d158      	bne.n	800dc0e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b03      	cmp	r3, #3
 800db62:	d148      	bne.n	800dbf6 <sync_fs+0xb2>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	791b      	ldrb	r3, [r3, #4]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d144      	bne.n	800dbf6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	3334      	adds	r3, #52	; 0x34
 800db70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db74:	2100      	movs	r1, #0
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff fd79 	bl	800d66e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3334      	adds	r3, #52	; 0x34
 800db80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db84:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff fd08 	bl	800d59e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3334      	adds	r3, #52	; 0x34
 800db92:	4921      	ldr	r1, [pc, #132]	; (800dc18 <sync_fs+0xd4>)
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff fd1d 	bl	800d5d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3334      	adds	r3, #52	; 0x34
 800db9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dba2:	491e      	ldr	r1, [pc, #120]	; (800dc1c <sync_fs+0xd8>)
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff fd15 	bl	800d5d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3334      	adds	r3, #52	; 0x34
 800dbae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7ff fd0b 	bl	800d5d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3334      	adds	r3, #52	; 0x34
 800dbc2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7ff fd01 	bl	800d5d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	7858      	ldrb	r0, [r3, #1]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbea:	2301      	movs	r3, #1
 800dbec:	f7ff fc5e 	bl	800d4ac <disk_write>
			fs->fsi_flag = 0;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	785b      	ldrb	r3, [r3, #1]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fc74 	bl	800d4ec <disk_ioctl>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <sync_fs+0xca>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	41615252 	.word	0x41615252
 800dc1c:	61417272 	.word	0x61417272

0800dc20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	3b02      	subs	r3, #2
 800dc2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	699b      	ldr	r3, [r3, #24]
 800dc34:	3b02      	subs	r3, #2
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d301      	bcc.n	800dc40 <clust2sect+0x20>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	e008      	b.n	800dc52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	895b      	ldrh	r3, [r3, #10]
 800dc44:	461a      	mov	r2, r3
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	fb03 f202 	mul.w	r2, r3, r2
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	4413      	add	r3, r2
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	370c      	adds	r7, #12
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b086      	sub	sp, #24
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d904      	bls.n	800dc7e <get_fat+0x20>
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d302      	bcc.n	800dc84 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc7e:	2301      	movs	r3, #1
 800dc80:	617b      	str	r3, [r7, #20]
 800dc82:	e08c      	b.n	800dd9e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295
 800dc88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d045      	beq.n	800dd1e <get_fat+0xc0>
 800dc92:	2b03      	cmp	r3, #3
 800dc94:	d05d      	beq.n	800dd52 <get_fat+0xf4>
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d177      	bne.n	800dd8a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	085b      	lsrs	r3, r3, #1
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	4413      	add	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	0a5b      	lsrs	r3, r3, #9
 800dcb0:	4413      	add	r3, r2
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6938      	ldr	r0, [r7, #16]
 800dcb6:	f7ff ff17 	bl	800dae8 <move_window>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d167      	bne.n	800dd90 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	60fa      	str	r2, [r7, #12]
 800dcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4413      	add	r3, r2
 800dcce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcd2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	0a5b      	lsrs	r3, r3, #9
 800dcdc:	4413      	add	r3, r2
 800dcde:	4619      	mov	r1, r3
 800dce0:	6938      	ldr	r0, [r7, #16]
 800dce2:	f7ff ff01 	bl	800dae8 <move_window>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d153      	bne.n	800dd94 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcfa:	021b      	lsls	r3, r3, #8
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <get_fat+0xb6>
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	091b      	lsrs	r3, r3, #4
 800dd12:	e002      	b.n	800dd1a <get_fat+0xbc>
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd1a:	617b      	str	r3, [r7, #20]
			break;
 800dd1c:	e03f      	b.n	800dd9e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	0a1b      	lsrs	r3, r3, #8
 800dd26:	4413      	add	r3, r2
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6938      	ldr	r0, [r7, #16]
 800dd2c:	f7ff fedc 	bl	800dae8 <move_window>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d130      	bne.n	800dd98 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd44:	4413      	add	r3, r2
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fbee 	bl	800d528 <ld_word>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	617b      	str	r3, [r7, #20]
			break;
 800dd50:	e025      	b.n	800dd9e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	09db      	lsrs	r3, r3, #7
 800dd5a:	4413      	add	r3, r2
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6938      	ldr	r0, [r7, #16]
 800dd60:	f7ff fec2 	bl	800dae8 <move_window>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d118      	bne.n	800dd9c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd78:	4413      	add	r3, r2
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7ff fbec 	bl	800d558 <ld_dword>
 800dd80:	4603      	mov	r3, r0
 800dd82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd86:	617b      	str	r3, [r7, #20]
			break;
 800dd88:	e009      	b.n	800dd9e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e006      	b.n	800dd9e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd90:	bf00      	nop
 800dd92:	e004      	b.n	800dd9e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd94:	bf00      	nop
 800dd96:	e002      	b.n	800dd9e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd98:	bf00      	nop
 800dd9a:	e000      	b.n	800dd9e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd9c:	bf00      	nop
		}
	}

	return val;
 800dd9e:	697b      	ldr	r3, [r7, #20]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b089      	sub	sp, #36	; 0x24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	f240 80d6 	bls.w	800df6c <put_fat+0x1c4>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	f080 80d0 	bcs.w	800df6c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d073      	beq.n	800debc <put_fat+0x114>
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	f000 8091 	beq.w	800defc <put_fat+0x154>
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	f040 80c6 	bne.w	800df6c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	085b      	lsrs	r3, r3, #1
 800dde8:	69ba      	ldr	r2, [r7, #24]
 800ddea:	4413      	add	r3, r2
 800ddec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	0a5b      	lsrs	r3, r3, #9
 800ddf6:	4413      	add	r3, r2
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f7ff fe74 	bl	800dae8 <move_window>
 800de00:	4603      	mov	r3, r0
 800de02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de04:	7ffb      	ldrb	r3, [r7, #31]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f040 80a9 	bne.w	800df5e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	1c59      	adds	r1, r3, #1
 800de16:	61b9      	str	r1, [r7, #24]
 800de18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de1c:	4413      	add	r3, r2
 800de1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00d      	beq.n	800de46 <put_fat+0x9e>
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	f003 030f 	and.w	r3, r3, #15
 800de34:	b25a      	sxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	011b      	lsls	r3, r3, #4
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b25b      	sxtb	r3, r3
 800de42:	b2db      	uxtb	r3, r3
 800de44:	e001      	b.n	800de4a <put_fat+0xa2>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	697a      	ldr	r2, [r7, #20]
 800de4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2201      	movs	r2, #1
 800de52:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	0a5b      	lsrs	r3, r3, #9
 800de5c:	4413      	add	r3, r2
 800de5e:	4619      	mov	r1, r3
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff fe41 	bl	800dae8 <move_window>
 800de66:	4603      	mov	r3, r0
 800de68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de6a:	7ffb      	ldrb	r3, [r7, #31]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d178      	bne.n	800df62 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	4413      	add	r3, r2
 800de7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <put_fat+0xea>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	091b      	lsrs	r3, r3, #4
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	e00e      	b.n	800deb0 <put_fat+0x108>
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	b25b      	sxtb	r3, r3
 800de98:	f023 030f 	bic.w	r3, r3, #15
 800de9c:	b25a      	sxtb	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0a1b      	lsrs	r3, r3, #8
 800dea2:	b25b      	sxtb	r3, r3
 800dea4:	f003 030f 	and.w	r3, r3, #15
 800dea8:	b25b      	sxtb	r3, r3
 800deaa:	4313      	orrs	r3, r2
 800deac:	b25b      	sxtb	r3, r3
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2201      	movs	r2, #1
 800deb8:	70da      	strb	r2, [r3, #3]
			break;
 800deba:	e057      	b.n	800df6c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	0a1b      	lsrs	r3, r3, #8
 800dec4:	4413      	add	r3, r2
 800dec6:	4619      	mov	r1, r3
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fe0d 	bl	800dae8 <move_window>
 800dece:	4603      	mov	r3, r0
 800ded0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ded2:	7ffb      	ldrb	r3, [r7, #31]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d146      	bne.n	800df66 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	005b      	lsls	r3, r3, #1
 800dee2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dee6:	4413      	add	r3, r2
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	b292      	uxth	r2, r2
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff fb55 	bl	800d59e <st_word>
			fs->wflag = 1;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2201      	movs	r2, #1
 800def8:	70da      	strb	r2, [r3, #3]
			break;
 800defa:	e037      	b.n	800df6c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	09db      	lsrs	r3, r3, #7
 800df04:	4413      	add	r3, r2
 800df06:	4619      	mov	r1, r3
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f7ff fded 	bl	800dae8 <move_window>
 800df0e:	4603      	mov	r3, r0
 800df10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df12:	7ffb      	ldrb	r3, [r7, #31]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d128      	bne.n	800df6a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800df2c:	4413      	add	r3, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff fb12 	bl	800d558 <ld_dword>
 800df34:	4603      	mov	r3, r0
 800df36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800df3a:	4323      	orrs	r3, r4
 800df3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800df4c:	4413      	add	r3, r2
 800df4e:	6879      	ldr	r1, [r7, #4]
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff fb3f 	bl	800d5d4 <st_dword>
			fs->wflag = 1;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2201      	movs	r2, #1
 800df5a:	70da      	strb	r2, [r3, #3]
			break;
 800df5c:	e006      	b.n	800df6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800df5e:	bf00      	nop
 800df60:	e004      	b.n	800df6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800df62:	bf00      	nop
 800df64:	e002      	b.n	800df6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800df66:	bf00      	nop
 800df68:	e000      	b.n	800df6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800df6a:	bf00      	nop
		}
	}
	return res;
 800df6c:	7ffb      	ldrb	r3, [r7, #31]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3724      	adds	r7, #36	; 0x24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd90      	pop	{r4, r7, pc}

0800df76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b088      	sub	sp, #32
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d904      	bls.n	800df9c <remove_chain+0x26>
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d301      	bcc.n	800dfa0 <remove_chain+0x2a>
 800df9c:	2302      	movs	r3, #2
 800df9e:	e04b      	b.n	800e038 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00c      	beq.n	800dfc0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	69b8      	ldr	r0, [r7, #24]
 800dfae:	f7ff fefb 	bl	800dda8 <put_fat>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dfb6:	7ffb      	ldrb	r3, [r7, #31]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <remove_chain+0x4a>
 800dfbc:	7ffb      	ldrb	r3, [r7, #31]
 800dfbe:	e03b      	b.n	800e038 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7ff fe4b 	bl	800dc5e <get_fat>
 800dfc8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d031      	beq.n	800e034 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d101      	bne.n	800dfda <remove_chain+0x64>
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e02e      	b.n	800e038 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe0:	d101      	bne.n	800dfe6 <remove_chain+0x70>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e028      	b.n	800e038 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	69b8      	ldr	r0, [r7, #24]
 800dfec:	f7ff fedc 	bl	800dda8 <put_fat>
 800dff0:	4603      	mov	r3, r0
 800dff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dff4:	7ffb      	ldrb	r3, [r7, #31]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <remove_chain+0x88>
 800dffa:	7ffb      	ldrb	r3, [r7, #31]
 800dffc:	e01c      	b.n	800e038 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	695a      	ldr	r2, [r3, #20]
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	3b02      	subs	r3, #2
 800e008:	429a      	cmp	r2, r3
 800e00a:	d20b      	bcs.n	800e024 <remove_chain+0xae>
			fs->free_clst++;
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	791b      	ldrb	r3, [r3, #4]
 800e01a:	f043 0301 	orr.w	r3, r3, #1
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d3c6      	bcc.n	800dfc0 <remove_chain+0x4a>
 800e032:	e000      	b.n	800e036 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e034:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10d      	bne.n	800e072 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e05c:	69bb      	ldr	r3, [r7, #24]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d004      	beq.n	800e06c <create_chain+0x2c>
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d31b      	bcc.n	800e0a4 <create_chain+0x64>
 800e06c:	2301      	movs	r3, #1
 800e06e:	61bb      	str	r3, [r7, #24]
 800e070:	e018      	b.n	800e0a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fdf2 	bl	800dc5e <get_fat>
 800e07a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d801      	bhi.n	800e086 <create_chain+0x46>
 800e082:	2301      	movs	r3, #1
 800e084:	e070      	b.n	800e168 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08c:	d101      	bne.n	800e092 <create_chain+0x52>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	e06a      	b.n	800e168 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d201      	bcs.n	800e0a0 <create_chain+0x60>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	e063      	b.n	800e168 <create_chain+0x128>
		scl = clst;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d307      	bcc.n	800e0c8 <create_chain+0x88>
				ncl = 2;
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d901      	bls.n	800e0c8 <create_chain+0x88>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	e04f      	b.n	800e168 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e0c8:	69f9      	ldr	r1, [r7, #28]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7ff fdc7 	bl	800dc5e <get_fat>
 800e0d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00e      	beq.n	800e0f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d003      	beq.n	800e0e6 <create_chain+0xa6>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e4:	d101      	bne.n	800e0ea <create_chain+0xaa>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	e03e      	b.n	800e168 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d1da      	bne.n	800e0a8 <create_chain+0x68>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e038      	b.n	800e168 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e0f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fc:	69f9      	ldr	r1, [r7, #28]
 800e0fe:	6938      	ldr	r0, [r7, #16]
 800e100:	f7ff fe52 	bl	800dda8 <put_fat>
 800e104:	4603      	mov	r3, r0
 800e106:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e108:	7dfb      	ldrb	r3, [r7, #23]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d109      	bne.n	800e122 <create_chain+0xe2>
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d006      	beq.n	800e122 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e114:	69fa      	ldr	r2, [r7, #28]
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6938      	ldr	r0, [r7, #16]
 800e11a:	f7ff fe45 	bl	800dda8 <put_fat>
 800e11e:	4603      	mov	r3, r0
 800e120:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d116      	bne.n	800e156 <create_chain+0x116>
		fs->last_clst = ncl;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	69fa      	ldr	r2, [r7, #28]
 800e12c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	695a      	ldr	r2, [r3, #20]
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	3b02      	subs	r3, #2
 800e138:	429a      	cmp	r2, r3
 800e13a:	d804      	bhi.n	800e146 <create_chain+0x106>
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	1e5a      	subs	r2, r3, #1
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	791b      	ldrb	r3, [r3, #4]
 800e14a:	f043 0301 	orr.w	r3, r3, #1
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	711a      	strb	r2, [r3, #4]
 800e154:	e007      	b.n	800e166 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d102      	bne.n	800e162 <create_chain+0x122>
 800e15c:	f04f 33ff 	mov.w	r3, #4294967295
 800e160:	e000      	b.n	800e164 <create_chain+0x124>
 800e162:	2301      	movs	r3, #1
 800e164:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e166:	69fb      	ldr	r3, [r7, #28]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e170:	b480      	push	{r7}
 800e172:	b087      	sub	sp, #28
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	3304      	adds	r3, #4
 800e186:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	0a5b      	lsrs	r3, r3, #9
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	8952      	ldrh	r2, [r2, #10]
 800e190:	fbb3 f3f2 	udiv	r3, r3, r2
 800e194:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	1d1a      	adds	r2, r3, #4
 800e19a:	613a      	str	r2, [r7, #16]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <clmt_clust+0x3a>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e010      	b.n	800e1cc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d307      	bcc.n	800e1c2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	617b      	str	r3, [r7, #20]
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1c0:	e7e9      	b.n	800e196 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e1c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	4413      	add	r3, r2
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	371c      	adds	r7, #28
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1ee:	d204      	bcs.n	800e1fa <dir_sdi+0x22>
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	f003 031f 	and.w	r3, r3, #31
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d001      	beq.n	800e1fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	e063      	b.n	800e2c6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d106      	bne.n	800e21e <dir_sdi+0x46>
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b02      	cmp	r3, #2
 800e216:	d902      	bls.n	800e21e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e21c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10c      	bne.n	800e23e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	095b      	lsrs	r3, r3, #5
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	8912      	ldrh	r2, [r2, #8]
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d301      	bcc.n	800e234 <dir_sdi+0x5c>
 800e230:	2302      	movs	r3, #2
 800e232:	e048      	b.n	800e2c6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	61da      	str	r2, [r3, #28]
 800e23c:	e029      	b.n	800e292 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	895b      	ldrh	r3, [r3, #10]
 800e242:	025b      	lsls	r3, r3, #9
 800e244:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e246:	e019      	b.n	800e27c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6979      	ldr	r1, [r7, #20]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fd06 	bl	800dc5e <get_fat>
 800e252:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25a:	d101      	bne.n	800e260 <dir_sdi+0x88>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e032      	b.n	800e2c6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d904      	bls.n	800e270 <dir_sdi+0x98>
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	699b      	ldr	r3, [r3, #24]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d301      	bcc.n	800e274 <dir_sdi+0x9c>
 800e270:	2302      	movs	r3, #2
 800e272:	e028      	b.n	800e2c6 <dir_sdi+0xee>
			ofs -= csz;
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	429a      	cmp	r2, r3
 800e282:	d2e1      	bcs.n	800e248 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e284:	6979      	ldr	r1, [r7, #20]
 800e286:	6938      	ldr	r0, [r7, #16]
 800e288:	f7ff fcca 	bl	800dc20 <clust2sect>
 800e28c:	4602      	mov	r2, r0
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	697a      	ldr	r2, [r7, #20]
 800e296:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	69db      	ldr	r3, [r3, #28]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <dir_sdi+0xcc>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e010      	b.n	800e2c6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	69da      	ldr	r2, [r3, #28]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	0a5b      	lsrs	r3, r3, #9
 800e2ac:	441a      	add	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2be:	441a      	add	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3718      	adds	r7, #24
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b086      	sub	sp, #24
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	695b      	ldr	r3, [r3, #20]
 800e2e2:	3320      	adds	r3, #32
 800e2e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	69db      	ldr	r3, [r3, #28]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <dir_next+0x28>
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e2f4:	d301      	bcc.n	800e2fa <dir_next+0x2c>
 800e2f6:	2304      	movs	r3, #4
 800e2f8:	e0aa      	b.n	800e450 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 8098 	bne.w	800e436 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	69db      	ldr	r3, [r3, #28]
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10b      	bne.n	800e330 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	095b      	lsrs	r3, r3, #5
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	8912      	ldrh	r2, [r2, #8]
 800e320:	4293      	cmp	r3, r2
 800e322:	f0c0 8088 	bcc.w	800e436 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	61da      	str	r2, [r3, #28]
 800e32c:	2304      	movs	r3, #4
 800e32e:	e08f      	b.n	800e450 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	0a5b      	lsrs	r3, r3, #9
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	8952      	ldrh	r2, [r2, #10]
 800e338:	3a01      	subs	r2, #1
 800e33a:	4013      	ands	r3, r2
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d17a      	bne.n	800e436 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	4619      	mov	r1, r3
 800e348:	4610      	mov	r0, r2
 800e34a:	f7ff fc88 	bl	800dc5e <get_fat>
 800e34e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d801      	bhi.n	800e35a <dir_next+0x8c>
 800e356:	2302      	movs	r3, #2
 800e358:	e07a      	b.n	800e450 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e360:	d101      	bne.n	800e366 <dir_next+0x98>
 800e362:	2301      	movs	r3, #1
 800e364:	e074      	b.n	800e450 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d358      	bcc.n	800e422 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d104      	bne.n	800e380 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	61da      	str	r2, [r3, #28]
 800e37c:	2304      	movs	r3, #4
 800e37e:	e067      	b.n	800e450 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	699b      	ldr	r3, [r3, #24]
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f7ff fe59 	bl	800e040 <create_chain>
 800e38e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <dir_next+0xcc>
 800e396:	2307      	movs	r3, #7
 800e398:	e05a      	b.n	800e450 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d101      	bne.n	800e3a4 <dir_next+0xd6>
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e055      	b.n	800e450 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d101      	bne.n	800e3b0 <dir_next+0xe2>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e04f      	b.n	800e450 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f7ff fb55 	bl	800da60 <sync_window>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <dir_next+0xf2>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e047      	b.n	800e450 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	3334      	adds	r3, #52	; 0x34
 800e3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff f94f 	bl	800d66e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	613b      	str	r3, [r7, #16]
 800e3d4:	6979      	ldr	r1, [r7, #20]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff fc22 	bl	800dc20 <clust2sect>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	631a      	str	r2, [r3, #48]	; 0x30
 800e3e2:	e012      	b.n	800e40a <dir_next+0x13c>
						fs->wflag = 1;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f7ff fb38 	bl	800da60 <sync_window>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <dir_next+0x12c>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e02a      	b.n	800e450 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	613b      	str	r3, [r7, #16]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e404:	1c5a      	adds	r2, r3, #1
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	631a      	str	r2, [r3, #48]	; 0x30
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	895b      	ldrh	r3, [r3, #10]
 800e40e:	461a      	mov	r2, r3
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	4293      	cmp	r3, r2
 800e414:	d3e6      	bcc.n	800e3e4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	1ad2      	subs	r2, r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e428:	6979      	ldr	r1, [r7, #20]
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7ff fbf8 	bl	800dc20 <clust2sect>
 800e430:	4602      	mov	r2, r0
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e448:	441a      	add	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3718      	adds	r7, #24
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e468:	2100      	movs	r1, #0
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7ff feb4 	bl	800e1d8 <dir_sdi>
 800e470:	4603      	mov	r3, r0
 800e472:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e474:	7dfb      	ldrb	r3, [r7, #23]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d12b      	bne.n	800e4d2 <dir_alloc+0x7a>
		n = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	4619      	mov	r1, r3
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff fb2f 	bl	800dae8 <move_window>
 800e48a:	4603      	mov	r3, r0
 800e48c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d11d      	bne.n	800e4d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6a1b      	ldr	r3, [r3, #32]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2be5      	cmp	r3, #229	; 0xe5
 800e49c:	d004      	beq.n	800e4a8 <dir_alloc+0x50>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d107      	bne.n	800e4b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	613b      	str	r3, [r7, #16]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d102      	bne.n	800e4bc <dir_alloc+0x64>
 800e4b6:	e00c      	b.n	800e4d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e4bc:	2101      	movs	r1, #1
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff ff05 	bl	800e2ce <dir_next>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e4c8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d0d7      	beq.n	800e47e <dir_alloc+0x26>
 800e4ce:	e000      	b.n	800e4d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e4d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
 800e4d4:	2b04      	cmp	r3, #4
 800e4d6:	d101      	bne.n	800e4dc <dir_alloc+0x84>
 800e4d8:	2307      	movs	r3, #7
 800e4da:	75fb      	strb	r3, [r7, #23]
	return res;
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b084      	sub	sp, #16
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	331a      	adds	r3, #26
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff f817 	bl	800d528 <ld_word>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b03      	cmp	r3, #3
 800e504:	d109      	bne.n	800e51a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	3314      	adds	r3, #20
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7ff f80c 	bl	800d528 <ld_word>
 800e510:	4603      	mov	r3, r0
 800e512:	041b      	lsls	r3, r3, #16
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	4313      	orrs	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e51a:	68fb      	ldr	r3, [r7, #12]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	331a      	adds	r3, #26
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	b292      	uxth	r2, r2
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7ff f82f 	bl	800d59e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b03      	cmp	r3, #3
 800e546:	d109      	bne.n	800e55c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	f103 0214 	add.w	r2, r3, #20
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	0c1b      	lsrs	r3, r3, #16
 800e552:	b29b      	uxth	r3, r3
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	f7ff f821 	bl	800d59e <st_word>
	}
}
 800e55c:	bf00      	nop
 800e55e:	3710      	adds	r7, #16
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e56e:	2304      	movs	r3, #4
 800e570:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e578:	e03c      	b.n	800e5f4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	4619      	mov	r1, r3
 800e580:	6938      	ldr	r0, [r7, #16]
 800e582:	f7ff fab1 	bl	800dae8 <move_window>
 800e586:	4603      	mov	r3, r0
 800e588:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d136      	bne.n	800e5fe <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a1b      	ldr	r3, [r3, #32]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e598:	7bfb      	ldrb	r3, [r7, #15]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d102      	bne.n	800e5a4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e59e:	2304      	movs	r3, #4
 800e5a0:	75fb      	strb	r3, [r7, #23]
 800e5a2:	e031      	b.n	800e608 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	330b      	adds	r3, #11
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5b0:	73bb      	strb	r3, [r7, #14]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	7bba      	ldrb	r2, [r7, #14]
 800e5b6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ba:	2be5      	cmp	r3, #229	; 0xe5
 800e5bc:	d011      	beq.n	800e5e2 <dir_read+0x7e>
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e5c2:	d00e      	beq.n	800e5e2 <dir_read+0x7e>
 800e5c4:	7bbb      	ldrb	r3, [r7, #14]
 800e5c6:	2b0f      	cmp	r3, #15
 800e5c8:	d00b      	beq.n	800e5e2 <dir_read+0x7e>
 800e5ca:	7bbb      	ldrb	r3, [r7, #14]
 800e5cc:	f023 0320 	bic.w	r3, r3, #32
 800e5d0:	2b08      	cmp	r3, #8
 800e5d2:	bf0c      	ite	eq
 800e5d4:	2301      	moveq	r3, #1
 800e5d6:	2300      	movne	r3, #0
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	461a      	mov	r2, r3
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d00f      	beq.n	800e602 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff fe72 	bl	800e2ce <dir_next>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d108      	bne.n	800e606 <dir_read+0xa2>
	while (dp->sect) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1be      	bne.n	800e57a <dir_read+0x16>
 800e5fc:	e004      	b.n	800e608 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e5fe:	bf00      	nop
 800e600:	e002      	b.n	800e608 <dir_read+0xa4>
				break;
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e606:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e608:	7dfb      	ldrb	r3, [r7, #23]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d002      	beq.n	800e614 <dir_read+0xb0>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	61da      	str	r2, [r3, #28]
	return res;
 800e614:	7dfb      	ldrb	r3, [r7, #23]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b086      	sub	sp, #24
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e62c:	2100      	movs	r1, #0
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff fdd2 	bl	800e1d8 <dir_sdi>
 800e634:	4603      	mov	r3, r0
 800e636:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <dir_find+0x24>
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	e03e      	b.n	800e6c0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	69db      	ldr	r3, [r3, #28]
 800e646:	4619      	mov	r1, r3
 800e648:	6938      	ldr	r0, [r7, #16]
 800e64a:	f7ff fa4d 	bl	800dae8 <move_window>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d12f      	bne.n	800e6b8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d102      	bne.n	800e66c <dir_find+0x4e>
 800e666:	2304      	movs	r3, #4
 800e668:	75fb      	strb	r3, [r7, #23]
 800e66a:	e028      	b.n	800e6be <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a1b      	ldr	r3, [r3, #32]
 800e670:	330b      	adds	r3, #11
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	330b      	adds	r3, #11
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	f003 0308 	and.w	r3, r3, #8
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10a      	bne.n	800e6a4 <dir_find+0x86>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a18      	ldr	r0, [r3, #32]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3324      	adds	r3, #36	; 0x24
 800e696:	220b      	movs	r2, #11
 800e698:	4619      	mov	r1, r3
 800e69a:	f7ff f802 	bl	800d6a2 <mem_cmp>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff fe11 	bl	800e2ce <dir_next>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d0c5      	beq.n	800e642 <dir_find+0x24>
 800e6b6:	e002      	b.n	800e6be <dir_find+0xa0>
		if (res != FR_OK) break;
 800e6b8:	bf00      	nop
 800e6ba:	e000      	b.n	800e6be <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e6bc:	bf00      	nop

	return res;
 800e6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3718      	adds	r7, #24
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff febd 	bl	800e458 <dir_alloc>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d11c      	bne.n	800e722 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	69db      	ldr	r3, [r3, #28]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	68b8      	ldr	r0, [r7, #8]
 800e6f0:	f7ff f9fa 	bl	800dae8 <move_window>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d111      	bne.n	800e722 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	2220      	movs	r2, #32
 800e704:	2100      	movs	r1, #0
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe ffb1 	bl	800d66e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a18      	ldr	r0, [r3, #32]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3324      	adds	r3, #36	; 0x24
 800e714:	220b      	movs	r2, #11
 800e716:	4619      	mov	r1, r3
 800e718:	f7fe ff88 	bl	800d62c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2201      	movs	r2, #1
 800e720:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e722:	7bfb      	ldrb	r3, [r7, #15]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2200      	movs	r2, #0
 800e73a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d04e      	beq.n	800e7e2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e74c:	e021      	b.n	800e792 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a1a      	ldr	r2, [r3, #32]
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	1c59      	adds	r1, r3, #1
 800e756:	6179      	str	r1, [r7, #20]
 800e758:	4413      	add	r3, r2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	2b20      	cmp	r3, #32
 800e762:	d100      	bne.n	800e766 <get_fileinfo+0x3a>
 800e764:	e015      	b.n	800e792 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e766:	7bfb      	ldrb	r3, [r7, #15]
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d101      	bne.n	800e770 <get_fileinfo+0x44>
 800e76c:	23e5      	movs	r3, #229	; 0xe5
 800e76e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b09      	cmp	r3, #9
 800e774:	d106      	bne.n	800e784 <get_fileinfo+0x58>
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	1c5a      	adds	r2, r3, #1
 800e77a:	613a      	str	r2, [r7, #16]
 800e77c:	683a      	ldr	r2, [r7, #0]
 800e77e:	4413      	add	r3, r2
 800e780:	222e      	movs	r2, #46	; 0x2e
 800e782:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	1c5a      	adds	r2, r3, #1
 800e788:	613a      	str	r2, [r7, #16]
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	4413      	add	r3, r2
 800e78e:	7bfa      	ldrb	r2, [r7, #15]
 800e790:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b0a      	cmp	r3, #10
 800e796:	d9da      	bls.n	800e74e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	4413      	add	r3, r2
 800e79e:	3309      	adds	r3, #9
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	7ada      	ldrb	r2, [r3, #11]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	331c      	adds	r3, #28
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fe fecf 	bl	800d558 <ld_dword>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a1b      	ldr	r3, [r3, #32]
 800e7c4:	3316      	adds	r3, #22
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fe fec6 	bl	800d558 <ld_dword>
 800e7cc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	80da      	strh	r2, [r3, #6]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	0c1b      	lsrs	r3, r3, #16
 800e7da:	b29a      	uxth	r2, r3
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	809a      	strh	r2, [r3, #4]
 800e7e0:	e000      	b.n	800e7e4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e7e2:	bf00      	nop
}
 800e7e4:	3718      	adds	r7, #24
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	1c59      	adds	r1, r3, #1
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	6011      	str	r1, [r2, #0]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e802:	89fb      	ldrh	r3, [r7, #14]
 800e804:	2b60      	cmp	r3, #96	; 0x60
 800e806:	d905      	bls.n	800e814 <get_achar+0x28>
 800e808:	89fb      	ldrh	r3, [r7, #14]
 800e80a:	2b7a      	cmp	r3, #122	; 0x7a
 800e80c:	d802      	bhi.n	800e814 <get_achar+0x28>
 800e80e:	89fb      	ldrh	r3, [r7, #14]
 800e810:	3b20      	subs	r3, #32
 800e812:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e814:	89fb      	ldrh	r3, [r7, #14]
 800e816:	2b7f      	cmp	r3, #127	; 0x7f
 800e818:	d904      	bls.n	800e824 <get_achar+0x38>
 800e81a:	89fb      	ldrh	r3, [r7, #14]
 800e81c:	3b80      	subs	r3, #128	; 0x80
 800e81e:	4a05      	ldr	r2, [pc, #20]	; (800e834 <get_achar+0x48>)
 800e820:	5cd3      	ldrb	r3, [r2, r3]
 800e822:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800e824:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	08016ed4 	.word	0x08016ed4

0800e838 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	; 0x28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
 800e844:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e846:	e009      	b.n	800e85c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e848:	f107 0308 	add.w	r3, r7, #8
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7ff ffcd 	bl	800e7ec <get_achar>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d101      	bne.n	800e85c <pattern_matching+0x24>
 800e858:	2300      	movs	r3, #0
 800e85a:	e064      	b.n	800e926 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	1e5a      	subs	r2, r3, #1
 800e860:	607a      	str	r2, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1f0      	bne.n	800e848 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d104      	bne.n	800e878 <pattern_matching+0x40>
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <pattern_matching+0x40>
 800e874:	2301      	movs	r3, #1
 800e876:	e056      	b.n	800e926 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	617b      	str	r3, [r7, #20]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b3f      	cmp	r3, #63	; 0x3f
 800e886:	d003      	beq.n	800e890 <pattern_matching+0x58>
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2b2a      	cmp	r3, #42	; 0x2a
 800e88e:	d126      	bne.n	800e8de <pattern_matching+0xa6>
				nm = nx = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	61fb      	str	r3, [r7, #28]
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	1c5a      	adds	r2, r3, #1
 800e89c:	617a      	str	r2, [r7, #20]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	2b3f      	cmp	r3, #63	; 0x3f
 800e8a2:	d103      	bne.n	800e8ac <pattern_matching+0x74>
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	623b      	str	r3, [r7, #32]
 800e8aa:	e001      	b.n	800e8b0 <pattern_matching+0x78>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b3f      	cmp	r3, #63	; 0x3f
 800e8b6:	d0ef      	beq.n	800e898 <pattern_matching+0x60>
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e8be:	d0eb      	beq.n	800e898 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e8c0:	6978      	ldr	r0, [r7, #20]
 800e8c2:	6939      	ldr	r1, [r7, #16]
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	6a3a      	ldr	r2, [r7, #32]
 800e8c8:	f7ff ffb6 	bl	800e838 <pattern_matching>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <pattern_matching+0x9e>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e027      	b.n	800e926 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e8dc:	e017      	b.n	800e90e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800e8de:	f107 0314 	add.w	r3, r7, #20
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff ff82 	bl	800e7ec <get_achar>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800e8ec:	f107 0310 	add.w	r3, r7, #16
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7ff ff7b 	bl	800e7ec <get_achar>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800e8fa:	8b7a      	ldrh	r2, [r7, #26]
 800e8fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d104      	bne.n	800e90c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e902:	8b7b      	ldrh	r3, [r7, #26]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1bb      	bne.n	800e880 <pattern_matching+0x48>
 800e908:	2301      	movs	r3, #1
 800e90a:	e00c      	b.n	800e926 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800e90c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	4618      	mov	r0, r3
 800e914:	f7ff ff6a 	bl	800e7ec <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d002      	beq.n	800e924 <pattern_matching+0xec>
 800e91e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1a9      	bne.n	800e878 <pattern_matching+0x40>

	return 0;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3728      	adds	r7, #40	; 0x28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	3324      	adds	r3, #36	; 0x24
 800e944:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e946:	220b      	movs	r2, #11
 800e948:	2120      	movs	r1, #32
 800e94a:	68b8      	ldr	r0, [r7, #8]
 800e94c:	f7fe fe8f 	bl	800d66e <mem_set>
	si = i = 0; ni = 8;
 800e950:	2300      	movs	r3, #0
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	617b      	str	r3, [r7, #20]
 800e958:	2308      	movs	r3, #8
 800e95a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	617a      	str	r2, [r7, #20]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	4413      	add	r3, r2
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e96a:	7ffb      	ldrb	r3, [r7, #31]
 800e96c:	2b20      	cmp	r3, #32
 800e96e:	d94e      	bls.n	800ea0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e970:	7ffb      	ldrb	r3, [r7, #31]
 800e972:	2b2f      	cmp	r3, #47	; 0x2f
 800e974:	d006      	beq.n	800e984 <create_name+0x54>
 800e976:	7ffb      	ldrb	r3, [r7, #31]
 800e978:	2b5c      	cmp	r3, #92	; 0x5c
 800e97a:	d110      	bne.n	800e99e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e97c:	e002      	b.n	800e984 <create_name+0x54>
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	3301      	adds	r3, #1
 800e982:	617b      	str	r3, [r7, #20]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	4413      	add	r3, r2
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b2f      	cmp	r3, #47	; 0x2f
 800e98e:	d0f6      	beq.n	800e97e <create_name+0x4e>
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	4413      	add	r3, r2
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b5c      	cmp	r3, #92	; 0x5c
 800e99a:	d0f0      	beq.n	800e97e <create_name+0x4e>
			break;
 800e99c:	e038      	b.n	800ea10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e99e:	7ffb      	ldrb	r3, [r7, #31]
 800e9a0:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a2:	d003      	beq.n	800e9ac <create_name+0x7c>
 800e9a4:	693a      	ldr	r2, [r7, #16]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d30c      	bcc.n	800e9c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	2b0b      	cmp	r3, #11
 800e9b0:	d002      	beq.n	800e9b8 <create_name+0x88>
 800e9b2:	7ffb      	ldrb	r3, [r7, #31]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d001      	beq.n	800e9bc <create_name+0x8c>
 800e9b8:	2306      	movs	r3, #6
 800e9ba:	e044      	b.n	800ea46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e9bc:	2308      	movs	r3, #8
 800e9be:	613b      	str	r3, [r7, #16]
 800e9c0:	230b      	movs	r3, #11
 800e9c2:	61bb      	str	r3, [r7, #24]
			continue;
 800e9c4:	e022      	b.n	800ea0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e9c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	da04      	bge.n	800e9d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e9ce:	7ffb      	ldrb	r3, [r7, #31]
 800e9d0:	3b80      	subs	r3, #128	; 0x80
 800e9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ea50 <create_name+0x120>)
 800e9d4:	5cd3      	ldrb	r3, [r2, r3]
 800e9d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e9d8:	7ffb      	ldrb	r3, [r7, #31]
 800e9da:	4619      	mov	r1, r3
 800e9dc:	481d      	ldr	r0, [pc, #116]	; (800ea54 <create_name+0x124>)
 800e9de:	f7fe fe87 	bl	800d6f0 <chk_chr>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <create_name+0xbc>
 800e9e8:	2306      	movs	r3, #6
 800e9ea:	e02c      	b.n	800ea46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e9ec:	7ffb      	ldrb	r3, [r7, #31]
 800e9ee:	2b60      	cmp	r3, #96	; 0x60
 800e9f0:	d905      	bls.n	800e9fe <create_name+0xce>
 800e9f2:	7ffb      	ldrb	r3, [r7, #31]
 800e9f4:	2b7a      	cmp	r3, #122	; 0x7a
 800e9f6:	d802      	bhi.n	800e9fe <create_name+0xce>
 800e9f8:	7ffb      	ldrb	r3, [r7, #31]
 800e9fa:	3b20      	subs	r3, #32
 800e9fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	1c5a      	adds	r2, r3, #1
 800ea02:	613a      	str	r2, [r7, #16]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	4413      	add	r3, r2
 800ea08:	7ffa      	ldrb	r2, [r7, #31]
 800ea0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ea0c:	e7a6      	b.n	800e95c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ea0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	441a      	add	r2, r3
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <create_name+0xf4>
 800ea20:	2306      	movs	r3, #6
 800ea22:	e010      	b.n	800ea46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	2be5      	cmp	r3, #229	; 0xe5
 800ea2a:	d102      	bne.n	800ea32 <create_name+0x102>
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	2205      	movs	r2, #5
 800ea30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ea32:	7ffb      	ldrb	r3, [r7, #31]
 800ea34:	2b20      	cmp	r3, #32
 800ea36:	d801      	bhi.n	800ea3c <create_name+0x10c>
 800ea38:	2204      	movs	r2, #4
 800ea3a:	e000      	b.n	800ea3e <create_name+0x10e>
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	330b      	adds	r3, #11
 800ea42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ea44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3720      	adds	r7, #32
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	08016ed4 	.word	0x08016ed4
 800ea54:	08016d48 	.word	0x08016d48

0800ea58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ea6c:	e002      	b.n	800ea74 <follow_path+0x1c>
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	3301      	adds	r3, #1
 800ea72:	603b      	str	r3, [r7, #0]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b2f      	cmp	r3, #47	; 0x2f
 800ea7a:	d0f8      	beq.n	800ea6e <follow_path+0x16>
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	2b5c      	cmp	r3, #92	; 0x5c
 800ea82:	d0f4      	beq.n	800ea6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	2200      	movs	r2, #0
 800ea88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b1f      	cmp	r3, #31
 800ea90:	d80a      	bhi.n	800eaa8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2280      	movs	r2, #128	; 0x80
 800ea96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff fb9b 	bl	800e1d8 <dir_sdi>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75fb      	strb	r3, [r7, #23]
 800eaa6:	e043      	b.n	800eb30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7ff ff3f 	bl	800e930 <create_name>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d134      	bne.n	800eb26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7ff fdae 	bl	800e61e <dir_find>
 800eac2:	4603      	mov	r3, r0
 800eac4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eacc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00a      	beq.n	800eaea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ead4:	7dfb      	ldrb	r3, [r7, #23]
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d127      	bne.n	800eb2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	f003 0304 	and.w	r3, r3, #4
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d122      	bne.n	800eb2a <follow_path+0xd2>
 800eae4:	2305      	movs	r3, #5
 800eae6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eae8:	e01f      	b.n	800eb2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eaea:	7afb      	ldrb	r3, [r7, #11]
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d11c      	bne.n	800eb2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	799b      	ldrb	r3, [r3, #6]
 800eaf8:	f003 0310 	and.w	r3, r3, #16
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d102      	bne.n	800eb06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb00:	2305      	movs	r3, #5
 800eb02:	75fb      	strb	r3, [r7, #23]
 800eb04:	e014      	b.n	800eb30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb14:	4413      	add	r3, r2
 800eb16:	4619      	mov	r1, r3
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7ff fce4 	bl	800e4e6 <ld_clust>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb24:	e7c0      	b.n	800eaa8 <follow_path+0x50>
			if (res != FR_OK) break;
 800eb26:	bf00      	nop
 800eb28:	e002      	b.n	800eb30 <follow_path+0xd8>
				break;
 800eb2a:	bf00      	nop
 800eb2c:	e000      	b.n	800eb30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb2e:	bf00      	nop
			}
		}
	}

	return res;
 800eb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b087      	sub	sp, #28
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb42:	f04f 33ff 	mov.w	r3, #4294967295
 800eb46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d031      	beq.n	800ebb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	617b      	str	r3, [r7, #20]
 800eb56:	e002      	b.n	800eb5e <get_ldnumber+0x24>
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	617b      	str	r3, [r7, #20]
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2b20      	cmp	r3, #32
 800eb64:	d903      	bls.n	800eb6e <get_ldnumber+0x34>
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b3a      	cmp	r3, #58	; 0x3a
 800eb6c:	d1f4      	bne.n	800eb58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	2b3a      	cmp	r3, #58	; 0x3a
 800eb74:	d11c      	bne.n	800ebb0 <get_ldnumber+0x76>
			tp = *path;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	60fa      	str	r2, [r7, #12]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	3b30      	subs	r3, #48	; 0x30
 800eb86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b09      	cmp	r3, #9
 800eb8c:	d80e      	bhi.n	800ebac <get_ldnumber+0x72>
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d10a      	bne.n	800ebac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d107      	bne.n	800ebac <get_ldnumber+0x72>
					vol = (int)i;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	3301      	adds	r3, #1
 800eba4:	617b      	str	r3, [r7, #20]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	697a      	ldr	r2, [r7, #20]
 800ebaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	e002      	b.n	800ebb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ebb4:	693b      	ldr	r3, [r7, #16]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	371c      	adds	r7, #28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
	...

0800ebc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	70da      	strb	r2, [r3, #3]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebda:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7fe ff82 	bl	800dae8 <move_window>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <check_fs+0x2a>
 800ebea:	2304      	movs	r3, #4
 800ebec:	e038      	b.n	800ec60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3334      	adds	r3, #52	; 0x34
 800ebf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fe fc96 	bl	800d528 <ld_word>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d001      	beq.n	800ec0c <check_fs+0x48>
 800ec08:	2303      	movs	r3, #3
 800ec0a:	e029      	b.n	800ec60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec12:	2be9      	cmp	r3, #233	; 0xe9
 800ec14:	d009      	beq.n	800ec2a <check_fs+0x66>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec1c:	2beb      	cmp	r3, #235	; 0xeb
 800ec1e:	d11e      	bne.n	800ec5e <check_fs+0x9a>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec26:	2b90      	cmp	r3, #144	; 0x90
 800ec28:	d119      	bne.n	800ec5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3334      	adds	r3, #52	; 0x34
 800ec2e:	3336      	adds	r3, #54	; 0x36
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fe fc91 	bl	800d558 <ld_dword>
 800ec36:	4603      	mov	r3, r0
 800ec38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec3c:	4a0a      	ldr	r2, [pc, #40]	; (800ec68 <check_fs+0xa4>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d101      	bne.n	800ec46 <check_fs+0x82>
 800ec42:	2300      	movs	r3, #0
 800ec44:	e00c      	b.n	800ec60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	3334      	adds	r3, #52	; 0x34
 800ec4a:	3352      	adds	r3, #82	; 0x52
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe fc83 	bl	800d558 <ld_dword>
 800ec52:	4602      	mov	r2, r0
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <check_fs+0xa8>)
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d101      	bne.n	800ec5e <check_fs+0x9a>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e000      	b.n	800ec60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ec5e:	2302      	movs	r3, #2
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	00544146 	.word	0x00544146
 800ec6c:	33544146 	.word	0x33544146

0800ec70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b096      	sub	sp, #88	; 0x58
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff ff58 	bl	800eb3a <get_ldnumber>
 800ec8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da01      	bge.n	800ec96 <find_volume+0x26>
 800ec92:	230b      	movs	r3, #11
 800ec94:	e236      	b.n	800f104 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ec96:	4aac      	ldr	r2, [pc, #688]	; (800ef48 <find_volume+0x2d8>)
 800ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <find_volume+0x3a>
 800eca6:	230c      	movs	r3, #12
 800eca8:	e22c      	b.n	800f104 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800ecaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecac:	f7fe fd3b 	bl	800d726 <lock_fs>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <find_volume+0x4a>
 800ecb6:	230f      	movs	r3, #15
 800ecb8:	e224      	b.n	800f104 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	f023 0301 	bic.w	r3, r3, #1
 800ecc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d01a      	beq.n	800ed06 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ecd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd2:	785b      	ldrb	r3, [r3, #1]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fe fb89 	bl	800d3ec <disk_status>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ece0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10c      	bne.n	800ed06 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d007      	beq.n	800ed02 <find_volume+0x92>
 800ecf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecf6:	f003 0304 	and.w	r3, r3, #4
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ecfe:	230a      	movs	r3, #10
 800ed00:	e200      	b.n	800f104 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800ed02:	2300      	movs	r3, #0
 800ed04:	e1fe      	b.n	800f104 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	2200      	movs	r2, #0
 800ed0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe fb81 	bl	800d420 <disk_initialize>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed30:	2303      	movs	r3, #3
 800ed32:	e1e7      	b.n	800f104 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d007      	beq.n	800ed4a <find_volume+0xda>
 800ed3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed3e:	f003 0304 	and.w	r3, r3, #4
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ed46:	230a      	movs	r3, #10
 800ed48:	e1dc      	b.n	800f104 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed52:	f7ff ff37 	bl	800ebc4 <check_fs>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ed5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d14b      	bne.n	800edfc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed64:	2300      	movs	r3, #0
 800ed66:	643b      	str	r3, [r7, #64]	; 0x40
 800ed68:	e01f      	b.n	800edaa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ed6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed72:	011b      	lsls	r3, r3, #4
 800ed74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed78:	4413      	add	r3, r2
 800ed7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	3304      	adds	r3, #4
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <find_volume+0x124>
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	3308      	adds	r3, #8
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fbe4 	bl	800d558 <ld_dword>
 800ed90:	4602      	mov	r2, r0
 800ed92:	e000      	b.n	800ed96 <find_volume+0x126>
 800ed94:	2200      	movs	r2, #0
 800ed96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ed9e:	440b      	add	r3, r1
 800eda0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda6:	3301      	adds	r3, #1
 800eda8:	643b      	str	r3, [r7, #64]	; 0x40
 800edaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edac:	2b03      	cmp	r3, #3
 800edae:	d9dc      	bls.n	800ed6a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800edb0:	2300      	movs	r3, #0
 800edb2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800edb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d002      	beq.n	800edc0 <find_volume+0x150>
 800edba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbc:	3b01      	subs	r3, #1
 800edbe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800edc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800edc8:	4413      	add	r3, r2
 800edca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800edce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800edd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <find_volume+0x172>
 800edd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edda:	f7ff fef3 	bl	800ebc4 <check_fs>
 800edde:	4603      	mov	r3, r0
 800ede0:	e000      	b.n	800ede4 <find_volume+0x174>
 800ede2:	2303      	movs	r3, #3
 800ede4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ede8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edec:	2b01      	cmp	r3, #1
 800edee:	d905      	bls.n	800edfc <find_volume+0x18c>
 800edf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf2:	3301      	adds	r3, #1
 800edf4:	643b      	str	r3, [r7, #64]	; 0x40
 800edf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d9e1      	bls.n	800edc0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800edfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	d101      	bne.n	800ee08 <find_volume+0x198>
 800ee04:	2301      	movs	r3, #1
 800ee06:	e17d      	b.n	800f104 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d901      	bls.n	800ee14 <find_volume+0x1a4>
 800ee10:	230d      	movs	r3, #13
 800ee12:	e177      	b.n	800f104 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	3334      	adds	r3, #52	; 0x34
 800ee18:	330b      	adds	r3, #11
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe fb84 	bl	800d528 <ld_word>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee26:	d001      	beq.n	800ee2c <find_volume+0x1bc>
 800ee28:	230d      	movs	r3, #13
 800ee2a:	e16b      	b.n	800f104 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	3334      	adds	r3, #52	; 0x34
 800ee30:	3316      	adds	r3, #22
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe fb78 	bl	800d528 <ld_word>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d106      	bne.n	800ee50 <find_volume+0x1e0>
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	3334      	adds	r3, #52	; 0x34
 800ee46:	3324      	adds	r3, #36	; 0x24
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fe fb85 	bl	800d558 <ld_dword>
 800ee4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	789b      	ldrb	r3, [r3, #2]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d005      	beq.n	800ee74 <find_volume+0x204>
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	789b      	ldrb	r3, [r3, #2]
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d001      	beq.n	800ee74 <find_volume+0x204>
 800ee70:	230d      	movs	r3, #13
 800ee72:	e147      	b.n	800f104 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	789b      	ldrb	r3, [r3, #2]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7c:	fb02 f303 	mul.w	r3, r2, r3
 800ee80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	895b      	ldrh	r3, [r3, #10]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d008      	beq.n	800eea8 <find_volume+0x238>
 800ee96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee98:	895b      	ldrh	r3, [r3, #10]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	895b      	ldrh	r3, [r3, #10]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	4013      	ands	r3, r2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <find_volume+0x23c>
 800eea8:	230d      	movs	r3, #13
 800eeaa:	e12b      	b.n	800f104 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	3334      	adds	r3, #52	; 0x34
 800eeb0:	3311      	adds	r3, #17
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fb38 	bl	800d528 <ld_word>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	461a      	mov	r2, r3
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	891b      	ldrh	r3, [r3, #8]
 800eec4:	f003 030f 	and.w	r3, r3, #15
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <find_volume+0x262>
 800eece:	230d      	movs	r3, #13
 800eed0:	e118      	b.n	800f104 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	3334      	adds	r3, #52	; 0x34
 800eed6:	3313      	adds	r3, #19
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fe fb25 	bl	800d528 <ld_word>
 800eede:	4603      	mov	r3, r0
 800eee0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d106      	bne.n	800eef6 <find_volume+0x286>
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	3334      	adds	r3, #52	; 0x34
 800eeec:	3320      	adds	r3, #32
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fb32 	bl	800d558 <ld_dword>
 800eef4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	3334      	adds	r3, #52	; 0x34
 800eefa:	330e      	adds	r3, #14
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fb13 	bl	800d528 <ld_word>
 800ef02:	4603      	mov	r3, r0
 800ef04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <find_volume+0x2a0>
 800ef0c:	230d      	movs	r3, #13
 800ef0e:	e0f9      	b.n	800f104 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef14:	4413      	add	r3, r2
 800ef16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef18:	8912      	ldrh	r2, [r2, #8]
 800ef1a:	0912      	lsrs	r2, r2, #4
 800ef1c:	b292      	uxth	r2, r2
 800ef1e:	4413      	add	r3, r2
 800ef20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d201      	bcs.n	800ef2e <find_volume+0x2be>
 800ef2a:	230d      	movs	r3, #13
 800ef2c:	e0ea      	b.n	800f104 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef36:	8952      	ldrh	r2, [r2, #10]
 800ef38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d103      	bne.n	800ef4c <find_volume+0x2dc>
 800ef44:	230d      	movs	r3, #13
 800ef46:	e0dd      	b.n	800f104 <find_volume+0x494>
 800ef48:	200002d4 	.word	0x200002d4
		fmt = FS_FAT32;
 800ef4c:	2303      	movs	r3, #3
 800ef4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef54:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d802      	bhi.n	800ef62 <find_volume+0x2f2>
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d802      	bhi.n	800ef72 <find_volume+0x302>
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	1c9a      	adds	r2, r3, #2
 800ef76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef78:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef7e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef84:	441a      	add	r2, r3
 800ef86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef88:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ef8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8e:	441a      	add	r2, r3
 800ef90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef92:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef98:	2b03      	cmp	r3, #3
 800ef9a:	d11e      	bne.n	800efda <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	3334      	adds	r3, #52	; 0x34
 800efa0:	332a      	adds	r3, #42	; 0x2a
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe fac0 	bl	800d528 <ld_word>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <find_volume+0x342>
 800efae:	230d      	movs	r3, #13
 800efb0:	e0a8      	b.n	800f104 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	891b      	ldrh	r3, [r3, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <find_volume+0x34e>
 800efba:	230d      	movs	r3, #13
 800efbc:	e0a2      	b.n	800f104 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	3334      	adds	r3, #52	; 0x34
 800efc2:	332c      	adds	r3, #44	; 0x2c
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe fac7 	bl	800d558 <ld_dword>
 800efca:	4602      	mov	r2, r0
 800efcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	647b      	str	r3, [r7, #68]	; 0x44
 800efd8:	e01f      	b.n	800f01a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	891b      	ldrh	r3, [r3, #8]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d101      	bne.n	800efe6 <find_volume+0x376>
 800efe2:	230d      	movs	r3, #13
 800efe4:	e08e      	b.n	800f104 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efec:	441a      	add	r2, r3
 800efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d103      	bne.n	800f002 <find_volume+0x392>
 800effa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effc:	699b      	ldr	r3, [r3, #24]
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	e00a      	b.n	800f018 <find_volume+0x3a8>
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	699a      	ldr	r2, [r3, #24]
 800f006:	4613      	mov	r3, r2
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	4413      	add	r3, r2
 800f00c:	085a      	lsrs	r2, r3, #1
 800f00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f018:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	69da      	ldr	r2, [r3, #28]
 800f01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f020:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f024:	0a5b      	lsrs	r3, r3, #9
 800f026:	429a      	cmp	r2, r3
 800f028:	d201      	bcs.n	800f02e <find_volume+0x3be>
 800f02a:	230d      	movs	r3, #13
 800f02c:	e06a      	b.n	800f104 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f030:	f04f 32ff 	mov.w	r2, #4294967295
 800f034:	615a      	str	r2, [r3, #20]
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	695a      	ldr	r2, [r3, #20]
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f040:	2280      	movs	r2, #128	; 0x80
 800f042:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f048:	2b03      	cmp	r3, #3
 800f04a:	d149      	bne.n	800f0e0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04e:	3334      	adds	r3, #52	; 0x34
 800f050:	3330      	adds	r3, #48	; 0x30
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fa68 	bl	800d528 <ld_word>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d140      	bne.n	800f0e0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f060:	3301      	adds	r3, #1
 800f062:	4619      	mov	r1, r3
 800f064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f066:	f7fe fd3f 	bl	800dae8 <move_window>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d137      	bne.n	800f0e0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f072:	2200      	movs	r2, #0
 800f074:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f078:	3334      	adds	r3, #52	; 0x34
 800f07a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe fa52 	bl	800d528 <ld_word>
 800f084:	4603      	mov	r3, r0
 800f086:	461a      	mov	r2, r3
 800f088:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d127      	bne.n	800f0e0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	3334      	adds	r3, #52	; 0x34
 800f094:	4618      	mov	r0, r3
 800f096:	f7fe fa5f 	bl	800d558 <ld_dword>
 800f09a:	4602      	mov	r2, r0
 800f09c:	4b1b      	ldr	r3, [pc, #108]	; (800f10c <find_volume+0x49c>)
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d11e      	bne.n	800f0e0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a4:	3334      	adds	r3, #52	; 0x34
 800f0a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe fa54 	bl	800d558 <ld_dword>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	4b17      	ldr	r3, [pc, #92]	; (800f110 <find_volume+0x4a0>)
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d113      	bne.n	800f0e0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ba:	3334      	adds	r3, #52	; 0x34
 800f0bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fa49 	bl	800d558 <ld_dword>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ca:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	3334      	adds	r3, #52	; 0x34
 800f0d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fe fa3f 	bl	800d558 <ld_dword>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0de:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f0e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f0e8:	4b0a      	ldr	r3, [pc, #40]	; (800f114 <find_volume+0x4a4>)
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	4b08      	ldr	r3, [pc, #32]	; (800f114 <find_volume+0x4a4>)
 800f0f2:	801a      	strh	r2, [r3, #0]
 800f0f4:	4b07      	ldr	r3, [pc, #28]	; (800f114 <find_volume+0x4a4>)
 800f0f6:	881a      	ldrh	r2, [r3, #0]
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f0fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0fe:	f7fe fc8b 	bl	800da18 <clear_lock>
#endif
	return FR_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3758      	adds	r7, #88	; 0x58
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	41615252 	.word	0x41615252
 800f110:	61417272 	.word	0x61417272
 800f114:	200002d8 	.word	0x200002d8

0800f118 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f122:	2309      	movs	r3, #9
 800f124:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d02e      	beq.n	800f18a <validate+0x72>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d02a      	beq.n	800f18a <validate+0x72>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d025      	beq.n	800f18a <validate+0x72>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	889a      	ldrh	r2, [r3, #4]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	88db      	ldrh	r3, [r3, #6]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d11e      	bne.n	800f18a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fae8 	bl	800d726 <lock_fs>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d014      	beq.n	800f186 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	785b      	ldrb	r3, [r3, #1]
 800f162:	4618      	mov	r0, r3
 800f164:	f7fe f942 	bl	800d3ec <disk_status>
 800f168:	4603      	mov	r3, r0
 800f16a:	f003 0301 	and.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d102      	bne.n	800f178 <validate+0x60>
				res = FR_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	73fb      	strb	r3, [r7, #15]
 800f176:	e008      	b.n	800f18a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2100      	movs	r1, #0
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fe fae7 	bl	800d752 <unlock_fs>
 800f184:	e001      	b.n	800f18a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f186:	230f      	movs	r3, #15
 800f188:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d102      	bne.n	800f196 <validate+0x7e>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	e000      	b.n	800f198 <validate+0x80>
 800f196:	2300      	movs	r3, #0
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	6013      	str	r3, [r2, #0]
	return res;
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1ba:	f107 0310 	add.w	r3, r7, #16
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fcbb 	bl	800eb3a <get_ldnumber>
 800f1c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	da01      	bge.n	800f1d0 <f_mount+0x28>
 800f1cc:	230b      	movs	r3, #11
 800f1ce:	e048      	b.n	800f262 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1d0:	4a26      	ldr	r2, [pc, #152]	; (800f26c <f_mount+0xc4>)
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00f      	beq.n	800f200 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f1e0:	69b8      	ldr	r0, [r7, #24]
 800f1e2:	f7fe fc19 	bl	800da18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f001 f828 	bl	8010240 <ff_del_syncobj>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <f_mount+0x52>
 800f1f6:	2302      	movs	r3, #2
 800f1f8:	e033      	b.n	800f262 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00f      	beq.n	800f226 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	330c      	adds	r3, #12
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f000 fff7 	bl	801020a <ff_cre_syncobj>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d101      	bne.n	800f226 <f_mount+0x7e>
 800f222:	2302      	movs	r3, #2
 800f224:	e01d      	b.n	800f262 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	4910      	ldr	r1, [pc, #64]	; (800f26c <f_mount+0xc4>)
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d002      	beq.n	800f23c <f_mount+0x94>
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d001      	beq.n	800f240 <f_mount+0x98>
 800f23c:	2300      	movs	r3, #0
 800f23e:	e010      	b.n	800f262 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f240:	f107 010c 	add.w	r1, r7, #12
 800f244:	f107 0308 	add.w	r3, r7, #8
 800f248:	2200      	movs	r2, #0
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff fd10 	bl	800ec70 <find_volume>
 800f250:	4603      	mov	r3, r0
 800f252:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	7dfa      	ldrb	r2, [r7, #23]
 800f258:	4611      	mov	r1, r2
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fe fa79 	bl	800d752 <unlock_fs>
 800f260:	7dfb      	ldrb	r3, [r7, #23]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3720      	adds	r7, #32
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200002d4 	.word	0x200002d4

0800f270 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b09a      	sub	sp, #104	; 0x68
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	4613      	mov	r3, r2
 800f27c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d101      	bne.n	800f288 <f_open+0x18>
 800f284:	2309      	movs	r3, #9
 800f286:	e1b4      	b.n	800f5f2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f288:	79fb      	ldrb	r3, [r7, #7]
 800f28a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f28e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f290:	79fa      	ldrb	r2, [r7, #7]
 800f292:	f107 0114 	add.w	r1, r7, #20
 800f296:	f107 0308 	add.w	r3, r7, #8
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff fce8 	bl	800ec70 <find_volume>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f2a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f040 8191 	bne.w	800f5d2 <f_open+0x362>
		dj.obj.fs = fs;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	f107 0318 	add.w	r3, r7, #24
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff fbcb 	bl	800ea58 <follow_path>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f2c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d11a      	bne.n	800f306 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f2d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f2d4:	b25b      	sxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da03      	bge.n	800f2e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f2da:	2306      	movs	r3, #6
 800f2dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2e0:	e011      	b.n	800f306 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	f023 0301 	bic.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bf14      	ite	ne
 800f2ec:	2301      	movne	r3, #1
 800f2ee:	2300      	moveq	r3, #0
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f107 0318 	add.w	r3, r7, #24
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fe fa44 	bl	800d788 <chk_lock>
 800f300:	4603      	mov	r3, r0
 800f302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f306:	79fb      	ldrb	r3, [r7, #7]
 800f308:	f003 031c 	and.w	r3, r3, #28
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d07f      	beq.n	800f410 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f310:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f314:	2b00      	cmp	r3, #0
 800f316:	d017      	beq.n	800f348 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f318:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	d10e      	bne.n	800f33e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f320:	f7fe fa8e 	bl	800d840 <enq_lock>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d006      	beq.n	800f338 <f_open+0xc8>
 800f32a:	f107 0318 	add.w	r3, r7, #24
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff f9ca 	bl	800e6c8 <dir_register>
 800f334:	4603      	mov	r3, r0
 800f336:	e000      	b.n	800f33a <f_open+0xca>
 800f338:	2312      	movs	r3, #18
 800f33a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	f043 0308 	orr.w	r3, r3, #8
 800f344:	71fb      	strb	r3, [r7, #7]
 800f346:	e010      	b.n	800f36a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f348:	7fbb      	ldrb	r3, [r7, #30]
 800f34a:	f003 0311 	and.w	r3, r3, #17
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d003      	beq.n	800f35a <f_open+0xea>
					res = FR_DENIED;
 800f352:	2307      	movs	r3, #7
 800f354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f358:	e007      	b.n	800f36a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	f003 0304 	and.w	r3, r3, #4
 800f360:	2b00      	cmp	r3, #0
 800f362:	d002      	beq.n	800f36a <f_open+0xfa>
 800f364:	2308      	movs	r3, #8
 800f366:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f36a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d168      	bne.n	800f444 <f_open+0x1d4>
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d063      	beq.n	800f444 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f37c:	f7fc f9b4 	bl	800b6e8 <get_fattime>
 800f380:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f384:	330e      	adds	r3, #14
 800f386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fe f923 	bl	800d5d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	3316      	adds	r3, #22
 800f392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe f91d 	bl	800d5d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39c:	330b      	adds	r3, #11
 800f39e:	2220      	movs	r2, #32
 800f3a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7ff f89c 	bl	800e4e6 <ld_clust>
 800f3ae:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff f8b4 	bl	800e524 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	331c      	adds	r3, #28
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fe f906 	bl	800d5d4 <st_dword>
					fs->wflag = 1;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d037      	beq.n	800f444 <f_open+0x1d4>
						dw = fs->winsect;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f3da:	f107 0318 	add.w	r3, r7, #24
 800f3de:	2200      	movs	r2, #0
 800f3e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe fdc7 	bl	800df76 <remove_chain>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f3ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d126      	bne.n	800f444 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fe fb74 	bl	800dae8 <move_window>
 800f400:	4603      	mov	r3, r0
 800f402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f40a:	3a01      	subs	r2, #1
 800f40c:	611a      	str	r2, [r3, #16]
 800f40e:	e019      	b.n	800f444 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f414:	2b00      	cmp	r3, #0
 800f416:	d115      	bne.n	800f444 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f418:	7fbb      	ldrb	r3, [r7, #30]
 800f41a:	f003 0310 	and.w	r3, r3, #16
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <f_open+0x1ba>
					res = FR_NO_FILE;
 800f422:	2304      	movs	r3, #4
 800f424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f428:	e00c      	b.n	800f444 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f42a:	79fb      	ldrb	r3, [r7, #7]
 800f42c:	f003 0302 	and.w	r3, r3, #2
 800f430:	2b00      	cmp	r3, #0
 800f432:	d007      	beq.n	800f444 <f_open+0x1d4>
 800f434:	7fbb      	ldrb	r3, [r7, #30]
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d002      	beq.n	800f444 <f_open+0x1d4>
						res = FR_DENIED;
 800f43e:	2307      	movs	r3, #7
 800f440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d128      	bne.n	800f49e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	f003 0308 	and.w	r3, r3, #8
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f45c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f46c:	79fb      	ldrb	r3, [r7, #7]
 800f46e:	f023 0301 	bic.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	bf14      	ite	ne
 800f476:	2301      	movne	r3, #1
 800f478:	2300      	moveq	r3, #0
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	461a      	mov	r2, r3
 800f47e:	f107 0318 	add.w	r3, r7, #24
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7fe f9fd 	bl	800d884 <inc_lock>
 800f48a:	4602      	mov	r2, r0
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d102      	bne.n	800f49e <f_open+0x22e>
 800f498:	2302      	movs	r3, #2
 800f49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f49e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f040 8095 	bne.w	800f5d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff f819 	bl	800e4e6 <ld_clust>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	331c      	adds	r3, #28
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe f84a 	bl	800d558 <ld_dword>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	88da      	ldrh	r2, [r3, #6]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	79fa      	ldrb	r2, [r7, #7]
 800f4e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	3330      	adds	r3, #48	; 0x30
 800f4fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4fe:	2100      	movs	r1, #0
 800f500:	4618      	mov	r0, r3
 800f502:	f7fe f8b4 	bl	800d66e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	f003 0320 	and.w	r3, r3, #32
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d060      	beq.n	800f5d2 <f_open+0x362>
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d05c      	beq.n	800f5d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	68da      	ldr	r2, [r3, #12]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	895b      	ldrh	r3, [r3, #10]
 800f524:	025b      	lsls	r3, r3, #9
 800f526:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f534:	e016      	b.n	800f564 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fe fb8f 	bl	800dc5e <get_fat>
 800f540:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f544:	2b01      	cmp	r3, #1
 800f546:	d802      	bhi.n	800f54e <f_open+0x2de>
 800f548:	2302      	movs	r3, #2
 800f54a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f54e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f554:	d102      	bne.n	800f55c <f_open+0x2ec>
 800f556:	2301      	movs	r3, #1
 800f558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f55c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d103      	bne.n	800f574 <f_open+0x304>
 800f56c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f570:	429a      	cmp	r2, r3
 800f572:	d8e0      	bhi.n	800f536 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f578:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f57a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d127      	bne.n	800f5d2 <f_open+0x362>
 800f582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d022      	beq.n	800f5d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f590:	4618      	mov	r0, r3
 800f592:	f7fe fb45 	bl	800dc20 <clust2sect>
 800f596:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d103      	bne.n	800f5a6 <f_open+0x336>
						res = FR_INT_ERR;
 800f59e:	2302      	movs	r3, #2
 800f5a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f5a4:	e015      	b.n	800f5d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5a8:	0a5a      	lsrs	r2, r3, #9
 800f5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ac:	441a      	add	r2, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	7858      	ldrb	r0, [r3, #1]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6a1a      	ldr	r2, [r3, #32]
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f7fd ff53 	bl	800d46c <disk_read>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d002      	beq.n	800f5d2 <f_open+0x362>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f5d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d002      	beq.n	800f5e0 <f_open+0x370>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe f8b2 	bl	800d752 <unlock_fs>
 800f5ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3768      	adds	r7, #104	; 0x68
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b08c      	sub	sp, #48	; 0x30
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	60f8      	str	r0, [r7, #12]
 800f602:	60b9      	str	r1, [r7, #8]
 800f604:	607a      	str	r2, [r7, #4]
 800f606:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2200      	movs	r2, #0
 800f610:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f107 0210 	add.w	r2, r7, #16
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fd7c 	bl	800f118 <validate>
 800f620:	4603      	mov	r3, r0
 800f622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d107      	bne.n	800f63e <f_write+0x44>
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	7d5b      	ldrb	r3, [r3, #21]
 800f632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d009      	beq.n	800f652 <f_write+0x58>
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f644:	4611      	mov	r1, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe f883 	bl	800d752 <unlock_fs>
 800f64c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f650:	e173      	b.n	800f93a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	7d1b      	ldrb	r3, [r3, #20]
 800f656:	f003 0302 	and.w	r3, r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <f_write+0x72>
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	2107      	movs	r1, #7
 800f662:	4618      	mov	r0, r3
 800f664:	f7fe f875 	bl	800d752 <unlock_fs>
 800f668:	2307      	movs	r3, #7
 800f66a:	e166      	b.n	800f93a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	699a      	ldr	r2, [r3, #24]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	441a      	add	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	429a      	cmp	r2, r3
 800f67a:	f080 814b 	bcs.w	800f914 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	699b      	ldr	r3, [r3, #24]
 800f682:	43db      	mvns	r3, r3
 800f684:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f686:	e145      	b.n	800f914 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f690:	2b00      	cmp	r3, #0
 800f692:	f040 8101 	bne.w	800f898 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	699b      	ldr	r3, [r3, #24]
 800f69a:	0a5b      	lsrs	r3, r3, #9
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	8952      	ldrh	r2, [r2, #10]
 800f6a0:	3a01      	subs	r2, #1
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d14d      	bne.n	800f748 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10c      	bne.n	800f6ce <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d11a      	bne.n	800f6f6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fe fcbb 	bl	800e040 <create_chain>
 800f6ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800f6cc:	e013      	b.n	800f6f6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d007      	beq.n	800f6e6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f7fe fd47 	bl	800e170 <clmt_clust>
 800f6e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f6e4:	e007      	b.n	800f6f6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	69db      	ldr	r3, [r3, #28]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4610      	mov	r0, r2
 800f6f0:	f7fe fca6 	bl	800e040 <create_chain>
 800f6f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f000 8110 	beq.w	800f91e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	2b01      	cmp	r3, #1
 800f702:	d109      	bne.n	800f718 <f_write+0x11e>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2202      	movs	r2, #2
 800f708:	755a      	strb	r2, [r3, #21]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	2102      	movs	r1, #2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fe f81f 	bl	800d752 <unlock_fs>
 800f714:	2302      	movs	r3, #2
 800f716:	e110      	b.n	800f93a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71e:	d109      	bne.n	800f734 <f_write+0x13a>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2201      	movs	r2, #1
 800f724:	755a      	strb	r2, [r3, #21]
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	2101      	movs	r1, #1
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe f811 	bl	800d752 <unlock_fs>
 800f730:	2301      	movs	r3, #1
 800f732:	e102      	b.n	800f93a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f738:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d102      	bne.n	800f748 <f_write+0x14e>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f746:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	b25b      	sxtb	r3, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	da1d      	bge.n	800f78e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	7858      	ldrb	r0, [r3, #1]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6a1a      	ldr	r2, [r3, #32]
 800f760:	2301      	movs	r3, #1
 800f762:	f7fd fea3 	bl	800d4ac <disk_write>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d009      	beq.n	800f780 <f_write+0x186>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2201      	movs	r2, #1
 800f770:	755a      	strb	r2, [r3, #21]
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2101      	movs	r1, #1
 800f776:	4618      	mov	r0, r3
 800f778:	f7fd ffeb 	bl	800d752 <unlock_fs>
 800f77c:	2301      	movs	r3, #1
 800f77e:	e0dc      	b.n	800f93a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
 800f784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	69db      	ldr	r3, [r3, #28]
 800f794:	4619      	mov	r1, r3
 800f796:	4610      	mov	r0, r2
 800f798:	f7fe fa42 	bl	800dc20 <clust2sect>
 800f79c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d109      	bne.n	800f7b8 <f_write+0x1be>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	755a      	strb	r2, [r3, #21]
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	2102      	movs	r1, #2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd ffcf 	bl	800d752 <unlock_fs>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	e0c0      	b.n	800f93a <f_write+0x340>
			sect += csect;
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	4413      	add	r3, r2
 800f7be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	0a5b      	lsrs	r3, r3, #9
 800f7c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d041      	beq.n	800f850 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	6a3b      	ldr	r3, [r7, #32]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	8952      	ldrh	r2, [r2, #10]
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d905      	bls.n	800f7e6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	895b      	ldrh	r3, [r3, #10]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	7858      	ldrb	r0, [r3, #1]
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	69f9      	ldr	r1, [r7, #28]
 800f7f0:	f7fd fe5c 	bl	800d4ac <disk_write>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d009      	beq.n	800f80e <f_write+0x214>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	755a      	strb	r2, [r3, #21]
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	2101      	movs	r1, #1
 800f804:	4618      	mov	r0, r3
 800f806:	f7fd ffa4 	bl	800d752 <unlock_fs>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e095      	b.n	800f93a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6a1a      	ldr	r2, [r3, #32]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	6a3a      	ldr	r2, [r7, #32]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d915      	bls.n	800f848 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6a1a      	ldr	r2, [r3, #32]
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	025b      	lsls	r3, r3, #9
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	4413      	add	r3, r2
 800f830:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f834:	4619      	mov	r1, r3
 800f836:	f7fd fef9 	bl	800d62c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	7d1b      	ldrb	r3, [r3, #20]
 800f83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f842:	b2da      	uxtb	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f848:	6a3b      	ldr	r3, [r7, #32]
 800f84a:	025b      	lsls	r3, r3, #9
 800f84c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f84e:	e044      	b.n	800f8da <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6a1b      	ldr	r3, [r3, #32]
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	429a      	cmp	r2, r3
 800f858:	d01b      	beq.n	800f892 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	699a      	ldr	r2, [r3, #24]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f862:	429a      	cmp	r2, r3
 800f864:	d215      	bcs.n	800f892 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	7858      	ldrb	r0, [r3, #1]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f870:	2301      	movs	r3, #1
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	f7fd fdfa 	bl	800d46c <disk_read>
 800f878:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d009      	beq.n	800f892 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2201      	movs	r2, #1
 800f882:	755a      	strb	r2, [r3, #21]
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	2101      	movs	r1, #1
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fd ff62 	bl	800d752 <unlock_fs>
 800f88e:	2301      	movs	r3, #1
 800f890:	e053      	b.n	800f93a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	699b      	ldr	r3, [r3, #24]
 800f89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f8a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d901      	bls.n	800f8b2 <f_write+0x2b8>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8c0:	4413      	add	r3, r2
 800f8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8c4:	69f9      	ldr	r1, [r7, #28]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fd feb0 	bl	800d62c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	7d1b      	ldrb	r3, [r3, #20]
 800f8d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f8da:	69fa      	ldr	r2, [r7, #28]
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8de:	4413      	add	r3, r2
 800f8e0:	61fb      	str	r3, [r7, #28]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	699a      	ldr	r2, [r3, #24]
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	441a      	add	r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	619a      	str	r2, [r3, #24]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	68da      	ldr	r2, [r3, #12]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	699b      	ldr	r3, [r3, #24]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	bf38      	it	cc
 800f8fa:	461a      	movcc	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	60da      	str	r2, [r3, #12]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	441a      	add	r2, r3
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	f47f aeb6 	bne.w	800f688 <f_write+0x8e>
 800f91c:	e000      	b.n	800f920 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f91e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	7d1b      	ldrb	r3, [r3, #20]
 800f924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	2100      	movs	r1, #0
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd ff0d 	bl	800d752 <unlock_fs>
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3730      	adds	r7, #48	; 0x30
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b086      	sub	sp, #24
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f107 0208 	add.w	r2, r7, #8
 800f950:	4611      	mov	r1, r2
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fbe0 	bl	800f118 <validate>
 800f958:	4603      	mov	r3, r0
 800f95a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f95c:	7dfb      	ldrb	r3, [r7, #23]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d16d      	bne.n	800fa3e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	7d1b      	ldrb	r3, [r3, #20]
 800f966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d067      	beq.n	800fa3e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	7d1b      	ldrb	r3, [r3, #20]
 800f972:	b25b      	sxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	da1a      	bge.n	800f9ae <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	7858      	ldrb	r0, [r3, #1]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1a      	ldr	r2, [r3, #32]
 800f986:	2301      	movs	r3, #1
 800f988:	f7fd fd90 	bl	800d4ac <disk_write>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d006      	beq.n	800f9a0 <f_sync+0x5e>
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2101      	movs	r1, #1
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd fedb 	bl	800d752 <unlock_fs>
 800f99c:	2301      	movs	r3, #1
 800f99e:	e055      	b.n	800fa4c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	7d1b      	ldrb	r3, [r3, #20]
 800f9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9a8:	b2da      	uxtb	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f9ae:	f7fb fe9b 	bl	800b6e8 <get_fattime>
 800f9b2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f9b4:	68ba      	ldr	r2, [r7, #8]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f7fe f893 	bl	800dae8 <move_window>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f9c6:	7dfb      	ldrb	r3, [r7, #23]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d138      	bne.n	800fa3e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	330b      	adds	r3, #11
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	330b      	adds	r3, #11
 800f9dc:	f042 0220 	orr.w	r2, r2, #32
 800f9e0:	b2d2      	uxtb	r2, r2
 800f9e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6818      	ldr	r0, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	68f9      	ldr	r1, [r7, #12]
 800f9f0:	f7fe fd98 	bl	800e524 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f103 021c 	add.w	r2, r3, #28
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4610      	mov	r0, r2
 800fa02:	f7fd fde7 	bl	800d5d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	3316      	adds	r3, #22
 800fa0a:	6939      	ldr	r1, [r7, #16]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd fde1 	bl	800d5d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3312      	adds	r3, #18
 800fa16:	2100      	movs	r1, #0
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7fd fdc0 	bl	800d59e <st_word>
					fs->wflag = 1;
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2201      	movs	r2, #1
 800fa22:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe f88c 	bl	800db44 <sync_fs>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	7d1b      	ldrb	r3, [r3, #20]
 800fa34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	7dfa      	ldrb	r2, [r7, #23]
 800fa42:	4611      	mov	r1, r2
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fd fe84 	bl	800d752 <unlock_fs>
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b090      	sub	sp, #64	; 0x40
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f107 0208 	add.w	r2, r7, #8
 800fa64:	4611      	mov	r1, r2
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff fb56 	bl	800f118 <validate>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fa72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d103      	bne.n	800fa82 <f_lseek+0x2e>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7d5b      	ldrb	r3, [r3, #21]
 800fa7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fa82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d009      	beq.n	800fa9e <f_lseek+0x4a>
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fd fe5d 	bl	800d752 <unlock_fs>
 800fa98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa9c:	e229      	b.n	800fef2 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 80ea 	beq.w	800fc7c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faae:	d164      	bne.n	800fb7a <f_lseek+0x126>
			tbl = fp->cltbl;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	1d1a      	adds	r2, r3, #4
 800faba:	627a      	str	r2, [r7, #36]	; 0x24
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	2302      	movs	r3, #2
 800fac2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	2b00      	cmp	r3, #0
 800face:	d044      	beq.n	800fb5a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad2:	613b      	str	r3, [r7, #16]
 800fad4:	2300      	movs	r3, #0
 800fad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fada:	3302      	adds	r3, #2
 800fadc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae0:	60fb      	str	r3, [r7, #12]
 800fae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae4:	3301      	adds	r3, #1
 800fae6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faec:	4618      	mov	r0, r3
 800faee:	f7fe f8b6 	bl	800dc5e <get_fat>
 800faf2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d809      	bhi.n	800fb0e <f_lseek+0xba>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2202      	movs	r2, #2
 800fafe:	755a      	strb	r2, [r3, #21]
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	2102      	movs	r1, #2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fd fe24 	bl	800d752 <unlock_fs>
 800fb0a:	2302      	movs	r3, #2
 800fb0c:	e1f1      	b.n	800fef2 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb14:	d109      	bne.n	800fb2a <f_lseek+0xd6>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	755a      	strb	r2, [r3, #21]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2101      	movs	r1, #1
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd fe16 	bl	800d752 <unlock_fs>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e1e3      	b.n	800fef2 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d0d4      	beq.n	800fade <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fb34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d809      	bhi.n	800fb50 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	1d1a      	adds	r2, r3, #4
 800fb40:	627a      	str	r2, [r7, #36]	; 0x24
 800fb42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb48:	1d1a      	adds	r2, r3, #4
 800fb4a:	627a      	str	r2, [r7, #36]	; 0x24
 800fb4c:	693a      	ldr	r2, [r7, #16]
 800fb4e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d3ba      	bcc.n	800fad0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb60:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fb62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d803      	bhi.n	800fb72 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	e1b6      	b.n	800fee0 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fb72:	2311      	movs	r3, #17
 800fb74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb78:	e1b2      	b.n	800fee0 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d902      	bls.n	800fb8a <f_lseek+0x136>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f000 81a4 	beq.w	800fee0 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7fe fae6 	bl	800e170 <clmt_clust>
 800fba4:	4602      	mov	r2, r0
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	69db      	ldr	r3, [r3, #28]
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	4610      	mov	r0, r2
 800fbb4:	f7fe f834 	bl	800dc20 <clust2sect>
 800fbb8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d109      	bne.n	800fbd4 <f_lseek+0x180>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	755a      	strb	r2, [r3, #21]
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2102      	movs	r1, #2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fd fdc1 	bl	800d752 <unlock_fs>
 800fbd0:	2302      	movs	r3, #2
 800fbd2:	e18e      	b.n	800fef2 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	3b01      	subs	r3, #1
 800fbd8:	0a5b      	lsrs	r3, r3, #9
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	8952      	ldrh	r2, [r2, #10]
 800fbde:	3a01      	subs	r2, #1
 800fbe0:	4013      	ands	r3, r2
 800fbe2:	69ba      	ldr	r2, [r7, #24]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	699b      	ldr	r3, [r3, #24]
 800fbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 8175 	beq.w	800fee0 <f_lseek+0x48c>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	69ba      	ldr	r2, [r7, #24]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	f000 816f 	beq.w	800fee0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	7d1b      	ldrb	r3, [r3, #20]
 800fc06:	b25b      	sxtb	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da1d      	bge.n	800fc48 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	7858      	ldrb	r0, [r3, #1]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a1a      	ldr	r2, [r3, #32]
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f7fd fc46 	bl	800d4ac <disk_write>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d009      	beq.n	800fc3a <f_lseek+0x1e6>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	755a      	strb	r2, [r3, #21]
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2101      	movs	r1, #1
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fd8e 	bl	800d752 <unlock_fs>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e15b      	b.n	800fef2 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	7d1b      	ldrb	r3, [r3, #20]
 800fc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	7858      	ldrb	r0, [r3, #1]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc52:	2301      	movs	r3, #1
 800fc54:	69ba      	ldr	r2, [r7, #24]
 800fc56:	f7fd fc09 	bl	800d46c <disk_read>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d009      	beq.n	800fc74 <f_lseek+0x220>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2201      	movs	r2, #1
 800fc64:	755a      	strb	r2, [r3, #21]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2101      	movs	r1, #1
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fd fd71 	bl	800d752 <unlock_fs>
 800fc70:	2301      	movs	r3, #1
 800fc72:	e13e      	b.n	800fef2 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	69ba      	ldr	r2, [r7, #24]
 800fc78:	621a      	str	r2, [r3, #32]
 800fc7a:	e131      	b.n	800fee0 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	683a      	ldr	r2, [r7, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d908      	bls.n	800fc98 <f_lseek+0x244>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	7d1b      	ldrb	r3, [r3, #20]
 800fc8a:	f003 0302 	and.w	r3, r3, #2
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d102      	bne.n	800fc98 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	637b      	str	r3, [r7, #52]	; 0x34
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fca6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f000 80c0 	beq.w	800fe30 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	895b      	ldrh	r3, [r3, #10]
 800fcb4:	025b      	lsls	r3, r3, #9
 800fcb6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fcb8:	6a3b      	ldr	r3, [r7, #32]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d01b      	beq.n	800fcf6 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	1e5a      	subs	r2, r3, #1
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	fbb2 f2f3 	udiv	r2, r2, r3
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	1e59      	subs	r1, r3, #1
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d30f      	bcc.n	800fcf6 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	1e5a      	subs	r2, r3, #1
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	425b      	negs	r3, r3
 800fcde:	401a      	ands	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcf4:	e02c      	b.n	800fd50 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d123      	bne.n	800fd4a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2100      	movs	r1, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe f99a 	bl	800e040 <create_chain>
 800fd0c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d109      	bne.n	800fd28 <f_lseek+0x2d4>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	755a      	strb	r2, [r3, #21]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	2102      	movs	r1, #2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fd fd17 	bl	800d752 <unlock_fs>
 800fd24:	2302      	movs	r3, #2
 800fd26:	e0e4      	b.n	800fef2 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d109      	bne.n	800fd44 <f_lseek+0x2f0>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	755a      	strb	r2, [r3, #21]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2101      	movs	r1, #1
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fd fd09 	bl	800d752 <unlock_fs>
 800fd40:	2301      	movs	r3, #1
 800fd42:	e0d6      	b.n	800fef2 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd48:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd4e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d06c      	beq.n	800fe30 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800fd56:	e044      	b.n	800fde2 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	699a      	ldr	r2, [r3, #24]
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	441a      	add	r2, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	7d1b      	ldrb	r3, [r3, #20]
 800fd70:	f003 0302 	and.w	r3, r3, #2
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00b      	beq.n	800fd90 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe f95f 	bl	800e040 <create_chain>
 800fd82:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d108      	bne.n	800fd9c <f_lseek+0x348>
							ofs = 0; break;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	603b      	str	r3, [r7, #0]
 800fd8e:	e02c      	b.n	800fdea <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7fd ff62 	bl	800dc5e <get_fat>
 800fd9a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda2:	d109      	bne.n	800fdb8 <f_lseek+0x364>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	755a      	strb	r2, [r3, #21]
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2101      	movs	r1, #1
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fd fccf 	bl	800d752 <unlock_fs>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e09c      	b.n	800fef2 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d904      	bls.n	800fdc8 <f_lseek+0x374>
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d309      	bcc.n	800fddc <f_lseek+0x388>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2202      	movs	r2, #2
 800fdcc:	755a      	strb	r2, [r3, #21]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2102      	movs	r1, #2
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fd fcbd 	bl	800d752 <unlock_fs>
 800fdd8:	2302      	movs	r3, #2
 800fdda:	e08a      	b.n	800fef2 <f_lseek+0x49e>
					fp->clust = clst;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fde0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d8b6      	bhi.n	800fd58 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	699a      	ldr	r2, [r3, #24]
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	441a      	add	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d017      	beq.n	800fe30 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fd ff0b 	bl	800dc20 <clust2sect>
 800fe0a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fe0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d109      	bne.n	800fe26 <f_lseek+0x3d2>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2202      	movs	r2, #2
 800fe16:	755a      	strb	r2, [r3, #21]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2102      	movs	r1, #2
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fd fc98 	bl	800d752 <unlock_fs>
 800fe22:	2302      	movs	r3, #2
 800fe24:	e065      	b.n	800fef2 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	0a5b      	lsrs	r3, r3, #9
 800fe2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe2c:	4413      	add	r3, r2
 800fe2e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	699a      	ldr	r2, [r3, #24]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d90a      	bls.n	800fe52 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	699a      	ldr	r2, [r3, #24]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	7d1b      	ldrb	r3, [r3, #20]
 800fe48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d040      	beq.n	800fee0 <f_lseek+0x48c>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d03b      	beq.n	800fee0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7d1b      	ldrb	r3, [r3, #20]
 800fe6c:	b25b      	sxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	da1d      	bge.n	800feae <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	7858      	ldrb	r0, [r3, #1]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a1a      	ldr	r2, [r3, #32]
 800fe80:	2301      	movs	r3, #1
 800fe82:	f7fd fb13 	bl	800d4ac <disk_write>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d009      	beq.n	800fea0 <f_lseek+0x44c>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	755a      	strb	r2, [r3, #21]
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2101      	movs	r1, #1
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fd fc5b 	bl	800d752 <unlock_fs>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e028      	b.n	800fef2 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7d1b      	ldrb	r3, [r3, #20]
 800fea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	7858      	ldrb	r0, [r3, #1]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feb8:	2301      	movs	r3, #1
 800feba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800febc:	f7fd fad6 	bl	800d46c <disk_read>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <f_lseek+0x486>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2201      	movs	r2, #1
 800feca:	755a      	strb	r2, [r3, #21]
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2101      	movs	r1, #1
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fd fc3e 	bl	800d752 <unlock_fs>
 800fed6:	2301      	movs	r3, #1
 800fed8:	e00b      	b.n	800fef2 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fede:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fee6:	4611      	mov	r1, r2
 800fee8:	4618      	mov	r0, r3
 800feea:	f7fd fc32 	bl	800d752 <unlock_fs>
 800feee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3740      	adds	r7, #64	; 0x40
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b086      	sub	sp, #24
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d101      	bne.n	800ff0e <f_opendir+0x14>
 800ff0a:	2309      	movs	r3, #9
 800ff0c:	e06a      	b.n	800ffe4 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ff12:	f107 010c 	add.w	r1, r7, #12
 800ff16:	463b      	mov	r3, r7
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe fea8 	bl	800ec70 <find_volume>
 800ff20:	4603      	mov	r3, r0
 800ff22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff24:	7dfb      	ldrb	r3, [r7, #23]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d14f      	bne.n	800ffca <f_opendir+0xd0>
		obj->fs = fs;
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fe fd8f 	bl	800ea58 <follow_path>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d13d      	bne.n	800ffc0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff4a:	b25b      	sxtb	r3, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	db12      	blt.n	800ff76 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	799b      	ldrb	r3, [r3, #6]
 800ff54:	f003 0310 	and.w	r3, r3, #16
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00a      	beq.n	800ff72 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	4619      	mov	r1, r3
 800ff64:	4610      	mov	r0, r2
 800ff66:	f7fe fabe 	bl	800e4e6 <ld_clust>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	609a      	str	r2, [r3, #8]
 800ff70:	e001      	b.n	800ff76 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ff72:	2305      	movs	r3, #5
 800ff74:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d121      	bne.n	800ffc0 <f_opendir+0xc6>
				obj->id = fs->id;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	88da      	ldrh	r2, [r3, #6]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ff84:	2100      	movs	r1, #0
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7fe f926 	bl	800e1d8 <dir_sdi>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ff90:	7dfb      	ldrb	r3, [r7, #23]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d114      	bne.n	800ffc0 <f_opendir+0xc6>
					if (obj->sclust) {
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00d      	beq.n	800ffba <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7fd fc6f 	bl	800d884 <inc_lock>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d105      	bne.n	800ffc0 <f_opendir+0xc6>
 800ffb4:	2312      	movs	r3, #18
 800ffb6:	75fb      	strb	r3, [r7, #23]
 800ffb8:	e002      	b.n	800ffc0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ffc0:	7dfb      	ldrb	r3, [r7, #23]
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	d101      	bne.n	800ffca <f_opendir+0xd0>
 800ffc6:	2305      	movs	r3, #5
 800ffc8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d002      	beq.n	800ffd6 <f_opendir+0xdc>
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	7dfa      	ldrb	r2, [r7, #23]
 800ffda:	4611      	mov	r1, r2
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fd fbb8 	bl	800d752 <unlock_fs>
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3718      	adds	r7, #24
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f107 0208 	add.w	r2, r7, #8
 800fffa:	4611      	mov	r1, r2
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff f88b 	bl	800f118 <validate>
 8010002:	4603      	mov	r3, r0
 8010004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010006:	7bfb      	ldrb	r3, [r7, #15]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d115      	bne.n	8010038 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d006      	beq.n	8010022 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	4618      	mov	r0, r3
 801001a:	f7fd fcc1 	bl	800d9a0 <dec_lock>
 801001e:	4603      	mov	r3, r0
 8010020:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010022:	7bfb      	ldrb	r3, [r7, #15]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d102      	bne.n	801002e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2100      	movs	r1, #0
 8010032:	4618      	mov	r0, r3
 8010034:	f7fd fb8d 	bl	800d752 <unlock_fs>
#endif
	}
	return res;
 8010038:	7bfb      	ldrb	r3, [r7, #15]
}
 801003a:	4618      	mov	r0, r3
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b084      	sub	sp, #16
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f107 0208 	add.w	r2, r7, #8
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7ff f85f 	bl	800f118 <validate>
 801005a:	4603      	mov	r3, r0
 801005c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801005e:	7bfb      	ldrb	r3, [r7, #15]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d126      	bne.n	80100b2 <f_readdir+0x70>
		if (!fno) {
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d106      	bne.n	8010078 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801006a:	2100      	movs	r1, #0
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7fe f8b3 	bl	800e1d8 <dir_sdi>
 8010072:	4603      	mov	r3, r0
 8010074:	73fb      	strb	r3, [r7, #15]
 8010076:	e01c      	b.n	80100b2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010078:	2100      	movs	r1, #0
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7fe fa72 	bl	800e564 <dir_read>
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	2b04      	cmp	r3, #4
 8010088:	d101      	bne.n	801008e <f_readdir+0x4c>
 801008a:	2300      	movs	r3, #0
 801008c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801008e:	7bfb      	ldrb	r3, [r7, #15]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10e      	bne.n	80100b2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7fe fb48 	bl	800e72c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801009c:	2100      	movs	r1, #0
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f7fe f915 	bl	800e2ce <dir_next>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	2b04      	cmp	r3, #4
 80100ac:	d101      	bne.n	80100b2 <f_readdir+0x70>
 80100ae:	2300      	movs	r3, #0
 80100b0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	7bfa      	ldrb	r2, [r7, #15]
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fd fb4a 	bl	800d752 <unlock_fs>
 80100be:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff ffb4 	bl	8010042 <f_readdir>
 80100da:	4603      	mov	r3, r0
 80100dc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80100de:	7bfb      	ldrb	r3, [r7, #15]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d114      	bne.n	801010e <f_findnext+0x46>
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d011      	beq.n	801010e <f_findnext+0x46>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	7a5b      	ldrb	r3, [r3, #9]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00d      	beq.n	801010e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f103 0109 	add.w	r1, r3, #9
 80100fc:	2300      	movs	r3, #0
 80100fe:	2200      	movs	r2, #0
 8010100:	f7fe fb9a 	bl	800e838 <pattern_matching>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d100      	bne.n	801010c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801010a:	e7e2      	b.n	80100d2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801010c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801010e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	683a      	ldr	r2, [r7, #0]
 801012a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f7ff fee3 	bl	800fefa <f_opendir>
 8010134:	4603      	mov	r3, r0
 8010136:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010138:	7dfb      	ldrb	r3, [r7, #23]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d105      	bne.n	801014a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff ffc1 	bl	80100c8 <f_findnext>
 8010146:	4603      	mov	r3, r0
 8010148:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801014a:	7dfb      	ldrb	r3, [r7, #23]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010154:	b480      	push	{r7}
 8010156:	b087      	sub	sp, #28
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	4613      	mov	r3, r2
 8010160:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010162:	2301      	movs	r3, #1
 8010164:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801016a:	4b1f      	ldr	r3, [pc, #124]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 801016c:	7a5b      	ldrb	r3, [r3, #9]
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b00      	cmp	r3, #0
 8010172:	d131      	bne.n	80101d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010174:	4b1c      	ldr	r3, [pc, #112]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 8010176:	7a5b      	ldrb	r3, [r3, #9]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	461a      	mov	r2, r3
 801017c:	4b1a      	ldr	r3, [pc, #104]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 801017e:	2100      	movs	r1, #0
 8010180:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010182:	4b19      	ldr	r3, [pc, #100]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 8010184:	7a5b      	ldrb	r3, [r3, #9]
 8010186:	b2db      	uxtb	r3, r3
 8010188:	4a17      	ldr	r2, [pc, #92]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010192:	4b15      	ldr	r3, [pc, #84]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 8010194:	7a5b      	ldrb	r3, [r3, #9]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	461a      	mov	r2, r3
 801019a:	4b13      	ldr	r3, [pc, #76]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 801019c:	4413      	add	r3, r2
 801019e:	79fa      	ldrb	r2, [r7, #7]
 80101a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80101a2:	4b11      	ldr	r3, [pc, #68]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 80101a4:	7a5b      	ldrb	r3, [r3, #9]
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	1c5a      	adds	r2, r3, #1
 80101aa:	b2d1      	uxtb	r1, r2
 80101ac:	4a0e      	ldr	r2, [pc, #56]	; (80101e8 <FATFS_LinkDriverEx+0x94>)
 80101ae:	7251      	strb	r1, [r2, #9]
 80101b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80101b2:	7dbb      	ldrb	r3, [r7, #22]
 80101b4:	3330      	adds	r3, #48	; 0x30
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	3301      	adds	r3, #1
 80101c0:	223a      	movs	r2, #58	; 0x3a
 80101c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	3302      	adds	r3, #2
 80101c8:	222f      	movs	r2, #47	; 0x2f
 80101ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	3303      	adds	r3, #3
 80101d0:	2200      	movs	r2, #0
 80101d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80101d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	200002fc 	.word	0x200002fc

080101ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80101f6:	2200      	movs	r2, #0
 80101f8:	6839      	ldr	r1, [r7, #0]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff ffaa 	bl	8010154 <FATFS_LinkDriverEx>
 8010200:	4603      	mov	r3, r0
}
 8010202:	4618      	mov	r0, r3
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	4603      	mov	r3, r0
 8010212:	6039      	str	r1, [r7, #0]
 8010214:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010216:	2200      	movs	r2, #0
 8010218:	2101      	movs	r1, #1
 801021a:	2001      	movs	r0, #1
 801021c:	f000 fb8e 	bl	801093c <osSemaphoreNew>
 8010220:	4602      	mov	r2, r0
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	bf14      	ite	ne
 801022e:	2301      	movne	r3, #1
 8010230:	2300      	moveq	r3, #0
 8010232:	b2db      	uxtb	r3, r3
 8010234:	60fb      	str	r3, [r7, #12]

    return ret;
 8010236:	68fb      	ldr	r3, [r7, #12]
}
 8010238:	4618      	mov	r0, r3
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 fcd3 	bl	8010bf4 <osSemaphoreDelete>
#endif
    return 1;
 801024e:	2301      	movs	r3, #1
}
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fc05 	bl	8010a78 <osSemaphoreAcquire>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010274:	2301      	movs	r3, #1
 8010276:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010278:	68fb      	ldr	r3, [r7, #12]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b082      	sub	sp, #8
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fc5a 	bl	8010b44 <osSemaphoreRelease>
#endif
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801029c:	bf00      	nop
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
	...

080102a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ae:	f3ef 8305 	mrs	r3, IPSR
 80102b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80102b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10f      	bne.n	80102da <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102ba:	f3ef 8310 	mrs	r3, PRIMASK
 80102be:	607b      	str	r3, [r7, #4]
  return(result);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d105      	bne.n	80102d2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102c6:	f3ef 8311 	mrs	r3, BASEPRI
 80102ca:	603b      	str	r3, [r7, #0]
  return(result);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d007      	beq.n	80102e2 <osKernelInitialize+0x3a>
 80102d2:	4b0e      	ldr	r3, [pc, #56]	; (801030c <osKernelInitialize+0x64>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d103      	bne.n	80102e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80102da:	f06f 0305 	mvn.w	r3, #5
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	e00c      	b.n	80102fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102e2:	4b0a      	ldr	r3, [pc, #40]	; (801030c <osKernelInitialize+0x64>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80102ea:	4b08      	ldr	r3, [pc, #32]	; (801030c <osKernelInitialize+0x64>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e002      	b.n	80102fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80102f6:	f04f 33ff 	mov.w	r3, #4294967295
 80102fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80102fc:	68fb      	ldr	r3, [r7, #12]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3714      	adds	r7, #20
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr
 801030a:	bf00      	nop
 801030c:	20000308 	.word	0x20000308

08010310 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010316:	f002 fec5 	bl	80130a4 <xTaskGetSchedulerState>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <osKernelGetState+0x1a>
 8010320:	2b02      	cmp	r3, #2
 8010322:	d105      	bne.n	8010330 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8010324:	2302      	movs	r3, #2
 8010326:	607b      	str	r3, [r7, #4]
      break;
 8010328:	e00c      	b.n	8010344 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801032a:	2303      	movs	r3, #3
 801032c:	607b      	str	r3, [r7, #4]
      break;
 801032e:	e009      	b.n	8010344 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010330:	4b07      	ldr	r3, [pc, #28]	; (8010350 <osKernelGetState+0x40>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d102      	bne.n	801033e <osKernelGetState+0x2e>
        state = osKernelReady;
 8010338:	2301      	movs	r3, #1
 801033a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801033c:	e001      	b.n	8010342 <osKernelGetState+0x32>
        state = osKernelInactive;
 801033e:	2300      	movs	r3, #0
 8010340:	607b      	str	r3, [r7, #4]
      break;
 8010342:	bf00      	nop
  }

  return (state);
 8010344:	687b      	ldr	r3, [r7, #4]
}
 8010346:	4618      	mov	r0, r3
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	20000308 	.word	0x20000308

08010354 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801035a:	f3ef 8305 	mrs	r3, IPSR
 801035e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010360:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010362:	2b00      	cmp	r3, #0
 8010364:	d10f      	bne.n	8010386 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010366:	f3ef 8310 	mrs	r3, PRIMASK
 801036a:	607b      	str	r3, [r7, #4]
  return(result);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d105      	bne.n	801037e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010372:	f3ef 8311 	mrs	r3, BASEPRI
 8010376:	603b      	str	r3, [r7, #0]
  return(result);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d007      	beq.n	801038e <osKernelStart+0x3a>
 801037e:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <osKernelStart+0x68>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2b02      	cmp	r3, #2
 8010384:	d103      	bne.n	801038e <osKernelStart+0x3a>
    stat = osErrorISR;
 8010386:	f06f 0305 	mvn.w	r3, #5
 801038a:	60fb      	str	r3, [r7, #12]
 801038c:	e010      	b.n	80103b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801038e:	4b0b      	ldr	r3, [pc, #44]	; (80103bc <osKernelStart+0x68>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d109      	bne.n	80103aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010396:	f7ff ff7f 	bl	8010298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801039a:	4b08      	ldr	r3, [pc, #32]	; (80103bc <osKernelStart+0x68>)
 801039c:	2202      	movs	r2, #2
 801039e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80103a0:	f002 fa12 	bl	80127c8 <vTaskStartScheduler>
      stat = osOK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e002      	b.n	80103b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80103aa:	f04f 33ff 	mov.w	r3, #4294967295
 80103ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80103b0:	68fb      	ldr	r3, [r7, #12]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	20000308 	.word	0x20000308

080103c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103c6:	f3ef 8305 	mrs	r3, IPSR
 80103ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80103cc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d10f      	bne.n	80103f2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d2:	f3ef 8310 	mrs	r3, PRIMASK
 80103d6:	607b      	str	r3, [r7, #4]
  return(result);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d105      	bne.n	80103ea <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103de:	f3ef 8311 	mrs	r3, BASEPRI
 80103e2:	603b      	str	r3, [r7, #0]
  return(result);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d007      	beq.n	80103fa <osKernelGetTickCount+0x3a>
 80103ea:	4b08      	ldr	r3, [pc, #32]	; (801040c <osKernelGetTickCount+0x4c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	d103      	bne.n	80103fa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80103f2:	f002 fb0d 	bl	8012a10 <xTaskGetTickCountFromISR>
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	e002      	b.n	8010400 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80103fa:	f002 faf9 	bl	80129f0 <xTaskGetTickCount>
 80103fe:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8010400:	68fb      	ldr	r3, [r7, #12]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	20000308 	.word	0x20000308

08010410 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8010410:	b480      	push	{r7}
 8010412:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8010414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8010418:	4618      	mov	r0, r3
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
	...

08010424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010424:	b580      	push	{r7, lr}
 8010426:	b090      	sub	sp, #64	; 0x40
 8010428:	af04      	add	r7, sp, #16
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010430:	2300      	movs	r3, #0
 8010432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010434:	f3ef 8305 	mrs	r3, IPSR
 8010438:	61fb      	str	r3, [r7, #28]
  return(result);
 801043a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801043c:	2b00      	cmp	r3, #0
 801043e:	f040 808f 	bne.w	8010560 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010442:	f3ef 8310 	mrs	r3, PRIMASK
 8010446:	61bb      	str	r3, [r7, #24]
  return(result);
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801044e:	f3ef 8311 	mrs	r3, BASEPRI
 8010452:	617b      	str	r3, [r7, #20]
  return(result);
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <osThreadNew+0x3e>
 801045a:	4b44      	ldr	r3, [pc, #272]	; (801056c <osThreadNew+0x148>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b02      	cmp	r3, #2
 8010460:	d07e      	beq.n	8010560 <osThreadNew+0x13c>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d07b      	beq.n	8010560 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010468:	2380      	movs	r3, #128	; 0x80
 801046a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801046c:	2318      	movs	r3, #24
 801046e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010470:	2300      	movs	r3, #0
 8010472:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010474:	f04f 33ff 	mov.w	r3, #4294967295
 8010478:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d045      	beq.n	801050c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d002      	beq.n	801048e <osThreadNew+0x6a>
        name = attr->name;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d002      	beq.n	801049c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d008      	beq.n	80104b4 <osThreadNew+0x90>
 80104a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a4:	2b38      	cmp	r3, #56	; 0x38
 80104a6:	d805      	bhi.n	80104b4 <osThreadNew+0x90>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	f003 0301 	and.w	r3, r3, #1
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <osThreadNew+0x94>
        return (NULL);
 80104b4:	2300      	movs	r3, #0
 80104b6:	e054      	b.n	8010562 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d003      	beq.n	80104c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	695b      	ldr	r3, [r3, #20]
 80104c4:	089b      	lsrs	r3, r3, #2
 80104c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00e      	beq.n	80104ee <osThreadNew+0xca>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	2b5b      	cmp	r3, #91	; 0x5b
 80104d6:	d90a      	bls.n	80104ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d006      	beq.n	80104ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	695b      	ldr	r3, [r3, #20]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <osThreadNew+0xca>
        mem = 1;
 80104e8:	2301      	movs	r3, #1
 80104ea:	623b      	str	r3, [r7, #32]
 80104ec:	e010      	b.n	8010510 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10c      	bne.n	8010510 <osThreadNew+0xec>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d108      	bne.n	8010510 <osThreadNew+0xec>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d104      	bne.n	8010510 <osThreadNew+0xec>
          mem = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	623b      	str	r3, [r7, #32]
 801050a:	e001      	b.n	8010510 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801050c:	2300      	movs	r3, #0
 801050e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d110      	bne.n	8010538 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801051e:	9202      	str	r2, [sp, #8]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801052a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801052c:	68f8      	ldr	r0, [r7, #12]
 801052e:	f001 feef 	bl	8012310 <xTaskCreateStatic>
 8010532:	4603      	mov	r3, r0
 8010534:	613b      	str	r3, [r7, #16]
 8010536:	e013      	b.n	8010560 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010538:	6a3b      	ldr	r3, [r7, #32]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d110      	bne.n	8010560 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801053e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010540:	b29a      	uxth	r2, r3
 8010542:	f107 0310 	add.w	r3, r7, #16
 8010546:	9301      	str	r3, [sp, #4]
 8010548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f001 ff3d 	bl	80123d0 <xTaskCreate>
 8010556:	4603      	mov	r3, r0
 8010558:	2b01      	cmp	r3, #1
 801055a:	d001      	beq.n	8010560 <osThreadNew+0x13c>
          hTask = NULL;
 801055c:	2300      	movs	r3, #0
 801055e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010560:	693b      	ldr	r3, [r7, #16]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3730      	adds	r7, #48	; 0x30
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	20000308 	.word	0x20000308

08010570 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010578:	f3ef 8305 	mrs	r3, IPSR
 801057c:	613b      	str	r3, [r7, #16]
  return(result);
 801057e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10f      	bne.n	80105a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010584:	f3ef 8310 	mrs	r3, PRIMASK
 8010588:	60fb      	str	r3, [r7, #12]
  return(result);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d105      	bne.n	801059c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010590:	f3ef 8311 	mrs	r3, BASEPRI
 8010594:	60bb      	str	r3, [r7, #8]
  return(result);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d007      	beq.n	80105ac <osDelay+0x3c>
 801059c:	4b0a      	ldr	r3, [pc, #40]	; (80105c8 <osDelay+0x58>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d103      	bne.n	80105ac <osDelay+0x3c>
    stat = osErrorISR;
 80105a4:	f06f 0305 	mvn.w	r3, #5
 80105a8:	617b      	str	r3, [r7, #20]
 80105aa:	e007      	b.n	80105bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f002 f8d0 	bl	801275c <vTaskDelay>
    }
  }

  return (stat);
 80105bc:	697b      	ldr	r3, [r7, #20]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3718      	adds	r7, #24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	20000308 	.word	0x20000308

080105cc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b088      	sub	sp, #32
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105d4:	f3ef 8305 	mrs	r3, IPSR
 80105d8:	617b      	str	r3, [r7, #20]
  return(result);
 80105da:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10f      	bne.n	8010600 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105e0:	f3ef 8310 	mrs	r3, PRIMASK
 80105e4:	613b      	str	r3, [r7, #16]
  return(result);
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d105      	bne.n	80105f8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105ec:	f3ef 8311 	mrs	r3, BASEPRI
 80105f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d007      	beq.n	8010608 <osDelayUntil+0x3c>
 80105f8:	4b13      	ldr	r3, [pc, #76]	; (8010648 <osDelayUntil+0x7c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d103      	bne.n	8010608 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8010600:	f06f 0305 	mvn.w	r3, #5
 8010604:	61fb      	str	r3, [r7, #28]
 8010606:	e019      	b.n	801063c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8010608:	2300      	movs	r3, #0
 801060a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 801060c:	f002 f9f0 	bl	80129f0 <xTaskGetTickCount>
 8010610:	4603      	mov	r3, r0
 8010612:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d009      	beq.n	8010636 <osDelayUntil+0x6a>
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2b00      	cmp	r3, #0
 8010626:	db06      	blt.n	8010636 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8010628:	f107 0308 	add.w	r3, r7, #8
 801062c:	69b9      	ldr	r1, [r7, #24]
 801062e:	4618      	mov	r0, r3
 8010630:	f002 f814 	bl	801265c <vTaskDelayUntil>
 8010634:	e002      	b.n	801063c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8010636:	f06f 0303 	mvn.w	r3, #3
 801063a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801063c:	69fb      	ldr	r3, [r7, #28]
}
 801063e:	4618      	mov	r0, r3
 8010640:	3720      	adds	r7, #32
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	20000308 	.word	0x20000308

0801064c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801064c:	b580      	push	{r7, lr}
 801064e:	b08a      	sub	sp, #40	; 0x28
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010658:	f3ef 8305 	mrs	r3, IPSR
 801065c:	613b      	str	r3, [r7, #16]
  return(result);
 801065e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010660:	2b00      	cmp	r3, #0
 8010662:	f040 8085 	bne.w	8010770 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010666:	f3ef 8310 	mrs	r3, PRIMASK
 801066a:	60fb      	str	r3, [r7, #12]
  return(result);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d105      	bne.n	801067e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010672:	f3ef 8311 	mrs	r3, BASEPRI
 8010676:	60bb      	str	r3, [r7, #8]
  return(result);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d003      	beq.n	8010686 <osMutexNew+0x3a>
 801067e:	4b3f      	ldr	r3, [pc, #252]	; (801077c <osMutexNew+0x130>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b02      	cmp	r3, #2
 8010684:	d074      	beq.n	8010770 <osMutexNew+0x124>
    if (attr != NULL) {
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <osMutexNew+0x48>
      type = attr->attr_bits;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	623b      	str	r3, [r7, #32]
 8010692:	e001      	b.n	8010698 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010694:	2300      	movs	r3, #0
 8010696:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010698:	6a3b      	ldr	r3, [r7, #32]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d002      	beq.n	80106a8 <osMutexNew+0x5c>
      rmtx = 1U;
 80106a2:	2301      	movs	r3, #1
 80106a4:	61fb      	str	r3, [r7, #28]
 80106a6:	e001      	b.n	80106ac <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80106a8:	2300      	movs	r3, #0
 80106aa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	f003 0308 	and.w	r3, r3, #8
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d15c      	bne.n	8010770 <osMutexNew+0x124>
      mem = -1;
 80106b6:	f04f 33ff 	mov.w	r3, #4294967295
 80106ba:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d015      	beq.n	80106ee <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d006      	beq.n	80106d8 <osMutexNew+0x8c>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	2b4f      	cmp	r3, #79	; 0x4f
 80106d0:	d902      	bls.n	80106d8 <osMutexNew+0x8c>
          mem = 1;
 80106d2:	2301      	movs	r3, #1
 80106d4:	61bb      	str	r3, [r7, #24]
 80106d6:	e00c      	b.n	80106f2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d108      	bne.n	80106f2 <osMutexNew+0xa6>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d104      	bne.n	80106f2 <osMutexNew+0xa6>
            mem = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	61bb      	str	r3, [r7, #24]
 80106ec:	e001      	b.n	80106f2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d112      	bne.n	801071e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d007      	beq.n	801070e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	4619      	mov	r1, r3
 8010704:	2004      	movs	r0, #4
 8010706:	f000 fe7c 	bl	8011402 <xQueueCreateMutexStatic>
 801070a:	6278      	str	r0, [r7, #36]	; 0x24
 801070c:	e016      	b.n	801073c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	4619      	mov	r1, r3
 8010714:	2001      	movs	r0, #1
 8010716:	f000 fe74 	bl	8011402 <xQueueCreateMutexStatic>
 801071a:	6278      	str	r0, [r7, #36]	; 0x24
 801071c:	e00e      	b.n	801073c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10b      	bne.n	801073c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d004      	beq.n	8010734 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801072a:	2004      	movs	r0, #4
 801072c:	f000 fe51 	bl	80113d2 <xQueueCreateMutex>
 8010730:	6278      	str	r0, [r7, #36]	; 0x24
 8010732:	e003      	b.n	801073c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010734:	2001      	movs	r0, #1
 8010736:	f000 fe4c 	bl	80113d2 <xQueueCreateMutex>
 801073a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00c      	beq.n	801075c <osMutexNew+0x110>
        if (attr != NULL) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d003      	beq.n	8010750 <osMutexNew+0x104>
          name = attr->name;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	617b      	str	r3, [r7, #20]
 801074e:	e001      	b.n	8010754 <osMutexNew+0x108>
        } else {
          name = NULL;
 8010750:	2300      	movs	r3, #0
 8010752:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010754:	6979      	ldr	r1, [r7, #20]
 8010756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010758:	f001 fd54 	bl	8012204 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075e:	2b00      	cmp	r3, #0
 8010760:	d006      	beq.n	8010770 <osMutexNew+0x124>
 8010762:	69fb      	ldr	r3, [r7, #28]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d003      	beq.n	8010770 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	f043 0301 	orr.w	r3, r3, #1
 801076e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010772:	4618      	mov	r0, r3
 8010774:	3728      	adds	r7, #40	; 0x28
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	20000308 	.word	0x20000308

08010780 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f023 0301 	bic.w	r3, r3, #1
 8010790:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801079a:	2300      	movs	r3, #0
 801079c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801079e:	f3ef 8305 	mrs	r3, IPSR
 80107a2:	613b      	str	r3, [r7, #16]
  return(result);
 80107a4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10f      	bne.n	80107ca <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107aa:	f3ef 8310 	mrs	r3, PRIMASK
 80107ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d105      	bne.n	80107c2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107b6:	f3ef 8311 	mrs	r3, BASEPRI
 80107ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d007      	beq.n	80107d2 <osMutexAcquire+0x52>
 80107c2:	4b1d      	ldr	r3, [pc, #116]	; (8010838 <osMutexAcquire+0xb8>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	d103      	bne.n	80107d2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80107ca:	f06f 0305 	mvn.w	r3, #5
 80107ce:	61fb      	str	r3, [r7, #28]
 80107d0:	e02c      	b.n	801082c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d103      	bne.n	80107e0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80107d8:	f06f 0303 	mvn.w	r3, #3
 80107dc:	61fb      	str	r3, [r7, #28]
 80107de:	e025      	b.n	801082c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d011      	beq.n	801080a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80107e6:	6839      	ldr	r1, [r7, #0]
 80107e8:	69b8      	ldr	r0, [r7, #24]
 80107ea:	f000 fe73 	bl	80114d4 <xQueueTakeMutexRecursive>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d01b      	beq.n	801082c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80107fa:	f06f 0301 	mvn.w	r3, #1
 80107fe:	61fb      	str	r3, [r7, #28]
 8010800:	e014      	b.n	801082c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010802:	f06f 0302 	mvn.w	r3, #2
 8010806:	61fb      	str	r3, [r7, #28]
 8010808:	e010      	b.n	801082c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801080a:	6839      	ldr	r1, [r7, #0]
 801080c:	69b8      	ldr	r0, [r7, #24]
 801080e:	f001 fa19 	bl	8011c44 <xQueueSemaphoreTake>
 8010812:	4603      	mov	r3, r0
 8010814:	2b01      	cmp	r3, #1
 8010816:	d009      	beq.n	801082c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d003      	beq.n	8010826 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801081e:	f06f 0301 	mvn.w	r3, #1
 8010822:	61fb      	str	r3, [r7, #28]
 8010824:	e002      	b.n	801082c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010826:	f06f 0302 	mvn.w	r3, #2
 801082a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801082c:	69fb      	ldr	r3, [r7, #28]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3720      	adds	r7, #32
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	20000308 	.word	0x20000308

0801083c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801083c:	b580      	push	{r7, lr}
 801083e:	b088      	sub	sp, #32
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f023 0301 	bic.w	r3, r3, #1
 801084a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010854:	2300      	movs	r3, #0
 8010856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010858:	f3ef 8305 	mrs	r3, IPSR
 801085c:	613b      	str	r3, [r7, #16]
  return(result);
 801085e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10f      	bne.n	8010884 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010864:	f3ef 8310 	mrs	r3, PRIMASK
 8010868:	60fb      	str	r3, [r7, #12]
  return(result);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010870:	f3ef 8311 	mrs	r3, BASEPRI
 8010874:	60bb      	str	r3, [r7, #8]
  return(result);
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d007      	beq.n	801088c <osMutexRelease+0x50>
 801087c:	4b16      	ldr	r3, [pc, #88]	; (80108d8 <osMutexRelease+0x9c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b02      	cmp	r3, #2
 8010882:	d103      	bne.n	801088c <osMutexRelease+0x50>
    stat = osErrorISR;
 8010884:	f06f 0305 	mvn.w	r3, #5
 8010888:	61fb      	str	r3, [r7, #28]
 801088a:	e01f      	b.n	80108cc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d103      	bne.n	801089a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010892:	f06f 0303 	mvn.w	r3, #3
 8010896:	61fb      	str	r3, [r7, #28]
 8010898:	e018      	b.n	80108cc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d009      	beq.n	80108b4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80108a0:	69b8      	ldr	r0, [r7, #24]
 80108a2:	f000 fde2 	bl	801146a <xQueueGiveMutexRecursive>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d00f      	beq.n	80108cc <osMutexRelease+0x90>
        stat = osErrorResource;
 80108ac:	f06f 0302 	mvn.w	r3, #2
 80108b0:	61fb      	str	r3, [r7, #28]
 80108b2:	e00b      	b.n	80108cc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80108b4:	2300      	movs	r3, #0
 80108b6:	2200      	movs	r2, #0
 80108b8:	2100      	movs	r1, #0
 80108ba:	69b8      	ldr	r0, [r7, #24]
 80108bc:	f000 feb0 	bl	8011620 <xQueueGenericSend>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d002      	beq.n	80108cc <osMutexRelease+0x90>
        stat = osErrorResource;
 80108c6:	f06f 0302 	mvn.w	r3, #2
 80108ca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80108cc:	69fb      	ldr	r3, [r7, #28]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3720      	adds	r7, #32
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20000308 	.word	0x20000308

080108dc <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f023 0301 	bic.w	r3, r3, #1
 80108ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ec:	f3ef 8305 	mrs	r3, IPSR
 80108f0:	617b      	str	r3, [r7, #20]
  return(result);
 80108f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d112      	bne.n	801091e <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108f8:	f3ef 8310 	mrs	r3, PRIMASK
 80108fc:	613b      	str	r3, [r7, #16]
  return(result);
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d105      	bne.n	8010910 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010904:	f3ef 8311 	mrs	r3, BASEPRI
 8010908:	60fb      	str	r3, [r7, #12]
  return(result);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d003      	beq.n	8010918 <osMutexGetOwner+0x3c>
 8010910:	4b09      	ldr	r3, [pc, #36]	; (8010938 <osMutexGetOwner+0x5c>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b02      	cmp	r3, #2
 8010916:	d002      	beq.n	801091e <osMutexGetOwner+0x42>
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d102      	bne.n	8010924 <osMutexGetOwner+0x48>
    owner = NULL;
 801091e:	2300      	movs	r3, #0
 8010920:	61fb      	str	r3, [r7, #28]
 8010922:	e003      	b.n	801092c <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8010924:	69b8      	ldr	r0, [r7, #24]
 8010926:	f000 fd87 	bl	8011438 <xQueueGetMutexHolder>
 801092a:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 801092c:	69fb      	ldr	r3, [r7, #28]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3720      	adds	r7, #32
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20000308 	.word	0x20000308

0801093c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801093c:	b580      	push	{r7, lr}
 801093e:	b08c      	sub	sp, #48	; 0x30
 8010940:	af02      	add	r7, sp, #8
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010948:	2300      	movs	r3, #0
 801094a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801094c:	f3ef 8305 	mrs	r3, IPSR
 8010950:	61bb      	str	r3, [r7, #24]
  return(result);
 8010952:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010954:	2b00      	cmp	r3, #0
 8010956:	f040 8087 	bne.w	8010a68 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801095a:	f3ef 8310 	mrs	r3, PRIMASK
 801095e:	617b      	str	r3, [r7, #20]
  return(result);
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d105      	bne.n	8010972 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010966:	f3ef 8311 	mrs	r3, BASEPRI
 801096a:	613b      	str	r3, [r7, #16]
  return(result);
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d003      	beq.n	801097a <osSemaphoreNew+0x3e>
 8010972:	4b40      	ldr	r3, [pc, #256]	; (8010a74 <osSemaphoreNew+0x138>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b02      	cmp	r3, #2
 8010978:	d076      	beq.n	8010a68 <osSemaphoreNew+0x12c>
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d073      	beq.n	8010a68 <osSemaphoreNew+0x12c>
 8010980:	68ba      	ldr	r2, [r7, #8]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	429a      	cmp	r2, r3
 8010986:	d86f      	bhi.n	8010a68 <osSemaphoreNew+0x12c>
    mem = -1;
 8010988:	f04f 33ff 	mov.w	r3, #4294967295
 801098c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d015      	beq.n	80109c0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d006      	beq.n	80109aa <osSemaphoreNew+0x6e>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	2b4f      	cmp	r3, #79	; 0x4f
 80109a2:	d902      	bls.n	80109aa <osSemaphoreNew+0x6e>
        mem = 1;
 80109a4:	2301      	movs	r3, #1
 80109a6:	623b      	str	r3, [r7, #32]
 80109a8:	e00c      	b.n	80109c4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d108      	bne.n	80109c4 <osSemaphoreNew+0x88>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d104      	bne.n	80109c4 <osSemaphoreNew+0x88>
          mem = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	623b      	str	r3, [r7, #32]
 80109be:	e001      	b.n	80109c4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80109c0:	2300      	movs	r3, #0
 80109c2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ca:	d04d      	beq.n	8010a68 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d129      	bne.n	8010a26 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80109d2:	6a3b      	ldr	r3, [r7, #32]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d10b      	bne.n	80109f0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	689a      	ldr	r2, [r3, #8]
 80109dc:	2303      	movs	r3, #3
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	4613      	mov	r3, r2
 80109e2:	2200      	movs	r2, #0
 80109e4:	2100      	movs	r1, #0
 80109e6:	2001      	movs	r0, #1
 80109e8:	f000 fbf8 	bl	80111dc <xQueueGenericCreateStatic>
 80109ec:	6278      	str	r0, [r7, #36]	; 0x24
 80109ee:	e005      	b.n	80109fc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80109f0:	2203      	movs	r2, #3
 80109f2:	2100      	movs	r1, #0
 80109f4:	2001      	movs	r0, #1
 80109f6:	f000 fc6e 	bl	80112d6 <xQueueGenericCreate>
 80109fa:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d022      	beq.n	8010a48 <osSemaphoreNew+0x10c>
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d01f      	beq.n	8010a48 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010a08:	2300      	movs	r3, #0
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a10:	f000 fe06 	bl	8011620 <xQueueGenericSend>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d016      	beq.n	8010a48 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a1c:	f001 faa5 	bl	8011f6a <vQueueDelete>
            hSemaphore = NULL;
 8010a20:	2300      	movs	r3, #0
 8010a22:	627b      	str	r3, [r7, #36]	; 0x24
 8010a24:	e010      	b.n	8010a48 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d108      	bne.n	8010a3e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	461a      	mov	r2, r3
 8010a32:	68b9      	ldr	r1, [r7, #8]
 8010a34:	68f8      	ldr	r0, [r7, #12]
 8010a36:	f000 fd84 	bl	8011542 <xQueueCreateCountingSemaphoreStatic>
 8010a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8010a3c:	e004      	b.n	8010a48 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010a3e:	68b9      	ldr	r1, [r7, #8]
 8010a40:	68f8      	ldr	r0, [r7, #12]
 8010a42:	f000 fdb7 	bl	80115b4 <xQueueCreateCountingSemaphore>
 8010a46:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00c      	beq.n	8010a68 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d003      	beq.n	8010a5c <osSemaphoreNew+0x120>
          name = attr->name;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	61fb      	str	r3, [r7, #28]
 8010a5a:	e001      	b.n	8010a60 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010a60:	69f9      	ldr	r1, [r7, #28]
 8010a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a64:	f001 fbce 	bl	8012204 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3728      	adds	r7, #40	; 0x28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	20000308 	.word	0x20000308

08010a78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d103      	bne.n	8010a98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010a90:	f06f 0303 	mvn.w	r3, #3
 8010a94:	61fb      	str	r3, [r7, #28]
 8010a96:	e04b      	b.n	8010b30 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a98:	f3ef 8305 	mrs	r3, IPSR
 8010a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8010a9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10f      	bne.n	8010ac4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8010aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d105      	bne.n	8010abc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8010ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d026      	beq.n	8010b0a <osSemaphoreAcquire+0x92>
 8010abc:	4b1f      	ldr	r3, [pc, #124]	; (8010b3c <osSemaphoreAcquire+0xc4>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d122      	bne.n	8010b0a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d003      	beq.n	8010ad2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010aca:	f06f 0303 	mvn.w	r3, #3
 8010ace:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010ad0:	e02d      	b.n	8010b2e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010ad6:	f107 0308 	add.w	r3, r7, #8
 8010ada:	461a      	mov	r2, r3
 8010adc:	2100      	movs	r1, #0
 8010ade:	69b8      	ldr	r0, [r7, #24]
 8010ae0:	f001 f9c0 	bl	8011e64 <xQueueReceiveFromISR>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d003      	beq.n	8010af2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010aea:	f06f 0302 	mvn.w	r3, #2
 8010aee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010af0:	e01d      	b.n	8010b2e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d01a      	beq.n	8010b2e <osSemaphoreAcquire+0xb6>
 8010af8:	4b11      	ldr	r3, [pc, #68]	; (8010b40 <osSemaphoreAcquire+0xc8>)
 8010afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010afe:	601a      	str	r2, [r3, #0]
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010b08:	e011      	b.n	8010b2e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010b0a:	6839      	ldr	r1, [r7, #0]
 8010b0c:	69b8      	ldr	r0, [r7, #24]
 8010b0e:	f001 f899 	bl	8011c44 <xQueueSemaphoreTake>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d00b      	beq.n	8010b30 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010b1e:	f06f 0301 	mvn.w	r3, #1
 8010b22:	61fb      	str	r3, [r7, #28]
 8010b24:	e004      	b.n	8010b30 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010b26:	f06f 0302 	mvn.w	r3, #2
 8010b2a:	61fb      	str	r3, [r7, #28]
 8010b2c:	e000      	b.n	8010b30 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010b2e:	bf00      	nop
      }
    }
  }

  return (stat);
 8010b30:	69fb      	ldr	r3, [r7, #28]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	20000308 	.word	0x20000308
 8010b40:	e000ed04 	.word	0xe000ed04

08010b44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b088      	sub	sp, #32
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d103      	bne.n	8010b62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010b5a:	f06f 0303 	mvn.w	r3, #3
 8010b5e:	61fb      	str	r3, [r7, #28]
 8010b60:	e03e      	b.n	8010be0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b62:	f3ef 8305 	mrs	r3, IPSR
 8010b66:	617b      	str	r3, [r7, #20]
  return(result);
 8010b68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d10f      	bne.n	8010b8e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8010b72:	613b      	str	r3, [r7, #16]
  return(result);
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d105      	bne.n	8010b86 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8010b7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d01e      	beq.n	8010bc4 <osSemaphoreRelease+0x80>
 8010b86:	4b19      	ldr	r3, [pc, #100]	; (8010bec <osSemaphoreRelease+0xa8>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b02      	cmp	r3, #2
 8010b8c:	d11a      	bne.n	8010bc4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010b92:	f107 0308 	add.w	r3, r7, #8
 8010b96:	4619      	mov	r1, r3
 8010b98:	69b8      	ldr	r0, [r7, #24]
 8010b9a:	f000 fedf 	bl	801195c <xQueueGiveFromISR>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d003      	beq.n	8010bac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010ba4:	f06f 0302 	mvn.w	r3, #2
 8010ba8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010baa:	e018      	b.n	8010bde <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d015      	beq.n	8010bde <osSemaphoreRelease+0x9a>
 8010bb2:	4b0f      	ldr	r3, [pc, #60]	; (8010bf0 <osSemaphoreRelease+0xac>)
 8010bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010bc2:	e00c      	b.n	8010bde <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	2100      	movs	r1, #0
 8010bca:	69b8      	ldr	r0, [r7, #24]
 8010bcc:	f000 fd28 	bl	8011620 <xQueueGenericSend>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d004      	beq.n	8010be0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010bd6:	f06f 0302 	mvn.w	r3, #2
 8010bda:	61fb      	str	r3, [r7, #28]
 8010bdc:	e000      	b.n	8010be0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010bde:	bf00      	nop
    }
  }

  return (stat);
 8010be0:	69fb      	ldr	r3, [r7, #28]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3720      	adds	r7, #32
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	20000308 	.word	0x20000308
 8010bf0:	e000ed04 	.word	0xe000ed04

08010bf4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b088      	sub	sp, #32
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c00:	f3ef 8305 	mrs	r3, IPSR
 8010c04:	617b      	str	r3, [r7, #20]
  return(result);
 8010c06:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10f      	bne.n	8010c2c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c10:	613b      	str	r3, [r7, #16]
  return(result);
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d105      	bne.n	8010c24 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c18:	f3ef 8311 	mrs	r3, BASEPRI
 8010c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d007      	beq.n	8010c34 <osSemaphoreDelete+0x40>
 8010c24:	4b0d      	ldr	r3, [pc, #52]	; (8010c5c <osSemaphoreDelete+0x68>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b02      	cmp	r3, #2
 8010c2a:	d103      	bne.n	8010c34 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8010c2c:	f06f 0305 	mvn.w	r3, #5
 8010c30:	61fb      	str	r3, [r7, #28]
 8010c32:	e00e      	b.n	8010c52 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8010c3a:	f06f 0303 	mvn.w	r3, #3
 8010c3e:	61fb      	str	r3, [r7, #28]
 8010c40:	e007      	b.n	8010c52 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8010c42:	69b8      	ldr	r0, [r7, #24]
 8010c44:	f001 fb06 	bl	8012254 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8010c4c:	69b8      	ldr	r0, [r7, #24]
 8010c4e:	f001 f98c 	bl	8011f6a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8010c52:	69fb      	ldr	r3, [r7, #28]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3720      	adds	r7, #32
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	20000308 	.word	0x20000308

08010c60 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08c      	sub	sp, #48	; 0x30
 8010c64:	af02      	add	r7, sp, #8
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c70:	f3ef 8305 	mrs	r3, IPSR
 8010c74:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d170      	bne.n	8010d5e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c80:	617b      	str	r3, [r7, #20]
  return(result);
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d105      	bne.n	8010c94 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c88:	f3ef 8311 	mrs	r3, BASEPRI
 8010c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d003      	beq.n	8010c9c <osMessageQueueNew+0x3c>
 8010c94:	4b34      	ldr	r3, [pc, #208]	; (8010d68 <osMessageQueueNew+0x108>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	d060      	beq.n	8010d5e <osMessageQueueNew+0xfe>
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d05d      	beq.n	8010d5e <osMessageQueueNew+0xfe>
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d05a      	beq.n	8010d5e <osMessageQueueNew+0xfe>
    mem = -1;
 8010ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d029      	beq.n	8010d08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d012      	beq.n	8010ce2 <osMessageQueueNew+0x82>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	2b4f      	cmp	r3, #79	; 0x4f
 8010cc2:	d90e      	bls.n	8010ce2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00a      	beq.n	8010ce2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695a      	ldr	r2, [r3, #20]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	68b9      	ldr	r1, [r7, #8]
 8010cd4:	fb01 f303 	mul.w	r3, r1, r3
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d302      	bcc.n	8010ce2 <osMessageQueueNew+0x82>
        mem = 1;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	623b      	str	r3, [r7, #32]
 8010ce0:	e014      	b.n	8010d0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d110      	bne.n	8010d0c <osMessageQueueNew+0xac>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d10c      	bne.n	8010d0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d108      	bne.n	8010d0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	695b      	ldr	r3, [r3, #20]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d104      	bne.n	8010d0c <osMessageQueueNew+0xac>
          mem = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	623b      	str	r3, [r7, #32]
 8010d06:	e001      	b.n	8010d0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d10c      	bne.n	8010d2c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	691a      	ldr	r2, [r3, #16]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6899      	ldr	r1, [r3, #8]
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	9300      	str	r3, [sp, #0]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	68b9      	ldr	r1, [r7, #8]
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f000 fa5a 	bl	80111dc <xQueueGenericCreateStatic>
 8010d28:	6278      	str	r0, [r7, #36]	; 0x24
 8010d2a:	e008      	b.n	8010d3e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d105      	bne.n	8010d3e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010d32:	2200      	movs	r2, #0
 8010d34:	68b9      	ldr	r1, [r7, #8]
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f000 facd 	bl	80112d6 <xQueueGenericCreate>
 8010d3c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00c      	beq.n	8010d5e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d003      	beq.n	8010d52 <osMessageQueueNew+0xf2>
        name = attr->name;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	61fb      	str	r3, [r7, #28]
 8010d50:	e001      	b.n	8010d56 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010d52:	2300      	movs	r3, #0
 8010d54:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010d56:	69f9      	ldr	r1, [r7, #28]
 8010d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d5a:	f001 fa53 	bl	8012204 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3728      	adds	r7, #40	; 0x28
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20000308 	.word	0x20000308

08010d6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b08a      	sub	sp, #40	; 0x28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	4613      	mov	r3, r2
 8010d7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010d80:	2300      	movs	r3, #0
 8010d82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d84:	f3ef 8305 	mrs	r3, IPSR
 8010d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8010d8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d10f      	bne.n	8010db0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d90:	f3ef 8310 	mrs	r3, PRIMASK
 8010d94:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d105      	bne.n	8010da8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8010da0:	617b      	str	r3, [r7, #20]
  return(result);
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d02c      	beq.n	8010e02 <osMessageQueuePut+0x96>
 8010da8:	4b28      	ldr	r3, [pc, #160]	; (8010e4c <osMessageQueuePut+0xe0>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b02      	cmp	r3, #2
 8010dae:	d128      	bne.n	8010e02 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010db0:	6a3b      	ldr	r3, [r7, #32]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d005      	beq.n	8010dc2 <osMessageQueuePut+0x56>
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <osMessageQueuePut+0x56>
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d003      	beq.n	8010dca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010dc2:	f06f 0303 	mvn.w	r3, #3
 8010dc6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010dc8:	e039      	b.n	8010e3e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010dce:	f107 0210 	add.w	r2, r7, #16
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	68b9      	ldr	r1, [r7, #8]
 8010dd6:	6a38      	ldr	r0, [r7, #32]
 8010dd8:	f000 fd24 	bl	8011824 <xQueueGenericSendFromISR>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d003      	beq.n	8010dea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010de2:	f06f 0302 	mvn.w	r3, #2
 8010de6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010de8:	e029      	b.n	8010e3e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d026      	beq.n	8010e3e <osMessageQueuePut+0xd2>
 8010df0:	4b17      	ldr	r3, [pc, #92]	; (8010e50 <osMessageQueuePut+0xe4>)
 8010df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e00:	e01d      	b.n	8010e3e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010e02:	6a3b      	ldr	r3, [r7, #32]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <osMessageQueuePut+0xa2>
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d103      	bne.n	8010e16 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010e0e:	f06f 0303 	mvn.w	r3, #3
 8010e12:	627b      	str	r3, [r7, #36]	; 0x24
 8010e14:	e014      	b.n	8010e40 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010e16:	2300      	movs	r3, #0
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	6a38      	ldr	r0, [r7, #32]
 8010e1e:	f000 fbff 	bl	8011620 <xQueueGenericSend>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d00b      	beq.n	8010e40 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010e2e:	f06f 0301 	mvn.w	r3, #1
 8010e32:	627b      	str	r3, [r7, #36]	; 0x24
 8010e34:	e004      	b.n	8010e40 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010e36:	f06f 0302 	mvn.w	r3, #2
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e3c:	e000      	b.n	8010e40 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3728      	adds	r7, #40	; 0x28
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000308 	.word	0x20000308
 8010e50:	e000ed04 	.word	0xe000ed04

08010e54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b08a      	sub	sp, #40	; 0x28
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
 8010e60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010e66:	2300      	movs	r3, #0
 8010e68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e6a:	f3ef 8305 	mrs	r3, IPSR
 8010e6e:	61fb      	str	r3, [r7, #28]
  return(result);
 8010e70:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10f      	bne.n	8010e96 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e76:	f3ef 8310 	mrs	r3, PRIMASK
 8010e7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d105      	bne.n	8010e8e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e82:	f3ef 8311 	mrs	r3, BASEPRI
 8010e86:	617b      	str	r3, [r7, #20]
  return(result);
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d02c      	beq.n	8010ee8 <osMessageQueueGet+0x94>
 8010e8e:	4b28      	ldr	r3, [pc, #160]	; (8010f30 <osMessageQueueGet+0xdc>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d128      	bne.n	8010ee8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d005      	beq.n	8010ea8 <osMessageQueueGet+0x54>
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d002      	beq.n	8010ea8 <osMessageQueueGet+0x54>
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d003      	beq.n	8010eb0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010ea8:	f06f 0303 	mvn.w	r3, #3
 8010eac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010eae:	e038      	b.n	8010f22 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010eb4:	f107 0310 	add.w	r3, r7, #16
 8010eb8:	461a      	mov	r2, r3
 8010eba:	68b9      	ldr	r1, [r7, #8]
 8010ebc:	6a38      	ldr	r0, [r7, #32]
 8010ebe:	f000 ffd1 	bl	8011e64 <xQueueReceiveFromISR>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d003      	beq.n	8010ed0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010ec8:	f06f 0302 	mvn.w	r3, #2
 8010ecc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ece:	e028      	b.n	8010f22 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d025      	beq.n	8010f22 <osMessageQueueGet+0xce>
 8010ed6:	4b17      	ldr	r3, [pc, #92]	; (8010f34 <osMessageQueueGet+0xe0>)
 8010ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010edc:	601a      	str	r2, [r3, #0]
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ee6:	e01c      	b.n	8010f22 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010ee8:	6a3b      	ldr	r3, [r7, #32]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <osMessageQueueGet+0xa0>
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d103      	bne.n	8010efc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010ef4:	f06f 0303 	mvn.w	r3, #3
 8010ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8010efa:	e013      	b.n	8010f24 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	6a38      	ldr	r0, [r7, #32]
 8010f02:	f000 fdbd 	bl	8011a80 <xQueueReceive>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d00b      	beq.n	8010f24 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010f12:	f06f 0301 	mvn.w	r3, #1
 8010f16:	627b      	str	r3, [r7, #36]	; 0x24
 8010f18:	e004      	b.n	8010f24 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010f1a:	f06f 0302 	mvn.w	r3, #2
 8010f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f20:	e000      	b.n	8010f24 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3728      	adds	r7, #40	; 0x28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	20000308 	.word	0x20000308
 8010f34:	e000ed04 	.word	0xe000ed04

08010f38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010f38:	b480      	push	{r7}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	4a07      	ldr	r2, [pc, #28]	; (8010f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8010f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	4a06      	ldr	r2, [pc, #24]	; (8010f68 <vApplicationGetIdleTaskMemory+0x30>)
 8010f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2280      	movs	r2, #128	; 0x80
 8010f54:	601a      	str	r2, [r3, #0]
}
 8010f56:	bf00      	nop
 8010f58:	3714      	adds	r7, #20
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	2000030c 	.word	0x2000030c
 8010f68:	20000368 	.word	0x20000368

08010f6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010f6c:	b480      	push	{r7}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	4a07      	ldr	r2, [pc, #28]	; (8010f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8010f7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	4a06      	ldr	r2, [pc, #24]	; (8010f9c <vApplicationGetTimerTaskMemory+0x30>)
 8010f82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f8a:	601a      	str	r2, [r3, #0]
}
 8010f8c:	bf00      	nop
 8010f8e:	3714      	adds	r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr
 8010f98:	20000568 	.word	0x20000568
 8010f9c:	200005c4 	.word	0x200005c4

08010fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f103 0208 	add.w	r2, r3, #8
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f103 0208 	add.w	r2, r3, #8
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f103 0208 	add.w	r2, r3, #8
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010fd4:	bf00      	nop
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010fee:	bf00      	nop
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ffa:	b480      	push	{r7}
 8010ffc:	b085      	sub	sp, #20
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	689a      	ldr	r2, [r3, #8]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	683a      	ldr	r2, [r7, #0]
 801101e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	1c5a      	adds	r2, r3, #1
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	601a      	str	r2, [r3, #0]
}
 8011036:	bf00      	nop
 8011038:	3714      	adds	r7, #20
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr

08011042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011042:	b480      	push	{r7}
 8011044:	b085      	sub	sp, #20
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
 801104a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d103      	bne.n	8011062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	691b      	ldr	r3, [r3, #16]
 801105e:	60fb      	str	r3, [r7, #12]
 8011060:	e00c      	b.n	801107c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3308      	adds	r3, #8
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	e002      	b.n	8011070 <vListInsert+0x2e>
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68ba      	ldr	r2, [r7, #8]
 8011078:	429a      	cmp	r2, r3
 801107a:	d2f6      	bcs.n	801106a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	685a      	ldr	r2, [r3, #4]
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	683a      	ldr	r2, [r7, #0]
 801108a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	1c5a      	adds	r2, r3, #1
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	601a      	str	r2, [r3, #0]
}
 80110a8:	bf00      	nop
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	691b      	ldr	r3, [r3, #16]
 80110c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	6892      	ldr	r2, [r2, #8]
 80110ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	6852      	ldr	r2, [r2, #4]
 80110d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d103      	bne.n	80110e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	689a      	ldr	r2, [r3, #8]
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	1e5a      	subs	r2, r3, #1
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3714      	adds	r7, #20
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr

08011108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10b      	bne.n	8011134 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801111c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011120:	b672      	cpsid	i
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	b662      	cpsie	i
 8011130:	60bb      	str	r3, [r7, #8]
 8011132:	e7fe      	b.n	8011132 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011134:	f002 fdf8 	bl	8013d28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011140:	68f9      	ldr	r1, [r7, #12]
 8011142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011144:	fb01 f303 	mul.w	r3, r1, r3
 8011148:	441a      	add	r2, r3
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011164:	3b01      	subs	r3, #1
 8011166:	68f9      	ldr	r1, [r7, #12]
 8011168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801116a:	fb01 f303 	mul.w	r3, r1, r3
 801116e:	441a      	add	r2, r3
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	22ff      	movs	r2, #255	; 0xff
 8011178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	22ff      	movs	r2, #255	; 0xff
 8011180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d114      	bne.n	80111b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d01a      	beq.n	80111c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3310      	adds	r3, #16
 8011196:	4618      	mov	r0, r3
 8011198:	f001 fdb6 	bl	8012d08 <xTaskRemoveFromEventList>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d012      	beq.n	80111c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80111a2:	4b0d      	ldr	r3, [pc, #52]	; (80111d8 <xQueueGenericReset+0xd0>)
 80111a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	e009      	b.n	80111c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3310      	adds	r3, #16
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff fef1 	bl	8010fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	3324      	adds	r3, #36	; 0x24
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff feec 	bl	8010fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80111c8:	f002 fde0 	bl	8013d8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80111cc:	2301      	movs	r3, #1
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	e000ed04 	.word	0xe000ed04

080111dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b08e      	sub	sp, #56	; 0x38
 80111e0:	af02      	add	r7, sp, #8
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	607a      	str	r2, [r7, #4]
 80111e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10b      	bne.n	8011208 <xQueueGenericCreateStatic+0x2c>
 80111f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f4:	b672      	cpsid	i
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	b662      	cpsie	i
 8011204:	62bb      	str	r3, [r7, #40]	; 0x28
 8011206:	e7fe      	b.n	8011206 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10b      	bne.n	8011226 <xQueueGenericCreateStatic+0x4a>
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	b672      	cpsid	i
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	b662      	cpsie	i
 8011222:	627b      	str	r3, [r7, #36]	; 0x24
 8011224:	e7fe      	b.n	8011224 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d002      	beq.n	8011232 <xQueueGenericCreateStatic+0x56>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <xQueueGenericCreateStatic+0x5a>
 8011232:	2301      	movs	r3, #1
 8011234:	e000      	b.n	8011238 <xQueueGenericCreateStatic+0x5c>
 8011236:	2300      	movs	r3, #0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d10b      	bne.n	8011254 <xQueueGenericCreateStatic+0x78>
 801123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011240:	b672      	cpsid	i
 8011242:	f383 8811 	msr	BASEPRI, r3
 8011246:	f3bf 8f6f 	isb	sy
 801124a:	f3bf 8f4f 	dsb	sy
 801124e:	b662      	cpsie	i
 8011250:	623b      	str	r3, [r7, #32]
 8011252:	e7fe      	b.n	8011252 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d102      	bne.n	8011260 <xQueueGenericCreateStatic+0x84>
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <xQueueGenericCreateStatic+0x88>
 8011260:	2301      	movs	r3, #1
 8011262:	e000      	b.n	8011266 <xQueueGenericCreateStatic+0x8a>
 8011264:	2300      	movs	r3, #0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d10b      	bne.n	8011282 <xQueueGenericCreateStatic+0xa6>
 801126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126e:	b672      	cpsid	i
 8011270:	f383 8811 	msr	BASEPRI, r3
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	b662      	cpsie	i
 801127e:	61fb      	str	r3, [r7, #28]
 8011280:	e7fe      	b.n	8011280 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011282:	2350      	movs	r3, #80	; 0x50
 8011284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	2b50      	cmp	r3, #80	; 0x50
 801128a:	d00b      	beq.n	80112a4 <xQueueGenericCreateStatic+0xc8>
 801128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011290:	b672      	cpsid	i
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	b662      	cpsie	i
 80112a0:	61bb      	str	r3, [r7, #24]
 80112a2:	e7fe      	b.n	80112a2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80112a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00d      	beq.n	80112cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	2201      	movs	r2, #1
 80112b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	4613      	mov	r3, r2
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	68b9      	ldr	r1, [r7, #8]
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f000 f846 	bl	8011358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3730      	adds	r7, #48	; 0x30
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b08a      	sub	sp, #40	; 0x28
 80112da:	af02      	add	r7, sp, #8
 80112dc:	60f8      	str	r0, [r7, #12]
 80112de:	60b9      	str	r1, [r7, #8]
 80112e0:	4613      	mov	r3, r2
 80112e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d10b      	bne.n	8011302 <xQueueGenericCreate+0x2c>
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	b672      	cpsid	i
 80112f0:	f383 8811 	msr	BASEPRI, r3
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	b662      	cpsie	i
 80112fe:	613b      	str	r3, [r7, #16]
 8011300:	e7fe      	b.n	8011300 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d102      	bne.n	801130e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011308:	2300      	movs	r3, #0
 801130a:	61fb      	str	r3, [r7, #28]
 801130c:	e004      	b.n	8011318 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	fb02 f303 	mul.w	r3, r2, r3
 8011316:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	3350      	adds	r3, #80	; 0x50
 801131c:	4618      	mov	r0, r3
 801131e:	f002 fe25 	bl	8013f6c <pvPortMalloc>
 8011322:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d011      	beq.n	801134e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	3350      	adds	r3, #80	; 0x50
 8011332:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	2200      	movs	r2, #0
 8011338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801133c:	79fa      	ldrb	r2, [r7, #7]
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	4613      	mov	r3, r2
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f000 f805 	bl	8011358 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801134e:	69bb      	ldr	r3, [r7, #24]
	}
 8011350:	4618      	mov	r0, r3
 8011352:	3720      	adds	r7, #32
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
 8011364:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d103      	bne.n	8011374 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	69ba      	ldr	r2, [r7, #24]
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	e002      	b.n	801137a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011374:	69bb      	ldr	r3, [r7, #24]
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	68fa      	ldr	r2, [r7, #12]
 801137e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011386:	2101      	movs	r1, #1
 8011388:	69b8      	ldr	r0, [r7, #24]
 801138a:	f7ff febd 	bl	8011108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	78fa      	ldrb	r2, [r7, #3]
 8011392:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011396:	bf00      	nop
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b082      	sub	sp, #8
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00e      	beq.n	80113ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80113be:	2300      	movs	r3, #0
 80113c0:	2200      	movs	r2, #0
 80113c2:	2100      	movs	r1, #0
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 f92b 	bl	8011620 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80113ca:	bf00      	nop
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b086      	sub	sp, #24
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	4603      	mov	r3, r0
 80113da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80113dc:	2301      	movs	r3, #1
 80113de:	617b      	str	r3, [r7, #20]
 80113e0:	2300      	movs	r3, #0
 80113e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80113e4:	79fb      	ldrb	r3, [r7, #7]
 80113e6:	461a      	mov	r2, r3
 80113e8:	6939      	ldr	r1, [r7, #16]
 80113ea:	6978      	ldr	r0, [r7, #20]
 80113ec:	f7ff ff73 	bl	80112d6 <xQueueGenericCreate>
 80113f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f7ff ffd3 	bl	801139e <prvInitialiseMutex>

		return xNewQueue;
 80113f8:	68fb      	ldr	r3, [r7, #12]
	}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3718      	adds	r7, #24
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011402:	b580      	push	{r7, lr}
 8011404:	b088      	sub	sp, #32
 8011406:	af02      	add	r7, sp, #8
 8011408:	4603      	mov	r3, r0
 801140a:	6039      	str	r1, [r7, #0]
 801140c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801140e:	2301      	movs	r3, #1
 8011410:	617b      	str	r3, [r7, #20]
 8011412:	2300      	movs	r3, #0
 8011414:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	2200      	movs	r2, #0
 801141e:	6939      	ldr	r1, [r7, #16]
 8011420:	6978      	ldr	r0, [r7, #20]
 8011422:	f7ff fedb 	bl	80111dc <xQueueGenericCreateStatic>
 8011426:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7ff ffb8 	bl	801139e <prvInitialiseMutex>

		return xNewQueue;
 801142e:	68fb      	ldr	r3, [r7, #12]
	}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8011444:	f002 fc70 	bl	8013d28 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	689b      	ldr	r3, [r3, #8]
 8011454:	60fb      	str	r3, [r7, #12]
 8011456:	e001      	b.n	801145c <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8011458:	2300      	movs	r3, #0
 801145a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801145c:	f002 fc96 	bl	8013d8c <vPortExitCritical>

		return pxReturn;
 8011460:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801146a:	b590      	push	{r4, r7, lr}
 801146c:	b087      	sub	sp, #28
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10b      	bne.n	8011494 <xQueueGiveMutexRecursive+0x2a>
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	b672      	cpsid	i
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	b662      	cpsie	i
 8011490:	60fb      	str	r3, [r7, #12]
 8011492:	e7fe      	b.n	8011492 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	689c      	ldr	r4, [r3, #8]
 8011498:	f001 fdf4 	bl	8013084 <xTaskGetCurrentTaskHandle>
 801149c:	4603      	mov	r3, r0
 801149e:	429c      	cmp	r4, r3
 80114a0:	d111      	bne.n	80114c6 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	1e5a      	subs	r2, r3, #1
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d105      	bne.n	80114c0 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80114b4:	2300      	movs	r3, #0
 80114b6:	2200      	movs	r2, #0
 80114b8:	2100      	movs	r1, #0
 80114ba:	6938      	ldr	r0, [r7, #16]
 80114bc:	f000 f8b0 	bl	8011620 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80114c0:	2301      	movs	r3, #1
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	e001      	b.n	80114ca <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80114ca:	697b      	ldr	r3, [r7, #20]
	}
 80114cc:	4618      	mov	r0, r3
 80114ce:	371c      	adds	r7, #28
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}

080114d4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80114d4:	b590      	push	{r4, r7, lr}
 80114d6:	b087      	sub	sp, #28
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d10b      	bne.n	8011500 <xQueueTakeMutexRecursive+0x2c>
 80114e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ec:	b672      	cpsid	i
 80114ee:	f383 8811 	msr	BASEPRI, r3
 80114f2:	f3bf 8f6f 	isb	sy
 80114f6:	f3bf 8f4f 	dsb	sy
 80114fa:	b662      	cpsie	i
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	e7fe      	b.n	80114fe <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	689c      	ldr	r4, [r3, #8]
 8011504:	f001 fdbe 	bl	8013084 <xTaskGetCurrentTaskHandle>
 8011508:	4603      	mov	r3, r0
 801150a:	429c      	cmp	r4, r3
 801150c:	d107      	bne.n	801151e <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011518:	2301      	movs	r3, #1
 801151a:	617b      	str	r3, [r7, #20]
 801151c:	e00c      	b.n	8011538 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	6938      	ldr	r0, [r7, #16]
 8011522:	f000 fb8f 	bl	8011c44 <xQueueSemaphoreTake>
 8011526:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d004      	beq.n	8011538 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	1c5a      	adds	r2, r3, #1
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011538:	697b      	ldr	r3, [r7, #20]
	}
 801153a:	4618      	mov	r0, r3
 801153c:	371c      	adds	r7, #28
 801153e:	46bd      	mov	sp, r7
 8011540:	bd90      	pop	{r4, r7, pc}

08011542 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011542:	b580      	push	{r7, lr}
 8011544:	b08a      	sub	sp, #40	; 0x28
 8011546:	af02      	add	r7, sp, #8
 8011548:	60f8      	str	r0, [r7, #12]
 801154a:	60b9      	str	r1, [r7, #8]
 801154c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d10b      	bne.n	801156c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8011554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011558:	b672      	cpsid	i
 801155a:	f383 8811 	msr	BASEPRI, r3
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	b662      	cpsie	i
 8011568:	61bb      	str	r3, [r7, #24]
 801156a:	e7fe      	b.n	801156a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	429a      	cmp	r2, r3
 8011572:	d90b      	bls.n	801158c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011578:	b672      	cpsid	i
 801157a:	f383 8811 	msr	BASEPRI, r3
 801157e:	f3bf 8f6f 	isb	sy
 8011582:	f3bf 8f4f 	dsb	sy
 8011586:	b662      	cpsie	i
 8011588:	617b      	str	r3, [r7, #20]
 801158a:	e7fe      	b.n	801158a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801158c:	2302      	movs	r3, #2
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	2100      	movs	r1, #0
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7ff fe20 	bl	80111dc <xQueueGenericCreateStatic>
 801159c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	68ba      	ldr	r2, [r7, #8]
 80115a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80115aa:	69fb      	ldr	r3, [r7, #28]
	}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3720      	adds	r7, #32
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10b      	bne.n	80115dc <xQueueCreateCountingSemaphore+0x28>
 80115c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c8:	b672      	cpsid	i
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	b662      	cpsie	i
 80115d8:	613b      	str	r3, [r7, #16]
 80115da:	e7fe      	b.n	80115da <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80115dc:	683a      	ldr	r2, [r7, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d90b      	bls.n	80115fc <xQueueCreateCountingSemaphore+0x48>
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	b672      	cpsid	i
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	b662      	cpsie	i
 80115f8:	60fb      	str	r3, [r7, #12]
 80115fa:	e7fe      	b.n	80115fa <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80115fc:	2202      	movs	r2, #2
 80115fe:	2100      	movs	r1, #0
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff fe68 	bl	80112d6 <xQueueGenericCreate>
 8011606:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	683a      	ldr	r2, [r7, #0]
 8011612:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011614:	697b      	ldr	r3, [r7, #20]
	}
 8011616:	4618      	mov	r0, r3
 8011618:	3718      	adds	r7, #24
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
	...

08011620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08e      	sub	sp, #56	; 0x38
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801162e:	2300      	movs	r3, #0
 8011630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10b      	bne.n	8011654 <xQueueGenericSend+0x34>
 801163c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011640:	b672      	cpsid	i
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	b662      	cpsie	i
 8011650:	62bb      	str	r3, [r7, #40]	; 0x28
 8011652:	e7fe      	b.n	8011652 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d103      	bne.n	8011662 <xQueueGenericSend+0x42>
 801165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801165e:	2b00      	cmp	r3, #0
 8011660:	d101      	bne.n	8011666 <xQueueGenericSend+0x46>
 8011662:	2301      	movs	r3, #1
 8011664:	e000      	b.n	8011668 <xQueueGenericSend+0x48>
 8011666:	2300      	movs	r3, #0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d10b      	bne.n	8011684 <xQueueGenericSend+0x64>
 801166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011670:	b672      	cpsid	i
 8011672:	f383 8811 	msr	BASEPRI, r3
 8011676:	f3bf 8f6f 	isb	sy
 801167a:	f3bf 8f4f 	dsb	sy
 801167e:	b662      	cpsie	i
 8011680:	627b      	str	r3, [r7, #36]	; 0x24
 8011682:	e7fe      	b.n	8011682 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2b02      	cmp	r3, #2
 8011688:	d103      	bne.n	8011692 <xQueueGenericSend+0x72>
 801168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801168e:	2b01      	cmp	r3, #1
 8011690:	d101      	bne.n	8011696 <xQueueGenericSend+0x76>
 8011692:	2301      	movs	r3, #1
 8011694:	e000      	b.n	8011698 <xQueueGenericSend+0x78>
 8011696:	2300      	movs	r3, #0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10b      	bne.n	80116b4 <xQueueGenericSend+0x94>
 801169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a0:	b672      	cpsid	i
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	b662      	cpsie	i
 80116b0:	623b      	str	r3, [r7, #32]
 80116b2:	e7fe      	b.n	80116b2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116b4:	f001 fcf6 	bl	80130a4 <xTaskGetSchedulerState>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d102      	bne.n	80116c4 <xQueueGenericSend+0xa4>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d101      	bne.n	80116c8 <xQueueGenericSend+0xa8>
 80116c4:	2301      	movs	r3, #1
 80116c6:	e000      	b.n	80116ca <xQueueGenericSend+0xaa>
 80116c8:	2300      	movs	r3, #0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10b      	bne.n	80116e6 <xQueueGenericSend+0xc6>
 80116ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d2:	b672      	cpsid	i
 80116d4:	f383 8811 	msr	BASEPRI, r3
 80116d8:	f3bf 8f6f 	isb	sy
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	b662      	cpsie	i
 80116e2:	61fb      	str	r3, [r7, #28]
 80116e4:	e7fe      	b.n	80116e4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116e6:	f002 fb1f 	bl	8013d28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d302      	bcc.n	80116fc <xQueueGenericSend+0xdc>
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d129      	bne.n	8011750 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	68b9      	ldr	r1, [r7, #8]
 8011700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011702:	f000 fc6e 	bl	8011fe2 <prvCopyDataToQueue>
 8011706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170c:	2b00      	cmp	r3, #0
 801170e:	d010      	beq.n	8011732 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011712:	3324      	adds	r3, #36	; 0x24
 8011714:	4618      	mov	r0, r3
 8011716:	f001 faf7 	bl	8012d08 <xTaskRemoveFromEventList>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d013      	beq.n	8011748 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011720:	4b3f      	ldr	r3, [pc, #252]	; (8011820 <xQueueGenericSend+0x200>)
 8011722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	e00a      	b.n	8011748 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011734:	2b00      	cmp	r3, #0
 8011736:	d007      	beq.n	8011748 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011738:	4b39      	ldr	r3, [pc, #228]	; (8011820 <xQueueGenericSend+0x200>)
 801173a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011748:	f002 fb20 	bl	8013d8c <vPortExitCritical>
				return pdPASS;
 801174c:	2301      	movs	r3, #1
 801174e:	e063      	b.n	8011818 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d103      	bne.n	801175e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011756:	f002 fb19 	bl	8013d8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801175a:	2300      	movs	r3, #0
 801175c:	e05c      	b.n	8011818 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011760:	2b00      	cmp	r3, #0
 8011762:	d106      	bne.n	8011772 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011764:	f107 0314 	add.w	r3, r7, #20
 8011768:	4618      	mov	r0, r3
 801176a:	f001 fb31 	bl	8012dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801176e:	2301      	movs	r3, #1
 8011770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011772:	f002 fb0b 	bl	8013d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011776:	f001 f88f 	bl	8012898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801177a:	f002 fad5 	bl	8013d28 <vPortEnterCritical>
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011784:	b25b      	sxtb	r3, r3
 8011786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178a:	d103      	bne.n	8011794 <xQueueGenericSend+0x174>
 801178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178e:	2200      	movs	r2, #0
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801179a:	b25b      	sxtb	r3, r3
 801179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a0:	d103      	bne.n	80117aa <xQueueGenericSend+0x18a>
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117aa:	f002 faef 	bl	8013d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80117ae:	1d3a      	adds	r2, r7, #4
 80117b0:	f107 0314 	add.w	r3, r7, #20
 80117b4:	4611      	mov	r1, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f001 fb20 	bl	8012dfc <xTaskCheckForTimeOut>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d124      	bne.n	801180c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80117c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117c4:	f000 fd05 	bl	80121d2 <prvIsQueueFull>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d018      	beq.n	8011800 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	3310      	adds	r3, #16
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f001 fa44 	bl	8012c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80117dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117de:	f000 fc90 	bl	8012102 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80117e2:	f001 f867 	bl	80128b4 <xTaskResumeAll>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f47f af7c 	bne.w	80116e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80117ee:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <xQueueGenericSend+0x200>)
 80117f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	f3bf 8f4f 	dsb	sy
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	e772      	b.n	80116e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011802:	f000 fc7e 	bl	8012102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011806:	f001 f855 	bl	80128b4 <xTaskResumeAll>
 801180a:	e76c      	b.n	80116e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801180c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801180e:	f000 fc78 	bl	8012102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011812:	f001 f84f 	bl	80128b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011818:	4618      	mov	r0, r3
 801181a:	3738      	adds	r7, #56	; 0x38
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	e000ed04 	.word	0xe000ed04

08011824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b08e      	sub	sp, #56	; 0x38
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	607a      	str	r2, [r7, #4]
 8011830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011838:	2b00      	cmp	r3, #0
 801183a:	d10b      	bne.n	8011854 <xQueueGenericSendFromISR+0x30>
 801183c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011840:	b672      	cpsid	i
 8011842:	f383 8811 	msr	BASEPRI, r3
 8011846:	f3bf 8f6f 	isb	sy
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	b662      	cpsie	i
 8011850:	627b      	str	r3, [r7, #36]	; 0x24
 8011852:	e7fe      	b.n	8011852 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d103      	bne.n	8011862 <xQueueGenericSendFromISR+0x3e>
 801185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801185e:	2b00      	cmp	r3, #0
 8011860:	d101      	bne.n	8011866 <xQueueGenericSendFromISR+0x42>
 8011862:	2301      	movs	r3, #1
 8011864:	e000      	b.n	8011868 <xQueueGenericSendFromISR+0x44>
 8011866:	2300      	movs	r3, #0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d10b      	bne.n	8011884 <xQueueGenericSendFromISR+0x60>
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	b672      	cpsid	i
 8011872:	f383 8811 	msr	BASEPRI, r3
 8011876:	f3bf 8f6f 	isb	sy
 801187a:	f3bf 8f4f 	dsb	sy
 801187e:	b662      	cpsie	i
 8011880:	623b      	str	r3, [r7, #32]
 8011882:	e7fe      	b.n	8011882 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	2b02      	cmp	r3, #2
 8011888:	d103      	bne.n	8011892 <xQueueGenericSendFromISR+0x6e>
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801188e:	2b01      	cmp	r3, #1
 8011890:	d101      	bne.n	8011896 <xQueueGenericSendFromISR+0x72>
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <xQueueGenericSendFromISR+0x74>
 8011896:	2300      	movs	r3, #0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10b      	bne.n	80118b4 <xQueueGenericSendFromISR+0x90>
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	b672      	cpsid	i
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	b662      	cpsie	i
 80118b0:	61fb      	str	r3, [r7, #28]
 80118b2:	e7fe      	b.n	80118b2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118b4:	f002 fb18 	bl	8013ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80118b8:	f3ef 8211 	mrs	r2, BASEPRI
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	b672      	cpsid	i
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	b662      	cpsie	i
 80118d0:	61ba      	str	r2, [r7, #24]
 80118d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80118d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80118d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d302      	bcc.n	80118ea <xQueueGenericSendFromISR+0xc6>
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d12c      	bne.n	8011944 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	68b9      	ldr	r1, [r7, #8]
 80118f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118fa:	f000 fb72 	bl	8011fe2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011906:	d112      	bne.n	801192e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190c:	2b00      	cmp	r3, #0
 801190e:	d016      	beq.n	801193e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011912:	3324      	adds	r3, #36	; 0x24
 8011914:	4618      	mov	r0, r3
 8011916:	f001 f9f7 	bl	8012d08 <xTaskRemoveFromEventList>
 801191a:	4603      	mov	r3, r0
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00e      	beq.n	801193e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00b      	beq.n	801193e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2201      	movs	r2, #1
 801192a:	601a      	str	r2, [r3, #0]
 801192c:	e007      	b.n	801193e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801192e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011932:	3301      	adds	r3, #1
 8011934:	b2db      	uxtb	r3, r3
 8011936:	b25a      	sxtb	r2, r3
 8011938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801193e:	2301      	movs	r3, #1
 8011940:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011942:	e001      	b.n	8011948 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011944:	2300      	movs	r3, #0
 8011946:	637b      	str	r3, [r7, #52]	; 0x34
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011954:	4618      	mov	r0, r3
 8011956:	3738      	adds	r7, #56	; 0x38
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b08e      	sub	sp, #56	; 0x38
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10b      	bne.n	8011988 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011974:	b672      	cpsid	i
 8011976:	f383 8811 	msr	BASEPRI, r3
 801197a:	f3bf 8f6f 	isb	sy
 801197e:	f3bf 8f4f 	dsb	sy
 8011982:	b662      	cpsie	i
 8011984:	623b      	str	r3, [r7, #32]
 8011986:	e7fe      	b.n	8011986 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00b      	beq.n	80119a8 <xQueueGiveFromISR+0x4c>
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	b672      	cpsid	i
 8011996:	f383 8811 	msr	BASEPRI, r3
 801199a:	f3bf 8f6f 	isb	sy
 801199e:	f3bf 8f4f 	dsb	sy
 80119a2:	b662      	cpsie	i
 80119a4:	61fb      	str	r3, [r7, #28]
 80119a6:	e7fe      	b.n	80119a6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80119a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d103      	bne.n	80119b8 <xQueueGiveFromISR+0x5c>
 80119b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d101      	bne.n	80119bc <xQueueGiveFromISR+0x60>
 80119b8:	2301      	movs	r3, #1
 80119ba:	e000      	b.n	80119be <xQueueGiveFromISR+0x62>
 80119bc:	2300      	movs	r3, #0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d10b      	bne.n	80119da <xQueueGiveFromISR+0x7e>
 80119c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c6:	b672      	cpsid	i
 80119c8:	f383 8811 	msr	BASEPRI, r3
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	f3bf 8f4f 	dsb	sy
 80119d4:	b662      	cpsie	i
 80119d6:	61bb      	str	r3, [r7, #24]
 80119d8:	e7fe      	b.n	80119d8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119da:	f002 fa85 	bl	8013ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80119de:	f3ef 8211 	mrs	r2, BASEPRI
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	b672      	cpsid	i
 80119e8:	f383 8811 	msr	BASEPRI, r3
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	b662      	cpsie	i
 80119f6:	617a      	str	r2, [r7, #20]
 80119f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80119fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d22b      	bcs.n	8011a66 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011a20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a28:	d112      	bne.n	8011a50 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d016      	beq.n	8011a60 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a34:	3324      	adds	r3, #36	; 0x24
 8011a36:	4618      	mov	r0, r3
 8011a38:	f001 f966 	bl	8012d08 <xTaskRemoveFromEventList>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00e      	beq.n	8011a60 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00b      	beq.n	8011a60 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	601a      	str	r2, [r3, #0]
 8011a4e:	e007      	b.n	8011a60 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a54:	3301      	adds	r3, #1
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	b25a      	sxtb	r2, r3
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011a60:	2301      	movs	r3, #1
 8011a62:	637b      	str	r3, [r7, #52]	; 0x34
 8011a64:	e001      	b.n	8011a6a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011a66:	2300      	movs	r3, #0
 8011a68:	637b      	str	r3, [r7, #52]	; 0x34
 8011a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3738      	adds	r7, #56	; 0x38
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
	...

08011a80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b08c      	sub	sp, #48	; 0x30
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d10b      	bne.n	8011ab2 <xQueueReceive+0x32>
	__asm volatile
 8011a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9e:	b672      	cpsid	i
 8011aa0:	f383 8811 	msr	BASEPRI, r3
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	f3bf 8f4f 	dsb	sy
 8011aac:	b662      	cpsie	i
 8011aae:	623b      	str	r3, [r7, #32]
 8011ab0:	e7fe      	b.n	8011ab0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d103      	bne.n	8011ac0 <xQueueReceive+0x40>
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d101      	bne.n	8011ac4 <xQueueReceive+0x44>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	e000      	b.n	8011ac6 <xQueueReceive+0x46>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10b      	bne.n	8011ae2 <xQueueReceive+0x62>
 8011aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ace:	b672      	cpsid	i
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	b662      	cpsie	i
 8011ade:	61fb      	str	r3, [r7, #28]
 8011ae0:	e7fe      	b.n	8011ae0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ae2:	f001 fadf 	bl	80130a4 <xTaskGetSchedulerState>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d102      	bne.n	8011af2 <xQueueReceive+0x72>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d101      	bne.n	8011af6 <xQueueReceive+0x76>
 8011af2:	2301      	movs	r3, #1
 8011af4:	e000      	b.n	8011af8 <xQueueReceive+0x78>
 8011af6:	2300      	movs	r3, #0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d10b      	bne.n	8011b14 <xQueueReceive+0x94>
 8011afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b00:	b672      	cpsid	i
 8011b02:	f383 8811 	msr	BASEPRI, r3
 8011b06:	f3bf 8f6f 	isb	sy
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	b662      	cpsie	i
 8011b10:	61bb      	str	r3, [r7, #24]
 8011b12:	e7fe      	b.n	8011b12 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b14:	f002 f908 	bl	8013d28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d01f      	beq.n	8011b64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b24:	68b9      	ldr	r1, [r7, #8]
 8011b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b28:	f000 fac5 	bl	80120b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2e:	1e5a      	subs	r2, r3, #1
 8011b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b36:	691b      	ldr	r3, [r3, #16]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00f      	beq.n	8011b5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3e:	3310      	adds	r3, #16
 8011b40:	4618      	mov	r0, r3
 8011b42:	f001 f8e1 	bl	8012d08 <xTaskRemoveFromEventList>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d007      	beq.n	8011b5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b4c:	4b3c      	ldr	r3, [pc, #240]	; (8011c40 <xQueueReceive+0x1c0>)
 8011b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b52:	601a      	str	r2, [r3, #0]
 8011b54:	f3bf 8f4f 	dsb	sy
 8011b58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b5c:	f002 f916 	bl	8013d8c <vPortExitCritical>
				return pdPASS;
 8011b60:	2301      	movs	r3, #1
 8011b62:	e069      	b.n	8011c38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d103      	bne.n	8011b72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b6a:	f002 f90f 	bl	8013d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	e062      	b.n	8011c38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d106      	bne.n	8011b86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b78:	f107 0310 	add.w	r3, r7, #16
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f001 f927 	bl	8012dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b82:	2301      	movs	r3, #1
 8011b84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b86:	f002 f901 	bl	8013d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b8a:	f000 fe85 	bl	8012898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b8e:	f002 f8cb 	bl	8013d28 <vPortEnterCritical>
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b98:	b25b      	sxtb	r3, r3
 8011b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9e:	d103      	bne.n	8011ba8 <xQueueReceive+0x128>
 8011ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bae:	b25b      	sxtb	r3, r3
 8011bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb4:	d103      	bne.n	8011bbe <xQueueReceive+0x13e>
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	2200      	movs	r2, #0
 8011bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bbe:	f002 f8e5 	bl	8013d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bc2:	1d3a      	adds	r2, r7, #4
 8011bc4:	f107 0310 	add.w	r3, r7, #16
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f001 f916 	bl	8012dfc <xTaskCheckForTimeOut>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d123      	bne.n	8011c1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bd8:	f000 fae5 	bl	80121a6 <prvIsQueueEmpty>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d017      	beq.n	8011c12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be4:	3324      	adds	r3, #36	; 0x24
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f001 f83a 	bl	8012c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bf2:	f000 fa86 	bl	8012102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bf6:	f000 fe5d 	bl	80128b4 <xTaskResumeAll>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d189      	bne.n	8011b14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011c00:	4b0f      	ldr	r3, [pc, #60]	; (8011c40 <xQueueReceive+0x1c0>)
 8011c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	f3bf 8f4f 	dsb	sy
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	e780      	b.n	8011b14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c14:	f000 fa75 	bl	8012102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c18:	f000 fe4c 	bl	80128b4 <xTaskResumeAll>
 8011c1c:	e77a      	b.n	8011b14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c20:	f000 fa6f 	bl	8012102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c24:	f000 fe46 	bl	80128b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c2a:	f000 fabc 	bl	80121a6 <prvIsQueueEmpty>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f43f af6f 	beq.w	8011b14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3730      	adds	r7, #48	; 0x30
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	e000ed04 	.word	0xe000ed04

08011c44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b08e      	sub	sp, #56	; 0x38
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011c56:	2300      	movs	r3, #0
 8011c58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10b      	bne.n	8011c78 <xQueueSemaphoreTake+0x34>
 8011c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c64:	b672      	cpsid	i
 8011c66:	f383 8811 	msr	BASEPRI, r3
 8011c6a:	f3bf 8f6f 	isb	sy
 8011c6e:	f3bf 8f4f 	dsb	sy
 8011c72:	b662      	cpsie	i
 8011c74:	623b      	str	r3, [r7, #32]
 8011c76:	e7fe      	b.n	8011c76 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00b      	beq.n	8011c98 <xQueueSemaphoreTake+0x54>
 8011c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c84:	b672      	cpsid	i
 8011c86:	f383 8811 	msr	BASEPRI, r3
 8011c8a:	f3bf 8f6f 	isb	sy
 8011c8e:	f3bf 8f4f 	dsb	sy
 8011c92:	b662      	cpsie	i
 8011c94:	61fb      	str	r3, [r7, #28]
 8011c96:	e7fe      	b.n	8011c96 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c98:	f001 fa04 	bl	80130a4 <xTaskGetSchedulerState>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <xQueueSemaphoreTake+0x64>
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d101      	bne.n	8011cac <xQueueSemaphoreTake+0x68>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e000      	b.n	8011cae <xQueueSemaphoreTake+0x6a>
 8011cac:	2300      	movs	r3, #0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d10b      	bne.n	8011cca <xQueueSemaphoreTake+0x86>
 8011cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb6:	b672      	cpsid	i
 8011cb8:	f383 8811 	msr	BASEPRI, r3
 8011cbc:	f3bf 8f6f 	isb	sy
 8011cc0:	f3bf 8f4f 	dsb	sy
 8011cc4:	b662      	cpsie	i
 8011cc6:	61bb      	str	r3, [r7, #24]
 8011cc8:	e7fe      	b.n	8011cc8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011cca:	f002 f82d 	bl	8013d28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cd2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d024      	beq.n	8011d24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cdc:	1e5a      	subs	r2, r3, #1
 8011cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d104      	bne.n	8011cf4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011cea:	f001 fb55 	bl	8013398 <pvTaskIncrementMutexHeldCount>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf6:	691b      	ldr	r3, [r3, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d00f      	beq.n	8011d1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	3310      	adds	r3, #16
 8011d00:	4618      	mov	r0, r3
 8011d02:	f001 f801 	bl	8012d08 <xTaskRemoveFromEventList>
 8011d06:	4603      	mov	r3, r0
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d007      	beq.n	8011d1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d0c:	4b54      	ldr	r3, [pc, #336]	; (8011e60 <xQueueSemaphoreTake+0x21c>)
 8011d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d1c:	f002 f836 	bl	8013d8c <vPortExitCritical>
				return pdPASS;
 8011d20:	2301      	movs	r3, #1
 8011d22:	e098      	b.n	8011e56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d112      	bne.n	8011d50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00b      	beq.n	8011d48 <xQueueSemaphoreTake+0x104>
 8011d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d34:	b672      	cpsid	i
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	b662      	cpsie	i
 8011d44:	617b      	str	r3, [r7, #20]
 8011d46:	e7fe      	b.n	8011d46 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011d48:	f002 f820 	bl	8013d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	e082      	b.n	8011e56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d106      	bne.n	8011d64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d56:	f107 030c 	add.w	r3, r7, #12
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f001 f838 	bl	8012dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d60:	2301      	movs	r3, #1
 8011d62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d64:	f002 f812 	bl	8013d8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d68:	f000 fd96 	bl	8012898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d6c:	f001 ffdc 	bl	8013d28 <vPortEnterCritical>
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d76:	b25b      	sxtb	r3, r3
 8011d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7c:	d103      	bne.n	8011d86 <xQueueSemaphoreTake+0x142>
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d8c:	b25b      	sxtb	r3, r3
 8011d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d92:	d103      	bne.n	8011d9c <xQueueSemaphoreTake+0x158>
 8011d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d9c:	f001 fff6 	bl	8013d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011da0:	463a      	mov	r2, r7
 8011da2:	f107 030c 	add.w	r3, r7, #12
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f001 f827 	bl	8012dfc <xTaskCheckForTimeOut>
 8011dae:	4603      	mov	r3, r0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d132      	bne.n	8011e1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011db6:	f000 f9f6 	bl	80121a6 <prvIsQueueEmpty>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d026      	beq.n	8011e0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d109      	bne.n	8011ddc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011dc8:	f001 ffae 	bl	8013d28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f001 f985 	bl	80130e0 <xTaskPriorityInherit>
 8011dd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011dd8:	f001 ffd8 	bl	8013d8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	3324      	adds	r3, #36	; 0x24
 8011de0:	683a      	ldr	r2, [r7, #0]
 8011de2:	4611      	mov	r1, r2
 8011de4:	4618      	mov	r0, r3
 8011de6:	f000 ff3d 	bl	8012c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dec:	f000 f989 	bl	8012102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011df0:	f000 fd60 	bl	80128b4 <xTaskResumeAll>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f47f af67 	bne.w	8011cca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011dfc:	4b18      	ldr	r3, [pc, #96]	; (8011e60 <xQueueSemaphoreTake+0x21c>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	e75d      	b.n	8011cca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e10:	f000 f977 	bl	8012102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e14:	f000 fd4e 	bl	80128b4 <xTaskResumeAll>
 8011e18:	e757      	b.n	8011cca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e1c:	f000 f971 	bl	8012102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e20:	f000 fd48 	bl	80128b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e26:	f000 f9be 	bl	80121a6 <prvIsQueueEmpty>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f43f af4c 	beq.w	8011cca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00d      	beq.n	8011e54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011e38:	f001 ff76 	bl	8013d28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e3e:	f000 f8b8 	bl	8011fb2 <prvGetDisinheritPriorityAfterTimeout>
 8011e42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f001 fa20 	bl	8013290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011e50:	f001 ff9c 	bl	8013d8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3738      	adds	r7, #56	; 0x38
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	e000ed04 	.word	0xe000ed04

08011e64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08e      	sub	sp, #56	; 0x38
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d10b      	bne.n	8011e92 <xQueueReceiveFromISR+0x2e>
 8011e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7e:	b672      	cpsid	i
 8011e80:	f383 8811 	msr	BASEPRI, r3
 8011e84:	f3bf 8f6f 	isb	sy
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	b662      	cpsie	i
 8011e8e:	623b      	str	r3, [r7, #32]
 8011e90:	e7fe      	b.n	8011e90 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d103      	bne.n	8011ea0 <xQueueReceiveFromISR+0x3c>
 8011e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d101      	bne.n	8011ea4 <xQueueReceiveFromISR+0x40>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e000      	b.n	8011ea6 <xQueueReceiveFromISR+0x42>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10b      	bne.n	8011ec2 <xQueueReceiveFromISR+0x5e>
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	b672      	cpsid	i
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	b662      	cpsie	i
 8011ebe:	61fb      	str	r3, [r7, #28]
 8011ec0:	e7fe      	b.n	8011ec0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ec2:	f002 f811 	bl	8013ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8011ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8011eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ece:	b672      	cpsid	i
 8011ed0:	f383 8811 	msr	BASEPRI, r3
 8011ed4:	f3bf 8f6f 	isb	sy
 8011ed8:	f3bf 8f4f 	dsb	sy
 8011edc:	b662      	cpsie	i
 8011ede:	61ba      	str	r2, [r7, #24]
 8011ee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011ee2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d02f      	beq.n	8011f52 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011efc:	68b9      	ldr	r1, [r7, #8]
 8011efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f00:	f000 f8d9 	bl	80120b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f06:	1e5a      	subs	r2, r3, #1
 8011f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f14:	d112      	bne.n	8011f3c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f18:	691b      	ldr	r3, [r3, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d016      	beq.n	8011f4c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f20:	3310      	adds	r3, #16
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 fef0 	bl	8012d08 <xTaskRemoveFromEventList>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00e      	beq.n	8011f4c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00b      	beq.n	8011f4c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2201      	movs	r2, #1
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	e007      	b.n	8011f4c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f40:	3301      	adds	r3, #1
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	b25a      	sxtb	r2, r3
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f50:	e001      	b.n	8011f56 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011f52:	2300      	movs	r3, #0
 8011f54:	637b      	str	r3, [r7, #52]	; 0x34
 8011f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3738      	adds	r7, #56	; 0x38
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}

08011f6a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011f6a:	b580      	push	{r7, lr}
 8011f6c:	b084      	sub	sp, #16
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10b      	bne.n	8011f94 <vQueueDelete+0x2a>
	__asm volatile
 8011f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f80:	b672      	cpsid	i
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	b662      	cpsie	i
 8011f90:	60bb      	str	r3, [r7, #8]
 8011f92:	e7fe      	b.n	8011f92 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f000 f95d 	bl	8012254 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d102      	bne.n	8011faa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	f002 f8a9 	bl	80140fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011faa:	bf00      	nop
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011fb2:	b480      	push	{r7}
 8011fb4:	b085      	sub	sp, #20
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d006      	beq.n	8011fd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	e001      	b.n	8011fd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3714      	adds	r7, #20
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe0:	4770      	bx	lr

08011fe2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011fe2:	b580      	push	{r7, lr}
 8011fe4:	b086      	sub	sp, #24
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	60f8      	str	r0, [r7, #12]
 8011fea:	60b9      	str	r1, [r7, #8]
 8011fec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ff6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10d      	bne.n	801201c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d14d      	bne.n	80120a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	4618      	mov	r0, r3
 801200e:	f001 f8cf 	bl	80131b0 <xTaskPriorityDisinherit>
 8012012:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2200      	movs	r2, #0
 8012018:	609a      	str	r2, [r3, #8]
 801201a:	e043      	b.n	80120a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d119      	bne.n	8012056 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6858      	ldr	r0, [r3, #4]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801202a:	461a      	mov	r2, r3
 801202c:	68b9      	ldr	r1, [r7, #8]
 801202e:	f002 ff1f 	bl	8014e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801203a:	441a      	add	r2, r3
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	685a      	ldr	r2, [r3, #4]
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	689b      	ldr	r3, [r3, #8]
 8012048:	429a      	cmp	r2, r3
 801204a:	d32b      	bcc.n	80120a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	605a      	str	r2, [r3, #4]
 8012054:	e026      	b.n	80120a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	68d8      	ldr	r0, [r3, #12]
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205e:	461a      	mov	r2, r3
 8012060:	68b9      	ldr	r1, [r7, #8]
 8012062:	f002 ff05 	bl	8014e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	68da      	ldr	r2, [r3, #12]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801206e:	425b      	negs	r3, r3
 8012070:	441a      	add	r2, r3
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	68da      	ldr	r2, [r3, #12]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d207      	bcs.n	8012092 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	689a      	ldr	r2, [r3, #8]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801208a:	425b      	negs	r3, r3
 801208c:	441a      	add	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2b02      	cmp	r3, #2
 8012096:	d105      	bne.n	80120a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	3b01      	subs	r3, #1
 80120a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	1c5a      	adds	r2, r3, #1
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80120ac:	697b      	ldr	r3, [r7, #20]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3718      	adds	r7, #24
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80120b6:	b580      	push	{r7, lr}
 80120b8:	b082      	sub	sp, #8
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d018      	beq.n	80120fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	68da      	ldr	r2, [r3, #12]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120d0:	441a      	add	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	68da      	ldr	r2, [r3, #12]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	689b      	ldr	r3, [r3, #8]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d303      	bcc.n	80120ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	68d9      	ldr	r1, [r3, #12]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120f2:	461a      	mov	r2, r3
 80120f4:	6838      	ldr	r0, [r7, #0]
 80120f6:	f002 febb 	bl	8014e70 <memcpy>
	}
}
 80120fa:	bf00      	nop
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}

08012102 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012102:	b580      	push	{r7, lr}
 8012104:	b084      	sub	sp, #16
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801210a:	f001 fe0d 	bl	8013d28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012114:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012116:	e011      	b.n	801213c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211c:	2b00      	cmp	r3, #0
 801211e:	d012      	beq.n	8012146 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3324      	adds	r3, #36	; 0x24
 8012124:	4618      	mov	r0, r3
 8012126:	f000 fdef 	bl	8012d08 <xTaskRemoveFromEventList>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d001      	beq.n	8012134 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012130:	f000 fec8 	bl	8012ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012134:	7bfb      	ldrb	r3, [r7, #15]
 8012136:	3b01      	subs	r3, #1
 8012138:	b2db      	uxtb	r3, r3
 801213a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012140:	2b00      	cmp	r3, #0
 8012142:	dce9      	bgt.n	8012118 <prvUnlockQueue+0x16>
 8012144:	e000      	b.n	8012148 <prvUnlockQueue+0x46>
					break;
 8012146:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	22ff      	movs	r2, #255	; 0xff
 801214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012150:	f001 fe1c 	bl	8013d8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012154:	f001 fde8 	bl	8013d28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801215e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012160:	e011      	b.n	8012186 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d012      	beq.n	8012190 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	3310      	adds	r3, #16
 801216e:	4618      	mov	r0, r3
 8012170:	f000 fdca 	bl	8012d08 <xTaskRemoveFromEventList>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	d001      	beq.n	801217e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801217a:	f000 fea3 	bl	8012ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801217e:	7bbb      	ldrb	r3, [r7, #14]
 8012180:	3b01      	subs	r3, #1
 8012182:	b2db      	uxtb	r3, r3
 8012184:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801218a:	2b00      	cmp	r3, #0
 801218c:	dce9      	bgt.n	8012162 <prvUnlockQueue+0x60>
 801218e:	e000      	b.n	8012192 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012190:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	22ff      	movs	r2, #255	; 0xff
 8012196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801219a:	f001 fdf7 	bl	8013d8c <vPortExitCritical>
}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b084      	sub	sp, #16
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121ae:	f001 fdbb 	bl	8013d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d102      	bne.n	80121c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80121ba:	2301      	movs	r3, #1
 80121bc:	60fb      	str	r3, [r7, #12]
 80121be:	e001      	b.n	80121c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80121c0:	2300      	movs	r3, #0
 80121c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121c4:	f001 fde2 	bl	8013d8c <vPortExitCritical>

	return xReturn;
 80121c8:	68fb      	ldr	r3, [r7, #12]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b084      	sub	sp, #16
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121da:	f001 fda5 	bl	8013d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d102      	bne.n	80121f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121ea:	2301      	movs	r3, #1
 80121ec:	60fb      	str	r3, [r7, #12]
 80121ee:	e001      	b.n	80121f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121f0:	2300      	movs	r3, #0
 80121f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121f4:	f001 fdca 	bl	8013d8c <vPortExitCritical>

	return xReturn;
 80121f8:	68fb      	ldr	r3, [r7, #12]
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
	...

08012204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801220e:	2300      	movs	r3, #0
 8012210:	60fb      	str	r3, [r7, #12]
 8012212:	e014      	b.n	801223e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012214:	4a0e      	ldr	r2, [pc, #56]	; (8012250 <vQueueAddToRegistry+0x4c>)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10b      	bne.n	8012238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012220:	490b      	ldr	r1, [pc, #44]	; (8012250 <vQueueAddToRegistry+0x4c>)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	683a      	ldr	r2, [r7, #0]
 8012226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801222a:	4a09      	ldr	r2, [pc, #36]	; (8012250 <vQueueAddToRegistry+0x4c>)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	00db      	lsls	r3, r3, #3
 8012230:	4413      	add	r3, r2
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012236:	e005      	b.n	8012244 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	3301      	adds	r3, #1
 801223c:	60fb      	str	r3, [r7, #12]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2b07      	cmp	r3, #7
 8012242:	d9e7      	bls.n	8012214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012244:	bf00      	nop
 8012246:	3714      	adds	r7, #20
 8012248:	46bd      	mov	sp, r7
 801224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224e:	4770      	bx	lr
 8012250:	20011604 	.word	0x20011604

08012254 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801225c:	2300      	movs	r3, #0
 801225e:	60fb      	str	r3, [r7, #12]
 8012260:	e016      	b.n	8012290 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012262:	4a10      	ldr	r2, [pc, #64]	; (80122a4 <vQueueUnregisterQueue+0x50>)
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	00db      	lsls	r3, r3, #3
 8012268:	4413      	add	r3, r2
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	429a      	cmp	r2, r3
 8012270:	d10b      	bne.n	801228a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012272:	4a0c      	ldr	r2, [pc, #48]	; (80122a4 <vQueueUnregisterQueue+0x50>)
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2100      	movs	r1, #0
 8012278:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801227c:	4a09      	ldr	r2, [pc, #36]	; (80122a4 <vQueueUnregisterQueue+0x50>)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	4413      	add	r3, r2
 8012284:	2200      	movs	r2, #0
 8012286:	605a      	str	r2, [r3, #4]
				break;
 8012288:	e005      	b.n	8012296 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3301      	adds	r3, #1
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b07      	cmp	r3, #7
 8012294:	d9e5      	bls.n	8012262 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012296:	bf00      	nop
 8012298:	3714      	adds	r7, #20
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop
 80122a4:	20011604 	.word	0x20011604

080122a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80122b8:	f001 fd36 	bl	8013d28 <vPortEnterCritical>
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122c2:	b25b      	sxtb	r3, r3
 80122c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122c8:	d103      	bne.n	80122d2 <vQueueWaitForMessageRestricted+0x2a>
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	2200      	movs	r2, #0
 80122ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122d8:	b25b      	sxtb	r3, r3
 80122da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122de:	d103      	bne.n	80122e8 <vQueueWaitForMessageRestricted+0x40>
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122e8:	f001 fd50 	bl	8013d8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d106      	bne.n	8012302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	3324      	adds	r3, #36	; 0x24
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	68b9      	ldr	r1, [r7, #8]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f000 fcd7 	bl	8012cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012302:	6978      	ldr	r0, [r7, #20]
 8012304:	f7ff fefd 	bl	8012102 <prvUnlockQueue>
	}
 8012308:	bf00      	nop
 801230a:	3718      	adds	r7, #24
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012310:	b580      	push	{r7, lr}
 8012312:	b08e      	sub	sp, #56	; 0x38
 8012314:	af04      	add	r7, sp, #16
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
 801231c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10b      	bne.n	801233c <xTaskCreateStatic+0x2c>
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	b672      	cpsid	i
 801232a:	f383 8811 	msr	BASEPRI, r3
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f3bf 8f4f 	dsb	sy
 8012336:	b662      	cpsie	i
 8012338:	623b      	str	r3, [r7, #32]
 801233a:	e7fe      	b.n	801233a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10b      	bne.n	801235a <xTaskCreateStatic+0x4a>
 8012342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012346:	b672      	cpsid	i
 8012348:	f383 8811 	msr	BASEPRI, r3
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	b662      	cpsie	i
 8012356:	61fb      	str	r3, [r7, #28]
 8012358:	e7fe      	b.n	8012358 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801235a:	235c      	movs	r3, #92	; 0x5c
 801235c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	2b5c      	cmp	r3, #92	; 0x5c
 8012362:	d00b      	beq.n	801237c <xTaskCreateStatic+0x6c>
 8012364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012368:	b672      	cpsid	i
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	b662      	cpsie	i
 8012378:	61bb      	str	r3, [r7, #24]
 801237a:	e7fe      	b.n	801237a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801237c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	2b00      	cmp	r3, #0
 8012382:	d01e      	beq.n	80123c2 <xTaskCreateStatic+0xb2>
 8012384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012386:	2b00      	cmp	r3, #0
 8012388:	d01b      	beq.n	80123c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012392:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	2202      	movs	r2, #2
 8012398:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801239c:	2300      	movs	r3, #0
 801239e:	9303      	str	r3, [sp, #12]
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	9302      	str	r3, [sp, #8]
 80123a4:	f107 0314 	add.w	r3, r7, #20
 80123a8:	9301      	str	r3, [sp, #4]
 80123aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	68f8      	ldr	r0, [r7, #12]
 80123b6:	f000 f850 	bl	801245a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80123ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123bc:	f000 f8de 	bl	801257c <prvAddNewTaskToReadyList>
 80123c0:	e001      	b.n	80123c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80123c6:	697b      	ldr	r3, [r7, #20]
	}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3728      	adds	r7, #40	; 0x28
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08c      	sub	sp, #48	; 0x30
 80123d4:	af04      	add	r7, sp, #16
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	603b      	str	r3, [r7, #0]
 80123dc:	4613      	mov	r3, r2
 80123de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80123e0:	88fb      	ldrh	r3, [r7, #6]
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4618      	mov	r0, r3
 80123e6:	f001 fdc1 	bl	8013f6c <pvPortMalloc>
 80123ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d00e      	beq.n	8012410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80123f2:	205c      	movs	r0, #92	; 0x5c
 80123f4:	f001 fdba 	bl	8013f6c <pvPortMalloc>
 80123f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d003      	beq.n	8012408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	697a      	ldr	r2, [r7, #20]
 8012404:	631a      	str	r2, [r3, #48]	; 0x30
 8012406:	e005      	b.n	8012414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012408:	6978      	ldr	r0, [r7, #20]
 801240a:	f001 fe77 	bl	80140fc <vPortFree>
 801240e:	e001      	b.n	8012414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012410:	2300      	movs	r3, #0
 8012412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d017      	beq.n	801244a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	2200      	movs	r2, #0
 801241e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012422:	88fa      	ldrh	r2, [r7, #6]
 8012424:	2300      	movs	r3, #0
 8012426:	9303      	str	r3, [sp, #12]
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	9302      	str	r3, [sp, #8]
 801242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242e:	9301      	str	r3, [sp, #4]
 8012430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	68b9      	ldr	r1, [r7, #8]
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f000 f80e 	bl	801245a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801243e:	69f8      	ldr	r0, [r7, #28]
 8012440:	f000 f89c 	bl	801257c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012444:	2301      	movs	r3, #1
 8012446:	61bb      	str	r3, [r7, #24]
 8012448:	e002      	b.n	8012450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801244a:	f04f 33ff 	mov.w	r3, #4294967295
 801244e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012450:	69bb      	ldr	r3, [r7, #24]
	}
 8012452:	4618      	mov	r0, r3
 8012454:	3720      	adds	r7, #32
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b088      	sub	sp, #32
 801245e:	af00      	add	r7, sp, #0
 8012460:	60f8      	str	r0, [r7, #12]
 8012462:	60b9      	str	r1, [r7, #8]
 8012464:	607a      	str	r2, [r7, #4]
 8012466:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	461a      	mov	r2, r3
 8012472:	21a5      	movs	r1, #165	; 0xa5
 8012474:	f002 fd07 	bl	8014e86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801247c:	6879      	ldr	r1, [r7, #4]
 801247e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012482:	440b      	add	r3, r1
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4413      	add	r3, r2
 8012488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	f023 0307 	bic.w	r3, r3, #7
 8012490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	f003 0307 	and.w	r3, r3, #7
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00b      	beq.n	80124b4 <prvInitialiseNewTask+0x5a>
 801249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a0:	b672      	cpsid	i
 80124a2:	f383 8811 	msr	BASEPRI, r3
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	b662      	cpsie	i
 80124b0:	617b      	str	r3, [r7, #20]
 80124b2:	e7fe      	b.n	80124b2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d01f      	beq.n	80124fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80124ba:	2300      	movs	r3, #0
 80124bc:	61fb      	str	r3, [r7, #28]
 80124be:	e012      	b.n	80124e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	4413      	add	r3, r2
 80124c6:	7819      	ldrb	r1, [r3, #0]
 80124c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	4413      	add	r3, r2
 80124ce:	3334      	adds	r3, #52	; 0x34
 80124d0:	460a      	mov	r2, r1
 80124d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80124d4:	68ba      	ldr	r2, [r7, #8]
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	4413      	add	r3, r2
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d006      	beq.n	80124ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	3301      	adds	r3, #1
 80124e4:	61fb      	str	r3, [r7, #28]
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	2b0f      	cmp	r3, #15
 80124ea:	d9e9      	bls.n	80124c0 <prvInitialiseNewTask+0x66>
 80124ec:	e000      	b.n	80124f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80124ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80124f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f2:	2200      	movs	r2, #0
 80124f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80124f8:	e003      	b.n	8012502 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80124fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012504:	2b37      	cmp	r3, #55	; 0x37
 8012506:	d901      	bls.n	801250c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012508:	2337      	movs	r3, #55	; 0x37
 801250a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012516:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251a:	2200      	movs	r2, #0
 801251c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012520:	3304      	adds	r3, #4
 8012522:	4618      	mov	r0, r3
 8012524:	f7fe fd5c 	bl	8010fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252a:	3318      	adds	r3, #24
 801252c:	4618      	mov	r0, r3
 801252e:	f7fe fd57 	bl	8010fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254a:	2200      	movs	r2, #0
 801254c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012550:	2200      	movs	r2, #0
 8012552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012556:	683a      	ldr	r2, [r7, #0]
 8012558:	68f9      	ldr	r1, [r7, #12]
 801255a:	69b8      	ldr	r0, [r7, #24]
 801255c:	f001 fad8 	bl	8013b10 <pxPortInitialiseStack>
 8012560:	4602      	mov	r2, r0
 8012562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012564:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012572:	bf00      	nop
 8012574:	3720      	adds	r7, #32
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
	...

0801257c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012584:	f001 fbd0 	bl	8013d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012588:	4b2d      	ldr	r3, [pc, #180]	; (8012640 <prvAddNewTaskToReadyList+0xc4>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3301      	adds	r3, #1
 801258e:	4a2c      	ldr	r2, [pc, #176]	; (8012640 <prvAddNewTaskToReadyList+0xc4>)
 8012590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012592:	4b2c      	ldr	r3, [pc, #176]	; (8012644 <prvAddNewTaskToReadyList+0xc8>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d109      	bne.n	80125ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801259a:	4a2a      	ldr	r2, [pc, #168]	; (8012644 <prvAddNewTaskToReadyList+0xc8>)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80125a0:	4b27      	ldr	r3, [pc, #156]	; (8012640 <prvAddNewTaskToReadyList+0xc4>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d110      	bne.n	80125ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80125a8:	f000 fcb0 	bl	8012f0c <prvInitialiseTaskLists>
 80125ac:	e00d      	b.n	80125ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80125ae:	4b26      	ldr	r3, [pc, #152]	; (8012648 <prvAddNewTaskToReadyList+0xcc>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d109      	bne.n	80125ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80125b6:	4b23      	ldr	r3, [pc, #140]	; (8012644 <prvAddNewTaskToReadyList+0xc8>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d802      	bhi.n	80125ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80125c4:	4a1f      	ldr	r2, [pc, #124]	; (8012644 <prvAddNewTaskToReadyList+0xc8>)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80125ca:	4b20      	ldr	r3, [pc, #128]	; (801264c <prvAddNewTaskToReadyList+0xd0>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	3301      	adds	r3, #1
 80125d0:	4a1e      	ldr	r2, [pc, #120]	; (801264c <prvAddNewTaskToReadyList+0xd0>)
 80125d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80125d4:	4b1d      	ldr	r3, [pc, #116]	; (801264c <prvAddNewTaskToReadyList+0xd0>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125e0:	4b1b      	ldr	r3, [pc, #108]	; (8012650 <prvAddNewTaskToReadyList+0xd4>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d903      	bls.n	80125f0 <prvAddNewTaskToReadyList+0x74>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ec:	4a18      	ldr	r2, [pc, #96]	; (8012650 <prvAddNewTaskToReadyList+0xd4>)
 80125ee:	6013      	str	r3, [r2, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f4:	4613      	mov	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4413      	add	r3, r2
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	4a15      	ldr	r2, [pc, #84]	; (8012654 <prvAddNewTaskToReadyList+0xd8>)
 80125fe:	441a      	add	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	3304      	adds	r3, #4
 8012604:	4619      	mov	r1, r3
 8012606:	4610      	mov	r0, r2
 8012608:	f7fe fcf7 	bl	8010ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801260c:	f001 fbbe 	bl	8013d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012610:	4b0d      	ldr	r3, [pc, #52]	; (8012648 <prvAddNewTaskToReadyList+0xcc>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00e      	beq.n	8012636 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012618:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <prvAddNewTaskToReadyList+0xc8>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012622:	429a      	cmp	r2, r3
 8012624:	d207      	bcs.n	8012636 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <prvAddNewTaskToReadyList+0xdc>)
 8012628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012636:	bf00      	nop
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	20000e98 	.word	0x20000e98
 8012644:	200009c4 	.word	0x200009c4
 8012648:	20000ea4 	.word	0x20000ea4
 801264c:	20000eb4 	.word	0x20000eb4
 8012650:	20000ea0 	.word	0x20000ea0
 8012654:	200009c8 	.word	0x200009c8
 8012658:	e000ed04 	.word	0xe000ed04

0801265c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801265c:	b580      	push	{r7, lr}
 801265e:	b08a      	sub	sp, #40	; 0x28
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012666:	2300      	movs	r3, #0
 8012668:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10b      	bne.n	8012688 <vTaskDelayUntil+0x2c>
 8012670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012674:	b672      	cpsid	i
 8012676:	f383 8811 	msr	BASEPRI, r3
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	f3bf 8f4f 	dsb	sy
 8012682:	b662      	cpsie	i
 8012684:	617b      	str	r3, [r7, #20]
 8012686:	e7fe      	b.n	8012686 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10b      	bne.n	80126a6 <vTaskDelayUntil+0x4a>
 801268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012692:	b672      	cpsid	i
 8012694:	f383 8811 	msr	BASEPRI, r3
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	b662      	cpsie	i
 80126a2:	613b      	str	r3, [r7, #16]
 80126a4:	e7fe      	b.n	80126a4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80126a6:	4b2a      	ldr	r3, [pc, #168]	; (8012750 <vTaskDelayUntil+0xf4>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00b      	beq.n	80126c6 <vTaskDelayUntil+0x6a>
 80126ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b2:	b672      	cpsid	i
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	b662      	cpsie	i
 80126c2:	60fb      	str	r3, [r7, #12]
 80126c4:	e7fe      	b.n	80126c4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80126c6:	f000 f8e7 	bl	8012898 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80126ca:	4b22      	ldr	r3, [pc, #136]	; (8012754 <vTaskDelayUntil+0xf8>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	4413      	add	r3, r2
 80126d8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	6a3a      	ldr	r2, [r7, #32]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d20b      	bcs.n	80126fc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	69fa      	ldr	r2, [r7, #28]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d211      	bcs.n	8012712 <vTaskDelayUntil+0xb6>
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	6a3b      	ldr	r3, [r7, #32]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d90d      	bls.n	8012712 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80126f6:	2301      	movs	r3, #1
 80126f8:	627b      	str	r3, [r7, #36]	; 0x24
 80126fa:	e00a      	b.n	8012712 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	69fa      	ldr	r2, [r7, #28]
 8012702:	429a      	cmp	r2, r3
 8012704:	d303      	bcc.n	801270e <vTaskDelayUntil+0xb2>
 8012706:	69fa      	ldr	r2, [r7, #28]
 8012708:	6a3b      	ldr	r3, [r7, #32]
 801270a:	429a      	cmp	r2, r3
 801270c:	d901      	bls.n	8012712 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801270e:	2301      	movs	r3, #1
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	69fa      	ldr	r2, [r7, #28]
 8012716:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	2b00      	cmp	r3, #0
 801271c:	d006      	beq.n	801272c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801271e:	69fa      	ldr	r2, [r7, #28]
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	2100      	movs	r1, #0
 8012726:	4618      	mov	r0, r3
 8012728:	f000 fe4a 	bl	80133c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801272c:	f000 f8c2 	bl	80128b4 <xTaskResumeAll>
 8012730:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d107      	bne.n	8012748 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012738:	4b07      	ldr	r3, [pc, #28]	; (8012758 <vTaskDelayUntil+0xfc>)
 801273a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801273e:	601a      	str	r2, [r3, #0]
 8012740:	f3bf 8f4f 	dsb	sy
 8012744:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012748:	bf00      	nop
 801274a:	3728      	adds	r7, #40	; 0x28
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	20000ec0 	.word	0x20000ec0
 8012754:	20000e9c 	.word	0x20000e9c
 8012758:	e000ed04 	.word	0xe000ed04

0801275c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012764:	2300      	movs	r3, #0
 8012766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d018      	beq.n	80127a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801276e:	4b14      	ldr	r3, [pc, #80]	; (80127c0 <vTaskDelay+0x64>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00b      	beq.n	801278e <vTaskDelay+0x32>
 8012776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277a:	b672      	cpsid	i
 801277c:	f383 8811 	msr	BASEPRI, r3
 8012780:	f3bf 8f6f 	isb	sy
 8012784:	f3bf 8f4f 	dsb	sy
 8012788:	b662      	cpsie	i
 801278a:	60bb      	str	r3, [r7, #8]
 801278c:	e7fe      	b.n	801278c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801278e:	f000 f883 	bl	8012898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012792:	2100      	movs	r1, #0
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 fe13 	bl	80133c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801279a:	f000 f88b 	bl	80128b4 <xTaskResumeAll>
 801279e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d107      	bne.n	80127b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80127a6:	4b07      	ldr	r3, [pc, #28]	; (80127c4 <vTaskDelay+0x68>)
 80127a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ac:	601a      	str	r2, [r3, #0]
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127b6:	bf00      	nop
 80127b8:	3710      	adds	r7, #16
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	20000ec0 	.word	0x20000ec0
 80127c4:	e000ed04 	.word	0xe000ed04

080127c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b08a      	sub	sp, #40	; 0x28
 80127cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80127d6:	463a      	mov	r2, r7
 80127d8:	1d39      	adds	r1, r7, #4
 80127da:	f107 0308 	add.w	r3, r7, #8
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fe fbaa 	bl	8010f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80127e4:	6839      	ldr	r1, [r7, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	9202      	str	r2, [sp, #8]
 80127ec:	9301      	str	r3, [sp, #4]
 80127ee:	2300      	movs	r3, #0
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	2300      	movs	r3, #0
 80127f4:	460a      	mov	r2, r1
 80127f6:	4922      	ldr	r1, [pc, #136]	; (8012880 <vTaskStartScheduler+0xb8>)
 80127f8:	4822      	ldr	r0, [pc, #136]	; (8012884 <vTaskStartScheduler+0xbc>)
 80127fa:	f7ff fd89 	bl	8012310 <xTaskCreateStatic>
 80127fe:	4602      	mov	r2, r0
 8012800:	4b21      	ldr	r3, [pc, #132]	; (8012888 <vTaskStartScheduler+0xc0>)
 8012802:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012804:	4b20      	ldr	r3, [pc, #128]	; (8012888 <vTaskStartScheduler+0xc0>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801280c:	2301      	movs	r3, #1
 801280e:	617b      	str	r3, [r7, #20]
 8012810:	e001      	b.n	8012816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d102      	bne.n	8012822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801281c:	f000 fe24 	bl	8013468 <xTimerCreateTimerTask>
 8012820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	2b01      	cmp	r3, #1
 8012826:	d117      	bne.n	8012858 <vTaskStartScheduler+0x90>
 8012828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282c:	b672      	cpsid	i
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
 801283a:	b662      	cpsie	i
 801283c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801283e:	4b13      	ldr	r3, [pc, #76]	; (801288c <vTaskStartScheduler+0xc4>)
 8012840:	f04f 32ff 	mov.w	r2, #4294967295
 8012844:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012846:	4b12      	ldr	r3, [pc, #72]	; (8012890 <vTaskStartScheduler+0xc8>)
 8012848:	2201      	movs	r2, #1
 801284a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801284c:	4b11      	ldr	r3, [pc, #68]	; (8012894 <vTaskStartScheduler+0xcc>)
 801284e:	2200      	movs	r2, #0
 8012850:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012852:	f001 f9ed 	bl	8013c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012856:	e00f      	b.n	8012878 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801285e:	d10b      	bne.n	8012878 <vTaskStartScheduler+0xb0>
 8012860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012864:	b672      	cpsid	i
 8012866:	f383 8811 	msr	BASEPRI, r3
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	b662      	cpsie	i
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	e7fe      	b.n	8012876 <vTaskStartScheduler+0xae>
}
 8012878:	bf00      	nop
 801287a:	3718      	adds	r7, #24
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	08016d8c 	.word	0x08016d8c
 8012884:	08012edd 	.word	0x08012edd
 8012888:	20000ebc 	.word	0x20000ebc
 801288c:	20000eb8 	.word	0x20000eb8
 8012890:	20000ea4 	.word	0x20000ea4
 8012894:	20000e9c 	.word	0x20000e9c

08012898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012898:	b480      	push	{r7}
 801289a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801289c:	4b04      	ldr	r3, [pc, #16]	; (80128b0 <vTaskSuspendAll+0x18>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	3301      	adds	r3, #1
 80128a2:	4a03      	ldr	r2, [pc, #12]	; (80128b0 <vTaskSuspendAll+0x18>)
 80128a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80128a6:	bf00      	nop
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	20000ec0 	.word	0x20000ec0

080128b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80128ba:	2300      	movs	r3, #0
 80128bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80128be:	2300      	movs	r3, #0
 80128c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80128c2:	4b42      	ldr	r3, [pc, #264]	; (80129cc <xTaskResumeAll+0x118>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d10b      	bne.n	80128e2 <xTaskResumeAll+0x2e>
 80128ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ce:	b672      	cpsid	i
 80128d0:	f383 8811 	msr	BASEPRI, r3
 80128d4:	f3bf 8f6f 	isb	sy
 80128d8:	f3bf 8f4f 	dsb	sy
 80128dc:	b662      	cpsie	i
 80128de:	603b      	str	r3, [r7, #0]
 80128e0:	e7fe      	b.n	80128e0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80128e2:	f001 fa21 	bl	8013d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128e6:	4b39      	ldr	r3, [pc, #228]	; (80129cc <xTaskResumeAll+0x118>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	4a37      	ldr	r2, [pc, #220]	; (80129cc <xTaskResumeAll+0x118>)
 80128ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128f0:	4b36      	ldr	r3, [pc, #216]	; (80129cc <xTaskResumeAll+0x118>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d162      	bne.n	80129be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80128f8:	4b35      	ldr	r3, [pc, #212]	; (80129d0 <xTaskResumeAll+0x11c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d05e      	beq.n	80129be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012900:	e02f      	b.n	8012962 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012902:	4b34      	ldr	r3, [pc, #208]	; (80129d4 <xTaskResumeAll+0x120>)
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	3318      	adds	r3, #24
 801290e:	4618      	mov	r0, r3
 8012910:	f7fe fbd0 	bl	80110b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	3304      	adds	r3, #4
 8012918:	4618      	mov	r0, r3
 801291a:	f7fe fbcb 	bl	80110b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012922:	4b2d      	ldr	r3, [pc, #180]	; (80129d8 <xTaskResumeAll+0x124>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	429a      	cmp	r2, r3
 8012928:	d903      	bls.n	8012932 <xTaskResumeAll+0x7e>
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801292e:	4a2a      	ldr	r2, [pc, #168]	; (80129d8 <xTaskResumeAll+0x124>)
 8012930:	6013      	str	r3, [r2, #0]
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012936:	4613      	mov	r3, r2
 8012938:	009b      	lsls	r3, r3, #2
 801293a:	4413      	add	r3, r2
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	4a27      	ldr	r2, [pc, #156]	; (80129dc <xTaskResumeAll+0x128>)
 8012940:	441a      	add	r2, r3
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	3304      	adds	r3, #4
 8012946:	4619      	mov	r1, r3
 8012948:	4610      	mov	r0, r2
 801294a:	f7fe fb56 	bl	8010ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012952:	4b23      	ldr	r3, [pc, #140]	; (80129e0 <xTaskResumeAll+0x12c>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012958:	429a      	cmp	r2, r3
 801295a:	d302      	bcc.n	8012962 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801295c:	4b21      	ldr	r3, [pc, #132]	; (80129e4 <xTaskResumeAll+0x130>)
 801295e:	2201      	movs	r2, #1
 8012960:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012962:	4b1c      	ldr	r3, [pc, #112]	; (80129d4 <xTaskResumeAll+0x120>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1cb      	bne.n	8012902 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d001      	beq.n	8012974 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012970:	f000 fb68 	bl	8013044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012974:	4b1c      	ldr	r3, [pc, #112]	; (80129e8 <xTaskResumeAll+0x134>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d010      	beq.n	80129a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012980:	f000 f858 	bl	8012a34 <xTaskIncrementTick>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d002      	beq.n	8012990 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801298a:	4b16      	ldr	r3, [pc, #88]	; (80129e4 <xTaskResumeAll+0x130>)
 801298c:	2201      	movs	r2, #1
 801298e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	3b01      	subs	r3, #1
 8012994:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d1f1      	bne.n	8012980 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801299c:	4b12      	ldr	r3, [pc, #72]	; (80129e8 <xTaskResumeAll+0x134>)
 801299e:	2200      	movs	r2, #0
 80129a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80129a2:	4b10      	ldr	r3, [pc, #64]	; (80129e4 <xTaskResumeAll+0x130>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d009      	beq.n	80129be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80129aa:	2301      	movs	r3, #1
 80129ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <xTaskResumeAll+0x138>)
 80129b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129b4:	601a      	str	r2, [r3, #0]
 80129b6:	f3bf 8f4f 	dsb	sy
 80129ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129be:	f001 f9e5 	bl	8013d8c <vPortExitCritical>

	return xAlreadyYielded;
 80129c2:	68bb      	ldr	r3, [r7, #8]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20000ec0 	.word	0x20000ec0
 80129d0:	20000e98 	.word	0x20000e98
 80129d4:	20000e58 	.word	0x20000e58
 80129d8:	20000ea0 	.word	0x20000ea0
 80129dc:	200009c8 	.word	0x200009c8
 80129e0:	200009c4 	.word	0x200009c4
 80129e4:	20000eac 	.word	0x20000eac
 80129e8:	20000ea8 	.word	0x20000ea8
 80129ec:	e000ed04 	.word	0xe000ed04

080129f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80129f6:	4b05      	ldr	r3, [pc, #20]	; (8012a0c <xTaskGetTickCount+0x1c>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80129fc:	687b      	ldr	r3, [r7, #4]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	20000e9c 	.word	0x20000e9c

08012a10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a16:	f001 fa67 	bl	8013ee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012a1e:	4b04      	ldr	r3, [pc, #16]	; (8012a30 <xTaskGetTickCountFromISR+0x20>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a24:	683b      	ldr	r3, [r7, #0]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	20000e9c 	.word	0x20000e9c

08012a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b086      	sub	sp, #24
 8012a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a3e:	4b4f      	ldr	r3, [pc, #316]	; (8012b7c <xTaskIncrementTick+0x148>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 808a 	bne.w	8012b5c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a48:	4b4d      	ldr	r3, [pc, #308]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a50:	4a4b      	ldr	r2, [pc, #300]	; (8012b80 <xTaskIncrementTick+0x14c>)
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d121      	bne.n	8012aa0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a5c:	4b49      	ldr	r3, [pc, #292]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00b      	beq.n	8012a7e <xTaskIncrementTick+0x4a>
 8012a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6a:	b672      	cpsid	i
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	b662      	cpsie	i
 8012a7a:	603b      	str	r3, [r7, #0]
 8012a7c:	e7fe      	b.n	8012a7c <xTaskIncrementTick+0x48>
 8012a7e:	4b41      	ldr	r3, [pc, #260]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	4b40      	ldr	r3, [pc, #256]	; (8012b88 <xTaskIncrementTick+0x154>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a3e      	ldr	r2, [pc, #248]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	4a3e      	ldr	r2, [pc, #248]	; (8012b88 <xTaskIncrementTick+0x154>)
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6013      	str	r3, [r2, #0]
 8012a92:	4b3e      	ldr	r3, [pc, #248]	; (8012b8c <xTaskIncrementTick+0x158>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	3301      	adds	r3, #1
 8012a98:	4a3c      	ldr	r2, [pc, #240]	; (8012b8c <xTaskIncrementTick+0x158>)
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	f000 fad2 	bl	8013044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012aa0:	4b3b      	ldr	r3, [pc, #236]	; (8012b90 <xTaskIncrementTick+0x15c>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d349      	bcc.n	8012b3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012aaa:	4b36      	ldr	r3, [pc, #216]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d104      	bne.n	8012abe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ab4:	4b36      	ldr	r3, [pc, #216]	; (8012b90 <xTaskIncrementTick+0x15c>)
 8012ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aba:	601a      	str	r2, [r3, #0]
					break;
 8012abc:	e03f      	b.n	8012b3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012abe:	4b31      	ldr	r3, [pc, #196]	; (8012b84 <xTaskIncrementTick+0x150>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012ace:	693a      	ldr	r2, [r7, #16]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d203      	bcs.n	8012ade <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ad6:	4a2e      	ldr	r2, [pc, #184]	; (8012b90 <xTaskIncrementTick+0x15c>)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012adc:	e02f      	b.n	8012b3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fe fae6 	bl	80110b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d004      	beq.n	8012afa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	3318      	adds	r3, #24
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7fe fadd 	bl	80110b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012afe:	4b25      	ldr	r3, [pc, #148]	; (8012b94 <xTaskIncrementTick+0x160>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d903      	bls.n	8012b0e <xTaskIncrementTick+0xda>
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0a:	4a22      	ldr	r2, [pc, #136]	; (8012b94 <xTaskIncrementTick+0x160>)
 8012b0c:	6013      	str	r3, [r2, #0]
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b12:	4613      	mov	r3, r2
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	4413      	add	r3, r2
 8012b18:	009b      	lsls	r3, r3, #2
 8012b1a:	4a1f      	ldr	r2, [pc, #124]	; (8012b98 <xTaskIncrementTick+0x164>)
 8012b1c:	441a      	add	r2, r3
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	3304      	adds	r3, #4
 8012b22:	4619      	mov	r1, r3
 8012b24:	4610      	mov	r0, r2
 8012b26:	f7fe fa68 	bl	8010ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b2e:	4b1b      	ldr	r3, [pc, #108]	; (8012b9c <xTaskIncrementTick+0x168>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d3b8      	bcc.n	8012aaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b3c:	e7b5      	b.n	8012aaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b3e:	4b17      	ldr	r3, [pc, #92]	; (8012b9c <xTaskIncrementTick+0x168>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b44:	4914      	ldr	r1, [pc, #80]	; (8012b98 <xTaskIncrementTick+0x164>)
 8012b46:	4613      	mov	r3, r2
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4413      	add	r3, r2
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	440b      	add	r3, r1
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d907      	bls.n	8012b66 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012b56:	2301      	movs	r3, #1
 8012b58:	617b      	str	r3, [r7, #20]
 8012b5a:	e004      	b.n	8012b66 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012b5c:	4b10      	ldr	r3, [pc, #64]	; (8012ba0 <xTaskIncrementTick+0x16c>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	3301      	adds	r3, #1
 8012b62:	4a0f      	ldr	r2, [pc, #60]	; (8012ba0 <xTaskIncrementTick+0x16c>)
 8012b64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012b66:	4b0f      	ldr	r3, [pc, #60]	; (8012ba4 <xTaskIncrementTick+0x170>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d001      	beq.n	8012b72 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012b72:	697b      	ldr	r3, [r7, #20]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3718      	adds	r7, #24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	20000ec0 	.word	0x20000ec0
 8012b80:	20000e9c 	.word	0x20000e9c
 8012b84:	20000e50 	.word	0x20000e50
 8012b88:	20000e54 	.word	0x20000e54
 8012b8c:	20000eb0 	.word	0x20000eb0
 8012b90:	20000eb8 	.word	0x20000eb8
 8012b94:	20000ea0 	.word	0x20000ea0
 8012b98:	200009c8 	.word	0x200009c8
 8012b9c:	200009c4 	.word	0x200009c4
 8012ba0:	20000ea8 	.word	0x20000ea8
 8012ba4:	20000eac 	.word	0x20000eac

08012ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012bae:	4b28      	ldr	r3, [pc, #160]	; (8012c50 <vTaskSwitchContext+0xa8>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d003      	beq.n	8012bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012bb6:	4b27      	ldr	r3, [pc, #156]	; (8012c54 <vTaskSwitchContext+0xac>)
 8012bb8:	2201      	movs	r2, #1
 8012bba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012bbc:	e042      	b.n	8012c44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8012bbe:	4b25      	ldr	r3, [pc, #148]	; (8012c54 <vTaskSwitchContext+0xac>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bc4:	4b24      	ldr	r3, [pc, #144]	; (8012c58 <vTaskSwitchContext+0xb0>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	60fb      	str	r3, [r7, #12]
 8012bca:	e011      	b.n	8012bf0 <vTaskSwitchContext+0x48>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d10b      	bne.n	8012bea <vTaskSwitchContext+0x42>
 8012bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd6:	b672      	cpsid	i
 8012bd8:	f383 8811 	msr	BASEPRI, r3
 8012bdc:	f3bf 8f6f 	isb	sy
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	b662      	cpsie	i
 8012be6:	607b      	str	r3, [r7, #4]
 8012be8:	e7fe      	b.n	8012be8 <vTaskSwitchContext+0x40>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	3b01      	subs	r3, #1
 8012bee:	60fb      	str	r3, [r7, #12]
 8012bf0:	491a      	ldr	r1, [pc, #104]	; (8012c5c <vTaskSwitchContext+0xb4>)
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	440b      	add	r3, r1
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0e3      	beq.n	8012bcc <vTaskSwitchContext+0x24>
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	4613      	mov	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4a13      	ldr	r2, [pc, #76]	; (8012c5c <vTaskSwitchContext+0xb4>)
 8012c10:	4413      	add	r3, r2
 8012c12:	60bb      	str	r3, [r7, #8]
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	685a      	ldr	r2, [r3, #4]
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	605a      	str	r2, [r3, #4]
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	685a      	ldr	r2, [r3, #4]
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	3308      	adds	r3, #8
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d104      	bne.n	8012c34 <vTaskSwitchContext+0x8c>
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	685a      	ldr	r2, [r3, #4]
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	605a      	str	r2, [r3, #4]
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	4a09      	ldr	r2, [pc, #36]	; (8012c60 <vTaskSwitchContext+0xb8>)
 8012c3c:	6013      	str	r3, [r2, #0]
 8012c3e:	4a06      	ldr	r2, [pc, #24]	; (8012c58 <vTaskSwitchContext+0xb0>)
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6013      	str	r3, [r2, #0]
}
 8012c44:	bf00      	nop
 8012c46:	3714      	adds	r7, #20
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	20000ec0 	.word	0x20000ec0
 8012c54:	20000eac 	.word	0x20000eac
 8012c58:	20000ea0 	.word	0x20000ea0
 8012c5c:	200009c8 	.word	0x200009c8
 8012c60:	200009c4 	.word	0x200009c4

08012c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d10b      	bne.n	8012c8c <vTaskPlaceOnEventList+0x28>
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	b672      	cpsid	i
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	b662      	cpsie	i
 8012c88:	60fb      	str	r3, [r7, #12]
 8012c8a:	e7fe      	b.n	8012c8a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c8c:	4b07      	ldr	r3, [pc, #28]	; (8012cac <vTaskPlaceOnEventList+0x48>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3318      	adds	r3, #24
 8012c92:	4619      	mov	r1, r3
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7fe f9d4 	bl	8011042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	6838      	ldr	r0, [r7, #0]
 8012c9e:	f000 fb8f 	bl	80133c0 <prvAddCurrentTaskToDelayedList>
}
 8012ca2:	bf00      	nop
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	200009c4 	.word	0x200009c4

08012cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d10b      	bne.n	8012cda <vTaskPlaceOnEventListRestricted+0x2a>
 8012cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc6:	b672      	cpsid	i
 8012cc8:	f383 8811 	msr	BASEPRI, r3
 8012ccc:	f3bf 8f6f 	isb	sy
 8012cd0:	f3bf 8f4f 	dsb	sy
 8012cd4:	b662      	cpsie	i
 8012cd6:	617b      	str	r3, [r7, #20]
 8012cd8:	e7fe      	b.n	8012cd8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012cda:	4b0a      	ldr	r3, [pc, #40]	; (8012d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	3318      	adds	r3, #24
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f7fe f989 	bl	8010ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d002      	beq.n	8012cf4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012cee:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	68b8      	ldr	r0, [r7, #8]
 8012cf8:	f000 fb62 	bl	80133c0 <prvAddCurrentTaskToDelayedList>
	}
 8012cfc:	bf00      	nop
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	200009c4 	.word	0x200009c4

08012d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	68db      	ldr	r3, [r3, #12]
 8012d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10b      	bne.n	8012d36 <xTaskRemoveFromEventList+0x2e>
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	b672      	cpsid	i
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	b662      	cpsie	i
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	e7fe      	b.n	8012d34 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	3318      	adds	r3, #24
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fe f9ba 	bl	80110b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d40:	4b1d      	ldr	r3, [pc, #116]	; (8012db8 <xTaskRemoveFromEventList+0xb0>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d11d      	bne.n	8012d84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe f9b1 	bl	80110b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d56:	4b19      	ldr	r3, [pc, #100]	; (8012dbc <xTaskRemoveFromEventList+0xb4>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d903      	bls.n	8012d66 <xTaskRemoveFromEventList+0x5e>
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d62:	4a16      	ldr	r2, [pc, #88]	; (8012dbc <xTaskRemoveFromEventList+0xb4>)
 8012d64:	6013      	str	r3, [r2, #0]
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	4a13      	ldr	r2, [pc, #76]	; (8012dc0 <xTaskRemoveFromEventList+0xb8>)
 8012d74:	441a      	add	r2, r3
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	3304      	adds	r3, #4
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	4610      	mov	r0, r2
 8012d7e:	f7fe f93c 	bl	8010ffa <vListInsertEnd>
 8012d82:	e005      	b.n	8012d90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	3318      	adds	r3, #24
 8012d88:	4619      	mov	r1, r3
 8012d8a:	480e      	ldr	r0, [pc, #56]	; (8012dc4 <xTaskRemoveFromEventList+0xbc>)
 8012d8c:	f7fe f935 	bl	8010ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d94:	4b0c      	ldr	r3, [pc, #48]	; (8012dc8 <xTaskRemoveFromEventList+0xc0>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d905      	bls.n	8012daa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012da2:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <xTaskRemoveFromEventList+0xc4>)
 8012da4:	2201      	movs	r2, #1
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	e001      	b.n	8012dae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012daa:	2300      	movs	r3, #0
 8012dac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012dae:	697b      	ldr	r3, [r7, #20]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3718      	adds	r7, #24
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	20000ec0 	.word	0x20000ec0
 8012dbc:	20000ea0 	.word	0x20000ea0
 8012dc0:	200009c8 	.word	0x200009c8
 8012dc4:	20000e58 	.word	0x20000e58
 8012dc8:	200009c4 	.word	0x200009c4
 8012dcc:	20000eac 	.word	0x20000eac

08012dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012dd8:	4b06      	ldr	r3, [pc, #24]	; (8012df4 <vTaskInternalSetTimeOutState+0x24>)
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012de0:	4b05      	ldr	r3, [pc, #20]	; (8012df8 <vTaskInternalSetTimeOutState+0x28>)
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	605a      	str	r2, [r3, #4]
}
 8012de8:	bf00      	nop
 8012dea:	370c      	adds	r7, #12
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr
 8012df4:	20000eb0 	.word	0x20000eb0
 8012df8:	20000e9c 	.word	0x20000e9c

08012dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d10b      	bne.n	8012e24 <xTaskCheckForTimeOut+0x28>
 8012e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e10:	b672      	cpsid	i
 8012e12:	f383 8811 	msr	BASEPRI, r3
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	f3bf 8f4f 	dsb	sy
 8012e1e:	b662      	cpsie	i
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	e7fe      	b.n	8012e22 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d10b      	bne.n	8012e42 <xTaskCheckForTimeOut+0x46>
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	b672      	cpsid	i
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	b662      	cpsie	i
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	e7fe      	b.n	8012e40 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012e42:	f000 ff71 	bl	8013d28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012e46:	4b1d      	ldr	r3, [pc, #116]	; (8012ebc <xTaskCheckForTimeOut+0xc0>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	69ba      	ldr	r2, [r7, #24]
 8012e52:	1ad3      	subs	r3, r2, r3
 8012e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e5e:	d102      	bne.n	8012e66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012e60:	2300      	movs	r3, #0
 8012e62:	61fb      	str	r3, [r7, #28]
 8012e64:	e023      	b.n	8012eae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	4b15      	ldr	r3, [pc, #84]	; (8012ec0 <xTaskCheckForTimeOut+0xc4>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d007      	beq.n	8012e82 <xTaskCheckForTimeOut+0x86>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d302      	bcc.n	8012e82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e015      	b.n	8012eae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d20b      	bcs.n	8012ea4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	1ad2      	subs	r2, r2, r3
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7ff ff99 	bl	8012dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	61fb      	str	r3, [r7, #28]
 8012ea2:	e004      	b.n	8012eae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012eae:	f000 ff6d 	bl	8013d8c <vPortExitCritical>

	return xReturn;
 8012eb2:	69fb      	ldr	r3, [r7, #28]
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	20000e9c 	.word	0x20000e9c
 8012ec0:	20000eb0 	.word	0x20000eb0

08012ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012ec8:	4b03      	ldr	r3, [pc, #12]	; (8012ed8 <vTaskMissedYield+0x14>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	601a      	str	r2, [r3, #0]
}
 8012ece:	bf00      	nop
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr
 8012ed8:	20000eac 	.word	0x20000eac

08012edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ee4:	f000 f852 	bl	8012f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ee8:	4b06      	ldr	r3, [pc, #24]	; (8012f04 <prvIdleTask+0x28>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d9f9      	bls.n	8012ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <prvIdleTask+0x2c>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012f00:	e7f0      	b.n	8012ee4 <prvIdleTask+0x8>
 8012f02:	bf00      	nop
 8012f04:	200009c8 	.word	0x200009c8
 8012f08:	e000ed04 	.word	0xe000ed04

08012f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f12:	2300      	movs	r3, #0
 8012f14:	607b      	str	r3, [r7, #4]
 8012f16:	e00c      	b.n	8012f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	4613      	mov	r3, r2
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	4413      	add	r3, r2
 8012f20:	009b      	lsls	r3, r3, #2
 8012f22:	4a12      	ldr	r2, [pc, #72]	; (8012f6c <prvInitialiseTaskLists+0x60>)
 8012f24:	4413      	add	r3, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe f83a 	bl	8010fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	607b      	str	r3, [r7, #4]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b37      	cmp	r3, #55	; 0x37
 8012f36:	d9ef      	bls.n	8012f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012f38:	480d      	ldr	r0, [pc, #52]	; (8012f70 <prvInitialiseTaskLists+0x64>)
 8012f3a:	f7fe f831 	bl	8010fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012f3e:	480d      	ldr	r0, [pc, #52]	; (8012f74 <prvInitialiseTaskLists+0x68>)
 8012f40:	f7fe f82e 	bl	8010fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012f44:	480c      	ldr	r0, [pc, #48]	; (8012f78 <prvInitialiseTaskLists+0x6c>)
 8012f46:	f7fe f82b 	bl	8010fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012f4a:	480c      	ldr	r0, [pc, #48]	; (8012f7c <prvInitialiseTaskLists+0x70>)
 8012f4c:	f7fe f828 	bl	8010fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012f50:	480b      	ldr	r0, [pc, #44]	; (8012f80 <prvInitialiseTaskLists+0x74>)
 8012f52:	f7fe f825 	bl	8010fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012f56:	4b0b      	ldr	r3, [pc, #44]	; (8012f84 <prvInitialiseTaskLists+0x78>)
 8012f58:	4a05      	ldr	r2, [pc, #20]	; (8012f70 <prvInitialiseTaskLists+0x64>)
 8012f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012f5c:	4b0a      	ldr	r3, [pc, #40]	; (8012f88 <prvInitialiseTaskLists+0x7c>)
 8012f5e:	4a05      	ldr	r2, [pc, #20]	; (8012f74 <prvInitialiseTaskLists+0x68>)
 8012f60:	601a      	str	r2, [r3, #0]
}
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	200009c8 	.word	0x200009c8
 8012f70:	20000e28 	.word	0x20000e28
 8012f74:	20000e3c 	.word	0x20000e3c
 8012f78:	20000e58 	.word	0x20000e58
 8012f7c:	20000e6c 	.word	0x20000e6c
 8012f80:	20000e84 	.word	0x20000e84
 8012f84:	20000e50 	.word	0x20000e50
 8012f88:	20000e54 	.word	0x20000e54

08012f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f92:	e019      	b.n	8012fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f94:	f000 fec8 	bl	8013d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f98:	4b0f      	ldr	r3, [pc, #60]	; (8012fd8 <prvCheckTasksWaitingTermination+0x4c>)
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7fe f885 	bl	80110b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012faa:	4b0c      	ldr	r3, [pc, #48]	; (8012fdc <prvCheckTasksWaitingTermination+0x50>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	4a0a      	ldr	r2, [pc, #40]	; (8012fdc <prvCheckTasksWaitingTermination+0x50>)
 8012fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012fb4:	4b0a      	ldr	r3, [pc, #40]	; (8012fe0 <prvCheckTasksWaitingTermination+0x54>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	4a09      	ldr	r2, [pc, #36]	; (8012fe0 <prvCheckTasksWaitingTermination+0x54>)
 8012fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012fbe:	f000 fee5 	bl	8013d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f80e 	bl	8012fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012fc8:	4b05      	ldr	r3, [pc, #20]	; (8012fe0 <prvCheckTasksWaitingTermination+0x54>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1e1      	bne.n	8012f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	20000e6c 	.word	0x20000e6c
 8012fdc:	20000e98 	.word	0x20000e98
 8012fe0:	20000e80 	.word	0x20000e80

08012fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d108      	bne.n	8013008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f001 f87e 	bl	80140fc <vPortFree>
				vPortFree( pxTCB );
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f001 f87b 	bl	80140fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013006:	e019      	b.n	801303c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801300e:	2b01      	cmp	r3, #1
 8013010:	d103      	bne.n	801301a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f001 f872 	bl	80140fc <vPortFree>
	}
 8013018:	e010      	b.n	801303c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013020:	2b02      	cmp	r3, #2
 8013022:	d00b      	beq.n	801303c <prvDeleteTCB+0x58>
 8013024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013028:	b672      	cpsid	i
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	b662      	cpsie	i
 8013038:	60fb      	str	r3, [r7, #12]
 801303a:	e7fe      	b.n	801303a <prvDeleteTCB+0x56>
	}
 801303c:	bf00      	nop
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801304a:	4b0c      	ldr	r3, [pc, #48]	; (801307c <prvResetNextTaskUnblockTime+0x38>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d104      	bne.n	801305e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013054:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <prvResetNextTaskUnblockTime+0x3c>)
 8013056:	f04f 32ff 	mov.w	r2, #4294967295
 801305a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801305c:	e008      	b.n	8013070 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801305e:	4b07      	ldr	r3, [pc, #28]	; (801307c <prvResetNextTaskUnblockTime+0x38>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	4a04      	ldr	r2, [pc, #16]	; (8013080 <prvResetNextTaskUnblockTime+0x3c>)
 801306e:	6013      	str	r3, [r2, #0]
}
 8013070:	bf00      	nop
 8013072:	370c      	adds	r7, #12
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr
 801307c:	20000e50 	.word	0x20000e50
 8013080:	20000eb8 	.word	0x20000eb8

08013084 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801308a:	4b05      	ldr	r3, [pc, #20]	; (80130a0 <xTaskGetCurrentTaskHandle+0x1c>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013090:	687b      	ldr	r3, [r7, #4]
	}
 8013092:	4618      	mov	r0, r3
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr
 801309e:	bf00      	nop
 80130a0:	200009c4 	.word	0x200009c4

080130a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80130aa:	4b0b      	ldr	r3, [pc, #44]	; (80130d8 <xTaskGetSchedulerState+0x34>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d102      	bne.n	80130b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80130b2:	2301      	movs	r3, #1
 80130b4:	607b      	str	r3, [r7, #4]
 80130b6:	e008      	b.n	80130ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130b8:	4b08      	ldr	r3, [pc, #32]	; (80130dc <xTaskGetSchedulerState+0x38>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d102      	bne.n	80130c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80130c0:	2302      	movs	r3, #2
 80130c2:	607b      	str	r3, [r7, #4]
 80130c4:	e001      	b.n	80130ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80130c6:	2300      	movs	r3, #0
 80130c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80130ca:	687b      	ldr	r3, [r7, #4]
	}
 80130cc:	4618      	mov	r0, r3
 80130ce:	370c      	adds	r7, #12
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr
 80130d8:	20000ea4 	.word	0x20000ea4
 80130dc:	20000ec0 	.word	0x20000ec0

080130e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b084      	sub	sp, #16
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80130ec:	2300      	movs	r3, #0
 80130ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d051      	beq.n	801319a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130fa:	4b2a      	ldr	r3, [pc, #168]	; (80131a4 <xTaskPriorityInherit+0xc4>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013100:	429a      	cmp	r2, r3
 8013102:	d241      	bcs.n	8013188 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	699b      	ldr	r3, [r3, #24]
 8013108:	2b00      	cmp	r3, #0
 801310a:	db06      	blt.n	801311a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801310c:	4b25      	ldr	r3, [pc, #148]	; (80131a4 <xTaskPriorityInherit+0xc4>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013112:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	6959      	ldr	r1, [r3, #20]
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013122:	4613      	mov	r3, r2
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4413      	add	r3, r2
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	4a1f      	ldr	r2, [pc, #124]	; (80131a8 <xTaskPriorityInherit+0xc8>)
 801312c:	4413      	add	r3, r2
 801312e:	4299      	cmp	r1, r3
 8013130:	d122      	bne.n	8013178 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	3304      	adds	r3, #4
 8013136:	4618      	mov	r0, r3
 8013138:	f7fd ffbc 	bl	80110b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801313c:	4b19      	ldr	r3, [pc, #100]	; (80131a4 <xTaskPriorityInherit+0xc4>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801314a:	4b18      	ldr	r3, [pc, #96]	; (80131ac <xTaskPriorityInherit+0xcc>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	429a      	cmp	r2, r3
 8013150:	d903      	bls.n	801315a <xTaskPriorityInherit+0x7a>
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013156:	4a15      	ldr	r2, [pc, #84]	; (80131ac <xTaskPriorityInherit+0xcc>)
 8013158:	6013      	str	r3, [r2, #0]
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315e:	4613      	mov	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	4413      	add	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	4a10      	ldr	r2, [pc, #64]	; (80131a8 <xTaskPriorityInherit+0xc8>)
 8013168:	441a      	add	r2, r3
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	3304      	adds	r3, #4
 801316e:	4619      	mov	r1, r3
 8013170:	4610      	mov	r0, r2
 8013172:	f7fd ff42 	bl	8010ffa <vListInsertEnd>
 8013176:	e004      	b.n	8013182 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013178:	4b0a      	ldr	r3, [pc, #40]	; (80131a4 <xTaskPriorityInherit+0xc4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013182:	2301      	movs	r3, #1
 8013184:	60fb      	str	r3, [r7, #12]
 8013186:	e008      	b.n	801319a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801318c:	4b05      	ldr	r3, [pc, #20]	; (80131a4 <xTaskPriorityInherit+0xc4>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013192:	429a      	cmp	r2, r3
 8013194:	d201      	bcs.n	801319a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013196:	2301      	movs	r3, #1
 8013198:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801319a:	68fb      	ldr	r3, [r7, #12]
	}
 801319c:	4618      	mov	r0, r3
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	200009c4 	.word	0x200009c4
 80131a8:	200009c8 	.word	0x200009c8
 80131ac:	20000ea0 	.word	0x20000ea0

080131b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80131bc:	2300      	movs	r3, #0
 80131be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d058      	beq.n	8013278 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80131c6:	4b2f      	ldr	r3, [pc, #188]	; (8013284 <xTaskPriorityDisinherit+0xd4>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	693a      	ldr	r2, [r7, #16]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d00b      	beq.n	80131e8 <xTaskPriorityDisinherit+0x38>
 80131d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d4:	b672      	cpsid	i
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	b662      	cpsie	i
 80131e4:	60fb      	str	r3, [r7, #12]
 80131e6:	e7fe      	b.n	80131e6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d10b      	bne.n	8013208 <xTaskPriorityDisinherit+0x58>
 80131f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f4:	b672      	cpsid	i
 80131f6:	f383 8811 	msr	BASEPRI, r3
 80131fa:	f3bf 8f6f 	isb	sy
 80131fe:	f3bf 8f4f 	dsb	sy
 8013202:	b662      	cpsie	i
 8013204:	60bb      	str	r3, [r7, #8]
 8013206:	e7fe      	b.n	8013206 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801320c:	1e5a      	subs	r2, r3, #1
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801321a:	429a      	cmp	r2, r3
 801321c:	d02c      	beq.n	8013278 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013222:	2b00      	cmp	r3, #0
 8013224:	d128      	bne.n	8013278 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	3304      	adds	r3, #4
 801322a:	4618      	mov	r0, r3
 801322c:	f7fd ff42 	bl	80110b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013248:	4b0f      	ldr	r3, [pc, #60]	; (8013288 <xTaskPriorityDisinherit+0xd8>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	429a      	cmp	r2, r3
 801324e:	d903      	bls.n	8013258 <xTaskPriorityDisinherit+0xa8>
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013254:	4a0c      	ldr	r2, [pc, #48]	; (8013288 <xTaskPriorityDisinherit+0xd8>)
 8013256:	6013      	str	r3, [r2, #0]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325c:	4613      	mov	r3, r2
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	4413      	add	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4a09      	ldr	r2, [pc, #36]	; (801328c <xTaskPriorityDisinherit+0xdc>)
 8013266:	441a      	add	r2, r3
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	3304      	adds	r3, #4
 801326c:	4619      	mov	r1, r3
 801326e:	4610      	mov	r0, r2
 8013270:	f7fd fec3 	bl	8010ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013274:	2301      	movs	r3, #1
 8013276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013278:	697b      	ldr	r3, [r7, #20]
	}
 801327a:	4618      	mov	r0, r3
 801327c:	3718      	adds	r7, #24
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	200009c4 	.word	0x200009c4
 8013288:	20000ea0 	.word	0x20000ea0
 801328c:	200009c8 	.word	0x200009c8

08013290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801329e:	2301      	movs	r3, #1
 80132a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d06c      	beq.n	8013382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d10b      	bne.n	80132c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80132b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b4:	b672      	cpsid	i
 80132b6:	f383 8811 	msr	BASEPRI, r3
 80132ba:	f3bf 8f6f 	isb	sy
 80132be:	f3bf 8f4f 	dsb	sy
 80132c2:	b662      	cpsie	i
 80132c4:	60fb      	str	r3, [r7, #12]
 80132c6:	e7fe      	b.n	80132c6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d902      	bls.n	80132d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	61fb      	str	r3, [r7, #28]
 80132d6:	e002      	b.n	80132de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e2:	69fa      	ldr	r2, [r7, #28]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d04c      	beq.n	8013382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d147      	bne.n	8013382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80132f2:	4b26      	ldr	r3, [pc, #152]	; (801338c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	69ba      	ldr	r2, [r7, #24]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d10b      	bne.n	8013314 <vTaskPriorityDisinheritAfterTimeout+0x84>
 80132fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013300:	b672      	cpsid	i
 8013302:	f383 8811 	msr	BASEPRI, r3
 8013306:	f3bf 8f6f 	isb	sy
 801330a:	f3bf 8f4f 	dsb	sy
 801330e:	b662      	cpsie	i
 8013310:	60bb      	str	r3, [r7, #8]
 8013312:	e7fe      	b.n	8013312 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013318:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	69fa      	ldr	r2, [r7, #28]
 801331e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	699b      	ldr	r3, [r3, #24]
 8013324:	2b00      	cmp	r3, #0
 8013326:	db04      	blt.n	8013332 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	6959      	ldr	r1, [r3, #20]
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	4613      	mov	r3, r2
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	4413      	add	r3, r2
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4a13      	ldr	r2, [pc, #76]	; (8013390 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013342:	4413      	add	r3, r2
 8013344:	4299      	cmp	r1, r3
 8013346:	d11c      	bne.n	8013382 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	3304      	adds	r3, #4
 801334c:	4618      	mov	r0, r3
 801334e:	f7fd feb1 	bl	80110b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013356:	4b0f      	ldr	r3, [pc, #60]	; (8013394 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	429a      	cmp	r2, r3
 801335c:	d903      	bls.n	8013366 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013362:	4a0c      	ldr	r2, [pc, #48]	; (8013394 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013364:	6013      	str	r3, [r2, #0]
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801336a:	4613      	mov	r3, r2
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	4413      	add	r3, r2
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	4a07      	ldr	r2, [pc, #28]	; (8013390 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013374:	441a      	add	r2, r3
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	3304      	adds	r3, #4
 801337a:	4619      	mov	r1, r3
 801337c:	4610      	mov	r0, r2
 801337e:	f7fd fe3c 	bl	8010ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013382:	bf00      	nop
 8013384:	3720      	adds	r7, #32
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	200009c4 	.word	0x200009c4
 8013390:	200009c8 	.word	0x200009c8
 8013394:	20000ea0 	.word	0x20000ea0

08013398 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013398:	b480      	push	{r7}
 801339a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801339c:	4b07      	ldr	r3, [pc, #28]	; (80133bc <pvTaskIncrementMutexHeldCount+0x24>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80133a4:	4b05      	ldr	r3, [pc, #20]	; (80133bc <pvTaskIncrementMutexHeldCount+0x24>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80133aa:	3201      	adds	r2, #1
 80133ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80133ae:	4b03      	ldr	r3, [pc, #12]	; (80133bc <pvTaskIncrementMutexHeldCount+0x24>)
 80133b0:	681b      	ldr	r3, [r3, #0]
	}
 80133b2:	4618      	mov	r0, r3
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr
 80133bc:	200009c4 	.word	0x200009c4

080133c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80133ca:	4b21      	ldr	r3, [pc, #132]	; (8013450 <prvAddCurrentTaskToDelayedList+0x90>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133d0:	4b20      	ldr	r3, [pc, #128]	; (8013454 <prvAddCurrentTaskToDelayedList+0x94>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	3304      	adds	r3, #4
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fd fe6c 	bl	80110b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e2:	d10a      	bne.n	80133fa <prvAddCurrentTaskToDelayedList+0x3a>
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d007      	beq.n	80133fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80133ea:	4b1a      	ldr	r3, [pc, #104]	; (8013454 <prvAddCurrentTaskToDelayedList+0x94>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	3304      	adds	r3, #4
 80133f0:	4619      	mov	r1, r3
 80133f2:	4819      	ldr	r0, [pc, #100]	; (8013458 <prvAddCurrentTaskToDelayedList+0x98>)
 80133f4:	f7fd fe01 	bl	8010ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80133f8:	e026      	b.n	8013448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80133fa:	68fa      	ldr	r2, [r7, #12]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	4413      	add	r3, r2
 8013400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013402:	4b14      	ldr	r3, [pc, #80]	; (8013454 <prvAddCurrentTaskToDelayedList+0x94>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	68ba      	ldr	r2, [r7, #8]
 8013408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	429a      	cmp	r2, r3
 8013410:	d209      	bcs.n	8013426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013412:	4b12      	ldr	r3, [pc, #72]	; (801345c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	4b0f      	ldr	r3, [pc, #60]	; (8013454 <prvAddCurrentTaskToDelayedList+0x94>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	3304      	adds	r3, #4
 801341c:	4619      	mov	r1, r3
 801341e:	4610      	mov	r0, r2
 8013420:	f7fd fe0f 	bl	8011042 <vListInsert>
}
 8013424:	e010      	b.n	8013448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013426:	4b0e      	ldr	r3, [pc, #56]	; (8013460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	4b0a      	ldr	r3, [pc, #40]	; (8013454 <prvAddCurrentTaskToDelayedList+0x94>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	3304      	adds	r3, #4
 8013430:	4619      	mov	r1, r3
 8013432:	4610      	mov	r0, r2
 8013434:	f7fd fe05 	bl	8011042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013438:	4b0a      	ldr	r3, [pc, #40]	; (8013464 <prvAddCurrentTaskToDelayedList+0xa4>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	68ba      	ldr	r2, [r7, #8]
 801343e:	429a      	cmp	r2, r3
 8013440:	d202      	bcs.n	8013448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013442:	4a08      	ldr	r2, [pc, #32]	; (8013464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	6013      	str	r3, [r2, #0]
}
 8013448:	bf00      	nop
 801344a:	3710      	adds	r7, #16
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	20000e9c 	.word	0x20000e9c
 8013454:	200009c4 	.word	0x200009c4
 8013458:	20000e84 	.word	0x20000e84
 801345c:	20000e54 	.word	0x20000e54
 8013460:	20000e50 	.word	0x20000e50
 8013464:	20000eb8 	.word	0x20000eb8

08013468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801346e:	2300      	movs	r3, #0
 8013470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013472:	f000 fb0d 	bl	8013a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013476:	4b1d      	ldr	r3, [pc, #116]	; (80134ec <xTimerCreateTimerTask+0x84>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d021      	beq.n	80134c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801347e:	2300      	movs	r3, #0
 8013480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013486:	1d3a      	adds	r2, r7, #4
 8013488:	f107 0108 	add.w	r1, r7, #8
 801348c:	f107 030c 	add.w	r3, r7, #12
 8013490:	4618      	mov	r0, r3
 8013492:	f7fd fd6b 	bl	8010f6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013496:	6879      	ldr	r1, [r7, #4]
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	9202      	str	r2, [sp, #8]
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	2302      	movs	r3, #2
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	2300      	movs	r3, #0
 80134a6:	460a      	mov	r2, r1
 80134a8:	4911      	ldr	r1, [pc, #68]	; (80134f0 <xTimerCreateTimerTask+0x88>)
 80134aa:	4812      	ldr	r0, [pc, #72]	; (80134f4 <xTimerCreateTimerTask+0x8c>)
 80134ac:	f7fe ff30 	bl	8012310 <xTaskCreateStatic>
 80134b0:	4602      	mov	r2, r0
 80134b2:	4b11      	ldr	r3, [pc, #68]	; (80134f8 <xTimerCreateTimerTask+0x90>)
 80134b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80134b6:	4b10      	ldr	r3, [pc, #64]	; (80134f8 <xTimerCreateTimerTask+0x90>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d001      	beq.n	80134c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80134be:	2301      	movs	r3, #1
 80134c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d10b      	bne.n	80134e0 <xTimerCreateTimerTask+0x78>
 80134c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134cc:	b672      	cpsid	i
 80134ce:	f383 8811 	msr	BASEPRI, r3
 80134d2:	f3bf 8f6f 	isb	sy
 80134d6:	f3bf 8f4f 	dsb	sy
 80134da:	b662      	cpsie	i
 80134dc:	613b      	str	r3, [r7, #16]
 80134de:	e7fe      	b.n	80134de <xTimerCreateTimerTask+0x76>
	return xReturn;
 80134e0:	697b      	ldr	r3, [r7, #20]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	20000ef4 	.word	0x20000ef4
 80134f0:	08016d94 	.word	0x08016d94
 80134f4:	08013635 	.word	0x08013635
 80134f8:	20000ef8 	.word	0x20000ef8

080134fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08a      	sub	sp, #40	; 0x28
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801350a:	2300      	movs	r3, #0
 801350c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10b      	bne.n	801352c <xTimerGenericCommand+0x30>
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	b672      	cpsid	i
 801351a:	f383 8811 	msr	BASEPRI, r3
 801351e:	f3bf 8f6f 	isb	sy
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	b662      	cpsie	i
 8013528:	623b      	str	r3, [r7, #32]
 801352a:	e7fe      	b.n	801352a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801352c:	4b19      	ldr	r3, [pc, #100]	; (8013594 <xTimerGenericCommand+0x98>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d02a      	beq.n	801358a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	2b05      	cmp	r3, #5
 8013544:	dc18      	bgt.n	8013578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013546:	f7ff fdad 	bl	80130a4 <xTaskGetSchedulerState>
 801354a:	4603      	mov	r3, r0
 801354c:	2b02      	cmp	r3, #2
 801354e:	d109      	bne.n	8013564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013550:	4b10      	ldr	r3, [pc, #64]	; (8013594 <xTimerGenericCommand+0x98>)
 8013552:	6818      	ldr	r0, [r3, #0]
 8013554:	f107 0110 	add.w	r1, r7, #16
 8013558:	2300      	movs	r3, #0
 801355a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801355c:	f7fe f860 	bl	8011620 <xQueueGenericSend>
 8013560:	6278      	str	r0, [r7, #36]	; 0x24
 8013562:	e012      	b.n	801358a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013564:	4b0b      	ldr	r3, [pc, #44]	; (8013594 <xTimerGenericCommand+0x98>)
 8013566:	6818      	ldr	r0, [r3, #0]
 8013568:	f107 0110 	add.w	r1, r7, #16
 801356c:	2300      	movs	r3, #0
 801356e:	2200      	movs	r2, #0
 8013570:	f7fe f856 	bl	8011620 <xQueueGenericSend>
 8013574:	6278      	str	r0, [r7, #36]	; 0x24
 8013576:	e008      	b.n	801358a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013578:	4b06      	ldr	r3, [pc, #24]	; (8013594 <xTimerGenericCommand+0x98>)
 801357a:	6818      	ldr	r0, [r3, #0]
 801357c:	f107 0110 	add.w	r1, r7, #16
 8013580:	2300      	movs	r3, #0
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	f7fe f94e 	bl	8011824 <xQueueGenericSendFromISR>
 8013588:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801358c:	4618      	mov	r0, r3
 801358e:	3728      	adds	r7, #40	; 0x28
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	20000ef4 	.word	0x20000ef4

08013598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b088      	sub	sp, #32
 801359c:	af02      	add	r7, sp, #8
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135a2:	4b23      	ldr	r3, [pc, #140]	; (8013630 <prvProcessExpiredTimer+0x98>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	3304      	adds	r3, #4
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fd fd7f 	bl	80110b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135bc:	f003 0304 	and.w	r3, r3, #4
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d023      	beq.n	801360c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	699a      	ldr	r2, [r3, #24]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	18d1      	adds	r1, r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	6978      	ldr	r0, [r7, #20]
 80135d2:	f000 f8d3 	bl	801377c <prvInsertTimerInActiveList>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d020      	beq.n	801361e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80135dc:	2300      	movs	r3, #0
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	2300      	movs	r3, #0
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	2100      	movs	r1, #0
 80135e6:	6978      	ldr	r0, [r7, #20]
 80135e8:	f7ff ff88 	bl	80134fc <xTimerGenericCommand>
 80135ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d114      	bne.n	801361e <prvProcessExpiredTimer+0x86>
 80135f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f8:	b672      	cpsid	i
 80135fa:	f383 8811 	msr	BASEPRI, r3
 80135fe:	f3bf 8f6f 	isb	sy
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	b662      	cpsie	i
 8013608:	60fb      	str	r3, [r7, #12]
 801360a:	e7fe      	b.n	801360a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013612:	f023 0301 	bic.w	r3, r3, #1
 8013616:	b2da      	uxtb	r2, r3
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	6a1b      	ldr	r3, [r3, #32]
 8013622:	6978      	ldr	r0, [r7, #20]
 8013624:	4798      	blx	r3
}
 8013626:	bf00      	nop
 8013628:	3718      	adds	r7, #24
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	20000eec 	.word	0x20000eec

08013634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801363c:	f107 0308 	add.w	r3, r7, #8
 8013640:	4618      	mov	r0, r3
 8013642:	f000 f857 	bl	80136f4 <prvGetNextExpireTime>
 8013646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	4619      	mov	r1, r3
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f000 f803 	bl	8013658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013652:	f000 f8d5 	bl	8013800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013656:	e7f1      	b.n	801363c <prvTimerTask+0x8>

08013658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013662:	f7ff f919 	bl	8012898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013666:	f107 0308 	add.w	r3, r7, #8
 801366a:	4618      	mov	r0, r3
 801366c:	f000 f866 	bl	801373c <prvSampleTimeNow>
 8013670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d130      	bne.n	80136da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d10a      	bne.n	8013694 <prvProcessTimerOrBlockTask+0x3c>
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	429a      	cmp	r2, r3
 8013684:	d806      	bhi.n	8013694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013686:	f7ff f915 	bl	80128b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801368a:	68f9      	ldr	r1, [r7, #12]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f7ff ff83 	bl	8013598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013692:	e024      	b.n	80136de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d008      	beq.n	80136ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801369a:	4b13      	ldr	r3, [pc, #76]	; (80136e8 <prvProcessTimerOrBlockTask+0x90>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d101      	bne.n	80136a8 <prvProcessTimerOrBlockTask+0x50>
 80136a4:	2301      	movs	r3, #1
 80136a6:	e000      	b.n	80136aa <prvProcessTimerOrBlockTask+0x52>
 80136a8:	2300      	movs	r3, #0
 80136aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80136ac:	4b0f      	ldr	r3, [pc, #60]	; (80136ec <prvProcessTimerOrBlockTask+0x94>)
 80136ae:	6818      	ldr	r0, [r3, #0]
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	683a      	ldr	r2, [r7, #0]
 80136b8:	4619      	mov	r1, r3
 80136ba:	f7fe fdf5 	bl	80122a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80136be:	f7ff f8f9 	bl	80128b4 <xTaskResumeAll>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d10a      	bne.n	80136de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <prvProcessTimerOrBlockTask+0x98>)
 80136ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	f3bf 8f6f 	isb	sy
}
 80136d8:	e001      	b.n	80136de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80136da:	f7ff f8eb 	bl	80128b4 <xTaskResumeAll>
}
 80136de:	bf00      	nop
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20000ef0 	.word	0x20000ef0
 80136ec:	20000ef4 	.word	0x20000ef4
 80136f0:	e000ed04 	.word	0xe000ed04

080136f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80136f4:	b480      	push	{r7}
 80136f6:	b085      	sub	sp, #20
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80136fc:	4b0e      	ldr	r3, [pc, #56]	; (8013738 <prvGetNextExpireTime+0x44>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d101      	bne.n	801370a <prvGetNextExpireTime+0x16>
 8013706:	2201      	movs	r2, #1
 8013708:	e000      	b.n	801370c <prvGetNextExpireTime+0x18>
 801370a:	2200      	movs	r2, #0
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d105      	bne.n	8013724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013718:	4b07      	ldr	r3, [pc, #28]	; (8013738 <prvGetNextExpireTime+0x44>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	e001      	b.n	8013728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013724:	2300      	movs	r3, #0
 8013726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013728:	68fb      	ldr	r3, [r7, #12]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop
 8013738:	20000eec 	.word	0x20000eec

0801373c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013744:	f7ff f954 	bl	80129f0 <xTaskGetTickCount>
 8013748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801374a:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <prvSampleTimeNow+0x3c>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	429a      	cmp	r2, r3
 8013752:	d205      	bcs.n	8013760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013754:	f000 f936 	bl	80139c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2201      	movs	r2, #1
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	e002      	b.n	8013766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013766:	4a04      	ldr	r2, [pc, #16]	; (8013778 <prvSampleTimeNow+0x3c>)
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801376c:	68fb      	ldr	r3, [r7, #12]
}
 801376e:	4618      	mov	r0, r3
 8013770:	3710      	adds	r7, #16
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	20000efc 	.word	0x20000efc

0801377c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b086      	sub	sp, #24
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
 8013788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801378a:	2300      	movs	r3, #0
 801378c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	68ba      	ldr	r2, [r7, #8]
 8013792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	68fa      	ldr	r2, [r7, #12]
 8013798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d812      	bhi.n	80137c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	1ad2      	subs	r2, r2, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	699b      	ldr	r3, [r3, #24]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d302      	bcc.n	80137b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80137b0:	2301      	movs	r3, #1
 80137b2:	617b      	str	r3, [r7, #20]
 80137b4:	e01b      	b.n	80137ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80137b6:	4b10      	ldr	r3, [pc, #64]	; (80137f8 <prvInsertTimerInActiveList+0x7c>)
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	3304      	adds	r3, #4
 80137be:	4619      	mov	r1, r3
 80137c0:	4610      	mov	r0, r2
 80137c2:	f7fd fc3e 	bl	8011042 <vListInsert>
 80137c6:	e012      	b.n	80137ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d206      	bcs.n	80137de <prvInsertTimerInActiveList+0x62>
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d302      	bcc.n	80137de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80137d8:	2301      	movs	r3, #1
 80137da:	617b      	str	r3, [r7, #20]
 80137dc:	e007      	b.n	80137ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80137de:	4b07      	ldr	r3, [pc, #28]	; (80137fc <prvInsertTimerInActiveList+0x80>)
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	3304      	adds	r3, #4
 80137e6:	4619      	mov	r1, r3
 80137e8:	4610      	mov	r0, r2
 80137ea:	f7fd fc2a 	bl	8011042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80137ee:	697b      	ldr	r3, [r7, #20]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3718      	adds	r7, #24
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	20000ef0 	.word	0x20000ef0
 80137fc:	20000eec 	.word	0x20000eec

08013800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b08e      	sub	sp, #56	; 0x38
 8013804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013806:	e0cc      	b.n	80139a2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	da19      	bge.n	8013842 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801380e:	1d3b      	adds	r3, r7, #4
 8013810:	3304      	adds	r3, #4
 8013812:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013816:	2b00      	cmp	r3, #0
 8013818:	d10b      	bne.n	8013832 <prvProcessReceivedCommands+0x32>
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	b672      	cpsid	i
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	b662      	cpsie	i
 801382e:	61fb      	str	r3, [r7, #28]
 8013830:	e7fe      	b.n	8013830 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013838:	6850      	ldr	r0, [r2, #4]
 801383a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801383c:	6892      	ldr	r2, [r2, #8]
 801383e:	4611      	mov	r1, r2
 8013840:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	f2c0 80ab 	blt.w	80139a0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013850:	695b      	ldr	r3, [r3, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013858:	3304      	adds	r3, #4
 801385a:	4618      	mov	r0, r3
 801385c:	f7fd fc2a 	bl	80110b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013860:	463b      	mov	r3, r7
 8013862:	4618      	mov	r0, r3
 8013864:	f7ff ff6a 	bl	801373c <prvSampleTimeNow>
 8013868:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b09      	cmp	r3, #9
 801386e:	f200 8098 	bhi.w	80139a2 <prvProcessReceivedCommands+0x1a2>
 8013872:	a201      	add	r2, pc, #4	; (adr r2, 8013878 <prvProcessReceivedCommands+0x78>)
 8013874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013878:	080138a1 	.word	0x080138a1
 801387c:	080138a1 	.word	0x080138a1
 8013880:	080138a1 	.word	0x080138a1
 8013884:	08013917 	.word	0x08013917
 8013888:	0801392b 	.word	0x0801392b
 801388c:	08013977 	.word	0x08013977
 8013890:	080138a1 	.word	0x080138a1
 8013894:	080138a1 	.word	0x080138a1
 8013898:	08013917 	.word	0x08013917
 801389c:	0801392b 	.word	0x0801392b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80138a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138a6:	f043 0301 	orr.w	r3, r3, #1
 80138aa:	b2da      	uxtb	r2, r3
 80138ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b6:	699b      	ldr	r3, [r3, #24]
 80138b8:	18d1      	adds	r1, r2, r3
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138c0:	f7ff ff5c 	bl	801377c <prvInsertTimerInActiveList>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d06b      	beq.n	80139a2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138cc:	6a1b      	ldr	r3, [r3, #32]
 80138ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138d8:	f003 0304 	and.w	r3, r3, #4
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d060      	beq.n	80139a2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80138e0:	68ba      	ldr	r2, [r7, #8]
 80138e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e4:	699b      	ldr	r3, [r3, #24]
 80138e6:	441a      	add	r2, r3
 80138e8:	2300      	movs	r3, #0
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2300      	movs	r3, #0
 80138ee:	2100      	movs	r1, #0
 80138f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138f2:	f7ff fe03 	bl	80134fc <xTimerGenericCommand>
 80138f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80138f8:	6a3b      	ldr	r3, [r7, #32]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d151      	bne.n	80139a2 <prvProcessReceivedCommands+0x1a2>
 80138fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013902:	b672      	cpsid	i
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	b662      	cpsie	i
 8013912:	61bb      	str	r3, [r7, #24]
 8013914:	e7fe      	b.n	8013914 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801391c:	f023 0301 	bic.w	r3, r3, #1
 8013920:	b2da      	uxtb	r2, r3
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013928:	e03b      	b.n	80139a2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013930:	f043 0301 	orr.w	r3, r3, #1
 8013934:	b2da      	uxtb	r2, r3
 8013936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013940:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d10b      	bne.n	8013962 <prvProcessReceivedCommands+0x162>
 801394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801394e:	b672      	cpsid	i
 8013950:	f383 8811 	msr	BASEPRI, r3
 8013954:	f3bf 8f6f 	isb	sy
 8013958:	f3bf 8f4f 	dsb	sy
 801395c:	b662      	cpsie	i
 801395e:	617b      	str	r3, [r7, #20]
 8013960:	e7fe      	b.n	8013960 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013964:	699a      	ldr	r2, [r3, #24]
 8013966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013968:	18d1      	adds	r1, r2, r3
 801396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801396e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013970:	f7ff ff04 	bl	801377c <prvInsertTimerInActiveList>
					break;
 8013974:	e015      	b.n	80139a2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801397c:	f003 0302 	and.w	r3, r3, #2
 8013980:	2b00      	cmp	r3, #0
 8013982:	d103      	bne.n	801398c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013986:	f000 fbb9 	bl	80140fc <vPortFree>
 801398a:	e00a      	b.n	80139a2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013992:	f023 0301 	bic.w	r3, r3, #1
 8013996:	b2da      	uxtb	r2, r3
 8013998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801399e:	e000      	b.n	80139a2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80139a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80139a2:	4b07      	ldr	r3, [pc, #28]	; (80139c0 <prvProcessReceivedCommands+0x1c0>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	1d39      	adds	r1, r7, #4
 80139a8:	2200      	movs	r2, #0
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe f868 	bl	8011a80 <xQueueReceive>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f47f af28 	bne.w	8013808 <prvProcessReceivedCommands+0x8>
	}
}
 80139b8:	bf00      	nop
 80139ba:	3730      	adds	r7, #48	; 0x30
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	20000ef4 	.word	0x20000ef4

080139c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b088      	sub	sp, #32
 80139c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80139ca:	e049      	b.n	8013a60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80139cc:	4b2e      	ldr	r3, [pc, #184]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139d6:	4b2c      	ldr	r3, [pc, #176]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	3304      	adds	r3, #4
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fd fb65 	bl	80110b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6a1b      	ldr	r3, [r3, #32]
 80139ee:	68f8      	ldr	r0, [r7, #12]
 80139f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139f8:	f003 0304 	and.w	r3, r3, #4
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d02f      	beq.n	8013a60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	699b      	ldr	r3, [r3, #24]
 8013a04:	693a      	ldr	r2, [r7, #16]
 8013a06:	4413      	add	r3, r2
 8013a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d90e      	bls.n	8013a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013a1e:	4b1a      	ldr	r3, [pc, #104]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	3304      	adds	r3, #4
 8013a26:	4619      	mov	r1, r3
 8013a28:	4610      	mov	r0, r2
 8013a2a:	f7fd fb0a 	bl	8011042 <vListInsert>
 8013a2e:	e017      	b.n	8013a60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013a30:	2300      	movs	r3, #0
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	2300      	movs	r3, #0
 8013a36:	693a      	ldr	r2, [r7, #16]
 8013a38:	2100      	movs	r1, #0
 8013a3a:	68f8      	ldr	r0, [r7, #12]
 8013a3c:	f7ff fd5e 	bl	80134fc <xTimerGenericCommand>
 8013a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10b      	bne.n	8013a60 <prvSwitchTimerLists+0x9c>
 8013a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a4c:	b672      	cpsid	i
 8013a4e:	f383 8811 	msr	BASEPRI, r3
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	b662      	cpsie	i
 8013a5c:	603b      	str	r3, [r7, #0]
 8013a5e:	e7fe      	b.n	8013a5e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013a60:	4b09      	ldr	r3, [pc, #36]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1b0      	bne.n	80139cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013a6a:	4b07      	ldr	r3, [pc, #28]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013a70:	4b06      	ldr	r3, [pc, #24]	; (8013a8c <prvSwitchTimerLists+0xc8>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4a04      	ldr	r2, [pc, #16]	; (8013a88 <prvSwitchTimerLists+0xc4>)
 8013a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013a78:	4a04      	ldr	r2, [pc, #16]	; (8013a8c <prvSwitchTimerLists+0xc8>)
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	6013      	str	r3, [r2, #0]
}
 8013a7e:	bf00      	nop
 8013a80:	3718      	adds	r7, #24
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	20000eec 	.word	0x20000eec
 8013a8c:	20000ef0 	.word	0x20000ef0

08013a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013a96:	f000 f947 	bl	8013d28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013a9a:	4b15      	ldr	r3, [pc, #84]	; (8013af0 <prvCheckForValidListAndQueue+0x60>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d120      	bne.n	8013ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013aa2:	4814      	ldr	r0, [pc, #80]	; (8013af4 <prvCheckForValidListAndQueue+0x64>)
 8013aa4:	f7fd fa7c 	bl	8010fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013aa8:	4813      	ldr	r0, [pc, #76]	; (8013af8 <prvCheckForValidListAndQueue+0x68>)
 8013aaa:	f7fd fa79 	bl	8010fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013aae:	4b13      	ldr	r3, [pc, #76]	; (8013afc <prvCheckForValidListAndQueue+0x6c>)
 8013ab0:	4a10      	ldr	r2, [pc, #64]	; (8013af4 <prvCheckForValidListAndQueue+0x64>)
 8013ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013ab4:	4b12      	ldr	r3, [pc, #72]	; (8013b00 <prvCheckForValidListAndQueue+0x70>)
 8013ab6:	4a10      	ldr	r2, [pc, #64]	; (8013af8 <prvCheckForValidListAndQueue+0x68>)
 8013ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013aba:	2300      	movs	r3, #0
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	4b11      	ldr	r3, [pc, #68]	; (8013b04 <prvCheckForValidListAndQueue+0x74>)
 8013ac0:	4a11      	ldr	r2, [pc, #68]	; (8013b08 <prvCheckForValidListAndQueue+0x78>)
 8013ac2:	2110      	movs	r1, #16
 8013ac4:	200a      	movs	r0, #10
 8013ac6:	f7fd fb89 	bl	80111dc <xQueueGenericCreateStatic>
 8013aca:	4602      	mov	r2, r0
 8013acc:	4b08      	ldr	r3, [pc, #32]	; (8013af0 <prvCheckForValidListAndQueue+0x60>)
 8013ace:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013ad0:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <prvCheckForValidListAndQueue+0x60>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d005      	beq.n	8013ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013ad8:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <prvCheckForValidListAndQueue+0x60>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	490b      	ldr	r1, [pc, #44]	; (8013b0c <prvCheckForValidListAndQueue+0x7c>)
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fe fb90 	bl	8012204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ae4:	f000 f952 	bl	8013d8c <vPortExitCritical>
}
 8013ae8:	bf00      	nop
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	20000ef4 	.word	0x20000ef4
 8013af4:	20000ec4 	.word	0x20000ec4
 8013af8:	20000ed8 	.word	0x20000ed8
 8013afc:	20000eec 	.word	0x20000eec
 8013b00:	20000ef0 	.word	0x20000ef0
 8013b04:	20000fa0 	.word	0x20000fa0
 8013b08:	20000f00 	.word	0x20000f00
 8013b0c:	08016d9c 	.word	0x08016d9c

08013b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013b10:	b480      	push	{r7}
 8013b12:	b085      	sub	sp, #20
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	3b04      	subs	r3, #4
 8013b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	3b04      	subs	r3, #4
 8013b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	f023 0201 	bic.w	r2, r3, #1
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	3b04      	subs	r3, #4
 8013b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013b40:	4a0c      	ldr	r2, [pc, #48]	; (8013b74 <pxPortInitialiseStack+0x64>)
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	3b14      	subs	r3, #20
 8013b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	3b04      	subs	r3, #4
 8013b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f06f 0202 	mvn.w	r2, #2
 8013b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	3b20      	subs	r3, #32
 8013b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013b66:	68fb      	ldr	r3, [r7, #12]
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3714      	adds	r7, #20
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr
 8013b74:	08013b79 	.word	0x08013b79

08013b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b085      	sub	sp, #20
 8013b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013b82:	4b13      	ldr	r3, [pc, #76]	; (8013bd0 <prvTaskExitError+0x58>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b8a:	d00b      	beq.n	8013ba4 <prvTaskExitError+0x2c>
 8013b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b90:	b672      	cpsid	i
 8013b92:	f383 8811 	msr	BASEPRI, r3
 8013b96:	f3bf 8f6f 	isb	sy
 8013b9a:	f3bf 8f4f 	dsb	sy
 8013b9e:	b662      	cpsie	i
 8013ba0:	60fb      	str	r3, [r7, #12]
 8013ba2:	e7fe      	b.n	8013ba2 <prvTaskExitError+0x2a>
 8013ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba8:	b672      	cpsid	i
 8013baa:	f383 8811 	msr	BASEPRI, r3
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	b662      	cpsie	i
 8013bb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013bba:	bf00      	nop
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d0fc      	beq.n	8013bbc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013bc2:	bf00      	nop
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr
 8013bce:	bf00      	nop
 8013bd0:	2000011c 	.word	0x2000011c
	...

08013be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013be0:	4b07      	ldr	r3, [pc, #28]	; (8013c00 <pxCurrentTCBConst2>)
 8013be2:	6819      	ldr	r1, [r3, #0]
 8013be4:	6808      	ldr	r0, [r1, #0]
 8013be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bea:	f380 8809 	msr	PSP, r0
 8013bee:	f3bf 8f6f 	isb	sy
 8013bf2:	f04f 0000 	mov.w	r0, #0
 8013bf6:	f380 8811 	msr	BASEPRI, r0
 8013bfa:	4770      	bx	lr
 8013bfc:	f3af 8000 	nop.w

08013c00 <pxCurrentTCBConst2>:
 8013c00:	200009c4 	.word	0x200009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013c04:	bf00      	nop
 8013c06:	bf00      	nop

08013c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013c08:	4808      	ldr	r0, [pc, #32]	; (8013c2c <prvPortStartFirstTask+0x24>)
 8013c0a:	6800      	ldr	r0, [r0, #0]
 8013c0c:	6800      	ldr	r0, [r0, #0]
 8013c0e:	f380 8808 	msr	MSP, r0
 8013c12:	f04f 0000 	mov.w	r0, #0
 8013c16:	f380 8814 	msr	CONTROL, r0
 8013c1a:	b662      	cpsie	i
 8013c1c:	b661      	cpsie	f
 8013c1e:	f3bf 8f4f 	dsb	sy
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	df00      	svc	0
 8013c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013c2a:	bf00      	nop
 8013c2c:	e000ed08 	.word	0xe000ed08

08013c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013c36:	4b36      	ldr	r3, [pc, #216]	; (8013d10 <xPortStartScheduler+0xe0>)
 8013c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	22ff      	movs	r2, #255	; 0xff
 8013c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013c50:	78fb      	ldrb	r3, [r7, #3]
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013c58:	b2da      	uxtb	r2, r3
 8013c5a:	4b2e      	ldr	r3, [pc, #184]	; (8013d14 <xPortStartScheduler+0xe4>)
 8013c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013c5e:	4b2e      	ldr	r3, [pc, #184]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013c60:	2207      	movs	r2, #7
 8013c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013c64:	e009      	b.n	8013c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013c66:	4b2c      	ldr	r3, [pc, #176]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	4a2a      	ldr	r2, [pc, #168]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013c70:	78fb      	ldrb	r3, [r7, #3]
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c82:	2b80      	cmp	r3, #128	; 0x80
 8013c84:	d0ef      	beq.n	8013c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013c86:	4b24      	ldr	r3, [pc, #144]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f1c3 0307 	rsb	r3, r3, #7
 8013c8e:	2b04      	cmp	r3, #4
 8013c90:	d00b      	beq.n	8013caa <xPortStartScheduler+0x7a>
 8013c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c96:	b672      	cpsid	i
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	b662      	cpsie	i
 8013ca6:	60bb      	str	r3, [r7, #8]
 8013ca8:	e7fe      	b.n	8013ca8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013caa:	4b1b      	ldr	r3, [pc, #108]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	021b      	lsls	r3, r3, #8
 8013cb0:	4a19      	ldr	r2, [pc, #100]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013cb2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013cb4:	4b18      	ldr	r3, [pc, #96]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013cbc:	4a16      	ldr	r2, [pc, #88]	; (8013d18 <xPortStartScheduler+0xe8>)
 8013cbe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	b2da      	uxtb	r2, r3
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013cc8:	4b14      	ldr	r3, [pc, #80]	; (8013d1c <xPortStartScheduler+0xec>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4a13      	ldr	r2, [pc, #76]	; (8013d1c <xPortStartScheduler+0xec>)
 8013cce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013cd2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013cd4:	4b11      	ldr	r3, [pc, #68]	; (8013d1c <xPortStartScheduler+0xec>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	4a10      	ldr	r2, [pc, #64]	; (8013d1c <xPortStartScheduler+0xec>)
 8013cda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013cde:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013ce0:	f000 f8d4 	bl	8013e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013ce4:	4b0e      	ldr	r3, [pc, #56]	; (8013d20 <xPortStartScheduler+0xf0>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013cea:	f000 f8f3 	bl	8013ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013cee:	4b0d      	ldr	r3, [pc, #52]	; (8013d24 <xPortStartScheduler+0xf4>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4a0c      	ldr	r2, [pc, #48]	; (8013d24 <xPortStartScheduler+0xf4>)
 8013cf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013cf8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013cfa:	f7ff ff85 	bl	8013c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013cfe:	f7fe ff53 	bl	8012ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8013d02:	f7ff ff39 	bl	8013b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013d06:	2300      	movs	r3, #0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	e000e400 	.word	0xe000e400
 8013d14:	20000ff0 	.word	0x20000ff0
 8013d18:	20000ff4 	.word	0x20000ff4
 8013d1c:	e000ed20 	.word	0xe000ed20
 8013d20:	2000011c 	.word	0x2000011c
 8013d24:	e000ef34 	.word	0xe000ef34

08013d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d32:	b672      	cpsid	i
 8013d34:	f383 8811 	msr	BASEPRI, r3
 8013d38:	f3bf 8f6f 	isb	sy
 8013d3c:	f3bf 8f4f 	dsb	sy
 8013d40:	b662      	cpsie	i
 8013d42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013d44:	4b0f      	ldr	r3, [pc, #60]	; (8013d84 <vPortEnterCritical+0x5c>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	4a0e      	ldr	r2, [pc, #56]	; (8013d84 <vPortEnterCritical+0x5c>)
 8013d4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	; (8013d84 <vPortEnterCritical+0x5c>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	2b01      	cmp	r3, #1
 8013d54:	d110      	bne.n	8013d78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013d56:	4b0c      	ldr	r3, [pc, #48]	; (8013d88 <vPortEnterCritical+0x60>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d00b      	beq.n	8013d78 <vPortEnterCritical+0x50>
 8013d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d64:	b672      	cpsid	i
 8013d66:	f383 8811 	msr	BASEPRI, r3
 8013d6a:	f3bf 8f6f 	isb	sy
 8013d6e:	f3bf 8f4f 	dsb	sy
 8013d72:	b662      	cpsie	i
 8013d74:	603b      	str	r3, [r7, #0]
 8013d76:	e7fe      	b.n	8013d76 <vPortEnterCritical+0x4e>
	}
}
 8013d78:	bf00      	nop
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr
 8013d84:	2000011c 	.word	0x2000011c
 8013d88:	e000ed04 	.word	0xe000ed04

08013d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013d92:	4b12      	ldr	r3, [pc, #72]	; (8013ddc <vPortExitCritical+0x50>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10b      	bne.n	8013db2 <vPortExitCritical+0x26>
 8013d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9e:	b672      	cpsid	i
 8013da0:	f383 8811 	msr	BASEPRI, r3
 8013da4:	f3bf 8f6f 	isb	sy
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	b662      	cpsie	i
 8013dae:	607b      	str	r3, [r7, #4]
 8013db0:	e7fe      	b.n	8013db0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013db2:	4b0a      	ldr	r3, [pc, #40]	; (8013ddc <vPortExitCritical+0x50>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	3b01      	subs	r3, #1
 8013db8:	4a08      	ldr	r2, [pc, #32]	; (8013ddc <vPortExitCritical+0x50>)
 8013dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013dbc:	4b07      	ldr	r3, [pc, #28]	; (8013ddc <vPortExitCritical+0x50>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d104      	bne.n	8013dce <vPortExitCritical+0x42>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013dce:	bf00      	nop
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	2000011c 	.word	0x2000011c

08013de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013de0:	f3ef 8009 	mrs	r0, PSP
 8013de4:	f3bf 8f6f 	isb	sy
 8013de8:	4b15      	ldr	r3, [pc, #84]	; (8013e40 <pxCurrentTCBConst>)
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	f01e 0f10 	tst.w	lr, #16
 8013df0:	bf08      	it	eq
 8013df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfa:	6010      	str	r0, [r2, #0]
 8013dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013e04:	b672      	cpsid	i
 8013e06:	f380 8811 	msr	BASEPRI, r0
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	b662      	cpsie	i
 8013e14:	f7fe fec8 	bl	8012ba8 <vTaskSwitchContext>
 8013e18:	f04f 0000 	mov.w	r0, #0
 8013e1c:	f380 8811 	msr	BASEPRI, r0
 8013e20:	bc09      	pop	{r0, r3}
 8013e22:	6819      	ldr	r1, [r3, #0]
 8013e24:	6808      	ldr	r0, [r1, #0]
 8013e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2a:	f01e 0f10 	tst.w	lr, #16
 8013e2e:	bf08      	it	eq
 8013e30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013e34:	f380 8809 	msr	PSP, r0
 8013e38:	f3bf 8f6f 	isb	sy
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop

08013e40 <pxCurrentTCBConst>:
 8013e40:	200009c4 	.word	0x200009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013e44:	bf00      	nop
 8013e46:	bf00      	nop

08013e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8013e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e52:	b672      	cpsid	i
 8013e54:	f383 8811 	msr	BASEPRI, r3
 8013e58:	f3bf 8f6f 	isb	sy
 8013e5c:	f3bf 8f4f 	dsb	sy
 8013e60:	b662      	cpsie	i
 8013e62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013e64:	f7fe fde6 	bl	8012a34 <xTaskIncrementTick>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d003      	beq.n	8013e76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013e6e:	4b06      	ldr	r3, [pc, #24]	; (8013e88 <SysTick_Handler+0x40>)
 8013e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	2300      	movs	r3, #0
 8013e78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013e80:	bf00      	nop
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	e000ed04 	.word	0xe000ed04

08013e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013e90:	4b0b      	ldr	r3, [pc, #44]	; (8013ec0 <vPortSetupTimerInterrupt+0x34>)
 8013e92:	2200      	movs	r2, #0
 8013e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013e96:	4b0b      	ldr	r3, [pc, #44]	; (8013ec4 <vPortSetupTimerInterrupt+0x38>)
 8013e98:	2200      	movs	r2, #0
 8013e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013e9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <vPortSetupTimerInterrupt+0x3c>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4a0a      	ldr	r2, [pc, #40]	; (8013ecc <vPortSetupTimerInterrupt+0x40>)
 8013ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ea6:	099b      	lsrs	r3, r3, #6
 8013ea8:	4a09      	ldr	r2, [pc, #36]	; (8013ed0 <vPortSetupTimerInterrupt+0x44>)
 8013eaa:	3b01      	subs	r3, #1
 8013eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013eae:	4b04      	ldr	r3, [pc, #16]	; (8013ec0 <vPortSetupTimerInterrupt+0x34>)
 8013eb0:	2207      	movs	r2, #7
 8013eb2:	601a      	str	r2, [r3, #0]
}
 8013eb4:	bf00      	nop
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	e000e010 	.word	0xe000e010
 8013ec4:	e000e018 	.word	0xe000e018
 8013ec8:	20000000 	.word	0x20000000
 8013ecc:	10624dd3 	.word	0x10624dd3
 8013ed0:	e000e014 	.word	0xe000e014

08013ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013ee4 <vPortEnableVFP+0x10>
 8013ed8:	6801      	ldr	r1, [r0, #0]
 8013eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013ede:	6001      	str	r1, [r0, #0]
 8013ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013ee2:	bf00      	nop
 8013ee4:	e000ed88 	.word	0xe000ed88

08013ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013ee8:	b480      	push	{r7}
 8013eea:	b085      	sub	sp, #20
 8013eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013eee:	f3ef 8305 	mrs	r3, IPSR
 8013ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b0f      	cmp	r3, #15
 8013ef8:	d915      	bls.n	8013f26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013efa:	4a18      	ldr	r2, [pc, #96]	; (8013f5c <vPortValidateInterruptPriority+0x74>)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	4413      	add	r3, r2
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013f04:	4b16      	ldr	r3, [pc, #88]	; (8013f60 <vPortValidateInterruptPriority+0x78>)
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	7afa      	ldrb	r2, [r7, #11]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d20b      	bcs.n	8013f26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f12:	b672      	cpsid	i
 8013f14:	f383 8811 	msr	BASEPRI, r3
 8013f18:	f3bf 8f6f 	isb	sy
 8013f1c:	f3bf 8f4f 	dsb	sy
 8013f20:	b662      	cpsie	i
 8013f22:	607b      	str	r3, [r7, #4]
 8013f24:	e7fe      	b.n	8013f24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013f26:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <vPortValidateInterruptPriority+0x7c>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013f2e:	4b0e      	ldr	r3, [pc, #56]	; (8013f68 <vPortValidateInterruptPriority+0x80>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d90b      	bls.n	8013f4e <vPortValidateInterruptPriority+0x66>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	b672      	cpsid	i
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	b662      	cpsie	i
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	e7fe      	b.n	8013f4c <vPortValidateInterruptPriority+0x64>
	}
 8013f4e:	bf00      	nop
 8013f50:	3714      	adds	r7, #20
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	e000e3f0 	.word	0xe000e3f0
 8013f60:	20000ff0 	.word	0x20000ff0
 8013f64:	e000ed0c 	.word	0xe000ed0c
 8013f68:	20000ff4 	.word	0x20000ff4

08013f6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b08a      	sub	sp, #40	; 0x28
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013f74:	2300      	movs	r3, #0
 8013f76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013f78:	f7fe fc8e 	bl	8012898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013f7c:	4b5a      	ldr	r3, [pc, #360]	; (80140e8 <pvPortMalloc+0x17c>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d101      	bne.n	8013f88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013f84:	f000 f916 	bl	80141b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013f88:	4b58      	ldr	r3, [pc, #352]	; (80140ec <pvPortMalloc+0x180>)
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	4013      	ands	r3, r2
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f040 8090 	bne.w	80140b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d01e      	beq.n	8013fda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013f9c:	2208      	movs	r2, #8
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4413      	add	r3, r2
 8013fa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f003 0307 	and.w	r3, r3, #7
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d015      	beq.n	8013fda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f023 0307 	bic.w	r3, r3, #7
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f003 0307 	and.w	r3, r3, #7
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00b      	beq.n	8013fda <pvPortMalloc+0x6e>
 8013fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc6:	b672      	cpsid	i
 8013fc8:	f383 8811 	msr	BASEPRI, r3
 8013fcc:	f3bf 8f6f 	isb	sy
 8013fd0:	f3bf 8f4f 	dsb	sy
 8013fd4:	b662      	cpsie	i
 8013fd6:	617b      	str	r3, [r7, #20]
 8013fd8:	e7fe      	b.n	8013fd8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d06a      	beq.n	80140b6 <pvPortMalloc+0x14a>
 8013fe0:	4b43      	ldr	r3, [pc, #268]	; (80140f0 <pvPortMalloc+0x184>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d865      	bhi.n	80140b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013fea:	4b42      	ldr	r3, [pc, #264]	; (80140f4 <pvPortMalloc+0x188>)
 8013fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013fee:	4b41      	ldr	r3, [pc, #260]	; (80140f4 <pvPortMalloc+0x188>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ff4:	e004      	b.n	8014000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	685b      	ldr	r3, [r3, #4]
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	429a      	cmp	r2, r3
 8014008:	d903      	bls.n	8014012 <pvPortMalloc+0xa6>
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d1f1      	bne.n	8013ff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014012:	4b35      	ldr	r3, [pc, #212]	; (80140e8 <pvPortMalloc+0x17c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014018:	429a      	cmp	r2, r3
 801401a:	d04c      	beq.n	80140b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801401c:	6a3b      	ldr	r3, [r7, #32]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2208      	movs	r2, #8
 8014022:	4413      	add	r3, r2
 8014024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	6a3b      	ldr	r3, [r7, #32]
 801402c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	685a      	ldr	r2, [r3, #4]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	1ad2      	subs	r2, r2, r3
 8014036:	2308      	movs	r3, #8
 8014038:	005b      	lsls	r3, r3, #1
 801403a:	429a      	cmp	r2, r3
 801403c:	d920      	bls.n	8014080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4413      	add	r3, r2
 8014044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	f003 0307 	and.w	r3, r3, #7
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00b      	beq.n	8014068 <pvPortMalloc+0xfc>
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	b672      	cpsid	i
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	b662      	cpsie	i
 8014064:	613b      	str	r3, [r7, #16]
 8014066:	e7fe      	b.n	8014066 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406a:	685a      	ldr	r2, [r3, #4]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	1ad2      	subs	r2, r2, r3
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801407a:	69b8      	ldr	r0, [r7, #24]
 801407c:	f000 f8fc 	bl	8014278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014080:	4b1b      	ldr	r3, [pc, #108]	; (80140f0 <pvPortMalloc+0x184>)
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	4a19      	ldr	r2, [pc, #100]	; (80140f0 <pvPortMalloc+0x184>)
 801408c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801408e:	4b18      	ldr	r3, [pc, #96]	; (80140f0 <pvPortMalloc+0x184>)
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	4b19      	ldr	r3, [pc, #100]	; (80140f8 <pvPortMalloc+0x18c>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	429a      	cmp	r2, r3
 8014098:	d203      	bcs.n	80140a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801409a:	4b15      	ldr	r3, [pc, #84]	; (80140f0 <pvPortMalloc+0x184>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4a16      	ldr	r2, [pc, #88]	; (80140f8 <pvPortMalloc+0x18c>)
 80140a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	685a      	ldr	r2, [r3, #4]
 80140a6:	4b11      	ldr	r3, [pc, #68]	; (80140ec <pvPortMalloc+0x180>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	431a      	orrs	r2, r3
 80140ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80140b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b2:	2200      	movs	r2, #0
 80140b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80140b6:	f7fe fbfd 	bl	80128b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	f003 0307 	and.w	r3, r3, #7
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d00b      	beq.n	80140dc <pvPortMalloc+0x170>
 80140c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c8:	b672      	cpsid	i
 80140ca:	f383 8811 	msr	BASEPRI, r3
 80140ce:	f3bf 8f6f 	isb	sy
 80140d2:	f3bf 8f4f 	dsb	sy
 80140d6:	b662      	cpsie	i
 80140d8:	60fb      	str	r3, [r7, #12]
 80140da:	e7fe      	b.n	80140da <pvPortMalloc+0x16e>
	return pvReturn;
 80140dc:	69fb      	ldr	r3, [r7, #28]
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3728      	adds	r7, #40	; 0x28
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	20008800 	.word	0x20008800
 80140ec:	2000880c 	.word	0x2000880c
 80140f0:	20008804 	.word	0x20008804
 80140f4:	200087f8 	.word	0x200087f8
 80140f8:	20008808 	.word	0x20008808

080140fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b086      	sub	sp, #24
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d04a      	beq.n	80141a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801410e:	2308      	movs	r3, #8
 8014110:	425b      	negs	r3, r3
 8014112:	697a      	ldr	r2, [r7, #20]
 8014114:	4413      	add	r3, r2
 8014116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	685a      	ldr	r2, [r3, #4]
 8014120:	4b22      	ldr	r3, [pc, #136]	; (80141ac <vPortFree+0xb0>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	4013      	ands	r3, r2
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10b      	bne.n	8014142 <vPortFree+0x46>
 801412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412e:	b672      	cpsid	i
 8014130:	f383 8811 	msr	BASEPRI, r3
 8014134:	f3bf 8f6f 	isb	sy
 8014138:	f3bf 8f4f 	dsb	sy
 801413c:	b662      	cpsie	i
 801413e:	60fb      	str	r3, [r7, #12]
 8014140:	e7fe      	b.n	8014140 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00b      	beq.n	8014162 <vPortFree+0x66>
 801414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414e:	b672      	cpsid	i
 8014150:	f383 8811 	msr	BASEPRI, r3
 8014154:	f3bf 8f6f 	isb	sy
 8014158:	f3bf 8f4f 	dsb	sy
 801415c:	b662      	cpsie	i
 801415e:	60bb      	str	r3, [r7, #8]
 8014160:	e7fe      	b.n	8014160 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	685a      	ldr	r2, [r3, #4]
 8014166:	4b11      	ldr	r3, [pc, #68]	; (80141ac <vPortFree+0xb0>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4013      	ands	r3, r2
 801416c:	2b00      	cmp	r3, #0
 801416e:	d019      	beq.n	80141a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d115      	bne.n	80141a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	685a      	ldr	r2, [r3, #4]
 801417c:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <vPortFree+0xb0>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	43db      	mvns	r3, r3
 8014182:	401a      	ands	r2, r3
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014188:	f7fe fb86 	bl	8012898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	685a      	ldr	r2, [r3, #4]
 8014190:	4b07      	ldr	r3, [pc, #28]	; (80141b0 <vPortFree+0xb4>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	4413      	add	r3, r2
 8014196:	4a06      	ldr	r2, [pc, #24]	; (80141b0 <vPortFree+0xb4>)
 8014198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801419a:	6938      	ldr	r0, [r7, #16]
 801419c:	f000 f86c 	bl	8014278 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80141a0:	f7fe fb88 	bl	80128b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80141a4:	bf00      	nop
 80141a6:	3718      	adds	r7, #24
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	2000880c 	.word	0x2000880c
 80141b0:	20008804 	.word	0x20008804

080141b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80141b4:	b480      	push	{r7}
 80141b6:	b085      	sub	sp, #20
 80141b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80141ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80141be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80141c0:	4b27      	ldr	r3, [pc, #156]	; (8014260 <prvHeapInit+0xac>)
 80141c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f003 0307 	and.w	r3, r3, #7
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d00c      	beq.n	80141e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	3307      	adds	r3, #7
 80141d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	f023 0307 	bic.w	r3, r3, #7
 80141da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	4a1f      	ldr	r2, [pc, #124]	; (8014260 <prvHeapInit+0xac>)
 80141e4:	4413      	add	r3, r2
 80141e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80141ec:	4a1d      	ldr	r2, [pc, #116]	; (8014264 <prvHeapInit+0xb0>)
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80141f2:	4b1c      	ldr	r3, [pc, #112]	; (8014264 <prvHeapInit+0xb0>)
 80141f4:	2200      	movs	r2, #0
 80141f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	68ba      	ldr	r2, [r7, #8]
 80141fc:	4413      	add	r3, r2
 80141fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014200:	2208      	movs	r2, #8
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	1a9b      	subs	r3, r3, r2
 8014206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	f023 0307 	bic.w	r3, r3, #7
 801420e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	4a15      	ldr	r2, [pc, #84]	; (8014268 <prvHeapInit+0xb4>)
 8014214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014216:	4b14      	ldr	r3, [pc, #80]	; (8014268 <prvHeapInit+0xb4>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	2200      	movs	r2, #0
 801421c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801421e:	4b12      	ldr	r3, [pc, #72]	; (8014268 <prvHeapInit+0xb4>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2200      	movs	r2, #0
 8014224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	68fa      	ldr	r2, [r7, #12]
 801422e:	1ad2      	subs	r2, r2, r3
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014234:	4b0c      	ldr	r3, [pc, #48]	; (8014268 <prvHeapInit+0xb4>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	4a0a      	ldr	r2, [pc, #40]	; (801426c <prvHeapInit+0xb8>)
 8014242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	4a09      	ldr	r2, [pc, #36]	; (8014270 <prvHeapInit+0xbc>)
 801424a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801424c:	4b09      	ldr	r3, [pc, #36]	; (8014274 <prvHeapInit+0xc0>)
 801424e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014252:	601a      	str	r2, [r3, #0]
}
 8014254:	bf00      	nop
 8014256:	3714      	adds	r7, #20
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr
 8014260:	20000ff8 	.word	0x20000ff8
 8014264:	200087f8 	.word	0x200087f8
 8014268:	20008800 	.word	0x20008800
 801426c:	20008808 	.word	0x20008808
 8014270:	20008804 	.word	0x20008804
 8014274:	2000880c 	.word	0x2000880c

08014278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014278:	b480      	push	{r7}
 801427a:	b085      	sub	sp, #20
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014280:	4b28      	ldr	r3, [pc, #160]	; (8014324 <prvInsertBlockIntoFreeList+0xac>)
 8014282:	60fb      	str	r3, [r7, #12]
 8014284:	e002      	b.n	801428c <prvInsertBlockIntoFreeList+0x14>
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	60fb      	str	r3, [r7, #12]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	429a      	cmp	r2, r3
 8014294:	d8f7      	bhi.n	8014286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	68ba      	ldr	r2, [r7, #8]
 80142a0:	4413      	add	r3, r2
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d108      	bne.n	80142ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	685a      	ldr	r2, [r3, #4]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	685b      	ldr	r3, [r3, #4]
 80142b0:	441a      	add	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	441a      	add	r2, r3
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d118      	bne.n	8014300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	4b15      	ldr	r3, [pc, #84]	; (8014328 <prvInsertBlockIntoFreeList+0xb0>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d00d      	beq.n	80142f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	685a      	ldr	r2, [r3, #4]
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	441a      	add	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	e008      	b.n	8014308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80142f6:	4b0c      	ldr	r3, [pc, #48]	; (8014328 <prvInsertBlockIntoFreeList+0xb0>)
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	e003      	b.n	8014308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	429a      	cmp	r2, r3
 801430e:	d002      	beq.n	8014316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014316:	bf00      	nop
 8014318:	3714      	adds	r7, #20
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop
 8014324:	200087f8 	.word	0x200087f8
 8014328:	20008800 	.word	0x20008800

0801432c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014330:	2200      	movs	r2, #0
 8014332:	4912      	ldr	r1, [pc, #72]	; (801437c <MX_USB_DEVICE_Init+0x50>)
 8014334:	4812      	ldr	r0, [pc, #72]	; (8014380 <MX_USB_DEVICE_Init+0x54>)
 8014336:	f7f7 ff29 	bl	800c18c <USBD_Init>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014340:	f7ed f8e2 	bl	8001508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014344:	490f      	ldr	r1, [pc, #60]	; (8014384 <MX_USB_DEVICE_Init+0x58>)
 8014346:	480e      	ldr	r0, [pc, #56]	; (8014380 <MX_USB_DEVICE_Init+0x54>)
 8014348:	f7f7 ff56 	bl	800c1f8 <USBD_RegisterClass>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d001      	beq.n	8014356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014352:	f7ed f8d9 	bl	8001508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014356:	490c      	ldr	r1, [pc, #48]	; (8014388 <MX_USB_DEVICE_Init+0x5c>)
 8014358:	4809      	ldr	r0, [pc, #36]	; (8014380 <MX_USB_DEVICE_Init+0x54>)
 801435a:	f7f7 fe7b 	bl	800c054 <USBD_CDC_RegisterInterface>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d001      	beq.n	8014368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014364:	f7ed f8d0 	bl	8001508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014368:	4805      	ldr	r0, [pc, #20]	; (8014380 <MX_USB_DEVICE_Init+0x54>)
 801436a:	f7f7 ff66 	bl	800c23a <USBD_Start>
 801436e:	4603      	mov	r3, r0
 8014370:	2b00      	cmp	r3, #0
 8014372:	d001      	beq.n	8014378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014374:	f7ed f8c8 	bl	8001508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014378:	bf00      	nop
 801437a:	bd80      	pop	{r7, pc}
 801437c:	20000134 	.word	0x20000134
 8014380:	20011644 	.word	0x20011644
 8014384:	20000018 	.word	0x20000018
 8014388:	20000120 	.word	0x20000120

0801438c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014390:	2200      	movs	r2, #0
 8014392:	4905      	ldr	r1, [pc, #20]	; (80143a8 <CDC_Init_FS+0x1c>)
 8014394:	4805      	ldr	r0, [pc, #20]	; (80143ac <CDC_Init_FS+0x20>)
 8014396:	f7f7 fe72 	bl	800c07e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801439a:	4905      	ldr	r1, [pc, #20]	; (80143b0 <CDC_Init_FS+0x24>)
 801439c:	4803      	ldr	r0, [pc, #12]	; (80143ac <CDC_Init_FS+0x20>)
 801439e:	f7f7 fe87 	bl	800c0b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80143a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20012114 	.word	0x20012114
 80143ac:	20011644 	.word	0x20011644
 80143b0:	20011914 	.word	0x20011914

080143b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80143b4:	b480      	push	{r7}
 80143b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80143b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	4603      	mov	r3, r0
 80143cc:	6039      	str	r1, [r7, #0]
 80143ce:	71fb      	strb	r3, [r7, #7]
 80143d0:	4613      	mov	r3, r2
 80143d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80143d4:	79fb      	ldrb	r3, [r7, #7]
 80143d6:	2b23      	cmp	r3, #35	; 0x23
 80143d8:	d84a      	bhi.n	8014470 <CDC_Control_FS+0xac>
 80143da:	a201      	add	r2, pc, #4	; (adr r2, 80143e0 <CDC_Control_FS+0x1c>)
 80143dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e0:	08014471 	.word	0x08014471
 80143e4:	08014471 	.word	0x08014471
 80143e8:	08014471 	.word	0x08014471
 80143ec:	08014471 	.word	0x08014471
 80143f0:	08014471 	.word	0x08014471
 80143f4:	08014471 	.word	0x08014471
 80143f8:	08014471 	.word	0x08014471
 80143fc:	08014471 	.word	0x08014471
 8014400:	08014471 	.word	0x08014471
 8014404:	08014471 	.word	0x08014471
 8014408:	08014471 	.word	0x08014471
 801440c:	08014471 	.word	0x08014471
 8014410:	08014471 	.word	0x08014471
 8014414:	08014471 	.word	0x08014471
 8014418:	08014471 	.word	0x08014471
 801441c:	08014471 	.word	0x08014471
 8014420:	08014471 	.word	0x08014471
 8014424:	08014471 	.word	0x08014471
 8014428:	08014471 	.word	0x08014471
 801442c:	08014471 	.word	0x08014471
 8014430:	08014471 	.word	0x08014471
 8014434:	08014471 	.word	0x08014471
 8014438:	08014471 	.word	0x08014471
 801443c:	08014471 	.word	0x08014471
 8014440:	08014471 	.word	0x08014471
 8014444:	08014471 	.word	0x08014471
 8014448:	08014471 	.word	0x08014471
 801444c:	08014471 	.word	0x08014471
 8014450:	08014471 	.word	0x08014471
 8014454:	08014471 	.word	0x08014471
 8014458:	08014471 	.word	0x08014471
 801445c:	08014471 	.word	0x08014471
 8014460:	08014471 	.word	0x08014471
 8014464:	08014471 	.word	0x08014471
 8014468:	08014471 	.word	0x08014471
 801446c:	08014471 	.word	0x08014471
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014470:	bf00      	nop
  }

  return (USBD_OK);
 8014472:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014474:	4618      	mov	r0, r3
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801448a:	6879      	ldr	r1, [r7, #4]
 801448c:	4805      	ldr	r0, [pc, #20]	; (80144a4 <CDC_Receive_FS+0x24>)
 801448e:	f7f7 fe0f 	bl	800c0b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014492:	4804      	ldr	r0, [pc, #16]	; (80144a4 <CDC_Receive_FS+0x24>)
 8014494:	f7f7 fe50 	bl	800c138 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014498:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801449a:	4618      	mov	r0, r3
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	20011644 	.word	0x20011644

080144a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	460b      	mov	r3, r1
 80144b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80144b4:	2300      	movs	r3, #0
 80144b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80144b8:	4b0d      	ldr	r3, [pc, #52]	; (80144f0 <CDC_Transmit_FS+0x48>)
 80144ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d001      	beq.n	80144ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80144ca:	2301      	movs	r3, #1
 80144cc:	e00b      	b.n	80144e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80144ce:	887b      	ldrh	r3, [r7, #2]
 80144d0:	461a      	mov	r2, r3
 80144d2:	6879      	ldr	r1, [r7, #4]
 80144d4:	4806      	ldr	r0, [pc, #24]	; (80144f0 <CDC_Transmit_FS+0x48>)
 80144d6:	f7f7 fdd2 	bl	800c07e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80144da:	4805      	ldr	r0, [pc, #20]	; (80144f0 <CDC_Transmit_FS+0x48>)
 80144dc:	f7f7 fdfc 	bl	800c0d8 <USBD_CDC_TransmitPacket>
 80144e0:	4603      	mov	r3, r0
 80144e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80144e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3710      	adds	r7, #16
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	bf00      	nop
 80144f0:	20011644 	.word	0x20011644

080144f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80144f4:	b480      	push	{r7}
 80144f6:	b087      	sub	sp, #28
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	4613      	mov	r3, r2
 8014500:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801450a:	4618      	mov	r0, r3
 801450c:	371c      	adds	r7, #28
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr
	...

08014518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
 801451e:	4603      	mov	r3, r0
 8014520:	6039      	str	r1, [r7, #0]
 8014522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	2212      	movs	r2, #18
 8014528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801452a:	4b03      	ldr	r3, [pc, #12]	; (8014538 <USBD_FS_DeviceDescriptor+0x20>)
}
 801452c:	4618      	mov	r0, r3
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr
 8014538:	20000154 	.word	0x20000154

0801453c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	4603      	mov	r3, r0
 8014544:	6039      	str	r1, [r7, #0]
 8014546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2204      	movs	r2, #4
 801454c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801454e:	4b03      	ldr	r3, [pc, #12]	; (801455c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014550:	4618      	mov	r0, r3
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr
 801455c:	20000174 	.word	0x20000174

08014560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	4603      	mov	r3, r0
 8014568:	6039      	str	r1, [r7, #0]
 801456a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801456c:	79fb      	ldrb	r3, [r7, #7]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d105      	bne.n	801457e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014572:	683a      	ldr	r2, [r7, #0]
 8014574:	4907      	ldr	r1, [pc, #28]	; (8014594 <USBD_FS_ProductStrDescriptor+0x34>)
 8014576:	4808      	ldr	r0, [pc, #32]	; (8014598 <USBD_FS_ProductStrDescriptor+0x38>)
 8014578:	f7f8 fe57 	bl	800d22a <USBD_GetString>
 801457c:	e004      	b.n	8014588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801457e:	683a      	ldr	r2, [r7, #0]
 8014580:	4904      	ldr	r1, [pc, #16]	; (8014594 <USBD_FS_ProductStrDescriptor+0x34>)
 8014582:	4805      	ldr	r0, [pc, #20]	; (8014598 <USBD_FS_ProductStrDescriptor+0x38>)
 8014584:	f7f8 fe51 	bl	800d22a <USBD_GetString>
  }
  return USBD_StrDesc;
 8014588:	4b02      	ldr	r3, [pc, #8]	; (8014594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20012914 	.word	0x20012914
 8014598:	08016da4 	.word	0x08016da4

0801459c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	4603      	mov	r3, r0
 80145a4:	6039      	str	r1, [r7, #0]
 80145a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80145a8:	683a      	ldr	r2, [r7, #0]
 80145aa:	4904      	ldr	r1, [pc, #16]	; (80145bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80145ac:	4804      	ldr	r0, [pc, #16]	; (80145c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80145ae:	f7f8 fe3c 	bl	800d22a <USBD_GetString>
  return USBD_StrDesc;
 80145b2:	4b02      	ldr	r3, [pc, #8]	; (80145bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	20012914 	.word	0x20012914
 80145c0:	08016dbc 	.word	0x08016dbc

080145c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	4603      	mov	r3, r0
 80145cc:	6039      	str	r1, [r7, #0]
 80145ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	221a      	movs	r2, #26
 80145d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80145d6:	f000 f855 	bl	8014684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80145da:	4b02      	ldr	r3, [pc, #8]	; (80145e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	20000178 	.word	0x20000178

080145e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	4603      	mov	r3, r0
 80145f0:	6039      	str	r1, [r7, #0]
 80145f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80145f4:	79fb      	ldrb	r3, [r7, #7]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d105      	bne.n	8014606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80145fa:	683a      	ldr	r2, [r7, #0]
 80145fc:	4907      	ldr	r1, [pc, #28]	; (801461c <USBD_FS_ConfigStrDescriptor+0x34>)
 80145fe:	4808      	ldr	r0, [pc, #32]	; (8014620 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014600:	f7f8 fe13 	bl	800d22a <USBD_GetString>
 8014604:	e004      	b.n	8014610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	4904      	ldr	r1, [pc, #16]	; (801461c <USBD_FS_ConfigStrDescriptor+0x34>)
 801460a:	4805      	ldr	r0, [pc, #20]	; (8014620 <USBD_FS_ConfigStrDescriptor+0x38>)
 801460c:	f7f8 fe0d 	bl	800d22a <USBD_GetString>
  }
  return USBD_StrDesc;
 8014610:	4b02      	ldr	r3, [pc, #8]	; (801461c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014612:	4618      	mov	r0, r3
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	20012914 	.word	0x20012914
 8014620:	08016dd0 	.word	0x08016dd0

08014624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	4603      	mov	r3, r0
 801462c:	6039      	str	r1, [r7, #0]
 801462e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014630:	79fb      	ldrb	r3, [r7, #7]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d105      	bne.n	8014642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014636:	683a      	ldr	r2, [r7, #0]
 8014638:	4907      	ldr	r1, [pc, #28]	; (8014658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801463a:	4808      	ldr	r0, [pc, #32]	; (801465c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801463c:	f7f8 fdf5 	bl	800d22a <USBD_GetString>
 8014640:	e004      	b.n	801464c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014642:	683a      	ldr	r2, [r7, #0]
 8014644:	4904      	ldr	r1, [pc, #16]	; (8014658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014646:	4805      	ldr	r0, [pc, #20]	; (801465c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014648:	f7f8 fdef 	bl	800d22a <USBD_GetString>
  }
  return USBD_StrDesc;
 801464c:	4b02      	ldr	r3, [pc, #8]	; (8014658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801464e:	4618      	mov	r0, r3
 8014650:	3708      	adds	r7, #8
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	20012914 	.word	0x20012914
 801465c:	08016ddc 	.word	0x08016ddc

08014660 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014660:	b480      	push	{r7}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
 8014666:	4603      	mov	r3, r0
 8014668:	6039      	str	r1, [r7, #0]
 801466a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	220c      	movs	r2, #12
 8014670:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8014672:	4b03      	ldr	r3, [pc, #12]	; (8014680 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8014674:	4618      	mov	r0, r3
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr
 8014680:	20000168 	.word	0x20000168

08014684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801468a:	4b0f      	ldr	r3, [pc, #60]	; (80146c8 <Get_SerialNum+0x44>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014690:	4b0e      	ldr	r3, [pc, #56]	; (80146cc <Get_SerialNum+0x48>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014696:	4b0e      	ldr	r3, [pc, #56]	; (80146d0 <Get_SerialNum+0x4c>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	4413      	add	r3, r2
 80146a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d009      	beq.n	80146be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80146aa:	2208      	movs	r2, #8
 80146ac:	4909      	ldr	r1, [pc, #36]	; (80146d4 <Get_SerialNum+0x50>)
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f000 f814 	bl	80146dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80146b4:	2204      	movs	r2, #4
 80146b6:	4908      	ldr	r1, [pc, #32]	; (80146d8 <Get_SerialNum+0x54>)
 80146b8:	68b8      	ldr	r0, [r7, #8]
 80146ba:	f000 f80f 	bl	80146dc <IntToUnicode>
  }
}
 80146be:	bf00      	nop
 80146c0:	3710      	adds	r7, #16
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	1ff0f420 	.word	0x1ff0f420
 80146cc:	1ff0f424 	.word	0x1ff0f424
 80146d0:	1ff0f428 	.word	0x1ff0f428
 80146d4:	2000017a 	.word	0x2000017a
 80146d8:	2000018a 	.word	0x2000018a

080146dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80146dc:	b480      	push	{r7}
 80146de:	b087      	sub	sp, #28
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	4613      	mov	r3, r2
 80146e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80146ea:	2300      	movs	r3, #0
 80146ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80146ee:	2300      	movs	r3, #0
 80146f0:	75fb      	strb	r3, [r7, #23]
 80146f2:	e027      	b.n	8014744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	0f1b      	lsrs	r3, r3, #28
 80146f8:	2b09      	cmp	r3, #9
 80146fa:	d80b      	bhi.n	8014714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	0f1b      	lsrs	r3, r3, #28
 8014700:	b2da      	uxtb	r2, r3
 8014702:	7dfb      	ldrb	r3, [r7, #23]
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	4619      	mov	r1, r3
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	440b      	add	r3, r1
 801470c:	3230      	adds	r2, #48	; 0x30
 801470e:	b2d2      	uxtb	r2, r2
 8014710:	701a      	strb	r2, [r3, #0]
 8014712:	e00a      	b.n	801472a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	0f1b      	lsrs	r3, r3, #28
 8014718:	b2da      	uxtb	r2, r3
 801471a:	7dfb      	ldrb	r3, [r7, #23]
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	4619      	mov	r1, r3
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	440b      	add	r3, r1
 8014724:	3237      	adds	r2, #55	; 0x37
 8014726:	b2d2      	uxtb	r2, r2
 8014728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	011b      	lsls	r3, r3, #4
 801472e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014730:	7dfb      	ldrb	r3, [r7, #23]
 8014732:	005b      	lsls	r3, r3, #1
 8014734:	3301      	adds	r3, #1
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	4413      	add	r3, r2
 801473a:	2200      	movs	r2, #0
 801473c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801473e:	7dfb      	ldrb	r3, [r7, #23]
 8014740:	3301      	adds	r3, #1
 8014742:	75fb      	strb	r3, [r7, #23]
 8014744:	7dfa      	ldrb	r2, [r7, #23]
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	429a      	cmp	r2, r3
 801474a:	d3d3      	bcc.n	80146f4 <IntToUnicode+0x18>
  }
}
 801474c:	bf00      	nop
 801474e:	371c      	adds	r7, #28
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr

08014758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b08a      	sub	sp, #40	; 0x28
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014760:	f107 0314 	add.w	r3, r7, #20
 8014764:	2200      	movs	r2, #0
 8014766:	601a      	str	r2, [r3, #0]
 8014768:	605a      	str	r2, [r3, #4]
 801476a:	609a      	str	r2, [r3, #8]
 801476c:	60da      	str	r2, [r3, #12]
 801476e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014778:	d13c      	bne.n	80147f4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801477a:	4b20      	ldr	r3, [pc, #128]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 801477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801477e:	4a1f      	ldr	r2, [pc, #124]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 8014780:	f043 0301 	orr.w	r3, r3, #1
 8014784:	6313      	str	r3, [r2, #48]	; 0x30
 8014786:	4b1d      	ldr	r3, [pc, #116]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 8014788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801478a:	f003 0301 	and.w	r3, r3, #1
 801478e:	613b      	str	r3, [r7, #16]
 8014790:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014792:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014798:	2302      	movs	r3, #2
 801479a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801479c:	2300      	movs	r3, #0
 801479e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147a0:	2303      	movs	r3, #3
 80147a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80147a4:	230a      	movs	r3, #10
 80147a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80147a8:	f107 0314 	add.w	r3, r7, #20
 80147ac:	4619      	mov	r1, r3
 80147ae:	4814      	ldr	r0, [pc, #80]	; (8014800 <HAL_PCD_MspInit+0xa8>)
 80147b0:	f7ef ff44 	bl	800463c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80147b4:	4b11      	ldr	r3, [pc, #68]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147b8:	4a10      	ldr	r2, [pc, #64]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147be:	6353      	str	r3, [r2, #52]	; 0x34
 80147c0:	4b0e      	ldr	r3, [pc, #56]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147c8:	60fb      	str	r3, [r7, #12]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	4b0b      	ldr	r3, [pc, #44]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147d0:	4a0a      	ldr	r2, [pc, #40]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80147d6:	6453      	str	r3, [r2, #68]	; 0x44
 80147d8:	4b08      	ldr	r3, [pc, #32]	; (80147fc <HAL_PCD_MspInit+0xa4>)
 80147da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80147e0:	60bb      	str	r3, [r7, #8]
 80147e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80147e4:	2200      	movs	r2, #0
 80147e6:	2105      	movs	r1, #5
 80147e8:	2043      	movs	r0, #67	; 0x43
 80147ea:	f7ef fb59 	bl	8003ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80147ee:	2043      	movs	r0, #67	; 0x43
 80147f0:	f7ef fb72 	bl	8003ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80147f4:	bf00      	nop
 80147f6:	3728      	adds	r7, #40	; 0x28
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	40023800 	.word	0x40023800
 8014800:	40020000 	.word	0x40020000

08014804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014818:	4619      	mov	r1, r3
 801481a:	4610      	mov	r0, r2
 801481c:	f7f7 fd58 	bl	800c2d0 <USBD_LL_SetupStage>
}
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	460b      	mov	r3, r1
 8014832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801483a:	78fa      	ldrb	r2, [r7, #3]
 801483c:	6879      	ldr	r1, [r7, #4]
 801483e:	4613      	mov	r3, r2
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	1a9b      	subs	r3, r3, r2
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	440b      	add	r3, r1
 8014848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	78fb      	ldrb	r3, [r7, #3]
 8014850:	4619      	mov	r1, r3
 8014852:	f7f7 fd90 	bl	800c376 <USBD_LL_DataOutStage>
}
 8014856:	bf00      	nop
 8014858:	3708      	adds	r7, #8
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}

0801485e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801485e:	b580      	push	{r7, lr}
 8014860:	b082      	sub	sp, #8
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
 8014866:	460b      	mov	r3, r1
 8014868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8014870:	78fa      	ldrb	r2, [r7, #3]
 8014872:	6879      	ldr	r1, [r7, #4]
 8014874:	4613      	mov	r3, r2
 8014876:	00db      	lsls	r3, r3, #3
 8014878:	1a9b      	subs	r3, r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	440b      	add	r3, r1
 801487e:	3348      	adds	r3, #72	; 0x48
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	78fb      	ldrb	r3, [r7, #3]
 8014884:	4619      	mov	r1, r3
 8014886:	f7f7 fdd9 	bl	800c43c <USBD_LL_DataInStage>
}
 801488a:	bf00      	nop
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b082      	sub	sp, #8
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7f7 fedd 	bl	800c660 <USBD_LL_SOF>
}
 80148a6:	bf00      	nop
 80148a8:	3708      	adds	r7, #8
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}

080148ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80148ae:	b580      	push	{r7, lr}
 80148b0:	b084      	sub	sp, #16
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80148b6:	2301      	movs	r3, #1
 80148b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d102      	bne.n	80148c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80148c2:	2300      	movs	r3, #0
 80148c4:	73fb      	strb	r3, [r7, #15]
 80148c6:	e008      	b.n	80148da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	68db      	ldr	r3, [r3, #12]
 80148cc:	2b02      	cmp	r3, #2
 80148ce:	d102      	bne.n	80148d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80148d0:	2301      	movs	r3, #1
 80148d2:	73fb      	strb	r3, [r7, #15]
 80148d4:	e001      	b.n	80148da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80148d6:	f7ec fe17 	bl	8001508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80148e0:	7bfa      	ldrb	r2, [r7, #15]
 80148e2:	4611      	mov	r1, r2
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7f7 fe80 	bl	800c5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f7 fe39 	bl	800c568 <USBD_LL_Reset>
}
 80148f6:	bf00      	nop
 80148f8:	3710      	adds	r7, #16
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
	...

08014900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801490e:	4618      	mov	r0, r3
 8014910:	f7f7 fe7b 	bl	800c60a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	6812      	ldr	r2, [r2, #0]
 8014922:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014926:	f043 0301 	orr.w	r3, r3, #1
 801492a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6a1b      	ldr	r3, [r3, #32]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d005      	beq.n	8014940 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014934:	4b04      	ldr	r3, [pc, #16]	; (8014948 <HAL_PCD_SuspendCallback+0x48>)
 8014936:	691b      	ldr	r3, [r3, #16]
 8014938:	4a03      	ldr	r2, [pc, #12]	; (8014948 <HAL_PCD_SuspendCallback+0x48>)
 801493a:	f043 0306 	orr.w	r3, r3, #6
 801493e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	e000ed00 	.word	0xe000ed00

0801494c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801495a:	4618      	mov	r0, r3
 801495c:	f7f7 fe6a 	bl	800c634 <USBD_LL_Resume>
}
 8014960:	bf00      	nop
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	460b      	mov	r3, r1
 8014972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801497a:	78fa      	ldrb	r2, [r7, #3]
 801497c:	4611      	mov	r1, r2
 801497e:	4618      	mov	r0, r3
 8014980:	f7f7 fe95 	bl	800c6ae <USBD_LL_IsoOUTIncomplete>
}
 8014984:	bf00      	nop
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	460b      	mov	r3, r1
 8014996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801499e:	78fa      	ldrb	r2, [r7, #3]
 80149a0:	4611      	mov	r1, r2
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7f7 fe76 	bl	800c694 <USBD_LL_IsoINIncomplete>
}
 80149a8:	bf00      	nop
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80149be:	4618      	mov	r0, r3
 80149c0:	f7f7 fe82 	bl	800c6c8 <USBD_LL_DevConnected>
}
 80149c4:	bf00      	nop
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f7 fe7f 	bl	800c6de <USBD_LL_DevDisconnected>
}
 80149e0:	bf00      	nop
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d13c      	bne.n	8014a72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80149f8:	4a20      	ldr	r2, [pc, #128]	; (8014a7c <USBD_LL_Init+0x94>)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	4a1e      	ldr	r2, [pc, #120]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014a08:	4b1c      	ldr	r3, [pc, #112]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014a10:	4b1a      	ldr	r3, [pc, #104]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a12:	2206      	movs	r2, #6
 8014a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014a16:	4b19      	ldr	r3, [pc, #100]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a18:	2202      	movs	r2, #2
 8014a1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014a1c:	4b17      	ldr	r3, [pc, #92]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a1e:	2200      	movs	r2, #0
 8014a20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014a22:	4b16      	ldr	r3, [pc, #88]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a24:	2202      	movs	r2, #2
 8014a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014a28:	4b14      	ldr	r3, [pc, #80]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014a2e:	4b13      	ldr	r3, [pc, #76]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a30:	2200      	movs	r2, #0
 8014a32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014a34:	4b11      	ldr	r3, [pc, #68]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a36:	2200      	movs	r2, #0
 8014a38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014a3a:	4b10      	ldr	r3, [pc, #64]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014a40:	4b0e      	ldr	r3, [pc, #56]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a42:	2200      	movs	r2, #0
 8014a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014a46:	480d      	ldr	r0, [pc, #52]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a48:	f7ef ffd5 	bl	80049f6 <HAL_PCD_Init>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d001      	beq.n	8014a56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014a52:	f7ec fd59 	bl	8001508 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014a56:	2180      	movs	r1, #128	; 0x80
 8014a58:	4808      	ldr	r0, [pc, #32]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a5a:	f7f1 f956 	bl	8005d0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014a5e:	2240      	movs	r2, #64	; 0x40
 8014a60:	2100      	movs	r1, #0
 8014a62:	4806      	ldr	r0, [pc, #24]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a64:	f7f1 f90a 	bl	8005c7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014a68:	2280      	movs	r2, #128	; 0x80
 8014a6a:	2101      	movs	r1, #1
 8014a6c:	4803      	ldr	r0, [pc, #12]	; (8014a7c <USBD_LL_Init+0x94>)
 8014a6e:	f7f1 f905 	bl	8005c7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014a72:	2300      	movs	r3, #0
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3708      	adds	r7, #8
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	20012b14 	.word	0x20012b14

08014a80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f0 f8d1 	bl	8004c3e <HAL_PCD_Start>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014aa0:	7bfb      	ldrb	r3, [r7, #15]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f000 f97e 	bl	8014da4 <USBD_Get_USB_Status>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ab6:	b580      	push	{r7, lr}
 8014ab8:	b084      	sub	sp, #16
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	70fb      	strb	r3, [r7, #3]
 8014ac8:	460b      	mov	r3, r1
 8014aca:	70bb      	strb	r3, [r7, #2]
 8014acc:	4613      	mov	r3, r2
 8014ace:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ade:	78bb      	ldrb	r3, [r7, #2]
 8014ae0:	883a      	ldrh	r2, [r7, #0]
 8014ae2:	78f9      	ldrb	r1, [r7, #3]
 8014ae4:	f7f0 fcd1 	bl	800548a <HAL_PCD_EP_Open>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
 8014aee:	4618      	mov	r0, r3
 8014af0:	f000 f958 	bl	8014da4 <USBD_Get_USB_Status>
 8014af4:	4603      	mov	r3, r0
 8014af6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3710      	adds	r7, #16
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b084      	sub	sp, #16
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b1c:	78fa      	ldrb	r2, [r7, #3]
 8014b1e:	4611      	mov	r1, r2
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7f0 fd1a 	bl	800555a <HAL_PCD_EP_Close>
 8014b26:	4603      	mov	r3, r0
 8014b28:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8014b2a:	7bfb      	ldrb	r3, [r7, #15]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f000 f939 	bl	8014da4 <USBD_Get_USB_Status>
 8014b32:	4603      	mov	r3, r0
 8014b34:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3710      	adds	r7, #16
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	460b      	mov	r3, r1
 8014b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b50:	2300      	movs	r3, #0
 8014b52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b5a:	78fa      	ldrb	r2, [r7, #3]
 8014b5c:	4611      	mov	r1, r2
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7f0 fdf2 	bl	8005748 <HAL_PCD_EP_SetStall>
 8014b64:	4603      	mov	r3, r0
 8014b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b68:	7bfb      	ldrb	r3, [r7, #15]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f000 f91a 	bl	8014da4 <USBD_Get_USB_Status>
 8014b70:	4603      	mov	r3, r0
 8014b72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3710      	adds	r7, #16
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}

08014b7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b084      	sub	sp, #16
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	460b      	mov	r3, r1
 8014b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b98:	78fa      	ldrb	r2, [r7, #3]
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f0 fe37 	bl	8005810 <HAL_PCD_EP_ClrStall>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014ba6:	7bfb      	ldrb	r3, [r7, #15]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f000 f8fb 	bl	8014da4 <USBD_Get_USB_Status>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b085      	sub	sp, #20
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014bce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	da0b      	bge.n	8014bf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014bd8:	78fb      	ldrb	r3, [r7, #3]
 8014bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014bde:	68f9      	ldr	r1, [r7, #12]
 8014be0:	4613      	mov	r3, r2
 8014be2:	00db      	lsls	r3, r3, #3
 8014be4:	1a9b      	subs	r3, r3, r2
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	440b      	add	r3, r1
 8014bea:	333e      	adds	r3, #62	; 0x3e
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	e00b      	b.n	8014c08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014bf0:	78fb      	ldrb	r3, [r7, #3]
 8014bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014bf6:	68f9      	ldr	r1, [r7, #12]
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	1a9b      	subs	r3, r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	440b      	add	r3, r1
 8014c02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014c06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3714      	adds	r7, #20
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr

08014c14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c20:	2300      	movs	r3, #0
 8014c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c24:	2300      	movs	r3, #0
 8014c26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c2e:	78fa      	ldrb	r2, [r7, #3]
 8014c30:	4611      	mov	r1, r2
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7f0 fc04 	bl	8005440 <HAL_PCD_SetAddress>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f000 f8b0 	bl	8014da4 <USBD_Get_USB_Status>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b086      	sub	sp, #24
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	60f8      	str	r0, [r7, #12]
 8014c5a:	607a      	str	r2, [r7, #4]
 8014c5c:	603b      	str	r3, [r7, #0]
 8014c5e:	460b      	mov	r3, r1
 8014c60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c62:	2300      	movs	r3, #0
 8014c64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c66:	2300      	movs	r3, #0
 8014c68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c70:	7af9      	ldrb	r1, [r7, #11]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	f7f0 fd1d 	bl	80056b4 <HAL_PCD_EP_Transmit>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014c7e:	7dfb      	ldrb	r3, [r7, #23]
 8014c80:	4618      	mov	r0, r3
 8014c82:	f000 f88f 	bl	8014da4 <USBD_Get_USB_Status>
 8014c86:	4603      	mov	r3, r0
 8014c88:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8014c8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3718      	adds	r7, #24
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b086      	sub	sp, #24
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	607a      	str	r2, [r7, #4]
 8014c9e:	603b      	str	r3, [r7, #0]
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014cb2:	7af9      	ldrb	r1, [r7, #11]
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	687a      	ldr	r2, [r7, #4]
 8014cb8:	f7f0 fc99 	bl	80055ee <HAL_PCD_EP_Receive>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014cc0:	7dfb      	ldrb	r3, [r7, #23]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 f86e 	bl	8014da4 <USBD_Get_USB_Status>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014ccc:	7dbb      	ldrb	r3, [r7, #22]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3718      	adds	r7, #24
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b082      	sub	sp, #8
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
 8014cde:	460b      	mov	r3, r1
 8014ce0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ce8:	78fa      	ldrb	r2, [r7, #3]
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7f0 fcc9 	bl	8005684 <HAL_PCD_EP_GetRxCount>
 8014cf2:	4603      	mov	r3, r0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	460b      	mov	r3, r1
 8014d06:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014d08:	78fb      	ldrb	r3, [r7, #3]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d002      	beq.n	8014d14 <HAL_PCDEx_LPM_Callback+0x18>
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d01f      	beq.n	8014d52 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8014d12:	e03b      	b.n	8014d8c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6a1b      	ldr	r3, [r3, #32]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d007      	beq.n	8014d2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014d1c:	f000 f83c 	bl	8014d98 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d20:	4b1c      	ldr	r3, [pc, #112]	; (8014d94 <HAL_PCDEx_LPM_Callback+0x98>)
 8014d22:	691b      	ldr	r3, [r3, #16]
 8014d24:	4a1b      	ldr	r2, [pc, #108]	; (8014d94 <HAL_PCDEx_LPM_Callback+0x98>)
 8014d26:	f023 0306 	bic.w	r3, r3, #6
 8014d2a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	6812      	ldr	r2, [r2, #0]
 8014d3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d3e:	f023 0301 	bic.w	r3, r3, #1
 8014d42:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f7 fc72 	bl	800c634 <USBD_LL_Resume>
    break;
 8014d50:	e01c      	b.n	8014d8c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	6812      	ldr	r2, [r2, #0]
 8014d60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d64:	f043 0301 	orr.w	r3, r3, #1
 8014d68:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7f7 fc4a 	bl	800c60a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6a1b      	ldr	r3, [r3, #32]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d005      	beq.n	8014d8a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d7e:	4b05      	ldr	r3, [pc, #20]	; (8014d94 <HAL_PCDEx_LPM_Callback+0x98>)
 8014d80:	691b      	ldr	r3, [r3, #16]
 8014d82:	4a04      	ldr	r2, [pc, #16]	; (8014d94 <HAL_PCDEx_LPM_Callback+0x98>)
 8014d84:	f043 0306 	orr.w	r3, r3, #6
 8014d88:	6113      	str	r3, [r2, #16]
    break;   
 8014d8a:	bf00      	nop
}
 8014d8c:	bf00      	nop
 8014d8e:	3708      	adds	r7, #8
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	e000ed00 	.word	0xe000ed00

08014d98 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014d9c:	f7ec f9bc 	bl	8001118 <SystemClock_Config>
}
 8014da0:	bf00      	nop
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b085      	sub	sp, #20
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	4603      	mov	r3, r0
 8014dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014db2:	79fb      	ldrb	r3, [r7, #7]
 8014db4:	2b03      	cmp	r3, #3
 8014db6:	d817      	bhi.n	8014de8 <USBD_Get_USB_Status+0x44>
 8014db8:	a201      	add	r2, pc, #4	; (adr r2, 8014dc0 <USBD_Get_USB_Status+0x1c>)
 8014dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dbe:	bf00      	nop
 8014dc0:	08014dd1 	.word	0x08014dd1
 8014dc4:	08014dd7 	.word	0x08014dd7
 8014dc8:	08014ddd 	.word	0x08014ddd
 8014dcc:	08014de3 	.word	0x08014de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8014dd4:	e00b      	b.n	8014dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8014dda:	e008      	b.n	8014dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014ddc:	2301      	movs	r3, #1
 8014dde:	73fb      	strb	r3, [r7, #15]
    break;
 8014de0:	e005      	b.n	8014dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014de2:	2303      	movs	r3, #3
 8014de4:	73fb      	strb	r3, [r7, #15]
    break;
 8014de6:	e002      	b.n	8014dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014de8:	2303      	movs	r3, #3
 8014dea:	73fb      	strb	r3, [r7, #15]
    break;
 8014dec:	bf00      	nop
  }
  return usb_status;
 8014dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3714      	adds	r7, #20
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <__errno>:
 8014dfc:	4b01      	ldr	r3, [pc, #4]	; (8014e04 <__errno+0x8>)
 8014dfe:	6818      	ldr	r0, [r3, #0]
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	20000194 	.word	0x20000194

08014e08 <__libc_init_array>:
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	4e0d      	ldr	r6, [pc, #52]	; (8014e40 <__libc_init_array+0x38>)
 8014e0c:	4c0d      	ldr	r4, [pc, #52]	; (8014e44 <__libc_init_array+0x3c>)
 8014e0e:	1ba4      	subs	r4, r4, r6
 8014e10:	10a4      	asrs	r4, r4, #2
 8014e12:	2500      	movs	r5, #0
 8014e14:	42a5      	cmp	r5, r4
 8014e16:	d109      	bne.n	8014e2c <__libc_init_array+0x24>
 8014e18:	4e0b      	ldr	r6, [pc, #44]	; (8014e48 <__libc_init_array+0x40>)
 8014e1a:	4c0c      	ldr	r4, [pc, #48]	; (8014e4c <__libc_init_array+0x44>)
 8014e1c:	f001 fd56 	bl	80168cc <_init>
 8014e20:	1ba4      	subs	r4, r4, r6
 8014e22:	10a4      	asrs	r4, r4, #2
 8014e24:	2500      	movs	r5, #0
 8014e26:	42a5      	cmp	r5, r4
 8014e28:	d105      	bne.n	8014e36 <__libc_init_array+0x2e>
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}
 8014e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e30:	4798      	blx	r3
 8014e32:	3501      	adds	r5, #1
 8014e34:	e7ee      	b.n	8014e14 <__libc_init_array+0xc>
 8014e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e3a:	4798      	blx	r3
 8014e3c:	3501      	adds	r5, #1
 8014e3e:	e7f2      	b.n	8014e26 <__libc_init_array+0x1e>
 8014e40:	08016fd8 	.word	0x08016fd8
 8014e44:	08016fd8 	.word	0x08016fd8
 8014e48:	08016fd8 	.word	0x08016fd8
 8014e4c:	08016fdc 	.word	0x08016fdc

08014e50 <malloc>:
 8014e50:	4b02      	ldr	r3, [pc, #8]	; (8014e5c <malloc+0xc>)
 8014e52:	4601      	mov	r1, r0
 8014e54:	6818      	ldr	r0, [r3, #0]
 8014e56:	f000 b86d 	b.w	8014f34 <_malloc_r>
 8014e5a:	bf00      	nop
 8014e5c:	20000194 	.word	0x20000194

08014e60 <free>:
 8014e60:	4b02      	ldr	r3, [pc, #8]	; (8014e6c <free+0xc>)
 8014e62:	4601      	mov	r1, r0
 8014e64:	6818      	ldr	r0, [r3, #0]
 8014e66:	f000 b817 	b.w	8014e98 <_free_r>
 8014e6a:	bf00      	nop
 8014e6c:	20000194 	.word	0x20000194

08014e70 <memcpy>:
 8014e70:	b510      	push	{r4, lr}
 8014e72:	1e43      	subs	r3, r0, #1
 8014e74:	440a      	add	r2, r1
 8014e76:	4291      	cmp	r1, r2
 8014e78:	d100      	bne.n	8014e7c <memcpy+0xc>
 8014e7a:	bd10      	pop	{r4, pc}
 8014e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e84:	e7f7      	b.n	8014e76 <memcpy+0x6>

08014e86 <memset>:
 8014e86:	4402      	add	r2, r0
 8014e88:	4603      	mov	r3, r0
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d100      	bne.n	8014e90 <memset+0xa>
 8014e8e:	4770      	bx	lr
 8014e90:	f803 1b01 	strb.w	r1, [r3], #1
 8014e94:	e7f9      	b.n	8014e8a <memset+0x4>
	...

08014e98 <_free_r>:
 8014e98:	b538      	push	{r3, r4, r5, lr}
 8014e9a:	4605      	mov	r5, r0
 8014e9c:	2900      	cmp	r1, #0
 8014e9e:	d045      	beq.n	8014f2c <_free_r+0x94>
 8014ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ea4:	1f0c      	subs	r4, r1, #4
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	bfb8      	it	lt
 8014eaa:	18e4      	addlt	r4, r4, r3
 8014eac:	f000 f91a 	bl	80150e4 <__malloc_lock>
 8014eb0:	4a1f      	ldr	r2, [pc, #124]	; (8014f30 <_free_r+0x98>)
 8014eb2:	6813      	ldr	r3, [r2, #0]
 8014eb4:	4610      	mov	r0, r2
 8014eb6:	b933      	cbnz	r3, 8014ec6 <_free_r+0x2e>
 8014eb8:	6063      	str	r3, [r4, #4]
 8014eba:	6014      	str	r4, [r2, #0]
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ec2:	f000 b910 	b.w	80150e6 <__malloc_unlock>
 8014ec6:	42a3      	cmp	r3, r4
 8014ec8:	d90c      	bls.n	8014ee4 <_free_r+0x4c>
 8014eca:	6821      	ldr	r1, [r4, #0]
 8014ecc:	1862      	adds	r2, r4, r1
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	bf04      	itt	eq
 8014ed2:	681a      	ldreq	r2, [r3, #0]
 8014ed4:	685b      	ldreq	r3, [r3, #4]
 8014ed6:	6063      	str	r3, [r4, #4]
 8014ed8:	bf04      	itt	eq
 8014eda:	1852      	addeq	r2, r2, r1
 8014edc:	6022      	streq	r2, [r4, #0]
 8014ede:	6004      	str	r4, [r0, #0]
 8014ee0:	e7ec      	b.n	8014ebc <_free_r+0x24>
 8014ee2:	4613      	mov	r3, r2
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	b10a      	cbz	r2, 8014eec <_free_r+0x54>
 8014ee8:	42a2      	cmp	r2, r4
 8014eea:	d9fa      	bls.n	8014ee2 <_free_r+0x4a>
 8014eec:	6819      	ldr	r1, [r3, #0]
 8014eee:	1858      	adds	r0, r3, r1
 8014ef0:	42a0      	cmp	r0, r4
 8014ef2:	d10b      	bne.n	8014f0c <_free_r+0x74>
 8014ef4:	6820      	ldr	r0, [r4, #0]
 8014ef6:	4401      	add	r1, r0
 8014ef8:	1858      	adds	r0, r3, r1
 8014efa:	4282      	cmp	r2, r0
 8014efc:	6019      	str	r1, [r3, #0]
 8014efe:	d1dd      	bne.n	8014ebc <_free_r+0x24>
 8014f00:	6810      	ldr	r0, [r2, #0]
 8014f02:	6852      	ldr	r2, [r2, #4]
 8014f04:	605a      	str	r2, [r3, #4]
 8014f06:	4401      	add	r1, r0
 8014f08:	6019      	str	r1, [r3, #0]
 8014f0a:	e7d7      	b.n	8014ebc <_free_r+0x24>
 8014f0c:	d902      	bls.n	8014f14 <_free_r+0x7c>
 8014f0e:	230c      	movs	r3, #12
 8014f10:	602b      	str	r3, [r5, #0]
 8014f12:	e7d3      	b.n	8014ebc <_free_r+0x24>
 8014f14:	6820      	ldr	r0, [r4, #0]
 8014f16:	1821      	adds	r1, r4, r0
 8014f18:	428a      	cmp	r2, r1
 8014f1a:	bf04      	itt	eq
 8014f1c:	6811      	ldreq	r1, [r2, #0]
 8014f1e:	6852      	ldreq	r2, [r2, #4]
 8014f20:	6062      	str	r2, [r4, #4]
 8014f22:	bf04      	itt	eq
 8014f24:	1809      	addeq	r1, r1, r0
 8014f26:	6021      	streq	r1, [r4, #0]
 8014f28:	605c      	str	r4, [r3, #4]
 8014f2a:	e7c7      	b.n	8014ebc <_free_r+0x24>
 8014f2c:	bd38      	pop	{r3, r4, r5, pc}
 8014f2e:	bf00      	nop
 8014f30:	20008810 	.word	0x20008810

08014f34 <_malloc_r>:
 8014f34:	b570      	push	{r4, r5, r6, lr}
 8014f36:	1ccd      	adds	r5, r1, #3
 8014f38:	f025 0503 	bic.w	r5, r5, #3
 8014f3c:	3508      	adds	r5, #8
 8014f3e:	2d0c      	cmp	r5, #12
 8014f40:	bf38      	it	cc
 8014f42:	250c      	movcc	r5, #12
 8014f44:	2d00      	cmp	r5, #0
 8014f46:	4606      	mov	r6, r0
 8014f48:	db01      	blt.n	8014f4e <_malloc_r+0x1a>
 8014f4a:	42a9      	cmp	r1, r5
 8014f4c:	d903      	bls.n	8014f56 <_malloc_r+0x22>
 8014f4e:	230c      	movs	r3, #12
 8014f50:	6033      	str	r3, [r6, #0]
 8014f52:	2000      	movs	r0, #0
 8014f54:	bd70      	pop	{r4, r5, r6, pc}
 8014f56:	f000 f8c5 	bl	80150e4 <__malloc_lock>
 8014f5a:	4a21      	ldr	r2, [pc, #132]	; (8014fe0 <_malloc_r+0xac>)
 8014f5c:	6814      	ldr	r4, [r2, #0]
 8014f5e:	4621      	mov	r1, r4
 8014f60:	b991      	cbnz	r1, 8014f88 <_malloc_r+0x54>
 8014f62:	4c20      	ldr	r4, [pc, #128]	; (8014fe4 <_malloc_r+0xb0>)
 8014f64:	6823      	ldr	r3, [r4, #0]
 8014f66:	b91b      	cbnz	r3, 8014f70 <_malloc_r+0x3c>
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f000 f83d 	bl	8014fe8 <_sbrk_r>
 8014f6e:	6020      	str	r0, [r4, #0]
 8014f70:	4629      	mov	r1, r5
 8014f72:	4630      	mov	r0, r6
 8014f74:	f000 f838 	bl	8014fe8 <_sbrk_r>
 8014f78:	1c43      	adds	r3, r0, #1
 8014f7a:	d124      	bne.n	8014fc6 <_malloc_r+0x92>
 8014f7c:	230c      	movs	r3, #12
 8014f7e:	6033      	str	r3, [r6, #0]
 8014f80:	4630      	mov	r0, r6
 8014f82:	f000 f8b0 	bl	80150e6 <__malloc_unlock>
 8014f86:	e7e4      	b.n	8014f52 <_malloc_r+0x1e>
 8014f88:	680b      	ldr	r3, [r1, #0]
 8014f8a:	1b5b      	subs	r3, r3, r5
 8014f8c:	d418      	bmi.n	8014fc0 <_malloc_r+0x8c>
 8014f8e:	2b0b      	cmp	r3, #11
 8014f90:	d90f      	bls.n	8014fb2 <_malloc_r+0x7e>
 8014f92:	600b      	str	r3, [r1, #0]
 8014f94:	50cd      	str	r5, [r1, r3]
 8014f96:	18cc      	adds	r4, r1, r3
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f000 f8a4 	bl	80150e6 <__malloc_unlock>
 8014f9e:	f104 000b 	add.w	r0, r4, #11
 8014fa2:	1d23      	adds	r3, r4, #4
 8014fa4:	f020 0007 	bic.w	r0, r0, #7
 8014fa8:	1ac3      	subs	r3, r0, r3
 8014faa:	d0d3      	beq.n	8014f54 <_malloc_r+0x20>
 8014fac:	425a      	negs	r2, r3
 8014fae:	50e2      	str	r2, [r4, r3]
 8014fb0:	e7d0      	b.n	8014f54 <_malloc_r+0x20>
 8014fb2:	428c      	cmp	r4, r1
 8014fb4:	684b      	ldr	r3, [r1, #4]
 8014fb6:	bf16      	itet	ne
 8014fb8:	6063      	strne	r3, [r4, #4]
 8014fba:	6013      	streq	r3, [r2, #0]
 8014fbc:	460c      	movne	r4, r1
 8014fbe:	e7eb      	b.n	8014f98 <_malloc_r+0x64>
 8014fc0:	460c      	mov	r4, r1
 8014fc2:	6849      	ldr	r1, [r1, #4]
 8014fc4:	e7cc      	b.n	8014f60 <_malloc_r+0x2c>
 8014fc6:	1cc4      	adds	r4, r0, #3
 8014fc8:	f024 0403 	bic.w	r4, r4, #3
 8014fcc:	42a0      	cmp	r0, r4
 8014fce:	d005      	beq.n	8014fdc <_malloc_r+0xa8>
 8014fd0:	1a21      	subs	r1, r4, r0
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	f000 f808 	bl	8014fe8 <_sbrk_r>
 8014fd8:	3001      	adds	r0, #1
 8014fda:	d0cf      	beq.n	8014f7c <_malloc_r+0x48>
 8014fdc:	6025      	str	r5, [r4, #0]
 8014fde:	e7db      	b.n	8014f98 <_malloc_r+0x64>
 8014fe0:	20008810 	.word	0x20008810
 8014fe4:	20008814 	.word	0x20008814

08014fe8 <_sbrk_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4c06      	ldr	r4, [pc, #24]	; (8015004 <_sbrk_r+0x1c>)
 8014fec:	2300      	movs	r3, #0
 8014fee:	4605      	mov	r5, r0
 8014ff0:	4608      	mov	r0, r1
 8014ff2:	6023      	str	r3, [r4, #0]
 8014ff4:	f7ec fd60 	bl	8001ab8 <_sbrk>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d102      	bne.n	8015002 <_sbrk_r+0x1a>
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	b103      	cbz	r3, 8015002 <_sbrk_r+0x1a>
 8015000:	602b      	str	r3, [r5, #0]
 8015002:	bd38      	pop	{r3, r4, r5, pc}
 8015004:	20012f18 	.word	0x20012f18

08015008 <sniprintf>:
 8015008:	b40c      	push	{r2, r3}
 801500a:	b530      	push	{r4, r5, lr}
 801500c:	4b17      	ldr	r3, [pc, #92]	; (801506c <sniprintf+0x64>)
 801500e:	1e0c      	subs	r4, r1, #0
 8015010:	b09d      	sub	sp, #116	; 0x74
 8015012:	681d      	ldr	r5, [r3, #0]
 8015014:	da08      	bge.n	8015028 <sniprintf+0x20>
 8015016:	238b      	movs	r3, #139	; 0x8b
 8015018:	602b      	str	r3, [r5, #0]
 801501a:	f04f 30ff 	mov.w	r0, #4294967295
 801501e:	b01d      	add	sp, #116	; 0x74
 8015020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015024:	b002      	add	sp, #8
 8015026:	4770      	bx	lr
 8015028:	f44f 7302 	mov.w	r3, #520	; 0x208
 801502c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015030:	bf14      	ite	ne
 8015032:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015036:	4623      	moveq	r3, r4
 8015038:	9304      	str	r3, [sp, #16]
 801503a:	9307      	str	r3, [sp, #28]
 801503c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015040:	9002      	str	r0, [sp, #8]
 8015042:	9006      	str	r0, [sp, #24]
 8015044:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015048:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801504a:	ab21      	add	r3, sp, #132	; 0x84
 801504c:	a902      	add	r1, sp, #8
 801504e:	4628      	mov	r0, r5
 8015050:	9301      	str	r3, [sp, #4]
 8015052:	f000 f8a3 	bl	801519c <_svfiprintf_r>
 8015056:	1c43      	adds	r3, r0, #1
 8015058:	bfbc      	itt	lt
 801505a:	238b      	movlt	r3, #139	; 0x8b
 801505c:	602b      	strlt	r3, [r5, #0]
 801505e:	2c00      	cmp	r4, #0
 8015060:	d0dd      	beq.n	801501e <sniprintf+0x16>
 8015062:	9b02      	ldr	r3, [sp, #8]
 8015064:	2200      	movs	r2, #0
 8015066:	701a      	strb	r2, [r3, #0]
 8015068:	e7d9      	b.n	801501e <sniprintf+0x16>
 801506a:	bf00      	nop
 801506c:	20000194 	.word	0x20000194

08015070 <_vsniprintf_r>:
 8015070:	b530      	push	{r4, r5, lr}
 8015072:	1e14      	subs	r4, r2, #0
 8015074:	4605      	mov	r5, r0
 8015076:	b09b      	sub	sp, #108	; 0x6c
 8015078:	4618      	mov	r0, r3
 801507a:	da05      	bge.n	8015088 <_vsniprintf_r+0x18>
 801507c:	238b      	movs	r3, #139	; 0x8b
 801507e:	602b      	str	r3, [r5, #0]
 8015080:	f04f 30ff 	mov.w	r0, #4294967295
 8015084:	b01b      	add	sp, #108	; 0x6c
 8015086:	bd30      	pop	{r4, r5, pc}
 8015088:	f44f 7302 	mov.w	r3, #520	; 0x208
 801508c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015090:	bf14      	ite	ne
 8015092:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015096:	4623      	moveq	r3, r4
 8015098:	9302      	str	r3, [sp, #8]
 801509a:	9305      	str	r3, [sp, #20]
 801509c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150a0:	9100      	str	r1, [sp, #0]
 80150a2:	9104      	str	r1, [sp, #16]
 80150a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80150a8:	4602      	mov	r2, r0
 80150aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80150ac:	4669      	mov	r1, sp
 80150ae:	4628      	mov	r0, r5
 80150b0:	f000 f874 	bl	801519c <_svfiprintf_r>
 80150b4:	1c43      	adds	r3, r0, #1
 80150b6:	bfbc      	itt	lt
 80150b8:	238b      	movlt	r3, #139	; 0x8b
 80150ba:	602b      	strlt	r3, [r5, #0]
 80150bc:	2c00      	cmp	r4, #0
 80150be:	d0e1      	beq.n	8015084 <_vsniprintf_r+0x14>
 80150c0:	9b00      	ldr	r3, [sp, #0]
 80150c2:	2200      	movs	r2, #0
 80150c4:	701a      	strb	r2, [r3, #0]
 80150c6:	e7dd      	b.n	8015084 <_vsniprintf_r+0x14>

080150c8 <vsniprintf>:
 80150c8:	b507      	push	{r0, r1, r2, lr}
 80150ca:	9300      	str	r3, [sp, #0]
 80150cc:	4613      	mov	r3, r2
 80150ce:	460a      	mov	r2, r1
 80150d0:	4601      	mov	r1, r0
 80150d2:	4803      	ldr	r0, [pc, #12]	; (80150e0 <vsniprintf+0x18>)
 80150d4:	6800      	ldr	r0, [r0, #0]
 80150d6:	f7ff ffcb 	bl	8015070 <_vsniprintf_r>
 80150da:	b003      	add	sp, #12
 80150dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80150e0:	20000194 	.word	0x20000194

080150e4 <__malloc_lock>:
 80150e4:	4770      	bx	lr

080150e6 <__malloc_unlock>:
 80150e6:	4770      	bx	lr

080150e8 <__ssputs_r>:
 80150e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150ec:	688e      	ldr	r6, [r1, #8]
 80150ee:	429e      	cmp	r6, r3
 80150f0:	4682      	mov	sl, r0
 80150f2:	460c      	mov	r4, r1
 80150f4:	4690      	mov	r8, r2
 80150f6:	4699      	mov	r9, r3
 80150f8:	d837      	bhi.n	801516a <__ssputs_r+0x82>
 80150fa:	898a      	ldrh	r2, [r1, #12]
 80150fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015100:	d031      	beq.n	8015166 <__ssputs_r+0x7e>
 8015102:	6825      	ldr	r5, [r4, #0]
 8015104:	6909      	ldr	r1, [r1, #16]
 8015106:	1a6f      	subs	r7, r5, r1
 8015108:	6965      	ldr	r5, [r4, #20]
 801510a:	2302      	movs	r3, #2
 801510c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015110:	fb95 f5f3 	sdiv	r5, r5, r3
 8015114:	f109 0301 	add.w	r3, r9, #1
 8015118:	443b      	add	r3, r7
 801511a:	429d      	cmp	r5, r3
 801511c:	bf38      	it	cc
 801511e:	461d      	movcc	r5, r3
 8015120:	0553      	lsls	r3, r2, #21
 8015122:	d530      	bpl.n	8015186 <__ssputs_r+0x9e>
 8015124:	4629      	mov	r1, r5
 8015126:	f7ff ff05 	bl	8014f34 <_malloc_r>
 801512a:	4606      	mov	r6, r0
 801512c:	b950      	cbnz	r0, 8015144 <__ssputs_r+0x5c>
 801512e:	230c      	movs	r3, #12
 8015130:	f8ca 3000 	str.w	r3, [sl]
 8015134:	89a3      	ldrh	r3, [r4, #12]
 8015136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801513a:	81a3      	strh	r3, [r4, #12]
 801513c:	f04f 30ff 	mov.w	r0, #4294967295
 8015140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015144:	463a      	mov	r2, r7
 8015146:	6921      	ldr	r1, [r4, #16]
 8015148:	f7ff fe92 	bl	8014e70 <memcpy>
 801514c:	89a3      	ldrh	r3, [r4, #12]
 801514e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015156:	81a3      	strh	r3, [r4, #12]
 8015158:	6126      	str	r6, [r4, #16]
 801515a:	6165      	str	r5, [r4, #20]
 801515c:	443e      	add	r6, r7
 801515e:	1bed      	subs	r5, r5, r7
 8015160:	6026      	str	r6, [r4, #0]
 8015162:	60a5      	str	r5, [r4, #8]
 8015164:	464e      	mov	r6, r9
 8015166:	454e      	cmp	r6, r9
 8015168:	d900      	bls.n	801516c <__ssputs_r+0x84>
 801516a:	464e      	mov	r6, r9
 801516c:	4632      	mov	r2, r6
 801516e:	4641      	mov	r1, r8
 8015170:	6820      	ldr	r0, [r4, #0]
 8015172:	f000 fa93 	bl	801569c <memmove>
 8015176:	68a3      	ldr	r3, [r4, #8]
 8015178:	1b9b      	subs	r3, r3, r6
 801517a:	60a3      	str	r3, [r4, #8]
 801517c:	6823      	ldr	r3, [r4, #0]
 801517e:	441e      	add	r6, r3
 8015180:	6026      	str	r6, [r4, #0]
 8015182:	2000      	movs	r0, #0
 8015184:	e7dc      	b.n	8015140 <__ssputs_r+0x58>
 8015186:	462a      	mov	r2, r5
 8015188:	f000 faa1 	bl	80156ce <_realloc_r>
 801518c:	4606      	mov	r6, r0
 801518e:	2800      	cmp	r0, #0
 8015190:	d1e2      	bne.n	8015158 <__ssputs_r+0x70>
 8015192:	6921      	ldr	r1, [r4, #16]
 8015194:	4650      	mov	r0, sl
 8015196:	f7ff fe7f 	bl	8014e98 <_free_r>
 801519a:	e7c8      	b.n	801512e <__ssputs_r+0x46>

0801519c <_svfiprintf_r>:
 801519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a0:	461d      	mov	r5, r3
 80151a2:	898b      	ldrh	r3, [r1, #12]
 80151a4:	061f      	lsls	r7, r3, #24
 80151a6:	b09d      	sub	sp, #116	; 0x74
 80151a8:	4680      	mov	r8, r0
 80151aa:	460c      	mov	r4, r1
 80151ac:	4616      	mov	r6, r2
 80151ae:	d50f      	bpl.n	80151d0 <_svfiprintf_r+0x34>
 80151b0:	690b      	ldr	r3, [r1, #16]
 80151b2:	b96b      	cbnz	r3, 80151d0 <_svfiprintf_r+0x34>
 80151b4:	2140      	movs	r1, #64	; 0x40
 80151b6:	f7ff febd 	bl	8014f34 <_malloc_r>
 80151ba:	6020      	str	r0, [r4, #0]
 80151bc:	6120      	str	r0, [r4, #16]
 80151be:	b928      	cbnz	r0, 80151cc <_svfiprintf_r+0x30>
 80151c0:	230c      	movs	r3, #12
 80151c2:	f8c8 3000 	str.w	r3, [r8]
 80151c6:	f04f 30ff 	mov.w	r0, #4294967295
 80151ca:	e0c8      	b.n	801535e <_svfiprintf_r+0x1c2>
 80151cc:	2340      	movs	r3, #64	; 0x40
 80151ce:	6163      	str	r3, [r4, #20]
 80151d0:	2300      	movs	r3, #0
 80151d2:	9309      	str	r3, [sp, #36]	; 0x24
 80151d4:	2320      	movs	r3, #32
 80151d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151da:	2330      	movs	r3, #48	; 0x30
 80151dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151e0:	9503      	str	r5, [sp, #12]
 80151e2:	f04f 0b01 	mov.w	fp, #1
 80151e6:	4637      	mov	r7, r6
 80151e8:	463d      	mov	r5, r7
 80151ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80151ee:	b10b      	cbz	r3, 80151f4 <_svfiprintf_r+0x58>
 80151f0:	2b25      	cmp	r3, #37	; 0x25
 80151f2:	d13e      	bne.n	8015272 <_svfiprintf_r+0xd6>
 80151f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80151f8:	d00b      	beq.n	8015212 <_svfiprintf_r+0x76>
 80151fa:	4653      	mov	r3, sl
 80151fc:	4632      	mov	r2, r6
 80151fe:	4621      	mov	r1, r4
 8015200:	4640      	mov	r0, r8
 8015202:	f7ff ff71 	bl	80150e8 <__ssputs_r>
 8015206:	3001      	adds	r0, #1
 8015208:	f000 80a4 	beq.w	8015354 <_svfiprintf_r+0x1b8>
 801520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801520e:	4453      	add	r3, sl
 8015210:	9309      	str	r3, [sp, #36]	; 0x24
 8015212:	783b      	ldrb	r3, [r7, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 809d 	beq.w	8015354 <_svfiprintf_r+0x1b8>
 801521a:	2300      	movs	r3, #0
 801521c:	f04f 32ff 	mov.w	r2, #4294967295
 8015220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015224:	9304      	str	r3, [sp, #16]
 8015226:	9307      	str	r3, [sp, #28]
 8015228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801522c:	931a      	str	r3, [sp, #104]	; 0x68
 801522e:	462f      	mov	r7, r5
 8015230:	2205      	movs	r2, #5
 8015232:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015236:	4850      	ldr	r0, [pc, #320]	; (8015378 <_svfiprintf_r+0x1dc>)
 8015238:	f7ea fff2 	bl	8000220 <memchr>
 801523c:	9b04      	ldr	r3, [sp, #16]
 801523e:	b9d0      	cbnz	r0, 8015276 <_svfiprintf_r+0xda>
 8015240:	06d9      	lsls	r1, r3, #27
 8015242:	bf44      	itt	mi
 8015244:	2220      	movmi	r2, #32
 8015246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801524a:	071a      	lsls	r2, r3, #28
 801524c:	bf44      	itt	mi
 801524e:	222b      	movmi	r2, #43	; 0x2b
 8015250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015254:	782a      	ldrb	r2, [r5, #0]
 8015256:	2a2a      	cmp	r2, #42	; 0x2a
 8015258:	d015      	beq.n	8015286 <_svfiprintf_r+0xea>
 801525a:	9a07      	ldr	r2, [sp, #28]
 801525c:	462f      	mov	r7, r5
 801525e:	2000      	movs	r0, #0
 8015260:	250a      	movs	r5, #10
 8015262:	4639      	mov	r1, r7
 8015264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015268:	3b30      	subs	r3, #48	; 0x30
 801526a:	2b09      	cmp	r3, #9
 801526c:	d94d      	bls.n	801530a <_svfiprintf_r+0x16e>
 801526e:	b1b8      	cbz	r0, 80152a0 <_svfiprintf_r+0x104>
 8015270:	e00f      	b.n	8015292 <_svfiprintf_r+0xf6>
 8015272:	462f      	mov	r7, r5
 8015274:	e7b8      	b.n	80151e8 <_svfiprintf_r+0x4c>
 8015276:	4a40      	ldr	r2, [pc, #256]	; (8015378 <_svfiprintf_r+0x1dc>)
 8015278:	1a80      	subs	r0, r0, r2
 801527a:	fa0b f000 	lsl.w	r0, fp, r0
 801527e:	4318      	orrs	r0, r3
 8015280:	9004      	str	r0, [sp, #16]
 8015282:	463d      	mov	r5, r7
 8015284:	e7d3      	b.n	801522e <_svfiprintf_r+0x92>
 8015286:	9a03      	ldr	r2, [sp, #12]
 8015288:	1d11      	adds	r1, r2, #4
 801528a:	6812      	ldr	r2, [r2, #0]
 801528c:	9103      	str	r1, [sp, #12]
 801528e:	2a00      	cmp	r2, #0
 8015290:	db01      	blt.n	8015296 <_svfiprintf_r+0xfa>
 8015292:	9207      	str	r2, [sp, #28]
 8015294:	e004      	b.n	80152a0 <_svfiprintf_r+0x104>
 8015296:	4252      	negs	r2, r2
 8015298:	f043 0302 	orr.w	r3, r3, #2
 801529c:	9207      	str	r2, [sp, #28]
 801529e:	9304      	str	r3, [sp, #16]
 80152a0:	783b      	ldrb	r3, [r7, #0]
 80152a2:	2b2e      	cmp	r3, #46	; 0x2e
 80152a4:	d10c      	bne.n	80152c0 <_svfiprintf_r+0x124>
 80152a6:	787b      	ldrb	r3, [r7, #1]
 80152a8:	2b2a      	cmp	r3, #42	; 0x2a
 80152aa:	d133      	bne.n	8015314 <_svfiprintf_r+0x178>
 80152ac:	9b03      	ldr	r3, [sp, #12]
 80152ae:	1d1a      	adds	r2, r3, #4
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	9203      	str	r2, [sp, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	bfb8      	it	lt
 80152b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80152bc:	3702      	adds	r7, #2
 80152be:	9305      	str	r3, [sp, #20]
 80152c0:	4d2e      	ldr	r5, [pc, #184]	; (801537c <_svfiprintf_r+0x1e0>)
 80152c2:	7839      	ldrb	r1, [r7, #0]
 80152c4:	2203      	movs	r2, #3
 80152c6:	4628      	mov	r0, r5
 80152c8:	f7ea ffaa 	bl	8000220 <memchr>
 80152cc:	b138      	cbz	r0, 80152de <_svfiprintf_r+0x142>
 80152ce:	2340      	movs	r3, #64	; 0x40
 80152d0:	1b40      	subs	r0, r0, r5
 80152d2:	fa03 f000 	lsl.w	r0, r3, r0
 80152d6:	9b04      	ldr	r3, [sp, #16]
 80152d8:	4303      	orrs	r3, r0
 80152da:	3701      	adds	r7, #1
 80152dc:	9304      	str	r3, [sp, #16]
 80152de:	7839      	ldrb	r1, [r7, #0]
 80152e0:	4827      	ldr	r0, [pc, #156]	; (8015380 <_svfiprintf_r+0x1e4>)
 80152e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152e6:	2206      	movs	r2, #6
 80152e8:	1c7e      	adds	r6, r7, #1
 80152ea:	f7ea ff99 	bl	8000220 <memchr>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d038      	beq.n	8015364 <_svfiprintf_r+0x1c8>
 80152f2:	4b24      	ldr	r3, [pc, #144]	; (8015384 <_svfiprintf_r+0x1e8>)
 80152f4:	bb13      	cbnz	r3, 801533c <_svfiprintf_r+0x1a0>
 80152f6:	9b03      	ldr	r3, [sp, #12]
 80152f8:	3307      	adds	r3, #7
 80152fa:	f023 0307 	bic.w	r3, r3, #7
 80152fe:	3308      	adds	r3, #8
 8015300:	9303      	str	r3, [sp, #12]
 8015302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015304:	444b      	add	r3, r9
 8015306:	9309      	str	r3, [sp, #36]	; 0x24
 8015308:	e76d      	b.n	80151e6 <_svfiprintf_r+0x4a>
 801530a:	fb05 3202 	mla	r2, r5, r2, r3
 801530e:	2001      	movs	r0, #1
 8015310:	460f      	mov	r7, r1
 8015312:	e7a6      	b.n	8015262 <_svfiprintf_r+0xc6>
 8015314:	2300      	movs	r3, #0
 8015316:	3701      	adds	r7, #1
 8015318:	9305      	str	r3, [sp, #20]
 801531a:	4619      	mov	r1, r3
 801531c:	250a      	movs	r5, #10
 801531e:	4638      	mov	r0, r7
 8015320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015324:	3a30      	subs	r2, #48	; 0x30
 8015326:	2a09      	cmp	r2, #9
 8015328:	d903      	bls.n	8015332 <_svfiprintf_r+0x196>
 801532a:	2b00      	cmp	r3, #0
 801532c:	d0c8      	beq.n	80152c0 <_svfiprintf_r+0x124>
 801532e:	9105      	str	r1, [sp, #20]
 8015330:	e7c6      	b.n	80152c0 <_svfiprintf_r+0x124>
 8015332:	fb05 2101 	mla	r1, r5, r1, r2
 8015336:	2301      	movs	r3, #1
 8015338:	4607      	mov	r7, r0
 801533a:	e7f0      	b.n	801531e <_svfiprintf_r+0x182>
 801533c:	ab03      	add	r3, sp, #12
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	4622      	mov	r2, r4
 8015342:	4b11      	ldr	r3, [pc, #68]	; (8015388 <_svfiprintf_r+0x1ec>)
 8015344:	a904      	add	r1, sp, #16
 8015346:	4640      	mov	r0, r8
 8015348:	f3af 8000 	nop.w
 801534c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015350:	4681      	mov	r9, r0
 8015352:	d1d6      	bne.n	8015302 <_svfiprintf_r+0x166>
 8015354:	89a3      	ldrh	r3, [r4, #12]
 8015356:	065b      	lsls	r3, r3, #25
 8015358:	f53f af35 	bmi.w	80151c6 <_svfiprintf_r+0x2a>
 801535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801535e:	b01d      	add	sp, #116	; 0x74
 8015360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015364:	ab03      	add	r3, sp, #12
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	4622      	mov	r2, r4
 801536a:	4b07      	ldr	r3, [pc, #28]	; (8015388 <_svfiprintf_r+0x1ec>)
 801536c:	a904      	add	r1, sp, #16
 801536e:	4640      	mov	r0, r8
 8015370:	f000 f882 	bl	8015478 <_printf_i>
 8015374:	e7ea      	b.n	801534c <_svfiprintf_r+0x1b0>
 8015376:	bf00      	nop
 8015378:	08016f54 	.word	0x08016f54
 801537c:	08016f5a 	.word	0x08016f5a
 8015380:	08016f5e 	.word	0x08016f5e
 8015384:	00000000 	.word	0x00000000
 8015388:	080150e9 	.word	0x080150e9

0801538c <_printf_common>:
 801538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015390:	4691      	mov	r9, r2
 8015392:	461f      	mov	r7, r3
 8015394:	688a      	ldr	r2, [r1, #8]
 8015396:	690b      	ldr	r3, [r1, #16]
 8015398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801539c:	4293      	cmp	r3, r2
 801539e:	bfb8      	it	lt
 80153a0:	4613      	movlt	r3, r2
 80153a2:	f8c9 3000 	str.w	r3, [r9]
 80153a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80153aa:	4606      	mov	r6, r0
 80153ac:	460c      	mov	r4, r1
 80153ae:	b112      	cbz	r2, 80153b6 <_printf_common+0x2a>
 80153b0:	3301      	adds	r3, #1
 80153b2:	f8c9 3000 	str.w	r3, [r9]
 80153b6:	6823      	ldr	r3, [r4, #0]
 80153b8:	0699      	lsls	r1, r3, #26
 80153ba:	bf42      	ittt	mi
 80153bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80153c0:	3302      	addmi	r3, #2
 80153c2:	f8c9 3000 	strmi.w	r3, [r9]
 80153c6:	6825      	ldr	r5, [r4, #0]
 80153c8:	f015 0506 	ands.w	r5, r5, #6
 80153cc:	d107      	bne.n	80153de <_printf_common+0x52>
 80153ce:	f104 0a19 	add.w	sl, r4, #25
 80153d2:	68e3      	ldr	r3, [r4, #12]
 80153d4:	f8d9 2000 	ldr.w	r2, [r9]
 80153d8:	1a9b      	subs	r3, r3, r2
 80153da:	42ab      	cmp	r3, r5
 80153dc:	dc28      	bgt.n	8015430 <_printf_common+0xa4>
 80153de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80153e2:	6822      	ldr	r2, [r4, #0]
 80153e4:	3300      	adds	r3, #0
 80153e6:	bf18      	it	ne
 80153e8:	2301      	movne	r3, #1
 80153ea:	0692      	lsls	r2, r2, #26
 80153ec:	d42d      	bmi.n	801544a <_printf_common+0xbe>
 80153ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153f2:	4639      	mov	r1, r7
 80153f4:	4630      	mov	r0, r6
 80153f6:	47c0      	blx	r8
 80153f8:	3001      	adds	r0, #1
 80153fa:	d020      	beq.n	801543e <_printf_common+0xb2>
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	68e5      	ldr	r5, [r4, #12]
 8015400:	f8d9 2000 	ldr.w	r2, [r9]
 8015404:	f003 0306 	and.w	r3, r3, #6
 8015408:	2b04      	cmp	r3, #4
 801540a:	bf08      	it	eq
 801540c:	1aad      	subeq	r5, r5, r2
 801540e:	68a3      	ldr	r3, [r4, #8]
 8015410:	6922      	ldr	r2, [r4, #16]
 8015412:	bf0c      	ite	eq
 8015414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015418:	2500      	movne	r5, #0
 801541a:	4293      	cmp	r3, r2
 801541c:	bfc4      	itt	gt
 801541e:	1a9b      	subgt	r3, r3, r2
 8015420:	18ed      	addgt	r5, r5, r3
 8015422:	f04f 0900 	mov.w	r9, #0
 8015426:	341a      	adds	r4, #26
 8015428:	454d      	cmp	r5, r9
 801542a:	d11a      	bne.n	8015462 <_printf_common+0xd6>
 801542c:	2000      	movs	r0, #0
 801542e:	e008      	b.n	8015442 <_printf_common+0xb6>
 8015430:	2301      	movs	r3, #1
 8015432:	4652      	mov	r2, sl
 8015434:	4639      	mov	r1, r7
 8015436:	4630      	mov	r0, r6
 8015438:	47c0      	blx	r8
 801543a:	3001      	adds	r0, #1
 801543c:	d103      	bne.n	8015446 <_printf_common+0xba>
 801543e:	f04f 30ff 	mov.w	r0, #4294967295
 8015442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015446:	3501      	adds	r5, #1
 8015448:	e7c3      	b.n	80153d2 <_printf_common+0x46>
 801544a:	18e1      	adds	r1, r4, r3
 801544c:	1c5a      	adds	r2, r3, #1
 801544e:	2030      	movs	r0, #48	; 0x30
 8015450:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015454:	4422      	add	r2, r4
 8015456:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801545a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801545e:	3302      	adds	r3, #2
 8015460:	e7c5      	b.n	80153ee <_printf_common+0x62>
 8015462:	2301      	movs	r3, #1
 8015464:	4622      	mov	r2, r4
 8015466:	4639      	mov	r1, r7
 8015468:	4630      	mov	r0, r6
 801546a:	47c0      	blx	r8
 801546c:	3001      	adds	r0, #1
 801546e:	d0e6      	beq.n	801543e <_printf_common+0xb2>
 8015470:	f109 0901 	add.w	r9, r9, #1
 8015474:	e7d8      	b.n	8015428 <_printf_common+0x9c>
	...

08015478 <_printf_i>:
 8015478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801547c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015480:	460c      	mov	r4, r1
 8015482:	7e09      	ldrb	r1, [r1, #24]
 8015484:	b085      	sub	sp, #20
 8015486:	296e      	cmp	r1, #110	; 0x6e
 8015488:	4617      	mov	r7, r2
 801548a:	4606      	mov	r6, r0
 801548c:	4698      	mov	r8, r3
 801548e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015490:	f000 80b3 	beq.w	80155fa <_printf_i+0x182>
 8015494:	d822      	bhi.n	80154dc <_printf_i+0x64>
 8015496:	2963      	cmp	r1, #99	; 0x63
 8015498:	d036      	beq.n	8015508 <_printf_i+0x90>
 801549a:	d80a      	bhi.n	80154b2 <_printf_i+0x3a>
 801549c:	2900      	cmp	r1, #0
 801549e:	f000 80b9 	beq.w	8015614 <_printf_i+0x19c>
 80154a2:	2958      	cmp	r1, #88	; 0x58
 80154a4:	f000 8083 	beq.w	80155ae <_printf_i+0x136>
 80154a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80154b0:	e032      	b.n	8015518 <_printf_i+0xa0>
 80154b2:	2964      	cmp	r1, #100	; 0x64
 80154b4:	d001      	beq.n	80154ba <_printf_i+0x42>
 80154b6:	2969      	cmp	r1, #105	; 0x69
 80154b8:	d1f6      	bne.n	80154a8 <_printf_i+0x30>
 80154ba:	6820      	ldr	r0, [r4, #0]
 80154bc:	6813      	ldr	r3, [r2, #0]
 80154be:	0605      	lsls	r5, r0, #24
 80154c0:	f103 0104 	add.w	r1, r3, #4
 80154c4:	d52a      	bpl.n	801551c <_printf_i+0xa4>
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	6011      	str	r1, [r2, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	da03      	bge.n	80154d6 <_printf_i+0x5e>
 80154ce:	222d      	movs	r2, #45	; 0x2d
 80154d0:	425b      	negs	r3, r3
 80154d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80154d6:	486f      	ldr	r0, [pc, #444]	; (8015694 <_printf_i+0x21c>)
 80154d8:	220a      	movs	r2, #10
 80154da:	e039      	b.n	8015550 <_printf_i+0xd8>
 80154dc:	2973      	cmp	r1, #115	; 0x73
 80154de:	f000 809d 	beq.w	801561c <_printf_i+0x1a4>
 80154e2:	d808      	bhi.n	80154f6 <_printf_i+0x7e>
 80154e4:	296f      	cmp	r1, #111	; 0x6f
 80154e6:	d020      	beq.n	801552a <_printf_i+0xb2>
 80154e8:	2970      	cmp	r1, #112	; 0x70
 80154ea:	d1dd      	bne.n	80154a8 <_printf_i+0x30>
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	f043 0320 	orr.w	r3, r3, #32
 80154f2:	6023      	str	r3, [r4, #0]
 80154f4:	e003      	b.n	80154fe <_printf_i+0x86>
 80154f6:	2975      	cmp	r1, #117	; 0x75
 80154f8:	d017      	beq.n	801552a <_printf_i+0xb2>
 80154fa:	2978      	cmp	r1, #120	; 0x78
 80154fc:	d1d4      	bne.n	80154a8 <_printf_i+0x30>
 80154fe:	2378      	movs	r3, #120	; 0x78
 8015500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015504:	4864      	ldr	r0, [pc, #400]	; (8015698 <_printf_i+0x220>)
 8015506:	e055      	b.n	80155b4 <_printf_i+0x13c>
 8015508:	6813      	ldr	r3, [r2, #0]
 801550a:	1d19      	adds	r1, r3, #4
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	6011      	str	r1, [r2, #0]
 8015510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015518:	2301      	movs	r3, #1
 801551a:	e08c      	b.n	8015636 <_printf_i+0x1be>
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	6011      	str	r1, [r2, #0]
 8015520:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015524:	bf18      	it	ne
 8015526:	b21b      	sxthne	r3, r3
 8015528:	e7cf      	b.n	80154ca <_printf_i+0x52>
 801552a:	6813      	ldr	r3, [r2, #0]
 801552c:	6825      	ldr	r5, [r4, #0]
 801552e:	1d18      	adds	r0, r3, #4
 8015530:	6010      	str	r0, [r2, #0]
 8015532:	0628      	lsls	r0, r5, #24
 8015534:	d501      	bpl.n	801553a <_printf_i+0xc2>
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	e002      	b.n	8015540 <_printf_i+0xc8>
 801553a:	0668      	lsls	r0, r5, #25
 801553c:	d5fb      	bpl.n	8015536 <_printf_i+0xbe>
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	4854      	ldr	r0, [pc, #336]	; (8015694 <_printf_i+0x21c>)
 8015542:	296f      	cmp	r1, #111	; 0x6f
 8015544:	bf14      	ite	ne
 8015546:	220a      	movne	r2, #10
 8015548:	2208      	moveq	r2, #8
 801554a:	2100      	movs	r1, #0
 801554c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015550:	6865      	ldr	r5, [r4, #4]
 8015552:	60a5      	str	r5, [r4, #8]
 8015554:	2d00      	cmp	r5, #0
 8015556:	f2c0 8095 	blt.w	8015684 <_printf_i+0x20c>
 801555a:	6821      	ldr	r1, [r4, #0]
 801555c:	f021 0104 	bic.w	r1, r1, #4
 8015560:	6021      	str	r1, [r4, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d13d      	bne.n	80155e2 <_printf_i+0x16a>
 8015566:	2d00      	cmp	r5, #0
 8015568:	f040 808e 	bne.w	8015688 <_printf_i+0x210>
 801556c:	4665      	mov	r5, ip
 801556e:	2a08      	cmp	r2, #8
 8015570:	d10b      	bne.n	801558a <_printf_i+0x112>
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	07db      	lsls	r3, r3, #31
 8015576:	d508      	bpl.n	801558a <_printf_i+0x112>
 8015578:	6923      	ldr	r3, [r4, #16]
 801557a:	6862      	ldr	r2, [r4, #4]
 801557c:	429a      	cmp	r2, r3
 801557e:	bfde      	ittt	le
 8015580:	2330      	movle	r3, #48	; 0x30
 8015582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015586:	f105 35ff 	addle.w	r5, r5, #4294967295
 801558a:	ebac 0305 	sub.w	r3, ip, r5
 801558e:	6123      	str	r3, [r4, #16]
 8015590:	f8cd 8000 	str.w	r8, [sp]
 8015594:	463b      	mov	r3, r7
 8015596:	aa03      	add	r2, sp, #12
 8015598:	4621      	mov	r1, r4
 801559a:	4630      	mov	r0, r6
 801559c:	f7ff fef6 	bl	801538c <_printf_common>
 80155a0:	3001      	adds	r0, #1
 80155a2:	d14d      	bne.n	8015640 <_printf_i+0x1c8>
 80155a4:	f04f 30ff 	mov.w	r0, #4294967295
 80155a8:	b005      	add	sp, #20
 80155aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155ae:	4839      	ldr	r0, [pc, #228]	; (8015694 <_printf_i+0x21c>)
 80155b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80155b4:	6813      	ldr	r3, [r2, #0]
 80155b6:	6821      	ldr	r1, [r4, #0]
 80155b8:	1d1d      	adds	r5, r3, #4
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	6015      	str	r5, [r2, #0]
 80155be:	060a      	lsls	r2, r1, #24
 80155c0:	d50b      	bpl.n	80155da <_printf_i+0x162>
 80155c2:	07ca      	lsls	r2, r1, #31
 80155c4:	bf44      	itt	mi
 80155c6:	f041 0120 	orrmi.w	r1, r1, #32
 80155ca:	6021      	strmi	r1, [r4, #0]
 80155cc:	b91b      	cbnz	r3, 80155d6 <_printf_i+0x15e>
 80155ce:	6822      	ldr	r2, [r4, #0]
 80155d0:	f022 0220 	bic.w	r2, r2, #32
 80155d4:	6022      	str	r2, [r4, #0]
 80155d6:	2210      	movs	r2, #16
 80155d8:	e7b7      	b.n	801554a <_printf_i+0xd2>
 80155da:	064d      	lsls	r5, r1, #25
 80155dc:	bf48      	it	mi
 80155de:	b29b      	uxthmi	r3, r3
 80155e0:	e7ef      	b.n	80155c2 <_printf_i+0x14a>
 80155e2:	4665      	mov	r5, ip
 80155e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80155e8:	fb02 3311 	mls	r3, r2, r1, r3
 80155ec:	5cc3      	ldrb	r3, [r0, r3]
 80155ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80155f2:	460b      	mov	r3, r1
 80155f4:	2900      	cmp	r1, #0
 80155f6:	d1f5      	bne.n	80155e4 <_printf_i+0x16c>
 80155f8:	e7b9      	b.n	801556e <_printf_i+0xf6>
 80155fa:	6813      	ldr	r3, [r2, #0]
 80155fc:	6825      	ldr	r5, [r4, #0]
 80155fe:	6961      	ldr	r1, [r4, #20]
 8015600:	1d18      	adds	r0, r3, #4
 8015602:	6010      	str	r0, [r2, #0]
 8015604:	0628      	lsls	r0, r5, #24
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	d501      	bpl.n	801560e <_printf_i+0x196>
 801560a:	6019      	str	r1, [r3, #0]
 801560c:	e002      	b.n	8015614 <_printf_i+0x19c>
 801560e:	066a      	lsls	r2, r5, #25
 8015610:	d5fb      	bpl.n	801560a <_printf_i+0x192>
 8015612:	8019      	strh	r1, [r3, #0]
 8015614:	2300      	movs	r3, #0
 8015616:	6123      	str	r3, [r4, #16]
 8015618:	4665      	mov	r5, ip
 801561a:	e7b9      	b.n	8015590 <_printf_i+0x118>
 801561c:	6813      	ldr	r3, [r2, #0]
 801561e:	1d19      	adds	r1, r3, #4
 8015620:	6011      	str	r1, [r2, #0]
 8015622:	681d      	ldr	r5, [r3, #0]
 8015624:	6862      	ldr	r2, [r4, #4]
 8015626:	2100      	movs	r1, #0
 8015628:	4628      	mov	r0, r5
 801562a:	f7ea fdf9 	bl	8000220 <memchr>
 801562e:	b108      	cbz	r0, 8015634 <_printf_i+0x1bc>
 8015630:	1b40      	subs	r0, r0, r5
 8015632:	6060      	str	r0, [r4, #4]
 8015634:	6863      	ldr	r3, [r4, #4]
 8015636:	6123      	str	r3, [r4, #16]
 8015638:	2300      	movs	r3, #0
 801563a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801563e:	e7a7      	b.n	8015590 <_printf_i+0x118>
 8015640:	6923      	ldr	r3, [r4, #16]
 8015642:	462a      	mov	r2, r5
 8015644:	4639      	mov	r1, r7
 8015646:	4630      	mov	r0, r6
 8015648:	47c0      	blx	r8
 801564a:	3001      	adds	r0, #1
 801564c:	d0aa      	beq.n	80155a4 <_printf_i+0x12c>
 801564e:	6823      	ldr	r3, [r4, #0]
 8015650:	079b      	lsls	r3, r3, #30
 8015652:	d413      	bmi.n	801567c <_printf_i+0x204>
 8015654:	68e0      	ldr	r0, [r4, #12]
 8015656:	9b03      	ldr	r3, [sp, #12]
 8015658:	4298      	cmp	r0, r3
 801565a:	bfb8      	it	lt
 801565c:	4618      	movlt	r0, r3
 801565e:	e7a3      	b.n	80155a8 <_printf_i+0x130>
 8015660:	2301      	movs	r3, #1
 8015662:	464a      	mov	r2, r9
 8015664:	4639      	mov	r1, r7
 8015666:	4630      	mov	r0, r6
 8015668:	47c0      	blx	r8
 801566a:	3001      	adds	r0, #1
 801566c:	d09a      	beq.n	80155a4 <_printf_i+0x12c>
 801566e:	3501      	adds	r5, #1
 8015670:	68e3      	ldr	r3, [r4, #12]
 8015672:	9a03      	ldr	r2, [sp, #12]
 8015674:	1a9b      	subs	r3, r3, r2
 8015676:	42ab      	cmp	r3, r5
 8015678:	dcf2      	bgt.n	8015660 <_printf_i+0x1e8>
 801567a:	e7eb      	b.n	8015654 <_printf_i+0x1dc>
 801567c:	2500      	movs	r5, #0
 801567e:	f104 0919 	add.w	r9, r4, #25
 8015682:	e7f5      	b.n	8015670 <_printf_i+0x1f8>
 8015684:	2b00      	cmp	r3, #0
 8015686:	d1ac      	bne.n	80155e2 <_printf_i+0x16a>
 8015688:	7803      	ldrb	r3, [r0, #0]
 801568a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801568e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015692:	e76c      	b.n	801556e <_printf_i+0xf6>
 8015694:	08016f65 	.word	0x08016f65
 8015698:	08016f76 	.word	0x08016f76

0801569c <memmove>:
 801569c:	4288      	cmp	r0, r1
 801569e:	b510      	push	{r4, lr}
 80156a0:	eb01 0302 	add.w	r3, r1, r2
 80156a4:	d807      	bhi.n	80156b6 <memmove+0x1a>
 80156a6:	1e42      	subs	r2, r0, #1
 80156a8:	4299      	cmp	r1, r3
 80156aa:	d00a      	beq.n	80156c2 <memmove+0x26>
 80156ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80156b4:	e7f8      	b.n	80156a8 <memmove+0xc>
 80156b6:	4283      	cmp	r3, r0
 80156b8:	d9f5      	bls.n	80156a6 <memmove+0xa>
 80156ba:	1881      	adds	r1, r0, r2
 80156bc:	1ad2      	subs	r2, r2, r3
 80156be:	42d3      	cmn	r3, r2
 80156c0:	d100      	bne.n	80156c4 <memmove+0x28>
 80156c2:	bd10      	pop	{r4, pc}
 80156c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80156cc:	e7f7      	b.n	80156be <memmove+0x22>

080156ce <_realloc_r>:
 80156ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d0:	4607      	mov	r7, r0
 80156d2:	4614      	mov	r4, r2
 80156d4:	460e      	mov	r6, r1
 80156d6:	b921      	cbnz	r1, 80156e2 <_realloc_r+0x14>
 80156d8:	4611      	mov	r1, r2
 80156da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80156de:	f7ff bc29 	b.w	8014f34 <_malloc_r>
 80156e2:	b922      	cbnz	r2, 80156ee <_realloc_r+0x20>
 80156e4:	f7ff fbd8 	bl	8014e98 <_free_r>
 80156e8:	4625      	mov	r5, r4
 80156ea:	4628      	mov	r0, r5
 80156ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156ee:	f000 f814 	bl	801571a <_malloc_usable_size_r>
 80156f2:	42a0      	cmp	r0, r4
 80156f4:	d20f      	bcs.n	8015716 <_realloc_r+0x48>
 80156f6:	4621      	mov	r1, r4
 80156f8:	4638      	mov	r0, r7
 80156fa:	f7ff fc1b 	bl	8014f34 <_malloc_r>
 80156fe:	4605      	mov	r5, r0
 8015700:	2800      	cmp	r0, #0
 8015702:	d0f2      	beq.n	80156ea <_realloc_r+0x1c>
 8015704:	4631      	mov	r1, r6
 8015706:	4622      	mov	r2, r4
 8015708:	f7ff fbb2 	bl	8014e70 <memcpy>
 801570c:	4631      	mov	r1, r6
 801570e:	4638      	mov	r0, r7
 8015710:	f7ff fbc2 	bl	8014e98 <_free_r>
 8015714:	e7e9      	b.n	80156ea <_realloc_r+0x1c>
 8015716:	4635      	mov	r5, r6
 8015718:	e7e7      	b.n	80156ea <_realloc_r+0x1c>

0801571a <_malloc_usable_size_r>:
 801571a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801571e:	1f18      	subs	r0, r3, #4
 8015720:	2b00      	cmp	r3, #0
 8015722:	bfbc      	itt	lt
 8015724:	580b      	ldrlt	r3, [r1, r0]
 8015726:	18c0      	addlt	r0, r0, r3
 8015728:	4770      	bx	lr

0801572a <fmax>:
 801572a:	b508      	push	{r3, lr}
 801572c:	ed2d 8b04 	vpush	{d8-d9}
 8015730:	eeb0 8a40 	vmov.f32	s16, s0
 8015734:	eef0 8a60 	vmov.f32	s17, s1
 8015738:	eeb0 9a41 	vmov.f32	s18, s2
 801573c:	eef0 9a61 	vmov.f32	s19, s3
 8015740:	f000 f842 	bl	80157c8 <__fpclassifyd>
 8015744:	b168      	cbz	r0, 8015762 <fmax+0x38>
 8015746:	eeb0 0a49 	vmov.f32	s0, s18
 801574a:	eef0 0a69 	vmov.f32	s1, s19
 801574e:	f000 f83b 	bl	80157c8 <__fpclassifyd>
 8015752:	b150      	cbz	r0, 801576a <fmax+0x40>
 8015754:	ec53 2b19 	vmov	r2, r3, d9
 8015758:	ec51 0b18 	vmov	r0, r1, d8
 801575c:	f7eb f9fc 	bl	8000b58 <__aeabi_dcmpgt>
 8015760:	b918      	cbnz	r0, 801576a <fmax+0x40>
 8015762:	eeb0 8a49 	vmov.f32	s16, s18
 8015766:	eef0 8a69 	vmov.f32	s17, s19
 801576a:	eeb0 0a48 	vmov.f32	s0, s16
 801576e:	eef0 0a68 	vmov.f32	s1, s17
 8015772:	ecbd 8b04 	vpop	{d8-d9}
 8015776:	bd08      	pop	{r3, pc}

08015778 <fmin>:
 8015778:	b508      	push	{r3, lr}
 801577a:	ed2d 8b04 	vpush	{d8-d9}
 801577e:	eeb0 8a40 	vmov.f32	s16, s0
 8015782:	eef0 8a60 	vmov.f32	s17, s1
 8015786:	eeb0 9a41 	vmov.f32	s18, s2
 801578a:	eef0 9a61 	vmov.f32	s19, s3
 801578e:	f000 f81b 	bl	80157c8 <__fpclassifyd>
 8015792:	b168      	cbz	r0, 80157b0 <fmin+0x38>
 8015794:	eeb0 0a49 	vmov.f32	s0, s18
 8015798:	eef0 0a69 	vmov.f32	s1, s19
 801579c:	f000 f814 	bl	80157c8 <__fpclassifyd>
 80157a0:	b150      	cbz	r0, 80157b8 <fmin+0x40>
 80157a2:	ec53 2b19 	vmov	r2, r3, d9
 80157a6:	ec51 0b18 	vmov	r0, r1, d8
 80157aa:	f7eb f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80157ae:	b918      	cbnz	r0, 80157b8 <fmin+0x40>
 80157b0:	eeb0 8a49 	vmov.f32	s16, s18
 80157b4:	eef0 8a69 	vmov.f32	s17, s19
 80157b8:	eeb0 0a48 	vmov.f32	s0, s16
 80157bc:	eef0 0a68 	vmov.f32	s1, s17
 80157c0:	ecbd 8b04 	vpop	{d8-d9}
 80157c4:	bd08      	pop	{r3, pc}
	...

080157c8 <__fpclassifyd>:
 80157c8:	ec51 0b10 	vmov	r0, r1, d0
 80157cc:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 80157d0:	b510      	push	{r4, lr}
 80157d2:	460b      	mov	r3, r1
 80157d4:	d01b      	beq.n	801580e <__fpclassifyd+0x46>
 80157d6:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80157da:	490f      	ldr	r1, [pc, #60]	; (8015818 <__fpclassifyd+0x50>)
 80157dc:	428c      	cmp	r4, r1
 80157de:	d910      	bls.n	8015802 <__fpclassifyd+0x3a>
 80157e0:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80157e4:	490c      	ldr	r1, [pc, #48]	; (8015818 <__fpclassifyd+0x50>)
 80157e6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80157ea:	428b      	cmp	r3, r1
 80157ec:	d909      	bls.n	8015802 <__fpclassifyd+0x3a>
 80157ee:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80157f2:	d308      	bcc.n	8015806 <__fpclassifyd+0x3e>
 80157f4:	4b09      	ldr	r3, [pc, #36]	; (801581c <__fpclassifyd+0x54>)
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d107      	bne.n	801580a <__fpclassifyd+0x42>
 80157fa:	fab0 f080 	clz	r0, r0
 80157fe:	0940      	lsrs	r0, r0, #5
 8015800:	bd10      	pop	{r4, pc}
 8015802:	2004      	movs	r0, #4
 8015804:	e7fc      	b.n	8015800 <__fpclassifyd+0x38>
 8015806:	2003      	movs	r0, #3
 8015808:	e7fa      	b.n	8015800 <__fpclassifyd+0x38>
 801580a:	2000      	movs	r0, #0
 801580c:	e7f8      	b.n	8015800 <__fpclassifyd+0x38>
 801580e:	2800      	cmp	r0, #0
 8015810:	d1e6      	bne.n	80157e0 <__fpclassifyd+0x18>
 8015812:	2002      	movs	r0, #2
 8015814:	e7f4      	b.n	8015800 <__fpclassifyd+0x38>
 8015816:	bf00      	nop
 8015818:	7fdfffff 	.word	0x7fdfffff
 801581c:	7ff00000 	.word	0x7ff00000

08015820 <pow>:
 8015820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015824:	ed2d 8b04 	vpush	{d8-d9}
 8015828:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015afc <pow+0x2dc>
 801582c:	b08d      	sub	sp, #52	; 0x34
 801582e:	ec57 6b10 	vmov	r6, r7, d0
 8015832:	ec55 4b11 	vmov	r4, r5, d1
 8015836:	f000 f963 	bl	8015b00 <__ieee754_pow>
 801583a:	f999 3000 	ldrsb.w	r3, [r9]
 801583e:	9300      	str	r3, [sp, #0]
 8015840:	3301      	adds	r3, #1
 8015842:	eeb0 8a40 	vmov.f32	s16, s0
 8015846:	eef0 8a60 	vmov.f32	s17, s1
 801584a:	46c8      	mov	r8, r9
 801584c:	d05f      	beq.n	801590e <pow+0xee>
 801584e:	4622      	mov	r2, r4
 8015850:	462b      	mov	r3, r5
 8015852:	4620      	mov	r0, r4
 8015854:	4629      	mov	r1, r5
 8015856:	f7eb f989 	bl	8000b6c <__aeabi_dcmpun>
 801585a:	4683      	mov	fp, r0
 801585c:	2800      	cmp	r0, #0
 801585e:	d156      	bne.n	801590e <pow+0xee>
 8015860:	4632      	mov	r2, r6
 8015862:	463b      	mov	r3, r7
 8015864:	4630      	mov	r0, r6
 8015866:	4639      	mov	r1, r7
 8015868:	f7eb f980 	bl	8000b6c <__aeabi_dcmpun>
 801586c:	9001      	str	r0, [sp, #4]
 801586e:	b1e8      	cbz	r0, 80158ac <pow+0x8c>
 8015870:	2200      	movs	r2, #0
 8015872:	2300      	movs	r3, #0
 8015874:	4620      	mov	r0, r4
 8015876:	4629      	mov	r1, r5
 8015878:	f7eb f946 	bl	8000b08 <__aeabi_dcmpeq>
 801587c:	2800      	cmp	r0, #0
 801587e:	d046      	beq.n	801590e <pow+0xee>
 8015880:	2301      	movs	r3, #1
 8015882:	9302      	str	r3, [sp, #8]
 8015884:	4b96      	ldr	r3, [pc, #600]	; (8015ae0 <pow+0x2c0>)
 8015886:	9303      	str	r3, [sp, #12]
 8015888:	4b96      	ldr	r3, [pc, #600]	; (8015ae4 <pow+0x2c4>)
 801588a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801588e:	2200      	movs	r2, #0
 8015890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015894:	9b00      	ldr	r3, [sp, #0]
 8015896:	2b02      	cmp	r3, #2
 8015898:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801589c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80158a0:	d033      	beq.n	801590a <pow+0xea>
 80158a2:	a802      	add	r0, sp, #8
 80158a4:	f000 fefb 	bl	801669e <matherr>
 80158a8:	bb48      	cbnz	r0, 80158fe <pow+0xde>
 80158aa:	e05d      	b.n	8015968 <pow+0x148>
 80158ac:	f04f 0a00 	mov.w	sl, #0
 80158b0:	f04f 0b00 	mov.w	fp, #0
 80158b4:	4652      	mov	r2, sl
 80158b6:	465b      	mov	r3, fp
 80158b8:	4630      	mov	r0, r6
 80158ba:	4639      	mov	r1, r7
 80158bc:	f7eb f924 	bl	8000b08 <__aeabi_dcmpeq>
 80158c0:	ec4b ab19 	vmov	d9, sl, fp
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d054      	beq.n	8015972 <pow+0x152>
 80158c8:	4652      	mov	r2, sl
 80158ca:	465b      	mov	r3, fp
 80158cc:	4620      	mov	r0, r4
 80158ce:	4629      	mov	r1, r5
 80158d0:	f7eb f91a 	bl	8000b08 <__aeabi_dcmpeq>
 80158d4:	4680      	mov	r8, r0
 80158d6:	b318      	cbz	r0, 8015920 <pow+0x100>
 80158d8:	2301      	movs	r3, #1
 80158da:	9302      	str	r3, [sp, #8]
 80158dc:	4b80      	ldr	r3, [pc, #512]	; (8015ae0 <pow+0x2c0>)
 80158de:	9303      	str	r3, [sp, #12]
 80158e0:	9b01      	ldr	r3, [sp, #4]
 80158e2:	930a      	str	r3, [sp, #40]	; 0x28
 80158e4:	9b00      	ldr	r3, [sp, #0]
 80158e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80158ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80158ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d0d5      	beq.n	80158a2 <pow+0x82>
 80158f6:	4b7b      	ldr	r3, [pc, #492]	; (8015ae4 <pow+0x2c4>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80158fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015900:	b11b      	cbz	r3, 801590a <pow+0xea>
 8015902:	f7ff fa7b 	bl	8014dfc <__errno>
 8015906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015908:	6003      	str	r3, [r0, #0]
 801590a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801590e:	eeb0 0a48 	vmov.f32	s0, s16
 8015912:	eef0 0a68 	vmov.f32	s1, s17
 8015916:	b00d      	add	sp, #52	; 0x34
 8015918:	ecbd 8b04 	vpop	{d8-d9}
 801591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015920:	ec45 4b10 	vmov	d0, r4, r5
 8015924:	f000 feb3 	bl	801668e <finite>
 8015928:	2800      	cmp	r0, #0
 801592a:	d0f0      	beq.n	801590e <pow+0xee>
 801592c:	4652      	mov	r2, sl
 801592e:	465b      	mov	r3, fp
 8015930:	4620      	mov	r0, r4
 8015932:	4629      	mov	r1, r5
 8015934:	f7eb f8f2 	bl	8000b1c <__aeabi_dcmplt>
 8015938:	2800      	cmp	r0, #0
 801593a:	d0e8      	beq.n	801590e <pow+0xee>
 801593c:	2301      	movs	r3, #1
 801593e:	9302      	str	r3, [sp, #8]
 8015940:	4b67      	ldr	r3, [pc, #412]	; (8015ae0 <pow+0x2c0>)
 8015942:	9303      	str	r3, [sp, #12]
 8015944:	f999 3000 	ldrsb.w	r3, [r9]
 8015948:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801594c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015950:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015954:	b913      	cbnz	r3, 801595c <pow+0x13c>
 8015956:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801595a:	e7a2      	b.n	80158a2 <pow+0x82>
 801595c:	4962      	ldr	r1, [pc, #392]	; (8015ae8 <pow+0x2c8>)
 801595e:	2000      	movs	r0, #0
 8015960:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015964:	2b02      	cmp	r3, #2
 8015966:	d19c      	bne.n	80158a2 <pow+0x82>
 8015968:	f7ff fa48 	bl	8014dfc <__errno>
 801596c:	2321      	movs	r3, #33	; 0x21
 801596e:	6003      	str	r3, [r0, #0]
 8015970:	e7c5      	b.n	80158fe <pow+0xde>
 8015972:	eeb0 0a48 	vmov.f32	s0, s16
 8015976:	eef0 0a68 	vmov.f32	s1, s17
 801597a:	f000 fe88 	bl	801668e <finite>
 801597e:	9000      	str	r0, [sp, #0]
 8015980:	2800      	cmp	r0, #0
 8015982:	f040 8081 	bne.w	8015a88 <pow+0x268>
 8015986:	ec47 6b10 	vmov	d0, r6, r7
 801598a:	f000 fe80 	bl	801668e <finite>
 801598e:	2800      	cmp	r0, #0
 8015990:	d07a      	beq.n	8015a88 <pow+0x268>
 8015992:	ec45 4b10 	vmov	d0, r4, r5
 8015996:	f000 fe7a 	bl	801668e <finite>
 801599a:	2800      	cmp	r0, #0
 801599c:	d074      	beq.n	8015a88 <pow+0x268>
 801599e:	ec53 2b18 	vmov	r2, r3, d8
 80159a2:	ee18 0a10 	vmov	r0, s16
 80159a6:	4619      	mov	r1, r3
 80159a8:	f7eb f8e0 	bl	8000b6c <__aeabi_dcmpun>
 80159ac:	f999 9000 	ldrsb.w	r9, [r9]
 80159b0:	4b4b      	ldr	r3, [pc, #300]	; (8015ae0 <pow+0x2c0>)
 80159b2:	b1b0      	cbz	r0, 80159e2 <pow+0x1c2>
 80159b4:	2201      	movs	r2, #1
 80159b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80159ba:	9b00      	ldr	r3, [sp, #0]
 80159bc:	930a      	str	r3, [sp, #40]	; 0x28
 80159be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80159c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80159c6:	f1b9 0f00 	cmp.w	r9, #0
 80159ca:	d0c4      	beq.n	8015956 <pow+0x136>
 80159cc:	4652      	mov	r2, sl
 80159ce:	465b      	mov	r3, fp
 80159d0:	4650      	mov	r0, sl
 80159d2:	4659      	mov	r1, fp
 80159d4:	f7ea ff5a 	bl	800088c <__aeabi_ddiv>
 80159d8:	f1b9 0f02 	cmp.w	r9, #2
 80159dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80159e0:	e7c1      	b.n	8015966 <pow+0x146>
 80159e2:	2203      	movs	r2, #3
 80159e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80159e8:	900a      	str	r0, [sp, #40]	; 0x28
 80159ea:	4629      	mov	r1, r5
 80159ec:	4620      	mov	r0, r4
 80159ee:	2200      	movs	r2, #0
 80159f0:	4b3e      	ldr	r3, [pc, #248]	; (8015aec <pow+0x2cc>)
 80159f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80159f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80159fa:	f7ea fe1d 	bl	8000638 <__aeabi_dmul>
 80159fe:	4604      	mov	r4, r0
 8015a00:	460d      	mov	r5, r1
 8015a02:	f1b9 0f00 	cmp.w	r9, #0
 8015a06:	d124      	bne.n	8015a52 <pow+0x232>
 8015a08:	4b39      	ldr	r3, [pc, #228]	; (8015af0 <pow+0x2d0>)
 8015a0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a12:	4630      	mov	r0, r6
 8015a14:	4652      	mov	r2, sl
 8015a16:	465b      	mov	r3, fp
 8015a18:	4639      	mov	r1, r7
 8015a1a:	f7eb f87f 	bl	8000b1c <__aeabi_dcmplt>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d056      	beq.n	8015ad0 <pow+0x2b0>
 8015a22:	ec45 4b10 	vmov	d0, r4, r5
 8015a26:	f000 fe47 	bl	80166b8 <rint>
 8015a2a:	4622      	mov	r2, r4
 8015a2c:	462b      	mov	r3, r5
 8015a2e:	ec51 0b10 	vmov	r0, r1, d0
 8015a32:	f7eb f869 	bl	8000b08 <__aeabi_dcmpeq>
 8015a36:	b920      	cbnz	r0, 8015a42 <pow+0x222>
 8015a38:	4b2e      	ldr	r3, [pc, #184]	; (8015af4 <pow+0x2d4>)
 8015a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a42:	f998 3000 	ldrsb.w	r3, [r8]
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	d142      	bne.n	8015ad0 <pow+0x2b0>
 8015a4a:	f7ff f9d7 	bl	8014dfc <__errno>
 8015a4e:	2322      	movs	r3, #34	; 0x22
 8015a50:	e78d      	b.n	801596e <pow+0x14e>
 8015a52:	4b29      	ldr	r3, [pc, #164]	; (8015af8 <pow+0x2d8>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	4652      	mov	r2, sl
 8015a5e:	465b      	mov	r3, fp
 8015a60:	4639      	mov	r1, r7
 8015a62:	f7eb f85b 	bl	8000b1c <__aeabi_dcmplt>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d0eb      	beq.n	8015a42 <pow+0x222>
 8015a6a:	ec45 4b10 	vmov	d0, r4, r5
 8015a6e:	f000 fe23 	bl	80166b8 <rint>
 8015a72:	4622      	mov	r2, r4
 8015a74:	462b      	mov	r3, r5
 8015a76:	ec51 0b10 	vmov	r0, r1, d0
 8015a7a:	f7eb f845 	bl	8000b08 <__aeabi_dcmpeq>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d1df      	bne.n	8015a42 <pow+0x222>
 8015a82:	2200      	movs	r2, #0
 8015a84:	4b18      	ldr	r3, [pc, #96]	; (8015ae8 <pow+0x2c8>)
 8015a86:	e7da      	b.n	8015a3e <pow+0x21e>
 8015a88:	2200      	movs	r2, #0
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	ec51 0b18 	vmov	r0, r1, d8
 8015a90:	f7eb f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	f43f af3a 	beq.w	801590e <pow+0xee>
 8015a9a:	ec47 6b10 	vmov	d0, r6, r7
 8015a9e:	f000 fdf6 	bl	801668e <finite>
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	f43f af33 	beq.w	801590e <pow+0xee>
 8015aa8:	ec45 4b10 	vmov	d0, r4, r5
 8015aac:	f000 fdef 	bl	801668e <finite>
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	f43f af2c 	beq.w	801590e <pow+0xee>
 8015ab6:	2304      	movs	r3, #4
 8015ab8:	9302      	str	r3, [sp, #8]
 8015aba:	4b09      	ldr	r3, [pc, #36]	; (8015ae0 <pow+0x2c0>)
 8015abc:	9303      	str	r3, [sp, #12]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8015ac2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015aca:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015ace:	e7b8      	b.n	8015a42 <pow+0x222>
 8015ad0:	a802      	add	r0, sp, #8
 8015ad2:	f000 fde4 	bl	801669e <matherr>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	f47f af11 	bne.w	80158fe <pow+0xde>
 8015adc:	e7b5      	b.n	8015a4a <pow+0x22a>
 8015ade:	bf00      	nop
 8015ae0:	08016f87 	.word	0x08016f87
 8015ae4:	3ff00000 	.word	0x3ff00000
 8015ae8:	fff00000 	.word	0xfff00000
 8015aec:	3fe00000 	.word	0x3fe00000
 8015af0:	47efffff 	.word	0x47efffff
 8015af4:	c7efffff 	.word	0xc7efffff
 8015af8:	7ff00000 	.word	0x7ff00000
 8015afc:	200001f8 	.word	0x200001f8

08015b00 <__ieee754_pow>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	b091      	sub	sp, #68	; 0x44
 8015b06:	ed8d 1b00 	vstr	d1, [sp]
 8015b0a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015b0e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015b12:	ea58 0302 	orrs.w	r3, r8, r2
 8015b16:	ec57 6b10 	vmov	r6, r7, d0
 8015b1a:	f000 84be 	beq.w	801649a <__ieee754_pow+0x99a>
 8015b1e:	4b7a      	ldr	r3, [pc, #488]	; (8015d08 <__ieee754_pow+0x208>)
 8015b20:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015b24:	429c      	cmp	r4, r3
 8015b26:	463d      	mov	r5, r7
 8015b28:	ee10 aa10 	vmov	sl, s0
 8015b2c:	dc09      	bgt.n	8015b42 <__ieee754_pow+0x42>
 8015b2e:	d103      	bne.n	8015b38 <__ieee754_pow+0x38>
 8015b30:	b93e      	cbnz	r6, 8015b42 <__ieee754_pow+0x42>
 8015b32:	45a0      	cmp	r8, r4
 8015b34:	dc0d      	bgt.n	8015b52 <__ieee754_pow+0x52>
 8015b36:	e001      	b.n	8015b3c <__ieee754_pow+0x3c>
 8015b38:	4598      	cmp	r8, r3
 8015b3a:	dc02      	bgt.n	8015b42 <__ieee754_pow+0x42>
 8015b3c:	4598      	cmp	r8, r3
 8015b3e:	d10e      	bne.n	8015b5e <__ieee754_pow+0x5e>
 8015b40:	b16a      	cbz	r2, 8015b5e <__ieee754_pow+0x5e>
 8015b42:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015b46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015b4a:	ea54 030a 	orrs.w	r3, r4, sl
 8015b4e:	f000 84a4 	beq.w	801649a <__ieee754_pow+0x99a>
 8015b52:	486e      	ldr	r0, [pc, #440]	; (8015d0c <__ieee754_pow+0x20c>)
 8015b54:	b011      	add	sp, #68	; 0x44
 8015b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5a:	f000 bda5 	b.w	80166a8 <nan>
 8015b5e:	2d00      	cmp	r5, #0
 8015b60:	da53      	bge.n	8015c0a <__ieee754_pow+0x10a>
 8015b62:	4b6b      	ldr	r3, [pc, #428]	; (8015d10 <__ieee754_pow+0x210>)
 8015b64:	4598      	cmp	r8, r3
 8015b66:	dc4d      	bgt.n	8015c04 <__ieee754_pow+0x104>
 8015b68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015b6c:	4598      	cmp	r8, r3
 8015b6e:	dd4c      	ble.n	8015c0a <__ieee754_pow+0x10a>
 8015b70:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015b74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015b78:	2b14      	cmp	r3, #20
 8015b7a:	dd26      	ble.n	8015bca <__ieee754_pow+0xca>
 8015b7c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015b80:	fa22 f103 	lsr.w	r1, r2, r3
 8015b84:	fa01 f303 	lsl.w	r3, r1, r3
 8015b88:	4293      	cmp	r3, r2
 8015b8a:	d13e      	bne.n	8015c0a <__ieee754_pow+0x10a>
 8015b8c:	f001 0101 	and.w	r1, r1, #1
 8015b90:	f1c1 0b02 	rsb	fp, r1, #2
 8015b94:	2a00      	cmp	r2, #0
 8015b96:	d15b      	bne.n	8015c50 <__ieee754_pow+0x150>
 8015b98:	4b5b      	ldr	r3, [pc, #364]	; (8015d08 <__ieee754_pow+0x208>)
 8015b9a:	4598      	cmp	r8, r3
 8015b9c:	d124      	bne.n	8015be8 <__ieee754_pow+0xe8>
 8015b9e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015ba2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015ba6:	ea53 030a 	orrs.w	r3, r3, sl
 8015baa:	f000 8476 	beq.w	801649a <__ieee754_pow+0x99a>
 8015bae:	4b59      	ldr	r3, [pc, #356]	; (8015d14 <__ieee754_pow+0x214>)
 8015bb0:	429c      	cmp	r4, r3
 8015bb2:	dd2d      	ble.n	8015c10 <__ieee754_pow+0x110>
 8015bb4:	f1b9 0f00 	cmp.w	r9, #0
 8015bb8:	f280 8473 	bge.w	80164a2 <__ieee754_pow+0x9a2>
 8015bbc:	2000      	movs	r0, #0
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	ec41 0b10 	vmov	d0, r0, r1
 8015bc4:	b011      	add	sp, #68	; 0x44
 8015bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bca:	2a00      	cmp	r2, #0
 8015bcc:	d13e      	bne.n	8015c4c <__ieee754_pow+0x14c>
 8015bce:	f1c3 0314 	rsb	r3, r3, #20
 8015bd2:	fa48 f103 	asr.w	r1, r8, r3
 8015bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8015bda:	4543      	cmp	r3, r8
 8015bdc:	f040 8469 	bne.w	80164b2 <__ieee754_pow+0x9b2>
 8015be0:	f001 0101 	and.w	r1, r1, #1
 8015be4:	f1c1 0b02 	rsb	fp, r1, #2
 8015be8:	4b4b      	ldr	r3, [pc, #300]	; (8015d18 <__ieee754_pow+0x218>)
 8015bea:	4598      	cmp	r8, r3
 8015bec:	d118      	bne.n	8015c20 <__ieee754_pow+0x120>
 8015bee:	f1b9 0f00 	cmp.w	r9, #0
 8015bf2:	f280 845a 	bge.w	80164aa <__ieee754_pow+0x9aa>
 8015bf6:	4948      	ldr	r1, [pc, #288]	; (8015d18 <__ieee754_pow+0x218>)
 8015bf8:	4632      	mov	r2, r6
 8015bfa:	463b      	mov	r3, r7
 8015bfc:	2000      	movs	r0, #0
 8015bfe:	f7ea fe45 	bl	800088c <__aeabi_ddiv>
 8015c02:	e7dd      	b.n	8015bc0 <__ieee754_pow+0xc0>
 8015c04:	f04f 0b02 	mov.w	fp, #2
 8015c08:	e7c4      	b.n	8015b94 <__ieee754_pow+0x94>
 8015c0a:	f04f 0b00 	mov.w	fp, #0
 8015c0e:	e7c1      	b.n	8015b94 <__ieee754_pow+0x94>
 8015c10:	f1b9 0f00 	cmp.w	r9, #0
 8015c14:	dad2      	bge.n	8015bbc <__ieee754_pow+0xbc>
 8015c16:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015c1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015c1e:	e7cf      	b.n	8015bc0 <__ieee754_pow+0xc0>
 8015c20:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015c24:	d106      	bne.n	8015c34 <__ieee754_pow+0x134>
 8015c26:	4632      	mov	r2, r6
 8015c28:	463b      	mov	r3, r7
 8015c2a:	4610      	mov	r0, r2
 8015c2c:	4619      	mov	r1, r3
 8015c2e:	f7ea fd03 	bl	8000638 <__aeabi_dmul>
 8015c32:	e7c5      	b.n	8015bc0 <__ieee754_pow+0xc0>
 8015c34:	4b39      	ldr	r3, [pc, #228]	; (8015d1c <__ieee754_pow+0x21c>)
 8015c36:	4599      	cmp	r9, r3
 8015c38:	d10a      	bne.n	8015c50 <__ieee754_pow+0x150>
 8015c3a:	2d00      	cmp	r5, #0
 8015c3c:	db08      	blt.n	8015c50 <__ieee754_pow+0x150>
 8015c3e:	ec47 6b10 	vmov	d0, r6, r7
 8015c42:	b011      	add	sp, #68	; 0x44
 8015c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c48:	f000 bc68 	b.w	801651c <__ieee754_sqrt>
 8015c4c:	f04f 0b00 	mov.w	fp, #0
 8015c50:	ec47 6b10 	vmov	d0, r6, r7
 8015c54:	f000 fd12 	bl	801667c <fabs>
 8015c58:	ec51 0b10 	vmov	r0, r1, d0
 8015c5c:	f1ba 0f00 	cmp.w	sl, #0
 8015c60:	d127      	bne.n	8015cb2 <__ieee754_pow+0x1b2>
 8015c62:	b124      	cbz	r4, 8015c6e <__ieee754_pow+0x16e>
 8015c64:	4b2c      	ldr	r3, [pc, #176]	; (8015d18 <__ieee754_pow+0x218>)
 8015c66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d121      	bne.n	8015cb2 <__ieee754_pow+0x1b2>
 8015c6e:	f1b9 0f00 	cmp.w	r9, #0
 8015c72:	da05      	bge.n	8015c80 <__ieee754_pow+0x180>
 8015c74:	4602      	mov	r2, r0
 8015c76:	460b      	mov	r3, r1
 8015c78:	2000      	movs	r0, #0
 8015c7a:	4927      	ldr	r1, [pc, #156]	; (8015d18 <__ieee754_pow+0x218>)
 8015c7c:	f7ea fe06 	bl	800088c <__aeabi_ddiv>
 8015c80:	2d00      	cmp	r5, #0
 8015c82:	da9d      	bge.n	8015bc0 <__ieee754_pow+0xc0>
 8015c84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015c88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015c8c:	ea54 030b 	orrs.w	r3, r4, fp
 8015c90:	d108      	bne.n	8015ca4 <__ieee754_pow+0x1a4>
 8015c92:	4602      	mov	r2, r0
 8015c94:	460b      	mov	r3, r1
 8015c96:	4610      	mov	r0, r2
 8015c98:	4619      	mov	r1, r3
 8015c9a:	f7ea fb15 	bl	80002c8 <__aeabi_dsub>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	460b      	mov	r3, r1
 8015ca2:	e7ac      	b.n	8015bfe <__ieee754_pow+0xfe>
 8015ca4:	f1bb 0f01 	cmp.w	fp, #1
 8015ca8:	d18a      	bne.n	8015bc0 <__ieee754_pow+0xc0>
 8015caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015cae:	4619      	mov	r1, r3
 8015cb0:	e786      	b.n	8015bc0 <__ieee754_pow+0xc0>
 8015cb2:	0fed      	lsrs	r5, r5, #31
 8015cb4:	1e6b      	subs	r3, r5, #1
 8015cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8015cb8:	ea5b 0303 	orrs.w	r3, fp, r3
 8015cbc:	d102      	bne.n	8015cc4 <__ieee754_pow+0x1c4>
 8015cbe:	4632      	mov	r2, r6
 8015cc0:	463b      	mov	r3, r7
 8015cc2:	e7e8      	b.n	8015c96 <__ieee754_pow+0x196>
 8015cc4:	4b16      	ldr	r3, [pc, #88]	; (8015d20 <__ieee754_pow+0x220>)
 8015cc6:	4598      	cmp	r8, r3
 8015cc8:	f340 80fe 	ble.w	8015ec8 <__ieee754_pow+0x3c8>
 8015ccc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015cd0:	4598      	cmp	r8, r3
 8015cd2:	dd0a      	ble.n	8015cea <__ieee754_pow+0x1ea>
 8015cd4:	4b0f      	ldr	r3, [pc, #60]	; (8015d14 <__ieee754_pow+0x214>)
 8015cd6:	429c      	cmp	r4, r3
 8015cd8:	dc0d      	bgt.n	8015cf6 <__ieee754_pow+0x1f6>
 8015cda:	f1b9 0f00 	cmp.w	r9, #0
 8015cde:	f6bf af6d 	bge.w	8015bbc <__ieee754_pow+0xbc>
 8015ce2:	a307      	add	r3, pc, #28	; (adr r3, 8015d00 <__ieee754_pow+0x200>)
 8015ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce8:	e79f      	b.n	8015c2a <__ieee754_pow+0x12a>
 8015cea:	4b0e      	ldr	r3, [pc, #56]	; (8015d24 <__ieee754_pow+0x224>)
 8015cec:	429c      	cmp	r4, r3
 8015cee:	ddf4      	ble.n	8015cda <__ieee754_pow+0x1da>
 8015cf0:	4b09      	ldr	r3, [pc, #36]	; (8015d18 <__ieee754_pow+0x218>)
 8015cf2:	429c      	cmp	r4, r3
 8015cf4:	dd18      	ble.n	8015d28 <__ieee754_pow+0x228>
 8015cf6:	f1b9 0f00 	cmp.w	r9, #0
 8015cfa:	dcf2      	bgt.n	8015ce2 <__ieee754_pow+0x1e2>
 8015cfc:	e75e      	b.n	8015bbc <__ieee754_pow+0xbc>
 8015cfe:	bf00      	nop
 8015d00:	8800759c 	.word	0x8800759c
 8015d04:	7e37e43c 	.word	0x7e37e43c
 8015d08:	7ff00000 	.word	0x7ff00000
 8015d0c:	08016f59 	.word	0x08016f59
 8015d10:	433fffff 	.word	0x433fffff
 8015d14:	3fefffff 	.word	0x3fefffff
 8015d18:	3ff00000 	.word	0x3ff00000
 8015d1c:	3fe00000 	.word	0x3fe00000
 8015d20:	41e00000 	.word	0x41e00000
 8015d24:	3feffffe 	.word	0x3feffffe
 8015d28:	2200      	movs	r2, #0
 8015d2a:	4b63      	ldr	r3, [pc, #396]	; (8015eb8 <__ieee754_pow+0x3b8>)
 8015d2c:	f7ea facc 	bl	80002c8 <__aeabi_dsub>
 8015d30:	a355      	add	r3, pc, #340	; (adr r3, 8015e88 <__ieee754_pow+0x388>)
 8015d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d36:	4604      	mov	r4, r0
 8015d38:	460d      	mov	r5, r1
 8015d3a:	f7ea fc7d 	bl	8000638 <__aeabi_dmul>
 8015d3e:	a354      	add	r3, pc, #336	; (adr r3, 8015e90 <__ieee754_pow+0x390>)
 8015d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d44:	4606      	mov	r6, r0
 8015d46:	460f      	mov	r7, r1
 8015d48:	4620      	mov	r0, r4
 8015d4a:	4629      	mov	r1, r5
 8015d4c:	f7ea fc74 	bl	8000638 <__aeabi_dmul>
 8015d50:	2200      	movs	r2, #0
 8015d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d56:	4b59      	ldr	r3, [pc, #356]	; (8015ebc <__ieee754_pow+0x3bc>)
 8015d58:	4620      	mov	r0, r4
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7ea fc6c 	bl	8000638 <__aeabi_dmul>
 8015d60:	4602      	mov	r2, r0
 8015d62:	460b      	mov	r3, r1
 8015d64:	a14c      	add	r1, pc, #304	; (adr r1, 8015e98 <__ieee754_pow+0x398>)
 8015d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d6a:	f7ea faad 	bl	80002c8 <__aeabi_dsub>
 8015d6e:	4622      	mov	r2, r4
 8015d70:	462b      	mov	r3, r5
 8015d72:	f7ea fc61 	bl	8000638 <__aeabi_dmul>
 8015d76:	4602      	mov	r2, r0
 8015d78:	460b      	mov	r3, r1
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	4950      	ldr	r1, [pc, #320]	; (8015ec0 <__ieee754_pow+0x3c0>)
 8015d7e:	f7ea faa3 	bl	80002c8 <__aeabi_dsub>
 8015d82:	4622      	mov	r2, r4
 8015d84:	462b      	mov	r3, r5
 8015d86:	4680      	mov	r8, r0
 8015d88:	4689      	mov	r9, r1
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	f7ea fc53 	bl	8000638 <__aeabi_dmul>
 8015d92:	4602      	mov	r2, r0
 8015d94:	460b      	mov	r3, r1
 8015d96:	4640      	mov	r0, r8
 8015d98:	4649      	mov	r1, r9
 8015d9a:	f7ea fc4d 	bl	8000638 <__aeabi_dmul>
 8015d9e:	a340      	add	r3, pc, #256	; (adr r3, 8015ea0 <__ieee754_pow+0x3a0>)
 8015da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da4:	f7ea fc48 	bl	8000638 <__aeabi_dmul>
 8015da8:	4602      	mov	r2, r0
 8015daa:	460b      	mov	r3, r1
 8015dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015db0:	f7ea fa8a 	bl	80002c8 <__aeabi_dsub>
 8015db4:	4602      	mov	r2, r0
 8015db6:	460b      	mov	r3, r1
 8015db8:	4604      	mov	r4, r0
 8015dba:	460d      	mov	r5, r1
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	4639      	mov	r1, r7
 8015dc0:	f7ea fa84 	bl	80002cc <__adddf3>
 8015dc4:	2000      	movs	r0, #0
 8015dc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015dca:	4632      	mov	r2, r6
 8015dcc:	463b      	mov	r3, r7
 8015dce:	f7ea fa7b 	bl	80002c8 <__aeabi_dsub>
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	4629      	mov	r1, r5
 8015dda:	f7ea fa75 	bl	80002c8 <__aeabi_dsub>
 8015dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015de0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015de4:	4313      	orrs	r3, r2
 8015de6:	4606      	mov	r6, r0
 8015de8:	460f      	mov	r7, r1
 8015dea:	f040 81eb 	bne.w	80161c4 <__ieee754_pow+0x6c4>
 8015dee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015ea8 <__ieee754_pow+0x3a8>
 8015df2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015df6:	2400      	movs	r4, #0
 8015df8:	4622      	mov	r2, r4
 8015dfa:	462b      	mov	r3, r5
 8015dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015e04:	f7ea fa60 	bl	80002c8 <__aeabi_dsub>
 8015e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e0c:	f7ea fc14 	bl	8000638 <__aeabi_dmul>
 8015e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e14:	4680      	mov	r8, r0
 8015e16:	4689      	mov	r9, r1
 8015e18:	4630      	mov	r0, r6
 8015e1a:	4639      	mov	r1, r7
 8015e1c:	f7ea fc0c 	bl	8000638 <__aeabi_dmul>
 8015e20:	4602      	mov	r2, r0
 8015e22:	460b      	mov	r3, r1
 8015e24:	4640      	mov	r0, r8
 8015e26:	4649      	mov	r1, r9
 8015e28:	f7ea fa50 	bl	80002cc <__adddf3>
 8015e2c:	4622      	mov	r2, r4
 8015e2e:	462b      	mov	r3, r5
 8015e30:	4680      	mov	r8, r0
 8015e32:	4689      	mov	r9, r1
 8015e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015e38:	f7ea fbfe 	bl	8000638 <__aeabi_dmul>
 8015e3c:	460b      	mov	r3, r1
 8015e3e:	4604      	mov	r4, r0
 8015e40:	460d      	mov	r5, r1
 8015e42:	4602      	mov	r2, r0
 8015e44:	4649      	mov	r1, r9
 8015e46:	4640      	mov	r0, r8
 8015e48:	e9cd 4500 	strd	r4, r5, [sp]
 8015e4c:	f7ea fa3e 	bl	80002cc <__adddf3>
 8015e50:	4b1c      	ldr	r3, [pc, #112]	; (8015ec4 <__ieee754_pow+0x3c4>)
 8015e52:	4299      	cmp	r1, r3
 8015e54:	4606      	mov	r6, r0
 8015e56:	460f      	mov	r7, r1
 8015e58:	468b      	mov	fp, r1
 8015e5a:	f340 82f7 	ble.w	801644c <__ieee754_pow+0x94c>
 8015e5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015e62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015e66:	4303      	orrs	r3, r0
 8015e68:	f000 81ea 	beq.w	8016240 <__ieee754_pow+0x740>
 8015e6c:	a310      	add	r3, pc, #64	; (adr r3, 8015eb0 <__ieee754_pow+0x3b0>)
 8015e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e76:	f7ea fbdf 	bl	8000638 <__aeabi_dmul>
 8015e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8015eb0 <__ieee754_pow+0x3b0>)
 8015e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e80:	e6d5      	b.n	8015c2e <__ieee754_pow+0x12e>
 8015e82:	bf00      	nop
 8015e84:	f3af 8000 	nop.w
 8015e88:	60000000 	.word	0x60000000
 8015e8c:	3ff71547 	.word	0x3ff71547
 8015e90:	f85ddf44 	.word	0xf85ddf44
 8015e94:	3e54ae0b 	.word	0x3e54ae0b
 8015e98:	55555555 	.word	0x55555555
 8015e9c:	3fd55555 	.word	0x3fd55555
 8015ea0:	652b82fe 	.word	0x652b82fe
 8015ea4:	3ff71547 	.word	0x3ff71547
 8015ea8:	00000000 	.word	0x00000000
 8015eac:	bff00000 	.word	0xbff00000
 8015eb0:	8800759c 	.word	0x8800759c
 8015eb4:	7e37e43c 	.word	0x7e37e43c
 8015eb8:	3ff00000 	.word	0x3ff00000
 8015ebc:	3fd00000 	.word	0x3fd00000
 8015ec0:	3fe00000 	.word	0x3fe00000
 8015ec4:	408fffff 	.word	0x408fffff
 8015ec8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015ecc:	f04f 0200 	mov.w	r2, #0
 8015ed0:	da05      	bge.n	8015ede <__ieee754_pow+0x3de>
 8015ed2:	4bd3      	ldr	r3, [pc, #844]	; (8016220 <__ieee754_pow+0x720>)
 8015ed4:	f7ea fbb0 	bl	8000638 <__aeabi_dmul>
 8015ed8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015edc:	460c      	mov	r4, r1
 8015ede:	1523      	asrs	r3, r4, #20
 8015ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015ee4:	4413      	add	r3, r2
 8015ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee8:	4bce      	ldr	r3, [pc, #824]	; (8016224 <__ieee754_pow+0x724>)
 8015eea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015eee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015ef2:	429c      	cmp	r4, r3
 8015ef4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015ef8:	dd08      	ble.n	8015f0c <__ieee754_pow+0x40c>
 8015efa:	4bcb      	ldr	r3, [pc, #812]	; (8016228 <__ieee754_pow+0x728>)
 8015efc:	429c      	cmp	r4, r3
 8015efe:	f340 815e 	ble.w	80161be <__ieee754_pow+0x6be>
 8015f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f04:	3301      	adds	r3, #1
 8015f06:	9309      	str	r3, [sp, #36]	; 0x24
 8015f08:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015f0c:	f04f 0a00 	mov.w	sl, #0
 8015f10:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015f14:	930c      	str	r3, [sp, #48]	; 0x30
 8015f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f18:	4bc4      	ldr	r3, [pc, #784]	; (801622c <__ieee754_pow+0x72c>)
 8015f1a:	4413      	add	r3, r2
 8015f1c:	ed93 7b00 	vldr	d7, [r3]
 8015f20:	4629      	mov	r1, r5
 8015f22:	ec53 2b17 	vmov	r2, r3, d7
 8015f26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015f2e:	f7ea f9cb 	bl	80002c8 <__aeabi_dsub>
 8015f32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015f36:	4606      	mov	r6, r0
 8015f38:	460f      	mov	r7, r1
 8015f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f3e:	f7ea f9c5 	bl	80002cc <__adddf3>
 8015f42:	4602      	mov	r2, r0
 8015f44:	460b      	mov	r3, r1
 8015f46:	2000      	movs	r0, #0
 8015f48:	49b9      	ldr	r1, [pc, #740]	; (8016230 <__ieee754_pow+0x730>)
 8015f4a:	f7ea fc9f 	bl	800088c <__aeabi_ddiv>
 8015f4e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015f52:	4602      	mov	r2, r0
 8015f54:	460b      	mov	r3, r1
 8015f56:	4630      	mov	r0, r6
 8015f58:	4639      	mov	r1, r7
 8015f5a:	f7ea fb6d 	bl	8000638 <__aeabi_dmul>
 8015f5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f62:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	9302      	str	r3, [sp, #8]
 8015f6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015f72:	106d      	asrs	r5, r5, #1
 8015f74:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015f78:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015f82:	4640      	mov	r0, r8
 8015f84:	4649      	mov	r1, r9
 8015f86:	4614      	mov	r4, r2
 8015f88:	461d      	mov	r5, r3
 8015f8a:	f7ea fb55 	bl	8000638 <__aeabi_dmul>
 8015f8e:	4602      	mov	r2, r0
 8015f90:	460b      	mov	r3, r1
 8015f92:	4630      	mov	r0, r6
 8015f94:	4639      	mov	r1, r7
 8015f96:	f7ea f997 	bl	80002c8 <__aeabi_dsub>
 8015f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f9e:	4606      	mov	r6, r0
 8015fa0:	460f      	mov	r7, r1
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	4629      	mov	r1, r5
 8015fa6:	f7ea f98f 	bl	80002c8 <__aeabi_dsub>
 8015faa:	4602      	mov	r2, r0
 8015fac:	460b      	mov	r3, r1
 8015fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015fb2:	f7ea f989 	bl	80002c8 <__aeabi_dsub>
 8015fb6:	4642      	mov	r2, r8
 8015fb8:	464b      	mov	r3, r9
 8015fba:	f7ea fb3d 	bl	8000638 <__aeabi_dmul>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	4639      	mov	r1, r7
 8015fc6:	f7ea f97f 	bl	80002c8 <__aeabi_dsub>
 8015fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015fce:	f7ea fb33 	bl	8000638 <__aeabi_dmul>
 8015fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015fda:	4610      	mov	r0, r2
 8015fdc:	4619      	mov	r1, r3
 8015fde:	f7ea fb2b 	bl	8000638 <__aeabi_dmul>
 8015fe2:	a37b      	add	r3, pc, #492	; (adr r3, 80161d0 <__ieee754_pow+0x6d0>)
 8015fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe8:	4604      	mov	r4, r0
 8015fea:	460d      	mov	r5, r1
 8015fec:	f7ea fb24 	bl	8000638 <__aeabi_dmul>
 8015ff0:	a379      	add	r3, pc, #484	; (adr r3, 80161d8 <__ieee754_pow+0x6d8>)
 8015ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff6:	f7ea f969 	bl	80002cc <__adddf3>
 8015ffa:	4622      	mov	r2, r4
 8015ffc:	462b      	mov	r3, r5
 8015ffe:	f7ea fb1b 	bl	8000638 <__aeabi_dmul>
 8016002:	a377      	add	r3, pc, #476	; (adr r3, 80161e0 <__ieee754_pow+0x6e0>)
 8016004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016008:	f7ea f960 	bl	80002cc <__adddf3>
 801600c:	4622      	mov	r2, r4
 801600e:	462b      	mov	r3, r5
 8016010:	f7ea fb12 	bl	8000638 <__aeabi_dmul>
 8016014:	a374      	add	r3, pc, #464	; (adr r3, 80161e8 <__ieee754_pow+0x6e8>)
 8016016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601a:	f7ea f957 	bl	80002cc <__adddf3>
 801601e:	4622      	mov	r2, r4
 8016020:	462b      	mov	r3, r5
 8016022:	f7ea fb09 	bl	8000638 <__aeabi_dmul>
 8016026:	a372      	add	r3, pc, #456	; (adr r3, 80161f0 <__ieee754_pow+0x6f0>)
 8016028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602c:	f7ea f94e 	bl	80002cc <__adddf3>
 8016030:	4622      	mov	r2, r4
 8016032:	462b      	mov	r3, r5
 8016034:	f7ea fb00 	bl	8000638 <__aeabi_dmul>
 8016038:	a36f      	add	r3, pc, #444	; (adr r3, 80161f8 <__ieee754_pow+0x6f8>)
 801603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603e:	f7ea f945 	bl	80002cc <__adddf3>
 8016042:	4622      	mov	r2, r4
 8016044:	4606      	mov	r6, r0
 8016046:	460f      	mov	r7, r1
 8016048:	462b      	mov	r3, r5
 801604a:	4620      	mov	r0, r4
 801604c:	4629      	mov	r1, r5
 801604e:	f7ea faf3 	bl	8000638 <__aeabi_dmul>
 8016052:	4602      	mov	r2, r0
 8016054:	460b      	mov	r3, r1
 8016056:	4630      	mov	r0, r6
 8016058:	4639      	mov	r1, r7
 801605a:	f7ea faed 	bl	8000638 <__aeabi_dmul>
 801605e:	4642      	mov	r2, r8
 8016060:	4604      	mov	r4, r0
 8016062:	460d      	mov	r5, r1
 8016064:	464b      	mov	r3, r9
 8016066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801606a:	f7ea f92f 	bl	80002cc <__adddf3>
 801606e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016072:	f7ea fae1 	bl	8000638 <__aeabi_dmul>
 8016076:	4622      	mov	r2, r4
 8016078:	462b      	mov	r3, r5
 801607a:	f7ea f927 	bl	80002cc <__adddf3>
 801607e:	4642      	mov	r2, r8
 8016080:	4606      	mov	r6, r0
 8016082:	460f      	mov	r7, r1
 8016084:	464b      	mov	r3, r9
 8016086:	4640      	mov	r0, r8
 8016088:	4649      	mov	r1, r9
 801608a:	f7ea fad5 	bl	8000638 <__aeabi_dmul>
 801608e:	2200      	movs	r2, #0
 8016090:	4b68      	ldr	r3, [pc, #416]	; (8016234 <__ieee754_pow+0x734>)
 8016092:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016096:	f7ea f919 	bl	80002cc <__adddf3>
 801609a:	4632      	mov	r2, r6
 801609c:	463b      	mov	r3, r7
 801609e:	f7ea f915 	bl	80002cc <__adddf3>
 80160a2:	9802      	ldr	r0, [sp, #8]
 80160a4:	460d      	mov	r5, r1
 80160a6:	4604      	mov	r4, r0
 80160a8:	4602      	mov	r2, r0
 80160aa:	460b      	mov	r3, r1
 80160ac:	4640      	mov	r0, r8
 80160ae:	4649      	mov	r1, r9
 80160b0:	f7ea fac2 	bl	8000638 <__aeabi_dmul>
 80160b4:	2200      	movs	r2, #0
 80160b6:	4680      	mov	r8, r0
 80160b8:	4689      	mov	r9, r1
 80160ba:	4b5e      	ldr	r3, [pc, #376]	; (8016234 <__ieee754_pow+0x734>)
 80160bc:	4620      	mov	r0, r4
 80160be:	4629      	mov	r1, r5
 80160c0:	f7ea f902 	bl	80002c8 <__aeabi_dsub>
 80160c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80160c8:	f7ea f8fe 	bl	80002c8 <__aeabi_dsub>
 80160cc:	4602      	mov	r2, r0
 80160ce:	460b      	mov	r3, r1
 80160d0:	4630      	mov	r0, r6
 80160d2:	4639      	mov	r1, r7
 80160d4:	f7ea f8f8 	bl	80002c8 <__aeabi_dsub>
 80160d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160dc:	f7ea faac 	bl	8000638 <__aeabi_dmul>
 80160e0:	4622      	mov	r2, r4
 80160e2:	4606      	mov	r6, r0
 80160e4:	460f      	mov	r7, r1
 80160e6:	462b      	mov	r3, r5
 80160e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160ec:	f7ea faa4 	bl	8000638 <__aeabi_dmul>
 80160f0:	4602      	mov	r2, r0
 80160f2:	460b      	mov	r3, r1
 80160f4:	4630      	mov	r0, r6
 80160f6:	4639      	mov	r1, r7
 80160f8:	f7ea f8e8 	bl	80002cc <__adddf3>
 80160fc:	4606      	mov	r6, r0
 80160fe:	460f      	mov	r7, r1
 8016100:	4602      	mov	r2, r0
 8016102:	460b      	mov	r3, r1
 8016104:	4640      	mov	r0, r8
 8016106:	4649      	mov	r1, r9
 8016108:	f7ea f8e0 	bl	80002cc <__adddf3>
 801610c:	9802      	ldr	r0, [sp, #8]
 801610e:	a33c      	add	r3, pc, #240	; (adr r3, 8016200 <__ieee754_pow+0x700>)
 8016110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016114:	4604      	mov	r4, r0
 8016116:	460d      	mov	r5, r1
 8016118:	f7ea fa8e 	bl	8000638 <__aeabi_dmul>
 801611c:	4642      	mov	r2, r8
 801611e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016122:	464b      	mov	r3, r9
 8016124:	4620      	mov	r0, r4
 8016126:	4629      	mov	r1, r5
 8016128:	f7ea f8ce 	bl	80002c8 <__aeabi_dsub>
 801612c:	4602      	mov	r2, r0
 801612e:	460b      	mov	r3, r1
 8016130:	4630      	mov	r0, r6
 8016132:	4639      	mov	r1, r7
 8016134:	f7ea f8c8 	bl	80002c8 <__aeabi_dsub>
 8016138:	a333      	add	r3, pc, #204	; (adr r3, 8016208 <__ieee754_pow+0x708>)
 801613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613e:	f7ea fa7b 	bl	8000638 <__aeabi_dmul>
 8016142:	a333      	add	r3, pc, #204	; (adr r3, 8016210 <__ieee754_pow+0x710>)
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	4606      	mov	r6, r0
 801614a:	460f      	mov	r7, r1
 801614c:	4620      	mov	r0, r4
 801614e:	4629      	mov	r1, r5
 8016150:	f7ea fa72 	bl	8000638 <__aeabi_dmul>
 8016154:	4602      	mov	r2, r0
 8016156:	460b      	mov	r3, r1
 8016158:	4630      	mov	r0, r6
 801615a:	4639      	mov	r1, r7
 801615c:	f7ea f8b6 	bl	80002cc <__adddf3>
 8016160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016162:	4b35      	ldr	r3, [pc, #212]	; (8016238 <__ieee754_pow+0x738>)
 8016164:	4413      	add	r3, r2
 8016166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616a:	f7ea f8af 	bl	80002cc <__adddf3>
 801616e:	4604      	mov	r4, r0
 8016170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016172:	460d      	mov	r5, r1
 8016174:	f7ea f9f6 	bl	8000564 <__aeabi_i2d>
 8016178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801617a:	4b30      	ldr	r3, [pc, #192]	; (801623c <__ieee754_pow+0x73c>)
 801617c:	4413      	add	r3, r2
 801617e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016182:	4606      	mov	r6, r0
 8016184:	460f      	mov	r7, r1
 8016186:	4622      	mov	r2, r4
 8016188:	462b      	mov	r3, r5
 801618a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801618e:	f7ea f89d 	bl	80002cc <__adddf3>
 8016192:	4642      	mov	r2, r8
 8016194:	464b      	mov	r3, r9
 8016196:	f7ea f899 	bl	80002cc <__adddf3>
 801619a:	4632      	mov	r2, r6
 801619c:	463b      	mov	r3, r7
 801619e:	f7ea f895 	bl	80002cc <__adddf3>
 80161a2:	9802      	ldr	r0, [sp, #8]
 80161a4:	4632      	mov	r2, r6
 80161a6:	463b      	mov	r3, r7
 80161a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80161ac:	f7ea f88c 	bl	80002c8 <__aeabi_dsub>
 80161b0:	4642      	mov	r2, r8
 80161b2:	464b      	mov	r3, r9
 80161b4:	f7ea f888 	bl	80002c8 <__aeabi_dsub>
 80161b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161bc:	e607      	b.n	8015dce <__ieee754_pow+0x2ce>
 80161be:	f04f 0a01 	mov.w	sl, #1
 80161c2:	e6a5      	b.n	8015f10 <__ieee754_pow+0x410>
 80161c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016218 <__ieee754_pow+0x718>
 80161c8:	e613      	b.n	8015df2 <__ieee754_pow+0x2f2>
 80161ca:	bf00      	nop
 80161cc:	f3af 8000 	nop.w
 80161d0:	4a454eef 	.word	0x4a454eef
 80161d4:	3fca7e28 	.word	0x3fca7e28
 80161d8:	93c9db65 	.word	0x93c9db65
 80161dc:	3fcd864a 	.word	0x3fcd864a
 80161e0:	a91d4101 	.word	0xa91d4101
 80161e4:	3fd17460 	.word	0x3fd17460
 80161e8:	518f264d 	.word	0x518f264d
 80161ec:	3fd55555 	.word	0x3fd55555
 80161f0:	db6fabff 	.word	0xdb6fabff
 80161f4:	3fdb6db6 	.word	0x3fdb6db6
 80161f8:	33333303 	.word	0x33333303
 80161fc:	3fe33333 	.word	0x3fe33333
 8016200:	e0000000 	.word	0xe0000000
 8016204:	3feec709 	.word	0x3feec709
 8016208:	dc3a03fd 	.word	0xdc3a03fd
 801620c:	3feec709 	.word	0x3feec709
 8016210:	145b01f5 	.word	0x145b01f5
 8016214:	be3e2fe0 	.word	0xbe3e2fe0
 8016218:	00000000 	.word	0x00000000
 801621c:	3ff00000 	.word	0x3ff00000
 8016220:	43400000 	.word	0x43400000
 8016224:	0003988e 	.word	0x0003988e
 8016228:	000bb679 	.word	0x000bb679
 801622c:	08016f90 	.word	0x08016f90
 8016230:	3ff00000 	.word	0x3ff00000
 8016234:	40080000 	.word	0x40080000
 8016238:	08016fb0 	.word	0x08016fb0
 801623c:	08016fa0 	.word	0x08016fa0
 8016240:	a3b4      	add	r3, pc, #720	; (adr r3, 8016514 <__ieee754_pow+0xa14>)
 8016242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016246:	4640      	mov	r0, r8
 8016248:	4649      	mov	r1, r9
 801624a:	f7ea f83f 	bl	80002cc <__adddf3>
 801624e:	4622      	mov	r2, r4
 8016250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016254:	462b      	mov	r3, r5
 8016256:	4630      	mov	r0, r6
 8016258:	4639      	mov	r1, r7
 801625a:	f7ea f835 	bl	80002c8 <__aeabi_dsub>
 801625e:	4602      	mov	r2, r0
 8016260:	460b      	mov	r3, r1
 8016262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016266:	f7ea fc77 	bl	8000b58 <__aeabi_dcmpgt>
 801626a:	2800      	cmp	r0, #0
 801626c:	f47f adfe 	bne.w	8015e6c <__ieee754_pow+0x36c>
 8016270:	4aa3      	ldr	r2, [pc, #652]	; (8016500 <__ieee754_pow+0xa00>)
 8016272:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016276:	4293      	cmp	r3, r2
 8016278:	f340 810a 	ble.w	8016490 <__ieee754_pow+0x990>
 801627c:	151b      	asrs	r3, r3, #20
 801627e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016282:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016286:	fa4a f303 	asr.w	r3, sl, r3
 801628a:	445b      	add	r3, fp
 801628c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016290:	4e9c      	ldr	r6, [pc, #624]	; (8016504 <__ieee754_pow+0xa04>)
 8016292:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016296:	4116      	asrs	r6, r2
 8016298:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801629c:	2000      	movs	r0, #0
 801629e:	ea23 0106 	bic.w	r1, r3, r6
 80162a2:	f1c2 0214 	rsb	r2, r2, #20
 80162a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80162aa:	fa4a fa02 	asr.w	sl, sl, r2
 80162ae:	f1bb 0f00 	cmp.w	fp, #0
 80162b2:	4602      	mov	r2, r0
 80162b4:	460b      	mov	r3, r1
 80162b6:	4620      	mov	r0, r4
 80162b8:	4629      	mov	r1, r5
 80162ba:	bfb8      	it	lt
 80162bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80162c0:	f7ea f802 	bl	80002c8 <__aeabi_dsub>
 80162c4:	e9cd 0100 	strd	r0, r1, [sp]
 80162c8:	4642      	mov	r2, r8
 80162ca:	464b      	mov	r3, r9
 80162cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162d0:	f7e9 fffc 	bl	80002cc <__adddf3>
 80162d4:	2000      	movs	r0, #0
 80162d6:	a378      	add	r3, pc, #480	; (adr r3, 80164b8 <__ieee754_pow+0x9b8>)
 80162d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162dc:	4604      	mov	r4, r0
 80162de:	460d      	mov	r5, r1
 80162e0:	f7ea f9aa 	bl	8000638 <__aeabi_dmul>
 80162e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80162e8:	4606      	mov	r6, r0
 80162ea:	460f      	mov	r7, r1
 80162ec:	4620      	mov	r0, r4
 80162ee:	4629      	mov	r1, r5
 80162f0:	f7e9 ffea 	bl	80002c8 <__aeabi_dsub>
 80162f4:	4602      	mov	r2, r0
 80162f6:	460b      	mov	r3, r1
 80162f8:	4640      	mov	r0, r8
 80162fa:	4649      	mov	r1, r9
 80162fc:	f7e9 ffe4 	bl	80002c8 <__aeabi_dsub>
 8016300:	a36f      	add	r3, pc, #444	; (adr r3, 80164c0 <__ieee754_pow+0x9c0>)
 8016302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016306:	f7ea f997 	bl	8000638 <__aeabi_dmul>
 801630a:	a36f      	add	r3, pc, #444	; (adr r3, 80164c8 <__ieee754_pow+0x9c8>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	4680      	mov	r8, r0
 8016312:	4689      	mov	r9, r1
 8016314:	4620      	mov	r0, r4
 8016316:	4629      	mov	r1, r5
 8016318:	f7ea f98e 	bl	8000638 <__aeabi_dmul>
 801631c:	4602      	mov	r2, r0
 801631e:	460b      	mov	r3, r1
 8016320:	4640      	mov	r0, r8
 8016322:	4649      	mov	r1, r9
 8016324:	f7e9 ffd2 	bl	80002cc <__adddf3>
 8016328:	4604      	mov	r4, r0
 801632a:	460d      	mov	r5, r1
 801632c:	4602      	mov	r2, r0
 801632e:	460b      	mov	r3, r1
 8016330:	4630      	mov	r0, r6
 8016332:	4639      	mov	r1, r7
 8016334:	f7e9 ffca 	bl	80002cc <__adddf3>
 8016338:	4632      	mov	r2, r6
 801633a:	463b      	mov	r3, r7
 801633c:	4680      	mov	r8, r0
 801633e:	4689      	mov	r9, r1
 8016340:	f7e9 ffc2 	bl	80002c8 <__aeabi_dsub>
 8016344:	4602      	mov	r2, r0
 8016346:	460b      	mov	r3, r1
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f7e9 ffbc 	bl	80002c8 <__aeabi_dsub>
 8016350:	4642      	mov	r2, r8
 8016352:	4606      	mov	r6, r0
 8016354:	460f      	mov	r7, r1
 8016356:	464b      	mov	r3, r9
 8016358:	4640      	mov	r0, r8
 801635a:	4649      	mov	r1, r9
 801635c:	f7ea f96c 	bl	8000638 <__aeabi_dmul>
 8016360:	a35b      	add	r3, pc, #364	; (adr r3, 80164d0 <__ieee754_pow+0x9d0>)
 8016362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016366:	4604      	mov	r4, r0
 8016368:	460d      	mov	r5, r1
 801636a:	f7ea f965 	bl	8000638 <__aeabi_dmul>
 801636e:	a35a      	add	r3, pc, #360	; (adr r3, 80164d8 <__ieee754_pow+0x9d8>)
 8016370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016374:	f7e9 ffa8 	bl	80002c8 <__aeabi_dsub>
 8016378:	4622      	mov	r2, r4
 801637a:	462b      	mov	r3, r5
 801637c:	f7ea f95c 	bl	8000638 <__aeabi_dmul>
 8016380:	a357      	add	r3, pc, #348	; (adr r3, 80164e0 <__ieee754_pow+0x9e0>)
 8016382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016386:	f7e9 ffa1 	bl	80002cc <__adddf3>
 801638a:	4622      	mov	r2, r4
 801638c:	462b      	mov	r3, r5
 801638e:	f7ea f953 	bl	8000638 <__aeabi_dmul>
 8016392:	a355      	add	r3, pc, #340	; (adr r3, 80164e8 <__ieee754_pow+0x9e8>)
 8016394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016398:	f7e9 ff96 	bl	80002c8 <__aeabi_dsub>
 801639c:	4622      	mov	r2, r4
 801639e:	462b      	mov	r3, r5
 80163a0:	f7ea f94a 	bl	8000638 <__aeabi_dmul>
 80163a4:	a352      	add	r3, pc, #328	; (adr r3, 80164f0 <__ieee754_pow+0x9f0>)
 80163a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163aa:	f7e9 ff8f 	bl	80002cc <__adddf3>
 80163ae:	4622      	mov	r2, r4
 80163b0:	462b      	mov	r3, r5
 80163b2:	f7ea f941 	bl	8000638 <__aeabi_dmul>
 80163b6:	4602      	mov	r2, r0
 80163b8:	460b      	mov	r3, r1
 80163ba:	4640      	mov	r0, r8
 80163bc:	4649      	mov	r1, r9
 80163be:	f7e9 ff83 	bl	80002c8 <__aeabi_dsub>
 80163c2:	4604      	mov	r4, r0
 80163c4:	460d      	mov	r5, r1
 80163c6:	4602      	mov	r2, r0
 80163c8:	460b      	mov	r3, r1
 80163ca:	4640      	mov	r0, r8
 80163cc:	4649      	mov	r1, r9
 80163ce:	f7ea f933 	bl	8000638 <__aeabi_dmul>
 80163d2:	2200      	movs	r2, #0
 80163d4:	e9cd 0100 	strd	r0, r1, [sp]
 80163d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80163dc:	4620      	mov	r0, r4
 80163de:	4629      	mov	r1, r5
 80163e0:	f7e9 ff72 	bl	80002c8 <__aeabi_dsub>
 80163e4:	4602      	mov	r2, r0
 80163e6:	460b      	mov	r3, r1
 80163e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163ec:	f7ea fa4e 	bl	800088c <__aeabi_ddiv>
 80163f0:	4632      	mov	r2, r6
 80163f2:	4604      	mov	r4, r0
 80163f4:	460d      	mov	r5, r1
 80163f6:	463b      	mov	r3, r7
 80163f8:	4640      	mov	r0, r8
 80163fa:	4649      	mov	r1, r9
 80163fc:	f7ea f91c 	bl	8000638 <__aeabi_dmul>
 8016400:	4632      	mov	r2, r6
 8016402:	463b      	mov	r3, r7
 8016404:	f7e9 ff62 	bl	80002cc <__adddf3>
 8016408:	4602      	mov	r2, r0
 801640a:	460b      	mov	r3, r1
 801640c:	4620      	mov	r0, r4
 801640e:	4629      	mov	r1, r5
 8016410:	f7e9 ff5a 	bl	80002c8 <__aeabi_dsub>
 8016414:	4642      	mov	r2, r8
 8016416:	464b      	mov	r3, r9
 8016418:	f7e9 ff56 	bl	80002c8 <__aeabi_dsub>
 801641c:	4602      	mov	r2, r0
 801641e:	460b      	mov	r3, r1
 8016420:	2000      	movs	r0, #0
 8016422:	4939      	ldr	r1, [pc, #228]	; (8016508 <__ieee754_pow+0xa08>)
 8016424:	f7e9 ff50 	bl	80002c8 <__aeabi_dsub>
 8016428:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801642c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016430:	4602      	mov	r2, r0
 8016432:	460b      	mov	r3, r1
 8016434:	da2f      	bge.n	8016496 <__ieee754_pow+0x996>
 8016436:	4650      	mov	r0, sl
 8016438:	ec43 2b10 	vmov	d0, r2, r3
 801643c:	f000 f9c0 	bl	80167c0 <scalbn>
 8016440:	ec51 0b10 	vmov	r0, r1, d0
 8016444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016448:	f7ff bbf1 	b.w	8015c2e <__ieee754_pow+0x12e>
 801644c:	4b2f      	ldr	r3, [pc, #188]	; (801650c <__ieee754_pow+0xa0c>)
 801644e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016452:	429e      	cmp	r6, r3
 8016454:	f77f af0c 	ble.w	8016270 <__ieee754_pow+0x770>
 8016458:	4b2d      	ldr	r3, [pc, #180]	; (8016510 <__ieee754_pow+0xa10>)
 801645a:	440b      	add	r3, r1
 801645c:	4303      	orrs	r3, r0
 801645e:	d00b      	beq.n	8016478 <__ieee754_pow+0x978>
 8016460:	a325      	add	r3, pc, #148	; (adr r3, 80164f8 <__ieee754_pow+0x9f8>)
 8016462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801646a:	f7ea f8e5 	bl	8000638 <__aeabi_dmul>
 801646e:	a322      	add	r3, pc, #136	; (adr r3, 80164f8 <__ieee754_pow+0x9f8>)
 8016470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016474:	f7ff bbdb 	b.w	8015c2e <__ieee754_pow+0x12e>
 8016478:	4622      	mov	r2, r4
 801647a:	462b      	mov	r3, r5
 801647c:	f7e9 ff24 	bl	80002c8 <__aeabi_dsub>
 8016480:	4642      	mov	r2, r8
 8016482:	464b      	mov	r3, r9
 8016484:	f7ea fb5e 	bl	8000b44 <__aeabi_dcmpge>
 8016488:	2800      	cmp	r0, #0
 801648a:	f43f aef1 	beq.w	8016270 <__ieee754_pow+0x770>
 801648e:	e7e7      	b.n	8016460 <__ieee754_pow+0x960>
 8016490:	f04f 0a00 	mov.w	sl, #0
 8016494:	e718      	b.n	80162c8 <__ieee754_pow+0x7c8>
 8016496:	4621      	mov	r1, r4
 8016498:	e7d4      	b.n	8016444 <__ieee754_pow+0x944>
 801649a:	2000      	movs	r0, #0
 801649c:	491a      	ldr	r1, [pc, #104]	; (8016508 <__ieee754_pow+0xa08>)
 801649e:	f7ff bb8f 	b.w	8015bc0 <__ieee754_pow+0xc0>
 80164a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164a6:	f7ff bb8b 	b.w	8015bc0 <__ieee754_pow+0xc0>
 80164aa:	4630      	mov	r0, r6
 80164ac:	4639      	mov	r1, r7
 80164ae:	f7ff bb87 	b.w	8015bc0 <__ieee754_pow+0xc0>
 80164b2:	4693      	mov	fp, r2
 80164b4:	f7ff bb98 	b.w	8015be8 <__ieee754_pow+0xe8>
 80164b8:	00000000 	.word	0x00000000
 80164bc:	3fe62e43 	.word	0x3fe62e43
 80164c0:	fefa39ef 	.word	0xfefa39ef
 80164c4:	3fe62e42 	.word	0x3fe62e42
 80164c8:	0ca86c39 	.word	0x0ca86c39
 80164cc:	be205c61 	.word	0xbe205c61
 80164d0:	72bea4d0 	.word	0x72bea4d0
 80164d4:	3e663769 	.word	0x3e663769
 80164d8:	c5d26bf1 	.word	0xc5d26bf1
 80164dc:	3ebbbd41 	.word	0x3ebbbd41
 80164e0:	af25de2c 	.word	0xaf25de2c
 80164e4:	3f11566a 	.word	0x3f11566a
 80164e8:	16bebd93 	.word	0x16bebd93
 80164ec:	3f66c16c 	.word	0x3f66c16c
 80164f0:	5555553e 	.word	0x5555553e
 80164f4:	3fc55555 	.word	0x3fc55555
 80164f8:	c2f8f359 	.word	0xc2f8f359
 80164fc:	01a56e1f 	.word	0x01a56e1f
 8016500:	3fe00000 	.word	0x3fe00000
 8016504:	000fffff 	.word	0x000fffff
 8016508:	3ff00000 	.word	0x3ff00000
 801650c:	4090cbff 	.word	0x4090cbff
 8016510:	3f6f3400 	.word	0x3f6f3400
 8016514:	652b82fe 	.word	0x652b82fe
 8016518:	3c971547 	.word	0x3c971547

0801651c <__ieee754_sqrt>:
 801651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016520:	4955      	ldr	r1, [pc, #340]	; (8016678 <__ieee754_sqrt+0x15c>)
 8016522:	ec55 4b10 	vmov	r4, r5, d0
 8016526:	43a9      	bics	r1, r5
 8016528:	462b      	mov	r3, r5
 801652a:	462a      	mov	r2, r5
 801652c:	d112      	bne.n	8016554 <__ieee754_sqrt+0x38>
 801652e:	ee10 2a10 	vmov	r2, s0
 8016532:	ee10 0a10 	vmov	r0, s0
 8016536:	4629      	mov	r1, r5
 8016538:	f7ea f87e 	bl	8000638 <__aeabi_dmul>
 801653c:	4602      	mov	r2, r0
 801653e:	460b      	mov	r3, r1
 8016540:	4620      	mov	r0, r4
 8016542:	4629      	mov	r1, r5
 8016544:	f7e9 fec2 	bl	80002cc <__adddf3>
 8016548:	4604      	mov	r4, r0
 801654a:	460d      	mov	r5, r1
 801654c:	ec45 4b10 	vmov	d0, r4, r5
 8016550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016554:	2d00      	cmp	r5, #0
 8016556:	ee10 0a10 	vmov	r0, s0
 801655a:	4621      	mov	r1, r4
 801655c:	dc0f      	bgt.n	801657e <__ieee754_sqrt+0x62>
 801655e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016562:	4330      	orrs	r0, r6
 8016564:	d0f2      	beq.n	801654c <__ieee754_sqrt+0x30>
 8016566:	b155      	cbz	r5, 801657e <__ieee754_sqrt+0x62>
 8016568:	ee10 2a10 	vmov	r2, s0
 801656c:	4620      	mov	r0, r4
 801656e:	4629      	mov	r1, r5
 8016570:	f7e9 feaa 	bl	80002c8 <__aeabi_dsub>
 8016574:	4602      	mov	r2, r0
 8016576:	460b      	mov	r3, r1
 8016578:	f7ea f988 	bl	800088c <__aeabi_ddiv>
 801657c:	e7e4      	b.n	8016548 <__ieee754_sqrt+0x2c>
 801657e:	151b      	asrs	r3, r3, #20
 8016580:	d073      	beq.n	801666a <__ieee754_sqrt+0x14e>
 8016582:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016586:	07dd      	lsls	r5, r3, #31
 8016588:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801658c:	bf48      	it	mi
 801658e:	0fc8      	lsrmi	r0, r1, #31
 8016590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016594:	bf44      	itt	mi
 8016596:	0049      	lslmi	r1, r1, #1
 8016598:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801659c:	2500      	movs	r5, #0
 801659e:	1058      	asrs	r0, r3, #1
 80165a0:	0fcb      	lsrs	r3, r1, #31
 80165a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80165a6:	0049      	lsls	r1, r1, #1
 80165a8:	2316      	movs	r3, #22
 80165aa:	462c      	mov	r4, r5
 80165ac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80165b0:	19a7      	adds	r7, r4, r6
 80165b2:	4297      	cmp	r7, r2
 80165b4:	bfde      	ittt	le
 80165b6:	19bc      	addle	r4, r7, r6
 80165b8:	1bd2      	suble	r2, r2, r7
 80165ba:	19ad      	addle	r5, r5, r6
 80165bc:	0fcf      	lsrs	r7, r1, #31
 80165be:	3b01      	subs	r3, #1
 80165c0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80165c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80165c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80165cc:	d1f0      	bne.n	80165b0 <__ieee754_sqrt+0x94>
 80165ce:	f04f 0c20 	mov.w	ip, #32
 80165d2:	469e      	mov	lr, r3
 80165d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80165d8:	42a2      	cmp	r2, r4
 80165da:	eb06 070e 	add.w	r7, r6, lr
 80165de:	dc02      	bgt.n	80165e6 <__ieee754_sqrt+0xca>
 80165e0:	d112      	bne.n	8016608 <__ieee754_sqrt+0xec>
 80165e2:	428f      	cmp	r7, r1
 80165e4:	d810      	bhi.n	8016608 <__ieee754_sqrt+0xec>
 80165e6:	2f00      	cmp	r7, #0
 80165e8:	eb07 0e06 	add.w	lr, r7, r6
 80165ec:	da42      	bge.n	8016674 <__ieee754_sqrt+0x158>
 80165ee:	f1be 0f00 	cmp.w	lr, #0
 80165f2:	db3f      	blt.n	8016674 <__ieee754_sqrt+0x158>
 80165f4:	f104 0801 	add.w	r8, r4, #1
 80165f8:	1b12      	subs	r2, r2, r4
 80165fa:	428f      	cmp	r7, r1
 80165fc:	bf88      	it	hi
 80165fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016602:	1bc9      	subs	r1, r1, r7
 8016604:	4433      	add	r3, r6
 8016606:	4644      	mov	r4, r8
 8016608:	0052      	lsls	r2, r2, #1
 801660a:	f1bc 0c01 	subs.w	ip, ip, #1
 801660e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016612:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016616:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801661a:	d1dd      	bne.n	80165d8 <__ieee754_sqrt+0xbc>
 801661c:	430a      	orrs	r2, r1
 801661e:	d006      	beq.n	801662e <__ieee754_sqrt+0x112>
 8016620:	1c5c      	adds	r4, r3, #1
 8016622:	bf13      	iteet	ne
 8016624:	3301      	addne	r3, #1
 8016626:	3501      	addeq	r5, #1
 8016628:	4663      	moveq	r3, ip
 801662a:	f023 0301 	bicne.w	r3, r3, #1
 801662e:	106a      	asrs	r2, r5, #1
 8016630:	085b      	lsrs	r3, r3, #1
 8016632:	07e9      	lsls	r1, r5, #31
 8016634:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016638:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801663c:	bf48      	it	mi
 801663e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016642:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016646:	461c      	mov	r4, r3
 8016648:	e780      	b.n	801654c <__ieee754_sqrt+0x30>
 801664a:	0aca      	lsrs	r2, r1, #11
 801664c:	3815      	subs	r0, #21
 801664e:	0549      	lsls	r1, r1, #21
 8016650:	2a00      	cmp	r2, #0
 8016652:	d0fa      	beq.n	801664a <__ieee754_sqrt+0x12e>
 8016654:	02d6      	lsls	r6, r2, #11
 8016656:	d50a      	bpl.n	801666e <__ieee754_sqrt+0x152>
 8016658:	f1c3 0420 	rsb	r4, r3, #32
 801665c:	fa21 f404 	lsr.w	r4, r1, r4
 8016660:	1e5d      	subs	r5, r3, #1
 8016662:	4099      	lsls	r1, r3
 8016664:	4322      	orrs	r2, r4
 8016666:	1b43      	subs	r3, r0, r5
 8016668:	e78b      	b.n	8016582 <__ieee754_sqrt+0x66>
 801666a:	4618      	mov	r0, r3
 801666c:	e7f0      	b.n	8016650 <__ieee754_sqrt+0x134>
 801666e:	0052      	lsls	r2, r2, #1
 8016670:	3301      	adds	r3, #1
 8016672:	e7ef      	b.n	8016654 <__ieee754_sqrt+0x138>
 8016674:	46a0      	mov	r8, r4
 8016676:	e7bf      	b.n	80165f8 <__ieee754_sqrt+0xdc>
 8016678:	7ff00000 	.word	0x7ff00000

0801667c <fabs>:
 801667c:	ec51 0b10 	vmov	r0, r1, d0
 8016680:	ee10 2a10 	vmov	r2, s0
 8016684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016688:	ec43 2b10 	vmov	d0, r2, r3
 801668c:	4770      	bx	lr

0801668e <finite>:
 801668e:	ee10 3a90 	vmov	r3, s1
 8016692:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016696:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801669a:	0fc0      	lsrs	r0, r0, #31
 801669c:	4770      	bx	lr

0801669e <matherr>:
 801669e:	2000      	movs	r0, #0
 80166a0:	4770      	bx	lr
 80166a2:	0000      	movs	r0, r0
 80166a4:	0000      	movs	r0, r0
	...

080166a8 <nan>:
 80166a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80166b0 <nan+0x8>
 80166ac:	4770      	bx	lr
 80166ae:	bf00      	nop
 80166b0:	00000000 	.word	0x00000000
 80166b4:	7ff80000 	.word	0x7ff80000

080166b8 <rint>:
 80166b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166ba:	ec51 0b10 	vmov	r0, r1, d0
 80166be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80166c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80166c6:	2e13      	cmp	r6, #19
 80166c8:	460b      	mov	r3, r1
 80166ca:	ee10 4a10 	vmov	r4, s0
 80166ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80166d2:	dc56      	bgt.n	8016782 <rint+0xca>
 80166d4:	2e00      	cmp	r6, #0
 80166d6:	da2b      	bge.n	8016730 <rint+0x78>
 80166d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80166dc:	4302      	orrs	r2, r0
 80166de:	d023      	beq.n	8016728 <rint+0x70>
 80166e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80166e4:	4302      	orrs	r2, r0
 80166e6:	4254      	negs	r4, r2
 80166e8:	4314      	orrs	r4, r2
 80166ea:	0c4b      	lsrs	r3, r1, #17
 80166ec:	0b24      	lsrs	r4, r4, #12
 80166ee:	045b      	lsls	r3, r3, #17
 80166f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80166f4:	ea44 0103 	orr.w	r1, r4, r3
 80166f8:	460b      	mov	r3, r1
 80166fa:	492f      	ldr	r1, [pc, #188]	; (80167b8 <rint+0x100>)
 80166fc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016700:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016704:	4602      	mov	r2, r0
 8016706:	4639      	mov	r1, r7
 8016708:	4630      	mov	r0, r6
 801670a:	f7e9 fddf 	bl	80002cc <__adddf3>
 801670e:	e9cd 0100 	strd	r0, r1, [sp]
 8016712:	463b      	mov	r3, r7
 8016714:	4632      	mov	r2, r6
 8016716:	e9dd 0100 	ldrd	r0, r1, [sp]
 801671a:	f7e9 fdd5 	bl	80002c8 <__aeabi_dsub>
 801671e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016722:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016726:	4639      	mov	r1, r7
 8016728:	ec41 0b10 	vmov	d0, r0, r1
 801672c:	b003      	add	sp, #12
 801672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016730:	4a22      	ldr	r2, [pc, #136]	; (80167bc <rint+0x104>)
 8016732:	4132      	asrs	r2, r6
 8016734:	ea01 0702 	and.w	r7, r1, r2
 8016738:	4307      	orrs	r7, r0
 801673a:	d0f5      	beq.n	8016728 <rint+0x70>
 801673c:	0852      	lsrs	r2, r2, #1
 801673e:	4011      	ands	r1, r2
 8016740:	430c      	orrs	r4, r1
 8016742:	d00b      	beq.n	801675c <rint+0xa4>
 8016744:	ea23 0202 	bic.w	r2, r3, r2
 8016748:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801674c:	2e13      	cmp	r6, #19
 801674e:	fa43 f306 	asr.w	r3, r3, r6
 8016752:	bf0c      	ite	eq
 8016754:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016758:	2400      	movne	r4, #0
 801675a:	4313      	orrs	r3, r2
 801675c:	4916      	ldr	r1, [pc, #88]	; (80167b8 <rint+0x100>)
 801675e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016762:	4622      	mov	r2, r4
 8016764:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016768:	4620      	mov	r0, r4
 801676a:	4629      	mov	r1, r5
 801676c:	f7e9 fdae 	bl	80002cc <__adddf3>
 8016770:	e9cd 0100 	strd	r0, r1, [sp]
 8016774:	4622      	mov	r2, r4
 8016776:	462b      	mov	r3, r5
 8016778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801677c:	f7e9 fda4 	bl	80002c8 <__aeabi_dsub>
 8016780:	e7d2      	b.n	8016728 <rint+0x70>
 8016782:	2e33      	cmp	r6, #51	; 0x33
 8016784:	dd07      	ble.n	8016796 <rint+0xde>
 8016786:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801678a:	d1cd      	bne.n	8016728 <rint+0x70>
 801678c:	ee10 2a10 	vmov	r2, s0
 8016790:	f7e9 fd9c 	bl	80002cc <__adddf3>
 8016794:	e7c8      	b.n	8016728 <rint+0x70>
 8016796:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801679a:	f04f 32ff 	mov.w	r2, #4294967295
 801679e:	40f2      	lsrs	r2, r6
 80167a0:	4210      	tst	r0, r2
 80167a2:	d0c1      	beq.n	8016728 <rint+0x70>
 80167a4:	0852      	lsrs	r2, r2, #1
 80167a6:	4210      	tst	r0, r2
 80167a8:	bf1f      	itttt	ne
 80167aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80167ae:	ea20 0202 	bicne.w	r2, r0, r2
 80167b2:	4134      	asrne	r4, r6
 80167b4:	4314      	orrne	r4, r2
 80167b6:	e7d1      	b.n	801675c <rint+0xa4>
 80167b8:	08016fc0 	.word	0x08016fc0
 80167bc:	000fffff 	.word	0x000fffff

080167c0 <scalbn>:
 80167c0:	b570      	push	{r4, r5, r6, lr}
 80167c2:	ec55 4b10 	vmov	r4, r5, d0
 80167c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80167ca:	4606      	mov	r6, r0
 80167cc:	462b      	mov	r3, r5
 80167ce:	b9aa      	cbnz	r2, 80167fc <scalbn+0x3c>
 80167d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80167d4:	4323      	orrs	r3, r4
 80167d6:	d03b      	beq.n	8016850 <scalbn+0x90>
 80167d8:	4b31      	ldr	r3, [pc, #196]	; (80168a0 <scalbn+0xe0>)
 80167da:	4629      	mov	r1, r5
 80167dc:	2200      	movs	r2, #0
 80167de:	ee10 0a10 	vmov	r0, s0
 80167e2:	f7e9 ff29 	bl	8000638 <__aeabi_dmul>
 80167e6:	4b2f      	ldr	r3, [pc, #188]	; (80168a4 <scalbn+0xe4>)
 80167e8:	429e      	cmp	r6, r3
 80167ea:	4604      	mov	r4, r0
 80167ec:	460d      	mov	r5, r1
 80167ee:	da12      	bge.n	8016816 <scalbn+0x56>
 80167f0:	a327      	add	r3, pc, #156	; (adr r3, 8016890 <scalbn+0xd0>)
 80167f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f6:	f7e9 ff1f 	bl	8000638 <__aeabi_dmul>
 80167fa:	e009      	b.n	8016810 <scalbn+0x50>
 80167fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016800:	428a      	cmp	r2, r1
 8016802:	d10c      	bne.n	801681e <scalbn+0x5e>
 8016804:	ee10 2a10 	vmov	r2, s0
 8016808:	4620      	mov	r0, r4
 801680a:	4629      	mov	r1, r5
 801680c:	f7e9 fd5e 	bl	80002cc <__adddf3>
 8016810:	4604      	mov	r4, r0
 8016812:	460d      	mov	r5, r1
 8016814:	e01c      	b.n	8016850 <scalbn+0x90>
 8016816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801681a:	460b      	mov	r3, r1
 801681c:	3a36      	subs	r2, #54	; 0x36
 801681e:	4432      	add	r2, r6
 8016820:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016824:	428a      	cmp	r2, r1
 8016826:	dd0b      	ble.n	8016840 <scalbn+0x80>
 8016828:	ec45 4b11 	vmov	d1, r4, r5
 801682c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016898 <scalbn+0xd8>
 8016830:	f000 f83c 	bl	80168ac <copysign>
 8016834:	a318      	add	r3, pc, #96	; (adr r3, 8016898 <scalbn+0xd8>)
 8016836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683a:	ec51 0b10 	vmov	r0, r1, d0
 801683e:	e7da      	b.n	80167f6 <scalbn+0x36>
 8016840:	2a00      	cmp	r2, #0
 8016842:	dd08      	ble.n	8016856 <scalbn+0x96>
 8016844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801684c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016850:	ec45 4b10 	vmov	d0, r4, r5
 8016854:	bd70      	pop	{r4, r5, r6, pc}
 8016856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801685a:	da0d      	bge.n	8016878 <scalbn+0xb8>
 801685c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016860:	429e      	cmp	r6, r3
 8016862:	ec45 4b11 	vmov	d1, r4, r5
 8016866:	dce1      	bgt.n	801682c <scalbn+0x6c>
 8016868:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016890 <scalbn+0xd0>
 801686c:	f000 f81e 	bl	80168ac <copysign>
 8016870:	a307      	add	r3, pc, #28	; (adr r3, 8016890 <scalbn+0xd0>)
 8016872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016876:	e7e0      	b.n	801683a <scalbn+0x7a>
 8016878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801687c:	3236      	adds	r2, #54	; 0x36
 801687e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016886:	4620      	mov	r0, r4
 8016888:	4629      	mov	r1, r5
 801688a:	2200      	movs	r2, #0
 801688c:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <scalbn+0xe8>)
 801688e:	e7b2      	b.n	80167f6 <scalbn+0x36>
 8016890:	c2f8f359 	.word	0xc2f8f359
 8016894:	01a56e1f 	.word	0x01a56e1f
 8016898:	8800759c 	.word	0x8800759c
 801689c:	7e37e43c 	.word	0x7e37e43c
 80168a0:	43500000 	.word	0x43500000
 80168a4:	ffff3cb0 	.word	0xffff3cb0
 80168a8:	3c900000 	.word	0x3c900000

080168ac <copysign>:
 80168ac:	ec51 0b10 	vmov	r0, r1, d0
 80168b0:	ee11 0a90 	vmov	r0, s3
 80168b4:	ee10 2a10 	vmov	r2, s0
 80168b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80168bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80168c0:	ea41 0300 	orr.w	r3, r1, r0
 80168c4:	ec43 2b10 	vmov	d0, r2, r3
 80168c8:	4770      	bx	lr
	...

080168cc <_init>:
 80168cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ce:	bf00      	nop
 80168d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168d2:	bc08      	pop	{r3}
 80168d4:	469e      	mov	lr, r3
 80168d6:	4770      	bx	lr

080168d8 <_fini>:
 80168d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168da:	bf00      	nop
 80168dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168de:	bc08      	pop	{r3}
 80168e0:	469e      	mov	lr, r3
 80168e2:	4770      	bx	lr
