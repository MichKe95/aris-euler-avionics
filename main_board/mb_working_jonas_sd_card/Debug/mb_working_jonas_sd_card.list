
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017bd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08017da8  08017da8  00027da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018538  08018538  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08018538  08018538  00028538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018540  08018540  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018540  08018540  00028540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018544  08018544  00028544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08018548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016e70  200001fc  08018744  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001706c  08018744  0003706c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039248  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e70  00000000  00000000  00069474  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002610  00000000  00000000  000702e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022d8  00000000  00000000  000728f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c236  00000000  00000000  00074bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026f6c  00000000  00000000  00080e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104325  00000000  00000000  000a7d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a694  00000000  00000000  001ac114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017d8c 	.word	0x08017d8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08017d8c 	.word	0x08017d8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b095      	sub	sp, #84	; 0x54
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f003 fad6 	bl	800452e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8e7 	bl	8001154 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 8000f86:	4b50      	ldr	r3, [pc, #320]	; (80010c8 <main+0x150>)
 8000f88:	4a50      	ldr	r2, [pc, #320]	; (80010cc <main+0x154>)
 8000f8a:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <main+0x150>)
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <main+0x158>)
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa8f 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fa67 	bl	8001468 <MX_DMA_Init>
  MX_SPI3_Init();
 8000f9a:	f000 f9fd 	bl	8001398 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f98b 	bl	80012b8 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000fa2:	f000 f969 	bl	8001278 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000fa6:	f000 f9bf 	bl	8001328 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000faa:	f00b fdf1 	bl	800cb90 <MX_FATFS_Init>
  MX_UART7_Init();
 8000fae:	f000 fa2b 	bl	8001408 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000fb2:	f014 fc1b 	bl	80157ec <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb6:	f010 fbdd 	bl	8011774 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <main+0x15c>)
 8000fbc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8000fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f010 fda4 	bl	8011b18 <osMutexNew>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <main+0x160>)
 8000fd4:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <main+0x164>)
 8000fd8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8000fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f010 fd96 	bl	8011b18 <osMutexNew>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <main+0x168>)
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <main+0x16c>)
 8000ff4:	f107 0420 	add.w	r4, r7, #32
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f010 fd88 	bl	8011b18 <osMutexNew>
 8001008:	4602      	mov	r2, r0
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <main+0x170>)
 800100c:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <main+0x174>)
 8001010:	f107 0410 	add.w	r4, r7, #16
 8001014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f010 fd7a 	bl	8011b18 <osMutexNew>
 8001024:	4602      	mov	r2, r0
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <main+0x178>)
 8001028:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <main+0x17c>)
 800102c:	463c      	mov	r4, r7
 800102e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8001034:	463b      	mov	r3, r7
 8001036:	4618      	mov	r0, r3
 8001038:	f010 fd6e 	bl	8011b18 <osMutexNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <main+0x180>)
 8001040:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8001042:	2200      	movs	r2, #0
 8001044:	2196      	movs	r1, #150	; 0x96
 8001046:	2080      	movs	r0, #128	; 0x80
 8001048:	f011 f870 	bl	801212c <osMessageQueueNew>
 800104c:	4602      	mov	r2, r0
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <main+0x184>)
 8001050:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001052:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <main+0x188>)
 8001054:	2100      	movs	r1, #0
 8001056:	482b      	ldr	r0, [pc, #172]	; (8001104 <main+0x18c>)
 8001058:	f010 fc4a 	bl	80118f0 <osThreadNew>
 800105c:	4602      	mov	r2, r0
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <main+0x190>)
 8001060:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8001062:	4a2a      	ldr	r2, [pc, #168]	; (800110c <main+0x194>)
 8001064:	2100      	movs	r1, #0
 8001066:	482a      	ldr	r0, [pc, #168]	; (8001110 <main+0x198>)
 8001068:	f010 fc42 	bl	80118f0 <osThreadNew>
 800106c:	4602      	mov	r2, r0
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <main+0x19c>)
 8001070:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8001072:	4a29      	ldr	r2, [pc, #164]	; (8001118 <main+0x1a0>)
 8001074:	2100      	movs	r1, #0
 8001076:	4829      	ldr	r0, [pc, #164]	; (800111c <main+0x1a4>)
 8001078:	f010 fc3a 	bl	80118f0 <osThreadNew>
 800107c:	4602      	mov	r2, r0
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <main+0x1a8>)
 8001080:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8001082:	4a28      	ldr	r2, [pc, #160]	; (8001124 <main+0x1ac>)
 8001084:	2100      	movs	r1, #0
 8001086:	4828      	ldr	r0, [pc, #160]	; (8001128 <main+0x1b0>)
 8001088:	f010 fc32 	bl	80118f0 <osThreadNew>
 800108c:	4602      	mov	r2, r0
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <main+0x1b4>)
 8001090:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <main+0x1b8>)
 8001094:	2100      	movs	r1, #0
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <main+0x1bc>)
 8001098:	f010 fc2a 	bl	80118f0 <osThreadNew>
 800109c:	4602      	mov	r2, r0
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <main+0x1c0>)
 80010a0:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80010a2:	4a26      	ldr	r2, [pc, #152]	; (800113c <main+0x1c4>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4826      	ldr	r0, [pc, #152]	; (8001140 <main+0x1c8>)
 80010a8:	f010 fc22 	bl	80118f0 <osThreadNew>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <main+0x1cc>)
 80010b0:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <main+0x1d0>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4825      	ldr	r0, [pc, #148]	; (800114c <main+0x1d4>)
 80010b8:	f010 fc1a 	bl	80118f0 <osThreadNew>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <main+0x1d8>)
 80010c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010c2:	f010 fbad 	bl	8011820 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <main+0x14e>
 80010c8:	e0042000 	.word	0xe0042000
 80010cc:	07e01bff 	.word	0x07e01bff
 80010d0:	00070003 	.word	0x00070003
 80010d4:	08017e18 	.word	0x08017e18
 80010d8:	2000ab2c 	.word	0x2000ab2c
 80010dc:	08017e34 	.word	0x08017e34
 80010e0:	20014e38 	.word	0x20014e38
 80010e4:	08017e50 	.word	0x08017e50
 80010e8:	2000ab90 	.word	0x2000ab90
 80010ec:	08017e70 	.word	0x08017e70
 80010f0:	2000ab94 	.word	0x2000ab94
 80010f4:	08017e8c 	.word	0x08017e8c
 80010f8:	2000cbf4 	.word	0x2000cbf4
 80010fc:	20010d18 	.word	0x20010d18
 8001100:	0801830c 	.word	0x0801830c
 8001104:	08001591 	.word	0x08001591
 8001108:	20008828 	.word	0x20008828
 800110c:	08018330 	.word	0x08018330
 8001110:	08003e99 	.word	0x08003e99
 8001114:	2000ab28 	.word	0x2000ab28
 8001118:	08018354 	.word	0x08018354
 800111c:	080030b9 	.word	0x080030b9
 8001120:	20014e34 	.word	0x20014e34
 8001124:	08018378 	.word	0x08018378
 8001128:	08003cf9 	.word	0x08003cf9
 800112c:	200089f4 	.word	0x200089f4
 8001130:	0801839c 	.word	0x0801839c
 8001134:	08003971 	.word	0x08003971
 8001138:	20008910 	.word	0x20008910
 800113c:	080183c0 	.word	0x080183c0
 8001140:	08003685 	.word	0x08003685
 8001144:	2000ab24 	.word	0x2000ab24
 8001148:	080183e4 	.word	0x080183e4
 800114c:	080033a9 	.word	0x080033a9
 8001150:	2000ab30 	.word	0x2000ab30

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0b4      	sub	sp, #208	; 0xd0
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800115e:	2230      	movs	r2, #48	; 0x30
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f015 f8ef 	bl	8016346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2284      	movs	r2, #132	; 0x84
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f015 f8e0 	bl	8016346 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <SystemClock_Config+0x118>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a38      	ldr	r2, [pc, #224]	; (800126c <SystemClock_Config+0x118>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <SystemClock_Config+0x118>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <SystemClock_Config+0x11c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a6:	4a32      	ldr	r2, [pc, #200]	; (8001270 <SystemClock_Config+0x11c>)
 80011a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <SystemClock_Config+0x11c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d6:	2304      	movs	r3, #4
 80011d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011dc:	23a8      	movs	r3, #168	; 0xa8
 80011de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e8:	2307      	movs	r3, #7
 80011ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 f9f2 	bl	80065dc <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fe:	f000 f9e3 	bl	80015c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001224:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001228:	2105      	movs	r1, #5
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fc7a 	bl	8006b24 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001236:	f000 f9c7 	bl	80015c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <SystemClock_Config+0x120>)
 800123c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800123e:	2300      	movs	r3, #0
 8001240:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fe90 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800125e:	f000 f9b3 	bl	80015c8 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	37d0      	adds	r7, #208	; 0xd0
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000
 8001274:	00a01000 	.word	0x00a01000

08001278 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 800127e:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <MX_SDMMC1_SD_Init+0x3c>)
 8001280:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <MX_SDMMC1_SD_Init+0x38>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20008970 	.word	0x20008970
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_SPI1_Init+0x68>)
 80012be:	4a19      	ldr	r2, [pc, #100]	; (8001324 <MX_SPI1_Init+0x6c>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_SPI1_Init+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_SPI1_Init+0x68>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_SPI1_Init+0x68>)
 80012d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_SPI1_Init+0x68>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_SPI1_Init+0x68>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_SPI1_Init+0x68>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <MX_SPI1_Init+0x68>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_SPI1_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MX_SPI1_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_SPI1_Init+0x68>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_SPI1_Init+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_SPI1_Init+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_SPI1_Init+0x68>)
 800130e:	f007 fcdf 	bl	8008cd0 <HAL_SPI_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001318:	f000 f956 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20010cb4 	.word	0x20010cb4
 8001324:	40013000 	.word	0x40013000

08001328 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI2_Init+0x68>)
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <MX_SPI2_Init+0x6c>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_SPI2_Init+0x68>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_SPI2_Init+0x68>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI2_Init+0x68>)
 8001340:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001344:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_SPI2_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_SPI2_Init+0x68>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI2_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_SPI2_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI2_Init+0x68>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_SPI2_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI2_Init+0x68>)
 800136c:	2207      	movs	r2, #7
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_SPI2_Init+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI2_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_SPI2_Init+0x68>)
 800137e:	f007 fca7 	bl	8008cd0 <HAL_SPI_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001388:	f000 f91e 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000882c 	.word	0x2000882c
 8001394:	40003800 	.word	0x40003800

08001398 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_SPI3_Init+0x68>)
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <MX_SPI3_Init+0x6c>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI3_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_SPI3_Init+0x68>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI3_Init+0x68>)
 80013b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_SPI3_Init+0x68>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_SPI3_Init+0x68>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI3_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_SPI3_Init+0x68>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI3_Init+0x68>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SPI3_Init+0x68>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI3_Init+0x68>)
 80013dc:	2207      	movs	r2, #7
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SPI3_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI3_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_SPI3_Init+0x68>)
 80013ee:	f007 fc6f 	bl	8008cd0 <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80013f8:	f000 f8e6 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000a9f8 	.word	0x2000a9f8
 8001404:	40003c00 	.word	0x40003c00

08001408 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_UART7_Init+0x58>)
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <MX_UART7_Init+0x5c>)
 8001410:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_UART7_Init+0x58>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_UART7_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_UART7_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_UART7_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_UART7_Init+0x58>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_UART7_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_UART7_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_UART7_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_UART7_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_UART7_Init+0x58>)
 800144c:	f008 fcf8 	bl	8009e40 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001456:	f000 f8b7 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20008890 	.word	0x20008890
 8001464:	40007800 	.word	0x40007800

08001468 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_DMA_Init+0x48>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <MX_DMA_Init+0x48>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_DMA_Init+0x48>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	203b      	movs	r0, #59	; 0x3b
 800148c:	f003 f956 	bl	800473c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001490:	203b      	movs	r0, #59	; 0x3b
 8001492:	f003 f96f 	bl	8004774 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2045      	movs	r0, #69	; 0x45
 800149c:	f003 f94e 	bl	800473c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014a0:	2045      	movs	r0, #69	; 0x45
 80014a2:	f003 f967 	bl	8004774 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_GPIO_Init+0xd4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_GPIO_Init+0xd4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_GPIO_Init+0xd4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2108      	movs	r1, #8
 800155e:	480b      	ldr	r0, [pc, #44]	; (800158c <MX_GPIO_Init+0xd8>)
 8001560:	f003 fe64 	bl	800522c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001564:	2308      	movs	r3, #8
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xd8>)
 800157c:	f003 fcac 	bl	8004ed8 <HAL_GPIO_Init>

}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800

08001590 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001598:	f014 f928 	bl	80157ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f010 fa4d 	bl	8011a3c <osDelay>
 80015a2:	e7fb      	b.n	800159c <StartDefaultTask+0xc>

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015b6:	f002 ffc7 	bl	8004548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010000 	.word	0x40010000

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <eye>:
#include "math_utils.h"


void eye(int dim, float A[dim][dim]) {
 80015d6:	b490      	push	{r4, r7}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	1e43      	subs	r3, r0, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4603      	mov	r3, r0
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f04f 0400 	mov.w	r4, #0
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015fc:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e02b      	b.n	800165c <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e021      	b.n	800164e <eye+0x78>
            if (i == j){
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	429a      	cmp	r2, r3
 8001610:	d10d      	bne.n	800162e <eye+0x58>
				A[i][j] = 1;
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fb03 f302 	mul.w	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	441a      	add	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e00c      	b.n	8001648 <eye+0x72>
			} else {
				A[i][j] = 0;
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	fb03 f302 	mul.w	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	441a      	add	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbd9      	blt.n	800160a <eye+0x34>
	for(int i = 0; i < dim; i++){
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	3301      	adds	r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbcf      	blt.n	8001604 <eye+0x2e>
			}
        }
    }
}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bc90      	pop	{r4, r7}
 800166c:	4770      	bx	lr

0800166e <transpose>:

void transpose(int n, int m, float A[n][m], float A_T[m][n]) {
 800166e:	b4b0      	push	{r4, r5, r7}
 8001670:	b089      	sub	sp, #36	; 0x24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	68b8      	ldr	r0, [r7, #8]
 800167e:	1e43      	subs	r3, r0, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0154      	lsls	r4, r2, #5
 8001694:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001698:	014b      	lsls	r3, r1, #5
 800169a:	68fd      	ldr	r5, [r7, #12]
 800169c:	1e6b      	subs	r3, r5, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	462b      	mov	r3, r5
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	0154      	lsls	r4, r2, #5
 80016b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016b6:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < n; i++){
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e022      	b.n	8001704 <transpose+0x96>
		for(int j = 0; j < m; j++){
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e018      	b.n	80016f6 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80016c4:	4602      	mov	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	fb03 f302 	mul.w	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	441a      	add	r2, r3
 80016d2:	4629      	mov	r1, r5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	fb03 f301 	mul.w	r3, r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	4419      	add	r1, r3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < m; j++){
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbe2      	blt.n	80016c4 <transpose+0x56>
	for(int i = 0; i < n; i++){
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	3301      	adds	r3, #1
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbd8      	blt.n	80016be <transpose+0x50>
		}
	}
}
 800170c:	bf00      	nop
 800170e:	3724      	adds	r7, #36	; 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	bcb0      	pop	{r4, r5, r7}
 8001714:	4770      	bx	lr

08001716 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8001716:	b480      	push	{r7}
 8001718:	b087      	sub	sp, #28
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e016      	b.n	8001758 <vecadd+0x42>
		c[i] = a[i] + b[i];
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4413      	add	r3, r2
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbe4      	blt.n	800172a <vecadd+0x14>
	}
}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e016      	b.n	80017ae <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbe4      	blt.n	8001780 <vecsub+0x14>
	}
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <matadd>:

void matadd(int n, int m, float A[n][m], float B[n][m], float C[n][m]) {
 80017c2:	b4f0      	push	{r4, r5, r6, r7}
 80017c4:	b08a      	sub	sp, #40	; 0x28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	1e43      	subs	r3, r0, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	0154      	lsls	r4, r2, #5
 80017e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017ec:	014b      	lsls	r3, r1, #5
 80017ee:	68bd      	ldr	r5, [r7, #8]
 80017f0:	1e6b      	subs	r3, r5, #1
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	462b      	mov	r3, r5
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f04f 0400 	mov.w	r4, #0
 8001804:	0154      	lsls	r4, r2, #5
 8001806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800180a:	014b      	lsls	r3, r1, #5
 800180c:	68be      	ldr	r6, [r7, #8]
 800180e:	1e73      	subs	r3, r6, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4633      	mov	r3, r6
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	0154      	lsls	r4, r2, #5
 8001824:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001828:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < n; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e032      	b.n	8001896 <matadd+0xd4>
        for(int j = 0; j < m; j++){
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
 8001834:	e028      	b.n	8001888 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001836:	4602      	mov	r2, r0
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	fb03 f302 	mul.w	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	441a      	add	r2, r3
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	462a      	mov	r2, r5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	fb03 f302 	mul.w	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	441a      	add	r2, r3
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	4632      	mov	r2, r6
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	fb03 f302 	mul.w	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001872:	441a      	add	r2, r3
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	3301      	adds	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbd2      	blt.n	8001836 <matadd+0x74>
	for(int i = 0; i < n; i++){
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbc8      	blt.n	8001830 <matadd+0x6e>
        }
    }
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bcf0      	pop	{r4, r5, r6, r7}
 80018a6:	4770      	bx	lr

080018a8 <matsub>:

void matsub(int n, int m, float A[n][m], float B[n][m], float C[n][m]) {
 80018a8:	b4f0      	push	{r4, r5, r6, r7}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	1e43      	subs	r3, r0, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	4603      	mov	r3, r0
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f04f 0400 	mov.w	r4, #0
 80018cc:	0154      	lsls	r4, r2, #5
 80018ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018d2:	014b      	lsls	r3, r1, #5
 80018d4:	68bd      	ldr	r5, [r7, #8]
 80018d6:	1e6b      	subs	r3, r5, #1
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	462b      	mov	r3, r5
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	0154      	lsls	r4, r2, #5
 80018ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018f0:	014b      	lsls	r3, r1, #5
 80018f2:	68be      	ldr	r6, [r7, #8]
 80018f4:	1e73      	subs	r3, r6, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	4633      	mov	r3, r6
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	0154      	lsls	r4, r2, #5
 800190a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < n; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e032      	b.n	800197c <matsub+0xd4>
        for(int j = 0; j < m; j++){
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	e028      	b.n	800196e <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 800191c:	4602      	mov	r2, r0
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fb03 f302 	mul.w	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	441a      	add	r2, r3
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	462a      	mov	r2, r5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fb03 f302 	mul.w	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	441a      	add	r2, r3
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	4632      	mov	r2, r6
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fb03 f302 	mul.w	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001958:	441a      	add	r2, r3
 800195a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	3301      	adds	r3, #1
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	6a3a      	ldr	r2, [r7, #32]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbd2      	blt.n	800191c <matsub+0x74>
	for(int i = 0; i < n; i++){
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbc8      	blt.n	8001916 <matsub+0x6e>
        }
    }
}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bcf0      	pop	{r4, r5, r6, r7}
 800198c:	4770      	bx	lr

0800198e <matmul>:

void matmul(int n, int m, int o, float A[n][m], float B[m][o], float C[n][o], bool reset) {
 800198e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001990:	b08d      	sub	sp, #52	; 0x34
 8001992:	af00      	add	r7, sp, #0
 8001994:	6178      	str	r0, [r7, #20]
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	60fa      	str	r2, [r7, #12]
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	693e      	ldr	r6, [r7, #16]
 800199e:	1e73      	subs	r3, r6, #1
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	4633      	mov	r3, r6
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	0154      	lsls	r4, r2, #5
 80019b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b8:	014b      	lsls	r3, r1, #5
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	3b01      	subs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	4613      	mov	r3, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	0154      	lsls	r4, r2, #5
 80019d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	68fd      	ldr	r5, [r7, #12]
 80019de:	1e6b      	subs	r3, r5, #1
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	462b      	mov	r3, r5
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f04f 0400 	mov.w	r4, #0
 80019f2:	0154      	lsls	r4, r2, #5
 80019f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019f8:	014b      	lsls	r3, r1, #5
	if (reset) {
 80019fa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <matmul+0x88>
		memset(C, 0, n*o*sizeof(C[0][0]));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a12:	f014 fc98 	bl	8016346 <memset>
	}
	for(int i = 0; i < n; i++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e04a      	b.n	8001ab2 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a20:	e040      	b.n	8001aa4 <matmul+0x116>
            for(int k = 0; k < m; k++){
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a26:	e036      	b.n	8001a96 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001a28:	4632      	mov	r2, r6
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	fb03 f302 	mul.w	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	441a      	add	r2, r3
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a44:	fb03 f302 	mul.w	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a4c:	441a      	add	r2, r3
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	462a      	mov	r2, r5
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fb03 f302 	mul.w	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a68:	441a      	add	r2, r3
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	462a      	mov	r2, r5
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	fb03 f302 	mul.w	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a80:	441a      	add	r2, r3
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < m; k++){
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a92:	3301      	adds	r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbc4      	blt.n	8001a28 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbba      	blt.n	8001a22 <matmul+0x94>
	for(int i = 0; i < n; i++){
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3301      	adds	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbb0      	blt.n	8001a1c <matmul+0x8e>
            }
        }
    }
}
 8001aba:	bf00      	nop
 8001abc:	3734      	adds	r7, #52	; 0x34
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac2 <matvecprod>:

void matvecprod(int n, int m, float A[n][m], float b[m], float c[n], bool reset) {
 8001ac2:	b5b0      	push	{r4, r5, r7, lr}
 8001ac4:	b088      	sub	sp, #32
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	68bd      	ldr	r5, [r7, #8]
 8001ad2:	1e6b      	subs	r3, r5, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f04f 0400 	mov.w	r4, #0
 8001ae6:	0154      	lsls	r4, r2, #5
 8001ae8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aec:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001aee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <matvecprod+0x42>
		memset(c, 0, n*sizeof(c[0]));
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	461a      	mov	r2, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b00:	f014 fc21 	bl	8016346 <memset>
	}
	for(int i = 0; i < n; i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	e02e      	b.n	8001b68 <matvecprod+0xa6>
        for(int j = 0; j < m; j++){
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e024      	b.n	8001b5a <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001b10:	462a      	mov	r2, r5
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	fb03 f302 	mul.w	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	4413      	add	r3, r2
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	4413      	add	r3, r2
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3301      	adds	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dbd6      	blt.n	8001b10 <matvecprod+0x4e>
	for(int i = 0; i < n; i++){
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbcc      	blt.n	8001b0a <matvecprod+0x48>
        }
    }
}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}

08001b78 <pinv>:

void pinv(int dim, float lambda, float Matrix[dim][dim], float Inverse[dim][dim]){
 8001b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b7c:	b098      	sub	sp, #96	; 0x60
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6178      	str	r0, [r7, #20]
 8001b82:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b86:	60f9      	str	r1, [r7, #12]
 8001b88:	60ba      	str	r2, [r7, #8]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	603a      	str	r2, [r7, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	3b01      	subs	r3, #1
 8001b92:	657b      	str	r3, [r7, #84]	; 0x54
 8001b94:	4613      	mov	r3, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f04f 0400 	mov.w	r4, #0
 8001ba4:	0154      	lsls	r4, r2, #5
 8001ba6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001baa:	014b      	lsls	r3, r1, #5
 8001bac:	697e      	ldr	r6, [r7, #20]
 8001bae:	1e73      	subs	r3, r6, #1
 8001bb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bb2:	4633      	mov	r3, r6
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	f04f 0400 	mov.w	r4, #0
 8001bc2:	0154      	lsls	r4, r2, #5
 8001bc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bc8:	014b      	lsls	r3, r1, #5
 8001bca:	466b      	mov	r3, sp
 8001bcc:	469a      	mov	sl, r3

	/* Moore Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[dim][dim];
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	697d      	ldr	r5, [r7, #20]
 8001bd2:	1e43      	subs	r3, r0, #1
 8001bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f04f 0400 	mov.w	r4, #0
 8001be6:	0154      	lsls	r4, r2, #5
 8001be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bec:	014b      	lsls	r3, r1, #5
 8001bee:	4603      	mov	r3, r0
 8001bf0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001bf4:	1e6b      	subs	r3, r5, #1
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	462b      	mov	r3, r5
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	fb03 fe02 	mul.w	lr, r3, r2
 8001c0a:	fb01 fc04 	mul.w	ip, r1, r4
 8001c0e:	44f4      	add	ip, lr
 8001c10:	fba1 3403 	umull	r3, r4, r1, r3
 8001c14:	eb0c 0204 	add.w	r2, ip, r4
 8001c18:	4614      	mov	r4, r2
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	0162      	lsls	r2, r4, #5
 8001c24:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	462b      	mov	r3, r5
 8001c34:	f04f 0400 	mov.w	r4, #0
 8001c38:	fb03 fe02 	mul.w	lr, r3, r2
 8001c3c:	fb01 fc04 	mul.w	ip, r1, r4
 8001c40:	44f4      	add	ip, lr
 8001c42:	fba1 3403 	umull	r3, r4, r1, r3
 8001c46:	eb0c 0204 	add.w	r2, ip, r4
 8001c4a:	4614      	mov	r4, r2
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	0162      	lsls	r2, r4, #5
 8001c56:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001c5a:	0159      	lsls	r1, r3, #5
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	462a      	mov	r2, r5
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3303      	adds	r3, #3
 8001c68:	3307      	adds	r3, #7
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c72:	466b      	mov	r3, sp
 8001c74:	3303      	adds	r3, #3
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
	memset(Matrix_T, 0, dim*dim);
 8001c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f014 fb5c 	bl	8016346 <memset>
	float Matrix_to_inv[dim][dim];
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	697c      	ldr	r4, [r7, #20]
 8001c92:	607c      	str	r4, [r7, #4]
 8001c94:	1e43      	subs	r3, r0, #1
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	0154      	lsls	r4, r2, #5
 8001caa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cae:	014b      	lsls	r3, r1, #5
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	009d      	lsls	r5, r3, #2
 8001cb4:	687c      	ldr	r4, [r7, #4]
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	607c      	str	r4, [r7, #4]
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	fb03 fe02 	mul.w	lr, r3, r2
 8001cd0:	fb01 fc04 	mul.w	ip, r1, r4
 8001cd4:	44f4      	add	ip, lr
 8001cd6:	fba1 3403 	umull	r3, r4, r1, r3
 8001cda:	eb0c 0204 	add.w	r2, ip, r4
 8001cde:	4614      	mov	r4, r2
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	0162      	lsls	r2, r4, #5
 8001cea:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	fb03 fe02 	mul.w	lr, r3, r2
 8001d02:	fb01 fc04 	mul.w	ip, r1, r4
 8001d06:	44f4      	add	ip, lr
 8001d08:	fba1 3403 	umull	r3, r4, r1, r3
 8001d0c:	eb0c 0204 	add.w	r2, ip, r4
 8001d10:	4614      	mov	r4, r2
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	0162      	lsls	r2, r4, #5
 8001d1c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001d20:	0159      	lsls	r1, r3, #5
 8001d22:	4603      	mov	r3, r0
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	3307      	adds	r3, #7
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	ebad 0d03 	sub.w	sp, sp, r3
 8001d38:	466b      	mov	r3, sp
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
	memset(Matrix_to_inv, 0, dim*dim);
 8001d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f014 faf9 	bl	8016346 <memset>
	float First_Inverse[dim][dim];
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	697c      	ldr	r4, [r7, #20]
 8001d58:	607c      	str	r4, [r7, #4]
 8001d5a:	1e43      	subs	r3, r0, #1
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	0154      	lsls	r4, r2, #5
 8001d70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d74:	014b      	lsls	r3, r1, #5
 8001d76:	4603      	mov	r3, r0
 8001d78:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001d7c:	687c      	ldr	r4, [r7, #4]
 8001d7e:	4623      	mov	r3, r4
 8001d80:	3b01      	subs	r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	607c      	str	r4, [r7, #4]
 8001d8e:	4623      	mov	r3, r4
 8001d90:	f04f 0400 	mov.w	r4, #0
 8001d94:	fb03 fe02 	mul.w	lr, r3, r2
 8001d98:	fb01 fc04 	mul.w	ip, r1, r4
 8001d9c:	44f4      	add	ip, lr
 8001d9e:	fba1 3403 	umull	r3, r4, r1, r3
 8001da2:	eb0c 0204 	add.w	r2, ip, r4
 8001da6:	4614      	mov	r4, r2
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	0162      	lsls	r2, r4, #5
 8001db2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001db6:	0159      	lsls	r1, r3, #5
 8001db8:	4603      	mov	r3, r0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f04f 0400 	mov.w	r4, #0
 8001dc6:	fb03 fe02 	mul.w	lr, r3, r2
 8001dca:	fb01 fc04 	mul.w	ip, r1, r4
 8001dce:	44f4      	add	ip, lr
 8001dd0:	fba1 3403 	umull	r3, r4, r1, r3
 8001dd4:	eb0c 0204 	add.w	r2, ip, r4
 8001dd8:	4614      	mov	r4, r2
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	0162      	lsls	r2, r4, #5
 8001de4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001de8:	0159      	lsls	r1, r3, #5
 8001dea:	4603      	mov	r3, r0
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3303      	adds	r3, #3
 8001df6:	3307      	adds	r3, #7
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	ebad 0d03 	sub.w	sp, sp, r3
 8001e00:	466b      	mov	r3, sp
 8001e02:	3303      	adds	r3, #3
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	61fb      	str	r3, [r7, #28]
	memset(First_Inverse, 0, dim*dim);
 8001e0a:	69f8      	ldr	r0, [r7, #28]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f014 fa95 	bl	8016346 <memset>

	transpose(dim, dim, Matrix, Matrix_T);
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6979      	ldr	r1, [r7, #20]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff fc23 	bl	800166e <transpose>

	/* Calculate the Matrix to be inversed A*A_T*lambda^2*eye(size(A))*/
	for(int j = 0; j < dim; j++){
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2c:	e06a      	b.n	8001f04 <pinv+0x38c>
		for(int i = 0; i < dim; i++){
 8001e2e:	2300      	movs	r3, #0
 8001e30:	643b      	str	r3, [r7, #64]	; 0x40
 8001e32:	e060      	b.n	8001ef6 <pinv+0x37e>
			for(int k = 0; k < dim; k++){
 8001e34:	2300      	movs	r3, #0
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
 8001e38:	e056      	b.n	8001ee8 <pinv+0x370>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	fb03 f302 	mul.w	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	441a      	add	r2, r3
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e5a:	fb01 f103 	mul.w	r1, r1, r3
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e60:	440b      	add	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6e:	08ab      	lsrs	r3, r5, #2
 8001e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e74:	fb01 f103 	mul.w	r1, r1, r3
 8001e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7a:	440b      	add	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	08ab      	lsrs	r3, r5, #2
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e8e:	fb01 f103 	mul.w	r1, r1, r3
 8001e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e94:	440b      	add	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 8001e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11d      	bne.n	8001ee2 <pinv+0x36a>
					Matrix_to_inv[j][i] += lambda * lambda;
 8001ea6:	08ab      	lsrs	r3, r5, #2
 8001ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001eac:	fb01 f103 	mul.w	r1, r1, r3
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	440b      	add	r3, r1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	ed93 7a00 	vldr	s14, [r3]
 8001ebc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec8:	08ab      	lsrs	r3, r5, #2
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ed2:	fb01 f103 	mul.w	r1, r1, r3
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed8:	440b      	add	r3, r1
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < dim; k++){
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dba4      	blt.n	8001e3a <pinv+0x2c2>
		for(int i = 0; i < dim; i++){
 8001ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	db9a      	blt.n	8001e34 <pinv+0x2bc>
	for(int j = 0; j < dim; j++){
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	3301      	adds	r3, #1
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	db90      	blt.n	8001e2e <pinv+0x2b6>
			}
		}
	}

	/* Calculate inverse */
	cofactor(dim, Matrix_to_inv, First_Inverse, dim);
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	6979      	ldr	r1, [r7, #20]
 8001f12:	ee07 1a90 	vmov	s15, r1
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f000 f991 	bl	8002248 <cofactor>
	for(int j = 0; j < dim; j++){
 8001f26:	2300      	movs	r3, #0
 8001f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f2a:	e04a      	b.n	8001fc2 <pinv+0x44a>
		for(int i = 0; i < dim; i++){
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f30:	e040      	b.n	8001fb4 <pinv+0x43c>
			for(int k = 0; k < dim; k++){
 8001f32:	2300      	movs	r3, #0
 8001f34:	653b      	str	r3, [r7, #80]	; 0x50
 8001f36:	e036      	b.n	8001fa6 <pinv+0x42e>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 8001f38:	4632      	mov	r2, r6
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3c:	fb03 f302 	mul.w	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	441a      	add	r2, r3
 8001f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f58:	fb01 f103 	mul.w	r1, r1, r3
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5e:	440b      	add	r3, r1
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	edd3 6a00 	vldr	s13, [r3]
 8001f68:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f70:	fb01 f103 	mul.w	r1, r1, r3
 8001f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f76:	440b      	add	r3, r1
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	4632      	mov	r2, r6
 8001f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f88:	fb03 f302 	mul.w	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	441a      	add	r2, r3
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < dim; k++){
 8001fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	653b      	str	r3, [r7, #80]	; 0x50
 8001fa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbc4      	blt.n	8001f38 <pinv+0x3c0>
		for(int i = 0; i < dim; i++){
 8001fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbba      	blt.n	8001f32 <pinv+0x3ba>
	for(int j = 0; j < dim; j++){
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbb0      	blt.n	8001f2c <pinv+0x3b4>
 8001fca:	46d5      	mov	sp, sl
			}
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3760      	adds	r7, #96	; 0x60
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001fd6 <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(int dim, float a[dim][dim], float size)
{
 8001fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fda:	ed2d 8b02 	vpush	{d8}
 8001fde:	b091      	sub	sp, #68	; 0x44
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	ed87 0a01 	vstr	s0, [r7, #4]
float determinant(int dim, float a[dim][dim], float size)
 8001fea:	68fe      	ldr	r6, [r7, #12]
 8001fec:	1e73      	subs	r3, r6, #1
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	4633      	mov	r3, r6
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	0154      	lsls	r4, r2, #5
 8002002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002006:	014b      	lsls	r3, r1, #5
{
 8002008:	466b      	mov	r3, sp
 800200a:	4699      	mov	r9, r3
	float s = 1, det = 0, b[dim][dim];
 800200c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	68fd      	ldr	r5, [r7, #12]
 800201c:	1e43      	subs	r3, r0, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	0154      	lsls	r4, r2, #5
 8002032:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	4603      	mov	r3, r0
 800203a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800203e:	1e6b      	subs	r3, r5, #1
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	462b      	mov	r3, r5
 800204c:	f04f 0400 	mov.w	r4, #0
 8002050:	fb03 fe02 	mul.w	lr, r3, r2
 8002054:	fb01 fc04 	mul.w	ip, r1, r4
 8002058:	44f4      	add	ip, lr
 800205a:	fba1 3403 	umull	r3, r4, r1, r3
 800205e:	eb0c 0204 	add.w	r2, ip, r4
 8002062:	4614      	mov	r4, r2
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	0162      	lsls	r2, r4, #5
 800206e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002072:	0159      	lsls	r1, r3, #5
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	462b      	mov	r3, r5
 800207e:	f04f 0400 	mov.w	r4, #0
 8002082:	fb03 fe02 	mul.w	lr, r3, r2
 8002086:	fb01 fc04 	mul.w	ip, r1, r4
 800208a:	44f4      	add	ip, lr
 800208c:	fba1 3403 	umull	r3, r4, r1, r3
 8002090:	eb0c 0204 	add.w	r2, ip, r4
 8002094:	4614      	mov	r4, r2
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	0162      	lsls	r2, r4, #5
 80020a0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80020a4:	0159      	lsls	r1, r3, #5
 80020a6:	4603      	mov	r3, r0
 80020a8:	462a      	mov	r2, r5
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	3303      	adds	r3, #3
 80020b2:	3307      	adds	r3, #7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	ebad 0d03 	sub.w	sp, sp, r3
 80020bc:	466b      	mov	r3, sp
 80020be:	3303      	adds	r3, #3
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	617b      	str	r3, [r7, #20]
	int i, j, m, n, c;
	if (size == 1)
 80020c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020ce:	eef4 7a47 	vcmp.f32	s15, s14
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d102      	bne.n	80020de <determinant+0x108>
	{
		return (a[0][0]);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e0a8      	b.n	8002230 <determinant+0x25a>
	}
	else
	{
		det = 0;
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (c = 0; c < size; c++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e8:	e094      	b.n	8002214 <determinant+0x23e>
		{
			m = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
			for (i = 0;i < size; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f6:	e057      	b.n	80021a8 <determinant+0x1d2>
			{
				for (j = 0 ;j < size; j++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
 80020fc:	e045      	b.n	800218a <determinant+0x1b4>
				{
					b[i][j] = 0;
 80020fe:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002106:	fb01 f103 	mul.w	r1, r1, r3
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	440b      	add	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d032      	beq.n	8002184 <determinant+0x1ae>
 800211e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002122:	429a      	cmp	r2, r3
 8002124:	d02e      	beq.n	8002184 <determinant+0x1ae>
					{
						b[m][n] = a[i][j];
 8002126:	4632      	mov	r2, r6
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	fb03 f302 	mul.w	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	18d1      	adds	r1, r2, r3
 8002134:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	440a      	add	r2, r1
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002144:	fb00 f003 	mul.w	r0, r0, r3
 8002148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214a:	4403      	add	r3, r0
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]
						if (n < (size - 2))
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002160:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	d503      	bpl.n	800217a <determinant+0x1a4>
							n++;
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	3301      	adds	r3, #1
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	e004      	b.n	8002184 <determinant+0x1ae>
						else
						{
							n = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
							m++;
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	3301      	adds	r3, #1
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	3301      	adds	r3, #1
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	ed97 7a01 	vldr	s14, [r7, #4]
 8002198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	dcad      	bgt.n	80020fe <determinant+0x128>
			for (i = 0;i < size; i++)
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	3301      	adds	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80021b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	dc9b      	bgt.n	80020f8 <determinant+0x122>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(dim, b, size - 1));
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	ed93 8a00 	vldr	s16, [r3]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021da:	eeb0 0a67 	vmov.f32	s0, s15
 80021de:	4619      	mov	r1, r3
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff fef8 	bl	8001fd6 <determinant>
 80021e6:	eef0 7a40 	vmov.f32	s15, s0
 80021ea:	ee28 7a27 	vmul.f32	s14, s16, s15
 80021ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			s = -1 * s;
 8002202:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002206:	eef1 7a67 	vneg.f32	s15, s15
 800220a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (c = 0; c < size; c++)
 800220e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002210:	3301      	adds	r3, #1
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	f73f af5e 	bgt.w	80020ea <determinant+0x114>
		}
	}

	return (det);
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	46cd      	mov	sp, r9
 8002232:	ee07 3a90 	vmov	s15, r3
}
 8002236:	eeb0 0a67 	vmov.f32	s0, s15
 800223a:	3744      	adds	r7, #68	; 0x44
 800223c:	46bd      	mov	sp, r7
 800223e:	ecbd 8b02 	vpop	{d8}
 8002242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002248 <cofactor>:

void cofactor(int dim, float num[dim][dim], float inverse[dim][dim], float size)
{
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	ed2d 8b02 	vpush	{d8}
 8002250:	b092      	sub	sp, #72	; 0x48
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	ed87 0a00 	vstr	s0, [r7]
void cofactor(int dim, float num[dim][dim], float inverse[dim][dim], float size)
 800225e:	68fe      	ldr	r6, [r7, #12]
 8002260:	1e73      	subs	r3, r6, #1
 8002262:	643b      	str	r3, [r7, #64]	; 0x40
 8002264:	4633      	mov	r3, r6
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f04f 0400 	mov.w	r4, #0
 8002274:	0154      	lsls	r4, r2, #5
 8002276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227a:	014b      	lsls	r3, r1, #5
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	647a      	str	r2, [r7, #68]	; 0x44
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	0154      	lsls	r4, r2, #5
 8002292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002296:	014b      	lsls	r3, r1, #5
{
 8002298:	466b      	mov	r3, sp
 800229a:	469a      	mov	sl, r3
	float b[dim][dim], fac[dim][dim];
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	68fd      	ldr	r5, [r7, #12]
 80022a0:	1e43      	subs	r3, r0, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f04f 0400 	mov.w	r4, #0
 80022b4:	0154      	lsls	r4, r2, #5
 80022b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022ba:	014b      	lsls	r3, r1, #5
 80022bc:	4603      	mov	r3, r0
 80022be:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80022c2:	1e6b      	subs	r3, r5, #1
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	4603      	mov	r3, r0
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	462b      	mov	r3, r5
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	fb03 fe02 	mul.w	lr, r3, r2
 80022d8:	fb01 fc04 	mul.w	ip, r1, r4
 80022dc:	44f4      	add	ip, lr
 80022de:	fba1 3403 	umull	r3, r4, r1, r3
 80022e2:	eb0c 0204 	add.w	r2, ip, r4
 80022e6:	4614      	mov	r4, r2
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	0162      	lsls	r2, r4, #5
 80022f2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022f6:	0159      	lsls	r1, r3, #5
 80022f8:	4603      	mov	r3, r0
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	462b      	mov	r3, r5
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	fb03 fe02 	mul.w	lr, r3, r2
 800230a:	fb01 fc04 	mul.w	ip, r1, r4
 800230e:	44f4      	add	ip, lr
 8002310:	fba1 3403 	umull	r3, r4, r1, r3
 8002314:	eb0c 0204 	add.w	r2, ip, r4
 8002318:	4614      	mov	r4, r2
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	0162      	lsls	r2, r4, #5
 8002324:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002328:	0159      	lsls	r1, r3, #5
 800232a:	4603      	mov	r3, r0
 800232c:	462a      	mov	r2, r5
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3303      	adds	r3, #3
 8002336:	3307      	adds	r3, #7
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	ebad 0d03 	sub.w	sp, sp, r3
 8002340:	466b      	mov	r3, sp
 8002342:	3303      	adds	r3, #3
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	68fd      	ldr	r5, [r7, #12]
 800234e:	1e43      	subs	r3, r0, #1
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	4603      	mov	r3, r0
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	f04f 0400 	mov.w	r4, #0
 8002362:	0154      	lsls	r4, r2, #5
 8002364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002368:	014b      	lsls	r3, r1, #5
 800236a:	4603      	mov	r3, r0
 800236c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8002370:	1e6b      	subs	r3, r5, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	462b      	mov	r3, r5
 800237e:	f04f 0400 	mov.w	r4, #0
 8002382:	fb03 fe02 	mul.w	lr, r3, r2
 8002386:	fb01 fc04 	mul.w	ip, r1, r4
 800238a:	44f4      	add	ip, lr
 800238c:	fba1 3403 	umull	r3, r4, r1, r3
 8002390:	eb0c 0204 	add.w	r2, ip, r4
 8002394:	4614      	mov	r4, r2
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	0162      	lsls	r2, r4, #5
 80023a0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023a4:	0159      	lsls	r1, r3, #5
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	462b      	mov	r3, r5
 80023b0:	f04f 0400 	mov.w	r4, #0
 80023b4:	fb03 fe02 	mul.w	lr, r3, r2
 80023b8:	fb01 fc04 	mul.w	ip, r1, r4
 80023bc:	44f4      	add	ip, lr
 80023be:	fba1 3403 	umull	r3, r4, r1, r3
 80023c2:	eb0c 0204 	add.w	r2, ip, r4
 80023c6:	4614      	mov	r4, r2
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	0162      	lsls	r2, r4, #5
 80023d2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	4603      	mov	r3, r0
 80023da:	462a      	mov	r2, r5
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3303      	adds	r3, #3
 80023e4:	3307      	adds	r3, #7
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	ebad 0d03 	sub.w	sp, sp, r3
 80023ee:	466b      	mov	r3, sp
 80023f0:	3303      	adds	r3, #3
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fc:	e0b3      	b.n	8002566 <cofactor+0x31e>
	{
		for (p = 0;p < size; p++)
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 8002402:	e0a0      	b.n	8002546 <cofactor+0x2fe>
		{
			m = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
			n = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
			for (i = 0;i < size; i++)
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002410:	e04b      	b.n	80024aa <cofactor+0x262>
			{
				for (j = 0;j < size; j++)
 8002412:	2300      	movs	r3, #0
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	e039      	b.n	800248c <cofactor+0x244>
				{
					if (i != q && j != p)
 8002418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	429a      	cmp	r2, r3
 800241e:	d032      	beq.n	8002486 <cofactor+0x23e>
 8002420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	429a      	cmp	r2, r3
 8002426:	d02e      	beq.n	8002486 <cofactor+0x23e>
					{
						b[m][n] = num[i][j];
 8002428:	4632      	mov	r2, r6
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	fb03 f302 	mul.w	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	18d1      	adds	r1, r2, r3
 8002436:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800243a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	440a      	add	r2, r1
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	69f9      	ldr	r1, [r7, #28]
 8002444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002446:	fb00 f003 	mul.w	r0, r0, r3
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	4403      	add	r3, r0
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	601a      	str	r2, [r3, #0]
						if (n < (size - 2))
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245e:	edd7 7a00 	vldr	s15, [r7]
 8002462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002466:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	d503      	bpl.n	800247c <cofactor+0x234>
							n++;
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	3301      	adds	r3, #1
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
 800247a:	e004      	b.n	8002486 <cofactor+0x23e>
						else
						{
							n = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
							m++;
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	3301      	adds	r3, #1
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
				for (j = 0;j < size; j++)
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	3301      	adds	r3, #1
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002496:	ed97 7a00 	vldr	s14, [r7]
 800249a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a2:	dcb9      	bgt.n	8002418 <cofactor+0x1d0>
			for (i = 0;i < size; i++)
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	3301      	adds	r3, #1
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b4:	ed97 7a00 	vldr	s14, [r7]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	dca7      	bgt.n	8002412 <cofactor+0x1ca>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(dim, b, size - 1);
 80024c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	4413      	add	r3, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f84b 	bl	8000564 <__aeabi_i2d>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	ec44 3b11 	vmov	d1, r3, r4
 80024d6:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80025a0 <cofactor+0x358>
 80024da:	f014 fc01 	bl	8016ce0 <pow>
 80024de:	eeb0 8a40 	vmov.f32	s16, s0
 80024e2:	eef0 8a60 	vmov.f32	s17, s1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	edd7 7a00 	vldr	s15, [r7]
 80024ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff fd6b 	bl	8001fd6 <determinant>
 8002500:	ee10 3a10 	vmov	r3, s0
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f83f 	bl	8000588 <__aeabi_f2d>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	461a      	mov	r2, r3
 8002510:	4623      	mov	r3, r4
 8002512:	ec51 0b18 	vmov	r0, r1, d8
 8002516:	f7fe f88f 	bl	8000638 <__aeabi_dmul>
 800251a:	4603      	mov	r3, r0
 800251c:	460c      	mov	r4, r1
 800251e:	461a      	mov	r2, r3
 8002520:	4623      	mov	r3, r4
 8002522:	ea4f 0499 	mov.w	r4, r9, lsr #2
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe fb55 	bl	8000bd8 <__aeabi_d2f>
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	fb03 f104 	mul.w	r1, r3, r4
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	440b      	add	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	6018      	str	r0, [r3, #0]
		for (p = 0;p < size; p++)
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	3301      	adds	r3, #1
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002550:	ed97 7a00 	vldr	s14, [r7]
 8002554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	f73f af52 	bgt.w	8002404 <cofactor+0x1bc>
	for (q = 0;q < size; q++)
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	3301      	adds	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002570:	ed97 7a00 	vldr	s14, [r7]
 8002574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	f73f af3f 	bgt.w	80023fe <cofactor+0x1b6>
		}
	}
	pinv_transpose(dim, inverse, num, fac, size);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	ed97 0a00 	vldr	s0, [r7]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f80c 	bl	80025a8 <pinv_transpose>
 8002590:	46d5      	mov	sp, sl
}
 8002592:	bf00      	nop
 8002594:	3748      	adds	r7, #72	; 0x48
 8002596:	46bd      	mov	sp, r7
 8002598:	ecbd 8b02 	vpop	{d8}
 800259c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a0:	00000000 	.word	0x00000000
 80025a4:	bff00000 	.word	0xbff00000

080025a8 <pinv_transpose>:
/*Finding transpose of matrix*/
void pinv_transpose(int dim, float inverse[dim][dim], float num[dim][dim], float fac[dim][dim], float size)
{
 80025a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025ac:	b091      	sub	sp, #68	; 0x44
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6178      	str	r0, [r7, #20]
 80025b2:	6139      	str	r1, [r7, #16]
 80025b4:	60fa      	str	r2, [r7, #12]
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	ed87 0a01 	vstr	s0, [r7, #4]
void pinv_transpose(int dim, float inverse[dim][dim], float num[dim][dim], float fac[dim][dim], float size)
 80025bc:	697e      	ldr	r6, [r7, #20]
 80025be:	1e73      	subs	r3, r6, #1
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c2:	4633      	mov	r3, r6
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f04f 0400 	mov.w	r4, #0
 80025d2:	0154      	lsls	r4, r2, #5
 80025d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025d8:	014b      	lsls	r3, r1, #5
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	0154      	lsls	r4, r2, #5
 80025f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f4:	014b      	lsls	r3, r1, #5
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	603a      	str	r2, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	3b01      	subs	r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002600:	4613      	mov	r3, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	0154      	lsls	r4, r2, #5
 8002612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002616:	014b      	lsls	r3, r1, #5
{
 8002618:	466b      	mov	r3, sp
 800261a:	4699      	mov	r9, r3
	int i, j;
	float b[dim][dim], d;
 800261c:	6978      	ldr	r0, [r7, #20]
 800261e:	697d      	ldr	r5, [r7, #20]
 8002620:	1e43      	subs	r3, r0, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	4603      	mov	r3, r0
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	0154      	lsls	r4, r2, #5
 8002636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	4603      	mov	r3, r0
 800263e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002642:	1e6b      	subs	r3, r5, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	4603      	mov	r3, r0
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	462b      	mov	r3, r5
 8002650:	f04f 0400 	mov.w	r4, #0
 8002654:	fb03 fe02 	mul.w	lr, r3, r2
 8002658:	fb01 fc04 	mul.w	ip, r1, r4
 800265c:	44f4      	add	ip, lr
 800265e:	fba1 3403 	umull	r3, r4, r1, r3
 8002662:	eb0c 0204 	add.w	r2, ip, r4
 8002666:	4614      	mov	r4, r2
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	0162      	lsls	r2, r4, #5
 8002672:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	4603      	mov	r3, r0
 800267a:	4619      	mov	r1, r3
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	fb03 fe02 	mul.w	lr, r3, r2
 800268a:	fb01 fc04 	mul.w	ip, r1, r4
 800268e:	44f4      	add	ip, lr
 8002690:	fba1 3403 	umull	r3, r4, r1, r3
 8002694:	eb0c 0204 	add.w	r2, ip, r4
 8002698:	4614      	mov	r4, r2
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	0162      	lsls	r2, r4, #5
 80026a4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80026a8:	0159      	lsls	r1, r3, #5
 80026aa:	4603      	mov	r3, r0
 80026ac:	462a      	mov	r2, r5
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3303      	adds	r3, #3
 80026b6:	3307      	adds	r3, #7
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	ebad 0d03 	sub.w	sp, sp, r3
 80026c0:	466b      	mov	r3, sp
 80026c2:	3303      	adds	r3, #3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	623b      	str	r3, [r7, #32]

	for (i = 0;i < size; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
 80026ce:	e02a      	b.n	8002726 <pinv_transpose+0x17e>
	{
		for (j = 0;j < size; j++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
 80026d4:	e018      	b.n	8002708 <pinv_transpose+0x160>
		{
			b[i][j] = fac[j][i];
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	fb03 f302 	mul.w	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	18d1      	adds	r1, r2, r3
 80026e4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80026e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	440a      	add	r2, r1
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f4:	fb00 f003 	mul.w	r0, r0, r3
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	4403      	add	r3, r0
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	601a      	str	r2, [r3, #0]
		for (j = 0;j < size; j++)
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	3301      	adds	r3, #1
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002712:	ed97 7a01 	vldr	s14, [r7, #4]
 8002716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	dcda      	bgt.n	80026d6 <pinv_transpose+0x12e>
	for (i = 0;i < size; i++)
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	3301      	adds	r3, #1
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ed97 7a01 	vldr	s14, [r7, #4]
 8002734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	dcc8      	bgt.n	80026d0 <pinv_transpose+0x128>
		}
	}
	d = determinant(dim, num, size);
 800273e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002742:	68f9      	ldr	r1, [r7, #12]
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f7ff fc46 	bl	8001fd6 <determinant>
 800274a:	ed87 0a07 	vstr	s0, [r7, #28]

	for (i = 0;i < size; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
 8002752:	e030      	b.n	80027b6 <pinv_transpose+0x20e>
	{
		for (j = 0;j < size; j++)
 8002754:	2300      	movs	r3, #0
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
 8002758:	e01e      	b.n	8002798 <pinv_transpose+0x1f0>
		{
			inverse[i][j] = b[i][j] / d;
 800275a:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800275e:	6a3a      	ldr	r2, [r7, #32]
 8002760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002762:	fb01 f103 	mul.w	r1, r1, r3
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	440b      	add	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	edd3 6a00 	vldr	s13, [r3]
 8002772:	4632      	mov	r2, r6
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	fb03 f302 	mul.w	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	441a      	add	r2, r3
 8002780:	ed97 7a07 	vldr	s14, [r7, #28]
 8002784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	3301      	adds	r3, #1
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80027a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dcd4      	bgt.n	800275a <pinv_transpose+0x1b2>
	for (i = 0;i < size; i++)
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	3301      	adds	r3, #1
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80027c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	dcc2      	bgt.n	8002754 <pinv_transpose+0x1ac>
 80027ce:	46cd      	mov	sp, r9
		}
	}
}
 80027d0:	bf00      	nop
 80027d2:	3744      	adds	r7, #68	; 0x44
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_MspInit+0x4c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_MspInit+0x4c>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_MspInit+0x4c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_MspInit+0x4c>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	210f      	movs	r1, #15
 8002816:	f06f 0001 	mvn.w	r0, #1
 800281a:	f001 ff8f 	bl	800473c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_SD_MspInit+0x1b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 80c3 	bne.w	80029d6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 8002856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800285a:	6453      	str	r3, [r2, #68]	; 0x44
 800285c:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002868:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a5d      	ldr	r2, [pc, #372]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002880:	4b58      	ldr	r3, [pc, #352]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b55      	ldr	r3, [pc, #340]	; (80029e4 <HAL_SD_MspInit+0x1b8>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002898:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800289c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028aa:	230c      	movs	r3, #12
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	484c      	ldr	r0, [pc, #304]	; (80029e8 <HAL_SD_MspInit+0x1bc>)
 80028b6:	f002 fb0f 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028ba:	2304      	movs	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028ca:	230c      	movs	r3, #12
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4845      	ldr	r0, [pc, #276]	; (80029ec <HAL_SD_MspInit+0x1c0>)
 80028d6:	f002 faff 	bl	8004ed8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80028da:	4b45      	ldr	r3, [pc, #276]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028dc:	4a45      	ldr	r2, [pc, #276]	; (80029f4 <HAL_SD_MspInit+0x1c8>)
 80028de:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028fc:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 80028fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002902:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800290a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 800291a:	2204      	movs	r2, #4
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002920:	2203      	movs	r2, #3
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002926:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 800292e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002934:	482e      	ldr	r0, [pc, #184]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002936:	f001 ff2b 	bl	8004790 <HAL_DMA_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002940:	f7fe fe42 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_SD_MspInit+0x1c4>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002952:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <HAL_SD_MspInit+0x1d0>)
 8002954:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800295c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 800296c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002970:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002978:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 800297c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002980:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002984:	2220      	movs	r2, #32
 8002986:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002990:	2204      	movs	r2, #4
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 8002996:	2203      	movs	r2, #3
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 800299c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 80029a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80029aa:	4813      	ldr	r0, [pc, #76]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 80029ac:	f001 fef0 	bl	8004790 <HAL_DMA_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80029b6:	f7fe fe07 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_SD_MspInit+0x1cc>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2105      	movs	r1, #5
 80029ca:	2031      	movs	r0, #49	; 0x31
 80029cc:	f001 feb6 	bl	800473c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80029d0:	2031      	movs	r0, #49	; 0x31
 80029d2:	f001 fecf 	bl	8004774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	2000cc54 	.word	0x2000cc54
 80029f4:	40026458 	.word	0x40026458
 80029f8:	20014dd4 	.word	0x20014dd4
 80029fc:	400264a0 	.word	0x400264a0

08002a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a68      	ldr	r2, [pc, #416]	; (8002bc0 <HAL_SPI_MspInit+0x1c0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d131      	bne.n	8002a86 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a67      	ldr	r2, [pc, #412]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002a52:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a64:	2305      	movs	r3, #5
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4856      	ldr	r0, [pc, #344]	; (8002bc8 <HAL_SPI_MspInit+0x1c8>)
 8002a70:	f002 fa32 	bl	8004ed8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2105      	movs	r1, #5
 8002a78:	2023      	movs	r0, #35	; 0x23
 8002a7a:	f001 fe5f 	bl	800473c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a7e:	2023      	movs	r0, #35	; 0x23
 8002a80:	f001 fe78 	bl	8004774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a84:	e097      	b.n	8002bb6 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_SPI_MspInit+0x1cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d131      	bne.n	8002af4 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a90:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ac0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ada:	4619      	mov	r1, r3
 8002adc:	483c      	ldr	r0, [pc, #240]	; (8002bd0 <HAL_SPI_MspInit+0x1d0>)
 8002ade:	f002 f9fb 	bl	8004ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2105      	movs	r1, #5
 8002ae6:	2024      	movs	r0, #36	; 0x24
 8002ae8:	f001 fe28 	bl	800473c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002aec:	2024      	movs	r0, #36	; 0x24
 8002aee:	f001 fe41 	bl	8004774 <HAL_NVIC_EnableIRQ>
}
 8002af2:	e060      	b.n	8002bb6 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <HAL_SPI_MspInit+0x1d4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d15b      	bne.n	8002bb6 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_SPI_MspInit+0x1c4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b46:	2310      	movs	r3, #16
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b56:	2306      	movs	r3, #6
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <HAL_SPI_MspInit+0x1c8>)
 8002b62:	f002 f9b9 	bl	8004ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b66:	2304      	movs	r3, #4
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002b76:	2307      	movs	r3, #7
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4813      	ldr	r0, [pc, #76]	; (8002bd0 <HAL_SPI_MspInit+0x1d0>)
 8002b82:	f002 f9a9 	bl	8004ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002b86:	2318      	movs	r3, #24
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b96:	2306      	movs	r3, #6
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <HAL_SPI_MspInit+0x1d0>)
 8002ba2:	f002 f999 	bl	8004ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2105      	movs	r1, #5
 8002baa:	2033      	movs	r0, #51	; 0x33
 8002bac:	f001 fdc6 	bl	800473c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002bb0:	2033      	movs	r0, #51	; 0x33
 8002bb2:	f001 fddf 	bl	8004774 <HAL_NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3738      	adds	r7, #56	; 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40013000 	.word	0x40013000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40003800 	.word	0x40003800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40003c00 	.word	0x40003c00

08002bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_UART_MspInit+0x7c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d128      	bne.n	8002c4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_UART_MspInit+0x80>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002c2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_UART_MspInit+0x84>)
 8002c48:	f002 f946 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40007800 	.word	0x40007800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002c70:	2200      	movs	r2, #0
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	2019      	movs	r0, #25
 8002c76:	f001 fd61 	bl	800473c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002c7a:	2019      	movs	r0, #25
 8002c7c:	f001 fd7a 	bl	8004774 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_InitTick+0xa0>)
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_InitTick+0xa0>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_InitTick+0xa0>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c98:	f107 0210 	add.w	r2, r7, #16
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f936 	bl	8006f14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002ca8:	f004 f920 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 8002cac:	4603      	mov	r3, r0
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_InitTick+0xa4>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <HAL_InitTick+0xac>)
 8002cc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ce0:	4809      	ldr	r0, [pc, #36]	; (8002d08 <HAL_InitTick+0xa8>)
 8002ce2:	f006 fe48 	bl	8009976 <HAL_TIM_Base_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <HAL_InitTick+0xa8>)
 8002cee:	f006 fe77 	bl	80099e0 <HAL_TIM_Base_Start_IT>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3730      	adds	r7, #48	; 0x30
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	431bde83 	.word	0x431bde83
 8002d08:	20014e3c 	.word	0x20014e3c
 8002d0c:	40010000 	.word	0x40010000

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d4a:	f006 fe73 	bl	8009a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20014e3c 	.word	0x20014e3c

08002d58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <SPI1_IRQHandler+0x10>)
 8002d5e:	f006 f9a1 	bl	80090a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20010cb4 	.word	0x20010cb4

08002d6c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <SPI2_IRQHandler+0x10>)
 8002d72:	f006 f997 	bl	80090a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000882c 	.word	0x2000882c

08002d80 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <SDMMC1_IRQHandler+0x10>)
 8002d86:	f004 ff1f 	bl	8007bc8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20008970 	.word	0x20008970

08002d94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <SPI3_IRQHandler+0x10>)
 8002d9a:	f006 f983 	bl	80090a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000a9f8 	.word	0x2000a9f8

08002da8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <DMA2_Stream3_IRQHandler+0x10>)
 8002dae:	f001 fe1f 	bl	80049f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000cc54 	.word	0x2000cc54

08002dbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <OTG_FS_IRQHandler+0x10>)
 8002dc2:	f002 fb92 	bl	80054ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20016c64 	.word	0x20016c64

08002dd0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <DMA2_Stream6_IRQHandler+0x10>)
 8002dd6:	f001 fe0b 	bl	80049f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20014dd4 	.word	0x20014dd4

08002de4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x50>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x16>
		heap_end = &end;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <_sbrk+0x50>)
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <_sbrk+0x54>)
 8002df8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <_sbrk+0x50>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <_sbrk+0x50>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	466a      	mov	r2, sp
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d907      	bls.n	8002e1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e0e:	f013 fa55 	bl	80162bc <__errno>
 8002e12:	4602      	mov	r2, r0
 8002e14:	230c      	movs	r3, #12
 8002e16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	e006      	b.n	8002e2c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <_sbrk+0x50>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <_sbrk+0x50>)
 8002e28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200002cc 	.word	0x200002cc
 8002e38:	20017070 	.word	0x20017070

08002e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <SystemInit+0x5c>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <SystemInit+0x5c>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <SystemInit+0x60>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <SystemInit+0x60>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <SystemInit+0x60>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <SystemInit+0x60>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <SystemInit+0x60>)
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <SystemInit+0x64>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <SystemInit+0x60>)
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <SystemInit+0x68>)
 8002e72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <SystemInit+0x60>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <SystemInit+0x60>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <SystemInit+0x60>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SystemInit+0x5c>)
 8002e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	fef6ffff 	.word	0xfef6ffff
 8002ea4:	24003010 	.word	0x24003010

08002ea8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	b0b3      	sub	sp, #204	; 0xcc
 8002eac:	af06      	add	r7, sp, #24
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	2296      	movs	r2, #150	; 0x96
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f013 fa3f 	bl	8016346 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	7aba      	ldrb	r2, [r7, #10]
 8002ecc:	f107 0010 	add.w	r0, r7, #16
 8002ed0:	9202      	str	r2, [sp, #8]
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <logSensor+0x138>)
 8002edc:	2196      	movs	r1, #150	; 0x96
 8002ede:	f013 faf3 	bl	80164c8 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8002ee2:	7abb      	ldrb	r3, [r7, #10]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <logSensor+0x46>
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d01d      	beq.n	8002f28 <logSensor+0x80>
 8002eec:	e055      	b.n	8002f9a <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd f989 	bl	8000210 <strlen>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	1898      	adds	r0, r3, r2
 8002f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f16:	6892      	ldr	r2, [r2, #8]
 8002f18:	9201      	str	r2, [sp, #4]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <logSensor+0x13c>)
 8002f20:	2196      	movs	r1, #150	; 0x96
 8002f22:	f013 fad1 	bl	80164c8 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8002f26:	e04e      	b.n	8002fc6 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd f96c 	bl	8000210 <strlen>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8002f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f48:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f52:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f5c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f66:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f70:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f7a:	461e      	mov	r6, r3
 8002f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	9305      	str	r3, [sp, #20]
 8002f84:	9604      	str	r6, [sp, #16]
 8002f86:	9503      	str	r5, [sp, #12]
 8002f88:	9402      	str	r4, [sp, #8]
 8002f8a:	9101      	str	r1, [sp, #4]
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	4663      	mov	r3, ip
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <logSensor+0x140>)
 8002f92:	2196      	movs	r1, #150	; 0x96
 8002f94:	f013 fa98 	bl	80164c8 <sniprintf>
	}
		break;
 8002f98:	e015      	b.n	8002fc6 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd f936 	bl	8000210 <strlen>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f107 0310 	add.w	r3, r7, #16
 8002faa:	4413      	add	r3, r2
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <logSensor+0x144>)
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb4:	6028      	str	r0, [r5, #0]
 8002fb6:	6069      	str	r1, [r5, #4]
 8002fb8:	60aa      	str	r2, [r5, #8]
 8002fba:	60eb      	str	r3, [r5, #12]
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	6128      	str	r0, [r5, #16]
 8002fc0:	7923      	ldrb	r3, [r4, #4]
 8002fc2:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8002fc4:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <logSensor+0x148>)
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f107 0110 	add.w	r1, r7, #16
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f00f f931 	bl	8012238 <osMessageQueuePut>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	37b4      	adds	r7, #180	; 0xb4
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	08017e9c 	.word	0x08017e9c
 8002fe4:	08017eac 	.word	0x08017eac
 8002fe8:	08017ebc 	.word	0x08017ebc
 8002fec:	08017edc 	.word	0x08017edc
 8002ff0:	20010d18 	.word	0x20010d18

08002ff4 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0ae      	sub	sp, #184	; 0xb8
 8002ff8:	af04      	add	r7, sp, #16
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003002:	f107 0310 	add.w	r3, r7, #16
 8003006:	2296      	movs	r2, #150	; 0x96
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f013 f99b 	bl	8016346 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	f107 0010 	add.w	r0, r7, #16
 8003018:	9202      	str	r2, [sp, #8]
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2303      	movs	r3, #3
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <logEstimatorVar+0x50>)
 8003024:	2196      	movs	r1, #150	; 0x96
 8003026:	f013 fa4f 	bl	80164c8 <sniprintf>
			estimator_data.altitude_above_GL, estimator_data.velocity);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <logEstimatorVar+0x54>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f107 0110 	add.w	r1, r7, #16
 8003032:	2300      	movs	r3, #0
 8003034:	2200      	movs	r2, #0
 8003036:	f00f f8ff 	bl	8012238 <osMessageQueuePut>
 800303a:	4603      	mov	r3, r0
}
 800303c:	4618      	mov	r0, r3
 800303e:	37a8      	adds	r7, #168	; 0xa8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	08017f00 	.word	0x08017f00
 8003048:	20010d18 	.word	0x20010d18

0800304c <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 800304c:	b40f      	push	{r0, r1, r2, r3}
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003054:	2301      	movs	r3, #1
 8003056:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <UsbPrint+0x60>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f00e fdf4 	bl	8011c4c <osMutexAcquire>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	21c8      	movs	r1, #200	; 0xc8
 8003076:	480e      	ldr	r0, [pc, #56]	; (80030b0 <UsbPrint+0x64>)
 8003078:	f013 fa86 	bl	8016588 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 800307c:	480c      	ldr	r0, [pc, #48]	; (80030b0 <UsbPrint+0x64>)
 800307e:	f7fd f8c7 	bl	8000210 <strlen>
 8003082:	4603      	mov	r3, r0
 8003084:	b29b      	uxth	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <UsbPrint+0x64>)
 800308a:	f012 fc6d 	bl	8015968 <CDC_Transmit_FS>
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <UsbPrint+0x60>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f00e fe36 	bl	8011d08 <osMutexRelease>
	}
#endif
	return ret;
 800309c:	79fb      	ldrb	r3, [r7, #7]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a8:	b004      	add	sp, #16
 80030aa:	4770      	bx	lr
 80030ac:	2000cbf4 	.word	0x2000cbf4
 80030b0:	2000aa5c 	.word	0x2000aa5c
 80030b4:	00000000 	.word	0x00000000

080030b8 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80030be:	af00      	add	r7, sp, #0
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	4618      	mov	r0, r3
 80030ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030ce:	461a      	mov	r2, r3
 80030d0:	2100      	movs	r1, #0
 80030d2:	f013 f938 	bl	8016346 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	6053      	str	r3, [r2, #4]
 80030f2:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 800311e:	2301      	movs	r3, #1
 8003120:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003124:	f00e fbb2 	bl	801188c <osKernelGetTickCount>
 8003128:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 800312c:	f00e fbd6 	bl	80118dc <osKernelGetTickFreq>
 8003130:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8003134:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8003138:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800313c:	4413      	add	r3, r2
 800313e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8003142:	f107 021c 	add.w	r2, r7, #28
 8003146:	f107 0110 	add.w	r1, r7, #16
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4618      	mov	r0, r3
 8003150:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8003154:	f000 f898 	bl	8003288 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8003164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003168:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	eeb1 7a67 	vneg.f32	s14, s15
 8003178:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 800317c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	edd3 6a01 	vldr	s13, [r3, #4]
 8003188:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 800318c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003190:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	edd3 6a02 	vldr	s13, [r3, #8]
 800319c:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 80031a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a4:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 80031a8:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 80031b4:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80031b8:	f7fd f9e6 	bl	8000588 <__aeabi_f2d>
 80031bc:	4603      	mov	r3, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003268 <vTaskController+0x1b0>
 80031c4:	ec44 3b10 	vmov	d0, r3, r4
 80031c8:	f013 fd36 	bl	8016c38 <fmin>
 80031cc:	eeb0 7a40 	vmov.f32	s14, s0
 80031d0:	eef0 7a60 	vmov.f32	s15, s1
 80031d4:	eeb0 1a47 	vmov.f32	s2, s14
 80031d8:	eef0 1a67 	vmov.f32	s3, s15
 80031dc:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8003270 <vTaskController+0x1b8>
 80031e0:	f013 fd03 	bl	8016bea <fmax>
 80031e4:	ec54 3b10 	vmov	r3, r4, d0
 80031e8:	4618      	mov	r0, r3
 80031ea:	4621      	mov	r1, r4
 80031ec:	f7fd fcf4 	bl	8000bd8 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 80031f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003202:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8003206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320a:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	ee17 0a90 	vmov	r0, s15
 8003216:	f7fd f9b7 	bl	8000588 <__aeabi_f2d>
 800321a:	4603      	mov	r3, r0
 800321c:	460c      	mov	r4, r1
 800321e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003278 <vTaskController+0x1c0>
 8003222:	ec44 3b10 	vmov	d0, r3, r4
 8003226:	f013 fd07 	bl	8016c38 <fmin>
 800322a:	eeb0 7a40 	vmov.f32	s14, s0
 800322e:	eef0 7a60 	vmov.f32	s15, s1
 8003232:	eeb0 1a47 	vmov.f32	s2, s14
 8003236:	eef0 1a67 	vmov.f32	s3, s15
 800323a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003280 <vTaskController+0x1c8>
 800323e:	f013 fcd4 	bl	8016bea <fmax>
 8003242:	ec54 3b10 	vmov	r3, r4, d0
 8003246:	4618      	mov	r0, r3
 8003248:	4621      	mov	r1, r4
 800324a:	f7fd fcc5 	bl	8000bd8 <__aeabi_d2f>
 800324e:	4603      	mov	r3, r0
 8003250:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8003254:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003258:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		/* Sleep */
		osDelayUntil(tick_count);
 800325c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003260:	f00e fc1a 	bl	8011a98 <osDelayUntil>
		tick_count += tick_update;
 8003264:	e766      	b.n	8003134 <vTaskController+0x7c>
 8003266:	bf00      	nop
 8003268:	00000000 	.word	0x00000000
 800326c:	3ff00000 	.word	0x3ff00000
	...
 800327c:	40240000 	.word	0x40240000
 8003280:	00000000 	.word	0x00000000
 8003284:	c0240000 	.word	0xc0240000

08003288 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003292:	60b8      	str	r0, [r7, #8]
 8003294:	6079      	str	r1, [r7, #4]
 8003296:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e07b      	b.n	800339a <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7fd f970 	bl	8000588 <__aeabi_f2d>
 80032a8:	4604      	mov	r4, r0
 80032aa:	460d      	mov	r5, r1
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f1c3 031d 	rsb	r3, r3, #29
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f956 	bl	8000564 <__aeabi_i2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	ec43 2b11 	vmov	d1, r2, r3
 80032c0:	ec45 4b10 	vmov	d0, r4, r5
 80032c4:	f013 fd0c 	bl	8016ce0 <pow>
 80032c8:	ec54 3b10 	vmov	r3, r4, d0
 80032cc:	4618      	mov	r0, r3
 80032ce:	4621      	mov	r1, r4
 80032d0:	f7fd fc62 	bl	8000b98 <__aeabi_d2uiz>
 80032d4:	4603      	mov	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	ed93 7a00 	vldr	s14, [r3]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	edd3 6a00 	vldr	s13, [r3]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	ee07 3a90 	vmov	s15, r3
 80032f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	ed93 7a00 	vldr	s14, [r3]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	edd3 6a00 	vldr	s13, [r3]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3308      	adds	r3, #8
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	edd3 6a00 	vldr	s13, [r3]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3308      	adds	r3, #8
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	ed93 7a00 	vldr	s14, [r3]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	edd3 6a00 	vldr	s13, [r3]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b1d      	cmp	r3, #29
 800339e:	dd80      	ble.n	80032a2 <CalcPolynomial+0x1a>
	}

}
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdb0      	pop	{r4, r5, r7, pc}

080033a8 <vTaskFSM>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data);

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection);


void vTaskFSM(void *argument) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08e      	sub	sp, #56	; 0x38
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80033b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 80033bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f947 	bl	8003654 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 80033c6:	f107 0318 	add.w	r3, r7, #24
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80033de:	f00e fa55 	bl	801188c <osKernelGetTickCount>
 80033e2:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80033e4:	f00e fa7a 	bl	80118dc <osKernelGetTickFreq>
 80033e8:	6338      	str	r0, [r7, #48]	; 0x30

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80033ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	4413      	add	r3, r2
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <vTaskFSM+0x9c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00e fcd6 	bl	8011da8 <osMutexGetOwner>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <vTaskFSM+0x84>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data;
 8003402:	4a11      	ldr	r2, [pc, #68]	; (8003448 <vTaskFSM+0xa0>)
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	ca07      	ldmia	r2, {r0, r1, r2}
 800340a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <vTaskFSM+0x9c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f00e fcc8 	bl	8011da8 <osMutexGetOwner>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <vTaskFSM+0x84>
				state_est_data_fsm = state_est_data_fsm_dummy;
 800341e:	f107 0318 	add.w	r3, r7, #24
 8003422:	f107 020c 	add.w	r2, r7, #12
 8003426:	ca07      	ldmia	r2, {r0, r1, r2}
 8003428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm);
 800342c:	f107 0218 	add.w	r2, r7, #24
 8003430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f80a 	bl	8003450 <detect_flight_phase>

		/* Sleep */
		osDelayUntil(tick_count);
 800343c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800343e:	f00e fb2b 	bl	8011a98 <osDelayUntil>
		tick_count += tick_update;
 8003442:	e7d2      	b.n	80033ea <vTaskFSM+0x42>
 8003444:	2000ab94 	.word	0x2000ab94
 8003448:	200002c0 	.word	0x200002c0
 800344c:	00000000 	.word	0x00000000

08003450 <detect_flight_phase>:
	}
}


void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
    /* altitude above ground level in world frame [m]*/
    float X_z = (float)(state_est_data->altitude_above_GL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003466:	edc7 7a05 	vstr	s15, [r7, #20]
    X_z = X_z/1000;
 800346a:	ed97 7a05 	vldr	s14, [r7, #20]
 800346e:	eddf 6a78 	vldr	s13, [pc, #480]	; 8003650 <detect_flight_phase+0x200>
 8003472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003476:	edc7 7a05 	vstr	s15, [r7, #20]
    /* vertical velocity in world frame [m/s]*/
    float V_z = (float)(state_est_data->velocity);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003486:	edc7 7a04 	vstr	s15, [r7, #16]
    V_z = V_z/1000;
 800348a:	ed97 7a04 	vldr	s14, [r7, #16]
 800348e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003650 <detect_flight_phase+0x200>
 8003492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003496:	edc7 7a04 	vstr	s15, [r7, #16]
    /* acceleration in x-dir in rocket frame [m/s^2]*/
    float Vdot_z = (float)(state_est_data->acceleration);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a6:	edc7 7a03 	vstr	s15, [r7, #12]
    Vdot_z = Vdot_z/1000;
 80034aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80034ae:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003650 <detect_flight_phase+0x200>
 80034b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034b6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	3b01      	subs	r3, #1
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	f200 808e 	bhi.w	80035e2 <detect_flight_phase+0x192>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <detect_flight_phase+0x7c>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080035e3 	.word	0x080035e3
 80034d4:	08003523 	.word	0x08003523
 80034d8:	0800355d 	.word	0x0800355d
 80034dc:	08003597 	.word	0x08003597
 80034e0:	080035e3 	.word	0x080035e3
        case IDLE:
            if (Vdot_z > 20) {
 80034e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	dc00      	bgt.n	80034f8 <detect_flight_phase+0xa8>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80034f6:	e06d      	b.n	80035d4 <detect_flight_phase+0x184>
                flight_phase_detection->num_samples_positive += 1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b25a      	sxtb	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003510:	2b03      	cmp	r3, #3
 8003512:	dd5f      	ble.n	80035d4 <detect_flight_phase+0x184>
                    flight_phase_detection->flight_phase = THRUSTING;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	721a      	strb	r2, [r3, #8]
        break;
 8003520:	e058      	b.n	80035d4 <detect_flight_phase+0x184>

        case THRUSTING:
            if (Vdot_z < 0) {
 8003522:	edd7 7a03 	vldr	s15, [r7, #12]
 8003526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	d400      	bmi.n	8003532 <detect_flight_phase+0xe2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003530:	e052      	b.n	80035d8 <detect_flight_phase+0x188>
                flight_phase_detection->num_samples_positive += 1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	b25a      	sxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800354a:	2b03      	cmp	r3, #3
 800354c:	dd44      	ble.n	80035d8 <detect_flight_phase+0x188>
                    flight_phase_detection->flight_phase = COASTING;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	721a      	strb	r2, [r3, #8]
        break;
 800355a:	e03d      	b.n	80035d8 <detect_flight_phase+0x188>

        case COASTING:
            if (V_z < 0) {
 800355c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003568:	d400      	bmi.n	800356c <detect_flight_phase+0x11c>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800356a:	e037      	b.n	80035dc <detect_flight_phase+0x18c>
                flight_phase_detection->num_samples_positive += 1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b25a      	sxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003584:	2b03      	cmp	r3, #3
 8003586:	dd29      	ble.n	80035dc <detect_flight_phase+0x18c>
                    flight_phase_detection->flight_phase = DESCENT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2205      	movs	r2, #5
 800358c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	721a      	strb	r2, [r3, #8]
        break;
 8003594:	e022      	b.n	80035dc <detect_flight_phase+0x18c>

        case DESCENT:
            if (X_z < 20) {
 8003596:	edd7 7a05 	vldr	s15, [r7, #20]
 800359a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800359e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	d400      	bmi.n	80035aa <detect_flight_phase+0x15a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80035a8:	e01a      	b.n	80035e0 <detect_flight_phase+0x190>
                flight_phase_detection->num_samples_positive += 1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	b25a      	sxtb	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	dd0c      	ble.n	80035e0 <detect_flight_phase+0x190>
                    flight_phase_detection->flight_phase = RECOVERY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2206      	movs	r2, #6
 80035ca:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	721a      	strb	r2, [r3, #8]
        break;
 80035d2:	e005      	b.n	80035e0 <detect_flight_phase+0x190>
        break;
 80035d4:	bf00      	nop
 80035d6:	e004      	b.n	80035e2 <detect_flight_phase+0x192>
        break;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <detect_flight_phase+0x192>
        break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <detect_flight_phase+0x192>
        break;
 80035e0:	bf00      	nop
        case RECOVERY:
        break;
    }

    // TODO @maxi: Implement update of mach number
    flight_phase_detection->mach_number = 0.0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ffca 	bl	8000588 <__aeabi_f2d>
 80035f4:	a312      	add	r3, pc, #72	; (adr r3, 8003640 <detect_flight_phase+0x1f0>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fd faa3 	bl	8000b44 <__aeabi_dcmpge>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <detect_flight_phase+0x1bc>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2203      	movs	r2, #3
 8003608:	705a      	strb	r2, [r3, #1]
        flight_phase_detection->mach_regime = TRANSONIC;
    } else
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
}
 800360a:	e013      	b.n	8003634 <detect_flight_phase+0x1e4>
    } else if (flight_phase_detection->mach_number >= 0.8)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffb9 	bl	8000588 <__aeabi_f2d>
 8003616:	a30c      	add	r3, pc, #48	; (adr r3, 8003648 <detect_flight_phase+0x1f8>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fd fa92 	bl	8000b44 <__aeabi_dcmpge>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <detect_flight_phase+0x1de>
        flight_phase_detection->mach_regime = TRANSONIC;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	705a      	strb	r2, [r3, #1]
}
 800362c:	e002      	b.n	8003634 <detect_flight_phase+0x1e4>
        flight_phase_detection->mach_regime = SUBSONIC;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	705a      	strb	r2, [r3, #1]
}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f3af 8000 	nop.w
 8003640:	cccccccd 	.word	0xcccccccd
 8003644:	3ff4cccc 	.word	0x3ff4cccc
 8003648:	9999999a 	.word	0x9999999a
 800364c:	3fe99999 	.word	0x3fe99999
 8003650:	447a0000 	.word	0x447a0000

08003654 <reset_flight_phase_detection>:


void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	721a      	strb	r2, [r3, #8]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <vTaskMotorCont>:

uint16_t calculateCRC(uint8_t *data, uint8_t len);

uint8_t rx_data[10] = { 0 };

void vTaskMotorCont(void *argument) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	; 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800368c:	f00e f8fe 	bl	801188c <osKernelGetTickCount>
 8003690:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003692:	f00e f923 	bl	80118dc <osKernelGetTickFreq>
 8003696:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t counter = 10;
 8003698:	230a      	movs	r3, #10
 800369a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for (;;) {
		tick_count += tick_update;
 800369e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	4413      	add	r3, r2
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Command */
		uint8_t byte_stream_read[10] = { 0 };
 80036a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	811a      	strh	r2, [r3, #8]
		byte_stream_read[0] = 0x90;		// DLE
 80036b2:	2390      	movs	r3, #144	; 0x90
 80036b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		byte_stream_read[1] = 0x02;		// STX
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		byte_stream_read[2] = 0x60;		// Read Object
 80036be:	2360      	movs	r3, #96	; 0x60
 80036c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		byte_stream_read[3] = 0x02;		// Length of stuff sent
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		byte_stream_read[4] = 0x01;		// Node ID
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		byte_stream_read[5] = 0x7A;		// Index Low Byte
 80036d0:	237a      	movs	r3, #122	; 0x7a
 80036d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		byte_stream_read[6] = 0x60;		// Index High byte
 80036d6:	2360      	movs	r3, #96	; 0x60
 80036d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		byte_stream_read[7] = 0x00;		// Subindex of object
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		/* CRC data array */
		uint8_t crc_data_array[6] = { 0 };
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	809a      	strh	r2, [r3, #4]
		memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80036ec:	f107 031c 	add.w	r3, r7, #28
 80036f0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80036f4:	6810      	ldr	r0, [r2, #0]
 80036f6:	6018      	str	r0, [r3, #0]
 80036f8:	8892      	ldrh	r2, [r2, #4]
 80036fa:	809a      	strh	r2, [r3, #4]

		uint16_t crc_calc = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	867b      	strh	r3, [r7, #50]	; 0x32
		crc_calc = calculateCRC(crc_data_array, 6);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	2106      	movs	r1, #6
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f8ca 	bl	80038a0 <calculateCRC>
 800370c:	4603      	mov	r3, r0
 800370e:	867b      	strh	r3, [r7, #50]	; 0x32

		byte_stream_read[8] = crc_calc & 0xFF;;		// CRC low byte
 8003710:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8003718:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	b29b      	uxth	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		byte_stream_read[8] = 0x6C;		// CRC low byte
 8003724:	236c      	movs	r3, #108	; 0x6c
 8003726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = 0xE6;		// CRC high byte
 800372a:	23e6      	movs	r3, #230	; 0xe6
 800372c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


		/* rx buffer */
		HAL_StatusTypeDef status;
		status = HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 8003730:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003734:	230a      	movs	r3, #10
 8003736:	220a      	movs	r2, #10
 8003738:	484e      	ldr	r0, [pc, #312]	; (8003874 <vTaskMotorCont+0x1f0>)
 800373a:	f006 fbcf 	bl	8009edc <HAL_UART_Transmit>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		HAL_UART_Receive_IT(&huart7, rx_data, 10);
 8003744:	220a      	movs	r2, #10
 8003746:	494c      	ldr	r1, [pc, #304]	; (8003878 <vTaskMotorCont+0x1f4>)
 8003748:	484a      	ldr	r0, [pc, #296]	; (8003874 <vTaskMotorCont+0x1f0>)
 800374a:	f006 fc59 	bl	800a000 <HAL_UART_Receive_IT>

		uint8_t byte_stream_write[14] = { 0 };
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	819a      	strh	r2, [r3, #12]

		if (counter > 20){
 800375c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003760:	2b14      	cmp	r3, #20
 8003762:	d907      	bls.n	8003774 <vTaskMotorCont+0xf0>
			counter = 10;
 8003764:	230a      	movs	r3, #10
 8003766:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			byte_stream_write[12] = 0x41;		// CRC low byte
 800376a:	2341      	movs	r3, #65	; 0x41
 800376c:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0xBF;		// CRC high byte
 800376e:	23bf      	movs	r3, #191	; 0xbf
 8003770:	767b      	strb	r3, [r7, #25]
 8003772:	e006      	b.n	8003782 <vTaskMotorCont+0xfe>
		}
		else{
			byte_stream_write[12] = 0x87;		// CRC low byte
 8003774:	2387      	movs	r3, #135	; 0x87
 8003776:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0x39;		// CRC high byte
 8003778:	2339      	movs	r3, #57	; 0x39
 800377a:	767b      	strb	r3, [r7, #25]
			counter = 30;
 800377c:	231e      	movs	r3, #30
 800377e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		/* Write Command */

		byte_stream_write[0] = 0x90;		// DLE
 8003782:	2390      	movs	r3, #144	; 0x90
 8003784:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 8003786:	2302      	movs	r3, #2
 8003788:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 800378a:	2368      	movs	r3, #104	; 0x68
 800378c:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 800378e:	2304      	movs	r3, #4
 8003790:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 8003792:	2301      	movs	r3, #1
 8003794:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x7A;		// Index Low Byte
 8003796:	237a      	movs	r3, #122	; 0x7a
 8003798:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 800379a:	2360      	movs	r3, #96	; 0x60
 800379c:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 800379e:	2300      	movs	r3, #0
 80037a0:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = counter;		// Data LSB
 80037a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80037a6:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80037a8:	2300      	movs	r3, #0
 80037aa:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80037ac:	2300      	movs	r3, #0
 80037ae:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
//		byte_stream_write[12] = 0x41;		// CRC low byte
//		byte_stream_write[13] = 0xBF;		// CRC high byte
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 80037b4:	f107 010c 	add.w	r1, r7, #12
 80037b8:	230a      	movs	r3, #10
 80037ba:	220e      	movs	r2, #14
 80037bc:	482d      	ldr	r0, [pc, #180]	; (8003874 <vTaskMotorCont+0x1f0>)
 80037be:	f006 fb8d 	bl	8009edc <HAL_UART_Transmit>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 80037c8:	2001      	movs	r0, #1
 80037ca:	f00e f937 	bl	8011a3c <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 80037ce:	2390      	movs	r3, #144	; 0x90
 80037d0:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 80037d2:	2302      	movs	r3, #2
 80037d4:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 80037d6:	2368      	movs	r3, #104	; 0x68
 80037d8:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 80037da:	2304      	movs	r3, #4
 80037dc:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 80037de:	2301      	movs	r3, #1
 80037e0:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 80037e2:	2340      	movs	r3, #64	; 0x40
 80037e4:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 80037e6:	2360      	movs	r3, #96	; 0x60
 80037e8:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 80037ea:	2300      	movs	r3, #0
 80037ec:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x3F;		// Data LSB
 80037ee:	233f      	movs	r3, #63	; 0x3f
 80037f0:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80037f2:	2300      	movs	r3, #0
 80037f4:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80037f6:	2300      	movs	r3, #0
 80037f8:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0x16;		// CRC low byte
 80037fe:	2316      	movs	r3, #22
 8003800:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0xC2;		// CRC high byte
 8003802:	23c2      	movs	r3, #194	; 0xc2
 8003804:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003806:	f107 010c 	add.w	r1, r7, #12
 800380a:	230a      	movs	r3, #10
 800380c:	220e      	movs	r2, #14
 800380e:	4819      	ldr	r0, [pc, #100]	; (8003874 <vTaskMotorCont+0x1f0>)
 8003810:	f006 fb64 	bl	8009edc <HAL_UART_Transmit>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 800381a:	2001      	movs	r0, #1
 800381c:	f00e f90e 	bl	8011a3c <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 8003820:	2390      	movs	r3, #144	; 0x90
 8003822:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 8003824:	2302      	movs	r3, #2
 8003826:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 8003828:	2368      	movs	r3, #104	; 0x68
 800382a:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 800382c:	2304      	movs	r3, #4
 800382e:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 8003830:	2301      	movs	r3, #1
 8003832:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 8003834:	2340      	movs	r3, #64	; 0x40
 8003836:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 8003838:	2360      	movs	r3, #96	; 0x60
 800383a:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 800383c:	2300      	movs	r3, #0
 800383e:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x0F;		// Data LSB
 8003840:	230f      	movs	r3, #15
 8003842:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 8003844:	2300      	movs	r3, #0
 8003846:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 8003848:	2300      	movs	r3, #0
 800384a:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0xB3;		// CRC low byte
 8003850:	23b3      	movs	r3, #179	; 0xb3
 8003852:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0x07;		// CRC high byte
 8003854:	2307      	movs	r3, #7
 8003856:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003858:	f107 010c 	add.w	r1, r7, #12
 800385c:	230a      	movs	r3, #10
 800385e:	220e      	movs	r2, #14
 8003860:	4804      	ldr	r0, [pc, #16]	; (8003874 <vTaskMotorCont+0x1f0>)
 8003862:	f006 fb3b 	bl	8009edc <HAL_UART_Transmit>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31


		osDelayUntil(tick_count);
 800386c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800386e:	f00e f913 	bl	8011a98 <osDelayUntil>
	for (;;) {
 8003872:	e714      	b.n	800369e <vTaskMotorCont+0x1a>
 8003874:	20008890 	.word	0x20008890
 8003878:	200002d0 	.word	0x200002d0

0800387c <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, rx_data, sizeof(rx_data));
 8003884:	220a      	movs	r2, #10
 8003886:	4904      	ldr	r1, [pc, #16]	; (8003898 <HAL_UART_RxCpltCallback+0x1c>)
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <HAL_UART_RxCpltCallback+0x20>)
 800388a:	f006 fbb9 	bl	800a000 <HAL_UART_Receive_IT>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200002d0 	.word	0x200002d0
 800389c:	20008890 	.word	0x20008890

080038a0 <calculateCRC>:


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crcCalc = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e04f      	b.n	8003956 <calculateCRC+0xb6>
    shifter = 0x8000;
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	82fb      	strh	r3, [r7, #22]
    if (i == 0) {
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <calculateCRC+0x42>
      c = data[i] << 8 | data[i+1];
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	b21a      	sxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3301      	adds	r3, #1
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	440b      	add	r3, r1
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b21b      	sxth	r3, r3
 80038de:	82bb      	strh	r3, [r7, #20]
 80038e0:	e015      	b.n	800390e <calculateCRC+0x6e>
    } else if (i == len) {
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d102      	bne.n	80038f0 <calculateCRC+0x50>
      c = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	82bb      	strh	r3, [r7, #20]
 80038ee:	e00e      	b.n	800390e <calculateCRC+0x6e>
    } else {
      c = data[i+1] << 8 | data[i];
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	440b      	add	r3, r1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b21b      	sxth	r3, r3
 8003908:	4313      	orrs	r3, r2
 800390a:	b21b      	sxth	r3, r3
 800390c:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crcCalc & 0x8000;
 800390e:	8a7b      	ldrh	r3, [r7, #18]
 8003910:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003918:	817b      	strh	r3, [r7, #10]
      crcCalc <<= 1;
 800391a:	8a7b      	ldrh	r3, [r7, #18]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crcCalc++;
 8003920:	8aba      	ldrh	r2, [r7, #20]
 8003922:	8afb      	ldrh	r3, [r7, #22]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <calculateCRC+0x92>
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	3301      	adds	r3, #1
 8003930:	827b      	strh	r3, [r7, #18]
      if(carry) crcCalc ^= 0x1021;
 8003932:	897b      	ldrh	r3, [r7, #10]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <calculateCRC+0xa4>
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 800394a:	8afb      	ldrh	r3, [r7, #22]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1de      	bne.n	800390e <calculateCRC+0x6e>
  for (int i = 0; i < len + 2; i += 2) {
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3302      	adds	r3, #2
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	3302      	adds	r3, #2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	dbaa      	blt.n	80038b6 <calculateCRC+0x16>
  }
  return crcCalc;
 8003960:	8a7b      	ldrh	r3, [r7, #18]
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b0cc      	sub	sp, #304	; 0x130
 8003974:	af00      	add	r7, sp, #0
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 800398c:	48c1      	ldr	r0, [pc, #772]	; (8003c94 <vTaskSdCard+0x324>)
 800398e:	f7ff fb5d 	bl	800304c <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8003992:	48c1      	ldr	r0, [pc, #772]	; (8003c98 <vTaskSdCard+0x328>)
 8003994:	f7ff fb5a 	bl	800304c <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8003998:	2201      	movs	r2, #1
 800399a:	49c0      	ldr	r1, [pc, #768]	; (8003c9c <vTaskSdCard+0x32c>)
 800399c:	48c0      	ldr	r0, [pc, #768]	; (8003ca0 <vTaskSdCard+0x330>)
 800399e:	f00c fe69 	bl	8010674 <f_mount>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80039a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80039b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039b4:	4619      	mov	r1, r3
 80039b6:	48bb      	ldr	r0, [pc, #748]	; (8003ca4 <vTaskSdCard+0x334>)
 80039b8:	f7ff fb48 	bl	800304c <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 80039bc:	4bba      	ldr	r3, [pc, #744]	; (8003ca8 <vTaskSdCard+0x338>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 80039c2:	2064      	movs	r0, #100	; 0x64
 80039c4:	f00e f83a 	bl	8011a3c <osDelay>
		}
	} while (res != FR_OK);
 80039c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e3      	bne.n	8003998 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 80039d0:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 80a9 	bne.w	8003b2c <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 80039da:	48b4      	ldr	r0, [pc, #720]	; (8003cac <vTaskSdCard+0x33c>)
 80039dc:	f7ff fb36 	bl	800304c <UsbPrint>

		unsigned int file_number = 1;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80039e6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80039ea:	f107 0008 	add.w	r0, r7, #8
 80039ee:	4bb0      	ldr	r3, [pc, #704]	; (8003cb0 <vTaskSdCard+0x340>)
 80039f0:	4aaa      	ldr	r2, [pc, #680]	; (8003c9c <vTaskSdCard+0x32c>)
 80039f2:	f00d fdf7 	bl	80115e4 <f_findfirst>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80039fc:	e02b      	b.n	8003a56 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80039fe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003a02:	3b30      	subs	r3, #48	; 0x30
 8003a04:	2264      	movs	r2, #100	; 0x64
 8003a06:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003a0a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	18ca      	adds	r2, r1, r3
 8003a1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003a20:	3b30      	subs	r3, #48	; 0x30
 8003a22:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if (current_file_number + 1 > file_number) {
 8003a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d204      	bcs.n	8003a40 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8003a36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8003a40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a44:	f107 0308 	add.w	r3, r7, #8
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f00d fda2 	bl	8011594 <f_findnext>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003a56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <vTaskSdCard+0xf6>
 8003a5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1cb      	bne.n	80039fe <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8003a66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8003a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a72:	4619      	mov	r1, r3
 8003a74:	488f      	ldr	r0, [pc, #572]	; (8003cb4 <vTaskSdCard+0x344>)
 8003a76:	f7ff fae9 	bl	800304c <UsbPrint>
					res);
			goto resetSDCard;
 8003a7a:	e78a      	b.n	8003992 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003a7c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003a80:	4a8d      	ldr	r2, [pc, #564]	; (8003cb8 <vTaskSdCard+0x348>)
 8003a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003a88:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003a8c:	4b8b      	ldr	r3, [pc, #556]	; (8003cbc <vTaskSdCard+0x34c>)
 8003a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	1aca      	subs	r2, r1, r3
 8003a9e:	b2d3      	uxtb	r3, r2
 8003aa0:	3330      	adds	r3, #48	; 0x30
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aac:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <vTaskSdCard+0x34c>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	08d9      	lsrs	r1, r3, #3
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <vTaskSdCard+0x34c>)
 8003ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aba:	08da      	lsrs	r2, r3, #3
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	1aca      	subs	r2, r1, r3
 8003ac6:	b2d3      	uxtb	r3, r2
 8003ac8:	3330      	adds	r3, #48	; 0x30
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ad4:	4a7a      	ldr	r2, [pc, #488]	; (8003cc0 <vTaskSdCard+0x350>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	0959      	lsrs	r1, r3, #5
 8003adc:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <vTaskSdCard+0x34c>)
 8003ade:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	1aca      	subs	r2, r1, r3
 8003aee:	b2d3      	uxtb	r3, r2
 8003af0:	3330      	adds	r3, #48	; 0x30
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8003af8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003afc:	4619      	mov	r1, r3
 8003afe:	4871      	ldr	r0, [pc, #452]	; (8003cc4 <vTaskSdCard+0x354>)
 8003b00:	f7ff faa4 	bl	800304c <UsbPrint>

		res = f_closedir(&dj);
 8003b04:	f107 0308 	add.w	r3, r7, #8
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f00d fcd5 	bl	80114b8 <f_closedir>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003b14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003b1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b20:	4619      	mov	r1, r3
 8003b22:	4869      	ldr	r0, [pc, #420]	; (8003cc8 <vTaskSdCard+0x358>)
 8003b24:	f7ff fa92 	bl	800304c <UsbPrint>
			goto resetSDCard;
 8003b28:	bf00      	nop
 8003b2a:	e732      	b.n	8003992 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8003b2c:	4867      	ldr	r0, [pc, #412]	; (8003ccc <vTaskSdCard+0x35c>)
 8003b2e:	f7ff fa8d 	bl	800304c <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003b32:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003b36:	2212      	movs	r2, #18
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4865      	ldr	r0, [pc, #404]	; (8003cd0 <vTaskSdCard+0x360>)
 8003b3c:	f00c fdfe 	bl	801073c <f_open>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8003b46:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003b4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b52:	4619      	mov	r1, r3
 8003b54:	485f      	ldr	r0, [pc, #380]	; (8003cd4 <vTaskSdCard+0x364>)
 8003b56:	f7ff fa79 	bl	800304c <UsbPrint>
		goto resetSDCard;
 8003b5a:	e71a      	b.n	8003992 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003b5c:	485e      	ldr	r0, [pc, #376]	; (8003cd8 <vTaskSdCard+0x368>)
 8003b5e:	f7ff fa75 	bl	800304c <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003b62:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <vTaskSdCard+0x360>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4619      	mov	r1, r3
 8003b68:	4859      	ldr	r0, [pc, #356]	; (8003cd0 <vTaskSdCard+0x360>)
 8003b6a:	f00d f9d9 	bl	8010f20 <f_lseek>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8003b74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003b7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b80:	4619      	mov	r1, r3
 8003b82:	4856      	ldr	r0, [pc, #344]	; (8003cdc <vTaskSdCard+0x36c>)
 8003b84:	f7ff fa62 	bl	800304c <UsbPrint>
		goto resetSDCard;
 8003b88:	e703      	b.n	8003992 <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003b90:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <vTaskSdCard+0x370>)
 8003b92:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8003b96:	461d      	mov	r5, r3
 8003b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ba0:	c407      	stmia	r4!, {r0, r1, r2}
 8003ba2:	8023      	strh	r3, [r4, #0]
 8003ba4:	3402      	adds	r4, #2
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	7023      	strb	r3, [r4, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003bb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fb28 	bl	8000210 <strlen>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <vTaskSdCard+0x374>)
 8003bc8:	4841      	ldr	r0, [pc, #260]	; (8003cd0 <vTaskSdCard+0x360>)
 8003bca:	f00c ff7c 	bl	8010ac6 <f_write>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8003bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003bdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003be0:	4619      	mov	r1, r3
 8003be2:	4841      	ldr	r0, [pc, #260]	; (8003ce8 <vTaskSdCard+0x378>)
 8003be4:	f7ff fa32 	bl	800304c <UsbPrint>
		goto resetSDCard;
 8003be8:	e6d3      	b.n	8003992 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8003bea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bee:	2296      	movs	r2, #150	; 0x96
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f012 fba7 	bl	8016346 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <vTaskSdCard+0x37c>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	2200      	movs	r2, #0
 8003c06:	f00e fb8b 	bl	8012320 <osMessageQueueGet>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f3      	bne.n	8003bf8 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8003c10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fc fafb 	bl	8000210 <strlen>
 8003c1a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			if (num_bytes > 0) {
 8003c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003c26:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <vTaskSdCard+0x374>)
 8003c2c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003c30:	4827      	ldr	r0, [pc, #156]	; (8003cd0 <vTaskSdCard+0x360>)
 8003c32:	f00c ff48 	bl	8010ac6 <f_write>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8003c3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003c44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4827      	ldr	r0, [pc, #156]	; (8003ce8 <vTaskSdCard+0x378>)
 8003c4c:	f7ff f9fe 	bl	800304c <UsbPrint>
							res);
					goto resetSDCard;
 8003c50:	e69f      	b.n	8003992 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8003c52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c56:	3301      	adds	r3, #1
 8003c58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8003c5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c60:	2b7f      	cmp	r3, #127	; 0x7f
 8003c62:	ddc9      	ble.n	8003bf8 <vTaskSdCard+0x288>
				msgCounter = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003c6a:	4821      	ldr	r0, [pc, #132]	; (8003cf0 <vTaskSdCard+0x380>)
 8003c6c:	f7ff f9ee 	bl	800304c <UsbPrint>
				//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				res = f_sync(&EULER_LOG_FILE);
 8003c70:	4817      	ldr	r0, [pc, #92]	; (8003cd0 <vTaskSdCard+0x360>)
 8003c72:	f00d f8cc 	bl	8010e0e <f_sync>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8003c7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0b9      	beq.n	8003bf8 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8003c84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c88:	4619      	mov	r1, r3
 8003c8a:	481a      	ldr	r0, [pc, #104]	; (8003cf4 <vTaskSdCard+0x384>)
 8003c8c:	f7ff f9de 	bl	800304c <UsbPrint>
					goto resetSDCard;
 8003c90:	e67f      	b.n	8003992 <vTaskSdCard+0x22>
 8003c92:	bf00      	nop
 8003c94:	08017f1c 	.word	0x08017f1c
 8003c98:	08017f44 	.word	0x08017f44
 8003c9c:	08017f68 	.word	0x08017f68
 8003ca0:	200150ac 	.word	0x200150ac
 8003ca4:	08017f6c 	.word	0x08017f6c
 8003ca8:	2000030c 	.word	0x2000030c
 8003cac:	08017f98 	.word	0x08017f98
 8003cb0:	08017fbc 	.word	0x08017fbc
 8003cb4:	08017fc8 	.word	0x08017fc8
 8003cb8:	08018000 	.word	0x08018000
 8003cbc:	cccccccd 	.word	0xcccccccd
 8003cc0:	51eb851f 	.word	0x51eb851f
 8003cc4:	0801800c 	.word	0x0801800c
 8003cc8:	08018030 	.word	0x08018030
 8003ccc:	08018060 	.word	0x08018060
 8003cd0:	20014e7c 	.word	0x20014e7c
 8003cd4:	08018084 	.word	0x08018084
 8003cd8:	080180b0 	.word	0x080180b0
 8003cdc:	080180d8 	.word	0x080180d8
 8003ce0:	0801817c 	.word	0x0801817c
 8003ce4:	200152e0 	.word	0x200152e0
 8003ce8:	08018108 	.word	0x08018108
 8003cec:	20010d18 	.word	0x20010d18
 8003cf0:	08018134 	.word	0x08018134
 8003cf4:	08018154 	.word	0x08018154

08003cf8 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af04      	add	r7, sp, #16
 8003cfe:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003d00:	f00d fdc4 	bl	801188c <osKernelGetTickCount>
 8003d04:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8003d06:	f00d fde9 	bl	80118dc <osKernelGetTickFreq>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <vTaskSensRead+0x144>)
 8003d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8003d1e:	221c      	movs	r2, #28
 8003d20:	4947      	ldr	r1, [pc, #284]	; (8003e40 <vTaskSensRead+0x148>)
 8003d22:	4848      	ldr	r0, [pc, #288]	; (8003e44 <vTaskSensRead+0x14c>)
 8003d24:	f005 f866 	bl	8008df4 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003d28:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <vTaskSensRead+0x150>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	211e      	movs	r1, #30
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00d ff8c 	bl	8011c4c <osMutexAcquire>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d110      	bne.n	8003d5c <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 8003d3a:	4b44      	ldr	r3, [pc, #272]	; (8003e4c <vTaskSensRead+0x154>)
 8003d3c:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <vTaskSensRead+0x148>)
 8003d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <vTaskSensRead+0x158>)
 8003d46:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <vTaskSensRead+0x148>)
 8003d48:	4614      	mov	r4, r2
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <vTaskSensRead+0x150>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f00d ffd6 	bl	8011d08 <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <vTaskSensRead+0x15c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	211e      	movs	r1, #30
 8003d62:	4618      	mov	r0, r3
 8003d64:	f00d ff72 	bl	8011c4c <osMutexAcquire>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d110      	bne.n	8003d90 <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 8003d6e:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <vTaskSensRead+0x160>)
 8003d70:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <vTaskSensRead+0x148>)
 8003d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 8003d78:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <vTaskSensRead+0x164>)
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <vTaskSensRead+0x148>)
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	330c      	adds	r3, #12
 8003d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <vTaskSensRead+0x15c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f00d ffbc 	bl	8011d08 <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <vTaskSensRead+0x168>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	211e      	movs	r1, #30
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00d ff58 	bl	8011c4c <osMutexAcquire>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d110      	bne.n	8003dc4 <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 8003da2:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <vTaskSensRead+0x16c>)
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <vTaskSensRead+0x148>)
 8003da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8003dac:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <vTaskSensRead+0x170>)
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <vTaskSensRead+0x148>)
 8003db0:	4614      	mov	r4, r2
 8003db2:	330c      	adds	r3, #12
 8003db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <vTaskSensRead+0x168>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f00d ffa2 	bl	8011d08 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8003dc4:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <vTaskSensRead+0x154>)
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <vTaskSensRead+0x154>)
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4827      	ldr	r0, [pc, #156]	; (8003e6c <vTaskSensRead+0x174>)
 8003dd0:	f7ff f93c 	bl	800304c <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <vTaskSensRead+0x158>)
 8003dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8003dda:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <vTaskSensRead+0x158>)
 8003dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 8003de2:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <vTaskSensRead+0x158>)
 8003de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8003dea:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <vTaskSensRead+0x158>)
 8003dee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8003df2:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <vTaskSensRead+0x158>)
 8003df6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8003dfa:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <vTaskSensRead+0x158>)
 8003dfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8003e02:	4618      	mov	r0, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	9303      	str	r3, [sp, #12]
 8003e08:	9002      	str	r0, [sp, #8]
 8003e0a:	9101      	str	r1, [sp, #4]
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	4633      	mov	r3, r6
 8003e10:	462a      	mov	r2, r5
 8003e12:	4621      	mov	r1, r4
 8003e14:	4816      	ldr	r0, [pc, #88]	; (8003e70 <vTaskSensRead+0x178>)
 8003e16:	f7ff f919 	bl	800304c <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <vTaskSensRead+0x154>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2103      	movs	r1, #3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff f841 	bl	8002ea8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <vTaskSensRead+0x158>)
 8003e28:	2202      	movs	r2, #2
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff f83b 	bl	8002ea8 <logSensor>

		osDelayUntil(tick_count);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f00d fe30 	bl	8011a98 <osDelayUntil>
		tick_count += tick_update;
 8003e38:	e76d      	b.n	8003d16 <vTaskSensRead+0x1e>
 8003e3a:	bf00      	nop
 8003e3c:	51eb851f 	.word	0x51eb851f
 8003e40:	200002a4 	.word	0x200002a4
 8003e44:	2000a9f8 	.word	0x2000a9f8
 8003e48:	2000ab90 	.word	0x2000ab90
 8003e4c:	20000288 	.word	0x20000288
 8003e50:	20000294 	.word	0x20000294
 8003e54:	20014e38 	.word	0x20014e38
 8003e58:	20000250 	.word	0x20000250
 8003e5c:	2000025c 	.word	0x2000025c
 8003e60:	2000ab2c 	.word	0x2000ab2c
 8003e64:	20000218 	.word	0x20000218
 8003e68:	20000224 	.word	0x20000224
 8003e6c:	0801819c 	.word	0x0801819c
 8003e70:	080181bc 	.word	0x080181bc

08003e74 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8003e7c:	221c      	movs	r2, #28
 8003e7e:	4904      	ldr	r1, [pc, #16]	; (8003e90 <HAL_SPI_RxCpltCallback+0x1c>)
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <HAL_SPI_RxCpltCallback+0x20>)
 8003e82:	f004 ffb7 	bl	8008df4 <HAL_SPI_Receive_IT>

}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200002a4 	.word	0x200002a4
 8003e94:	2000a9f8 	.word	0x2000a9f8

08003e98 <vTaskStateEst>:
void ekf_update(ekf_state_t *ekf_state);
void ekf_prediction(ekf_state_t *ekf_state);



void vTaskStateEst(void *argument) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	f5ad 6da3 	sub.w	sp, sp, #1304	; 0x518
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;


	/* Initialise States */
	ekf_state_t ekf_state = { 0 };
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f012 fa48 	bl	8016346 <memset>
	reset_ekf_state(&ekf_state);
 8003eb6:	f107 0310 	add.w	r3, r7, #16
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f90e 	bl	80040dc <reset_ekf_state>

	/* Initialise placeholder variables for sensor reading */
	float Placeholder_measurement[2] = { 0 };
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	6053      	str	r3, [r2, #4]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003ecc:	f00d fcde 	bl	801188c <osKernelGetTickCount>
 8003ed0:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8003ed4:	f00d fd02 	bl	80118dc <osKernelGetTickFreq>
 8003ed8:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
	for (;;) {
		tick_count += tick_update;
 8003edc:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 8003ee0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514

		/* Acquire the Sensor data */
		/* TODO: get correct input sequence */
		/* Sensor Board 1 */
		if(osMutexGetOwner(sb1_mutex) == NULL){
 8003eea:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <vTaskStateEst+0x220>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f00d ff5a 	bl	8011da8 <osMutexGetOwner>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d12a      	bne.n	8003f50 <vTaskStateEst+0xb8>
			Placeholder_measurement[0] = (float) sb1_data.baro.pressure;
 8003efa:	4b70      	ldr	r3, [pc, #448]	; (80040bc <vTaskStateEst+0x224>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f06:	f107 0308 	add.w	r3, r7, #8
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb1_data.imu.acc_z;
 8003f0e:	4b6b      	ldr	r3, [pc, #428]	; (80040bc <vTaskStateEst+0x224>)
 8003f10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb1_mutex) == NULL){
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <vTaskStateEst+0x220>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00d ff3d 	bl	8011da8 <osMutexGetOwner>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <vTaskStateEst+0xb8>
				ekf_state.z[0] = Placeholder_measurement[0];
 8003f34:	f107 0308 	add.w	r3, r7, #8
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f107 0310 	add.w	r3, r7, #16
 8003f3e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
				ekf_state.z[1] = Placeholder_measurement[1];
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
			}
		}

		/* Sensor Board 2 */
		if(osMutexGetOwner(sb2_mutex) == NULL){
 8003f50:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <vTaskStateEst+0x228>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00d ff27 	bl	8011da8 <osMutexGetOwner>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d12a      	bne.n	8003fb6 <vTaskStateEst+0x11e>
			Placeholder_measurement[0] = (float) sb2_data.baro.pressure;
 8003f60:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <vTaskStateEst+0x22c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	f107 0308 	add.w	r3, r7, #8
 8003f70:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb2_data.imu.acc_z;
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <vTaskStateEst+0x22c>)
 8003f76:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	f107 0308 	add.w	r3, r7, #8
 8003f86:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb2_mutex) == NULL){
 8003f8a:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <vTaskStateEst+0x228>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f00d ff0a 	bl	8011da8 <osMutexGetOwner>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <vTaskStateEst+0x11e>
				ekf_state.z[2] = Placeholder_measurement[0];
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
				ekf_state.z[3] = Placeholder_measurement[1];
 8003fa8:	f107 0308 	add.w	r3, r7, #8
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	f107 0310 	add.w	r3, r7, #16
 8003fb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			}
		}

		/* Sensor Board 3 */
		if(osMutexGetOwner(sb3_mutex) == NULL){
 8003fb6:	4b44      	ldr	r3, [pc, #272]	; (80040c8 <vTaskStateEst+0x230>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00d fef4 	bl	8011da8 <osMutexGetOwner>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12a      	bne.n	800401c <vTaskStateEst+0x184>
			Placeholder_measurement[0] = (float) sb3_data.baro.pressure;
 8003fc6:	4b41      	ldr	r3, [pc, #260]	; (80040cc <vTaskStateEst+0x234>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_measurement[1] = (float) sb3_data.imu.acc_z;
 8003fda:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <vTaskStateEst+0x234>)
 8003fdc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	edc3 7a01 	vstr	s15, [r3, #4]
			if(osMutexGetOwner(sb3_mutex) == NULL){
 8003ff0:	4b35      	ldr	r3, [pc, #212]	; (80040c8 <vTaskStateEst+0x230>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f00d fed7 	bl	8011da8 <osMutexGetOwner>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <vTaskStateEst+0x184>
				ekf_state.z[4] = Placeholder_measurement[0];
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f107 0310 	add.w	r3, r7, #16
 800400a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
				ekf_state.z[5] = Placeholder_measurement[1];
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		/* End TODO */

		/* Start Kalman Update */

		/* Prediction Step */
		ekf_prediction(&ekf_state);
 800401c:	f107 0310 	add.w	r3, r7, #16
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f8fb 	bl	800421c <ekf_prediction>

		/* update Step */
		ekf_update(&ekf_state);
 8004026:	f107 0310 	add.w	r3, r7, #16
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f968 	bl	8004300 <ekf_update>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <vTaskStateEst+0x238>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	210a      	movs	r1, #10
 8004036:	4618      	mov	r0, r3
 8004038:	f00d fe08 	bl	8011c4c <osMutexAcquire>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12e      	bne.n	80040a0 <vTaskStateEst+0x208>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data.altitude_above_GL = (int32_t)(ekf_state.x_est[0]*1000);
 8004042:	f107 0310 	add.w	r3, r7, #16
 8004046:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 800404a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80040d4 <vTaskStateEst+0x23c>
 800404e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004056:	ee17 2a90 	vmov	r2, s15
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <vTaskStateEst+0x240>)
 800405c:	605a      	str	r2, [r3, #4]
			state_est_data.velocity = (int32_t)(ekf_state.x_est[1]*1000);
 800405e:	f107 0310 	add.w	r3, r7, #16
 8004062:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8004066:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80040d4 <vTaskStateEst+0x23c>
 800406a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004072:	ee17 2a90 	vmov	r2, s15
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <vTaskStateEst+0x240>)
 8004078:	601a      	str	r2, [r3, #0]
			state_est_data.acceleration = (int32_t)(ekf_state.u[0]*1000);
 800407a:	f107 0310 	add.w	r3, r7, #16
 800407e:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 8004082:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80040d4 <vTaskStateEst+0x23c>
 8004086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800408a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800408e:	ee17 2a90 	vmov	r2, s15
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <vTaskStateEst+0x240>)
 8004094:	609a      	str	r2, [r3, #8]
			osMutexRelease(state_est_mutex);
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <vTaskStateEst+0x238>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f00d fe34 	bl	8011d08 <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 80040a0:	f00d fbf4 	bl	801188c <osKernelGetTickCount>
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <vTaskStateEst+0x240>)
 80040a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a8:	f7fe ffa4 	bl	8002ff4 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80040ac:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 80040b0:	f00d fcf2 	bl	8011a98 <osDelayUntil>
		tick_count += tick_update;
 80040b4:	e712      	b.n	8003edc <vTaskStateEst+0x44>
 80040b6:	bf00      	nop
 80040b8:	2000ab2c 	.word	0x2000ab2c
 80040bc:	20000234 	.word	0x20000234
 80040c0:	20014e38 	.word	0x20014e38
 80040c4:	2000026c 	.word	0x2000026c
 80040c8:	2000ab90 	.word	0x2000ab90
 80040cc:	200002a4 	.word	0x200002a4
 80040d0:	2000ab94 	.word	0x2000ab94
 80040d4:	447a0000 	.word	0x447a0000
 80040d8:	200002c0 	.word	0x200002c0

080040dc <reset_ekf_state>:
	}
}


void reset_ekf_state(ekf_state_t *ekf_state){
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b0b0      	sub	sp, #192	; 0xc0
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

	float A_init[NUMBER_STATES][NUMBER_STATES] = {{0, 1, 0}, {0, 0, 1}, {0, 0, 0}};
 80040e4:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <reset_ekf_state+0x138>)
 80040e6:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80040ea:	461d      	mov	r5, r3
 80040ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	6023      	str	r3, [r4, #0]
	float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{0}, {1}, {0}};
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004100:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004104:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float G_init[NUMBER_STATES][NUMBER_NOISE] = {{0}, {1}, {0}};
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004118:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float H_init[NUMBER_SENSOR][NUMBER_STATES] = {{1, 0, 0},{1, 0, 0}, {1, 0, 0}, {1, 0, 0}, {1, 0, 0}, {1, 0, 0}};
 8004128:	4a3b      	ldr	r2, [pc, #236]	; (8004218 <reset_ekf_state+0x13c>)
 800412a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800412e:	4611      	mov	r1, r2
 8004130:	2248      	movs	r2, #72	; 0x48
 8004132:	4618      	mov	r0, r3
 8004134:	f012 f8fc 	bl	8016330 <memcpy>

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f012 f8f7 	bl	8016346 <memset>

	memcpy(ekf_state->H, H_init, sizeof(H_init));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	336c      	adds	r3, #108	; 0x6c
 800415c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004160:	2248      	movs	r2, #72	; 0x48
 8004162:	4618      	mov	r0, r3
 8004164:	f012 f8e4 	bl	8016330 <memcpy>
	memcpy(ekf_state->Ad, A_init, sizeof(A_init));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800416e:	2224      	movs	r2, #36	; 0x24
 8004170:	4618      	mov	r0, r3
 8004172:	f012 f8dd 	bl	8016330 <memcpy>
	memcpy(ekf_state->Bd, B_init, sizeof(B_init));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3348      	adds	r3, #72	; 0x48
 800417a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800417e:	220c      	movs	r2, #12
 8004180:	4618      	mov	r0, r3
 8004182:	f012 f8d5 	bl	8016330 <memcpy>
    memcpy(ekf_state->Gd, G_init, sizeof(G_init));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3354      	adds	r3, #84	; 0x54
 800418a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800418e:	220c      	movs	r2, #12
 8004190:	4618      	mov	r0, r3
 8004192:	f012 f8cd 	bl	8016330 <memcpy>
    memcpy(ekf_state->x_est, x_est_init, sizeof(x_est_init));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800419c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80041a0:	220c      	movs	r2, #12
 80041a2:	4618      	mov	r0, r3
 80041a4:	f012 f8c4 	bl	8016330 <memcpy>
    memcpy(ekf_state->P_est, P_est_init, sizeof(P_est_init));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80041ae:	f107 010c 	add.w	r1, r7, #12
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f012 f8bb 	bl	8016330 <memcpy>

    memset(ekf_state->Q, 0, NUMBER_NOISE*NUMBER_NOISE*sizeof(ekf_state->Q[0][0]));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	33fc      	adds	r3, #252	; 0xfc
 80041be:	2204      	movs	r2, #4
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f012 f8bf 	bl	8016346 <memset>
    memset(ekf_state->R, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(ekf_state->R[0][0]));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80041ce:	2290      	movs	r2, #144	; 0x90
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f012 f8b7 	bl	8016346 <memset>

    transpose(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->Ad_T);
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	2103      	movs	r1, #3
 80041e0:	2003      	movs	r0, #3
 80041e2:	f7fd fa44 	bl	800166e <transpose>
    transpose(NUMBER_STATES, NUMBER_NOISE, ekf_state->Gd, ekf_state->Gd_T);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3360      	adds	r3, #96	; 0x60
 80041f0:	2101      	movs	r1, #1
 80041f2:	2003      	movs	r0, #3
 80041f4:	f7fd fa3b 	bl	800166e <transpose>
    transpose(NUMBER_SENSOR, NUMBER_STATES, ekf_state->H, ekf_state->H_T);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	33b4      	adds	r3, #180	; 0xb4
 8004202:	2103      	movs	r1, #3
 8004204:	2006      	movs	r0, #6
 8004206:	f7fd fa32 	bl	800166e <transpose>
}
 800420a:	bf00      	nop
 800420c:	37c0      	adds	r7, #192	; 0xc0
 800420e:	46bd      	mov	sp, r7
 8004210:	bdb0      	pop	{r4, r5, r7, pc}
 8004212:	bf00      	nop
 8004214:	080181fc 	.word	0x080181fc
 8004218:	08018220 	.word	0x08018220

0800421c <ekf_prediction>:

void ekf_prediction(ekf_state_t *ekf_state){
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af04      	add	r7, sp, #16
 8004222:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->x_est, ekf_state->x_priori, true);
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004232:	2201      	movs	r2, #1
 8004234:	9201      	str	r2, [sp, #4]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	4603      	mov	r3, r0
 800423a:	460a      	mov	r2, r1
 800423c:	2103      	movs	r1, #3
 800423e:	2003      	movs	r0, #3
 8004240:	f7fd fc3f 	bl	8001ac2 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, ekf_state->Bd, ekf_state->u, ekf_state->x_priori, false);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004256:	2200      	movs	r2, #0
 8004258:	9201      	str	r2, [sp, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	460a      	mov	r2, r1
 8004260:	2101      	movs	r1, #1
 8004262:	2003      	movs	r0, #3
 8004264:	f7fd fc2d 	bl	8001ac2 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->P_est, ekf_state->Placeholder_Ad_mult_P_est, true);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8004276:	2101      	movs	r1, #1
 8004278:	9102      	str	r1, [sp, #8]
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	4603      	mov	r3, r0
 8004280:	2203      	movs	r2, #3
 8004282:	2103      	movs	r1, #3
 8004284:	2003      	movs	r0, #3
 8004286:	f7fd fb82 	bl	800198e <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_NOISE, ekf_state->Gd, ekf_state->Q, ekf_state->Placeholder_Gd_mult_Q, true);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	33fc      	adds	r3, #252	; 0xfc
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	f502 726c 	add.w	r2, r2, #944	; 0x3b0
 800429a:	2101      	movs	r1, #1
 800429c:	9102      	str	r1, [sp, #8]
 800429e:	9201      	str	r2, [sp, #4]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4603      	mov	r3, r0
 80042a4:	2201      	movs	r2, #1
 80042a6:	2101      	movs	r1, #1
 80042a8:	2003      	movs	r0, #3
 80042aa:	f7fd fb70 	bl	800198e <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_Ad_mult_P_est, ekf_state->Ad_T, ekf_state->P_priori, true);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 80042be:	2101      	movs	r1, #1
 80042c0:	9102      	str	r1, [sp, #8]
 80042c2:	9201      	str	r2, [sp, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	4603      	mov	r3, r0
 80042c8:	2203      	movs	r2, #3
 80042ca:	2103      	movs	r1, #3
 80042cc:	2003      	movs	r0, #3
 80042ce:	f7fd fb5e 	bl	800198e <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_STATES, ekf_state->Placeholder_Gd_mult_Q, ekf_state->Gd_T, ekf_state->P_priori, false);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3360      	adds	r3, #96	; 0x60
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 80042e2:	2100      	movs	r1, #0
 80042e4:	9102      	str	r1, [sp, #8]
 80042e6:	9201      	str	r2, [sp, #4]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4603      	mov	r3, r0
 80042ec:	2203      	movs	r2, #3
 80042ee:	2101      	movs	r1, #1
 80042f0:	2003      	movs	r0, #3
 80042f2:	f7fd fb4c 	bl	800198e <matmul>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <ekf_update>:

void ekf_update(ekf_state_t *ekf_state) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af04      	add	r7, sp, #16
 8004306:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_SENSOR, NUMBER_STATES, ekf_state->H, ekf_state->x_priori, ekf_state->y, true);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800431a:	2201      	movs	r2, #1
 800431c:	9201      	str	r2, [sp, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4603      	mov	r3, r0
 8004322:	460a      	mov	r2, r1
 8004324:	2103      	movs	r1, #3
 8004326:	2006      	movs	r0, #6
 8004328:	f7fd fbcb 	bl	8001ac2 <matvecprod>
    vecsub(NUMBER_SENSOR, ekf_state->z, ekf_state->y, ekf_state->y);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 71fa 	add.w	r1, r3, #500	; 0x1f4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800433e:	2006      	movs	r0, #6
 8004340:	f7fd fa14 	bl	800176c <vecsub>

    /* S = H*P*H_T + R */
    matmul(NUMBER_SENSOR, NUMBER_STATES, NUMBER_STATES, ekf_state->H, ekf_state->P_priori, ekf_state->Placeholder_H_mult_P_priori, true);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
 8004356:	2101      	movs	r1, #1
 8004358:	9102      	str	r1, [sp, #8]
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	4603      	mov	r3, r0
 8004360:	2203      	movs	r2, #3
 8004362:	2103      	movs	r1, #3
 8004364:	2006      	movs	r0, #6
 8004366:	f7fd fb12 	bl	800198e <matmul>
    matmul(NUMBER_SENSOR, NUMBER_STATES, NUMBER_SENSOR, ekf_state->Placeholder_H_mult_P_priori, ekf_state->H_T, ekf_state->S, true);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	33b4      	adds	r3, #180	; 0xb4
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	f502 7209 	add.w	r2, r2, #548	; 0x224
 800437a:	2101      	movs	r1, #1
 800437c:	9102      	str	r1, [sp, #8]
 800437e:	9201      	str	r2, [sp, #4]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4603      	mov	r3, r0
 8004384:	2206      	movs	r2, #6
 8004386:	2103      	movs	r1, #3
 8004388:	2006      	movs	r0, #6
 800438a:	f7fd fb00 	bl	800198e <matmul>
    matadd(NUMBER_SENSOR,  NUMBER_SENSOR, ekf_state->S, ekf_state->R, ekf_state->S);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	460b      	mov	r3, r1
 80043a4:	2106      	movs	r1, #6
 80043a6:	2006      	movs	r0, #6
 80043a8:	f7fd fa0b 	bl	80017c2 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(ekf_state->S_inv, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(ekf_state->S_inv[0][0]));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80043b2:	2290      	movs	r2, #144	; 0x90
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f011 ffc5 	bl	8016346 <memset>
    pinv(NUMBER_SENSOR, LAMBDA, ekf_state->S, ekf_state->S_inv);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 7109 	add.w	r1, r3, #548	; 0x224
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80043c8:	461a      	mov	r2, r3
 80043ca:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80044d8 <ekf_update+0x1d8>
 80043ce:	2006      	movs	r0, #6
 80043d0:	f7fd fbd2 	bl	8001b78 <pinv>

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_SENSOR, ekf_state->P_priori, ekf_state->H_T, ekf_state->Placeholder_P_priori_mult_H_T, true);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	33b4      	adds	r3, #180	; 0xb4
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	f202 424c 	addw	r2, r2, #1100	; 0x44c
 80043e4:	2101      	movs	r1, #1
 80043e6:	9102      	str	r1, [sp, #8]
 80043e8:	9201      	str	r2, [sp, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4603      	mov	r3, r0
 80043ee:	2206      	movs	r2, #6
 80043f0:	2103      	movs	r1, #3
 80043f2:	2003      	movs	r0, #3
 80043f4:	f7fd facb 	bl	800198e <matmul>
    matmul(NUMBER_STATES, NUMBER_SENSOR, NUMBER_SENSOR, ekf_state->Placeholder_P_priori_mult_H_T, ekf_state->S_inv, ekf_state->K, true);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f203 404c 	addw	r0, r3, #1100	; 0x44c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f502 7251 	add.w	r2, r2, #836	; 0x344
 800440a:	2101      	movs	r1, #1
 800440c:	9102      	str	r1, [sp, #8]
 800440e:	9201      	str	r2, [sp, #4]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4603      	mov	r3, r0
 8004414:	2206      	movs	r2, #6
 8004416:	2106      	movs	r1, #6
 8004418:	2003      	movs	r0, #3
 800441a:	f7fd fab8 	bl	800198e <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_SENSOR, ekf_state->K, ekf_state->y, ekf_state->x_est, true);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004430:	2201      	movs	r2, #1
 8004432:	9201      	str	r2, [sp, #4]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4603      	mov	r3, r0
 8004438:	460a      	mov	r2, r1
 800443a:	2106      	movs	r1, #6
 800443c:	2003      	movs	r0, #3
 800443e:	f7fd fb40 	bl	8001ac2 <matvecprod>
    vecadd(NUMBER_STATES, ekf_state->x_priori, ekf_state->x_est, ekf_state->x_est);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004454:	2003      	movs	r0, #3
 8004456:	f7fd f95e 	bl	8001716 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, ekf_state->Placeholder_eye);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8004460:	4619      	mov	r1, r3
 8004462:	2003      	movs	r0, #3
 8004464:	f7fd f8b7 	bl	80015d6 <eye>
    matmul(NUMBER_STATES, NUMBER_SENSOR, NUMBER_STATES, ekf_state->K, ekf_state->H, ekf_state->Placeholder_K_mult_H, true);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	336c      	adds	r3, #108	; 0x6c
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	f202 42dc 	addw	r2, r2, #1244	; 0x4dc
 8004478:	2101      	movs	r1, #1
 800447a:	9102      	str	r1, [sp, #8]
 800447c:	9201      	str	r2, [sp, #4]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4603      	mov	r3, r0
 8004482:	2203      	movs	r2, #3
 8004484:	2106      	movs	r1, #6
 8004486:	2003      	movs	r0, #3
 8004488:	f7fd fa81 	bl	800198e <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_eye, ekf_state->Placeholder_K_mult_H, ekf_state->Placeholder_P_est);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 6297 	add.w	r2, r3, #1208	; 0x4b8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f203 41dc 	addw	r1, r3, #1244	; 0x4dc
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	460b      	mov	r3, r1
 80044a2:	2103      	movs	r1, #3
 80044a4:	2003      	movs	r0, #3
 80044a6:	f7fd f9ff 	bl	80018a8 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, ekf_state->Placeholder_P_est, ekf_state->P_priori, ekf_state->P_est, true);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80044bc:	2101      	movs	r1, #1
 80044be:	9102      	str	r1, [sp, #8]
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4603      	mov	r3, r0
 80044c6:	2203      	movs	r2, #3
 80044c8:	2103      	movs	r1, #3
 80044ca:	2003      	movs	r0, #3
 80044cc:	f7fd fa5f 	bl	800198e <matmul>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	3dcccccd 	.word	0x3dcccccd

080044dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044e2:	e003      	b.n	80044ec <LoopCopyDataInit>

080044e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044ea:	3104      	adds	r1, #4

080044ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044ec:	480b      	ldr	r0, [pc, #44]	; (800451c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044f4:	d3f6      	bcc.n	80044e4 <CopyDataInit>
  ldr  r2, =_sbss
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044f8:	e002      	b.n	8004500 <LoopFillZerobss>

080044fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044fc:	f842 3b04 	str.w	r3, [r2], #4

08004500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004504:	d3f9      	bcc.n	80044fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004506:	f7fe fc99 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f011 fedd 	bl	80162c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800450e:	f7fc fd33 	bl	8000f78 <main>
  bx  lr    
 8004512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004514:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004518:	08018548 	.word	0x08018548
  ldr  r0, =_sdata
 800451c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004520:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8004524:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8004528:	2001706c 	.word	0x2001706c

0800452c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC_IRQHandler>

0800452e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004532:	2003      	movs	r0, #3
 8004534:	f000 f8f7 	bl	8004726 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004538:	2000      	movs	r0, #0
 800453a:	f7fe fb91 	bl	8002c60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800453e:	f7fe f94d 	bl	80027dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_IncTick+0x20>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_IncTick+0x24>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4413      	add	r3, r2
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_IncTick+0x24>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000008 	.word	0x20000008
 800456c:	200152e4 	.word	0x200152e4

08004570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return uwTick;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_GetTick+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	200152e4 	.word	0x200152e4

08004588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004590:	f7ff ffee 	bl	8004570 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d005      	beq.n	80045ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_Delay+0x40>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ae:	bf00      	nop
 80045b0:	f7ff ffde 	bl	8004570 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d8f7      	bhi.n	80045b0 <HAL_Delay+0x28>
  {
  }
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000008 	.word	0x20000008

080045cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <__NVIC_SetPriorityGrouping+0x40>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e8:	4013      	ands	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <__NVIC_SetPriorityGrouping+0x44>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <__NVIC_SetPriorityGrouping+0x40>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00
 8004610:	05fa0000 	.word	0x05fa0000

08004614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <__NVIC_GetPriorityGrouping+0x18>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0307 	and.w	r3, r3, #7
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	db0b      	blt.n	800465a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <__NVIC_EnableIRQ+0x38>)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2001      	movs	r0, #1
 8004652:	fa00 f202 	lsl.w	r2, r0, r2
 8004656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000e100 	.word	0xe000e100

0800466c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	2b00      	cmp	r3, #0
 800467e:	db0a      	blt.n	8004696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	b2da      	uxtb	r2, r3
 8004684:	490c      	ldr	r1, [pc, #48]	; (80046b8 <__NVIC_SetPriority+0x4c>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	440b      	add	r3, r1
 8004690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004694:	e00a      	b.n	80046ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4908      	ldr	r1, [pc, #32]	; (80046bc <__NVIC_SetPriority+0x50>)
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	3b04      	subs	r3, #4
 80046a4:	0112      	lsls	r2, r2, #4
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	440b      	add	r3, r1
 80046aa:	761a      	strb	r2, [r3, #24]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000e100 	.word	0xe000e100
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f1c3 0307 	rsb	r3, r3, #7
 80046da:	2b04      	cmp	r3, #4
 80046dc:	bf28      	it	cs
 80046de:	2304      	movcs	r3, #4
 80046e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d902      	bls.n	80046f0 <NVIC_EncodePriority+0x30>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3b03      	subs	r3, #3
 80046ee:	e000      	b.n	80046f2 <NVIC_EncodePriority+0x32>
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	401a      	ands	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004708:	f04f 31ff 	mov.w	r1, #4294967295
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43d9      	mvns	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	4313      	orrs	r3, r2
         );
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ff4c 	bl	80045cc <__NVIC_SetPriorityGrouping>
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800474e:	f7ff ff61 	bl	8004614 <__NVIC_GetPriorityGrouping>
 8004752:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	f7ff ffb1 	bl	80046c0 <NVIC_EncodePriority>
 800475e:	4602      	mov	r2, r0
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff80 	bl	800466c <__NVIC_SetPriority>
}
 800476c:	bf00      	nop
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ff54 	bl	8004630 <__NVIC_EnableIRQ>
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7ff fee8 	bl	8004570 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e099      	b.n	80048e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047cc:	e00f      	b.n	80047ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ce:	f7ff fecf 	bl	8004570 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d908      	bls.n	80047ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e078      	b.n	80048e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e8      	bne.n	80047ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_DMA_Init+0x158>)
 8004808:	4013      	ands	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800481a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b04      	cmp	r3, #4
 8004846:	d107      	bne.n	8004858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4313      	orrs	r3, r2
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b04      	cmp	r3, #4
 8004880:	d117      	bne.n	80048b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 faa5 	bl	8004de4 <DMA_CheckFifoParam>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ae:	2301      	movs	r3, #1
 80048b0:	e016      	b.n	80048e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa5c 	bl	8004d78 <DMA_CalcBaseAndBitshift>
 80048c0:	4603      	mov	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	409a      	lsls	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	f010803f 	.word	0xf010803f

080048ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_DMA_Start_IT+0x26>
 800490e:	2302      	movs	r3, #2
 8004910:	e048      	b.n	80049a4 <HAL_DMA_Start_IT+0xb8>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d137      	bne.n	8004996 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f9ee 	bl	8004d1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0216 	orr.w	r2, r2, #22
 800495a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800496a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e005      	b.n	80049a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d004      	beq.n	80049ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2280      	movs	r2, #128	; 0x80
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00c      	b.n	80049e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2205      	movs	r2, #5
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80049fc:	4b92      	ldr	r3, [pc, #584]	; (8004c48 <HAL_DMA_IRQHandler+0x258>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a92      	ldr	r2, [pc, #584]	; (8004c4c <HAL_DMA_IRQHandler+0x25c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01a      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d013      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0204 	bic.w	r2, r2, #4
 8004a42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	2208      	movs	r2, #8
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	2201      	movs	r2, #1
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0202 	orr.w	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2204      	movs	r2, #4
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d012      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	f043 0204 	orr.w	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	2210      	movs	r2, #16
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d043      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03c      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	2210      	movs	r2, #16
 8004aec:	409a      	lsls	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d018      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d024      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
 8004b1e:	e01f      	b.n	8004b60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4798      	blx	r3
 8004b30:	e016      	b.n	8004b60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d107      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0208 	bic.w	r2, r2, #8
 8004b4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	2220      	movs	r2, #32
 8004b66:	409a      	lsls	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 808e 	beq.w	8004c8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8086 	beq.w	8004c8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	2220      	movs	r2, #32
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d136      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0216 	bic.w	r2, r2, #22
 8004ba8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <HAL_DMA_IRQHandler+0x1da>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0208 	bic.w	r2, r2, #8
 8004bd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	223f      	movs	r2, #63	; 0x3f
 8004be0:	409a      	lsls	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d07d      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
        }
        return;
 8004c06:	e078      	b.n	8004cfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01c      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d030      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
 8004c34:	e02b      	b.n	8004c8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
 8004c46:	e022      	b.n	8004c8e <HAL_DMA_IRQHandler+0x29e>
 8004c48:	20000000 	.word	0x20000000
 8004c4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0210 	bic.w	r2, r2, #16
 8004c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d032      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d022      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d307      	bcc.n	8004cd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f2      	bne.n	8004cba <HAL_DMA_IRQHandler+0x2ca>
 8004cd4:	e000      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cd6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	e000      	b.n	8004cfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004cfa:	bf00      	nop
    }
  }
}
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop

08004d04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d108      	bne.n	8004d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d5a:	e007      	b.n	8004d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3b10      	subs	r3, #16
 8004d88:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x60>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <DMA_CalcBaseAndBitshift+0x64>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d908      	bls.n	8004db8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <DMA_CalcBaseAndBitshift+0x68>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
 8004db6:	e006      	b.n	8004dc6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <DMA_CalcBaseAndBitshift+0x68>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	aaaaaaab 	.word	0xaaaaaaab
 8004ddc:	08018420 	.word	0x08018420
 8004de0:	fffffc00 	.word	0xfffffc00

08004de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11f      	bne.n	8004e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d855      	bhi.n	8004eb0 <DMA_CheckFifoParam+0xcc>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <DMA_CheckFifoParam+0x28>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e2f 	.word	0x08004e2f
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004eb1 	.word	0x08004eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d045      	beq.n	8004eb4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2c:	e042      	b.n	8004eb4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e36:	d13f      	bne.n	8004eb8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3c:	e03c      	b.n	8004eb8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e46:	d121      	bne.n	8004e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d836      	bhi.n	8004ebc <DMA_CheckFifoParam+0xd8>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <DMA_CheckFifoParam+0x70>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e6b 	.word	0x08004e6b
 8004e5c:	08004e65 	.word	0x08004e65
 8004e60:	08004e7d 	.word	0x08004e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e02f      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d024      	beq.n	8004ec0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7a:	e021      	b.n	8004ec0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e84:	d11e      	bne.n	8004ec4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e8a:	e01b      	b.n	8004ec4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <DMA_CheckFifoParam+0xb4>
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d003      	beq.n	8004e9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e96:	e018      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	e015      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00e      	beq.n	8004ec8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
      break;
 8004eae:	e00b      	b.n	8004ec8 <DMA_CheckFifoParam+0xe4>
      break;
 8004eb0:	bf00      	nop
 8004eb2:	e00a      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;
 8004eb4:	bf00      	nop
 8004eb6:	e008      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;
 8004eb8:	bf00      	nop
 8004eba:	e006      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;
 8004ebc:	bf00      	nop
 8004ebe:	e004      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;
 8004ec0:	bf00      	nop
 8004ec2:	e002      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;   
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <DMA_CheckFifoParam+0xe6>
      break;
 8004ec8:	bf00      	nop
    }
  } 
  
  return status; 
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e175      	b.n	80051e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ef8:	2201      	movs	r2, #1
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	f040 8164 	bne.w	80051de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d00b      	beq.n	8004f36 <HAL_GPIO_Init+0x5e>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d007      	beq.n	8004f36 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f2a:	2b11      	cmp	r3, #17
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b12      	cmp	r3, #18
 8004f34:	d130      	bne.n	8004f98 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0201 	and.w	r2, r3, #1
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x100>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b12      	cmp	r3, #18
 8004fd6:	d123      	bne.n	8005020 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	08da      	lsrs	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3208      	adds	r2, #8
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	220f      	movs	r2, #15
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3208      	adds	r2, #8
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	2203      	movs	r2, #3
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0203 	and.w	r2, r3, #3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80be 	beq.w	80051de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_GPIO_Init+0x320>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <HAL_GPIO_Init+0x320>)
 8005068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506c:	6453      	str	r3, [r2, #68]	; 0x44
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_GPIO_Init+0x320>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800507a:	4a60      	ldr	r2, [pc, #384]	; (80051fc <HAL_GPIO_Init+0x324>)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	3302      	adds	r3, #2
 8005082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005086:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	220f      	movs	r2, #15
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a57      	ldr	r2, [pc, #348]	; (8005200 <HAL_GPIO_Init+0x328>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d037      	beq.n	8005116 <HAL_GPIO_Init+0x23e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a56      	ldr	r2, [pc, #344]	; (8005204 <HAL_GPIO_Init+0x32c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d031      	beq.n	8005112 <HAL_GPIO_Init+0x23a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a55      	ldr	r2, [pc, #340]	; (8005208 <HAL_GPIO_Init+0x330>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <HAL_GPIO_Init+0x236>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a54      	ldr	r2, [pc, #336]	; (800520c <HAL_GPIO_Init+0x334>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d025      	beq.n	800510a <HAL_GPIO_Init+0x232>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a53      	ldr	r2, [pc, #332]	; (8005210 <HAL_GPIO_Init+0x338>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01f      	beq.n	8005106 <HAL_GPIO_Init+0x22e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <HAL_GPIO_Init+0x33c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d019      	beq.n	8005102 <HAL_GPIO_Init+0x22a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a51      	ldr	r2, [pc, #324]	; (8005218 <HAL_GPIO_Init+0x340>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_GPIO_Init+0x226>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a50      	ldr	r2, [pc, #320]	; (800521c <HAL_GPIO_Init+0x344>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00d      	beq.n	80050fa <HAL_GPIO_Init+0x222>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4f      	ldr	r2, [pc, #316]	; (8005220 <HAL_GPIO_Init+0x348>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <HAL_GPIO_Init+0x21e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <HAL_GPIO_Init+0x34c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d101      	bne.n	80050f2 <HAL_GPIO_Init+0x21a>
 80050ee:	2309      	movs	r3, #9
 80050f0:	e012      	b.n	8005118 <HAL_GPIO_Init+0x240>
 80050f2:	230a      	movs	r3, #10
 80050f4:	e010      	b.n	8005118 <HAL_GPIO_Init+0x240>
 80050f6:	2308      	movs	r3, #8
 80050f8:	e00e      	b.n	8005118 <HAL_GPIO_Init+0x240>
 80050fa:	2307      	movs	r3, #7
 80050fc:	e00c      	b.n	8005118 <HAL_GPIO_Init+0x240>
 80050fe:	2306      	movs	r3, #6
 8005100:	e00a      	b.n	8005118 <HAL_GPIO_Init+0x240>
 8005102:	2305      	movs	r3, #5
 8005104:	e008      	b.n	8005118 <HAL_GPIO_Init+0x240>
 8005106:	2304      	movs	r3, #4
 8005108:	e006      	b.n	8005118 <HAL_GPIO_Init+0x240>
 800510a:	2303      	movs	r3, #3
 800510c:	e004      	b.n	8005118 <HAL_GPIO_Init+0x240>
 800510e:	2302      	movs	r3, #2
 8005110:	e002      	b.n	8005118 <HAL_GPIO_Init+0x240>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_GPIO_Init+0x240>
 8005116:	2300      	movs	r3, #0
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f002 0203 	and.w	r2, r2, #3
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	4093      	lsls	r3, r2
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005128:	4934      	ldr	r1, [pc, #208]	; (80051fc <HAL_GPIO_Init+0x324>)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	3302      	adds	r3, #2
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005136:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <HAL_GPIO_Init+0x350>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800515a:	4a33      	ldr	r2, [pc, #204]	; (8005228 <HAL_GPIO_Init+0x350>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005160:	4b31      	ldr	r3, [pc, #196]	; (8005228 <HAL_GPIO_Init+0x350>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_GPIO_Init+0x350>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800518a:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_GPIO_Init+0x350>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <HAL_GPIO_Init+0x350>)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_GPIO_Init+0x350>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d8:	4a13      	ldr	r2, [pc, #76]	; (8005228 <HAL_GPIO_Init+0x350>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	f67f ae86 	bls.w	8004ef8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051ec:	bf00      	nop
 80051ee:	3724      	adds	r7, #36	; 0x24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40013800 	.word	0x40013800
 8005200:	40020000 	.word	0x40020000
 8005204:	40020400 	.word	0x40020400
 8005208:	40020800 	.word	0x40020800
 800520c:	40020c00 	.word	0x40020c00
 8005210:	40021000 	.word	0x40021000
 8005214:	40021400 	.word	0x40021400
 8005218:	40021800 	.word	0x40021800
 800521c:	40021c00 	.word	0x40021c00
 8005220:	40022000 	.word	0x40022000
 8005224:	40022400 	.word	0x40022400
 8005228:	40013c00 	.word	0x40013c00

0800522c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	807b      	strh	r3, [r7, #2]
 8005238:	4613      	mov	r3, r2
 800523a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800523c:	787b      	ldrb	r3, [r7, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005242:	887a      	ldrh	r2, [r7, #2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005248:	e003      	b.n	8005252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800524a:	887b      	ldrh	r3, [r7, #2]
 800524c:	041a      	lsls	r2, r3, #16
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	619a      	str	r2, [r3, #24]
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800525e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005260:	b08f      	sub	sp, #60	; 0x3c
 8005262:	af0a      	add	r7, sp, #40	; 0x28
 8005264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e116      	b.n	800549e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f010 fcc4 	bl	8015c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2203      	movs	r2, #3
 8005294:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f006 fa57 	bl	800b762 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	687e      	ldr	r6, [r7, #4]
 80052bc:	466d      	mov	r5, sp
 80052be:	f106 0410 	add.w	r4, r6, #16
 80052c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80052d2:	1d33      	adds	r3, r6, #4
 80052d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f006 f938 	bl	800b54c <USB_CoreInit>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0d7      	b.n	800549e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f006 fa45 	bl	800b784 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	e04a      	b.n	8005396 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	333d      	adds	r3, #61	; 0x3d
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	333c      	adds	r3, #60	; 0x3c
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005328:	7bfa      	ldrb	r2, [r7, #15]
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	b298      	uxth	r0, r3
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3342      	adds	r3, #66	; 0x42
 800533c:	4602      	mov	r2, r0
 800533e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	333f      	adds	r3, #63	; 0x3f
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	3344      	adds	r3, #68	; 0x44
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3348      	adds	r3, #72	; 0x48
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3350      	adds	r3, #80	; 0x50
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	3301      	adds	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	7bfa      	ldrb	r2, [r7, #15]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d3af      	bcc.n	8005300 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e044      	b.n	8005430 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053a6:	7bfa      	ldrb	r2, [r7, #15]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	3301      	adds	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d3b5      	bcc.n	80053a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	687e      	ldr	r6, [r7, #4]
 8005442:	466d      	mov	r5, sp
 8005444:	f106 0410 	add.w	r4, r6, #16
 8005448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800544a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800544c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800544e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005454:	e885 0003 	stmia.w	r5, {r0, r1}
 8005458:	1d33      	adds	r3, r6, #4
 800545a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800545c:	6838      	ldr	r0, [r7, #0]
 800545e:	f006 f9bb 	bl	800b7d8 <USB_DevInit>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e014      	b.n	800549e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b01      	cmp	r3, #1
 800548a:	d102      	bne.n	8005492 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f881 	bl	8006594 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f007 fa0a 	bl	800c8b0 <USB_DevDisconnect>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_PCD_Start+0x16>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e012      	b.n	80054e2 <HAL_PCD_Start+0x3c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f007 f9d9 	bl	800c880 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f006 f934 	bl	800b740 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054ea:	b590      	push	{r4, r7, lr}
 80054ec:	b08d      	sub	sp, #52	; 0x34
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f007 fa80 	bl	800ca06 <USB_GetMode>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 83ca 	bne.w	8005ca2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f007 f9e4 	bl	800c8e0 <USB_ReadInterrupts>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 83c0 	beq.w	8005ca0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f007 f9db 	bl	800c8e0 <USB_ReadInterrupts>
 800552a:	4603      	mov	r3, r0
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d107      	bne.n	8005544 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f002 0202 	and.w	r2, r2, #2
 8005542:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f007 f9c9 	bl	800c8e0 <USB_ReadInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d161      	bne.n	800561c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0210 	bic.w	r2, r2, #16
 8005566:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	3304      	adds	r3, #4
 8005586:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	0c5b      	lsrs	r3, r3, #17
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	2b02      	cmp	r3, #2
 8005592:	d124      	bne.n	80055de <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d035      	beq.n	800560c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6a38      	ldr	r0, [r7, #32]
 80055b4:	f007 f841 	bl	800c63a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c4:	441a      	add	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055d6:	441a      	add	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	619a      	str	r2, [r3, #24]
 80055dc:	e016      	b.n	800560c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	0c5b      	lsrs	r3, r3, #17
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d110      	bne.n	800560c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055f0:	2208      	movs	r2, #8
 80055f2:	4619      	mov	r1, r3
 80055f4:	6a38      	ldr	r0, [r7, #32]
 80055f6:	f007 f820 	bl	800c63a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005606:	441a      	add	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0210 	orr.w	r2, r2, #16
 800561a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f007 f95d 	bl	800c8e0 <USB_ReadInterrupts>
 8005626:	4603      	mov	r3, r0
 8005628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005630:	d16e      	bne.n	8005710 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f007 f963 	bl	800c906 <USB_ReadDevAllOutEpInterrupt>
 8005640:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005642:	e062      	b.n	800570a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d057      	beq.n	80056fe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f007 f988 	bl	800c96e <USB_ReadDevOutEPInterrupt>
 800565e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	2301      	movs	r3, #1
 800567a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800567c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fdde 	bl	8006240 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	2308      	movs	r3, #8
 800569e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80056a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fed8 	bl	8006458 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	461a      	mov	r2, r3
 80056c0:	2310      	movs	r3, #16
 80056c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	461a      	mov	r2, r3
 80056dc:	2320      	movs	r3, #32
 80056de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	3301      	adds	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	d199      	bne.n	8005644 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f007 f8e3 	bl	800c8e0 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005724:	f040 80c0 	bne.w	80058a8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f007 f904 	bl	800c93a <USB_ReadDevAllInEpInterrupt>
 8005732:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005738:	e0b2      	b.n	80058a0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80a7 	beq.w	8005894 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f007 f92a 	bl	800c9aa <USB_ReadDevInEPInterrupt>
 8005756:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d057      	beq.n	8005812 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	43db      	mvns	r3, r3
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005782:	4013      	ands	r3, r2
 8005784:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	2301      	movs	r3, #1
 8005796:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d132      	bne.n	8005806 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3348      	adds	r3, #72	; 0x48
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	3344      	adds	r3, #68	; 0x44
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4419      	add	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4403      	add	r3, r0
 80057d4:	3348      	adds	r3, #72	; 0x48
 80057d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <HAL_PCD_IRQHandler+0x31c>
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e2:	4613      	mov	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3350      	adds	r3, #80	; 0x50
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057fe:	461a      	mov	r2, r3
 8005800:	2101      	movs	r1, #1
 8005802:	f007 f933 	bl	800ca6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	b2db      	uxtb	r3, r3
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f010 fa86 	bl	8015d1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2308      	movs	r3, #8
 800582c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	2310      	movs	r3, #16
 8005848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	461a      	mov	r2, r3
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	461a      	mov	r2, r3
 800587e:	2302      	movs	r3, #2
 8005880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800588c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fc48 	bl	8006124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	3301      	adds	r3, #1
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f af49 	bne.w	800573a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f007 f817 	bl	800c8e0 <USB_ReadInterrupts>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058bc:	d122      	bne.n	8005904 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058e4:	2100      	movs	r1, #0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f010 fc68 	bl	80161bc <HAL_PCDEx_LPM_Callback>
 80058ec:	e002      	b.n	80058f4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f010 fa8c 	bl	8015e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f006 ffe9 	bl	800c8e0 <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	d112      	bne.n	8005940 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f010 fa48 	bl	8015dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800593e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f006 ffcb 	bl	800c8e0 <USB_ReadInterrupts>
 800594a:	4603      	mov	r3, r0
 800594c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005954:	d121      	bne.n	800599a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005964:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d111      	bne.n	8005994 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	089b      	lsrs	r3, r3, #2
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800598a:	2101      	movs	r1, #1
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f010 fc15 	bl	80161bc <HAL_PCDEx_LPM_Callback>
 8005992:	e002      	b.n	800599a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f010 fa13 	bl	8015dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f006 ff9e 	bl	800c8e0 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	f040 80c7 	bne.w	8005b40 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2110      	movs	r1, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f006 f871 	bl	800bab4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d6:	e056      	b.n	8005a86 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	3301      	adds	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3a3      	bcc.n	80059d8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005aa2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d016      	beq.n	8005ada <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abc:	f043 030b 	orr.w	r3, r3, #11
 8005ac0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad2:	f043 030b 	orr.w	r3, r3, #11
 8005ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad8:	e015      	b.n	8005b06 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f242 032b 	movw	r3, #8235	; 0x202b
 8005aee:	4313      	orrs	r3, r2
 8005af0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b00:	f043 030b 	orr.w	r3, r3, #11
 8005b04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f006 ff9e 	bl	800ca6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f006 fecb 	bl	800c8e0 <USB_ReadInterrupts>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b54:	d124      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f006 ff62 	bl	800ca24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f006 f806 	bl	800bb76 <USB_GetDevSpeed>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	f001 f999 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8005b7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	4620      	mov	r0, r4
 8005b86:	f005 fd39 	bl	800b5fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f010 f8ef 	bl	8015d6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f006 fe9b 	bl	800c8e0 <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10a      	bne.n	8005bca <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f010 f8cc 	bl	8015d52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f002 0208 	and.w	r2, r2, #8
 8005bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f006 fe86 	bl	800c8e0 <USB_ReadInterrupts>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d10f      	bne.n	8005c00 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f010 f92e 	bl	8015e4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f006 fe6b 	bl	800c8e0 <USB_ReadInterrupts>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c14:	d10f      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f010 f901 	bl	8015e28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f006 fe50 	bl	800c8e0 <USB_ReadInterrupts>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d10a      	bne.n	8005c62 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f010 f90f 	bl	8015e70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f006 fe3a 	bl	800c8e0 <USB_ReadInterrupts>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d115      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f010 f8ff 	bl	8015e8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e000      	b.n	8005ca2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005ca0:	bf00      	nop
    }
  }
}
 8005ca2:	3734      	adds	r7, #52	; 0x34
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_PCD_SetAddress+0x1a>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e013      	b.n	8005cea <HAL_PCD_SetAddress+0x42>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f006 fdaa 	bl	800c834 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4603      	mov	r3, r0
 8005d02:	70fb      	strb	r3, [r7, #3]
 8005d04:	460b      	mov	r3, r1
 8005d06:	803b      	strh	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da0f      	bge.n	8005d38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	3338      	adds	r3, #56	; 0x38
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	705a      	strb	r2, [r3, #1]
 8005d36:	e00f      	b.n	8005d58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	4613      	mov	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d64:	883a      	ldrh	r2, [r7, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	78ba      	ldrb	r2, [r7, #2]
 8005d6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d82:	78bb      	ldrb	r3, [r7, #2]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_PCD_EP_Open+0xaa>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e00e      	b.n	8005dba <HAL_PCD_EP_Open+0xc8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f005 ff08 	bl	800bbc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da0f      	bge.n	8005df6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	3338      	adds	r3, #56	; 0x38
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	3304      	adds	r3, #4
 8005dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	705a      	strb	r2, [r3, #1]
 8005df4:	e00f      	b.n	8005e16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_PCD_EP_Close+0x6e>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e00e      	b.n	8005e4e <HAL_PCD_EP_Close+0x8c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f005 ff46 	bl	800bcd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	460b      	mov	r3, r1
 8005e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d102      	bne.n	8005eb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	f006 fa29 	bl	800c320 <USB_EP0StartXfer>
 8005ece:	e008      	b.n	8005ee2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	f005 ffd3 	bl	800be88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	f003 020f 	and.w	r2, r3, #15
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	f003 020f 	and.w	r2, r3, #15
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	3338      	adds	r3, #56	; 0x38
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3304      	adds	r3, #4
 8005f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	f006 f9c7 	bl	800c320 <USB_EP0StartXfer>
 8005f92:	e008      	b.n	8005fa6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	f005 ff71 	bl	800be88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d901      	bls.n	8005fce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e050      	b.n	8006070 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da0f      	bge.n	8005ff6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	f003 020f 	and.w	r2, r3, #15
 8005fdc:	4613      	mov	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	3338      	adds	r3, #56	; 0x38
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	705a      	strb	r2, [r3, #1]
 8005ff4:	e00d      	b.n	8006012 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_PCD_EP_SetStall+0x82>
 800602e:	2302      	movs	r3, #2
 8006030:	e01e      	b.n	8006070 <HAL_PCD_EP_SetStall+0xc0>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	4618      	mov	r0, r3
 8006042:	f006 fb23 	bl	800c68c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	b2d9      	uxtb	r1, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006060:	461a      	mov	r2, r3
 8006062:	f006 fd03 	bl	800ca6c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d901      	bls.n	8006096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e042      	b.n	800611c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0f      	bge.n	80060be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3338      	adds	r3, #56	; 0x38
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	705a      	strb	r2, [r3, #1]
 80060bc:	e00f      	b.n	80060de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	4613      	mov	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	3304      	adds	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_PCD_EP_ClrStall+0x86>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e00e      	b.n	800611c <HAL_PCD_EP_ClrStall+0xa4>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	4618      	mov	r0, r3
 800610e:	f006 fb2b 	bl	800c768 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3338      	adds	r3, #56	; 0x38
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	429a      	cmp	r2, r3
 8006156:	d901      	bls.n	800615c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e06c      	b.n	8006236 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	429a      	cmp	r2, r3
 8006170:	d902      	bls.n	8006178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3303      	adds	r3, #3
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006180:	e02b      	b.n	80061da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d902      	bls.n	800619e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3303      	adds	r3, #3
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4603      	mov	r3, r0
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f006 fa07 	bl	800c5d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d809      	bhi.n	8006204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d203      	bcs.n	8006204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1be      	bne.n	8006182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d811      	bhi.n	8006234 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	2201      	movs	r2, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	43db      	mvns	r3, r3
 800622a:	6939      	ldr	r1, [r7, #16]
 800622c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006230:	4013      	ands	r3, r2
 8006232:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	333c      	adds	r3, #60	; 0x3c
 8006258:	3304      	adds	r3, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b01      	cmp	r3, #1
 8006274:	f040 80a0 	bne.w	80063b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d015      	beq.n	80062ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a72      	ldr	r2, [pc, #456]	; (8006450 <PCD_EP_OutXfrComplete_int+0x210>)
 8006286:	4293      	cmp	r3, r2
 8006288:	f240 80dd 	bls.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80d7 	beq.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062aa:	6093      	str	r3, [r2, #8]
 80062ac:	e0cb      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	461a      	mov	r2, r3
 80062c6:	2320      	movs	r3, #32
 80062c8:	6093      	str	r3, [r2, #8]
 80062ca:	e0bc      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 80b7 	bne.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <PCD_EP_OutXfrComplete_int+0x210>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d90f      	bls.n	8006300 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fc:	6093      	str	r3, [r2, #8]
 80062fe:	e0a2      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006312:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	0159      	lsls	r1, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	440b      	add	r3, r1
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006326:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4403      	add	r3, r0
 8006336:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800633a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4419      	add	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4403      	add	r3, r0
 8006374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006378:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d114      	bne.n	80063aa <PCD_EP_OutXfrComplete_int+0x16a>
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063a2:	461a      	mov	r2, r3
 80063a4:	2101      	movs	r1, #1
 80063a6:	f006 fb61 	bl	800ca6c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f00f fc99 	bl	8015ce8 <HAL_PCD_DataOutStageCallback>
 80063b6:	e046      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a26      	ldr	r2, [pc, #152]	; (8006454 <PCD_EP_OutXfrComplete_int+0x214>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d124      	bne.n	800640a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	461a      	mov	r2, r3
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	6093      	str	r3, [r2, #8]
 80063de:	e032      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	461a      	mov	r2, r3
 80063f8:	2320      	movs	r3, #32
 80063fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f00f fc70 	bl	8015ce8 <HAL_PCD_DataOutStageCallback>
 8006408:	e01d      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006432:	461a      	mov	r2, r3
 8006434:	2100      	movs	r1, #0
 8006436:	f006 fb19 	bl	800ca6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f00f fc51 	bl	8015ce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	4f54300a 	.word	0x4f54300a
 8006454:	4f54310a 	.word	0x4f54310a

08006458 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	333c      	adds	r3, #60	; 0x3c
 8006470:	3304      	adds	r3, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d90e      	bls.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	461a      	mov	r2, r3
 80064a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f00f fc09 	bl	8015cc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d90c      	bls.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d108      	bne.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064cc:	461a      	mov	r2, r3
 80064ce:	2101      	movs	r1, #1
 80064d0:	f006 facc 	bl	800ca6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	4f54300a 	.word	0x4f54300a

080064e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
 80064f0:	4613      	mov	r3, r2
 80064f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006502:	883b      	ldrh	r3, [r7, #0]
 8006504:	0419      	lsls	r1, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	430a      	orrs	r2, r1
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
 8006510:	e028      	b.n	8006564 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e00d      	b.n	8006542 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3340      	adds	r3, #64	; 0x40
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	3301      	adds	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	3b01      	subs	r3, #1
 8006548:	429a      	cmp	r2, r3
 800654a:	d3ec      	bcc.n	8006526 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800654c:	883b      	ldrh	r3, [r7, #0]
 800654e:	0418      	lsls	r0, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	3b01      	subs	r3, #1
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4302      	orrs	r2, r0
 800655c:	3340      	adds	r3, #64	; 0x40
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	10000003 	.word	0x10000003

080065dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e291      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8087 	beq.w	800670e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006600:	4b96      	ldr	r3, [pc, #600]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 030c 	and.w	r3, r3, #12
 8006608:	2b04      	cmp	r3, #4
 800660a:	d00c      	beq.n	8006626 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800660c:	4b93      	ldr	r3, [pc, #588]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d112      	bne.n	800663e <HAL_RCC_OscConfig+0x62>
 8006618:	4b90      	ldr	r3, [pc, #576]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006624:	d10b      	bne.n	800663e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006626:	4b8d      	ldr	r3, [pc, #564]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d06c      	beq.n	800670c <HAL_RCC_OscConfig+0x130>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d168      	bne.n	800670c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e26b      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006646:	d106      	bne.n	8006656 <HAL_RCC_OscConfig+0x7a>
 8006648:	4b84      	ldr	r3, [pc, #528]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a83      	ldr	r2, [pc, #524]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800664e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e02e      	b.n	80066b4 <HAL_RCC_OscConfig+0xd8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10c      	bne.n	8006678 <HAL_RCC_OscConfig+0x9c>
 800665e:	4b7f      	ldr	r3, [pc, #508]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a7e      	ldr	r2, [pc, #504]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b7c      	ldr	r3, [pc, #496]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7b      	ldr	r2, [pc, #492]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e01d      	b.n	80066b4 <HAL_RCC_OscConfig+0xd8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006680:	d10c      	bne.n	800669c <HAL_RCC_OscConfig+0xc0>
 8006682:	4b76      	ldr	r3, [pc, #472]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a75      	ldr	r2, [pc, #468]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b73      	ldr	r3, [pc, #460]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a72      	ldr	r2, [pc, #456]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e00b      	b.n	80066b4 <HAL_RCC_OscConfig+0xd8>
 800669c:	4b6f      	ldr	r3, [pc, #444]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a6e      	ldr	r2, [pc, #440]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80066a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b6c      	ldr	r3, [pc, #432]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a6b      	ldr	r2, [pc, #428]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80066ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd ff58 	bl	8004570 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c4:	f7fd ff54 	bl	8004570 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	; 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e21f      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d6:	4b61      	ldr	r3, [pc, #388]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0xe8>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fd ff44 	bl	8004570 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fd ff40 	bl	8004570 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e20b      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fe:	4b57      	ldr	r3, [pc, #348]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x110>
 800670a:	e000      	b.n	800670e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d069      	beq.n	80067ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800671a:	4b50      	ldr	r3, [pc, #320]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 030c 	and.w	r3, r3, #12
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006726:	4b4d      	ldr	r3, [pc, #308]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b08      	cmp	r3, #8
 8006730:	d11c      	bne.n	800676c <HAL_RCC_OscConfig+0x190>
 8006732:	4b4a      	ldr	r3, [pc, #296]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d116      	bne.n	800676c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673e:	4b47      	ldr	r3, [pc, #284]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <HAL_RCC_OscConfig+0x17a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e1df      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006756:	4b41      	ldr	r3, [pc, #260]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	493d      	ldr	r1, [pc, #244]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676a:	e040      	b.n	80067ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d023      	beq.n	80067bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006774:	4b39      	ldr	r3, [pc, #228]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a38      	ldr	r2, [pc, #224]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fd fef6 	bl	8004570 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006788:	f7fd fef2 	bl	8004570 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e1bd      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	4b30      	ldr	r3, [pc, #192]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a6:	4b2d      	ldr	r3, [pc, #180]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4929      	ldr	r1, [pc, #164]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]
 80067ba:	e018      	b.n	80067ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067bc:	4b27      	ldr	r3, [pc, #156]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a26      	ldr	r2, [pc, #152]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c8:	f7fd fed2 	bl	8004570 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d0:	f7fd fece 	bl	8004570 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e199      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e2:	4b1e      	ldr	r3, [pc, #120]	; (800685c <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d038      	beq.n	800686c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d019      	beq.n	8006836 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680e:	f7fd feaf 	bl	8004570 <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006816:	f7fd feab 	bl	8004570 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e176      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006828:	4b0c      	ldr	r3, [pc, #48]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800682a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x23a>
 8006834:	e01a      	b.n	800686c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_RCC_OscConfig+0x280>)
 8006838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <HAL_RCC_OscConfig+0x280>)
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006842:	f7fd fe95 	bl	8004570 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006848:	e00a      	b.n	8006860 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684a:	f7fd fe91 	bl	8004570 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d903      	bls.n	8006860 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e15c      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
 800685c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006860:	4b91      	ldr	r3, [pc, #580]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ee      	bne.n	800684a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80a4 	beq.w	80069c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800687a:	4b8b      	ldr	r3, [pc, #556]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006886:	4b88      	ldr	r3, [pc, #544]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	4a87      	ldr	r2, [pc, #540]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	6413      	str	r3, [r2, #64]	; 0x40
 8006892:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068a2:	4b82      	ldr	r3, [pc, #520]	; (8006aac <HAL_RCC_OscConfig+0x4d0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d118      	bne.n	80068e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80068ae:	4b7f      	ldr	r3, [pc, #508]	; (8006aac <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a7e      	ldr	r2, [pc, #504]	; (8006aac <HAL_RCC_OscConfig+0x4d0>)
 80068b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ba:	f7fd fe59 	bl	8004570 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c2:	f7fd fe55 	bl	8004570 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b64      	cmp	r3, #100	; 0x64
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e120      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d4:	4b75      	ldr	r3, [pc, #468]	; (8006aac <HAL_RCC_OscConfig+0x4d0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d106      	bne.n	80068f6 <HAL_RCC_OscConfig+0x31a>
 80068e8:	4b6f      	ldr	r3, [pc, #444]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6713      	str	r3, [r2, #112]	; 0x70
 80068f4:	e02d      	b.n	8006952 <HAL_RCC_OscConfig+0x376>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0x33c>
 80068fe:	4b6a      	ldr	r3, [pc, #424]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	4a69      	ldr	r2, [pc, #420]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6713      	str	r3, [r2, #112]	; 0x70
 800690a:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a66      	ldr	r2, [pc, #408]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
 8006916:	e01c      	b.n	8006952 <HAL_RCC_OscConfig+0x376>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b05      	cmp	r3, #5
 800691e:	d10c      	bne.n	800693a <HAL_RCC_OscConfig+0x35e>
 8006920:	4b61      	ldr	r3, [pc, #388]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	4a60      	ldr	r2, [pc, #384]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006926:	f043 0304 	orr.w	r3, r3, #4
 800692a:	6713      	str	r3, [r2, #112]	; 0x70
 800692c:	4b5e      	ldr	r3, [pc, #376]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a5d      	ldr	r2, [pc, #372]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
 8006938:	e00b      	b.n	8006952 <HAL_RCC_OscConfig+0x376>
 800693a:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	4a5a      	ldr	r2, [pc, #360]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6713      	str	r3, [r2, #112]	; 0x70
 8006946:	4b58      	ldr	r3, [pc, #352]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a57      	ldr	r2, [pc, #348]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	f023 0304 	bic.w	r3, r3, #4
 8006950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d015      	beq.n	8006986 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695a:	f7fd fe09 	bl	8004570 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006960:	e00a      	b.n	8006978 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006962:	f7fd fe05 	bl	8004570 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e0ce      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006978:	4b4b      	ldr	r3, [pc, #300]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ee      	beq.n	8006962 <HAL_RCC_OscConfig+0x386>
 8006984:	e014      	b.n	80069b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fd fdf3 	bl	8004570 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fd fdef 	bl	8004570 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e0b8      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a4:	4b40      	ldr	r3, [pc, #256]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1ee      	bne.n	800698e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d105      	bne.n	80069c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b6:	4b3c      	ldr	r3, [pc, #240]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	4a3b      	ldr	r2, [pc, #236]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80a4 	beq.w	8006b14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d06b      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d149      	bne.n	8006a74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a30      	ldr	r2, [pc, #192]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd fdc0 	bl	8004570 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fd fdbc 	bl	8004570 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e087      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a06:	4b28      	ldr	r3, [pc, #160]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	4313      	orrs	r3, r2
 8006a38:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a40:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fd fd90 	bl	8004570 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fd fd8c 	bl	8004570 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e057      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x478>
 8006a72:	e04f      	b.n	8006b14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fd fd76 	bl	8004570 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fd fd72 	bl	8004570 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e03d      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4ac>
 8006aa6:	e035      	b.n	8006b14 <HAL_RCC_OscConfig+0x538>
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCC_OscConfig+0x544>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d028      	beq.n	8006b10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d121      	bne.n	8006b10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d11a      	bne.n	8006b10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ae6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d111      	bne.n	8006b10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	3b01      	subs	r3, #1
 8006afa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40023800 	.word	0x40023800

08006b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0d0      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b3c:	4b6a      	ldr	r3, [pc, #424]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d910      	bls.n	8006b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4a:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 020f 	bic.w	r2, r3, #15
 8006b52:	4965      	ldr	r1, [pc, #404]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5a:	4b63      	ldr	r3, [pc, #396]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d001      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0b8      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d020      	beq.n	8006bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b9c:	4b53      	ldr	r3, [pc, #332]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4a52      	ldr	r2, [pc, #328]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba8:	4b50      	ldr	r3, [pc, #320]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	494d      	ldr	r1, [pc, #308]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d040      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d107      	bne.n	8006bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d115      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e07f      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d107      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be6:	4b41      	ldr	r3, [pc, #260]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e073      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf6:	4b3d      	ldr	r3, [pc, #244]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e06b      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c06:	4b39      	ldr	r3, [pc, #228]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f023 0203 	bic.w	r2, r3, #3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	4936      	ldr	r1, [pc, #216]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c18:	f7fd fcaa 	bl	8004570 <HAL_GetTick>
 8006c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1e:	e00a      	b.n	8006c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c20:	f7fd fca6 	bl	8004570 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e053      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c36:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 020c 	and.w	r2, r3, #12
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d1eb      	bne.n	8006c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c48:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d210      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c56:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 020f 	bic.w	r2, r3, #15
 8006c5e:	4922      	ldr	r1, [pc, #136]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c66:	4b20      	ldr	r3, [pc, #128]	; (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e032      	b.n	8006cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c84:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4916      	ldr	r1, [pc, #88]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	490e      	ldr	r1, [pc, #56]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cb6:	f000 f821 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8006cc8:	5cd3      	ldrb	r3, [r2, r3]
 8006cca:	fa21 f303 	lsr.w	r3, r1, r3
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8006cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <HAL_RCC_ClockConfig+0x1d4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fb ffc2 	bl	8002c60 <HAL_InitTick>

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023c00 	.word	0x40023c00
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	08018408 	.word	0x08018408
 8006cf4:	20000000 	.word	0x20000000
 8006cf8:	20000004 	.word	0x20000004

08006cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d12:	4b63      	ldr	r3, [pc, #396]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d007      	beq.n	8006d2e <HAL_RCC_GetSysClockFreq+0x32>
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d008      	beq.n	8006d34 <HAL_RCC_GetSysClockFreq+0x38>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 80b4 	bne.w	8006e90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d28:	4b5e      	ldr	r3, [pc, #376]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d2a:	60bb      	str	r3, [r7, #8]
      break;
 8006d2c:	e0b3      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d2e:	4b5e      	ldr	r3, [pc, #376]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006d30:	60bb      	str	r3, [r7, #8]
      break;
 8006d32:	e0b0      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d34:	4b5a      	ldr	r3, [pc, #360]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d3e:	4b58      	ldr	r3, [pc, #352]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04a      	beq.n	8006de0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4a:	4b55      	ldr	r3, [pc, #340]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	f04f 0400 	mov.w	r4, #0
 8006d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	ea03 0501 	and.w	r5, r3, r1
 8006d60:	ea04 0602 	and.w	r6, r4, r2
 8006d64:	4629      	mov	r1, r5
 8006d66:	4632      	mov	r2, r6
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	f04f 0400 	mov.w	r4, #0
 8006d70:	0154      	lsls	r4, r2, #5
 8006d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d76:	014b      	lsls	r3, r1, #5
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	1b49      	subs	r1, r1, r5
 8006d7e:	eb62 0206 	sbc.w	r2, r2, r6
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	f04f 0400 	mov.w	r4, #0
 8006d8a:	0194      	lsls	r4, r2, #6
 8006d8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d90:	018b      	lsls	r3, r1, #6
 8006d92:	1a5b      	subs	r3, r3, r1
 8006d94:	eb64 0402 	sbc.w	r4, r4, r2
 8006d98:	f04f 0100 	mov.w	r1, #0
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	00e2      	lsls	r2, r4, #3
 8006da2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006da6:	00d9      	lsls	r1, r3, #3
 8006da8:	460b      	mov	r3, r1
 8006daa:	4614      	mov	r4, r2
 8006dac:	195b      	adds	r3, r3, r5
 8006dae:	eb44 0406 	adc.w	r4, r4, r6
 8006db2:	f04f 0100 	mov.w	r1, #0
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	0262      	lsls	r2, r4, #9
 8006dbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006dc0:	0259      	lsls	r1, r3, #9
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4621      	mov	r1, r4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	f7f9 ff50 	bl	8000c78 <__aeabi_uldivmod>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e049      	b.n	8006e74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006de0:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	099b      	lsrs	r3, r3, #6
 8006de6:	f04f 0400 	mov.w	r4, #0
 8006dea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	ea03 0501 	and.w	r5, r3, r1
 8006df6:	ea04 0602 	and.w	r6, r4, r2
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f04f 0400 	mov.w	r4, #0
 8006e06:	0154      	lsls	r4, r2, #5
 8006e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e0c:	014b      	lsls	r3, r1, #5
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4622      	mov	r2, r4
 8006e12:	1b49      	subs	r1, r1, r5
 8006e14:	eb62 0206 	sbc.w	r2, r2, r6
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	f04f 0400 	mov.w	r4, #0
 8006e20:	0194      	lsls	r4, r2, #6
 8006e22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e26:	018b      	lsls	r3, r1, #6
 8006e28:	1a5b      	subs	r3, r3, r1
 8006e2a:	eb64 0402 	sbc.w	r4, r4, r2
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	00e2      	lsls	r2, r4, #3
 8006e38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e3c:	00d9      	lsls	r1, r3, #3
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	195b      	adds	r3, r3, r5
 8006e44:	eb44 0406 	adc.w	r4, r4, r6
 8006e48:	f04f 0100 	mov.w	r1, #0
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	02a2      	lsls	r2, r4, #10
 8006e52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006e56:	0299      	lsls	r1, r3, #10
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	4621      	mov	r1, r4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f04f 0400 	mov.w	r4, #0
 8006e66:	461a      	mov	r2, r3
 8006e68:	4623      	mov	r3, r4
 8006e6a:	f7f9 ff05 	bl	8000c78 <__aeabi_uldivmod>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	60bb      	str	r3, [r7, #8]
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006e92:	60bb      	str	r3, [r7, #8]
      break;
 8006e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e96:	68bb      	ldr	r3, [r7, #8]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	00f42400 	.word	0x00f42400
 8006ea8:	007a1200 	.word	0x007a1200

08006eac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000000 	.word	0x20000000

08006ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ec8:	f7ff fff0 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	0a9b      	lsrs	r3, r3, #10
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4a03      	ldr	r2, [pc, #12]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eda:	5cd3      	ldrb	r3, [r2, r3]
 8006edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	08018418 	.word	0x08018418

08006eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef0:	f7ff ffdc 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0b5b      	lsrs	r3, r3, #13
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4a03      	ldr	r2, [pc, #12]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f02:	5cd3      	ldrb	r3, [r2, r3]
 8006f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	08018418 	.word	0x08018418

08006f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220f      	movs	r2, #15
 8006f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 0203 	and.w	r2, r3, #3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f56:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <HAL_RCC_GetClockConfig+0x60>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40023800 	.word	0x40023800
 8006f74:	40023c00 	.word	0x40023c00

08006f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fa0:	4b69      	ldr	r3, [pc, #420]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4a68      	ldr	r2, [pc, #416]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	4b66      	ldr	r3, [pc, #408]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	4964      	ldr	r1, [pc, #400]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d017      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd2:	4b5d      	ldr	r3, [pc, #372]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	4959      	ldr	r1, [pc, #356]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d017      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800700e:	4b4e      	ldr	r3, [pc, #312]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007014:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	494a      	ldr	r1, [pc, #296]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702c:	d101      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800702e:	2301      	movs	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 808b 	beq.w	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800705c:	4b3a      	ldr	r3, [pc, #232]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	4a39      	ldr	r2, [pc, #228]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007066:	6413      	str	r3, [r2, #64]	; 0x40
 8007068:	4b37      	ldr	r3, [pc, #220]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007074:	4b35      	ldr	r3, [pc, #212]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a34      	ldr	r2, [pc, #208]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800707a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007080:	f7fd fa76 	bl	8004570 <HAL_GetTick>
 8007084:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007088:	f7fd fa72 	bl	8004570 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b64      	cmp	r3, #100	; 0x64
 8007094:	d901      	bls.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e31e      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070a6:	4b28      	ldr	r3, [pc, #160]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d035      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d02e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c4:	4b20      	ldr	r3, [pc, #128]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070ce:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070da:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a1a      	ldr	r2, [pc, #104]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070ec:	4b16      	ldr	r3, [pc, #88]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d114      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fd fa3a 	bl	8004570 <HAL_GetTick>
 80070fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	e00a      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fd fa36 	bl	8004570 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e2e0      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0ee      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800712e:	d111      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800713e:	400b      	ands	r3, r1
 8007140:	4901      	ldr	r1, [pc, #4]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
 8007146:	e00b      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007148:	40023800 	.word	0x40023800
 800714c:	40007000 	.word	0x40007000
 8007150:	0ffffcff 	.word	0x0ffffcff
 8007154:	4bac      	ldr	r3, [pc, #688]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4aab      	ldr	r2, [pc, #684]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800715a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800715e:	6093      	str	r3, [r2, #8]
 8007160:	4ba9      	ldr	r3, [pc, #676]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800716c:	49a6      	ldr	r1, [pc, #664]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800716e:	4313      	orrs	r3, r2
 8007170:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b00      	cmp	r3, #0
 800717c:	d010      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800717e:	4ba2      	ldr	r3, [pc, #648]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007184:	4aa0      	ldr	r2, [pc, #640]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800718e:	4b9e      	ldr	r3, [pc, #632]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007190:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	499b      	ldr	r1, [pc, #620]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071ac:	4b96      	ldr	r3, [pc, #600]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ba:	4993      	ldr	r1, [pc, #588]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071ce:	4b8e      	ldr	r3, [pc, #568]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071dc:	498a      	ldr	r1, [pc, #552]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071f0:	4b85      	ldr	r3, [pc, #532]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fe:	4982      	ldr	r1, [pc, #520]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007212:	4b7d      	ldr	r3, [pc, #500]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	4979      	ldr	r1, [pc, #484]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007234:	4b74      	ldr	r3, [pc, #464]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f023 0203 	bic.w	r2, r3, #3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	4971      	ldr	r1, [pc, #452]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007256:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725c:	f023 020c 	bic.w	r2, r3, #12
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007264:	4968      	ldr	r1, [pc, #416]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007278:	4b63      	ldr	r3, [pc, #396]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	4960      	ldr	r1, [pc, #384]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800729a:	4b5b      	ldr	r3, [pc, #364]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	4957      	ldr	r1, [pc, #348]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072bc:	4b52      	ldr	r3, [pc, #328]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	494f      	ldr	r1, [pc, #316]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80072de:	4b4a      	ldr	r3, [pc, #296]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	4946      	ldr	r1, [pc, #280]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007300:	4b41      	ldr	r3, [pc, #260]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730e:	493e      	ldr	r1, [pc, #248]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007322:	4b39      	ldr	r3, [pc, #228]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007330:	4935      	ldr	r1, [pc, #212]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007344:	4b30      	ldr	r3, [pc, #192]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007352:	492d      	ldr	r1, [pc, #180]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007366:	4b28      	ldr	r3, [pc, #160]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007374:	4924      	ldr	r1, [pc, #144]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007384:	d101      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007396:	4b1c      	ldr	r3, [pc, #112]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a4:	4918      	ldr	r1, [pc, #96]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073b8:	4b13      	ldr	r3, [pc, #76]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c8:	490f      	ldr	r1, [pc, #60]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d005      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073de:	f040 80d8 	bne.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073e2:	4b09      	ldr	r3, [pc, #36]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ee:	f7fd f8bf 	bl	8004570 <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073f6:	f7fd f8bb 	bl	8004570 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b64      	cmp	r3, #100	; 0x64
 8007402:	d903      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e167      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8007408:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800740c:	4bad      	ldr	r3, [pc, #692]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1ee      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d021      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007428:	2b00      	cmp	r3, #0
 800742a:	d11d      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800742c:	4ba5      	ldr	r3, [pc, #660]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800742e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800743a:	4ba2      	ldr	r3, [pc, #648]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800743c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007440:	0e1b      	lsrs	r3, r3, #24
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	019a      	lsls	r2, r3, #6
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	431a      	orrs	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	061b      	lsls	r3, r3, #24
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	071b      	lsls	r3, r3, #28
 8007460:	4998      	ldr	r1, [pc, #608]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800747c:	d00a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02e      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007492:	d129      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007494:	4b8b      	ldr	r3, [pc, #556]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074a2:	4b88      	ldr	r3, [pc, #544]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80074a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a8:	0f1b      	lsrs	r3, r3, #28
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	019a      	lsls	r2, r3, #6
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	041b      	lsls	r3, r3, #16
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	061b      	lsls	r3, r3, #24
 80074c2:	431a      	orrs	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	071b      	lsls	r3, r3, #28
 80074c8:	497e      	ldr	r1, [pc, #504]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074d0:	4b7c      	ldr	r3, [pc, #496]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80074d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d6:	f023 021f 	bic.w	r2, r3, #31
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	3b01      	subs	r3, #1
 80074e0:	4978      	ldr	r1, [pc, #480]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01d      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074f4:	4b73      	ldr	r3, [pc, #460]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80074f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007502:	4b70      	ldr	r3, [pc, #448]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007508:	0f1b      	lsrs	r3, r3, #28
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	019a      	lsls	r2, r3, #6
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	431a      	orrs	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	061b      	lsls	r3, r3, #24
 8007522:	431a      	orrs	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	071b      	lsls	r3, r3, #28
 8007528:	4966      	ldr	r1, [pc, #408]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d011      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	019a      	lsls	r2, r3, #6
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	071b      	lsls	r3, r3, #28
 8007558:	495a      	ldr	r1, [pc, #360]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007560:	4b58      	ldr	r3, [pc, #352]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a57      	ldr	r2, [pc, #348]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800756a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756c:	f7fd f800 	bl	8004570 <HAL_GetTick>
 8007570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007572:	e008      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007574:	f7fc fffc 	bl	8004570 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b64      	cmp	r3, #100	; 0x64
 8007580:	d901      	bls.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e0a8      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007586:	4b4f      	ldr	r3, [pc, #316]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f0      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b01      	cmp	r3, #1
 8007596:	f040 809e 	bne.w	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800759a:	4b4a      	ldr	r3, [pc, #296]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a49      	ldr	r2, [pc, #292]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80075a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a6:	f7fc ffe3 	bl	8004570 <HAL_GetTick>
 80075aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075ac:	e008      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075ae:	f7fc ffdf 	bl	8004570 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b64      	cmp	r3, #100	; 0x64
 80075ba:	d901      	bls.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e08b      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075c0:	4b40      	ldr	r3, [pc, #256]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075cc:	d0ef      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02e      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d12a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f6:	4b33      	ldr	r3, [pc, #204]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	0f1b      	lsrs	r3, r3, #28
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	019a      	lsls	r2, r3, #6
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	061b      	lsls	r3, r3, #24
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	071b      	lsls	r3, r3, #28
 800762a:	4926      	ldr	r1, [pc, #152]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007638:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	3b01      	subs	r3, #1
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	491f      	ldr	r1, [pc, #124]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d022      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007660:	d11d      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007670:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	0f1b      	lsrs	r3, r3, #28
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	019a      	lsls	r2, r3, #6
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	431a      	orrs	r2, r3
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	061b      	lsls	r3, r3, #24
 8007690:	431a      	orrs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	490b      	ldr	r1, [pc, #44]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076aa:	f7fc ff61 	bl	8004570 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076b0:	e00a      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076b2:	f7fc ff5d 	bl	8004570 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b64      	cmp	r3, #100	; 0x64
 80076be:	d903      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e009      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80076c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d4:	d1ed      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3720      	adds	r7, #32
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40023800 	.word	0x40023800

080076e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e022      	b.n	800773c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d105      	bne.n	800770e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fb f88f 	bl	800282c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2203      	movs	r2, #3
 8007712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f814 	bl	8007744 <HAL_SD_InitCard>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e00a      	b.n	800773c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b08e      	sub	sp, #56	; 0x38
 8007748:	af04      	add	r7, sp, #16
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800775c:	2300      	movs	r3, #0
 800775e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007760:	2376      	movs	r3, #118	; 0x76
 8007762:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681d      	ldr	r5, [r3, #0]
 8007768:	466c      	mov	r4, sp
 800776a:	f107 0314 	add.w	r3, r7, #20
 800776e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800777c:	4628      	mov	r0, r5
 800777e:	f003 f97d 	bl	800aa7c <SDMMC_Init>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e03b      	b.n	800780c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077a2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f003 f9b1 	bl	800ab10 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077bc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 ffca 	bl	8008758 <SD_PowerON>
 80077c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e013      	b.n	800780c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fee9 	bl	80085bc <SD_InitCard>
 80077ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3728      	adds	r7, #40	; 0x28
 8007810:	46bd      	mov	sp, r7
 8007812:	bdb0      	pop	{r4, r5, r7, pc}

08007814 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08c      	sub	sp, #48	; 0x30
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d107      	bne.n	800783c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0cc      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	f040 80c5 	bne.w	80079d4 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785a:	429a      	cmp	r2, r3
 800785c:	d907      	bls.n	800786e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e0b3      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2203      	movs	r2, #3
 8007872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800788c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	4a53      	ldr	r2, [pc, #332]	; (80079e0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	4a52      	ldr	r2, [pc, #328]	; (80079e4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800789c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	2200      	movs	r2, #0
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3380      	adds	r3, #128	; 0x80
 80078b0:	4619      	mov	r1, r3
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	025b      	lsls	r3, r3, #9
 80078b8:	089b      	lsrs	r3, r3, #2
 80078ba:	f7fd f817 	bl	80048ec <HAL_DMA_Start_IT>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d017      	beq.n	80078f4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80078d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a43      	ldr	r2, [pc, #268]	; (80079e8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e070      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0208 	orr.w	r2, r2, #8
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	2b01      	cmp	r3, #1
 800790a:	d002      	beq.n	8007912 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	025b      	lsls	r3, r3, #9
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800791a:	4618      	mov	r0, r3
 800791c:	f003 f98c 	bl	800ac38 <SDMMC_CmdBlockLength>
 8007920:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00f      	beq.n	8007948 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2e      	ldr	r2, [pc, #184]	; (80079e8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	431a      	orrs	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e046      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295
 800794c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	025b      	lsls	r3, r3, #9
 8007952:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007954:	2390      	movs	r3, #144	; 0x90
 8007956:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007958:	2302      	movs	r3, #2
 800795a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800795c:	2300      	movs	r3, #0
 800795e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007960:	2301      	movs	r3, #1
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f107 0210 	add.w	r2, r7, #16
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f003 f936 	bl	800abe0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d90a      	bls.n	8007990 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2282      	movs	r2, #130	; 0x82
 800797e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007986:	4618      	mov	r0, r3
 8007988:	f003 f99a 	bl	800acc0 <SDMMC_CmdReadMultiBlock>
 800798c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800798e:	e009      	b.n	80079a4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2281      	movs	r2, #129	; 0x81
 8007994:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799c:	4618      	mov	r0, r3
 800799e:	f003 f96d 	bl	800ac7c <SDMMC_CmdReadSingleBlock>
 80079a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a0e      	ldr	r2, [pc, #56]	; (80079e8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	431a      	orrs	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e002      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e000      	b.n	80079d6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80079d4:	2302      	movs	r3, #2
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3730      	adds	r7, #48	; 0x30
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	080083cb 	.word	0x080083cb
 80079e4:	0800843d 	.word	0x0800843d
 80079e8:	004005ff 	.word	0x004005ff

080079ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d107      	bne.n	8007a14 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0cf      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	f040 80c8 	bne.w	8007bb2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d907      	bls.n	8007a46 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e0b6      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 021a 	orr.w	r2, r2, #26
 8007a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	4a54      	ldr	r2, [pc, #336]	; (8007bbc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	4a53      	ldr	r2, [pc, #332]	; (8007bc0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007a74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d002      	beq.n	8007a8c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	025b      	lsls	r3, r3, #9
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a94:	4618      	mov	r0, r3
 8007a96:	f003 f8cf 	bl	800ac38 <SDMMC_CmdBlockLength>
 8007a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00f      	beq.n	8007ac2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a47      	ldr	r2, [pc, #284]	; (8007bc4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e078      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d90a      	bls.n	8007ade <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	22a0      	movs	r2, #160	; 0xa0
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f003 f937 	bl	800ad48 <SDMMC_CmdWriteMultiBlock>
 8007ada:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007adc:	e009      	b.n	8007af2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2290      	movs	r2, #144	; 0x90
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aea:	4618      	mov	r0, r3
 8007aec:	f003 f90a 	bl	800ad04 <SDMMC_CmdWriteSingleBlock>
 8007af0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d012      	beq.n	8007b1e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	431a      	orrs	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e04a      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0208 	orr.w	r2, r2, #8
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3380      	adds	r3, #128	; 0x80
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	025b      	lsls	r3, r3, #9
 8007b40:	089b      	lsrs	r3, r3, #2
 8007b42:	f7fc fed3 	bl	80048ec <HAL_DMA_Start_IT>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01a      	beq.n	8007b82 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 021a 	bic.w	r2, r2, #26
 8007b5a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e018      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b8e:	2390      	movs	r3, #144	; 0x90
 8007b90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f107 0210 	add.w	r2, r7, #16
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f003 f819 	bl	800abe0 <SDMMC_ConfigData>

      return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3730      	adds	r7, #48	; 0x30
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	080083a1 	.word	0x080083a1
 8007bc0:	0800843d 	.word	0x0800843d
 8007bc4:	004005ff 	.word	0x004005ff

08007bc8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_SD_IRQHandler+0x2e>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 ffc8 	bl	8008b84 <SD_Read_IT>
 8007bf4:	e153      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 808d 	beq.w	8007d20 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4ba3      	ldr	r3, [pc, #652]	; (8007ea8 <HAL_SD_IRQHandler+0x2e0>)
 8007c1c:	400b      	ands	r3, r1
 8007c1e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d039      	beq.n	8007cae <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <HAL_SD_IRQHandler+0x86>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d011      	beq.n	8007c72 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f003 f89a 	bl	800ad8c <SDMMC_CmdStopTransfer>
 8007c58:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f921 	bl	8007eb4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_SD_IRQHandler+0xd6>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f005 f81c 	bl	800ccdc <HAL_SD_RxCpltCallback>
 8007ca4:	e0fb      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f005 f80e 	bl	800ccc8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007cac:	e0f7      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80f2 	beq.w	8007e9e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d011      	beq.n	8007ce8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f003 f85f 	bl	800ad8c <SDMMC_CmdStopTransfer>
 8007cce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f8e6 	bl	8007eb4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 80d5 	bne.w	8007e9e <HAL_SD_IRQHandler+0x2d6>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 80cf 	bne.w	8007e9e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0208 	bic.w	r2, r2, #8
 8007d0e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f004 ffd5 	bl	800ccc8 <HAL_SD_TxCpltCallback>
}
 8007d1e:	e0be      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d008      	beq.n	8007d40 <HAL_SD_IRQHandler+0x178>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0308 	and.w	r3, r3, #8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 ff74 	bl	8008c26 <SD_Write_IT>
 8007d3e:	e0ae      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80a7 	beq.w	8007e9e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	f043 0202 	orr.w	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	f043 0208 	orr.w	r2, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f043 0220 	orr.w	r2, r3, #32
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	f043 0210 	orr.w	r2, r3, #16
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f002 ffd8 	bl	800ad8c <SDMMC_CmdStopTransfer>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f857 	bl	8007eb4 <HAL_SD_ErrorCallback>
}
 8007e06:	e04a      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d045      	beq.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <HAL_SD_IRQHandler+0x25e>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d011      	beq.n	8007e4a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2a:	4a20      	ldr	r2, [pc, #128]	; (8007eac <HAL_SD_IRQHandler+0x2e4>)
 8007e2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fc fdba 	bl	80049ac <HAL_DMA_Abort_IT>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d02f      	beq.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fb4c 	bl	80084e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007e48:	e029      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_SD_IRQHandler+0x296>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d011      	beq.n	8007e82 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <HAL_SD_IRQHandler+0x2e8>)
 8007e64:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc fd9e 	bl	80049ac <HAL_DMA_Abort_IT>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d013      	beq.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb67 	bl	800854e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007e80:	e00d      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f004 ff0c 	bl	800ccb4 <HAL_SD_AbortCallback>
}
 8007e9c:	e7ff      	b.n	8007e9e <HAL_SD_IRQHandler+0x2d6>
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	ffff3ec5 	.word	0xffff3ec5
 8007eac:	080084e1 	.word	0x080084e1
 8007eb0:	0800854f 	.word	0x0800854f

08007eb4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed6:	0f9b      	lsrs	r3, r3, #30
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee2:	0e9b      	lsrs	r3, r3, #26
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef4:	0e1b      	lsrs	r3, r3, #24
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f46:	0bdb      	lsrs	r3, r3, #15
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f58:	0b9b      	lsrs	r3, r3, #14
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6a:	0b5b      	lsrs	r3, r3, #13
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f7c:	0b1b      	lsrs	r3, r3, #12
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d163      	bne.n	8008060 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f9c:	009a      	lsls	r2, r3, #2
 8007f9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007fa8:	0f92      	lsrs	r2, r2, #30
 8007faa:	431a      	orrs	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb4:	0edb      	lsrs	r3, r3, #27
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc6:	0e1b      	lsrs	r3, r3, #24
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd8:	0d5b      	lsrs	r3, r3, #21
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fea:	0c9b      	lsrs	r3, r3, #18
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffc:	0bdb      	lsrs	r3, r3, #15
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	7e1b      	ldrb	r3, [r3, #24]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	3302      	adds	r3, #2
 8008020:	2201      	movs	r2, #1
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800802a:	fb02 f203 	mul.w	r2, r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	7a1b      	ldrb	r3, [r3, #8]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2201      	movs	r2, #1
 800803e:	409a      	lsls	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800804c:	0a52      	lsrs	r2, r2, #9
 800804e:	fb02 f203 	mul.w	r2, r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800805c:	661a      	str	r2, [r3, #96]	; 0x60
 800805e:	e031      	b.n	80080c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	2b01      	cmp	r3, #1
 8008066:	d11d      	bne.n	80080a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	431a      	orrs	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	3301      	adds	r3, #1
 8008084:	029a      	lsls	r2, r3, #10
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008098:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	661a      	str	r2, [r3, #96]	; 0x60
 80080a2:	e00f      	b.n	80080c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a58      	ldr	r2, [pc, #352]	; (800820c <HAL_SD_GetCardCSD+0x344>)
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e09d      	b.n	8008200 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c8:	0b9b      	lsrs	r3, r3, #14
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080da:	09db      	lsrs	r3, r3, #7
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fc:	0fdb      	lsrs	r3, r3, #31
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008108:	0f5b      	lsrs	r3, r3, #29
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811a:	0e9b      	lsrs	r3, r3, #26
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	0d9b      	lsrs	r3, r3, #22
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	0d5b      	lsrs	r3, r3, #21
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	0bdb      	lsrs	r3, r3, #15
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008182:	0b9b      	lsrs	r3, r3, #14
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	0b5b      	lsrs	r3, r3, #13
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	0b1b      	lsrs	r3, r3, #12
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	0a9b      	lsrs	r3, r3, #10
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	004005ff 	.word	0x004005ff

08008210 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008268:	b5b0      	push	{r4, r5, r7, lr}
 800826a:	b08e      	sub	sp, #56	; 0x38
 800826c:	af04      	add	r7, sp, #16
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2203      	movs	r2, #3
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	2b03      	cmp	r3, #3
 8008280:	d02e      	beq.n	80082e0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008288:	d106      	bne.n	8008298 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
 8008296:	e029      	b.n	80082ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829e:	d10a      	bne.n	80082b6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fb0f 	bl	80088c4 <SD_WideBus_Enable>
 80082a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
 80082b4:	e01a      	b.n	80082ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb4c 	bl	800895a <SD_WideBus_Disable>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
 80082d0:	e00c      	b.n	80082ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38
 80082de:	e005      	b.n	80082ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a18      	ldr	r2, [pc, #96]	; (800835c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e024      	b.n	8008352 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681d      	ldr	r5, [r3, #0]
 800832e:	466c      	mov	r4, sp
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008342:	4628      	mov	r0, r5
 8008344:	f002 fb9a 	bl	800aa7c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bdb0      	pop	{r4, r5, r7, pc}
 800835a:	bf00      	nop
 800835c:	004005ff 	.word	0x004005ff

08008360 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800836c:	f107 030c 	add.w	r3, r7, #12
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa7e 	bl	8008874 <SD_SendStatus>
 8008378:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0a5b      	lsrs	r3, r3, #9
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008396:	693b      	ldr	r3, [r7, #16]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	2b82      	cmp	r3, #130	; 0x82
 80083de:	d111      	bne.n	8008404 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f002 fcd1 	bl	800ad8c <SDMMC_CmdStopTransfer>
 80083ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fd58 	bl	8007eb4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0208 	bic.w	r2, r2, #8
 8008412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f240 523a 	movw	r2, #1338	; 0x53a
 800841c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f004 fc55 	bl	800ccdc <HAL_SD_RxCpltCallback>
#endif
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fc fc5a 	bl	8004d04 <HAL_DMA_GetError>
 8008450:	4603      	mov	r3, r0
 8008452:	2b02      	cmp	r3, #2
 8008454:	d03e      	beq.n	80084d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008464:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d002      	beq.n	8008472 <SD_DMAError+0x36>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d12d      	bne.n	80084ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a19      	ldr	r2, [pc, #100]	; (80084dc <SD_DMAError+0xa0>)
 8008478:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008488:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f7ff ff62 	bl	8008360 <HAL_SD_GetCardState>
 800849c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b06      	cmp	r3, #6
 80084a2:	d002      	beq.n	80084aa <SD_DMAError+0x6e>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d10a      	bne.n	80084c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f002 fc6c 	bl	800ad8c <SDMMC_CmdStopTransfer>
 80084b4:	4602      	mov	r2, r0
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	431a      	orrs	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2200      	movs	r2, #0
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7ff fcf0 	bl	8007eb4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80084d4:	bf00      	nop
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	004005ff 	.word	0x004005ff

080084e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff ff31 	bl	8008360 <HAL_SD_GetCardState>
 80084fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b06      	cmp	r3, #6
 8008512:	d002      	beq.n	800851a <SD_DMATxAbort+0x3a>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b05      	cmp	r3, #5
 8008518:	d10a      	bne.n	8008530 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f002 fc34 	bl	800ad8c <SDMMC_CmdStopTransfer>
 8008524:	4602      	mov	r2, r0
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	431a      	orrs	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f004 fbbb 	bl	800ccb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800853e:	e002      	b.n	8008546 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fcb7 	bl	8007eb4 <HAL_SD_ErrorCallback>
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f240 523a 	movw	r2, #1338	; 0x53a
 8008564:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff fefa 	bl	8008360 <HAL_SD_GetCardState>
 800856c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b06      	cmp	r3, #6
 8008580:	d002      	beq.n	8008588 <SD_DMARxAbort+0x3a>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b05      	cmp	r3, #5
 8008586:	d10a      	bne.n	800859e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fbfd 	bl	800ad8c <SDMMC_CmdStopTransfer>
 8008592:	4602      	mov	r2, r0
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	431a      	orrs	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f004 fb84 	bl	800ccb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80085ac:	e002      	b.n	80085b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff fc80 	bl	8007eb4 <HAL_SD_ErrorCallback>
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085bc:	b5b0      	push	{r4, r5, r7, lr}
 80085be:	b094      	sub	sp, #80	; 0x50
 80085c0:	af04      	add	r7, sp, #16
 80085c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085c4:	2301      	movs	r3, #1
 80085c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f002 faae 	bl	800ab2e <SDMMC_GetPowerState>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085dc:	e0b7      	b.n	800874e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d02f      	beq.n	8008646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f002 fcd9 	bl	800afa2 <SDMMC_CmdSendCID>
 80085f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <SD_InitCard+0x40>
    {
      return errorstate;
 80085f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fa:	e0a8      	b.n	800874e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f002 fad9 	bl	800abba <SDMMC_GetResponse>
 8008608:	4602      	mov	r2, r0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2104      	movs	r1, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f002 fad0 	bl	800abba <SDMMC_GetResponse>
 800861a:	4602      	mov	r2, r0
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2108      	movs	r1, #8
 8008626:	4618      	mov	r0, r3
 8008628:	f002 fac7 	bl	800abba <SDMMC_GetResponse>
 800862c:	4602      	mov	r2, r0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	210c      	movs	r1, #12
 8008638:	4618      	mov	r0, r3
 800863a:	f002 fabe 	bl	800abba <SDMMC_GetResponse>
 800863e:	4602      	mov	r2, r0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	2b03      	cmp	r3, #3
 800864c:	d00d      	beq.n	800866a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f107 020e 	add.w	r2, r7, #14
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f002 fcdf 	bl	800b01c <SDMMC_CmdSetRelAdd>
 800865e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <SD_InitCard+0xae>
    {
      return errorstate;
 8008666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008668:	e071      	b.n	800874e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	2b03      	cmp	r3, #3
 8008670:	d036      	beq.n	80086e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008672:	89fb      	ldrh	r3, [r7, #14]
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008682:	041b      	lsls	r3, r3, #16
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f002 fca9 	bl	800afde <SDMMC_CmdSendCSD>
 800868c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800868e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	e05a      	b.n	800874e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fa8b 	bl	800abba <SDMMC_GetResponse>
 80086a4:	4602      	mov	r2, r0
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2104      	movs	r1, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fa82 	bl	800abba <SDMMC_GetResponse>
 80086b6:	4602      	mov	r2, r0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2108      	movs	r1, #8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f002 fa79 	bl	800abba <SDMMC_GetResponse>
 80086c8:	4602      	mov	r2, r0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	210c      	movs	r1, #12
 80086d4:	4618      	mov	r0, r3
 80086d6:	f002 fa70 	bl	800abba <SDMMC_GetResponse>
 80086da:	4602      	mov	r2, r0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2104      	movs	r1, #4
 80086e6:	4618      	mov	r0, r3
 80086e8:	f002 fa67 	bl	800abba <SDMMC_GetResponse>
 80086ec:	4603      	mov	r3, r0
 80086ee:	0d1a      	lsrs	r2, r3, #20
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fbe4 	bl	8007ec8 <HAL_SD_GetCardCSD>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800870a:	e020      	b.n	800874e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	f04f 0400 	mov.w	r4, #0
 800871a:	461a      	mov	r2, r3
 800871c:	4623      	mov	r3, r4
 800871e:	4608      	mov	r0, r1
 8008720:	f002 fb56 	bl	800add0 <SDMMC_CmdSelDesel>
 8008724:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <SD_InitCard+0x174>
  {
    return errorstate;
 800872c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872e:	e00e      	b.n	800874e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681d      	ldr	r5, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	466c      	mov	r4, sp
 8008738:	f103 0210 	add.w	r2, r3, #16
 800873c:	ca07      	ldmia	r2, {r0, r1, r2}
 800873e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008742:	3304      	adds	r3, #4
 8008744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008746:	4628      	mov	r0, r5
 8008748:	f002 f998 	bl	800aa7c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3740      	adds	r7, #64	; 0x40
 8008752:	46bd      	mov	sp, r7
 8008754:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008758 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f002 fb50 	bl	800ae16 <SDMMC_CmdGoIdleState>
 8008776:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <SD_PowerON+0x2a>
  {
    return errorstate;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	e072      	b.n	8008868 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fb63 	bl	800ae52 <SDMMC_CmdOperCond>
 800878c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00d      	beq.n	80087b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f002 fb39 	bl	800ae16 <SDMMC_CmdGoIdleState>
 80087a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e05b      	b.n	8008868 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d137      	bne.n	800882e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fb63 	bl	800ae90 <SDMMC_CmdAppCommand>
 80087ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d02d      	beq.n	800882e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087d6:	e047      	b.n	8008868 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f002 fb56 	bl	800ae90 <SDMMC_CmdAppCommand>
 80087e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e03b      	b.n	8008868 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	491e      	ldr	r1, [pc, #120]	; (8008870 <SD_PowerON+0x118>)
 80087f6:	4618      	mov	r0, r3
 80087f8:	f002 fb6c 	bl	800aed4 <SDMMC_CmdAppOperCommand>
 80087fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008808:	e02e      	b.n	8008868 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f002 f9d2 	bl	800abba <SDMMC_GetResponse>
 8008816:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	0fdb      	lsrs	r3, r3, #31
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <SD_PowerON+0xcc>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <SD_PowerON+0xce>
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]

    count++;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3301      	adds	r3, #1
 800882c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008834:	4293      	cmp	r3, r2
 8008836:	d802      	bhi.n	800883e <SD_PowerON+0xe6>
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0cc      	beq.n	80087d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008844:	4293      	cmp	r3, r2
 8008846:	d902      	bls.n	800884e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800884c:	e00c      	b.n	8008868 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	645a      	str	r2, [r3, #68]	; 0x44
 800885e:	e002      	b.n	8008866 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	c1100000 	.word	0xc1100000

08008874 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008888:	e018      	b.n	80088bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f002 fbe1 	bl	800b05e <SDMMC_CmdSendStatus>
 800889c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	e009      	b.n	80088bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2100      	movs	r1, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 f983 	bl	800abba <SDMMC_GetResponse>
 80088b4:	4602      	mov	r2, r0
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	2300      	movs	r3, #0
 80088d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 f96d 	bl	800abba <SDMMC_GetResponse>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ea:	d102      	bne.n	80088f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f0:	e02f      	b.n	8008952 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088f2:	f107 030c 	add.w	r3, r7, #12
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f879 	bl	80089f0 <SD_FindSCR>
 80088fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	e023      	b.n	8008952 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01c      	beq.n	800894e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	041b      	lsls	r3, r3, #16
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f002 fab5 	bl	800ae90 <SDMMC_CmdAppCommand>
 8008926:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	e00f      	b.n	8008952 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2102      	movs	r1, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f002 faef 	bl	800af1c <SDMMC_CmdBusWidth>
 800893e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	e003      	b.n	8008952 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
 800894c:	e001      	b.n	8008952 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800894e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	2300      	movs	r3, #0
 8008968:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f002 f922 	bl	800abba <SDMMC_GetResponse>
 8008976:	4603      	mov	r3, r0
 8008978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800897c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008980:	d102      	bne.n	8008988 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008986:	e02f      	b.n	80089e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f82e 	bl	80089f0 <SD_FindSCR>
 8008994:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	e023      	b.n	80089e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01c      	beq.n	80089e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f002 fa6a 	bl	800ae90 <SDMMC_CmdAppCommand>
 80089bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e00f      	b.n	80089e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f002 faa4 	bl	800af1c <SDMMC_CmdBusWidth>
 80089d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	e003      	b.n	80089e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e001      	b.n	80089e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b08f      	sub	sp, #60	; 0x3c
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089fa:	f7fb fdb9 	bl	8004570 <HAL_GetTick>
 80089fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008a04:	2300      	movs	r3, #0
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2108      	movs	r1, #8
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 f90e 	bl	800ac38 <SDMMC_CmdBlockLength>
 8008a1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	e0a9      	b.n	8008b7c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a30:	041b      	lsls	r3, r3, #16
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f002 fa2b 	bl	800ae90 <SDMMC_CmdAppCommand>
 8008a3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	e09a      	b.n	8008b7c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a46:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a50:	2330      	movs	r3, #48	; 0x30
 8008a52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a54:	2302      	movs	r3, #2
 8008a56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f107 0210 	add.w	r2, r7, #16
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 f8b8 	bl	800abe0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f002 fa73 	bl	800af60 <SDMMC_CmdSendSCR>
 8008a7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	e07a      	b.n	8008b7c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00e      	beq.n	8008ab2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6819      	ldr	r1, [r3, #0]
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	f107 0208 	add.w	r2, r7, #8
 8008aa0:	18d4      	adds	r4, r2, r3
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	f002 f816 	bl	800aad4 <SDMMC_ReadFIFO>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	6023      	str	r3, [r4, #0]
      index++;
 8008aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aae:	3301      	adds	r3, #1
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ab2:	f7fb fd5d 	bl	8004570 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d102      	bne.n	8008ac8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ac6:	e059      	b.n	8008b7c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ace:	f240 432a 	movw	r3, #1066	; 0x42a
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0d6      	beq.n	8008a86 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2208      	movs	r2, #8
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008aee:	2308      	movs	r3, #8
 8008af0:	e044      	b.n	8008b7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2202      	movs	r2, #2
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e037      	b.n	8008b7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008b22:	2320      	movs	r3, #32
 8008b24:	e02a      	b.n	8008b7c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	061a      	lsls	r2, r3, #24
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0e1b      	lsrs	r3, r3, #24
 8008b4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	601a      	str	r2, [r3, #0]
    scr++;
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	3304      	adds	r3, #4
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	061a      	lsls	r2, r3, #24
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	0e1b      	lsrs	r3, r3, #24
 8008b74:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	373c      	adds	r7, #60	; 0x3c
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd90      	pop	{r4, r7, pc}

08008b84 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d03f      	beq.n	8008c1e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e033      	b.n	8008c0c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 ff93 	bl	800aad4 <SDMMC_ReadFIFO>
 8008bae:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	0c1b      	lsrs	r3, r3, #16
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	0e1b      	lsrs	r3, r3, #24
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b07      	cmp	r3, #7
 8008c10:	d9c8      	bls.n	8008ba4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008c1e:	bf00      	nop
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d043      	beq.n	8008cc8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e037      	b.n	8008cb6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	021a      	lsls	r2, r3, #8
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	041a      	lsls	r2, r3, #16
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	061a      	lsls	r2, r3, #24
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 ff1f 	bl	800aaee <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b07      	cmp	r3, #7
 8008cba:	d9c4      	bls.n	8008c46 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e084      	b.n	8008dec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7f9 fe7f 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2202      	movs	r2, #2
 8008d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d18:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d22:	d902      	bls.n	8008d2a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e002      	b.n	8008d30 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d38:	d007      	beq.n	8008d4a <HAL_SPI_Init+0x7a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d42:	d002      	beq.n	8008d4a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d5a:	d903      	bls.n	8008d64 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
 8008d62:	e002      	b.n	8008d6a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	ea42 0103 	orr.w	r1, r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	f003 0204 	and.w	r2, r3, #4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	ea42 0103 	orr.w	r1, r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d110      	bne.n	8008e30 <HAL_SPI_Receive_IT+0x3c>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e16:	d10b      	bne.n	8008e30 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008e20:	88fb      	ldrh	r3, [r7, #6]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f88c 	bl	8008f44 <HAL_SPI_TransmitReceive_IT>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	e081      	b.n	8008f34 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_SPI_Receive_IT+0x4a>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e07a      	b.n	8008f34 <HAL_SPI_Receive_IT+0x140>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d002      	beq.n	8008e58 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008e52:	2302      	movs	r3, #2
 8008e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e56:	e068      	b.n	8008f2a <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <HAL_SPI_Receive_IT+0x70>
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e68:	e05f      	b.n	8008f2a <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	88fa      	ldrh	r2, [r7, #6]
 8008e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008eae:	d90b      	bls.n	8008ec8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ebe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a1e      	ldr	r2, [pc, #120]	; (8008f3c <HAL_SPI_Receive_IT+0x148>)
 8008ec4:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ec6:	e00a      	b.n	8008ede <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ed6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <HAL_SPI_Receive_IT+0x14c>)
 8008edc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee6:	d107      	bne.n	8008ef8 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ef6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008f06:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f12:	2b40      	cmp	r3, #64	; 0x40
 8008f14:	d008      	beq.n	8008f28 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	e000      	b.n	8008f2a <HAL_SPI_Receive_IT+0x136>
  }

error :
 8008f28:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	0800955d 	.word	0x0800955d
 8008f40:	0800950d 	.word	0x0800950d

08008f44 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_SPI_TransmitReceive_IT+0x20>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e091      	b.n	8009088 <HAL_SPI_TransmitReceive_IT+0x144>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f7a:	7dbb      	ldrb	r3, [r7, #22]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d00d      	beq.n	8008f9c <HAL_SPI_TransmitReceive_IT+0x58>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f86:	d106      	bne.n	8008f96 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <HAL_SPI_TransmitReceive_IT+0x52>
 8008f90:	7dbb      	ldrb	r3, [r7, #22]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d002      	beq.n	8008f9c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
 8008f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f9a:	e070      	b.n	800907e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <HAL_SPI_TransmitReceive_IT+0x6a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_SPI_TransmitReceive_IT+0x6a>
 8008fa8:	887b      	ldrh	r3, [r7, #2]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fb2:	e064      	b.n	800907e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d003      	beq.n	8008fc8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2205      	movs	r2, #5
 8008fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	887a      	ldrh	r2, [r7, #2]
 8008fd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	887a      	ldrh	r2, [r7, #2]
 8008fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	887a      	ldrh	r2, [r7, #2]
 8008fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	887a      	ldrh	r2, [r7, #2]
 8008ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ffe:	d906      	bls.n	800900e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a24      	ldr	r2, [pc, #144]	; (8009094 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009004:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a23      	ldr	r2, [pc, #140]	; (8009098 <HAL_SPI_TransmitReceive_IT+0x154>)
 800900a:	651a      	str	r2, [r3, #80]	; 0x50
 800900c:	e005      	b.n	800901a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a22      	ldr	r2, [pc, #136]	; (800909c <HAL_SPI_TransmitReceive_IT+0x158>)
 8009012:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a22      	ldr	r2, [pc, #136]	; (80090a0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009018:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009022:	d802      	bhi.n	800902a <HAL_SPI_TransmitReceive_IT+0xe6>
 8009024:	887b      	ldrh	r3, [r7, #2]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d908      	bls.n	800903c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	e007      	b.n	800904c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800904a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800905a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d008      	beq.n	800907c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e000      	b.n	800907e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800907c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	08009447 	.word	0x08009447
 8009098:	080094ad 	.word	0x080094ad
 800909c:	080092f7 	.word	0x080092f7
 80090a0:	080093b5 	.word	0x080093b5

080090a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	099b      	lsrs	r3, r3, #6
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10f      	bne.n	80090e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	099b      	lsrs	r3, r3, #6
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
    return;
 80090e6:	e0d8      	b.n	800929a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <HAL_SPI_IRQHandler+0x66>
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	09db      	lsrs	r3, r3, #7
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
    return;
 8009108:	e0c7      	b.n	800929a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10c      	bne.n	8009130 <HAL_SPI_IRQHandler+0x8c>
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	099b      	lsrs	r3, r3, #6
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d106      	bne.n	8009130 <HAL_SPI_IRQHandler+0x8c>
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 80b5 	beq.w	800929a <HAL_SPI_IRQHandler+0x1f6>
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80ae 	beq.w	800929a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	099b      	lsrs	r3, r3, #6
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d023      	beq.n	8009192 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d011      	beq.n	800917a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800915a:	f043 0204 	orr.w	r2, r3, #4
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	e00b      	b.n	8009192 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	613b      	str	r3, [r7, #16]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	693b      	ldr	r3, [r7, #16]
        return;
 8009190:	e083      	b.n	800929a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	095b      	lsrs	r3, r3, #5
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a2:	f043 0201 	orr.w	r2, r3, #1
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00c      	beq.n	80091ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d8:	f043 0208 	orr.w	r2, r3, #8
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091e0:	2300      	movs	r3, #0
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d050      	beq.n	8009298 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009204:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <HAL_SPI_IRQHandler+0x17e>
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d034      	beq.n	800928c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0203 	bic.w	r2, r2, #3
 8009230:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009236:	2b00      	cmp	r3, #0
 8009238:	d011      	beq.n	800925e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <HAL_SPI_IRQHandler+0x1fc>)
 8009240:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	4618      	mov	r0, r3
 8009248:	f7fb fbb0 	bl	80049ac <HAL_DMA_Abort_IT>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	2b00      	cmp	r3, #0
 8009264:	d016      	beq.n	8009294 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926a:	4a0d      	ldr	r2, [pc, #52]	; (80092a0 <HAL_SPI_IRQHandler+0x1fc>)
 800926c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009272:	4618      	mov	r0, r3
 8009274:	f7fb fb9a 	bl	80049ac <HAL_DMA_Abort_IT>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800928a:	e003      	b.n	8009294 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f813 	bl	80092b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009292:	e000      	b.n	8009296 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009294:	bf00      	nop
    return;
 8009296:	bf00      	nop
 8009298:	bf00      	nop
  }
}
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	080092cd 	.word	0x080092cd

080092a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff ffe5 	bl	80092b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009304:	b29b      	uxth	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d923      	bls.n	8009352 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	b292      	uxth	r2, r2
 8009316:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931c:	1c9a      	adds	r2, r3, #2
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b02      	subs	r3, #2
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800933a:	b29b      	uxth	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	d11f      	bne.n	8009380 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	e016      	b.n	8009380 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f103 020c 	add.w	r2, r3, #12
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10f      	bne.n	80093ac <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800939a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa73 	bl	8009892 <SPI_CloseRxTx_ISR>
    }
  }
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d912      	bls.n	80093ec <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	1c9a      	adds	r2, r3, #2
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b02      	subs	r3, #2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ea:	e012      	b.n	8009412 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330c      	adds	r3, #12
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009416:	b29b      	uxth	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d110      	bne.n	800943e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800942a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fa2a 	bl	8009892 <SPI_CloseRxTx_ISR>
    }
  }
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	b292      	uxth	r2, r2
 800945a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	1c9a      	adds	r2, r3, #2
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10f      	bne.n	80094a4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009492:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f9f7 	bl	8009892 <SPI_CloseRxTx_ISR>
    }
  }
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	881a      	ldrh	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c4:	1c9a      	adds	r2, r3, #2
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d110      	bne.n	8009504 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094f0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9c7 	bl	8009892 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f103 020c 	add.w	r2, r3, #12
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009536:	b29b      	uxth	r3, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f9e1 	bl	8009916 <SPI_CloseRx_ISR>
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	b292      	uxth	r2, r2
 8009570:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	1c9a      	adds	r2, r3, #2
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9bb 	bl	8009916 <SPI_CloseRx_ISR>
  }
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095b8:	e04c      	b.n	8009654 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d048      	beq.n	8009654 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80095c2:	f7fa ffd5 	bl	8004570 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d902      	bls.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d13d      	bne.n	8009654 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095f0:	d111      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fa:	d004      	beq.n	8009606 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009604:	d107      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800961e:	d10f      	bne.n	8009640 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800963e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e00f      	b.n	8009674 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4013      	ands	r3, r2
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	429a      	cmp	r2, r3
 8009662:	bf0c      	ite	eq
 8009664:	2301      	moveq	r3, #1
 8009666:	2300      	movne	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	429a      	cmp	r2, r3
 8009670:	d1a3      	bne.n	80095ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800968a:	e057      	b.n	800973c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009692:	d106      	bne.n	80096a2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	330c      	adds	r3, #12
 80096a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d048      	beq.n	800973c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80096aa:	f7fa ff61 	bl	8004570 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d902      	bls.n	80096c0 <SPI_WaitFifoStateUntilTimeout+0x44>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d13d      	bne.n	800973c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d8:	d111      	bne.n	80096fe <SPI_WaitFifoStateUntilTimeout+0x82>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e2:	d004      	beq.n	80096ee <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ec:	d107      	bne.n	80096fe <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009706:	d10f      	bne.n	8009728 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009726:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e008      	b.n	800974e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	4013      	ands	r3, r2
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d19f      	bne.n	800968c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af02      	add	r7, sp, #8
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800976a:	d111      	bne.n	8009790 <SPI_EndRxTransaction+0x3a>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009774:	d004      	beq.n	8009780 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977e:	d107      	bne.n	8009790 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2200      	movs	r2, #0
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff ff04 	bl	80095a8 <SPI_WaitFlagStateUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097aa:	f043 0220 	orr.w	r2, r3, #32
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e023      	b.n	80097fe <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097be:	d11d      	bne.n	80097fc <SPI_EndRxTransaction+0xa6>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c8:	d004      	beq.n	80097d4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d2:	d113      	bne.n	80097fc <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff ff4b 	bl	800967c <SPI_WaitFifoStateUntilTimeout>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d007      	beq.n	80097fc <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f0:	f043 0220 	orr.w	r2, r3, #32
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e000      	b.n	80097fe <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af02      	add	r7, sp, #8
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff ff2c 	bl	800967c <SPI_WaitFifoStateUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e027      	b.n	800988a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	2180      	movs	r1, #128	; 0x80
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff feaf 	bl	80095a8 <SPI_WaitFlagStateUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009854:	f043 0220 	orr.w	r2, r3, #32
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e014      	b.n	800988a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff ff05 	bl	800967c <SPI_WaitFifoStateUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987c:	f043 0220 	orr.w	r2, r3, #32
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e000      	b.n	800988a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800989a:	f7fa fe69 	bl	8004570 <HAL_GetTick>
 800989e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0220 	bic.w	r2, r2, #32
 80098ae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	2164      	movs	r1, #100	; 0x64
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ffa6 	bl	8009806 <SPI_EndRxTxTransaction>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c4:	f043 0220 	orr.w	r2, r3, #32
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d115      	bne.n	8009900 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d107      	bne.n	80098f0 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fa fac3 	bl	8003e74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80098ee:	e00e      	b.n	800990e <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fcd3 	bl	80092a4 <HAL_SPI_TxRxCpltCallback>
}
 80098fe:	e006      	b.n	800990e <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fcd5 	bl	80092b8 <HAL_SPI_ErrorCallback>
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800992c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800992e:	f7fa fe1f 	bl	8004570 <HAL_GetTick>
 8009932:	4603      	mov	r3, r0
 8009934:	461a      	mov	r2, r3
 8009936:	2164      	movs	r1, #100	; 0x64
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff0c 	bl	8009756 <SPI_EndRxTransaction>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d005      	beq.n	8009950 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009948:	f043 0220 	orr.w	r2, r3, #32
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7fa fa87 	bl	8003e74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009966:	e002      	b.n	800996e <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff fca5 	bl	80092b8 <HAL_SPI_ErrorCallback>
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e01d      	b.n	80099c4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f815 	bl	80099cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f000 f985 	bl	8009cc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <HAL_TIM_Base_Start_IT+0x50>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b06      	cmp	r3, #6
 8009a08:	d00b      	beq.n	8009a22 <HAL_TIM_Base_Start_IT+0x42>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a10:	d007      	beq.n	8009a22 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0201 	orr.w	r2, r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	00010007 	.word	0x00010007

08009a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d122      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d11b      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f06f 0202 	mvn.w	r2, #2
 8009a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f905 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009a7c:	e005      	b.n	8009a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8f7 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f908 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d122      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d11b      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0204 	mvn.w	r2, #4
 8009ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f8db 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009ad0:	e005      	b.n	8009ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f8cd 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f8de 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d122      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d11b      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0208 	mvn.w	r2, #8
 8009b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f8b1 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009b24:	e005      	b.n	8009b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8a3 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8b4 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0310 	and.w	r3, r3, #16
 8009b42:	2b10      	cmp	r3, #16
 8009b44:	d122      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	d11b      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0210 	mvn.w	r2, #16
 8009b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2208      	movs	r2, #8
 8009b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f887 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009b78:	e005      	b.n	8009b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f879 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f88a 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d10e      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d107      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f06f 0201 	mvn.w	r2, #1
 8009bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7f7 fcf6 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc2:	2b80      	cmp	r3, #128	; 0x80
 8009bc4:	d10e      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd0:	2b80      	cmp	r3, #128	; 0x80
 8009bd2:	d107      	bne.n	8009be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f91a 	bl	8009e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf2:	d10e      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d107      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f90d 	bl	8009e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d10e      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2a:	2b40      	cmp	r3, #64	; 0x40
 8009c2c:	d107      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f838 	bl	8009cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	d10e      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d107      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f06f 0220 	mvn.w	r2, #32
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8cd 	bl	8009e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a40      	ldr	r2, [pc, #256]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d013      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d00f      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a3d      	ldr	r2, [pc, #244]	; (8009ddc <TIM_Base_SetConfig+0x118>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00b      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a3c      	ldr	r2, [pc, #240]	; (8009de0 <TIM_Base_SetConfig+0x11c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d007      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a3b      	ldr	r2, [pc, #236]	; (8009de4 <TIM_Base_SetConfig+0x120>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d003      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a3a      	ldr	r2, [pc, #232]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d108      	bne.n	8009d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a2f      	ldr	r2, [pc, #188]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d02b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d24:	d027      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a2c      	ldr	r2, [pc, #176]	; (8009ddc <TIM_Base_SetConfig+0x118>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d023      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2b      	ldr	r2, [pc, #172]	; (8009de0 <TIM_Base_SetConfig+0x11c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01f      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2a      	ldr	r2, [pc, #168]	; (8009de4 <TIM_Base_SetConfig+0x120>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d01b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a29      	ldr	r2, [pc, #164]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d017      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a28      	ldr	r2, [pc, #160]	; (8009dec <TIM_Base_SetConfig+0x128>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d013      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a27      	ldr	r2, [pc, #156]	; (8009df0 <TIM_Base_SetConfig+0x12c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <TIM_Base_SetConfig+0x130>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <TIM_Base_SetConfig+0x134>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a24      	ldr	r2, [pc, #144]	; (8009dfc <TIM_Base_SetConfig+0x138>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a23      	ldr	r2, [pc, #140]	; (8009e00 <TIM_Base_SetConfig+0x13c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d108      	bne.n	8009d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <TIM_Base_SetConfig+0xf8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a0c      	ldr	r2, [pc, #48]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d103      	bne.n	8009dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	691a      	ldr	r2, [r3, #16]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	615a      	str	r2, [r3, #20]
}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40010400 	.word	0x40010400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800
 8009df8:	40001800 	.word	0x40001800
 8009dfc:	40001c00 	.word	0x40001c00
 8009e00:	40002000 	.word	0x40002000

08009e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e040      	b.n	8009ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7f8 feb8 	bl	8002bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2224      	movs	r2, #36	; 0x24
 8009e6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f960 	bl	800a144 <UART_SetConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e022      	b.n	8009ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fbfe 	bl	800a698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc85 	bl	800a7dc <UART_CheckIdleState>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	; 0x28
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d17f      	bne.n	8009ff4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <HAL_UART_Transmit+0x24>
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e078      	b.n	8009ff6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_UART_Transmit+0x36>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e071      	b.n	8009ff6 <HAL_UART_Transmit+0x11a>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2221      	movs	r2, #33	; 0x21
 8009f24:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009f26:	f7fa fb23 	bl	8004570 <HAL_GetTick>
 8009f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f44:	d108      	bne.n	8009f58 <HAL_UART_Transmit+0x7c>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d104      	bne.n	8009f58 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	61bb      	str	r3, [r7, #24]
 8009f56:	e003      	b.n	8009f60 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009f68:	e02c      	b.n	8009fc4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2200      	movs	r2, #0
 8009f72:	2180      	movs	r1, #128	; 0x80
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fc60 	bl	800a83a <UART_WaitOnFlagUntilTimeout>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e038      	b.n	8009ff6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	61bb      	str	r3, [r7, #24]
 8009fa0:	e007      	b.n	8009fb2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1cc      	bne.n	8009f6a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2140      	movs	r1, #64	; 0x40
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fc2d 	bl	800a83a <UART_WaitOnFlagUntilTimeout>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e005      	b.n	8009ff6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2220      	movs	r2, #32
 8009fee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e000      	b.n	8009ff6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009ff4:	2302      	movs	r3, #2
  }
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3720      	adds	r7, #32
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a012:	2b20      	cmp	r3, #32
 800a014:	f040 808a 	bne.w	800a12c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <HAL_UART_Receive_IT+0x24>
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e082      	b.n	800a12e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <HAL_UART_Receive_IT+0x36>
 800a032:	2302      	movs	r3, #2
 800a034:	e07b      	b.n	800a12e <HAL_UART_Receive_IT+0x12e>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	88fa      	ldrh	r2, [r7, #6]
 800a048:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	88fa      	ldrh	r2, [r7, #6]
 800a050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a062:	d10e      	bne.n	800a082 <HAL_UART_Receive_IT+0x82>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d105      	bne.n	800a078 <HAL_UART_Receive_IT+0x78>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a072:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a076:	e02d      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	22ff      	movs	r2, #255	; 0xff
 800a07c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a080:	e028      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10d      	bne.n	800a0a6 <HAL_UART_Receive_IT+0xa6>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <HAL_UART_Receive_IT+0x9c>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	22ff      	movs	r2, #255	; 0xff
 800a096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a09a:	e01b      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	227f      	movs	r2, #127	; 0x7f
 800a0a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a0a4:	e016      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0ae:	d10d      	bne.n	800a0cc <HAL_UART_Receive_IT+0xcc>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <HAL_UART_Receive_IT+0xc2>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	227f      	movs	r2, #127	; 0x7f
 800a0bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a0c0:	e008      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	223f      	movs	r2, #63	; 0x3f
 800a0c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a0ca:	e003      	b.n	800a0d4 <HAL_UART_Receive_IT+0xd4>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2222      	movs	r2, #34	; 0x22
 800a0de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f8:	d107      	bne.n	800a10a <HAL_UART_Receive_IT+0x10a>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d103      	bne.n	800a10a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <HAL_UART_Receive_IT+0x13c>)
 800a106:	661a      	str	r2, [r3, #96]	; 0x60
 800a108:	e002      	b.n	800a110 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <HAL_UART_Receive_IT+0x140>)
 800a10e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a126:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	e000      	b.n	800a12e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a12c:	2302      	movs	r3, #2
  }
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	0800a9d7 	.word	0x0800a9d7
 800a140:	0800a931 	.word	0x0800a931

0800a144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4313      	orrs	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4bb1      	ldr	r3, [pc, #708]	; (800a438 <UART_SetConfig+0x2f4>)
 800a174:	4013      	ands	r3, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	6939      	ldr	r1, [r7, #16]
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a9f      	ldr	r2, [pc, #636]	; (800a43c <UART_SetConfig+0x2f8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d121      	bne.n	800a208 <UART_SetConfig+0xc4>
 800a1c4:	4b9e      	ldr	r3, [pc, #632]	; (800a440 <UART_SetConfig+0x2fc>)
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d816      	bhi.n	800a200 <UART_SetConfig+0xbc>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x94>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a1f5 	.word	0x0800a1f5
 800a1e0:	0800a1ef 	.word	0x0800a1ef
 800a1e4:	0800a1fb 	.word	0x0800a1fb
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e151      	b.n	800a492 <UART_SetConfig+0x34e>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e14e      	b.n	800a492 <UART_SetConfig+0x34e>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e14b      	b.n	800a492 <UART_SetConfig+0x34e>
 800a1fa:	2308      	movs	r3, #8
 800a1fc:	77fb      	strb	r3, [r7, #31]
 800a1fe:	e148      	b.n	800a492 <UART_SetConfig+0x34e>
 800a200:	2310      	movs	r3, #16
 800a202:	77fb      	strb	r3, [r7, #31]
 800a204:	bf00      	nop
 800a206:	e144      	b.n	800a492 <UART_SetConfig+0x34e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a8d      	ldr	r2, [pc, #564]	; (800a444 <UART_SetConfig+0x300>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d134      	bne.n	800a27c <UART_SetConfig+0x138>
 800a212:	4b8b      	ldr	r3, [pc, #556]	; (800a440 <UART_SetConfig+0x2fc>)
 800a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a218:	f003 030c 	and.w	r3, r3, #12
 800a21c:	2b0c      	cmp	r3, #12
 800a21e:	d829      	bhi.n	800a274 <UART_SetConfig+0x130>
 800a220:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <UART_SetConfig+0xe4>)
 800a222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a226:	bf00      	nop
 800a228:	0800a25d 	.word	0x0800a25d
 800a22c:	0800a275 	.word	0x0800a275
 800a230:	0800a275 	.word	0x0800a275
 800a234:	0800a275 	.word	0x0800a275
 800a238:	0800a269 	.word	0x0800a269
 800a23c:	0800a275 	.word	0x0800a275
 800a240:	0800a275 	.word	0x0800a275
 800a244:	0800a275 	.word	0x0800a275
 800a248:	0800a263 	.word	0x0800a263
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a275 	.word	0x0800a275
 800a254:	0800a275 	.word	0x0800a275
 800a258:	0800a26f 	.word	0x0800a26f
 800a25c:	2300      	movs	r3, #0
 800a25e:	77fb      	strb	r3, [r7, #31]
 800a260:	e117      	b.n	800a492 <UART_SetConfig+0x34e>
 800a262:	2302      	movs	r3, #2
 800a264:	77fb      	strb	r3, [r7, #31]
 800a266:	e114      	b.n	800a492 <UART_SetConfig+0x34e>
 800a268:	2304      	movs	r3, #4
 800a26a:	77fb      	strb	r3, [r7, #31]
 800a26c:	e111      	b.n	800a492 <UART_SetConfig+0x34e>
 800a26e:	2308      	movs	r3, #8
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e10e      	b.n	800a492 <UART_SetConfig+0x34e>
 800a274:	2310      	movs	r3, #16
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	bf00      	nop
 800a27a:	e10a      	b.n	800a492 <UART_SetConfig+0x34e>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a71      	ldr	r2, [pc, #452]	; (800a448 <UART_SetConfig+0x304>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d120      	bne.n	800a2c8 <UART_SetConfig+0x184>
 800a286:	4b6e      	ldr	r3, [pc, #440]	; (800a440 <UART_SetConfig+0x2fc>)
 800a288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a28c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a290:	2b10      	cmp	r3, #16
 800a292:	d00f      	beq.n	800a2b4 <UART_SetConfig+0x170>
 800a294:	2b10      	cmp	r3, #16
 800a296:	d802      	bhi.n	800a29e <UART_SetConfig+0x15a>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <UART_SetConfig+0x164>
 800a29c:	e010      	b.n	800a2c0 <UART_SetConfig+0x17c>
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d005      	beq.n	800a2ae <UART_SetConfig+0x16a>
 800a2a2:	2b30      	cmp	r3, #48	; 0x30
 800a2a4:	d009      	beq.n	800a2ba <UART_SetConfig+0x176>
 800a2a6:	e00b      	b.n	800a2c0 <UART_SetConfig+0x17c>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	77fb      	strb	r3, [r7, #31]
 800a2ac:	e0f1      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	77fb      	strb	r3, [r7, #31]
 800a2b2:	e0ee      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	77fb      	strb	r3, [r7, #31]
 800a2b8:	e0eb      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	77fb      	strb	r3, [r7, #31]
 800a2be:	e0e8      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	77fb      	strb	r3, [r7, #31]
 800a2c4:	bf00      	nop
 800a2c6:	e0e4      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a5f      	ldr	r2, [pc, #380]	; (800a44c <UART_SetConfig+0x308>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d120      	bne.n	800a314 <UART_SetConfig+0x1d0>
 800a2d2:	4b5b      	ldr	r3, [pc, #364]	; (800a440 <UART_SetConfig+0x2fc>)
 800a2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2dc:	2b40      	cmp	r3, #64	; 0x40
 800a2de:	d00f      	beq.n	800a300 <UART_SetConfig+0x1bc>
 800a2e0:	2b40      	cmp	r3, #64	; 0x40
 800a2e2:	d802      	bhi.n	800a2ea <UART_SetConfig+0x1a6>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <UART_SetConfig+0x1b0>
 800a2e8:	e010      	b.n	800a30c <UART_SetConfig+0x1c8>
 800a2ea:	2b80      	cmp	r3, #128	; 0x80
 800a2ec:	d005      	beq.n	800a2fa <UART_SetConfig+0x1b6>
 800a2ee:	2bc0      	cmp	r3, #192	; 0xc0
 800a2f0:	d009      	beq.n	800a306 <UART_SetConfig+0x1c2>
 800a2f2:	e00b      	b.n	800a30c <UART_SetConfig+0x1c8>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	77fb      	strb	r3, [r7, #31]
 800a2f8:	e0cb      	b.n	800a492 <UART_SetConfig+0x34e>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	77fb      	strb	r3, [r7, #31]
 800a2fe:	e0c8      	b.n	800a492 <UART_SetConfig+0x34e>
 800a300:	2304      	movs	r3, #4
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e0c5      	b.n	800a492 <UART_SetConfig+0x34e>
 800a306:	2308      	movs	r3, #8
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e0c2      	b.n	800a492 <UART_SetConfig+0x34e>
 800a30c:	2310      	movs	r3, #16
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	bf00      	nop
 800a312:	e0be      	b.n	800a492 <UART_SetConfig+0x34e>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a4d      	ldr	r2, [pc, #308]	; (800a450 <UART_SetConfig+0x30c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d124      	bne.n	800a368 <UART_SetConfig+0x224>
 800a31e:	4b48      	ldr	r3, [pc, #288]	; (800a440 <UART_SetConfig+0x2fc>)
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32c:	d012      	beq.n	800a354 <UART_SetConfig+0x210>
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a332:	d802      	bhi.n	800a33a <UART_SetConfig+0x1f6>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <UART_SetConfig+0x204>
 800a338:	e012      	b.n	800a360 <UART_SetConfig+0x21c>
 800a33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33e:	d006      	beq.n	800a34e <UART_SetConfig+0x20a>
 800a340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a344:	d009      	beq.n	800a35a <UART_SetConfig+0x216>
 800a346:	e00b      	b.n	800a360 <UART_SetConfig+0x21c>
 800a348:	2300      	movs	r3, #0
 800a34a:	77fb      	strb	r3, [r7, #31]
 800a34c:	e0a1      	b.n	800a492 <UART_SetConfig+0x34e>
 800a34e:	2302      	movs	r3, #2
 800a350:	77fb      	strb	r3, [r7, #31]
 800a352:	e09e      	b.n	800a492 <UART_SetConfig+0x34e>
 800a354:	2304      	movs	r3, #4
 800a356:	77fb      	strb	r3, [r7, #31]
 800a358:	e09b      	b.n	800a492 <UART_SetConfig+0x34e>
 800a35a:	2308      	movs	r3, #8
 800a35c:	77fb      	strb	r3, [r7, #31]
 800a35e:	e098      	b.n	800a492 <UART_SetConfig+0x34e>
 800a360:	2310      	movs	r3, #16
 800a362:	77fb      	strb	r3, [r7, #31]
 800a364:	bf00      	nop
 800a366:	e094      	b.n	800a492 <UART_SetConfig+0x34e>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a39      	ldr	r2, [pc, #228]	; (800a454 <UART_SetConfig+0x310>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d124      	bne.n	800a3bc <UART_SetConfig+0x278>
 800a372:	4b33      	ldr	r3, [pc, #204]	; (800a440 <UART_SetConfig+0x2fc>)
 800a374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a380:	d012      	beq.n	800a3a8 <UART_SetConfig+0x264>
 800a382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a386:	d802      	bhi.n	800a38e <UART_SetConfig+0x24a>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d007      	beq.n	800a39c <UART_SetConfig+0x258>
 800a38c:	e012      	b.n	800a3b4 <UART_SetConfig+0x270>
 800a38e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a392:	d006      	beq.n	800a3a2 <UART_SetConfig+0x25e>
 800a394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a398:	d009      	beq.n	800a3ae <UART_SetConfig+0x26a>
 800a39a:	e00b      	b.n	800a3b4 <UART_SetConfig+0x270>
 800a39c:	2301      	movs	r3, #1
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e077      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e074      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3a8:	2304      	movs	r3, #4
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e071      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3ae:	2308      	movs	r3, #8
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e06e      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	77fb      	strb	r3, [r7, #31]
 800a3b8:	bf00      	nop
 800a3ba:	e06a      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a25      	ldr	r2, [pc, #148]	; (800a458 <UART_SetConfig+0x314>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d124      	bne.n	800a410 <UART_SetConfig+0x2cc>
 800a3c6:	4b1e      	ldr	r3, [pc, #120]	; (800a440 <UART_SetConfig+0x2fc>)
 800a3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d4:	d012      	beq.n	800a3fc <UART_SetConfig+0x2b8>
 800a3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3da:	d802      	bhi.n	800a3e2 <UART_SetConfig+0x29e>
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d007      	beq.n	800a3f0 <UART_SetConfig+0x2ac>
 800a3e0:	e012      	b.n	800a408 <UART_SetConfig+0x2c4>
 800a3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e6:	d006      	beq.n	800a3f6 <UART_SetConfig+0x2b2>
 800a3e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3ec:	d009      	beq.n	800a402 <UART_SetConfig+0x2be>
 800a3ee:	e00b      	b.n	800a408 <UART_SetConfig+0x2c4>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e04d      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	77fb      	strb	r3, [r7, #31]
 800a3fa:	e04a      	b.n	800a492 <UART_SetConfig+0x34e>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	77fb      	strb	r3, [r7, #31]
 800a400:	e047      	b.n	800a492 <UART_SetConfig+0x34e>
 800a402:	2308      	movs	r3, #8
 800a404:	77fb      	strb	r3, [r7, #31]
 800a406:	e044      	b.n	800a492 <UART_SetConfig+0x34e>
 800a408:	2310      	movs	r3, #16
 800a40a:	77fb      	strb	r3, [r7, #31]
 800a40c:	bf00      	nop
 800a40e:	e040      	b.n	800a492 <UART_SetConfig+0x34e>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <UART_SetConfig+0x318>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d139      	bne.n	800a48e <UART_SetConfig+0x34a>
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <UART_SetConfig+0x2fc>)
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a428:	d027      	beq.n	800a47a <UART_SetConfig+0x336>
 800a42a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a42e:	d817      	bhi.n	800a460 <UART_SetConfig+0x31c>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d01c      	beq.n	800a46e <UART_SetConfig+0x32a>
 800a434:	e027      	b.n	800a486 <UART_SetConfig+0x342>
 800a436:	bf00      	nop
 800a438:	efff69f3 	.word	0xefff69f3
 800a43c:	40011000 	.word	0x40011000
 800a440:	40023800 	.word	0x40023800
 800a444:	40004400 	.word	0x40004400
 800a448:	40004800 	.word	0x40004800
 800a44c:	40004c00 	.word	0x40004c00
 800a450:	40005000 	.word	0x40005000
 800a454:	40011400 	.word	0x40011400
 800a458:	40007800 	.word	0x40007800
 800a45c:	40007c00 	.word	0x40007c00
 800a460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a464:	d006      	beq.n	800a474 <UART_SetConfig+0x330>
 800a466:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a46a:	d009      	beq.n	800a480 <UART_SetConfig+0x33c>
 800a46c:	e00b      	b.n	800a486 <UART_SetConfig+0x342>
 800a46e:	2300      	movs	r3, #0
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e00e      	b.n	800a492 <UART_SetConfig+0x34e>
 800a474:	2302      	movs	r3, #2
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e00b      	b.n	800a492 <UART_SetConfig+0x34e>
 800a47a:	2304      	movs	r3, #4
 800a47c:	77fb      	strb	r3, [r7, #31]
 800a47e:	e008      	b.n	800a492 <UART_SetConfig+0x34e>
 800a480:	2308      	movs	r3, #8
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e005      	b.n	800a492 <UART_SetConfig+0x34e>
 800a486:	2310      	movs	r3, #16
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	bf00      	nop
 800a48c:	e001      	b.n	800a492 <UART_SetConfig+0x34e>
 800a48e:	2310      	movs	r3, #16
 800a490:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a49a:	d17f      	bne.n	800a59c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
 800a49e:	2b08      	cmp	r3, #8
 800a4a0:	d85c      	bhi.n	800a55c <UART_SetConfig+0x418>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <UART_SetConfig+0x364>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4cd 	.word	0x0800a4cd
 800a4ac:	0800a4ed 	.word	0x0800a4ed
 800a4b0:	0800a50d 	.word	0x0800a50d
 800a4b4:	0800a55d 	.word	0x0800a55d
 800a4b8:	0800a525 	.word	0x0800a525
 800a4bc:	0800a55d 	.word	0x0800a55d
 800a4c0:	0800a55d 	.word	0x0800a55d
 800a4c4:	0800a55d 	.word	0x0800a55d
 800a4c8:	0800a545 	.word	0x0800a545
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4cc:	f7fc fcfa 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 800a4d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	005a      	lsls	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	085b      	lsrs	r3, r3, #1
 800a4dc:	441a      	add	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	61bb      	str	r3, [r7, #24]
        break;
 800a4ea:	e03a      	b.n	800a562 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4ec:	f7fc fcfe 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 800a4f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	005a      	lsls	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	441a      	add	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	fbb2 f3f3 	udiv	r3, r2, r3
 800a506:	b29b      	uxth	r3, r3
 800a508:	61bb      	str	r3, [r7, #24]
        break;
 800a50a:	e02a      	b.n	800a562 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	085a      	lsrs	r2, r3, #1
 800a512:	4b5f      	ldr	r3, [pc, #380]	; (800a690 <UART_SetConfig+0x54c>)
 800a514:	4413      	add	r3, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6852      	ldr	r2, [r2, #4]
 800a51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a51e:	b29b      	uxth	r3, r3
 800a520:	61bb      	str	r3, [r7, #24]
        break;
 800a522:	e01e      	b.n	800a562 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a524:	f7fc fbea 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 800a528:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	005a      	lsls	r2, r3, #1
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	441a      	add	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53e:	b29b      	uxth	r3, r3
 800a540:	61bb      	str	r3, [r7, #24]
        break;
 800a542:	e00e      	b.n	800a562 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	fbb2 f3f3 	udiv	r3, r2, r3
 800a556:	b29b      	uxth	r3, r3
 800a558:	61bb      	str	r3, [r7, #24]
        break;
 800a55a:	e002      	b.n	800a562 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
        break;
 800a560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b0f      	cmp	r3, #15
 800a566:	d916      	bls.n	800a596 <UART_SetConfig+0x452>
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56e:	d212      	bcs.n	800a596 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f023 030f 	bic.w	r3, r3, #15
 800a578:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	085b      	lsrs	r3, r3, #1
 800a57e:	b29b      	uxth	r3, r3
 800a580:	f003 0307 	and.w	r3, r3, #7
 800a584:	b29a      	uxth	r2, r3
 800a586:	897b      	ldrh	r3, [r7, #10]
 800a588:	4313      	orrs	r3, r2
 800a58a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	897a      	ldrh	r2, [r7, #10]
 800a592:	60da      	str	r2, [r3, #12]
 800a594:	e070      	b.n	800a678 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	75fb      	strb	r3, [r7, #23]
 800a59a:	e06d      	b.n	800a678 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a59c:	7ffb      	ldrb	r3, [r7, #31]
 800a59e:	2b08      	cmp	r3, #8
 800a5a0:	d859      	bhi.n	800a656 <UART_SetConfig+0x512>
 800a5a2:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0x464>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5eb 	.word	0x0800a5eb
 800a5b0:	0800a609 	.word	0x0800a609
 800a5b4:	0800a657 	.word	0x0800a657
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a657 	.word	0x0800a657
 800a5c0:	0800a657 	.word	0x0800a657
 800a5c4:	0800a657 	.word	0x0800a657
 800a5c8:	0800a63f 	.word	0x0800a63f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5cc:	f7fc fc7a 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 800a5d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	085a      	lsrs	r2, r3, #1
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	441a      	add	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	61bb      	str	r3, [r7, #24]
        break;
 800a5e8:	e038      	b.n	800a65c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ea:	f7fc fc7f 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 800a5ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	085a      	lsrs	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	441a      	add	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a602:	b29b      	uxth	r3, r3
 800a604:	61bb      	str	r3, [r7, #24]
        break;
 800a606:	e029      	b.n	800a65c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	085a      	lsrs	r2, r3, #1
 800a60e:	4b21      	ldr	r3, [pc, #132]	; (800a694 <UART_SetConfig+0x550>)
 800a610:	4413      	add	r3, r2
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	6852      	ldr	r2, [r2, #4]
 800a616:	fbb3 f3f2 	udiv	r3, r3, r2
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	61bb      	str	r3, [r7, #24]
        break;
 800a61e:	e01d      	b.n	800a65c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a620:	f7fc fb6c 	bl	8006cfc <HAL_RCC_GetSysClockFreq>
 800a624:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	085a      	lsrs	r2, r3, #1
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	441a      	add	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	fbb2 f3f3 	udiv	r3, r2, r3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	61bb      	str	r3, [r7, #24]
        break;
 800a63c:	e00e      	b.n	800a65c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	61bb      	str	r3, [r7, #24]
        break;
 800a654:	e002      	b.n	800a65c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	75fb      	strb	r3, [r7, #23]
        break;
 800a65a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b0f      	cmp	r3, #15
 800a660:	d908      	bls.n	800a674 <UART_SetConfig+0x530>
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a668:	d204      	bcs.n	800a674 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	e001      	b.n	800a678 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3720      	adds	r7, #32
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	01e84800 	.word	0x01e84800
 800a694:	00f42400 	.word	0x00f42400

0800a698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70a:	f003 0308 	and.w	r3, r3, #8
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00a      	beq.n	800a728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00a      	beq.n	800a74a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	430a      	orrs	r2, r1
 800a76a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d01a      	beq.n	800a7ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a796:	d10a      	bne.n	800a7ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	605a      	str	r2, [r3, #4]
  }
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7ea:	f7f9 fec1 	bl	8004570 <HAL_GetTick>
 800a7ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b08      	cmp	r3, #8
 800a7fc:	d10e      	bne.n	800a81c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f814 	bl	800a83a <UART_WaitOnFlagUntilTimeout>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e00a      	b.n	800a832 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	603b      	str	r3, [r7, #0]
 800a846:	4613      	mov	r3, r2
 800a848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84a:	e05d      	b.n	800a908 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d059      	beq.n	800a908 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a854:	f7f9 fe8c 	bl	8004570 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	429a      	cmp	r2, r3
 800a862:	d302      	bcc.n	800a86a <UART_WaitOnFlagUntilTimeout+0x30>
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d11b      	bne.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a878:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2220      	movs	r2, #32
 800a88e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e042      	b.n	800a928 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d02b      	beq.n	800a908 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8be:	d123      	bne.n	800a908 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0201 	bic.w	r2, r2, #1
 800a8e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e00f      	b.n	800a928 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69da      	ldr	r2, [r3, #28]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4013      	ands	r3, r2
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	429a      	cmp	r2, r3
 800a916:	bf0c      	ite	eq
 800a918:	2301      	moveq	r3, #1
 800a91a:	2300      	movne	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	429a      	cmp	r2, r3
 800a924:	d092      	beq.n	800a84c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a93e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a944:	2b22      	cmp	r3, #34	; 0x22
 800a946:	d13a      	bne.n	800a9be <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a950:	89bb      	ldrh	r3, [r7, #12]
 800a952:	b2d9      	uxtb	r1, r3
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	b2da      	uxtb	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	400a      	ands	r2, r1
 800a95e:	b2d2      	uxtb	r2, r2
 800a960:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a972:	b29b      	uxth	r3, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d121      	bne.n	800a9ce <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a998:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0201 	bic.w	r2, r2, #1
 800a9a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7f8 ff60 	bl	800387c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9bc:	e007      	b.n	800a9ce <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699a      	ldr	r2, [r3, #24]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f042 0208 	orr.w	r2, r2, #8
 800a9cc:	619a      	str	r2, [r3, #24]
}
 800a9ce:	bf00      	nop
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ea:	2b22      	cmp	r3, #34	; 0x22
 800a9ec:	d13a      	bne.n	800aa64 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9fc:	89ba      	ldrh	r2, [r7, #12]
 800a9fe:	89fb      	ldrh	r3, [r7, #14]
 800aa00:	4013      	ands	r3, r2
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0c:	1c9a      	adds	r2, r3, #2
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d121      	bne.n	800aa74 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa3e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 0201 	bic.w	r2, r2, #1
 800aa4e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2220      	movs	r2, #32
 800aa54:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7f8 ff0d 	bl	800387c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa62:	e007      	b.n	800aa74 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699a      	ldr	r2, [r3, #24]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0208 	orr.w	r2, r2, #8
 800aa72:	619a      	str	r2, [r3, #24]
}
 800aa74:	bf00      	nop
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	f107 001c 	add.w	r0, r7, #28
 800aa8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aaa2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aaa6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <SDMMC_Init+0x54>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	b004      	add	sp, #16
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	ffff8100 	.word	0xffff8100

0800aad4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ab1e:	2002      	movs	r0, #2
 800ab20:	f7f9 fd32 	bl	8004588 <HAL_Delay>
  
  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab70:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <SDMMC_SendCommand+0x50>)
 800ab84:	4013      	ands	r3, r2
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	fffff000 	.word	0xfffff000

0800aba0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3314      	adds	r3, #20
 800abc8:	461a      	mov	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
}  
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0

}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac46:	2310      	movs	r3, #16
 800ac48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac4a:	2340      	movs	r3, #64	; 0x40
 800ac4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac58:	f107 0308 	add.w	r3, r7, #8
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff ff74 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac68:	2110      	movs	r1, #16
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa42 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800ac70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac72:	69fb      	ldr	r3, [r7, #28]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac8a:	2311      	movs	r3, #17
 800ac8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac8e:	2340      	movs	r3, #64	; 0x40
 800ac90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff ff52 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aca8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acac:	2111      	movs	r1, #17
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fa20 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800acb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb6:	69fb      	ldr	r3, [r7, #28]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acce:	2312      	movs	r3, #18
 800acd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acd2:	2340      	movs	r3, #64	; 0x40
 800acd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace0:	f107 0308 	add.w	r3, r7, #8
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ff30 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acec:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf0:	2112      	movs	r1, #18
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9fe 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800acf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acfa:	69fb      	ldr	r3, [r7, #28]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3720      	adds	r7, #32
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad12:	2318      	movs	r3, #24
 800ad14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad24:	f107 0308 	add.w	r3, r7, #8
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff ff0e 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad34:	2118      	movs	r1, #24
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f9dc 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800ad3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3720      	adds	r7, #32
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad56:	2319      	movs	r3, #25
 800ad58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff feec 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	2119      	movs	r1, #25
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f9ba 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad98:	230c      	movs	r3, #12
 800ad9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adaa:	f107 0308 	add.w	r3, r7, #8
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff fecb 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adb6:	4a05      	ldr	r2, [pc, #20]	; (800adcc <SDMMC_CmdStopTransfer+0x40>)
 800adb8:	210c      	movs	r1, #12
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f99a 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800adc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc2:	69fb      	ldr	r3, [r7, #28]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	05f5e100 	.word	0x05f5e100

0800add0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ade0:	2307      	movs	r3, #7
 800ade2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade4:	2340      	movs	r3, #64	; 0x40
 800ade6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	4619      	mov	r1, r3
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7ff fea7 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800adfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae02:	2107      	movs	r1, #7
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f975 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae26:	2300      	movs	r3, #0
 800ae28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff fe86 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f92f 	bl	800b0a4 <SDMMC_GetCmdError>
 800ae46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae48:	69fb      	ldr	r3, [r7, #28]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b088      	sub	sp, #32
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae60:	2308      	movs	r3, #8
 800ae62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fe67 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fb18 	bl	800b4b4 <SDMMC_GetCmdResp7>
 800ae84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae86:	69fb      	ldr	r3, [r7, #28]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae9e:	2337      	movs	r3, #55	; 0x37
 800aea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb0:	f107 0308 	add.w	r3, r7, #8
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fe48 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec0:	2137      	movs	r1, #55	; 0x37
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f916 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800aec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeca:	69fb      	ldr	r3, [r7, #28]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <SDMMC_CmdAppOperCommand+0x44>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aee6:	2329      	movs	r3, #41	; 0x29
 800aee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fe24 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa27 	bl	800b358 <SDMMC_GetCmdResp3>
 800af0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0c:	69fb      	ldr	r3, [r7, #28]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	80100000 	.word	0x80100000

0800af1c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af2a:	2306      	movs	r3, #6
 800af2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af2e:	2340      	movs	r3, #64	; 0x40
 800af30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3c:	f107 0308 	add.w	r3, r7, #8
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fe02 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af48:	f241 3288 	movw	r2, #5000	; 0x1388
 800af4c:	2106      	movs	r1, #6
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f8d0 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800af54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af56:	69fb      	ldr	r3, [r7, #28]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3720      	adds	r7, #32
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af6c:	2333      	movs	r3, #51	; 0x33
 800af6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff fde1 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800af8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af8e:	2133      	movs	r1, #51	; 0x33
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f8af 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800af96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af98:	69fb      	ldr	r3, [r7, #28]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afae:	2302      	movs	r3, #2
 800afb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afb2:	23c0      	movs	r3, #192	; 0xc0
 800afb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff fdc0 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f97d 	bl	800b2cc <SDMMC_GetCmdResp2>
 800afd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd4:	69fb      	ldr	r3, [r7, #28]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b088      	sub	sp, #32
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800afec:	2309      	movs	r3, #9
 800afee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aff0:	23c0      	movs	r3, #192	; 0xc0
 800aff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff4:	2300      	movs	r3, #0
 800aff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800affe:	f107 0308 	add.w	r3, r7, #8
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff fda1 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f95e 	bl	800b2cc <SDMMC_GetCmdResp2>
 800b010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b012:	69fb      	ldr	r3, [r7, #28]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3720      	adds	r7, #32
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b02a:	2303      	movs	r3, #3
 800b02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b02e:	2340      	movs	r3, #64	; 0x40
 800b030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b032:	2300      	movs	r3, #0
 800b034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b03c:	f107 0308 	add.w	r3, r7, #8
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff fd82 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	2103      	movs	r1, #3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f9bd 	bl	800b3cc <SDMMC_GetCmdResp6>
 800b052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b054:	69fb      	ldr	r3, [r7, #28]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3720      	adds	r7, #32
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b088      	sub	sp, #32
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b06c:	230d      	movs	r3, #13
 800b06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b07e:	f107 0308 	add.w	r3, r7, #8
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f7ff fd61 	bl	800ab4c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08e:	210d      	movs	r1, #13
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f82f 	bl	800b0f4 <SDMMC_GetCmdResp1>
 800b096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b098:	69fb      	ldr	r3, [r7, #28]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b0a4:	b490      	push	{r4, r7}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0ac:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <SDMMC_GetCmdError+0x48>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a0f      	ldr	r2, [pc, #60]	; (800b0f0 <SDMMC_GetCmdError+0x4c>)
 800b0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b6:	0a5b      	lsrs	r3, r3, #9
 800b0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	1e5c      	subs	r4, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0cc:	e009      	b.n	800b0e2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f2      	beq.n	800b0c0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	22c5      	movs	r2, #197	; 0xc5
 800b0de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc90      	pop	{r4, r7}
 800b0ea:	4770      	bx	lr
 800b0ec:	20000000 	.word	0x20000000
 800b0f0:	10624dd3 	.word	0x10624dd3

0800b0f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b102:	4b6f      	ldr	r3, [pc, #444]	; (800b2c0 <SDMMC_GetCmdResp1+0x1cc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a6f      	ldr	r2, [pc, #444]	; (800b2c4 <SDMMC_GetCmdResp1+0x1d0>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	0a5b      	lsrs	r3, r3, #9
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b114:	4623      	mov	r3, r4
 800b116:	1e5c      	subs	r4, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b11c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b120:	e0c9      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f0      	beq.n	800b114 <SDMMC_GetCmdResp1+0x20>
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1eb      	bne.n	800b114 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2204      	movs	r2, #4
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b14e:	2304      	movs	r3, #4
 800b150:	e0b1      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b164:	2301      	movs	r3, #1
 800b166:	e0a6      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22c5      	movs	r2, #197	; 0xc5
 800b16c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7ff fd16 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d001      	beq.n	800b182 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b17e:	2301      	movs	r3, #1
 800b180:	e099      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b182:	2100      	movs	r1, #0
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff fd18 	bl	800abba <SDMMC_GetResponse>
 800b18a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4b4e      	ldr	r3, [pc, #312]	; (800b2c8 <SDMMC_GetCmdResp1+0x1d4>)
 800b190:	4013      	ands	r3, r2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b196:	2300      	movs	r3, #0
 800b198:	e08d      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da02      	bge.n	800b1a6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1a4:	e087      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1b0:	2340      	movs	r3, #64	; 0x40
 800b1b2:	e080      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1be:	2380      	movs	r3, #128	; 0x80
 800b1c0:	e079      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d0:	e071      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e0:	e069      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1f0:	e061      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b200:	e059      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b210:	e051      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b220:	e049      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b22c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b230:	e041      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b23c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b240:	e039      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b24c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b250:	e031      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b25c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b260:	e029      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b26c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b270:	e021      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b27c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b280:	e019      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b28c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b290:	e011      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b29c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2a0:	e009      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2b0:	e001      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd90      	pop	{r4, r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000000 	.word	0x20000000
 800b2c4:	10624dd3 	.word	0x10624dd3
 800b2c8:	fdffe008 	.word	0xfdffe008

0800b2cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b2cc:	b490      	push	{r4, r7}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2d4:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <SDMMC_GetCmdResp2+0x84>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a1e      	ldr	r2, [pc, #120]	; (800b354 <SDMMC_GetCmdResp2+0x88>)
 800b2da:	fba2 2303 	umull	r2, r3, r2, r3
 800b2de:	0a5b      	lsrs	r3, r3, #9
 800b2e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	1e5c      	subs	r4, r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2f4:	e026      	b.n	800b344 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f0      	beq.n	800b2e8 <SDMMC_GetCmdResp2+0x1c>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1eb      	bne.n	800b2e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b322:	2304      	movs	r3, #4
 800b324:	e00e      	b.n	800b344 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b338:	2301      	movs	r3, #1
 800b33a:	e003      	b.n	800b344 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	22c5      	movs	r2, #197	; 0xc5
 800b340:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc90      	pop	{r4, r7}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20000000 	.word	0x20000000
 800b354:	10624dd3 	.word	0x10624dd3

0800b358 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b358:	b490      	push	{r4, r7}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b360:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <SDMMC_GetCmdResp3+0x6c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <SDMMC_GetCmdResp3+0x70>)
 800b366:	fba2 2303 	umull	r2, r3, r2, r3
 800b36a:	0a5b      	lsrs	r3, r3, #9
 800b36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b370:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b374:	4623      	mov	r3, r4
 800b376:	1e5c      	subs	r4, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b380:	e01b      	b.n	800b3ba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b386:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0f0      	beq.n	800b374 <SDMMC_GetCmdResp3+0x1c>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1eb      	bne.n	800b374 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2204      	movs	r2, #4
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	e003      	b.n	800b3ba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	22c5      	movs	r2, #197	; 0xc5
 800b3b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc90      	pop	{r4, r7}
 800b3c2:	4770      	bx	lr
 800b3c4:	20000000 	.word	0x20000000
 800b3c8:	10624dd3 	.word	0x10624dd3

0800b3cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b3cc:	b590      	push	{r4, r7, lr}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3da:	4b34      	ldr	r3, [pc, #208]	; (800b4ac <SDMMC_GetCmdResp6+0xe0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a34      	ldr	r2, [pc, #208]	; (800b4b0 <SDMMC_GetCmdResp6+0xe4>)
 800b3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e4:	0a5b      	lsrs	r3, r3, #9
 800b3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	1e5c      	subs	r4, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3fa:	e052      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b400:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f0      	beq.n	800b3ee <SDMMC_GetCmdResp6+0x22>
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1eb      	bne.n	800b3ee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41a:	f003 0304 	and.w	r3, r3, #4
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2204      	movs	r2, #4
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b428:	2304      	movs	r3, #4
 800b42a:	e03a      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b43e:	2301      	movs	r3, #1
 800b440:	e02f      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff fbac 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b448:	4603      	mov	r3, r0
 800b44a:	461a      	mov	r2, r3
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	4293      	cmp	r3, r2
 800b450:	d001      	beq.n	800b456 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b452:	2301      	movs	r3, #1
 800b454:	e025      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	22c5      	movs	r2, #197	; 0xc5
 800b45a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b45c:	2100      	movs	r1, #0
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7ff fbab 	bl	800abba <SDMMC_GetResponse>
 800b464:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	0c1b      	lsrs	r3, r3, #16
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e011      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b48c:	e009      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b49c:	e001      	b.n	800b4a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b49e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20000000 	.word	0x20000000
 800b4b0:	10624dd3 	.word	0x10624dd3

0800b4b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b4b4:	b490      	push	{r4, r7}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4bc:	4b21      	ldr	r3, [pc, #132]	; (800b544 <SDMMC_GetCmdResp7+0x90>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a21      	ldr	r2, [pc, #132]	; (800b548 <SDMMC_GetCmdResp7+0x94>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	0a5b      	lsrs	r3, r3, #9
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	1e5c      	subs	r4, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4dc:	e02c      	b.n	800b538 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0f0      	beq.n	800b4d0 <SDMMC_GetCmdResp7+0x1c>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1eb      	bne.n	800b4d0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2204      	movs	r2, #4
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b50a:	2304      	movs	r3, #4
 800b50c:	e014      	b.n	800b538 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b520:	2301      	movs	r3, #1
 800b522:	e009      	b.n	800b538 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2240      	movs	r2, #64	; 0x40
 800b534:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b536:	2300      	movs	r3, #0
  
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc90      	pop	{r4, r7}
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20000000 	.word	0x20000000
 800b548:	10624dd3 	.word	0x10624dd3

0800b54c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b54c:	b084      	sub	sp, #16
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	f107 001c 	add.w	r0, r7, #28
 800b55a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	2b01      	cmp	r3, #1
 800b562:	d120      	bne.n	800b5a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	4b20      	ldr	r3, [pc, #128]	; (800b5f8 <USB_CoreInit+0xac>)
 800b576:	4013      	ands	r3, r2
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d105      	bne.n	800b59a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 fac4 	bl	800cb28 <USB_CoreReset>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]
 800b5a4:	e010      	b.n	800b5c8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fab8 	bl	800cb28 <USB_CoreReset>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d10b      	bne.n	800b5e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f043 0206 	orr.w	r2, r3, #6
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f043 0220 	orr.w	r2, r3, #32
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5f2:	b004      	add	sp, #16
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	ffbdffbf 	.word	0xffbdffbf

0800b5fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	4613      	mov	r3, r2
 800b608:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d165      	bne.n	800b6dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	4a41      	ldr	r2, [pc, #260]	; (800b718 <USB_SetTurnaroundTime+0x11c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d906      	bls.n	800b626 <USB_SetTurnaroundTime+0x2a>
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	4a40      	ldr	r2, [pc, #256]	; (800b71c <USB_SetTurnaroundTime+0x120>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d802      	bhi.n	800b626 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b620:	230f      	movs	r3, #15
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	e062      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	4a3c      	ldr	r2, [pc, #240]	; (800b71c <USB_SetTurnaroundTime+0x120>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d906      	bls.n	800b63c <USB_SetTurnaroundTime+0x40>
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4a3b      	ldr	r2, [pc, #236]	; (800b720 <USB_SetTurnaroundTime+0x124>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d802      	bhi.n	800b63c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b636:	230e      	movs	r3, #14
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	e057      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	4a38      	ldr	r2, [pc, #224]	; (800b720 <USB_SetTurnaroundTime+0x124>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d906      	bls.n	800b652 <USB_SetTurnaroundTime+0x56>
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	4a37      	ldr	r2, [pc, #220]	; (800b724 <USB_SetTurnaroundTime+0x128>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d802      	bhi.n	800b652 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b64c:	230d      	movs	r3, #13
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e04c      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	4a33      	ldr	r2, [pc, #204]	; (800b724 <USB_SetTurnaroundTime+0x128>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d906      	bls.n	800b668 <USB_SetTurnaroundTime+0x6c>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	4a32      	ldr	r2, [pc, #200]	; (800b728 <USB_SetTurnaroundTime+0x12c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d802      	bhi.n	800b668 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b662:	230c      	movs	r3, #12
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	e041      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4a2f      	ldr	r2, [pc, #188]	; (800b728 <USB_SetTurnaroundTime+0x12c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d906      	bls.n	800b67e <USB_SetTurnaroundTime+0x82>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	4a2e      	ldr	r2, [pc, #184]	; (800b72c <USB_SetTurnaroundTime+0x130>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d802      	bhi.n	800b67e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b678:	230b      	movs	r3, #11
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e036      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	4a2a      	ldr	r2, [pc, #168]	; (800b72c <USB_SetTurnaroundTime+0x130>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d906      	bls.n	800b694 <USB_SetTurnaroundTime+0x98>
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	4a29      	ldr	r2, [pc, #164]	; (800b730 <USB_SetTurnaroundTime+0x134>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d802      	bhi.n	800b694 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b68e:	230a      	movs	r3, #10
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	e02b      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4a26      	ldr	r2, [pc, #152]	; (800b730 <USB_SetTurnaroundTime+0x134>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d906      	bls.n	800b6aa <USB_SetTurnaroundTime+0xae>
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4a25      	ldr	r2, [pc, #148]	; (800b734 <USB_SetTurnaroundTime+0x138>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d802      	bhi.n	800b6aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b6a4:	2309      	movs	r3, #9
 800b6a6:	617b      	str	r3, [r7, #20]
 800b6a8:	e020      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	4a21      	ldr	r2, [pc, #132]	; (800b734 <USB_SetTurnaroundTime+0x138>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d906      	bls.n	800b6c0 <USB_SetTurnaroundTime+0xc4>
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	4a20      	ldr	r2, [pc, #128]	; (800b738 <USB_SetTurnaroundTime+0x13c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d802      	bhi.n	800b6c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b6ba:	2308      	movs	r3, #8
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e015      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <USB_SetTurnaroundTime+0x13c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d906      	bls.n	800b6d6 <USB_SetTurnaroundTime+0xda>
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	; (800b73c <USB_SetTurnaroundTime+0x140>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d802      	bhi.n	800b6d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b6d0:	2307      	movs	r3, #7
 800b6d2:	617b      	str	r3, [r7, #20]
 800b6d4:	e00a      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b6d6:	2306      	movs	r3, #6
 800b6d8:	617b      	str	r3, [r7, #20]
 800b6da:	e007      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d102      	bne.n	800b6e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b6e2:	2309      	movs	r3, #9
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e001      	b.n	800b6ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6e8:	2309      	movs	r3, #9
 800b6ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	029b      	lsls	r3, r3, #10
 800b700:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b704:	431a      	orrs	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	371c      	adds	r7, #28
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	00d8acbf 	.word	0x00d8acbf
 800b71c:	00e4e1bf 	.word	0x00e4e1bf
 800b720:	00f423ff 	.word	0x00f423ff
 800b724:	0106737f 	.word	0x0106737f
 800b728:	011a499f 	.word	0x011a499f
 800b72c:	01312cff 	.word	0x01312cff
 800b730:	014ca43f 	.word	0x014ca43f
 800b734:	016e35ff 	.word	0x016e35ff
 800b738:	01a6ab1f 	.word	0x01a6ab1f
 800b73c:	01e847ff 	.word	0x01e847ff

0800b740 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f043 0201 	orr.w	r2, r3, #1
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f023 0201 	bic.w	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d106      	bne.n	800b7b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60da      	str	r2, [r3, #12]
 800b7ae:	e00b      	b.n	800b7c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60da      	str	r2, [r3, #12]
 800b7c2:	e001      	b.n	800b7c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e003      	b.n	800b7d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b7c8:	2032      	movs	r0, #50	; 0x32
 800b7ca:	f7f8 fedd 	bl	8004588 <HAL_Delay>

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7d8:	b084      	sub	sp, #16
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b086      	sub	sp, #24
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	e009      	b.n	800b80c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3340      	adds	r3, #64	; 0x40
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	2200      	movs	r2, #0
 800b804:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	3301      	adds	r3, #1
 800b80a:	613b      	str	r3, [r7, #16]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2b0e      	cmp	r3, #14
 800b810:	d9f2      	bls.n	800b7f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b814:	2b00      	cmp	r3, #0
 800b816:	d11c      	bne.n	800b852 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b826:	f043 0302 	orr.w	r3, r3, #2
 800b82a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	e005      	b.n	800b85e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b864:	461a      	mov	r2, r3
 800b866:	2300      	movs	r3, #0
 800b868:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b870:	4619      	mov	r1, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b878:	461a      	mov	r2, r3
 800b87a:	680b      	ldr	r3, [r1, #0]
 800b87c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	2b01      	cmp	r3, #1
 800b882:	d10c      	bne.n	800b89e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d104      	bne.n	800b894 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b88a:	2100      	movs	r1, #0
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f959 	bl	800bb44 <USB_SetDevSpeed>
 800b892:	e018      	b.n	800b8c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b894:	2101      	movs	r1, #1
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f954 	bl	800bb44 <USB_SetDevSpeed>
 800b89c:	e013      	b.n	800b8c6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d10c      	bne.n	800b8be <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d104      	bne.n	800b8b4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f949 	bl	800bb44 <USB_SetDevSpeed>
 800b8b2:	e008      	b.n	800b8c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f944 	bl	800bb44 <USB_SetDevSpeed>
 800b8bc:	e003      	b.n	800b8c6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b8be:	2103      	movs	r1, #3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f93f 	bl	800bb44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8c6:	2110      	movs	r1, #16
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8f3 	bl	800bab4 <USB_FlushTxFifo>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f911 	bl	800bb00 <USB_FlushRxFifo>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b906:	461a      	mov	r2, r3
 800b908:	2300      	movs	r3, #0
 800b90a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	e043      	b.n	800b99a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b928:	d118      	bne.n	800b95c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93c:	461a      	mov	r2, r3
 800b93e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	e013      	b.n	800b96e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b952:	461a      	mov	r2, r3
 800b954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	e008      	b.n	800b96e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b968:	461a      	mov	r2, r3
 800b96a:	2300      	movs	r3, #0
 800b96c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97a:	461a      	mov	r2, r3
 800b97c:	2300      	movs	r3, #0
 800b97e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98c:	461a      	mov	r2, r3
 800b98e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	3301      	adds	r3, #1
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d3b7      	bcc.n	800b912 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	613b      	str	r3, [r7, #16]
 800b9a6:	e043      	b.n	800ba30 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9be:	d118      	bne.n	800b9f2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	e013      	b.n	800ba04 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	e008      	b.n	800ba04 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fe:	461a      	mov	r2, r3
 800ba00:	2300      	movs	r3, #0
 800ba02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba10:	461a      	mov	r2, r3
 800ba12:	2300      	movs	r3, #0
 800ba14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba22:	461a      	mov	r2, r3
 800ba24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d3b7      	bcc.n	800b9a8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	f043 0210 	orr.w	r2, r3, #16
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	699a      	ldr	r2, [r3, #24]
 800ba70:	4b0e      	ldr	r3, [pc, #56]	; (800baac <USB_DevInit+0x2d4>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f043 0208 	orr.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d105      	bne.n	800ba9c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	699a      	ldr	r2, [r3, #24]
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <USB_DevInit+0x2d8>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baa8:	b004      	add	sp, #16
 800baaa:	4770      	bx	lr
 800baac:	803c3800 	.word	0x803c3800
 800bab0:	40000004 	.word	0x40000004

0800bab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	019b      	lsls	r3, r3, #6
 800bac6:	f043 0220 	orr.w	r2, r3, #32
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3301      	adds	r3, #1
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4a09      	ldr	r2, [pc, #36]	; (800bafc <USB_FlushTxFifo+0x48>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d901      	bls.n	800bae0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e006      	b.n	800baee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	f003 0320 	and.w	r3, r3, #32
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d0f0      	beq.n	800bace <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	00030d40 	.word	0x00030d40

0800bb00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2210      	movs	r2, #16
 800bb10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	3301      	adds	r3, #1
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <USB_FlushRxFifo+0x40>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d901      	bls.n	800bb24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e006      	b.n	800bb32 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	f003 0310 	and.w	r3, r3, #16
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d0f0      	beq.n	800bb12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	00030d40 	.word	0x00030d40

0800bb44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	68f9      	ldr	r1, [r7, #12]
 800bb60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb64:	4313      	orrs	r3, r2
 800bb66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b087      	sub	sp, #28
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f003 0306 	and.w	r3, r3, #6
 800bb8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]
 800bb9a:	e00a      	b.n	800bbb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d002      	beq.n	800bba8 <USB_GetDevSpeed+0x32>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b06      	cmp	r3, #6
 800bba6:	d102      	bne.n	800bbae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	75fb      	strb	r3, [r7, #23]
 800bbac:	e001      	b.n	800bbb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bbae:	230f      	movs	r3, #15
 800bbb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	785b      	ldrb	r3, [r3, #1]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d139      	bne.n	800bc50 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe2:	69da      	ldr	r2, [r3, #28]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	f003 030f 	and.w	r3, r3, #15
 800bbec:	2101      	movs	r1, #1
 800bbee:	fa01 f303 	lsl.w	r3, r1, r3
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	68f9      	ldr	r1, [r7, #12]
 800bbf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d153      	bne.n	800bcbc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	78db      	ldrb	r3, [r3, #3]
 800bc2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	059b      	lsls	r3, r3, #22
 800bc36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	0159      	lsls	r1, r3, #5
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	440b      	add	r3, r1
 800bc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc46:	4619      	mov	r1, r3
 800bc48:	4b20      	ldr	r3, [pc, #128]	; (800bccc <USB_ActivateEndpoint+0x10c>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	600b      	str	r3, [r1, #0]
 800bc4e:	e035      	b.n	800bcbc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc56:	69da      	ldr	r2, [r3, #28]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	2101      	movs	r1, #1
 800bc62:	fa01 f303 	lsl.w	r3, r1, r3
 800bc66:	041b      	lsls	r3, r3, #16
 800bc68:	68f9      	ldr	r1, [r7, #12]
 800bc6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	015a      	lsls	r2, r3, #5
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4413      	add	r3, r2
 800bc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d119      	bne.n	800bcbc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	78db      	ldrb	r3, [r3, #3]
 800bca2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bca4:	430b      	orrs	r3, r1
 800bca6:	431a      	orrs	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	0159      	lsls	r1, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	440b      	add	r3, r1
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <USB_ActivateEndpoint+0x10c>)
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	10008000 	.word	0x10008000

0800bcd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d161      	bne.n	800bdb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd02:	d11f      	bne.n	800bd44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	0151      	lsls	r1, r2, #5
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	440a      	add	r2, r1
 800bd1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	0151      	lsls	r1, r2, #5
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	440a      	add	r2, r1
 800bd3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	f003 030f 	and.w	r3, r3, #15
 800bd54:	2101      	movs	r1, #1
 800bd56:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	43db      	mvns	r3, r3
 800bd5e:	68f9      	ldr	r1, [r7, #12]
 800bd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd64:	4013      	ands	r3, r2
 800bd66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6e:	69da      	ldr	r2, [r3, #28]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	2101      	movs	r1, #1
 800bd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	43db      	mvns	r3, r3
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd88:	4013      	ands	r3, r2
 800bd8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	0159      	lsls	r1, r3, #5
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	440b      	add	r3, r1
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	4619      	mov	r1, r3
 800bda8:	4b35      	ldr	r3, [pc, #212]	; (800be80 <USB_DeactivateEndpoint+0x1b0>)
 800bdaa:	4013      	ands	r3, r2
 800bdac:	600b      	str	r3, [r1, #0]
 800bdae:	e060      	b.n	800be72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdc6:	d11f      	bne.n	800be08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	0151      	lsls	r1, r2, #5
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	440a      	add	r2, r1
 800bdde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bde6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	0151      	lsls	r1, r2, #5
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	440a      	add	r2, r1
 800bdfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f003 030f 	and.w	r3, r3, #15
 800be18:	2101      	movs	r1, #1
 800be1a:	fa01 f303 	lsl.w	r3, r1, r3
 800be1e:	041b      	lsls	r3, r3, #16
 800be20:	43db      	mvns	r3, r3
 800be22:	68f9      	ldr	r1, [r7, #12]
 800be24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be28:	4013      	ands	r3, r2
 800be2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be32:	69da      	ldr	r2, [r3, #28]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f003 030f 	and.w	r3, r3, #15
 800be3c:	2101      	movs	r1, #1
 800be3e:	fa01 f303 	lsl.w	r3, r1, r3
 800be42:	041b      	lsls	r3, r3, #16
 800be44:	43db      	mvns	r3, r3
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be4c:	4013      	ands	r3, r2
 800be4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	0159      	lsls	r1, r3, #5
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	440b      	add	r3, r1
 800be66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6a:	4619      	mov	r1, r3
 800be6c:	4b05      	ldr	r3, [pc, #20]	; (800be84 <USB_DeactivateEndpoint+0x1b4>)
 800be6e:	4013      	ands	r3, r2
 800be70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	ec337800 	.word	0xec337800
 800be84:	eff37800 	.word	0xeff37800

0800be88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08a      	sub	sp, #40	; 0x28
 800be8c:	af02      	add	r7, sp, #8
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	785b      	ldrb	r3, [r3, #1]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	f040 8163 	bne.w	800c170 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d132      	bne.n	800bf18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebe:	691a      	ldr	r2, [r3, #16]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	0159      	lsls	r1, r3, #5
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	440b      	add	r3, r1
 800bec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800becc:	4619      	mov	r1, r3
 800bece:	4ba5      	ldr	r3, [pc, #660]	; (800c164 <USB_EPStartXfer+0x2dc>)
 800bed0:	4013      	ands	r3, r2
 800bed2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	69ba      	ldr	r2, [r7, #24]
 800bee4:	0151      	lsls	r1, r2, #5
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	440a      	add	r2, r1
 800beea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf00:	691a      	ldr	r2, [r3, #16]
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	0159      	lsls	r1, r3, #5
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	440b      	add	r3, r1
 800bf0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0e:	4619      	mov	r1, r3
 800bf10:	4b95      	ldr	r3, [pc, #596]	; (800c168 <USB_EPStartXfer+0x2e0>)
 800bf12:	4013      	ands	r3, r2
 800bf14:	610b      	str	r3, [r1, #16]
 800bf16:	e074      	b.n	800c002 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf24:	691a      	ldr	r2, [r3, #16]
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	0159      	lsls	r1, r3, #5
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	440b      	add	r3, r1
 800bf2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf32:	4619      	mov	r1, r3
 800bf34:	4b8c      	ldr	r3, [pc, #560]	; (800c168 <USB_EPStartXfer+0x2e0>)
 800bf36:	4013      	ands	r3, r2
 800bf38:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	015a      	lsls	r2, r3, #5
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	4413      	add	r3, r2
 800bf42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	0159      	lsls	r1, r3, #5
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	440b      	add	r3, r1
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	4619      	mov	r1, r3
 800bf56:	4b83      	ldr	r3, [pc, #524]	; (800c164 <USB_EPStartXfer+0x2dc>)
 800bf58:	4013      	ands	r3, r2
 800bf5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf68:	691a      	ldr	r2, [r3, #16]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6959      	ldr	r1, [r3, #20]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	440b      	add	r3, r1
 800bf74:	1e59      	subs	r1, r3, #1
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf7e:	04d9      	lsls	r1, r3, #19
 800bf80:	4b7a      	ldr	r3, [pc, #488]	; (800c16c <USB_EPStartXfer+0x2e4>)
 800bf82:	400b      	ands	r3, r1
 800bf84:	69b9      	ldr	r1, [r7, #24]
 800bf86:	0148      	lsls	r0, r1, #5
 800bf88:	69f9      	ldr	r1, [r7, #28]
 800bf8a:	4401      	add	r1, r0
 800bf8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf90:	4313      	orrs	r3, r2
 800bf92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa0:	691a      	ldr	r2, [r3, #16]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfaa:	69b9      	ldr	r1, [r7, #24]
 800bfac:	0148      	lsls	r0, r1, #5
 800bfae:	69f9      	ldr	r1, [r7, #28]
 800bfb0:	4401      	add	r1, r0
 800bfb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	78db      	ldrb	r3, [r3, #3]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d11f      	bne.n	800c002 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	69ba      	ldr	r2, [r7, #24]
 800bfd2:	0151      	lsls	r1, r2, #5
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	440a      	add	r2, r1
 800bfd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bfe0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	015a      	lsls	r2, r3, #5
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	4413      	add	r3, r2
 800bfea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	0151      	lsls	r1, r2, #5
 800bff4:	69fa      	ldr	r2, [r7, #28]
 800bff6:	440a      	add	r2, r1
 800bff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c000:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d14b      	bne.n	800c0a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d009      	beq.n	800c024 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	015a      	lsls	r2, r3, #5
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	4413      	add	r3, r2
 800c018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01c:	461a      	mov	r2, r3
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	78db      	ldrb	r3, [r3, #3]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d128      	bne.n	800c07e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d110      	bne.n	800c05e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	0151      	lsls	r1, r2, #5
 800c04e:	69fa      	ldr	r2, [r7, #28]
 800c050:	440a      	add	r2, r1
 800c052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	e00f      	b.n	800c07e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	0151      	lsls	r1, r2, #5
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	440a      	add	r2, r1
 800c074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c07c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	015a      	lsls	r2, r3, #5
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	4413      	add	r3, r2
 800c086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	0151      	lsls	r1, r2, #5
 800c090:	69fa      	ldr	r2, [r7, #28]
 800c092:	440a      	add	r2, r1
 800c094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c098:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	e133      	b.n	800c308 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	0151      	lsls	r1, r2, #5
 800c0b2:	69fa      	ldr	r2, [r7, #28]
 800c0b4:	440a      	add	r2, r1
 800c0b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	78db      	ldrb	r3, [r3, #3]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d015      	beq.n	800c0f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 811b 	beq.w	800c308 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	f003 030f 	and.w	r3, r3, #15
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	634b      	str	r3, [r1, #52]	; 0x34
 800c0f2:	e109      	b.n	800c308 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c100:	2b00      	cmp	r3, #0
 800c102:	d110      	bne.n	800c126 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	0151      	lsls	r1, r2, #5
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	440a      	add	r2, r1
 800c11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c11e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	e00f      	b.n	800c146 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	0151      	lsls	r1, r2, #5
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	440a      	add	r2, r1
 800c13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c144:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	68d9      	ldr	r1, [r3, #12]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	b298      	uxth	r0, r3
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	4603      	mov	r3, r0
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f000 fa38 	bl	800c5d0 <USB_WritePacket>
 800c160:	e0d2      	b.n	800c308 <USB_EPStartXfer+0x480>
 800c162:	bf00      	nop
 800c164:	e007ffff 	.word	0xe007ffff
 800c168:	fff80000 	.word	0xfff80000
 800c16c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17c:	691a      	ldr	r2, [r3, #16]
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	0159      	lsls	r1, r3, #5
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	440b      	add	r3, r1
 800c186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18a:	4619      	mov	r1, r3
 800c18c:	4b61      	ldr	r3, [pc, #388]	; (800c314 <USB_EPStartXfer+0x48c>)
 800c18e:	4013      	ands	r3, r2
 800c190:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	0159      	lsls	r1, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	440b      	add	r3, r1
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4b5a      	ldr	r3, [pc, #360]	; (800c318 <USB_EPStartXfer+0x490>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d123      	bne.n	800c204 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c8:	691a      	ldr	r2, [r3, #16]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1d2:	69b9      	ldr	r1, [r7, #24]
 800c1d4:	0148      	lsls	r0, r1, #5
 800c1d6:	69f9      	ldr	r1, [r7, #28]
 800c1d8:	4401      	add	r1, r0
 800c1da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	0151      	lsls	r1, r2, #5
 800c1f4:	69fa      	ldr	r2, [r7, #28]
 800c1f6:	440a      	add	r2, r1
 800c1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c200:	6113      	str	r3, [r2, #16]
 800c202:	e033      	b.n	800c26c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	695a      	ldr	r2, [r3, #20]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	4413      	add	r3, r2
 800c20e:	1e5a      	subs	r2, r3, #1
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	fbb2 f3f3 	udiv	r3, r2, r3
 800c218:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	4413      	add	r3, r2
 800c222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c226:	691a      	ldr	r2, [r3, #16]
 800c228:	8afb      	ldrh	r3, [r7, #22]
 800c22a:	04d9      	lsls	r1, r3, #19
 800c22c:	4b3b      	ldr	r3, [pc, #236]	; (800c31c <USB_EPStartXfer+0x494>)
 800c22e:	400b      	ands	r3, r1
 800c230:	69b9      	ldr	r1, [r7, #24]
 800c232:	0148      	lsls	r0, r1, #5
 800c234:	69f9      	ldr	r1, [r7, #28]
 800c236:	4401      	add	r1, r0
 800c238:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c23c:	4313      	orrs	r3, r2
 800c23e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	8af9      	ldrh	r1, [r7, #22]
 800c254:	fb01 f303 	mul.w	r3, r1, r3
 800c258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c25c:	69b9      	ldr	r1, [r7, #24]
 800c25e:	0148      	lsls	r0, r1, #5
 800c260:	69f9      	ldr	r1, [r7, #28]
 800c262:	4401      	add	r1, r0
 800c264:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c268:	4313      	orrs	r3, r2
 800c26a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10d      	bne.n	800c28e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d009      	beq.n	800c28e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	68d9      	ldr	r1, [r3, #12]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	4413      	add	r3, r2
 800c286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c28a:	460a      	mov	r2, r1
 800c28c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	78db      	ldrb	r3, [r3, #3]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d128      	bne.n	800c2e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d110      	bne.n	800c2c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	0151      	lsls	r1, r2, #5
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	440a      	add	r2, r1
 800c2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	e00f      	b.n	800c2e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	0151      	lsls	r1, r2, #5
 800c2da:	69fa      	ldr	r2, [r7, #28]
 800c2dc:	440a      	add	r2, r1
 800c2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	fff80000 	.word	0xfff80000
 800c318:	e007ffff 	.word	0xe007ffff
 800c31c:	1ff80000 	.word	0x1ff80000

0800c320 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	785b      	ldrb	r3, [r3, #1]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	f040 80cd 	bne.w	800c4dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d132      	bne.n	800c3b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	691a      	ldr	r2, [r3, #16]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	0159      	lsls	r1, r3, #5
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	440b      	add	r3, r1
 800c360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c364:	4619      	mov	r1, r3
 800c366:	4b98      	ldr	r3, [pc, #608]	; (800c5c8 <USB_EP0StartXfer+0x2a8>)
 800c368:	4013      	ands	r3, r2
 800c36a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c38a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	015a      	lsls	r2, r3, #5
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	4413      	add	r3, r2
 800c394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	0159      	lsls	r1, r3, #5
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	440b      	add	r3, r1
 800c3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4b88      	ldr	r3, [pc, #544]	; (800c5cc <USB_EP0StartXfer+0x2ac>)
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	610b      	str	r3, [r1, #16]
 800c3ae:	e04e      	b.n	800c44e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3bc:	691a      	ldr	r2, [r3, #16]
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	0159      	lsls	r1, r3, #5
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	440b      	add	r3, r1
 800c3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4b7f      	ldr	r3, [pc, #508]	; (800c5cc <USB_EP0StartXfer+0x2ac>)
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	015a      	lsls	r2, r3, #5
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	4413      	add	r3, r2
 800c3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3de:	691a      	ldr	r2, [r3, #16]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	0159      	lsls	r1, r3, #5
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	440b      	add	r3, r1
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4b76      	ldr	r3, [pc, #472]	; (800c5c8 <USB_EP0StartXfer+0x2a8>)
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	695a      	ldr	r2, [r3, #20]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d903      	bls.n	800c408 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	015a      	lsls	r2, r3, #5
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	0151      	lsls	r1, r2, #5
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	440a      	add	r2, r1
 800c41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c434:	691a      	ldr	r2, [r3, #16]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c43e:	6939      	ldr	r1, [r7, #16]
 800c440:	0148      	lsls	r0, r1, #5
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	4401      	add	r1, r0
 800c446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c44a:	4313      	orrs	r3, r2
 800c44c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d11e      	bne.n	800c492 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d009      	beq.n	800c470 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c468:	461a      	mov	r2, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	0151      	lsls	r1, r2, #5
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	440a      	add	r2, r1
 800c486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e092      	b.n	800c5b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	0151      	lsls	r1, r2, #5
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	440a      	add	r2, r1
 800c4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d07e      	beq.n	800c5b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	f003 030f 	and.w	r3, r3, #15
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c4d0:	6979      	ldr	r1, [r7, #20]
 800c4d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	634b      	str	r3, [r1, #52]	; 0x34
 800c4da:	e06d      	b.n	800c5b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	015a      	lsls	r2, r3, #5
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e8:	691a      	ldr	r2, [r3, #16]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	0159      	lsls	r1, r3, #5
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	440b      	add	r3, r1
 800c4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4b34      	ldr	r3, [pc, #208]	; (800c5cc <USB_EP0StartXfer+0x2ac>)
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	4413      	add	r3, r2
 800c506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50a:	691a      	ldr	r2, [r3, #16]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	0159      	lsls	r1, r3, #5
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	440b      	add	r3, r1
 800c514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c518:	4619      	mov	r1, r3
 800c51a:	4b2b      	ldr	r3, [pc, #172]	; (800c5c8 <USB_EP0StartXfer+0x2a8>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	689a      	ldr	r2, [r3, #8]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	0151      	lsls	r1, r2, #5
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	440a      	add	r2, r1
 800c546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c54a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c54e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	015a      	lsls	r2, r3, #5
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	4413      	add	r3, r2
 800c558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c55c:	691a      	ldr	r2, [r3, #16]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c566:	6939      	ldr	r1, [r7, #16]
 800c568:	0148      	lsls	r0, r1, #5
 800c56a:	6979      	ldr	r1, [r7, #20]
 800c56c:	4401      	add	r1, r0
 800c56e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c572:	4313      	orrs	r3, r2
 800c574:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d10d      	bne.n	800c598 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	68d9      	ldr	r1, [r3, #12]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	015a      	lsls	r2, r3, #5
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	4413      	add	r3, r2
 800c590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c594:	460a      	mov	r2, r1
 800c596:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	e007ffff 	.word	0xe007ffff
 800c5cc:	fff80000 	.word	0xfff80000

0800c5d0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b089      	sub	sp, #36	; 0x24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	460b      	mov	r3, r1
 800c5e0:	71fb      	strb	r3, [r7, #7]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c5ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d11a      	bne.n	800c62c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c5f6:	88bb      	ldrh	r3, [r7, #4]
 800c5f8:	3303      	adds	r3, #3
 800c5fa:	089b      	lsrs	r3, r3, #2
 800c5fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c5fe:	2300      	movs	r3, #0
 800c600:	61bb      	str	r3, [r7, #24]
 800c602:	e00f      	b.n	800c624 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c604:	79fb      	ldrb	r3, [r7, #7]
 800c606:	031a      	lsls	r2, r3, #12
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c610:	461a      	mov	r2, r3
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	3304      	adds	r3, #4
 800c61c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	3301      	adds	r3, #1
 800c622:	61bb      	str	r3, [r7, #24]
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d3eb      	bcc.n	800c604 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3724      	adds	r7, #36	; 0x24
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b089      	sub	sp, #36	; 0x24
 800c63e:	af00      	add	r7, sp, #0
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	4613      	mov	r3, r2
 800c646:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	3303      	adds	r3, #3
 800c654:	089b      	lsrs	r3, r3, #2
 800c656:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c658:	2300      	movs	r3, #0
 800c65a:	61bb      	str	r3, [r7, #24]
 800c65c:	e00b      	b.n	800c676 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	601a      	str	r2, [r3, #0]
    pDest++;
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	3304      	adds	r3, #4
 800c66e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c670:	69bb      	ldr	r3, [r7, #24]
 800c672:	3301      	adds	r3, #1
 800c674:	61bb      	str	r3, [r7, #24]
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d3ef      	bcc.n	800c65e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c67e:	69fb      	ldr	r3, [r7, #28]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3724      	adds	r7, #36	; 0x24
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d12c      	bne.n	800c702 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	db12      	blt.n	800c6e0 <USB_EPSetStall+0x54>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00f      	beq.n	800c6e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	0151      	lsls	r1, r2, #5
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	440a      	add	r2, r1
 800c6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	e02b      	b.n	800c75a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	db12      	blt.n	800c73a <USB_EPSetStall+0xae>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00f      	beq.n	800c73a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	0151      	lsls	r1, r2, #5
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	440a      	add	r2, r1
 800c730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c734:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c738:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	015a      	lsls	r2, r3, #5
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	4413      	add	r3, r2
 800c742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	0151      	lsls	r1, r2, #5
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	440a      	add	r2, r1
 800c750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c758:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	785b      	ldrb	r3, [r3, #1]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d128      	bne.n	800c7d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	015a      	lsls	r2, r3, #5
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4413      	add	r3, r2
 800c78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	0151      	lsls	r1, r2, #5
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	440a      	add	r2, r1
 800c79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c79e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	78db      	ldrb	r3, [r3, #3]
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d003      	beq.n	800c7b4 <USB_EPClearStall+0x4c>
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	78db      	ldrb	r3, [r3, #3]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d138      	bne.n	800c826 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	0151      	lsls	r1, r2, #5
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	440a      	add	r2, r1
 800c7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	e027      	b.n	800c826 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	015a      	lsls	r2, r3, #5
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	0151      	lsls	r1, r2, #5
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	440a      	add	r2, r1
 800c7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	78db      	ldrb	r3, [r3, #3]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d003      	beq.n	800c806 <USB_EPClearStall+0x9e>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	78db      	ldrb	r3, [r3, #3]
 800c802:	2b02      	cmp	r3, #2
 800c804:	d10f      	bne.n	800c826 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	015a      	lsls	r2, r3, #5
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	0151      	lsls	r1, r2, #5
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	440a      	add	r2, r1
 800c81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c824:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	460b      	mov	r3, r1
 800c83e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c852:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c856:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c868:	68f9      	ldr	r1, [r7, #12]
 800c86a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c86e:	4313      	orrs	r3, r2
 800c870:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c89a:	f023 0302 	bic.w	r3, r3, #2
 800c89e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c8a0:	2003      	movs	r0, #3
 800c8a2:	f7f7 fe71 	bl	8004588 <HAL_Delay>

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ca:	f043 0302 	orr.w	r3, r3, #2
 800c8ce:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c8d0:	2003      	movs	r0, #3
 800c8d2:	f7f7 fe59 	bl	8004588 <HAL_Delay>

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	4013      	ands	r3, r2
 800c928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	0c1b      	lsrs	r3, r3, #16
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b085      	sub	sp, #20
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	4013      	ands	r3, r2
 800c95c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	b29b      	uxth	r3, r3
}
 800c962:	4618      	mov	r0, r3
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c96e:	b480      	push	{r7}
 800c970:	b085      	sub	sp, #20
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	460b      	mov	r3, r1
 800c978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c97e:	78fb      	ldrb	r3, [r7, #3]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c994:	695b      	ldr	r3, [r3, #20]
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	4013      	ands	r3, r2
 800c99a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c99c:	68bb      	ldr	r3, [r7, #8]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b087      	sub	sp, #28
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c9ce:	78fb      	ldrb	r3, [r7, #3]
 800c9d0:	f003 030f 	and.w	r3, r3, #15
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9da:	01db      	lsls	r3, r3, #7
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	371c      	adds	r7, #28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b083      	sub	sp, #12
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	f003 0301 	and.w	r3, r3, #1
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
	...

0800ca24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <USB_ActivateSetup+0x44>)
 800ca42:	4013      	ands	r3, r2
 800ca44:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	fffff800 	.word	0xfffff800

0800ca6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	460b      	mov	r3, r1
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	333c      	adds	r3, #60	; 0x3c
 800ca82:	3304      	adds	r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	4a26      	ldr	r2, [pc, #152]	; (800cb24 <USB_EP0_OutStart+0xb8>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d90a      	bls.n	800caa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caa0:	d101      	bne.n	800caa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e037      	b.n	800cb16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caac:	461a      	mov	r2, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cad4:	f043 0318 	orr.w	r3, r3, #24
 800cad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800caec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d10f      	bne.n	800cb14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cb12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	4f54300a 	.word	0x4f54300a

0800cb28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3301      	adds	r3, #1
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4a13      	ldr	r2, [pc, #76]	; (800cb8c <USB_CoreReset+0x64>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d901      	bls.n	800cb46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e01b      	b.n	800cb7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	daf2      	bge.n	800cb34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	f043 0201 	orr.w	r2, r3, #1
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4a09      	ldr	r2, [pc, #36]	; (800cb8c <USB_CoreReset+0x64>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d901      	bls.n	800cb70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e006      	b.n	800cb7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d0f0      	beq.n	800cb5e <USB_CoreReset+0x36>

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	00030d40 	.word	0x00030d40

0800cb90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cb94:	4904      	ldr	r1, [pc, #16]	; (800cba8 <MX_FATFS_Init+0x18>)
 800cb96:	4805      	ldr	r0, [pc, #20]	; (800cbac <MX_FATFS_Init+0x1c>)
 800cb98:	f004 fd8e 	bl	80116b8 <FATFS_LinkDriver>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <MX_FATFS_Init+0x20>)
 800cba2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800cba4:	bf00      	nop
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	200152ec 	.word	0x200152ec
 800cbac:	08018428 	.word	0x08018428
 800cbb0:	200152e8 	.word	0x200152e8

0800cbb4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cbb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cbce:	f000 f896 	bl	800ccfe <BSP_SD_IsDetected>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d001      	beq.n	800cbdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e012      	b.n	800cc02 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cbdc:	480b      	ldr	r0, [pc, #44]	; (800cc0c <BSP_SD_Init+0x48>)
 800cbde:	f7fa fd81 	bl	80076e4 <HAL_SD_Init>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d109      	bne.n	800cc00 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cbec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cbf0:	4806      	ldr	r0, [pc, #24]	; (800cc0c <BSP_SD_Init+0x48>)
 800cbf2:	f7fb fb39 	bl	8008268 <HAL_SD_ConfigWideBusOperation>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cc00:	79fb      	ldrb	r3, [r7, #7]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20008970 	.word	0x20008970

0800cc10 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	68f9      	ldr	r1, [r7, #12]
 800cc26:	4806      	ldr	r0, [pc, #24]	; (800cc40 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cc28:	f7fa fdf4 	bl	8007814 <HAL_SD_ReadBlocks_DMA>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	20008970 	.word	0x20008970

0800cc44 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	4806      	ldr	r0, [pc, #24]	; (800cc74 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cc5c:	f7fa fec6 	bl	80079ec <HAL_SD_WriteBlocks_DMA>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	20008970 	.word	0x20008970

0800cc78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cc7c:	4805      	ldr	r0, [pc, #20]	; (800cc94 <BSP_SD_GetCardState+0x1c>)
 800cc7e:	f7fb fb6f 	bl	8008360 <HAL_SD_GetCardState>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	bf14      	ite	ne
 800cc88:	2301      	movne	r3, #1
 800cc8a:	2300      	moveq	r3, #0
 800cc8c:	b2db      	uxtb	r3, r3
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20008970 	.word	0x20008970

0800cc98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	4803      	ldr	r0, [pc, #12]	; (800ccb0 <BSP_SD_GetCardInfo+0x18>)
 800cca4:	f7fb fab4 	bl	8008210 <HAL_SD_GetCardInfo>
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20008970 	.word	0x20008970

0800ccb4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ccbc:	f000 f818 	bl	800ccf0 <BSP_SD_AbortCallback>
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ccd0:	f000 f998 	bl	800d004 <BSP_SD_WriteCpltCallback>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cce4:	f000 f9a0 	bl	800d028 <BSP_SD_ReadCpltCallback>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0

}
 800ccf4:	bf00      	nop
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cd04:	2301      	movs	r3, #1
 800cd06:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	b2db      	uxtb	r3, r3
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800cd20:	f004 fdb4 	bl	801188c <osKernelGetTickCount>
 800cd24:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800cd26:	e006      	b.n	800cd36 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd28:	f7ff ffa6 	bl	800cc78 <BSP_SD_GetCardState>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e009      	b.n	800cd4a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800cd36:	f004 fda9 	bl	801188c <osKernelGetTickCount>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d8f0      	bhi.n	800cd28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cd46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
	...

0800cd54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd5e:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <SD_CheckStatus+0x38>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd64:	f7ff ff88 	bl	800cc78 <BSP_SD_GetCardState>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d107      	bne.n	800cd7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd6e:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <SD_CheckStatus+0x38>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f023 0301 	bic.w	r3, r3, #1
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <SD_CheckStatus+0x38>)
 800cd7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd7e:	4b03      	ldr	r3, [pc, #12]	; (800cd8c <SD_CheckStatus+0x38>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	b2db      	uxtb	r3, r3
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000009 	.word	0x20000009

0800cd90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800cd9a:	4b1c      	ldr	r3, [pc, #112]	; (800ce0c <SD_initialize+0x7c>)
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cda0:	f004 fd1c 	bl	80117dc <osKernelGetState>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d129      	bne.n	800cdfe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cdaa:	f7ff ff0b 	bl	800cbc4 <BSP_SD_Init>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d107      	bne.n	800cdc4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff ffcc 	bl	800cd54 <SD_CheckStatus>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <SD_initialize+0x7c>)
 800cdc2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cdc4:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <SD_initialize+0x7c>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d017      	beq.n	800cdfe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800cdce:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <SD_initialize+0x80>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d107      	bne.n	800cde6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2102      	movs	r1, #2
 800cdda:	200a      	movs	r0, #10
 800cddc:	f005 f9a6 	bl	801212c <osMessageQueueNew>
 800cde0:	4602      	mov	r2, r0
 800cde2:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <SD_initialize+0x80>)
 800cde4:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <SD_initialize+0x80>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d107      	bne.n	800cdfe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800cdee:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <SD_initialize+0x7c>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f043 0301 	orr.w	r3, r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <SD_initialize+0x7c>)
 800cdfc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cdfe:	4b03      	ldr	r3, [pc, #12]	; (800ce0c <SD_initialize+0x7c>)
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	b2db      	uxtb	r3, r3
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000009 	.word	0x20000009
 800ce10:	200002dc 	.word	0x200002dc

0800ce14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff ff97 	bl	800cd54 <SD_CheckStatus>
 800ce26:	4603      	mov	r3, r0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ce44:	f247 5030 	movw	r0, #30000	; 0x7530
 800ce48:	f7ff ff66 	bl	800cd18 <SD_CheckStatusWithTimeout>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	da01      	bge.n	800ce56 <SD_read+0x26>
  {
    return res;
 800ce52:	7ffb      	ldrb	r3, [r7, #31]
 800ce54:	e02f      	b.n	800ceb6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	68b8      	ldr	r0, [r7, #8]
 800ce5c:	f7ff fed8 	bl	800cc10 <BSP_SD_ReadBlocks_DMA>
 800ce60:	4603      	mov	r3, r0
 800ce62:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800ce64:	7fbb      	ldrb	r3, [r7, #30]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d124      	bne.n	800ceb4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ce6a:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <SD_read+0x90>)
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	f107 0112 	add.w	r1, r7, #18
 800ce72:	f247 5330 	movw	r3, #30000	; 0x7530
 800ce76:	2200      	movs	r2, #0
 800ce78:	f005 fa52 	bl	8012320 <osMessageQueueGet>
 800ce7c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d117      	bne.n	800ceb4 <SD_read+0x84>
 800ce84:	8a7b      	ldrh	r3, [r7, #18]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d114      	bne.n	800ceb4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800ce8a:	f004 fcff 	bl	801188c <osKernelGetTickCount>
 800ce8e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ce90:	e007      	b.n	800cea2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce92:	f7ff fef1 	bl	800cc78 <BSP_SD_GetCardState>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <SD_read+0x72>
              {
                res = RES_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cea0:	e008      	b.n	800ceb4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cea2:	f004 fcf3 	bl	801188c <osKernelGetTickCount>
 800cea6:	4602      	mov	r2, r0
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	f247 522f 	movw	r2, #29999	; 0x752f
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d9ee      	bls.n	800ce92 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3720      	adds	r7, #32
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	200002dc 	.word	0x200002dc

0800cec4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	607a      	str	r2, [r7, #4]
 800cece:	603b      	str	r3, [r7, #0]
 800ced0:	4603      	mov	r3, r0
 800ced2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ced8:	f247 5030 	movw	r0, #30000	; 0x7530
 800cedc:	f7ff ff1c 	bl	800cd18 <SD_CheckStatusWithTimeout>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	da01      	bge.n	800ceea <SD_write+0x26>
  {
    return res;
 800cee6:	7ffb      	ldrb	r3, [r7, #31]
 800cee8:	e02d      	b.n	800cf46 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	68b8      	ldr	r0, [r7, #8]
 800cef0:	f7ff fea8 	bl	800cc44 <BSP_SD_WriteBlocks_DMA>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d124      	bne.n	800cf44 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cefa:	4b15      	ldr	r3, [pc, #84]	; (800cf50 <SD_write+0x8c>)
 800cefc:	6818      	ldr	r0, [r3, #0]
 800cefe:	f107 0112 	add.w	r1, r7, #18
 800cf02:	f247 5330 	movw	r3, #30000	; 0x7530
 800cf06:	2200      	movs	r2, #0
 800cf08:	f005 fa0a 	bl	8012320 <osMessageQueueGet>
 800cf0c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d117      	bne.n	800cf44 <SD_write+0x80>
 800cf14:	8a7b      	ldrh	r3, [r7, #18]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d114      	bne.n	800cf44 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800cf1a:	f004 fcb7 	bl	801188c <osKernelGetTickCount>
 800cf1e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf20:	e007      	b.n	800cf32 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cf22:	f7ff fea9 	bl	800cc78 <BSP_SD_GetCardState>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d102      	bne.n	800cf32 <SD_write+0x6e>
          {
            res = RES_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	77fb      	strb	r3, [r7, #31]
            break;
 800cf30:	e008      	b.n	800cf44 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf32:	f004 fcab 	bl	801188c <osKernelGetTickCount>
 800cf36:	4602      	mov	r2, r0
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	f247 522f 	movw	r2, #29999	; 0x752f
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d9ee      	bls.n	800cf22 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800cf44:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3720      	adds	r7, #32
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200002dc 	.word	0x200002dc

0800cf54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08c      	sub	sp, #48	; 0x30
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	603a      	str	r2, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]
 800cf60:	460b      	mov	r3, r1
 800cf62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf6a:	4b25      	ldr	r3, [pc, #148]	; (800d000 <SD_ioctl+0xac>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <SD_ioctl+0x28>
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e03c      	b.n	800cff6 <SD_ioctl+0xa2>

  switch (cmd)
 800cf7c:	79bb      	ldrb	r3, [r7, #6]
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	d834      	bhi.n	800cfec <SD_ioctl+0x98>
 800cf82:	a201      	add	r2, pc, #4	; (adr r2, 800cf88 <SD_ioctl+0x34>)
 800cf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf88:	0800cf99 	.word	0x0800cf99
 800cf8c:	0800cfa1 	.word	0x0800cfa1
 800cf90:	0800cfb9 	.word	0x0800cfb9
 800cf94:	0800cfd3 	.word	0x0800cfd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf9e:	e028      	b.n	800cff2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfa0:	f107 030c 	add.w	r3, r7, #12
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fe77 	bl	800cc98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cfaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfb6:	e01c      	b.n	800cff2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfb8:	f107 030c 	add.w	r3, r7, #12
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fe6b 	bl	800cc98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfd0:	e00f      	b.n	800cff2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfd2:	f107 030c 	add.w	r3, r7, #12
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff fe5e 	bl	800cc98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	0a5a      	lsrs	r2, r3, #9
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfea:	e002      	b.n	800cff2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cfec:	2304      	movs	r3, #4
 800cfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3730      	adds	r7, #48	; 0x30
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000009 	.word	0x20000009

0800d004 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800d00a:	2302      	movs	r3, #2
 800d00c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d00e:	4b05      	ldr	r3, [pc, #20]	; (800d024 <BSP_SD_WriteCpltCallback+0x20>)
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	1db9      	adds	r1, r7, #6
 800d014:	2300      	movs	r3, #0
 800d016:	2200      	movs	r2, #0
 800d018:	f005 f90e 	bl	8012238 <osMessageQueuePut>
#endif
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	200002dc 	.word	0x200002dc

0800d028 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800d02e:	2301      	movs	r3, #1
 800d030:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d032:	4b05      	ldr	r3, [pc, #20]	; (800d048 <BSP_SD_ReadCpltCallback+0x20>)
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	1db9      	adds	r1, r7, #6
 800d038:	2300      	movs	r3, #0
 800d03a:	2200      	movs	r2, #0
 800d03c:	f005 f8fc 	bl	8012238 <osMessageQueuePut>
#endif
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	200002dc 	.word	0x200002dc

0800d04c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	460b      	mov	r3, r1
 800d056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d058:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d05c:	f009 f958 	bl	8016310 <malloc>
 800d060:	4603      	mov	r3, r0
 800d062:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d072:	2302      	movs	r3, #2
 800d074:	e066      	b.n	800d144 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7c1b      	ldrb	r3, [r3, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d119      	bne.n	800d0ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d08a:	2202      	movs	r2, #2
 800d08c:	2181      	movs	r1, #129	; 0x81
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f008 ff71 	bl	8015f76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d09a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d09e:	2202      	movs	r2, #2
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f008 ff67 	bl	8015f76 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2210      	movs	r2, #16
 800d0b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d0b8:	e016      	b.n	800d0e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	2202      	movs	r2, #2
 800d0be:	2181      	movs	r1, #129	; 0x81
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f008 ff58 	bl	8015f76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d0cc:	2340      	movs	r3, #64	; 0x40
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	2101      	movs	r1, #1
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f008 ff4f 	bl	8015f76 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2210      	movs	r2, #16
 800d0e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0e8:	2308      	movs	r3, #8
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	2182      	movs	r1, #130	; 0x82
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f008 ff41 	bl	8015f76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	7c1b      	ldrb	r3, [r3, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d124:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d128:	2101      	movs	r1, #1
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f009 f812 	bl	8016154 <USBD_LL_PrepareReceive>
 800d130:	e007      	b.n	800d142 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	2101      	movs	r1, #1
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f009 f809 	bl	8016154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d15c:	2181      	movs	r1, #129	; 0x81
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f008 ff2f 	bl	8015fc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d16a:	2101      	movs	r1, #1
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f008 ff28 	bl	8015fc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d17a:	2182      	movs	r1, #130	; 0x82
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f008 ff20 	bl	8015fc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00e      	beq.n	800d1ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f009 f8b7 	bl	8016320 <free>
    pdev->pClassData = NULL;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d03a      	beq.n	800d264 <USBD_CDC_Setup+0xa0>
 800d1ee:	2b20      	cmp	r3, #32
 800d1f0:	f040 8097 	bne.w	800d322 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	88db      	ldrh	r3, [r3, #6]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d029      	beq.n	800d250 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	b25b      	sxtb	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	da11      	bge.n	800d22a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d212:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	88d2      	ldrh	r2, [r2, #6]
 800d218:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d21a:	6939      	ldr	r1, [r7, #16]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	88db      	ldrh	r3, [r3, #6]
 800d220:	461a      	mov	r2, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f001 fac7 	bl	800e7b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d228:	e082      	b.n	800d330 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	785a      	ldrb	r2, [r3, #1]
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	88db      	ldrh	r3, [r3, #6]
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d240:	6939      	ldr	r1, [r7, #16]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	88db      	ldrh	r3, [r3, #6]
 800d246:	461a      	mov	r2, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f001 fae0 	bl	800e80e <USBD_CtlPrepareRx>
    break;
 800d24e:	e06f      	b.n	800d330 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	7850      	ldrb	r0, [r2, #1]
 800d25c:	2200      	movs	r2, #0
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	4798      	blx	r3
    break;
 800d262:	e065      	b.n	800d330 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	785b      	ldrb	r3, [r3, #1]
 800d268:	2b0b      	cmp	r3, #11
 800d26a:	d84f      	bhi.n	800d30c <USBD_CDC_Setup+0x148>
 800d26c:	a201      	add	r2, pc, #4	; (adr r2, 800d274 <USBD_CDC_Setup+0xb0>)
 800d26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d272:	bf00      	nop
 800d274:	0800d2a5 	.word	0x0800d2a5
 800d278:	0800d31b 	.word	0x0800d31b
 800d27c:	0800d30d 	.word	0x0800d30d
 800d280:	0800d30d 	.word	0x0800d30d
 800d284:	0800d30d 	.word	0x0800d30d
 800d288:	0800d30d 	.word	0x0800d30d
 800d28c:	0800d30d 	.word	0x0800d30d
 800d290:	0800d30d 	.word	0x0800d30d
 800d294:	0800d30d 	.word	0x0800d30d
 800d298:	0800d30d 	.word	0x0800d30d
 800d29c:	0800d2cd 	.word	0x0800d2cd
 800d2a0:	0800d2f5 	.word	0x0800d2f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d107      	bne.n	800d2be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d2ae:	f107 030c 	add.w	r3, r7, #12
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f001 fa7d 	bl	800e7b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d2bc:	e030      	b.n	800d320 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f001 fa07 	bl	800e6d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ca:	e029      	b.n	800d320 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d107      	bne.n	800d2e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2d6:	f107 030f 	add.w	r3, r7, #15
 800d2da:	2201      	movs	r2, #1
 800d2dc:	4619      	mov	r1, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f001 fa69 	bl	800e7b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d2e4:	e01c      	b.n	800d320 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f001 f9f3 	bl	800e6d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d2f2:	e015      	b.n	800d320 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d00f      	beq.n	800d31e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f001 f9e7 	bl	800e6d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800d306:	2303      	movs	r3, #3
 800d308:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d30a:	e008      	b.n	800d31e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f001 f9e0 	bl	800e6d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d314:	2303      	movs	r3, #3
 800d316:	75fb      	strb	r3, [r7, #23]
      break;
 800d318:	e002      	b.n	800d320 <USBD_CDC_Setup+0x15c>
      break;
 800d31a:	bf00      	nop
 800d31c:	e008      	b.n	800d330 <USBD_CDC_Setup+0x16c>
      break;
 800d31e:	bf00      	nop
    }
    break;
 800d320:	e006      	b.n	800d330 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f001 f9d5 	bl	800e6d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800d32a:	2303      	movs	r3, #3
 800d32c:	75fb      	strb	r3, [r7, #23]
    break;
 800d32e:	bf00      	nop
  }

  return (uint8_t)ret;
 800d330:	7dfb      	ldrb	r3, [r7, #23]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop

0800d33c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d34e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e049      	b.n	800d3f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d364:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d366:	78fa      	ldrb	r2, [r7, #3]
 800d368:	6879      	ldr	r1, [r7, #4]
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	3318      	adds	r3, #24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d029      	beq.n	800d3d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d37c:	78fa      	ldrb	r2, [r7, #3]
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	440b      	add	r3, r1
 800d38a:	3318      	adds	r3, #24
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	78f9      	ldrb	r1, [r7, #3]
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	460b      	mov	r3, r1
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	1a5b      	subs	r3, r3, r1
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4403      	add	r3, r0
 800d39c:	3344      	adds	r3, #68	; 0x44
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3a4:	fb03 f301 	mul.w	r3, r3, r1
 800d3a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d110      	bne.n	800d3d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d3ae:	78fa      	ldrb	r2, [r7, #3]
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3318      	adds	r3, #24
 800d3be:	2200      	movs	r2, #0
 800d3c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3c2:	78f9      	ldrb	r1, [r7, #3]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f008 fea2 	bl	8016112 <USBD_LL_Transmit>
 800d3ce:	e00f      	b.n	800d3f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d3ec:	78fa      	ldrb	r2, [r7, #3]
 800d3ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	460b      	mov	r3, r1
 800d404:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d40c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d418:	2303      	movs	r3, #3
 800d41a:	e015      	b.n	800d448 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d41c:	78fb      	ldrb	r3, [r7, #3]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f008 feb8 	bl	8016196 <USBD_LL_GetRxDataSize>
 800d426:	4602      	mov	r2, r0
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d442:	4611      	mov	r1, r2
 800d444:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d45e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d015      	beq.n	800d496 <USBD_CDC_EP0_RxReady+0x46>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d470:	2bff      	cmp	r3, #255	; 0xff
 800d472:	d010      	beq.n	800d496 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d482:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d48a:	b292      	uxth	r2, r2
 800d48c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	22ff      	movs	r2, #255	; 0xff
 800d492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2243      	movs	r2, #67	; 0x43
 800d4ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d4ae:	4b03      	ldr	r3, [pc, #12]	; (800d4bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	20000094 	.word	0x20000094

0800d4c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2243      	movs	r2, #67	; 0x43
 800d4cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d4ce:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20000050 	.word	0x20000050

0800d4e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2243      	movs	r2, #67	; 0x43
 800d4ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d4ee:	4b03      	ldr	r3, [pc, #12]	; (800d4fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	200000d8 	.word	0x200000d8

0800d500 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	220a      	movs	r2, #10
 800d50c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d50e:	4b03      	ldr	r3, [pc, #12]	; (800d51c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	2000000c 	.word	0x2000000c

0800d520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d530:	2303      	movs	r3, #3
 800d532:	e004      	b.n	800d53e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b087      	sub	sp, #28
 800d54e:	af00      	add	r7, sp, #0
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d55c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	371c      	adds	r7, #28
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d58c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3714      	adds	r7, #20
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e01a      	b.n	800d5fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d114      	bne.n	800d5fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d5ee:	2181      	movs	r1, #129	; 0x81
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f008 fd8e 	bl	8016112 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d612:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d61e:	2303      	movs	r3, #3
 800d620:	e016      	b.n	800d650 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	7c1b      	ldrb	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d109      	bne.n	800d63e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d630:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d634:	2101      	movs	r1, #1
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f008 fd8c 	bl	8016154 <USBD_LL_PrepareReceive>
 800d63c:	e007      	b.n	800d64e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d644:	2340      	movs	r3, #64	; 0x40
 800d646:	2101      	movs	r1, #1
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f008 fd83 	bl	8016154 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	4613      	mov	r3, r2
 800d664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e025      	b.n	800d6bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	79fa      	ldrb	r2, [r7, #7]
 800d6ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f008 fbf9 	bl	8015ea8 <USBD_LL_Init>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	e010      	b.n	800d6fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ec:	f107 020e 	add.w	r2, r7, #14
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	4798      	blx	r3
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f008 fc16 	bl	8015f40 <USBD_LL_Start>
 800d714:	4603      	mov	r3, r0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d740:	2303      	movs	r3, #3
 800d742:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d009      	beq.n	800d762 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	4611      	mov	r1, r2
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	4798      	blx	r3
 800d75e:	4603      	mov	r3, r0
 800d760:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d007      	beq.n	800d792 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	4611      	mov	r1, r2
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	4798      	blx	r3
  }

  return USBD_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 ff56 	bl	800e660 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d7d0:	f003 031f 	and.w	r3, r3, #31
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d00e      	beq.n	800d7f6 <USBD_LL_SetupStage+0x5a>
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d302      	bcc.n	800d7e2 <USBD_LL_SetupStage+0x46>
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d014      	beq.n	800d80a <USBD_LL_SetupStage+0x6e>
 800d7e0:	e01d      	b.n	800d81e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa18 	bl	800dc20 <USBD_StdDevReq>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f4:	e020      	b.n	800d838 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fa7c 	bl	800dcfc <USBD_StdItfReq>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]
      break;
 800d808:	e016      	b.n	800d838 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fab8 	bl	800dd88 <USBD_StdEPReq>
 800d818:	4603      	mov	r3, r0
 800d81a:	73fb      	strb	r3, [r7, #15]
      break;
 800d81c:	e00c      	b.n	800d838 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f008 fbe7 	bl	8016000 <USBD_LL_StallEP>
 800d832:	4603      	mov	r3, r0
 800d834:	73fb      	strb	r3, [r7, #15]
      break;
 800d836:	bf00      	nop
  }

  return ret;
 800d838:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b086      	sub	sp, #24
 800d846:	af00      	add	r7, sp, #0
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	460b      	mov	r3, r1
 800d84c:	607a      	str	r2, [r7, #4]
 800d84e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d850:	7afb      	ldrb	r3, [r7, #11]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d137      	bne.n	800d8c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d85c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d864:	2b03      	cmp	r3, #3
 800d866:	d14a      	bne.n	800d8fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	689a      	ldr	r2, [r3, #8]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	429a      	cmp	r2, r3
 800d872:	d913      	bls.n	800d89c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	689a      	ldr	r2, [r3, #8]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	1ad2      	subs	r2, r2, r3
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	68da      	ldr	r2, [r3, #12]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	4293      	cmp	r3, r2
 800d88c:	bf28      	it	cs
 800d88e:	4613      	movcs	r3, r2
 800d890:	461a      	mov	r2, r3
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 ffd7 	bl	800e848 <USBD_CtlContinueRx>
 800d89a:	e030      	b.n	800d8fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00a      	beq.n	800d8be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d105      	bne.n	800d8be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 ffd3 	bl	800e86a <USBD_CtlSendStatus>
 800d8c4:	e01b      	b.n	800d8fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d013      	beq.n	800d8fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8d8:	2b03      	cmp	r3, #3
 800d8da:	d10e      	bne.n	800d8fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	7afa      	ldrb	r2, [r7, #11]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	4798      	blx	r3
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	e002      	b.n	800d900 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e000      	b.n	800d900 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	460b      	mov	r3, r1
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d916:	7afb      	ldrb	r3, [r7, #11]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d16a      	bne.n	800d9f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3314      	adds	r3, #20
 800d920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d155      	bne.n	800d9d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	429a      	cmp	r2, r3
 800d936:	d914      	bls.n	800d962 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	689a      	ldr	r2, [r3, #8]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	1ad2      	subs	r2, r2, r3
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6879      	ldr	r1, [r7, #4]
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 ff4c 	bl	800e7ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d954:	2300      	movs	r3, #0
 800d956:	2200      	movs	r2, #0
 800d958:	2100      	movs	r1, #0
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f008 fbfa 	bl	8016154 <USBD_LL_PrepareReceive>
 800d960:	e03a      	b.n	800d9d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d11c      	bne.n	800d9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d976:	429a      	cmp	r2, r3
 800d978:	d316      	bcc.n	800d9a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d984:	429a      	cmp	r2, r3
 800d986:	d20f      	bcs.n	800d9a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d988:	2200      	movs	r2, #0
 800d98a:	2100      	movs	r1, #0
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 ff2d 	bl	800e7ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d99a:	2300      	movs	r3, #0
 800d99c:	2200      	movs	r2, #0
 800d99e:	2100      	movs	r1, #0
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f008 fbd7 	bl	8016154 <USBD_LL_PrepareReceive>
 800d9a6:	e017      	b.n	800d9d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00a      	beq.n	800d9ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d105      	bne.n	800d9ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f008 fb17 	bl	8016000 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 ff5c 	bl	800e890 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d123      	bne.n	800da2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff fe9b 	bl	800d71e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d9f0:	e01b      	b.n	800da2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d013      	beq.n	800da26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800da04:	2b03      	cmp	r3, #3
 800da06:	d10e      	bne.n	800da26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	7afa      	ldrb	r2, [r7, #11]
 800da12:	4611      	mov	r1, r2
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	4798      	blx	r3
 800da18:	4603      	mov	r3, r0
 800da1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	e002      	b.n	800da2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da26:	2303      	movs	r3, #3
 800da28:	e000      	b.n	800da2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da60:	2b00      	cmp	r3, #0
 800da62:	d009      	beq.n	800da78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	6852      	ldr	r2, [r2, #4]
 800da70:	b2d2      	uxtb	r2, r2
 800da72:	4611      	mov	r1, r2
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da78:	2340      	movs	r3, #64	; 0x40
 800da7a:	2200      	movs	r2, #0
 800da7c:	2100      	movs	r1, #0
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f008 fa79 	bl	8015f76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2240      	movs	r2, #64	; 0x40
 800da90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da94:	2340      	movs	r3, #64	; 0x40
 800da96:	2200      	movs	r2, #0
 800da98:	2180      	movs	r1, #128	; 0x80
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f008 fa6b 	bl	8015f76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2240      	movs	r2, #64	; 0x40
 800daaa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	460b      	mov	r3, r1
 800dac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b083      	sub	sp, #12
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2204      	movs	r2, #4
 800daee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d105      	bne.n	800db1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d10b      	bne.n	800db56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800db7a:	b480      	push	{r7}
 800db7c:	b083      	sub	sp, #12
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d009      	beq.n	800dbd8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6852      	ldr	r2, [r2, #4]
 800dbd0:	b2d2      	uxtb	r2, r2
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	4798      	blx	r3
  }

  return USBD_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b087      	sub	sp, #28
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc00:	8a3b      	ldrh	r3, [r7, #16]
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	b21a      	sxth	r2, r3
 800dc06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	b21b      	sxth	r3, r3
 800dc0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc10:	89fb      	ldrh	r3, [r7, #14]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
	...

0800dc20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc36:	2b20      	cmp	r3, #32
 800dc38:	d004      	beq.n	800dc44 <USBD_StdDevReq+0x24>
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d002      	beq.n	800dc44 <USBD_StdDevReq+0x24>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00a      	beq.n	800dc58 <USBD_StdDevReq+0x38>
 800dc42:	e050      	b.n	800dce6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	4798      	blx	r3
 800dc52:	4603      	mov	r3, r0
 800dc54:	73fb      	strb	r3, [r7, #15]
    break;
 800dc56:	e04b      	b.n	800dcf0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	785b      	ldrb	r3, [r3, #1]
 800dc5c:	2b09      	cmp	r3, #9
 800dc5e:	d83c      	bhi.n	800dcda <USBD_StdDevReq+0xba>
 800dc60:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <USBD_StdDevReq+0x48>)
 800dc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc66:	bf00      	nop
 800dc68:	0800dcbd 	.word	0x0800dcbd
 800dc6c:	0800dcd1 	.word	0x0800dcd1
 800dc70:	0800dcdb 	.word	0x0800dcdb
 800dc74:	0800dcc7 	.word	0x0800dcc7
 800dc78:	0800dcdb 	.word	0x0800dcdb
 800dc7c:	0800dc9b 	.word	0x0800dc9b
 800dc80:	0800dc91 	.word	0x0800dc91
 800dc84:	0800dcdb 	.word	0x0800dcdb
 800dc88:	0800dcb3 	.word	0x0800dcb3
 800dc8c:	0800dca5 	.word	0x0800dca5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f9ce 	bl	800e034 <USBD_GetDescriptor>
      break;
 800dc98:	e024      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb5d 	bl	800e35c <USBD_SetAddress>
      break;
 800dca2:	e01f      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fb9a 	bl	800e3e0 <USBD_SetConfig>
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
      break;
 800dcb0:	e018      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fc37 	bl	800e528 <USBD_GetConfig>
      break;
 800dcba:	e013      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fc66 	bl	800e590 <USBD_GetStatus>
      break;
 800dcc4:	e00e      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 fc94 	bl	800e5f6 <USBD_SetFeature>
      break;
 800dcce:	e009      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fca3 	bl	800e61e <USBD_ClrFeature>
      break;
 800dcd8:	e004      	b.n	800dce4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fcf9 	bl	800e6d4 <USBD_CtlError>
      break;
 800dce2:	bf00      	nop
    }
    break;
 800dce4:	e004      	b.n	800dcf0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fcf3 	bl	800e6d4 <USBD_CtlError>
    break;
 800dcee:	bf00      	nop
  }

  return ret;
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop

0800dcfc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd12:	2b20      	cmp	r3, #32
 800dd14:	d003      	beq.n	800dd1e <USBD_StdItfReq+0x22>
 800dd16:	2b40      	cmp	r3, #64	; 0x40
 800dd18:	d001      	beq.n	800dd1e <USBD_StdItfReq+0x22>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d12a      	bne.n	800dd74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd24:	3b01      	subs	r3, #1
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d81d      	bhi.n	800dd66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	889b      	ldrh	r3, [r3, #4]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d813      	bhi.n	800dd5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	88db      	ldrh	r3, [r3, #6]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d110      	bne.n	800dd70 <USBD_StdItfReq+0x74>
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fd88 	bl	800e86a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dd5a:	e009      	b.n	800dd70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fcb8 	bl	800e6d4 <USBD_CtlError>
      break;
 800dd64:	e004      	b.n	800dd70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fcb3 	bl	800e6d4 <USBD_CtlError>
      break;
 800dd6e:	e000      	b.n	800dd72 <USBD_StdItfReq+0x76>
      break;
 800dd70:	bf00      	nop
    }
    break;
 800dd72:	e004      	b.n	800dd7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fcac 	bl	800e6d4 <USBD_CtlError>
    break;
 800dd7c:	bf00      	nop
  }

  return ret;
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	889b      	ldrh	r3, [r3, #4]
 800dd9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dda4:	2b20      	cmp	r3, #32
 800dda6:	d004      	beq.n	800ddb2 <USBD_StdEPReq+0x2a>
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	d002      	beq.n	800ddb2 <USBD_StdEPReq+0x2a>
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00a      	beq.n	800ddc6 <USBD_StdEPReq+0x3e>
 800ddb0:	e135      	b.n	800e01e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	4798      	blx	r3
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ddc4:	e130      	b.n	800e028 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	785b      	ldrb	r3, [r3, #1]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d03e      	beq.n	800de4c <USBD_StdEPReq+0xc4>
 800ddce:	2b03      	cmp	r3, #3
 800ddd0:	d002      	beq.n	800ddd8 <USBD_StdEPReq+0x50>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d077      	beq.n	800dec6 <USBD_StdEPReq+0x13e>
 800ddd6:	e11c      	b.n	800e012 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	d002      	beq.n	800dde8 <USBD_StdEPReq+0x60>
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d015      	beq.n	800de12 <USBD_StdEPReq+0x8a>
 800dde6:	e02b      	b.n	800de40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00c      	beq.n	800de08 <USBD_StdEPReq+0x80>
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	2b80      	cmp	r3, #128	; 0x80
 800ddf2:	d009      	beq.n	800de08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f008 f901 	bl	8016000 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddfe:	2180      	movs	r1, #128	; 0x80
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f008 f8fd 	bl	8016000 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de06:	e020      	b.n	800de4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fc62 	bl	800e6d4 <USBD_CtlError>
        break;
 800de10:	e01b      	b.n	800de4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10e      	bne.n	800de38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00b      	beq.n	800de38 <USBD_StdEPReq+0xb0>
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	2b80      	cmp	r3, #128	; 0x80
 800de24:	d008      	beq.n	800de38 <USBD_StdEPReq+0xb0>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800de2e:	7bbb      	ldrb	r3, [r7, #14]
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f008 f8e4 	bl	8016000 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fd16 	bl	800e86a <USBD_CtlSendStatus>

        break;
 800de3e:	e004      	b.n	800de4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fc46 	bl	800e6d4 <USBD_CtlError>
        break;
 800de48:	bf00      	nop
      }
      break;
 800de4a:	e0e7      	b.n	800e01c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de52:	2b02      	cmp	r3, #2
 800de54:	d002      	beq.n	800de5c <USBD_StdEPReq+0xd4>
 800de56:	2b03      	cmp	r3, #3
 800de58:	d015      	beq.n	800de86 <USBD_StdEPReq+0xfe>
 800de5a:	e02d      	b.n	800deb8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00c      	beq.n	800de7c <USBD_StdEPReq+0xf4>
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	2b80      	cmp	r3, #128	; 0x80
 800de66:	d009      	beq.n	800de7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f008 f8c7 	bl	8016000 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de72:	2180      	movs	r1, #128	; 0x80
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f008 f8c3 	bl	8016000 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de7a:	e023      	b.n	800dec4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800de7c:	6839      	ldr	r1, [r7, #0]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fc28 	bl	800e6d4 <USBD_CtlError>
        break;
 800de84:	e01e      	b.n	800dec4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	885b      	ldrh	r3, [r3, #2]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d119      	bne.n	800dec2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de94:	2b00      	cmp	r3, #0
 800de96:	d004      	beq.n	800dea2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f008 f8ce 	bl	801603e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fce1 	bl	800e86a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	4798      	blx	r3
        }
        break;
 800deb6:	e004      	b.n	800dec2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fc0a 	bl	800e6d4 <USBD_CtlError>
        break;
 800dec0:	e000      	b.n	800dec4 <USBD_StdEPReq+0x13c>
        break;
 800dec2:	bf00      	nop
      }
      break;
 800dec4:	e0aa      	b.n	800e01c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800decc:	2b02      	cmp	r3, #2
 800dece:	d002      	beq.n	800ded6 <USBD_StdEPReq+0x14e>
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d032      	beq.n	800df3a <USBD_StdEPReq+0x1b2>
 800ded4:	e097      	b.n	800e006 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d007      	beq.n	800deec <USBD_StdEPReq+0x164>
 800dedc:	7bbb      	ldrb	r3, [r7, #14]
 800dede:	2b80      	cmp	r3, #128	; 0x80
 800dee0:	d004      	beq.n	800deec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fbf5 	bl	800e6d4 <USBD_CtlError>
          break;
 800deea:	e091      	b.n	800e010 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800def0:	2b00      	cmp	r3, #0
 800def2:	da0b      	bge.n	800df0c <USBD_StdEPReq+0x184>
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800defa:	4613      	mov	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	4413      	add	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	3310      	adds	r3, #16
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	4413      	add	r3, r2
 800df08:	3304      	adds	r3, #4
 800df0a:	e00b      	b.n	800df24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	4413      	add	r3, r2
 800df22:	3304      	adds	r3, #4
 800df24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2202      	movs	r2, #2
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fc3f 	bl	800e7b6 <USBD_CtlSendData>
        break;
 800df38:	e06a      	b.n	800e010 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800df3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	da11      	bge.n	800df66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	f003 020f 	and.w	r2, r3, #15
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	440b      	add	r3, r1
 800df54:	3324      	adds	r3, #36	; 0x24
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d117      	bne.n	800df8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fbb8 	bl	800e6d4 <USBD_CtlError>
            break;
 800df64:	e054      	b.n	800e010 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	f003 020f 	and.w	r2, r3, #15
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	440b      	add	r3, r1
 800df78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d104      	bne.n	800df8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fba5 	bl	800e6d4 <USBD_CtlError>
            break;
 800df8a:	e041      	b.n	800e010 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df90:	2b00      	cmp	r3, #0
 800df92:	da0b      	bge.n	800dfac <USBD_StdEPReq+0x224>
 800df94:	7bbb      	ldrb	r3, [r7, #14]
 800df96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	3310      	adds	r3, #16
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	e00b      	b.n	800dfc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800dfac:	7bbb      	ldrb	r3, [r7, #14]
 800dfae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <USBD_StdEPReq+0x24a>
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
 800dfce:	2b80      	cmp	r3, #128	; 0x80
 800dfd0:	d103      	bne.n	800dfda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	e00e      	b.n	800dff8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f008 f84c 	bl	801607c <USBD_LL_IsStallEP>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2201      	movs	r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	e002      	b.n	800dff8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2200      	movs	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2202      	movs	r2, #2
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fbd9 	bl	800e7b6 <USBD_CtlSendData>
          break;
 800e004:	e004      	b.n	800e010 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fb63 	bl	800e6d4 <USBD_CtlError>
        break;
 800e00e:	bf00      	nop
      }
      break;
 800e010:	e004      	b.n	800e01c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fb5d 	bl	800e6d4 <USBD_CtlError>
      break;
 800e01a:	bf00      	nop
    }
    break;
 800e01c:	e004      	b.n	800e028 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fb57 	bl	800e6d4 <USBD_CtlError>
    break;
 800e026:	bf00      	nop
  }

  return ret;
 800e028:	7bfb      	ldrb	r3, [r7, #15]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
	...

0800e034 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e03e:	2300      	movs	r3, #0
 800e040:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e046:	2300      	movs	r3, #0
 800e048:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	2b0e      	cmp	r3, #14
 800e056:	f200 8152 	bhi.w	800e2fe <USBD_GetDescriptor+0x2ca>
 800e05a:	a201      	add	r2, pc, #4	; (adr r2, 800e060 <USBD_GetDescriptor+0x2c>)
 800e05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e060:	0800e0d1 	.word	0x0800e0d1
 800e064:	0800e0e9 	.word	0x0800e0e9
 800e068:	0800e129 	.word	0x0800e129
 800e06c:	0800e2ff 	.word	0x0800e2ff
 800e070:	0800e2ff 	.word	0x0800e2ff
 800e074:	0800e29f 	.word	0x0800e29f
 800e078:	0800e2cb 	.word	0x0800e2cb
 800e07c:	0800e2ff 	.word	0x0800e2ff
 800e080:	0800e2ff 	.word	0x0800e2ff
 800e084:	0800e2ff 	.word	0x0800e2ff
 800e088:	0800e2ff 	.word	0x0800e2ff
 800e08c:	0800e2ff 	.word	0x0800e2ff
 800e090:	0800e2ff 	.word	0x0800e2ff
 800e094:	0800e2ff 	.word	0x0800e2ff
 800e098:	0800e09d 	.word	0x0800e09d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00b      	beq.n	800e0c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ae:	69db      	ldr	r3, [r3, #28]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	7c12      	ldrb	r2, [r2, #16]
 800e0b4:	f107 0108 	add.w	r1, r7, #8
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
 800e0bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e0be:	e126      	b.n	800e30e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fb06 	bl	800e6d4 <USBD_CtlError>
      err++;
 800e0c8:	7afb      	ldrb	r3, [r7, #11]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	72fb      	strb	r3, [r7, #11]
    break;
 800e0ce:	e11e      	b.n	800e30e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	7c12      	ldrb	r2, [r2, #16]
 800e0dc:	f107 0108 	add.w	r1, r7, #8
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
 800e0e4:	60f8      	str	r0, [r7, #12]
    break;
 800e0e6:	e112      	b.n	800e30e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	7c1b      	ldrb	r3, [r3, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10d      	bne.n	800e10c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f8:	f107 0208 	add.w	r2, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	2202      	movs	r2, #2
 800e108:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e10a:	e100      	b.n	800e30e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	f107 0208 	add.w	r2, r7, #8
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
 800e11c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3301      	adds	r3, #1
 800e122:	2202      	movs	r2, #2
 800e124:	701a      	strb	r2, [r3, #0]
    break;
 800e126:	e0f2      	b.n	800e30e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	885b      	ldrh	r3, [r3, #2]
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b05      	cmp	r3, #5
 800e130:	f200 80ac 	bhi.w	800e28c <USBD_GetDescriptor+0x258>
 800e134:	a201      	add	r2, pc, #4	; (adr r2, 800e13c <USBD_GetDescriptor+0x108>)
 800e136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13a:	bf00      	nop
 800e13c:	0800e155 	.word	0x0800e155
 800e140:	0800e189 	.word	0x0800e189
 800e144:	0800e1bd 	.word	0x0800e1bd
 800e148:	0800e1f1 	.word	0x0800e1f1
 800e14c:	0800e225 	.word	0x0800e225
 800e150:	0800e259 	.word	0x0800e259
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00b      	beq.n	800e178 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	7c12      	ldrb	r2, [r2, #16]
 800e16c:	f107 0108 	add.w	r1, r7, #8
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e176:	e091      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 faaa 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e180:	7afb      	ldrb	r3, [r7, #11]
 800e182:	3301      	adds	r3, #1
 800e184:	72fb      	strb	r3, [r7, #11]
      break;
 800e186:	e089      	b.n	800e29c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00b      	beq.n	800e1ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	7c12      	ldrb	r2, [r2, #16]
 800e1a0:	f107 0108 	add.w	r1, r7, #8
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4798      	blx	r3
 800e1a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1aa:	e077      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fa90 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e1b4:	7afb      	ldrb	r3, [r7, #11]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ba:	e06f      	b.n	800e29c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00b      	beq.n	800e1e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	7c12      	ldrb	r2, [r2, #16]
 800e1d4:	f107 0108 	add.w	r1, r7, #8
 800e1d8:	4610      	mov	r0, r2
 800e1da:	4798      	blx	r3
 800e1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1de:	e05d      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fa76 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e1e8:	7afb      	ldrb	r3, [r7, #11]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ee:	e055      	b.n	800e29c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00b      	beq.n	800e214 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	7c12      	ldrb	r2, [r2, #16]
 800e208:	f107 0108 	add.w	r1, r7, #8
 800e20c:	4610      	mov	r0, r2
 800e20e:	4798      	blx	r3
 800e210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e212:	e043      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fa5c 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e21c:	7afb      	ldrb	r3, [r7, #11]
 800e21e:	3301      	adds	r3, #1
 800e220:	72fb      	strb	r3, [r7, #11]
      break;
 800e222:	e03b      	b.n	800e29c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00b      	beq.n	800e248 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	7c12      	ldrb	r2, [r2, #16]
 800e23c:	f107 0108 	add.w	r1, r7, #8
 800e240:	4610      	mov	r0, r2
 800e242:	4798      	blx	r3
 800e244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e246:	e029      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fa42 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e250:	7afb      	ldrb	r3, [r7, #11]
 800e252:	3301      	adds	r3, #1
 800e254:	72fb      	strb	r3, [r7, #11]
      break;
 800e256:	e021      	b.n	800e29c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00b      	beq.n	800e27c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	7c12      	ldrb	r2, [r2, #16]
 800e270:	f107 0108 	add.w	r1, r7, #8
 800e274:	4610      	mov	r0, r2
 800e276:	4798      	blx	r3
 800e278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e27a:	e00f      	b.n	800e29c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fa28 	bl	800e6d4 <USBD_CtlError>
        err++;
 800e284:	7afb      	ldrb	r3, [r7, #11]
 800e286:	3301      	adds	r3, #1
 800e288:	72fb      	strb	r3, [r7, #11]
      break;
 800e28a:	e007      	b.n	800e29c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fa20 	bl	800e6d4 <USBD_CtlError>
      err++;
 800e294:	7afb      	ldrb	r3, [r7, #11]
 800e296:	3301      	adds	r3, #1
 800e298:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e29a:	bf00      	nop
    }
    break;
 800e29c:	e037      	b.n	800e30e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	7c1b      	ldrb	r3, [r3, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d109      	bne.n	800e2ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ae:	f107 0208 	add.w	r2, r7, #8
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4798      	blx	r3
 800e2b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e2b8:	e029      	b.n	800e30e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fa09 	bl	800e6d4 <USBD_CtlError>
      err++;
 800e2c2:	7afb      	ldrb	r3, [r7, #11]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	72fb      	strb	r3, [r7, #11]
    break;
 800e2c8:	e021      	b.n	800e30e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	7c1b      	ldrb	r3, [r3, #16]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10d      	bne.n	800e2ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2da:	f107 0208 	add.w	r2, r7, #8
 800e2de:	4610      	mov	r0, r2
 800e2e0:	4798      	blx	r3
 800e2e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	2207      	movs	r2, #7
 800e2ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e2ec:	e00f      	b.n	800e30e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 f9ef 	bl	800e6d4 <USBD_CtlError>
      err++;
 800e2f6:	7afb      	ldrb	r3, [r7, #11]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	72fb      	strb	r3, [r7, #11]
    break;
 800e2fc:	e007      	b.n	800e30e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f9e7 	bl	800e6d4 <USBD_CtlError>
    err++;
 800e306:	7afb      	ldrb	r3, [r7, #11]
 800e308:	3301      	adds	r3, #1
 800e30a:	72fb      	strb	r3, [r7, #11]
    break;
 800e30c:	bf00      	nop
  }

  if (err != 0U)
 800e30e:	7afb      	ldrb	r3, [r7, #11]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d11e      	bne.n	800e352 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	88db      	ldrh	r3, [r3, #6]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d016      	beq.n	800e34a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e31c:	893b      	ldrh	r3, [r7, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00e      	beq.n	800e340 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	88da      	ldrh	r2, [r3, #6]
 800e326:	893b      	ldrh	r3, [r7, #8]
 800e328:	4293      	cmp	r3, r2
 800e32a:	bf28      	it	cs
 800e32c:	4613      	movcs	r3, r2
 800e32e:	b29b      	uxth	r3, r3
 800e330:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e332:	893b      	ldrh	r3, [r7, #8]
 800e334:	461a      	mov	r2, r3
 800e336:	68f9      	ldr	r1, [r7, #12]
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 fa3c 	bl	800e7b6 <USBD_CtlSendData>
 800e33e:	e009      	b.n	800e354 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f9c6 	bl	800e6d4 <USBD_CtlError>
 800e348:	e004      	b.n	800e354 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa8d 	bl	800e86a <USBD_CtlSendStatus>
 800e350:	e000      	b.n	800e354 <USBD_GetDescriptor+0x320>
    return;
 800e352:	bf00      	nop
    }
  }
}
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop

0800e35c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	889b      	ldrh	r3, [r3, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d130      	bne.n	800e3d0 <USBD_SetAddress+0x74>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	88db      	ldrh	r3, [r3, #6]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d12c      	bne.n	800e3d0 <USBD_SetAddress+0x74>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	885b      	ldrh	r3, [r3, #2]
 800e37a:	2b7f      	cmp	r3, #127	; 0x7f
 800e37c:	d828      	bhi.n	800e3d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	885b      	ldrh	r3, [r3, #2]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e390:	2b03      	cmp	r3, #3
 800e392:	d104      	bne.n	800e39e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f99c 	bl	800e6d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e39c:	e01c      	b.n	800e3d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7bfa      	ldrb	r2, [r7, #15]
 800e3a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f007 fe92 	bl	80160d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fa5a 	bl	800e86a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d004      	beq.n	800e3c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2202      	movs	r2, #2
 800e3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3c4:	e008      	b.n	800e3d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3ce:	e003      	b.n	800e3d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f97e 	bl	800e6d4 <USBD_CtlError>
  }
}
 800e3d8:	bf00      	nop
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	885b      	ldrh	r3, [r3, #2]
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	4b4b      	ldr	r3, [pc, #300]	; (800e524 <USBD_SetConfig+0x144>)
 800e3f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3f8:	4b4a      	ldr	r3, [pc, #296]	; (800e524 <USBD_SetConfig+0x144>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d905      	bls.n	800e40c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f966 	bl	800e6d4 <USBD_CtlError>
    return USBD_FAIL;
 800e408:	2303      	movs	r3, #3
 800e40a:	e087      	b.n	800e51c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e412:	2b02      	cmp	r3, #2
 800e414:	d002      	beq.n	800e41c <USBD_SetConfig+0x3c>
 800e416:	2b03      	cmp	r3, #3
 800e418:	d025      	beq.n	800e466 <USBD_SetConfig+0x86>
 800e41a:	e071      	b.n	800e500 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e41c:	4b41      	ldr	r3, [pc, #260]	; (800e524 <USBD_SetConfig+0x144>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01c      	beq.n	800e45e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e424:	4b3f      	ldr	r3, [pc, #252]	; (800e524 <USBD_SetConfig+0x144>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	461a      	mov	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e42e:	4b3d      	ldr	r3, [pc, #244]	; (800e524 <USBD_SetConfig+0x144>)
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	4619      	mov	r1, r3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff f97d 	bl	800d734 <USBD_SetClassConfig>
 800e43a:	4603      	mov	r3, r0
 800e43c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f944 	bl	800e6d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e44c:	e065      	b.n	800e51a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fa0b 	bl	800e86a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2203      	movs	r2, #3
 800e458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e45c:	e05d      	b.n	800e51a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fa03 	bl	800e86a <USBD_CtlSendStatus>
    break;
 800e464:	e059      	b.n	800e51a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e466:	4b2f      	ldr	r3, [pc, #188]	; (800e524 <USBD_SetConfig+0x144>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d112      	bne.n	800e494 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2202      	movs	r2, #2
 800e472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e476:	4b2b      	ldr	r3, [pc, #172]	; (800e524 <USBD_SetConfig+0x144>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e480:	4b28      	ldr	r3, [pc, #160]	; (800e524 <USBD_SetConfig+0x144>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff f970 	bl	800d76c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9ec 	bl	800e86a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e492:	e042      	b.n	800e51a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e494:	4b23      	ldr	r3, [pc, #140]	; (800e524 <USBD_SetConfig+0x144>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	461a      	mov	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d02a      	beq.n	800e4f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff f95e 	bl	800d76c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e4b0:	4b1c      	ldr	r3, [pc, #112]	; (800e524 <USBD_SetConfig+0x144>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4ba:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <USBD_SetConfig+0x144>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff f937 	bl	800d734 <USBD_SetClassConfig>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e4ca:	7bfb      	ldrb	r3, [r7, #15]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00f      	beq.n	800e4f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f8fe 	bl	800e6d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff f943 	bl	800d76c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e4ee:	e014      	b.n	800e51a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f9ba 	bl	800e86a <USBD_CtlSendStatus>
    break;
 800e4f6:	e010      	b.n	800e51a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f9b6 	bl	800e86a <USBD_CtlSendStatus>
    break;
 800e4fe:	e00c      	b.n	800e51a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f8e6 	bl	800e6d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e508:	4b06      	ldr	r3, [pc, #24]	; (800e524 <USBD_SetConfig+0x144>)
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff f92c 	bl	800d76c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	73fb      	strb	r3, [r7, #15]
    break;
 800e518:	bf00      	nop
  }

  return ret;
 800e51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	200002e0 	.word	0x200002e0

0800e528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	88db      	ldrh	r3, [r3, #6]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d004      	beq.n	800e544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f8c9 	bl	800e6d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e542:	e021      	b.n	800e588 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	db17      	blt.n	800e57e <USBD_GetConfig+0x56>
 800e54e:	2b02      	cmp	r3, #2
 800e550:	dd02      	ble.n	800e558 <USBD_GetConfig+0x30>
 800e552:	2b03      	cmp	r3, #3
 800e554:	d00b      	beq.n	800e56e <USBD_GetConfig+0x46>
 800e556:	e012      	b.n	800e57e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	3308      	adds	r3, #8
 800e562:	2201      	movs	r2, #1
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f925 	bl	800e7b6 <USBD_CtlSendData>
      break;
 800e56c:	e00c      	b.n	800e588 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	3304      	adds	r3, #4
 800e572:	2201      	movs	r2, #1
 800e574:	4619      	mov	r1, r3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f91d 	bl	800e7b6 <USBD_CtlSendData>
      break;
 800e57c:	e004      	b.n	800e588 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f8a7 	bl	800e6d4 <USBD_CtlError>
      break;
 800e586:	bf00      	nop
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d81e      	bhi.n	800e5e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	88db      	ldrh	r3, [r3, #6]
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d004      	beq.n	800e5b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f88f 	bl	800e6d4 <USBD_CtlError>
      break;
 800e5b6:	e01a      	b.n	800e5ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d005      	beq.n	800e5d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	f043 0202 	orr.w	r2, r3, #2
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	330c      	adds	r3, #12
 800e5d8:	2202      	movs	r2, #2
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f8ea 	bl	800e7b6 <USBD_CtlSendData>
    break;
 800e5e2:	e004      	b.n	800e5ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f874 	bl	800e6d4 <USBD_CtlError>
    break;
 800e5ec:	bf00      	nop
  }
}
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	885b      	ldrh	r3, [r3, #2]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d106      	bne.n	800e616 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f92a 	bl	800e86a <USBD_CtlSendStatus>
  }
}
 800e616:	bf00      	nop
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b082      	sub	sp, #8
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e62e:	3b01      	subs	r3, #1
 800e630:	2b02      	cmp	r3, #2
 800e632:	d80b      	bhi.n	800e64c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	885b      	ldrh	r3, [r3, #2]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d10c      	bne.n	800e656 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f910 	bl	800e86a <USBD_CtlSendStatus>
      }
      break;
 800e64a:	e004      	b.n	800e656 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f840 	bl	800e6d4 <USBD_CtlError>
      break;
 800e654:	e000      	b.n	800e658 <USBD_ClrFeature+0x3a>
      break;
 800e656:	bf00      	nop
  }
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	781a      	ldrb	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	781a      	ldrb	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	3301      	adds	r3, #1
 800e688:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f7ff faa9 	bl	800dbe2 <SWAPBYTE>
 800e690:	4603      	mov	r3, r0
 800e692:	461a      	mov	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff fa9c 	bl	800dbe2 <SWAPBYTE>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff fa8f 	bl	800dbe2 <SWAPBYTE>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	80da      	strh	r2, [r3, #6]
}
 800e6cc:	bf00      	nop
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6de:	2180      	movs	r1, #128	; 0x80
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f007 fc8d 	bl	8016000 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f007 fc89 	bl	8016000 <USBD_LL_StallEP>
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b086      	sub	sp, #24
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	60f8      	str	r0, [r7, #12]
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e702:	2300      	movs	r3, #0
 800e704:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d036      	beq.n	800e77a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e710:	6938      	ldr	r0, [r7, #16]
 800e712:	f000 f836 	bl	800e782 <USBD_GetLen>
 800e716:	4603      	mov	r3, r0
 800e718:	3301      	adds	r3, #1
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	b29a      	uxth	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e724:	7dfb      	ldrb	r3, [r7, #23]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	4413      	add	r3, r2
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	7812      	ldrb	r2, [r2, #0]
 800e72e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
 800e732:	3301      	adds	r3, #1
 800e734:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e736:	7dfb      	ldrb	r3, [r7, #23]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	4413      	add	r3, r2
 800e73c:	2203      	movs	r2, #3
 800e73e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	3301      	adds	r3, #1
 800e744:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e746:	e013      	b.n	800e770 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	4413      	add	r3, r2
 800e74e:	693a      	ldr	r2, [r7, #16]
 800e750:	7812      	ldrb	r2, [r2, #0]
 800e752:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	3301      	adds	r3, #1
 800e758:	613b      	str	r3, [r7, #16]
    idx++;
 800e75a:	7dfb      	ldrb	r3, [r7, #23]
 800e75c:	3301      	adds	r3, #1
 800e75e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e760:	7dfb      	ldrb	r3, [r7, #23]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	4413      	add	r3, r2
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
    idx++;
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
 800e76c:	3301      	adds	r3, #1
 800e76e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1e7      	bne.n	800e748 <USBD_GetString+0x52>
 800e778:	e000      	b.n	800e77c <USBD_GetString+0x86>
    return;
 800e77a:	bf00      	nop
  }
}
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e782:	b480      	push	{r7}
 800e784:	b085      	sub	sp, #20
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e78a:	2300      	movs	r3, #0
 800e78c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e792:	e005      	b.n	800e7a0 <USBD_GetLen+0x1e>
  {
    len++;
 800e794:	7bfb      	ldrb	r3, [r7, #15]
 800e796:	3301      	adds	r3, #1
 800e798:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	3301      	adds	r3, #1
 800e79e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1f5      	bne.n	800e794 <USBD_GetLen+0x12>
  }

  return len;
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	60f8      	str	r0, [r7, #12]
 800e7be:	60b9      	str	r1, [r7, #8]
 800e7c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	2100      	movs	r1, #0
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f007 fc98 	bl	8016112 <USBD_LL_Transmit>

  return USBD_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f007 fc87 	bl	8016112 <USBD_LL_Transmit>

  return USBD_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	60b9      	str	r1, [r7, #8]
 800e818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2203      	movs	r2, #3
 800e81e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	2100      	movs	r1, #0
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f007 fc8b 	bl	8016154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	2100      	movs	r1, #0
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f007 fc7a 	bl	8016154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2204      	movs	r2, #4
 800e876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e87a:	2300      	movs	r3, #0
 800e87c:	2200      	movs	r2, #0
 800e87e:	2100      	movs	r1, #0
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f007 fc46 	bl	8016112 <USBD_LL_Transmit>

  return USBD_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2205      	movs	r2, #5
 800e89c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f007 fc54 	bl	8016154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <disk_status+0x30>)
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	79fa      	ldrb	r2, [r7, #7]
 800e8d0:	4905      	ldr	r1, [pc, #20]	; (800e8e8 <disk_status+0x30>)
 800e8d2:	440a      	add	r2, r1
 800e8d4:	7a12      	ldrb	r2, [r2, #8]
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4798      	blx	r3
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	2000030c 	.word	0x2000030c

0800e8ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	4a0d      	ldr	r2, [pc, #52]	; (800e934 <disk_initialize+0x48>)
 800e8fe:	5cd3      	ldrb	r3, [r2, r3]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d111      	bne.n	800e928 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	4a0b      	ldr	r2, [pc, #44]	; (800e934 <disk_initialize+0x48>)
 800e908:	2101      	movs	r1, #1
 800e90a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	4a09      	ldr	r2, [pc, #36]	; (800e934 <disk_initialize+0x48>)
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	79fa      	ldrb	r2, [r7, #7]
 800e91a:	4906      	ldr	r1, [pc, #24]	; (800e934 <disk_initialize+0x48>)
 800e91c:	440a      	add	r2, r1
 800e91e:	7a12      	ldrb	r2, [r2, #8]
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
 800e924:	4603      	mov	r3, r0
 800e926:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2000030c 	.word	0x2000030c

0800e938 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e938:	b590      	push	{r4, r7, lr}
 800e93a:	b087      	sub	sp, #28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	607a      	str	r2, [r7, #4]
 800e942:	603b      	str	r3, [r7, #0]
 800e944:	4603      	mov	r3, r0
 800e946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e948:	7bfb      	ldrb	r3, [r7, #15]
 800e94a:	4a0a      	ldr	r2, [pc, #40]	; (800e974 <disk_read+0x3c>)
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	689c      	ldr	r4, [r3, #8]
 800e954:	7bfb      	ldrb	r3, [r7, #15]
 800e956:	4a07      	ldr	r2, [pc, #28]	; (800e974 <disk_read+0x3c>)
 800e958:	4413      	add	r3, r2
 800e95a:	7a18      	ldrb	r0, [r3, #8]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	47a0      	blx	r4
 800e964:	4603      	mov	r3, r0
 800e966:	75fb      	strb	r3, [r7, #23]
  return res;
 800e968:	7dfb      	ldrb	r3, [r7, #23]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	371c      	adds	r7, #28
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}
 800e972:	bf00      	nop
 800e974:	2000030c 	.word	0x2000030c

0800e978 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e978:	b590      	push	{r4, r7, lr}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	607a      	str	r2, [r7, #4]
 800e982:	603b      	str	r3, [r7, #0]
 800e984:	4603      	mov	r3, r0
 800e986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	4a0a      	ldr	r2, [pc, #40]	; (800e9b4 <disk_write+0x3c>)
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	68dc      	ldr	r4, [r3, #12]
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	4a07      	ldr	r2, [pc, #28]	; (800e9b4 <disk_write+0x3c>)
 800e998:	4413      	add	r3, r2
 800e99a:	7a18      	ldrb	r0, [r3, #8]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	68b9      	ldr	r1, [r7, #8]
 800e9a2:	47a0      	blx	r4
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	371c      	adds	r7, #28
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd90      	pop	{r4, r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000030c 	.word	0x2000030c

0800e9b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	603a      	str	r2, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <disk_ioctl+0x38>)
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	79fa      	ldrb	r2, [r7, #7]
 800e9d6:	4906      	ldr	r1, [pc, #24]	; (800e9f0 <disk_ioctl+0x38>)
 800e9d8:	440a      	add	r2, r1
 800e9da:	7a10      	ldrb	r0, [r2, #8]
 800e9dc:	79b9      	ldrb	r1, [r7, #6]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	4798      	blx	r3
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  return res;
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3710      	adds	r7, #16
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	2000030c 	.word	0x2000030c

0800e9f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ea04:	89fb      	ldrh	r3, [r7, #14]
 800ea06:	021b      	lsls	r3, r3, #8
 800ea08:	b21a      	sxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	b21b      	sxth	r3, r3
 800ea10:	4313      	orrs	r3, r2
 800ea12:	b21b      	sxth	r3, r3
 800ea14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea16:	89fb      	ldrh	r3, [r7, #14]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3303      	adds	r3, #3
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	3202      	adds	r2, #2
 800ea3c:	7812      	ldrb	r2, [r2, #0]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	021b      	lsls	r3, r3, #8
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	3201      	adds	r2, #1
 800ea4a:	7812      	ldrb	r2, [r2, #0]
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	021b      	lsls	r3, r3, #8
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	7812      	ldrb	r2, [r2, #0]
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	460b      	mov	r3, r1
 800ea74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	887a      	ldrh	r2, [r7, #2]
 800ea7e:	b2d2      	uxtb	r2, r2
 800ea80:	701a      	strb	r2, [r3, #0]
 800ea82:	887b      	ldrh	r3, [r7, #2]
 800ea84:	0a1b      	lsrs	r3, r3, #8
 800ea86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	607a      	str	r2, [r7, #4]
 800ea8e:	887a      	ldrh	r2, [r7, #2]
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	701a      	strb	r2, [r3, #0]
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	b2d2      	uxtb	r2, r2
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	0a1b      	lsrs	r3, r3, #8
 800eaba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1c5a      	adds	r2, r3, #1
 800eac0:	607a      	str	r2, [r7, #4]
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	b2d2      	uxtb	r2, r2
 800eac6:	701a      	strb	r2, [r3, #0]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	b2d2      	uxtb	r2, r2
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	1c5a      	adds	r2, r3, #1
 800eae4:	607a      	str	r2, [r7, #4]
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	701a      	strb	r2, [r3, #0]
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00d      	beq.n	800eb2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	1c53      	adds	r3, r2, #1
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	1c59      	adds	r1, r3, #1
 800eb1c:	6179      	str	r1, [r7, #20]
 800eb1e:	7812      	ldrb	r2, [r2, #0]
 800eb20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	607b      	str	r3, [r7, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1f1      	bne.n	800eb12 <mem_cpy+0x1a>
	}
}
 800eb2e:	bf00      	nop
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb3a:	b480      	push	{r7}
 800eb3c:	b087      	sub	sp, #28
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	60b9      	str	r1, [r7, #8]
 800eb44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	617a      	str	r2, [r7, #20]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	b2d2      	uxtb	r2, r2
 800eb54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	607b      	str	r3, [r7, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1f3      	bne.n	800eb4a <mem_set+0x10>
}
 800eb62:	bf00      	nop
 800eb64:	371c      	adds	r7, #28
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb6e:	b480      	push	{r7}
 800eb70:	b089      	sub	sp, #36	; 0x24
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	60f8      	str	r0, [r7, #12]
 800eb76:	60b9      	str	r1, [r7, #8]
 800eb78:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	61fb      	str	r3, [r7, #28]
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	61fa      	str	r2, [r7, #28]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	61ba      	str	r2, [r7, #24]
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	1acb      	subs	r3, r1, r3
 800eb9a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	607b      	str	r3, [r7, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <mem_cmp+0x40>
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0eb      	beq.n	800eb86 <mem_cmp+0x18>

	return r;
 800ebae:	697b      	ldr	r3, [r7, #20]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3724      	adds	r7, #36	; 0x24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ebc6:	e002      	b.n	800ebce <chk_chr+0x12>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	607b      	str	r3, [r7, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d005      	beq.n	800ebe2 <chk_chr+0x26>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d1f2      	bne.n	800ebc8 <chk_chr+0xc>
	return *str;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d009      	beq.n	800ec14 <lock_fs+0x22>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f002 fd8d 	bl	8011724 <ff_req_grant>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <lock_fs+0x22>
 800ec10:	2301      	movs	r3, #1
 800ec12:	e000      	b.n	800ec16 <lock_fs+0x24>
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	460b      	mov	r3, r1
 800ec28:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00d      	beq.n	800ec4c <unlock_fs+0x2e>
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	2b0c      	cmp	r3, #12
 800ec34:	d00a      	beq.n	800ec4c <unlock_fs+0x2e>
 800ec36:	78fb      	ldrb	r3, [r7, #3]
 800ec38:	2b0b      	cmp	r3, #11
 800ec3a:	d007      	beq.n	800ec4c <unlock_fs+0x2e>
 800ec3c:	78fb      	ldrb	r3, [r7, #3]
 800ec3e:	2b0f      	cmp	r3, #15
 800ec40:	d004      	beq.n	800ec4c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	4618      	mov	r0, r3
 800ec48:	f002 fd81 	bl	801174e <ff_rel_grant>
	}
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60bb      	str	r3, [r7, #8]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	60fb      	str	r3, [r7, #12]
 800ec66:	e029      	b.n	800ecbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec68:	4a27      	ldr	r2, [pc, #156]	; (800ed08 <chk_lock+0xb4>)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	4413      	add	r3, r2
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d01d      	beq.n	800ecb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec76:	4a24      	ldr	r2, [pc, #144]	; (800ed08 <chk_lock+0xb4>)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	4413      	add	r3, r2
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d116      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec88:	4a1f      	ldr	r2, [pc, #124]	; (800ed08 <chk_lock+0xb4>)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	4413      	add	r3, r2
 800ec90:	3304      	adds	r3, #4
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d10c      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec9c:	4a1a      	ldr	r2, [pc, #104]	; (800ed08 <chk_lock+0xb4>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4413      	add	r3, r2
 800eca4:	3308      	adds	r3, #8
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d102      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ecb0:	e007      	b.n	800ecc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	60fb      	str	r3, [r7, #12]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d9d2      	bls.n	800ec68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d109      	bne.n	800ecdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d102      	bne.n	800ecd4 <chk_lock+0x80>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	d101      	bne.n	800ecd8 <chk_lock+0x84>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e010      	b.n	800ecfa <chk_lock+0xa6>
 800ecd8:	2312      	movs	r3, #18
 800ecda:	e00e      	b.n	800ecfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d108      	bne.n	800ecf4 <chk_lock+0xa0>
 800ece2:	4a09      	ldr	r2, [pc, #36]	; (800ed08 <chk_lock+0xb4>)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	011b      	lsls	r3, r3, #4
 800ece8:	4413      	add	r3, r2
 800ecea:	330c      	adds	r3, #12
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecf2:	d101      	bne.n	800ecf8 <chk_lock+0xa4>
 800ecf4:	2310      	movs	r3, #16
 800ecf6:	e000      	b.n	800ecfa <chk_lock+0xa6>
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	200002ec 	.word	0x200002ec

0800ed0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed12:	2300      	movs	r3, #0
 800ed14:	607b      	str	r3, [r7, #4]
 800ed16:	e002      	b.n	800ed1e <enq_lock+0x12>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	607b      	str	r3, [r7, #4]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d806      	bhi.n	800ed32 <enq_lock+0x26>
 800ed24:	4a09      	ldr	r2, [pc, #36]	; (800ed4c <enq_lock+0x40>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	011b      	lsls	r3, r3, #4
 800ed2a:	4413      	add	r3, r2
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1f2      	bne.n	800ed18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	bf14      	ite	ne
 800ed38:	2301      	movne	r3, #1
 800ed3a:	2300      	moveq	r3, #0
 800ed3c:	b2db      	uxtb	r3, r3
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	200002ec 	.word	0x200002ec

0800ed50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e01f      	b.n	800eda0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed60:	4a41      	ldr	r2, [pc, #260]	; (800ee68 <inc_lock+0x118>)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	4413      	add	r3, r2
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d113      	bne.n	800ed9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ed72:	4a3d      	ldr	r2, [pc, #244]	; (800ee68 <inc_lock+0x118>)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	011b      	lsls	r3, r3, #4
 800ed78:	4413      	add	r3, r2
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d109      	bne.n	800ed9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed86:	4a38      	ldr	r2, [pc, #224]	; (800ee68 <inc_lock+0x118>)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	011b      	lsls	r3, r3, #4
 800ed8c:	4413      	add	r3, r2
 800ed8e:	3308      	adds	r3, #8
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d006      	beq.n	800eda8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d9dc      	bls.n	800ed60 <inc_lock+0x10>
 800eda6:	e000      	b.n	800edaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eda8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b02      	cmp	r3, #2
 800edae:	d132      	bne.n	800ee16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800edb0:	2300      	movs	r3, #0
 800edb2:	60fb      	str	r3, [r7, #12]
 800edb4:	e002      	b.n	800edbc <inc_lock+0x6c>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d806      	bhi.n	800edd0 <inc_lock+0x80>
 800edc2:	4a29      	ldr	r2, [pc, #164]	; (800ee68 <inc_lock+0x118>)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	011b      	lsls	r3, r3, #4
 800edc8:	4413      	add	r3, r2
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f2      	bne.n	800edb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d101      	bne.n	800edda <inc_lock+0x8a>
 800edd6:	2300      	movs	r3, #0
 800edd8:	e040      	b.n	800ee5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4922      	ldr	r1, [pc, #136]	; (800ee68 <inc_lock+0x118>)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	011b      	lsls	r3, r3, #4
 800ede4:	440b      	add	r3, r1
 800ede6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689a      	ldr	r2, [r3, #8]
 800edec:	491e      	ldr	r1, [pc, #120]	; (800ee68 <inc_lock+0x118>)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	011b      	lsls	r3, r3, #4
 800edf2:	440b      	add	r3, r1
 800edf4:	3304      	adds	r3, #4
 800edf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	695a      	ldr	r2, [r3, #20]
 800edfc:	491a      	ldr	r1, [pc, #104]	; (800ee68 <inc_lock+0x118>)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	440b      	add	r3, r1
 800ee04:	3308      	adds	r3, #8
 800ee06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ee08:	4a17      	ldr	r2, [pc, #92]	; (800ee68 <inc_lock+0x118>)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	011b      	lsls	r3, r3, #4
 800ee0e:	4413      	add	r3, r2
 800ee10:	330c      	adds	r3, #12
 800ee12:	2200      	movs	r2, #0
 800ee14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d009      	beq.n	800ee30 <inc_lock+0xe0>
 800ee1c:	4a12      	ldr	r2, [pc, #72]	; (800ee68 <inc_lock+0x118>)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	011b      	lsls	r3, r3, #4
 800ee22:	4413      	add	r3, r2
 800ee24:	330c      	adds	r3, #12
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <inc_lock+0xe0>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e015      	b.n	800ee5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d108      	bne.n	800ee48 <inc_lock+0xf8>
 800ee36:	4a0c      	ldr	r2, [pc, #48]	; (800ee68 <inc_lock+0x118>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	011b      	lsls	r3, r3, #4
 800ee3c:	4413      	add	r3, r2
 800ee3e:	330c      	adds	r3, #12
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	3301      	adds	r3, #1
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	e001      	b.n	800ee4c <inc_lock+0xfc>
 800ee48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee4c:	4906      	ldr	r1, [pc, #24]	; (800ee68 <inc_lock+0x118>)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	011b      	lsls	r3, r3, #4
 800ee52:	440b      	add	r3, r1
 800ee54:	330c      	adds	r3, #12
 800ee56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3301      	adds	r3, #1
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	200002ec 	.word	0x200002ec

0800ee6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d825      	bhi.n	800eecc <dec_lock+0x60>
		n = Files[i].ctr;
 800ee80:	4a17      	ldr	r2, [pc, #92]	; (800eee0 <dec_lock+0x74>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	011b      	lsls	r3, r3, #4
 800ee86:	4413      	add	r3, r2
 800ee88:	330c      	adds	r3, #12
 800ee8a:	881b      	ldrh	r3, [r3, #0]
 800ee8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee8e:	89fb      	ldrh	r3, [r7, #14]
 800ee90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee94:	d101      	bne.n	800ee9a <dec_lock+0x2e>
 800ee96:	2300      	movs	r3, #0
 800ee98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee9a:	89fb      	ldrh	r3, [r7, #14]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <dec_lock+0x3a>
 800eea0:	89fb      	ldrh	r3, [r7, #14]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800eea6:	4a0e      	ldr	r2, [pc, #56]	; (800eee0 <dec_lock+0x74>)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	011b      	lsls	r3, r3, #4
 800eeac:	4413      	add	r3, r2
 800eeae:	330c      	adds	r3, #12
 800eeb0:	89fa      	ldrh	r2, [r7, #14]
 800eeb2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800eeb4:	89fb      	ldrh	r3, [r7, #14]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d105      	bne.n	800eec6 <dec_lock+0x5a>
 800eeba:	4a09      	ldr	r2, [pc, #36]	; (800eee0 <dec_lock+0x74>)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	4413      	add	r3, r2
 800eec2:	2200      	movs	r2, #0
 800eec4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	737b      	strb	r3, [r7, #13]
 800eeca:	e001      	b.n	800eed0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eecc:	2302      	movs	r3, #2
 800eece:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eed0:	7b7b      	ldrb	r3, [r7, #13]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3714      	adds	r7, #20
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	200002ec 	.word	0x200002ec

0800eee4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e010      	b.n	800ef14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eef2:	4a0d      	ldr	r2, [pc, #52]	; (800ef28 <clear_lock+0x44>)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	4413      	add	r3, r2
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d105      	bne.n	800ef0e <clear_lock+0x2a>
 800ef02:	4a09      	ldr	r2, [pc, #36]	; (800ef28 <clear_lock+0x44>)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	4413      	add	r3, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3301      	adds	r3, #1
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d9eb      	bls.n	800eef2 <clear_lock+0xe>
	}
}
 800ef1a:	bf00      	nop
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	200002ec 	.word	0x200002ec

0800ef2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	78db      	ldrb	r3, [r3, #3]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d034      	beq.n	800efaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7858      	ldrb	r0, [r3, #1]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef50:	2301      	movs	r3, #1
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	f7ff fd10 	bl	800e978 <disk_write>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	73fb      	strb	r3, [r7, #15]
 800ef62:	e022      	b.n	800efaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	1ad2      	subs	r2, r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d217      	bcs.n	800efaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	789b      	ldrb	r3, [r3, #2]
 800ef7e:	613b      	str	r3, [r7, #16]
 800ef80:	e010      	b.n	800efa4 <sync_window+0x78>
					wsect += fs->fsize;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	4413      	add	r3, r2
 800ef8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7858      	ldrb	r0, [r3, #1]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef96:	2301      	movs	r3, #1
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	f7ff fced 	bl	800e978 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	613b      	str	r3, [r7, #16]
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d8eb      	bhi.n	800ef82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800efaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d01b      	beq.n	800f004 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff ffad 	bl	800ef2c <sync_window>
 800efd2:	4603      	mov	r3, r0
 800efd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d113      	bne.n	800f004 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7858      	ldrb	r0, [r3, #1]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800efe6:	2301      	movs	r3, #1
 800efe8:	683a      	ldr	r2, [r7, #0]
 800efea:	f7ff fca5 	bl	800e938 <disk_read>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eff4:	f04f 33ff 	mov.w	r3, #4294967295
 800eff8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800effa:	2301      	movs	r3, #1
 800effc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f004:	7bfb      	ldrb	r3, [r7, #15]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
	...

0800f010 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff ff87 	bl	800ef2c <sync_window>
 800f01e:	4603      	mov	r3, r0
 800f020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d158      	bne.n	800f0da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d148      	bne.n	800f0c2 <sync_fs+0xb2>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	791b      	ldrb	r3, [r3, #4]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d144      	bne.n	800f0c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3334      	adds	r3, #52	; 0x34
 800f03c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f040:	2100      	movs	r1, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fd79 	bl	800eb3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3334      	adds	r3, #52	; 0x34
 800f04c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f050:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fd08 	bl	800ea6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	3334      	adds	r3, #52	; 0x34
 800f05e:	4921      	ldr	r1, [pc, #132]	; (800f0e4 <sync_fs+0xd4>)
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff fd1d 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3334      	adds	r3, #52	; 0x34
 800f06a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f06e:	491e      	ldr	r1, [pc, #120]	; (800f0e8 <sync_fs+0xd8>)
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd15 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3334      	adds	r3, #52	; 0x34
 800f07a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	4619      	mov	r1, r3
 800f084:	4610      	mov	r0, r2
 800f086:	f7ff fd0b 	bl	800eaa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3334      	adds	r3, #52	; 0x34
 800f08e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f7ff fd01 	bl	800eaa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7858      	ldrb	r0, [r3, #1]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f7ff fc5e 	bl	800e978 <disk_write>
			fs->fsi_flag = 0;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	785b      	ldrb	r3, [r3, #1]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7ff fc74 	bl	800e9b8 <disk_ioctl>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d001      	beq.n	800f0da <sync_fs+0xca>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	41615252 	.word	0x41615252
 800f0e8:	61417272 	.word	0x61417272

0800f0ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3b02      	subs	r3, #2
 800f0fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	699b      	ldr	r3, [r3, #24]
 800f100:	3b02      	subs	r3, #2
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d301      	bcc.n	800f10c <clust2sect+0x20>
 800f108:	2300      	movs	r3, #0
 800f10a:	e008      	b.n	800f11e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	895b      	ldrh	r3, [r3, #10]
 800f110:	461a      	mov	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	fb03 f202 	mul.w	r2, r3, r2
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11c:	4413      	add	r3, r2
}
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d904      	bls.n	800f14a <get_fat+0x20>
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	699b      	ldr	r3, [r3, #24]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d302      	bcc.n	800f150 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f14a:	2301      	movs	r3, #1
 800f14c:	617b      	str	r3, [r7, #20]
 800f14e:	e08c      	b.n	800f26a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b02      	cmp	r3, #2
 800f15c:	d045      	beq.n	800f1ea <get_fat+0xc0>
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d05d      	beq.n	800f21e <get_fat+0xf4>
 800f162:	2b01      	cmp	r3, #1
 800f164:	d177      	bne.n	800f256 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	085b      	lsrs	r3, r3, #1
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	4413      	add	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	0a5b      	lsrs	r3, r3, #9
 800f17c:	4413      	add	r3, r2
 800f17e:	4619      	mov	r1, r3
 800f180:	6938      	ldr	r0, [r7, #16]
 800f182:	f7ff ff17 	bl	800efb4 <move_window>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d167      	bne.n	800f25c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	60fa      	str	r2, [r7, #12]
 800f192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f196:	693a      	ldr	r2, [r7, #16]
 800f198:	4413      	add	r3, r2
 800f19a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f19e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	0a5b      	lsrs	r3, r3, #9
 800f1a8:	4413      	add	r3, r2
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6938      	ldr	r0, [r7, #16]
 800f1ae:	f7ff ff01 	bl	800efb4 <move_window>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d153      	bne.n	800f260 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1c6:	021b      	lsls	r3, r3, #8
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d002      	beq.n	800f1e0 <get_fat+0xb6>
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	091b      	lsrs	r3, r3, #4
 800f1de:	e002      	b.n	800f1e6 <get_fat+0xbc>
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1e6:	617b      	str	r3, [r7, #20]
			break;
 800f1e8:	e03f      	b.n	800f26a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	0a1b      	lsrs	r3, r3, #8
 800f1f2:	4413      	add	r3, r2
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6938      	ldr	r0, [r7, #16]
 800f1f8:	f7ff fedc 	bl	800efb4 <move_window>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d130      	bne.n	800f264 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f210:	4413      	add	r3, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fbee 	bl	800e9f4 <ld_word>
 800f218:	4603      	mov	r3, r0
 800f21a:	617b      	str	r3, [r7, #20]
			break;
 800f21c:	e025      	b.n	800f26a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	09db      	lsrs	r3, r3, #7
 800f226:	4413      	add	r3, r2
 800f228:	4619      	mov	r1, r3
 800f22a:	6938      	ldr	r0, [r7, #16]
 800f22c:	f7ff fec2 	bl	800efb4 <move_window>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d118      	bne.n	800f268 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f244:	4413      	add	r3, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fbec 	bl	800ea24 <ld_dword>
 800f24c:	4603      	mov	r3, r0
 800f24e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f252:	617b      	str	r3, [r7, #20]
			break;
 800f254:	e009      	b.n	800f26a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f256:	2301      	movs	r3, #1
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	e006      	b.n	800f26a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f25c:	bf00      	nop
 800f25e:	e004      	b.n	800f26a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f260:	bf00      	nop
 800f262:	e002      	b.n	800f26a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f264:	bf00      	nop
 800f266:	e000      	b.n	800f26a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f268:	bf00      	nop
		}
	}

	return val;
 800f26a:	697b      	ldr	r3, [r7, #20]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f274:	b590      	push	{r4, r7, lr}
 800f276:	b089      	sub	sp, #36	; 0x24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f280:	2302      	movs	r3, #2
 800f282:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2b01      	cmp	r3, #1
 800f288:	f240 80d6 	bls.w	800f438 <put_fat+0x1c4>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	429a      	cmp	r2, r3
 800f294:	f080 80d0 	bcs.w	800f438 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d073      	beq.n	800f388 <put_fat+0x114>
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	f000 8091 	beq.w	800f3c8 <put_fat+0x154>
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	f040 80c6 	bne.w	800f438 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	61bb      	str	r3, [r7, #24]
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	085b      	lsrs	r3, r3, #1
 800f2b4:	69ba      	ldr	r2, [r7, #24]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	0a5b      	lsrs	r3, r3, #9
 800f2c2:	4413      	add	r3, r2
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fe74 	bl	800efb4 <move_window>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2d0:	7ffb      	ldrb	r3, [r7, #31]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f040 80a9 	bne.w	800f42a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	1c59      	adds	r1, r3, #1
 800f2e2:	61b9      	str	r1, [r7, #24]
 800f2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e8:	4413      	add	r3, r2
 800f2ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00d      	beq.n	800f312 <put_fat+0x9e>
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	b25b      	sxtb	r3, r3
 800f2fc:	f003 030f 	and.w	r3, r3, #15
 800f300:	b25a      	sxtb	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	b2db      	uxtb	r3, r3
 800f306:	011b      	lsls	r3, r3, #4
 800f308:	b25b      	sxtb	r3, r3
 800f30a:	4313      	orrs	r3, r2
 800f30c:	b25b      	sxtb	r3, r3
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	e001      	b.n	800f316 <put_fat+0xa2>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	b2db      	uxtb	r3, r3
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	0a5b      	lsrs	r3, r3, #9
 800f328:	4413      	add	r3, r2
 800f32a:	4619      	mov	r1, r3
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fe41 	bl	800efb4 <move_window>
 800f332:	4603      	mov	r3, r0
 800f334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f336:	7ffb      	ldrb	r3, [r7, #31]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d178      	bne.n	800f42e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f348:	4413      	add	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f003 0301 	and.w	r3, r3, #1
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <put_fat+0xea>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	091b      	lsrs	r3, r3, #4
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	e00e      	b.n	800f37c <put_fat+0x108>
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	b25b      	sxtb	r3, r3
 800f364:	f023 030f 	bic.w	r3, r3, #15
 800f368:	b25a      	sxtb	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	0a1b      	lsrs	r3, r3, #8
 800f36e:	b25b      	sxtb	r3, r3
 800f370:	f003 030f 	and.w	r3, r3, #15
 800f374:	b25b      	sxtb	r3, r3
 800f376:	4313      	orrs	r3, r2
 800f378:	b25b      	sxtb	r3, r3
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2201      	movs	r2, #1
 800f384:	70da      	strb	r2, [r3, #3]
			break;
 800f386:	e057      	b.n	800f438 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	0a1b      	lsrs	r3, r3, #8
 800f390:	4413      	add	r3, r2
 800f392:	4619      	mov	r1, r3
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f7ff fe0d 	bl	800efb4 <move_window>
 800f39a:	4603      	mov	r3, r0
 800f39c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f39e:	7ffb      	ldrb	r3, [r7, #31]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d146      	bne.n	800f432 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f3b2:	4413      	add	r3, r2
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	b292      	uxth	r2, r2
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7ff fb55 	bl	800ea6a <st_word>
			fs->wflag = 1;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	70da      	strb	r2, [r3, #3]
			break;
 800f3c6:	e037      	b.n	800f438 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	09db      	lsrs	r3, r3, #7
 800f3d0:	4413      	add	r3, r2
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f7ff fded 	bl	800efb4 <move_window>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3de:	7ffb      	ldrb	r3, [r7, #31]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d128      	bne.n	800f436 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3f8:	4413      	add	r3, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7ff fb12 	bl	800ea24 <ld_dword>
 800f400:	4603      	mov	r3, r0
 800f402:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f406:	4323      	orrs	r3, r4
 800f408:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f418:	4413      	add	r3, r2
 800f41a:	6879      	ldr	r1, [r7, #4]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff fb3f 	bl	800eaa0 <st_dword>
			fs->wflag = 1;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2201      	movs	r2, #1
 800f426:	70da      	strb	r2, [r3, #3]
			break;
 800f428:	e006      	b.n	800f438 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f42a:	bf00      	nop
 800f42c:	e004      	b.n	800f438 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f42e:	bf00      	nop
 800f430:	e002      	b.n	800f438 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f432:	bf00      	nop
 800f434:	e000      	b.n	800f438 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f436:	bf00      	nop
		}
	}
	return res;
 800f438:	7ffb      	ldrb	r3, [r7, #31]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3724      	adds	r7, #36	; 0x24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd90      	pop	{r4, r7, pc}

0800f442 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b088      	sub	sp, #32
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d904      	bls.n	800f468 <remove_chain+0x26>
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	699b      	ldr	r3, [r3, #24]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	429a      	cmp	r2, r3
 800f466:	d301      	bcc.n	800f46c <remove_chain+0x2a>
 800f468:	2302      	movs	r3, #2
 800f46a:	e04b      	b.n	800f504 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00c      	beq.n	800f48c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f472:	f04f 32ff 	mov.w	r2, #4294967295
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	69b8      	ldr	r0, [r7, #24]
 800f47a:	f7ff fefb 	bl	800f274 <put_fat>
 800f47e:	4603      	mov	r3, r0
 800f480:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f482:	7ffb      	ldrb	r3, [r7, #31]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <remove_chain+0x4a>
 800f488:	7ffb      	ldrb	r3, [r7, #31]
 800f48a:	e03b      	b.n	800f504 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f48c:	68b9      	ldr	r1, [r7, #8]
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fe4b 	bl	800f12a <get_fat>
 800f494:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d031      	beq.n	800f500 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d101      	bne.n	800f4a6 <remove_chain+0x64>
 800f4a2:	2302      	movs	r3, #2
 800f4a4:	e02e      	b.n	800f504 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ac:	d101      	bne.n	800f4b2 <remove_chain+0x70>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e028      	b.n	800f504 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	68b9      	ldr	r1, [r7, #8]
 800f4b6:	69b8      	ldr	r0, [r7, #24]
 800f4b8:	f7ff fedc 	bl	800f274 <put_fat>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f4c0:	7ffb      	ldrb	r3, [r7, #31]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <remove_chain+0x88>
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
 800f4c8:	e01c      	b.n	800f504 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	695a      	ldr	r2, [r3, #20]
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	3b02      	subs	r3, #2
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d20b      	bcs.n	800f4f0 <remove_chain+0xae>
			fs->free_clst++;
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	695b      	ldr	r3, [r3, #20]
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	791b      	ldrb	r3, [r3, #4]
 800f4e6:	f043 0301 	orr.w	r3, r3, #1
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d3c6      	bcc.n	800f48c <remove_chain+0x4a>
 800f4fe:	e000      	b.n	800f502 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f500:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3720      	adds	r7, #32
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10d      	bne.n	800f53e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d004      	beq.n	800f538 <create_chain+0x2c>
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	699b      	ldr	r3, [r3, #24]
 800f532:	69ba      	ldr	r2, [r7, #24]
 800f534:	429a      	cmp	r2, r3
 800f536:	d31b      	bcc.n	800f570 <create_chain+0x64>
 800f538:	2301      	movs	r3, #1
 800f53a:	61bb      	str	r3, [r7, #24]
 800f53c:	e018      	b.n	800f570 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7ff fdf2 	bl	800f12a <get_fat>
 800f546:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d801      	bhi.n	800f552 <create_chain+0x46>
 800f54e:	2301      	movs	r3, #1
 800f550:	e070      	b.n	800f634 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f558:	d101      	bne.n	800f55e <create_chain+0x52>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	e06a      	b.n	800f634 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	699b      	ldr	r3, [r3, #24]
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	429a      	cmp	r2, r3
 800f566:	d201      	bcs.n	800f56c <create_chain+0x60>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	e063      	b.n	800f634 <create_chain+0x128>
		scl = clst;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	3301      	adds	r3, #1
 800f578:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	699b      	ldr	r3, [r3, #24]
 800f57e:	69fa      	ldr	r2, [r7, #28]
 800f580:	429a      	cmp	r2, r3
 800f582:	d307      	bcc.n	800f594 <create_chain+0x88>
				ncl = 2;
 800f584:	2302      	movs	r3, #2
 800f586:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f588:	69fa      	ldr	r2, [r7, #28]
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d901      	bls.n	800f594 <create_chain+0x88>
 800f590:	2300      	movs	r3, #0
 800f592:	e04f      	b.n	800f634 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f594:	69f9      	ldr	r1, [r7, #28]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff fdc7 	bl	800f12a <get_fat>
 800f59c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00e      	beq.n	800f5c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d003      	beq.n	800f5b2 <create_chain+0xa6>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b0:	d101      	bne.n	800f5b6 <create_chain+0xaa>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	e03e      	b.n	800f634 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f5b6:	69fa      	ldr	r2, [r7, #28]
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d1da      	bne.n	800f574 <create_chain+0x68>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e038      	b.n	800f634 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f5c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c8:	69f9      	ldr	r1, [r7, #28]
 800f5ca:	6938      	ldr	r0, [r7, #16]
 800f5cc:	f7ff fe52 	bl	800f274 <put_fat>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d109      	bne.n	800f5ee <create_chain+0xe2>
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d006      	beq.n	800f5ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5e0:	69fa      	ldr	r2, [r7, #28]
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	6938      	ldr	r0, [r7, #16]
 800f5e6:	f7ff fe45 	bl	800f274 <put_fat>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d116      	bne.n	800f622 <create_chain+0x116>
		fs->last_clst = ncl;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	69fa      	ldr	r2, [r7, #28]
 800f5f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	695a      	ldr	r2, [r3, #20]
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	699b      	ldr	r3, [r3, #24]
 800f602:	3b02      	subs	r3, #2
 800f604:	429a      	cmp	r2, r3
 800f606:	d804      	bhi.n	800f612 <create_chain+0x106>
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	1e5a      	subs	r2, r3, #1
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	791b      	ldrb	r3, [r3, #4]
 800f616:	f043 0301 	orr.w	r3, r3, #1
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	711a      	strb	r2, [r3, #4]
 800f620:	e007      	b.n	800f632 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d102      	bne.n	800f62e <create_chain+0x122>
 800f628:	f04f 33ff 	mov.w	r3, #4294967295
 800f62c:	e000      	b.n	800f630 <create_chain+0x124>
 800f62e:	2301      	movs	r3, #1
 800f630:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f632:	69fb      	ldr	r3, [r7, #28]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b087      	sub	sp, #28
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	3304      	adds	r3, #4
 800f652:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	0a5b      	lsrs	r3, r3, #9
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	8952      	ldrh	r2, [r2, #10]
 800f65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f660:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	1d1a      	adds	r2, r3, #4
 800f666:	613a      	str	r2, [r7, #16]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d101      	bne.n	800f676 <clmt_clust+0x3a>
 800f672:	2300      	movs	r3, #0
 800f674:	e010      	b.n	800f698 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d307      	bcc.n	800f68e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	3304      	adds	r3, #4
 800f68a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f68c:	e7e9      	b.n	800f662 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f68e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	4413      	add	r3, r2
}
 800f698:	4618      	mov	r0, r3
 800f69a:	371c      	adds	r7, #28
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6ba:	d204      	bcs.n	800f6c6 <dir_sdi+0x22>
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	f003 031f 	and.w	r3, r3, #31
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e063      	b.n	800f792 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d106      	bne.n	800f6ea <dir_sdi+0x46>
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d902      	bls.n	800f6ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10c      	bne.n	800f70a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	095b      	lsrs	r3, r3, #5
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	8912      	ldrh	r2, [r2, #8]
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d301      	bcc.n	800f700 <dir_sdi+0x5c>
 800f6fc:	2302      	movs	r3, #2
 800f6fe:	e048      	b.n	800f792 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	61da      	str	r2, [r3, #28]
 800f708:	e029      	b.n	800f75e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	895b      	ldrh	r3, [r3, #10]
 800f70e:	025b      	lsls	r3, r3, #9
 800f710:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f712:	e019      	b.n	800f748 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6979      	ldr	r1, [r7, #20]
 800f718:	4618      	mov	r0, r3
 800f71a:	f7ff fd06 	bl	800f12a <get_fat>
 800f71e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f726:	d101      	bne.n	800f72c <dir_sdi+0x88>
 800f728:	2301      	movs	r3, #1
 800f72a:	e032      	b.n	800f792 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d904      	bls.n	800f73c <dir_sdi+0x98>
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d301      	bcc.n	800f740 <dir_sdi+0x9c>
 800f73c:	2302      	movs	r3, #2
 800f73e:	e028      	b.n	800f792 <dir_sdi+0xee>
			ofs -= csz;
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d2e1      	bcs.n	800f714 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f750:	6979      	ldr	r1, [r7, #20]
 800f752:	6938      	ldr	r0, [r7, #16]
 800f754:	f7ff fcca 	bl	800f0ec <clust2sect>
 800f758:	4602      	mov	r2, r0
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <dir_sdi+0xcc>
 800f76c:	2302      	movs	r3, #2
 800f76e:	e010      	b.n	800f792 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	69da      	ldr	r2, [r3, #28]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	0a5b      	lsrs	r3, r3, #9
 800f778:	441a      	add	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f78a:	441a      	add	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3718      	adds	r7, #24
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b086      	sub	sp, #24
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
 800f7a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	3320      	adds	r3, #32
 800f7b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	69db      	ldr	r3, [r3, #28]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <dir_next+0x28>
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f7c0:	d301      	bcc.n	800f7c6 <dir_next+0x2c>
 800f7c2:	2304      	movs	r3, #4
 800f7c4:	e0aa      	b.n	800f91c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f040 8098 	bne.w	800f902 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d10b      	bne.n	800f7fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	095b      	lsrs	r3, r3, #5
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	8912      	ldrh	r2, [r2, #8]
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	f0c0 8088 	bcc.w	800f902 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	61da      	str	r2, [r3, #28]
 800f7f8:	2304      	movs	r3, #4
 800f7fa:	e08f      	b.n	800f91c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	0a5b      	lsrs	r3, r3, #9
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	8952      	ldrh	r2, [r2, #10]
 800f804:	3a01      	subs	r2, #1
 800f806:	4013      	ands	r3, r2
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d17a      	bne.n	800f902 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	4619      	mov	r1, r3
 800f814:	4610      	mov	r0, r2
 800f816:	f7ff fc88 	bl	800f12a <get_fat>
 800f81a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d801      	bhi.n	800f826 <dir_next+0x8c>
 800f822:	2302      	movs	r3, #2
 800f824:	e07a      	b.n	800f91c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f82c:	d101      	bne.n	800f832 <dir_next+0x98>
 800f82e:	2301      	movs	r3, #1
 800f830:	e074      	b.n	800f91c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	699b      	ldr	r3, [r3, #24]
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d358      	bcc.n	800f8ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d104      	bne.n	800f84c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	61da      	str	r2, [r3, #28]
 800f848:	2304      	movs	r3, #4
 800f84a:	e067      	b.n	800f91c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	4619      	mov	r1, r3
 800f854:	4610      	mov	r0, r2
 800f856:	f7ff fe59 	bl	800f50c <create_chain>
 800f85a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <dir_next+0xcc>
 800f862:	2307      	movs	r3, #7
 800f864:	e05a      	b.n	800f91c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d101      	bne.n	800f870 <dir_next+0xd6>
 800f86c:	2302      	movs	r3, #2
 800f86e:	e055      	b.n	800f91c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f876:	d101      	bne.n	800f87c <dir_next+0xe2>
 800f878:	2301      	movs	r3, #1
 800f87a:	e04f      	b.n	800f91c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	f7ff fb55 	bl	800ef2c <sync_window>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <dir_next+0xf2>
 800f888:	2301      	movs	r3, #1
 800f88a:	e047      	b.n	800f91c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	3334      	adds	r3, #52	; 0x34
 800f890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f894:	2100      	movs	r1, #0
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff f94f 	bl	800eb3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f89c:	2300      	movs	r3, #0
 800f89e:	613b      	str	r3, [r7, #16]
 800f8a0:	6979      	ldr	r1, [r7, #20]
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f7ff fc22 	bl	800f0ec <clust2sect>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	631a      	str	r2, [r3, #48]	; 0x30
 800f8ae:	e012      	b.n	800f8d6 <dir_next+0x13c>
						fs->wflag = 1;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f7ff fb38 	bl	800ef2c <sync_window>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <dir_next+0x12c>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e02a      	b.n	800f91c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	613b      	str	r3, [r7, #16]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	631a      	str	r2, [r3, #48]	; 0x30
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	895b      	ldrh	r3, [r3, #10]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d3e6      	bcc.n	800f8b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	1ad2      	subs	r2, r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8f4:	6979      	ldr	r1, [r7, #20]
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7ff fbf8 	bl	800f0ec <clust2sect>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f914:	441a      	add	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f934:	2100      	movs	r1, #0
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7ff feb4 	bl	800f6a4 <dir_sdi>
 800f93c:	4603      	mov	r3, r0
 800f93e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d12b      	bne.n	800f99e <dir_alloc+0x7a>
		n = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	4619      	mov	r1, r3
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f7ff fb2f 	bl	800efb4 <move_window>
 800f956:	4603      	mov	r3, r0
 800f958:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f95a:	7dfb      	ldrb	r3, [r7, #23]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d11d      	bne.n	800f99c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	2be5      	cmp	r3, #229	; 0xe5
 800f968:	d004      	beq.n	800f974 <dir_alloc+0x50>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d107      	bne.n	800f984 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	3301      	adds	r3, #1
 800f978:	613b      	str	r3, [r7, #16]
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d102      	bne.n	800f988 <dir_alloc+0x64>
 800f982:	e00c      	b.n	800f99e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f984:	2300      	movs	r3, #0
 800f986:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f988:	2101      	movs	r1, #1
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff ff05 	bl	800f79a <dir_next>
 800f990:	4603      	mov	r3, r0
 800f992:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f994:	7dfb      	ldrb	r3, [r7, #23]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d0d7      	beq.n	800f94a <dir_alloc+0x26>
 800f99a:	e000      	b.n	800f99e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f99c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	2b04      	cmp	r3, #4
 800f9a2:	d101      	bne.n	800f9a8 <dir_alloc+0x84>
 800f9a4:	2307      	movs	r3, #7
 800f9a6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3718      	adds	r7, #24
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f9b2:	b580      	push	{r7, lr}
 800f9b4:	b084      	sub	sp, #16
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
 800f9ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	331a      	adds	r3, #26
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff f817 	bl	800e9f4 <ld_word>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	d109      	bne.n	800f9e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	3314      	adds	r3, #20
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff f80c 	bl	800e9f4 <ld_word>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	041b      	lsls	r3, r3, #16
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	331a      	adds	r3, #26
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	b292      	uxth	r2, r2
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7ff f82f 	bl	800ea6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b03      	cmp	r3, #3
 800fa12:	d109      	bne.n	800fa28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	f103 0214 	add.w	r2, r3, #20
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	0c1b      	lsrs	r3, r3, #16
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	4619      	mov	r1, r3
 800fa22:	4610      	mov	r0, r2
 800fa24:	f7ff f821 	bl	800ea6a <st_word>
	}
}
 800fa28:	bf00      	nop
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fa3a:	2304      	movs	r3, #4
 800fa3c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fa44:	e03c      	b.n	800fac0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	6938      	ldr	r0, [r7, #16]
 800fa4e:	f7ff fab1 	bl	800efb4 <move_window>
 800fa52:	4603      	mov	r3, r0
 800fa54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d136      	bne.n	800faca <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a1b      	ldr	r3, [r3, #32]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d102      	bne.n	800fa70 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fa6a:	2304      	movs	r3, #4
 800fa6c:	75fb      	strb	r3, [r7, #23]
 800fa6e:	e031      	b.n	800fad4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a1b      	ldr	r3, [r3, #32]
 800fa74:	330b      	adds	r3, #11
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa7c:	73bb      	strb	r3, [r7, #14]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	7bba      	ldrb	r2, [r7, #14]
 800fa82:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fa84:	7bfb      	ldrb	r3, [r7, #15]
 800fa86:	2be5      	cmp	r3, #229	; 0xe5
 800fa88:	d011      	beq.n	800faae <dir_read+0x7e>
 800fa8a:	7bfb      	ldrb	r3, [r7, #15]
 800fa8c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa8e:	d00e      	beq.n	800faae <dir_read+0x7e>
 800fa90:	7bbb      	ldrb	r3, [r7, #14]
 800fa92:	2b0f      	cmp	r3, #15
 800fa94:	d00b      	beq.n	800faae <dir_read+0x7e>
 800fa96:	7bbb      	ldrb	r3, [r7, #14]
 800fa98:	f023 0320 	bic.w	r3, r3, #32
 800fa9c:	2b08      	cmp	r3, #8
 800fa9e:	bf0c      	ite	eq
 800faa0:	2301      	moveq	r3, #1
 800faa2:	2300      	movne	r3, #0
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	461a      	mov	r2, r3
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	4293      	cmp	r3, r2
 800faac:	d00f      	beq.n	800face <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800faae:	2100      	movs	r1, #0
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f7ff fe72 	bl	800f79a <dir_next>
 800fab6:	4603      	mov	r3, r0
 800fab8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d108      	bne.n	800fad2 <dir_read+0xa2>
	while (dp->sect) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	69db      	ldr	r3, [r3, #28]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1be      	bne.n	800fa46 <dir_read+0x16>
 800fac8:	e004      	b.n	800fad4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800faca:	bf00      	nop
 800facc:	e002      	b.n	800fad4 <dir_read+0xa4>
				break;
 800face:	bf00      	nop
 800fad0:	e000      	b.n	800fad4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fad2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d002      	beq.n	800fae0 <dir_read+0xb0>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	61da      	str	r2, [r3, #28]
	return res;
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b086      	sub	sp, #24
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800faf8:	2100      	movs	r1, #0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7ff fdd2 	bl	800f6a4 <dir_sdi>
 800fb00:	4603      	mov	r3, r0
 800fb02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fb04:	7dfb      	ldrb	r3, [r7, #23]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d001      	beq.n	800fb0e <dir_find+0x24>
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	e03e      	b.n	800fb8c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	4619      	mov	r1, r3
 800fb14:	6938      	ldr	r0, [r7, #16]
 800fb16:	f7ff fa4d 	bl	800efb4 <move_window>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d12f      	bne.n	800fb84 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a1b      	ldr	r3, [r3, #32]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d102      	bne.n	800fb38 <dir_find+0x4e>
 800fb32:	2304      	movs	r3, #4
 800fb34:	75fb      	strb	r3, [r7, #23]
 800fb36:	e028      	b.n	800fb8a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	330b      	adds	r3, #11
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	330b      	adds	r3, #11
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f003 0308 	and.w	r3, r3, #8
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <dir_find+0x86>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a18      	ldr	r0, [r3, #32]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	3324      	adds	r3, #36	; 0x24
 800fb62:	220b      	movs	r2, #11
 800fb64:	4619      	mov	r1, r3
 800fb66:	f7ff f802 	bl	800eb6e <mem_cmp>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00b      	beq.n	800fb88 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb70:	2100      	movs	r1, #0
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7ff fe11 	bl	800f79a <dir_next>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb7c:	7dfb      	ldrb	r3, [r7, #23]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d0c5      	beq.n	800fb0e <dir_find+0x24>
 800fb82:	e002      	b.n	800fb8a <dir_find+0xa0>
		if (res != FR_OK) break;
 800fb84:	bf00      	nop
 800fb86:	e000      	b.n	800fb8a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb88:	bf00      	nop

	return res;
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fba2:	2101      	movs	r1, #1
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7ff febd 	bl	800f924 <dir_alloc>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d11c      	bne.n	800fbee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	69db      	ldr	r3, [r3, #28]
 800fbb8:	4619      	mov	r1, r3
 800fbba:	68b8      	ldr	r0, [r7, #8]
 800fbbc:	f7ff f9fa 	bl	800efb4 <move_window>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fbc4:	7bfb      	ldrb	r3, [r7, #15]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d111      	bne.n	800fbee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a1b      	ldr	r3, [r3, #32]
 800fbce:	2220      	movs	r2, #32
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fe ffb1 	bl	800eb3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a18      	ldr	r0, [r3, #32]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3324      	adds	r3, #36	; 0x24
 800fbe0:	220b      	movs	r2, #11
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	f7fe ff88 	bl	800eaf8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2201      	movs	r2, #1
 800fbec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3710      	adds	r7, #16
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	2200      	movs	r2, #0
 800fc06:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	69db      	ldr	r3, [r3, #28]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d04e      	beq.n	800fcae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	613b      	str	r3, [r7, #16]
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fc18:	e021      	b.n	800fc5e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6a1a      	ldr	r2, [r3, #32]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	1c59      	adds	r1, r3, #1
 800fc22:	6179      	str	r1, [r7, #20]
 800fc24:	4413      	add	r3, r2
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	2b20      	cmp	r3, #32
 800fc2e:	d100      	bne.n	800fc32 <get_fileinfo+0x3a>
 800fc30:	e015      	b.n	800fc5e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
 800fc34:	2b05      	cmp	r3, #5
 800fc36:	d101      	bne.n	800fc3c <get_fileinfo+0x44>
 800fc38:	23e5      	movs	r3, #229	; 0xe5
 800fc3a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	2b09      	cmp	r3, #9
 800fc40:	d106      	bne.n	800fc50 <get_fileinfo+0x58>
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	613a      	str	r2, [r7, #16]
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	222e      	movs	r2, #46	; 0x2e
 800fc4e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	1c5a      	adds	r2, r3, #1
 800fc54:	613a      	str	r2, [r7, #16]
 800fc56:	683a      	ldr	r2, [r7, #0]
 800fc58:	4413      	add	r3, r2
 800fc5a:	7bfa      	ldrb	r2, [r7, #15]
 800fc5c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	2b0a      	cmp	r3, #10
 800fc62:	d9da      	bls.n	800fc1a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	4413      	add	r3, r2
 800fc6a:	3309      	adds	r3, #9
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6a1b      	ldr	r3, [r3, #32]
 800fc74:	7ada      	ldrb	r2, [r3, #11]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	331c      	adds	r3, #28
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fe fecf 	bl	800ea24 <ld_dword>
 800fc86:	4602      	mov	r2, r0
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a1b      	ldr	r3, [r3, #32]
 800fc90:	3316      	adds	r3, #22
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fe fec6 	bl	800ea24 <ld_dword>
 800fc98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	80da      	strh	r2, [r3, #6]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	0c1b      	lsrs	r3, r3, #16
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	809a      	strh	r2, [r3, #4]
 800fcac:	e000      	b.n	800fcb0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fcae:	bf00      	nop
}
 800fcb0:	3718      	adds	r7, #24
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	1c59      	adds	r1, r3, #1
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	6011      	str	r1, [r2, #0]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fcce:	89fb      	ldrh	r3, [r7, #14]
 800fcd0:	2b60      	cmp	r3, #96	; 0x60
 800fcd2:	d905      	bls.n	800fce0 <get_achar+0x28>
 800fcd4:	89fb      	ldrh	r3, [r7, #14]
 800fcd6:	2b7a      	cmp	r3, #122	; 0x7a
 800fcd8:	d802      	bhi.n	800fce0 <get_achar+0x28>
 800fcda:	89fb      	ldrh	r3, [r7, #14]
 800fcdc:	3b20      	subs	r3, #32
 800fcde:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fce0:	89fb      	ldrh	r3, [r7, #14]
 800fce2:	2b7f      	cmp	r3, #127	; 0x7f
 800fce4:	d904      	bls.n	800fcf0 <get_achar+0x38>
 800fce6:	89fb      	ldrh	r3, [r7, #14]
 800fce8:	3b80      	subs	r3, #128	; 0x80
 800fcea:	4a05      	ldr	r2, [pc, #20]	; (800fd00 <get_achar+0x48>)
 800fcec:	5cd3      	ldrb	r3, [r2, r3]
 800fcee:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800fcf0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3714      	adds	r7, #20
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	0801843c 	.word	0x0801843c

0800fd04 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08a      	sub	sp, #40	; 0x28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800fd12:	e009      	b.n	800fd28 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800fd14:	f107 0308 	add.w	r3, r7, #8
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7ff ffcd 	bl	800fcb8 <get_achar>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d101      	bne.n	800fd28 <pattern_matching+0x24>
 800fd24:	2300      	movs	r3, #0
 800fd26:	e064      	b.n	800fdf2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	1e5a      	subs	r2, r3, #1
 800fd2c:	607a      	str	r2, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1f0      	bne.n	800fd14 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d104      	bne.n	800fd44 <pattern_matching+0x40>
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <pattern_matching+0x40>
 800fd40:	2301      	movs	r3, #1
 800fd42:	e056      	b.n	800fdf2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	617b      	str	r3, [r7, #20]
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	2b3f      	cmp	r3, #63	; 0x3f
 800fd52:	d003      	beq.n	800fd5c <pattern_matching+0x58>
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b2a      	cmp	r3, #42	; 0x2a
 800fd5a:	d126      	bne.n	800fdaa <pattern_matching+0xa6>
				nm = nx = 0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	61fb      	str	r3, [r7, #28]
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	1c5a      	adds	r2, r3, #1
 800fd68:	617a      	str	r2, [r7, #20]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2b3f      	cmp	r3, #63	; 0x3f
 800fd6e:	d103      	bne.n	800fd78 <pattern_matching+0x74>
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	3301      	adds	r3, #1
 800fd74:	623b      	str	r3, [r7, #32]
 800fd76:	e001      	b.n	800fd7c <pattern_matching+0x78>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	2b3f      	cmp	r3, #63	; 0x3f
 800fd82:	d0ef      	beq.n	800fd64 <pattern_matching+0x60>
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b2a      	cmp	r3, #42	; 0x2a
 800fd8a:	d0eb      	beq.n	800fd64 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800fd8c:	6978      	ldr	r0, [r7, #20]
 800fd8e:	6939      	ldr	r1, [r7, #16]
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	6a3a      	ldr	r2, [r7, #32]
 800fd94:	f7ff ffb6 	bl	800fd04 <pattern_matching>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <pattern_matching+0x9e>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e027      	b.n	800fdf2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fda8:	e017      	b.n	800fdda <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800fdaa:	f107 0314 	add.w	r3, r7, #20
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff ff82 	bl	800fcb8 <get_achar>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800fdb8:	f107 0310 	add.w	r3, r7, #16
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7ff ff7b 	bl	800fcb8 <get_achar>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800fdc6:	8b7a      	ldrh	r2, [r7, #26]
 800fdc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d104      	bne.n	800fdd8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800fdce:	8b7b      	ldrh	r3, [r7, #26]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1bb      	bne.n	800fd4c <pattern_matching+0x48>
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e00c      	b.n	800fdf2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800fdd8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800fdda:	f107 0308 	add.w	r3, r7, #8
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff ff6a 	bl	800fcb8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <pattern_matching+0xec>
 800fdea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1a9      	bne.n	800fd44 <pattern_matching+0x40>

	return 0;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3728      	adds	r7, #40	; 0x28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b088      	sub	sp, #32
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	60fb      	str	r3, [r7, #12]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3324      	adds	r3, #36	; 0x24
 800fe10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fe12:	220b      	movs	r2, #11
 800fe14:	2120      	movs	r1, #32
 800fe16:	68b8      	ldr	r0, [r7, #8]
 800fe18:	f7fe fe8f 	bl	800eb3a <mem_set>
	si = i = 0; ni = 8;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	613b      	str	r3, [r7, #16]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	2308      	movs	r3, #8
 800fe26:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	617a      	str	r2, [r7, #20]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	4413      	add	r3, r2
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fe36:	7ffb      	ldrb	r3, [r7, #31]
 800fe38:	2b20      	cmp	r3, #32
 800fe3a:	d94e      	bls.n	800feda <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fe3c:	7ffb      	ldrb	r3, [r7, #31]
 800fe3e:	2b2f      	cmp	r3, #47	; 0x2f
 800fe40:	d006      	beq.n	800fe50 <create_name+0x54>
 800fe42:	7ffb      	ldrb	r3, [r7, #31]
 800fe44:	2b5c      	cmp	r3, #92	; 0x5c
 800fe46:	d110      	bne.n	800fe6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fe48:	e002      	b.n	800fe50 <create_name+0x54>
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	617b      	str	r3, [r7, #20]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	4413      	add	r3, r2
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2b2f      	cmp	r3, #47	; 0x2f
 800fe5a:	d0f6      	beq.n	800fe4a <create_name+0x4e>
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	4413      	add	r3, r2
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2b5c      	cmp	r3, #92	; 0x5c
 800fe66:	d0f0      	beq.n	800fe4a <create_name+0x4e>
			break;
 800fe68:	e038      	b.n	800fedc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fe6a:	7ffb      	ldrb	r3, [r7, #31]
 800fe6c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe6e:	d003      	beq.n	800fe78 <create_name+0x7c>
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d30c      	bcc.n	800fe92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	2b0b      	cmp	r3, #11
 800fe7c:	d002      	beq.n	800fe84 <create_name+0x88>
 800fe7e:	7ffb      	ldrb	r3, [r7, #31]
 800fe80:	2b2e      	cmp	r3, #46	; 0x2e
 800fe82:	d001      	beq.n	800fe88 <create_name+0x8c>
 800fe84:	2306      	movs	r3, #6
 800fe86:	e044      	b.n	800ff12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fe88:	2308      	movs	r3, #8
 800fe8a:	613b      	str	r3, [r7, #16]
 800fe8c:	230b      	movs	r3, #11
 800fe8e:	61bb      	str	r3, [r7, #24]
			continue;
 800fe90:	e022      	b.n	800fed8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fe92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	da04      	bge.n	800fea4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fe9a:	7ffb      	ldrb	r3, [r7, #31]
 800fe9c:	3b80      	subs	r3, #128	; 0x80
 800fe9e:	4a1f      	ldr	r2, [pc, #124]	; (800ff1c <create_name+0x120>)
 800fea0:	5cd3      	ldrb	r3, [r2, r3]
 800fea2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fea4:	7ffb      	ldrb	r3, [r7, #31]
 800fea6:	4619      	mov	r1, r3
 800fea8:	481d      	ldr	r0, [pc, #116]	; (800ff20 <create_name+0x124>)
 800feaa:	f7fe fe87 	bl	800ebbc <chk_chr>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <create_name+0xbc>
 800feb4:	2306      	movs	r3, #6
 800feb6:	e02c      	b.n	800ff12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800feb8:	7ffb      	ldrb	r3, [r7, #31]
 800feba:	2b60      	cmp	r3, #96	; 0x60
 800febc:	d905      	bls.n	800feca <create_name+0xce>
 800febe:	7ffb      	ldrb	r3, [r7, #31]
 800fec0:	2b7a      	cmp	r3, #122	; 0x7a
 800fec2:	d802      	bhi.n	800feca <create_name+0xce>
 800fec4:	7ffb      	ldrb	r3, [r7, #31]
 800fec6:	3b20      	subs	r3, #32
 800fec8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	1c5a      	adds	r2, r3, #1
 800fece:	613a      	str	r2, [r7, #16]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	4413      	add	r3, r2
 800fed4:	7ffa      	ldrb	r2, [r7, #31]
 800fed6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fed8:	e7a6      	b.n	800fe28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800feda:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	441a      	add	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d101      	bne.n	800fef0 <create_name+0xf4>
 800feec:	2306      	movs	r3, #6
 800feee:	e010      	b.n	800ff12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2be5      	cmp	r3, #229	; 0xe5
 800fef6:	d102      	bne.n	800fefe <create_name+0x102>
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2205      	movs	r2, #5
 800fefc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fefe:	7ffb      	ldrb	r3, [r7, #31]
 800ff00:	2b20      	cmp	r3, #32
 800ff02:	d801      	bhi.n	800ff08 <create_name+0x10c>
 800ff04:	2204      	movs	r2, #4
 800ff06:	e000      	b.n	800ff0a <create_name+0x10e>
 800ff08:	2200      	movs	r2, #0
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	330b      	adds	r3, #11
 800ff0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ff10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3720      	adds	r7, #32
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	0801843c 	.word	0x0801843c
 800ff20:	08018268 	.word	0x08018268

0800ff24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff38:	e002      	b.n	800ff40 <follow_path+0x1c>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	603b      	str	r3, [r7, #0]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	2b2f      	cmp	r3, #47	; 0x2f
 800ff46:	d0f8      	beq.n	800ff3a <follow_path+0x16>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b5c      	cmp	r3, #92	; 0x5c
 800ff4e:	d0f4      	beq.n	800ff3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	2200      	movs	r2, #0
 800ff54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b1f      	cmp	r3, #31
 800ff5c:	d80a      	bhi.n	800ff74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2280      	movs	r2, #128	; 0x80
 800ff62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ff66:	2100      	movs	r1, #0
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7ff fb9b 	bl	800f6a4 <dir_sdi>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	75fb      	strb	r3, [r7, #23]
 800ff72:	e043      	b.n	800fffc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff74:	463b      	mov	r3, r7
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff ff3f 	bl	800fdfc <create_name>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d134      	bne.n	800fff2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fdae 	bl	800faea <dir_find>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00a      	beq.n	800ffb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ffa0:	7dfb      	ldrb	r3, [r7, #23]
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d127      	bne.n	800fff6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ffa6:	7afb      	ldrb	r3, [r7, #11]
 800ffa8:	f003 0304 	and.w	r3, r3, #4
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d122      	bne.n	800fff6 <follow_path+0xd2>
 800ffb0:	2305      	movs	r3, #5
 800ffb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ffb4:	e01f      	b.n	800fff6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ffb6:	7afb      	ldrb	r3, [r7, #11]
 800ffb8:	f003 0304 	and.w	r3, r3, #4
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d11c      	bne.n	800fffa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	799b      	ldrb	r3, [r3, #6]
 800ffc4:	f003 0310 	and.w	r3, r3, #16
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ffcc:	2305      	movs	r3, #5
 800ffce:	75fb      	strb	r3, [r7, #23]
 800ffd0:	e014      	b.n	800fffc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	695b      	ldr	r3, [r3, #20]
 800ffdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffe0:	4413      	add	r3, r2
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f7ff fce4 	bl	800f9b2 <ld_clust>
 800ffea:	4602      	mov	r2, r0
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fff0:	e7c0      	b.n	800ff74 <follow_path+0x50>
			if (res != FR_OK) break;
 800fff2:	bf00      	nop
 800fff4:	e002      	b.n	800fffc <follow_path+0xd8>
				break;
 800fff6:	bf00      	nop
 800fff8:	e000      	b.n	800fffc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fffa:	bf00      	nop
			}
		}
	}

	return res;
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3718      	adds	r7, #24
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010006:	b480      	push	{r7}
 8010008:	b087      	sub	sp, #28
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801000e:	f04f 33ff 	mov.w	r3, #4294967295
 8010012:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d031      	beq.n	8010080 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	617b      	str	r3, [r7, #20]
 8010022:	e002      	b.n	801002a <get_ldnumber+0x24>
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	3301      	adds	r3, #1
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	2b20      	cmp	r3, #32
 8010030:	d903      	bls.n	801003a <get_ldnumber+0x34>
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	2b3a      	cmp	r3, #58	; 0x3a
 8010038:	d1f4      	bne.n	8010024 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	2b3a      	cmp	r3, #58	; 0x3a
 8010040:	d11c      	bne.n	801007c <get_ldnumber+0x76>
			tp = *path;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	1c5a      	adds	r2, r3, #1
 801004c:	60fa      	str	r2, [r7, #12]
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	3b30      	subs	r3, #48	; 0x30
 8010052:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2b09      	cmp	r3, #9
 8010058:	d80e      	bhi.n	8010078 <get_ldnumber+0x72>
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	429a      	cmp	r2, r3
 8010060:	d10a      	bne.n	8010078 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d107      	bne.n	8010078 <get_ldnumber+0x72>
					vol = (int)i;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	3301      	adds	r3, #1
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	697a      	ldr	r2, [r7, #20]
 8010076:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	e002      	b.n	8010082 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801007c:	2300      	movs	r3, #0
 801007e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010080:	693b      	ldr	r3, [r7, #16]
}
 8010082:	4618      	mov	r0, r3
 8010084:	371c      	adds	r7, #28
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr
	...

08010090 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	70da      	strb	r2, [r3, #3]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f04f 32ff 	mov.w	r2, #4294967295
 80100a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fe ff82 	bl	800efb4 <move_window>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <check_fs+0x2a>
 80100b6:	2304      	movs	r3, #4
 80100b8:	e038      	b.n	801012c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3334      	adds	r3, #52	; 0x34
 80100be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fe fc96 	bl	800e9f4 <ld_word>
 80100c8:	4603      	mov	r3, r0
 80100ca:	461a      	mov	r2, r3
 80100cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d001      	beq.n	80100d8 <check_fs+0x48>
 80100d4:	2303      	movs	r3, #3
 80100d6:	e029      	b.n	801012c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100de:	2be9      	cmp	r3, #233	; 0xe9
 80100e0:	d009      	beq.n	80100f6 <check_fs+0x66>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100e8:	2beb      	cmp	r3, #235	; 0xeb
 80100ea:	d11e      	bne.n	801012a <check_fs+0x9a>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80100f2:	2b90      	cmp	r3, #144	; 0x90
 80100f4:	d119      	bne.n	801012a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	3334      	adds	r3, #52	; 0x34
 80100fa:	3336      	adds	r3, #54	; 0x36
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fc91 	bl	800ea24 <ld_dword>
 8010102:	4603      	mov	r3, r0
 8010104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010108:	4a0a      	ldr	r2, [pc, #40]	; (8010134 <check_fs+0xa4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d101      	bne.n	8010112 <check_fs+0x82>
 801010e:	2300      	movs	r3, #0
 8010110:	e00c      	b.n	801012c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	3334      	adds	r3, #52	; 0x34
 8010116:	3352      	adds	r3, #82	; 0x52
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe fc83 	bl	800ea24 <ld_dword>
 801011e:	4602      	mov	r2, r0
 8010120:	4b05      	ldr	r3, [pc, #20]	; (8010138 <check_fs+0xa8>)
 8010122:	429a      	cmp	r2, r3
 8010124:	d101      	bne.n	801012a <check_fs+0x9a>
 8010126:	2300      	movs	r3, #0
 8010128:	e000      	b.n	801012c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801012a:	2302      	movs	r3, #2
}
 801012c:	4618      	mov	r0, r3
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	00544146 	.word	0x00544146
 8010138:	33544146 	.word	0x33544146

0801013c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b096      	sub	sp, #88	; 0x58
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	4613      	mov	r3, r2
 8010148:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	2200      	movs	r2, #0
 801014e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff ff58 	bl	8010006 <get_ldnumber>
 8010156:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801015a:	2b00      	cmp	r3, #0
 801015c:	da01      	bge.n	8010162 <find_volume+0x26>
 801015e:	230b      	movs	r3, #11
 8010160:	e236      	b.n	80105d0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010162:	4aac      	ldr	r2, [pc, #688]	; (8010414 <find_volume+0x2d8>)
 8010164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801016a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	2b00      	cmp	r3, #0
 8010170:	d101      	bne.n	8010176 <find_volume+0x3a>
 8010172:	230c      	movs	r3, #12
 8010174:	e22c      	b.n	80105d0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010176:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010178:	f7fe fd3b 	bl	800ebf2 <lock_fs>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <find_volume+0x4a>
 8010182:	230f      	movs	r3, #15
 8010184:	e224      	b.n	80105d0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801018a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	f023 0301 	bic.w	r3, r3, #1
 8010192:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01a      	beq.n	80101d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	785b      	ldrb	r3, [r3, #1]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fe fb89 	bl	800e8b8 <disk_status>
 80101a6:	4603      	mov	r3, r0
 80101a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80101ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101b0:	f003 0301 	and.w	r3, r3, #1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10c      	bne.n	80101d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80101b8:	79fb      	ldrb	r3, [r7, #7]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d007      	beq.n	80101ce <find_volume+0x92>
 80101be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101c2:	f003 0304 	and.w	r3, r3, #4
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d001      	beq.n	80101ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80101ca:	230a      	movs	r3, #10
 80101cc:	e200      	b.n	80105d0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80101ce:	2300      	movs	r3, #0
 80101d0:	e1fe      	b.n	80105d0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80101d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d4:	2200      	movs	r2, #0
 80101d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80101d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80101e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e2:	785b      	ldrb	r3, [r3, #1]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fe fb81 	bl	800e8ec <disk_initialize>
 80101ea:	4603      	mov	r3, r0
 80101ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80101f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80101fc:	2303      	movs	r3, #3
 80101fe:	e1e7      	b.n	80105d0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010200:	79fb      	ldrb	r3, [r7, #7]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d007      	beq.n	8010216 <find_volume+0xda>
 8010206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801020a:	f003 0304 	and.w	r3, r3, #4
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010212:	230a      	movs	r3, #10
 8010214:	e1dc      	b.n	80105d0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010216:	2300      	movs	r3, #0
 8010218:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801021a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801021c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801021e:	f7ff ff37 	bl	8010090 <check_fs>
 8010222:	4603      	mov	r3, r0
 8010224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801022c:	2b02      	cmp	r3, #2
 801022e:	d14b      	bne.n	80102c8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010230:	2300      	movs	r3, #0
 8010232:	643b      	str	r3, [r7, #64]	; 0x40
 8010234:	e01f      	b.n	8010276 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801023c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801023e:	011b      	lsls	r3, r3, #4
 8010240:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010244:	4413      	add	r3, r2
 8010246:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024a:	3304      	adds	r3, #4
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d006      	beq.n	8010260 <find_volume+0x124>
 8010252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010254:	3308      	adds	r3, #8
 8010256:	4618      	mov	r0, r3
 8010258:	f7fe fbe4 	bl	800ea24 <ld_dword>
 801025c:	4602      	mov	r2, r0
 801025e:	e000      	b.n	8010262 <find_volume+0x126>
 8010260:	2200      	movs	r2, #0
 8010262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801026a:	440b      	add	r3, r1
 801026c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010272:	3301      	adds	r3, #1
 8010274:	643b      	str	r3, [r7, #64]	; 0x40
 8010276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010278:	2b03      	cmp	r3, #3
 801027a:	d9dc      	bls.n	8010236 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801027c:	2300      	movs	r3, #0
 801027e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010282:	2b00      	cmp	r3, #0
 8010284:	d002      	beq.n	801028c <find_volume+0x150>
 8010286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010288:	3b01      	subs	r3, #1
 801028a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801028c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010294:	4413      	add	r3, r2
 8010296:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801029a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801029c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d005      	beq.n	80102ae <find_volume+0x172>
 80102a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102a6:	f7ff fef3 	bl	8010090 <check_fs>
 80102aa:	4603      	mov	r3, r0
 80102ac:	e000      	b.n	80102b0 <find_volume+0x174>
 80102ae:	2303      	movs	r3, #3
 80102b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80102b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d905      	bls.n	80102c8 <find_volume+0x18c>
 80102bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102be:	3301      	adds	r3, #1
 80102c0:	643b      	str	r3, [r7, #64]	; 0x40
 80102c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d9e1      	bls.n	801028c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102cc:	2b04      	cmp	r3, #4
 80102ce:	d101      	bne.n	80102d4 <find_volume+0x198>
 80102d0:	2301      	movs	r3, #1
 80102d2:	e17d      	b.n	80105d0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d901      	bls.n	80102e0 <find_volume+0x1a4>
 80102dc:	230d      	movs	r3, #13
 80102de:	e177      	b.n	80105d0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	3334      	adds	r3, #52	; 0x34
 80102e4:	330b      	adds	r3, #11
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fb84 	bl	800e9f4 <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102f2:	d001      	beq.n	80102f8 <find_volume+0x1bc>
 80102f4:	230d      	movs	r3, #13
 80102f6:	e16b      	b.n	80105d0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	3334      	adds	r3, #52	; 0x34
 80102fc:	3316      	adds	r3, #22
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fb78 	bl	800e9f4 <ld_word>
 8010304:	4603      	mov	r3, r0
 8010306:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801030a:	2b00      	cmp	r3, #0
 801030c:	d106      	bne.n	801031c <find_volume+0x1e0>
 801030e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010310:	3334      	adds	r3, #52	; 0x34
 8010312:	3324      	adds	r3, #36	; 0x24
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fb85 	bl	800ea24 <ld_dword>
 801031a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010320:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010324:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032e:	789b      	ldrb	r3, [r3, #2]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d005      	beq.n	8010340 <find_volume+0x204>
 8010334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010336:	789b      	ldrb	r3, [r3, #2]
 8010338:	2b02      	cmp	r3, #2
 801033a:	d001      	beq.n	8010340 <find_volume+0x204>
 801033c:	230d      	movs	r3, #13
 801033e:	e147      	b.n	80105d0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010342:	789b      	ldrb	r3, [r3, #2]
 8010344:	461a      	mov	r2, r3
 8010346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010348:	fb02 f303 	mul.w	r3, r2, r3
 801034c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010354:	b29a      	uxth	r2, r3
 8010356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010358:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801035a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035c:	895b      	ldrh	r3, [r3, #10]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d008      	beq.n	8010374 <find_volume+0x238>
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	895b      	ldrh	r3, [r3, #10]
 8010366:	461a      	mov	r2, r3
 8010368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036a:	895b      	ldrh	r3, [r3, #10]
 801036c:	3b01      	subs	r3, #1
 801036e:	4013      	ands	r3, r2
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <find_volume+0x23c>
 8010374:	230d      	movs	r3, #13
 8010376:	e12b      	b.n	80105d0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037a:	3334      	adds	r3, #52	; 0x34
 801037c:	3311      	adds	r3, #17
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fb38 	bl	800e9f4 <ld_word>
 8010384:	4603      	mov	r3, r0
 8010386:	461a      	mov	r2, r3
 8010388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	891b      	ldrh	r3, [r3, #8]
 8010390:	f003 030f 	and.w	r3, r3, #15
 8010394:	b29b      	uxth	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	d001      	beq.n	801039e <find_volume+0x262>
 801039a:	230d      	movs	r3, #13
 801039c:	e118      	b.n	80105d0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801039e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a0:	3334      	adds	r3, #52	; 0x34
 80103a2:	3313      	adds	r3, #19
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fe fb25 	bl	800e9f4 <ld_word>
 80103aa:	4603      	mov	r3, r0
 80103ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80103ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d106      	bne.n	80103c2 <find_volume+0x286>
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	3334      	adds	r3, #52	; 0x34
 80103b8:	3320      	adds	r3, #32
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe fb32 	bl	800ea24 <ld_dword>
 80103c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80103c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c4:	3334      	adds	r3, #52	; 0x34
 80103c6:	330e      	adds	r3, #14
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe fb13 	bl	800e9f4 <ld_word>
 80103ce:	4603      	mov	r3, r0
 80103d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80103d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d101      	bne.n	80103dc <find_volume+0x2a0>
 80103d8:	230d      	movs	r3, #13
 80103da:	e0f9      	b.n	80105d0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80103dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103e0:	4413      	add	r3, r2
 80103e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103e4:	8912      	ldrh	r2, [r2, #8]
 80103e6:	0912      	lsrs	r2, r2, #4
 80103e8:	b292      	uxth	r2, r2
 80103ea:	4413      	add	r3, r2
 80103ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80103ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d201      	bcs.n	80103fa <find_volume+0x2be>
 80103f6:	230d      	movs	r3, #13
 80103f8:	e0ea      	b.n	80105d0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80103fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fe:	1ad3      	subs	r3, r2, r3
 8010400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010402:	8952      	ldrh	r2, [r2, #10]
 8010404:	fbb3 f3f2 	udiv	r3, r3, r2
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	2b00      	cmp	r3, #0
 801040e:	d103      	bne.n	8010418 <find_volume+0x2dc>
 8010410:	230d      	movs	r3, #13
 8010412:	e0dd      	b.n	80105d0 <find_volume+0x494>
 8010414:	200002e4 	.word	0x200002e4
		fmt = FS_FAT32;
 8010418:	2303      	movs	r3, #3
 801041a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010424:	4293      	cmp	r3, r2
 8010426:	d802      	bhi.n	801042e <find_volume+0x2f2>
 8010428:	2302      	movs	r3, #2
 801042a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010434:	4293      	cmp	r3, r2
 8010436:	d802      	bhi.n	801043e <find_volume+0x302>
 8010438:	2301      	movs	r3, #1
 801043a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010440:	1c9a      	adds	r2, r3, #2
 8010442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010444:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801044a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801044c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801044e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010450:	441a      	add	r2, r3
 8010452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010454:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045a:	441a      	add	r2, r3
 801045c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010464:	2b03      	cmp	r3, #3
 8010466:	d11e      	bne.n	80104a6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	3334      	adds	r3, #52	; 0x34
 801046c:	332a      	adds	r3, #42	; 0x2a
 801046e:	4618      	mov	r0, r3
 8010470:	f7fe fac0 	bl	800e9f4 <ld_word>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <find_volume+0x342>
 801047a:	230d      	movs	r3, #13
 801047c:	e0a8      	b.n	80105d0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801047e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010480:	891b      	ldrh	r3, [r3, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <find_volume+0x34e>
 8010486:	230d      	movs	r3, #13
 8010488:	e0a2      	b.n	80105d0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	3334      	adds	r3, #52	; 0x34
 801048e:	332c      	adds	r3, #44	; 0x2c
 8010490:	4618      	mov	r0, r3
 8010492:	f7fe fac7 	bl	800ea24 <ld_dword>
 8010496:	4602      	mov	r2, r0
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	647b      	str	r3, [r7, #68]	; 0x44
 80104a4:	e01f      	b.n	80104e6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	891b      	ldrh	r3, [r3, #8]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d101      	bne.n	80104b2 <find_volume+0x376>
 80104ae:	230d      	movs	r3, #13
 80104b0:	e08e      	b.n	80105d0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b8:	441a      	add	r2, r3
 80104ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104bc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80104be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d103      	bne.n	80104ce <find_volume+0x392>
 80104c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	e00a      	b.n	80104e4 <find_volume+0x3a8>
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	699a      	ldr	r2, [r3, #24]
 80104d2:	4613      	mov	r3, r2
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	4413      	add	r3, r2
 80104d8:	085a      	lsrs	r2, r3, #1
 80104da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80104e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80104e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e8:	69da      	ldr	r2, [r3, #28]
 80104ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80104f0:	0a5b      	lsrs	r3, r3, #9
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d201      	bcs.n	80104fa <find_volume+0x3be>
 80104f6:	230d      	movs	r3, #13
 80104f8:	e06a      	b.n	80105d0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80104fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010500:	615a      	str	r2, [r3, #20]
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	695a      	ldr	r2, [r3, #20]
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801050a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050c:	2280      	movs	r2, #128	; 0x80
 801050e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010514:	2b03      	cmp	r3, #3
 8010516:	d149      	bne.n	80105ac <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	3334      	adds	r3, #52	; 0x34
 801051c:	3330      	adds	r3, #48	; 0x30
 801051e:	4618      	mov	r0, r3
 8010520:	f7fe fa68 	bl	800e9f4 <ld_word>
 8010524:	4603      	mov	r3, r0
 8010526:	2b01      	cmp	r3, #1
 8010528:	d140      	bne.n	80105ac <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801052a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801052c:	3301      	adds	r3, #1
 801052e:	4619      	mov	r1, r3
 8010530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010532:	f7fe fd3f 	bl	800efb4 <move_window>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d137      	bne.n	80105ac <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	2200      	movs	r2, #0
 8010540:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010544:	3334      	adds	r3, #52	; 0x34
 8010546:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fa52 	bl	800e9f4 <ld_word>
 8010550:	4603      	mov	r3, r0
 8010552:	461a      	mov	r2, r3
 8010554:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010558:	429a      	cmp	r2, r3
 801055a:	d127      	bne.n	80105ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801055c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055e:	3334      	adds	r3, #52	; 0x34
 8010560:	4618      	mov	r0, r3
 8010562:	f7fe fa5f 	bl	800ea24 <ld_dword>
 8010566:	4602      	mov	r2, r0
 8010568:	4b1b      	ldr	r3, [pc, #108]	; (80105d8 <find_volume+0x49c>)
 801056a:	429a      	cmp	r2, r3
 801056c:	d11e      	bne.n	80105ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	3334      	adds	r3, #52	; 0x34
 8010572:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fa54 	bl	800ea24 <ld_dword>
 801057c:	4602      	mov	r2, r0
 801057e:	4b17      	ldr	r3, [pc, #92]	; (80105dc <find_volume+0x4a0>)
 8010580:	429a      	cmp	r2, r3
 8010582:	d113      	bne.n	80105ac <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	3334      	adds	r3, #52	; 0x34
 8010588:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fa49 	bl	800ea24 <ld_dword>
 8010592:	4602      	mov	r2, r0
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	3334      	adds	r3, #52	; 0x34
 801059c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fa3f 	bl	800ea24 <ld_dword>
 80105a6:	4602      	mov	r2, r0
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80105ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80105b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80105b4:	4b0a      	ldr	r3, [pc, #40]	; (80105e0 <find_volume+0x4a4>)
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	3301      	adds	r3, #1
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	4b08      	ldr	r3, [pc, #32]	; (80105e0 <find_volume+0x4a4>)
 80105be:	801a      	strh	r2, [r3, #0]
 80105c0:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <find_volume+0x4a4>)
 80105c2:	881a      	ldrh	r2, [r3, #0]
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80105c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105ca:	f7fe fc8b 	bl	800eee4 <clear_lock>
#endif
	return FR_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3758      	adds	r7, #88	; 0x58
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	41615252 	.word	0x41615252
 80105dc:	61417272 	.word	0x61417272
 80105e0:	200002e8 	.word	0x200002e8

080105e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80105ee:	2309      	movs	r3, #9
 80105f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d02e      	beq.n	8010656 <validate+0x72>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d02a      	beq.n	8010656 <validate+0x72>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d025      	beq.n	8010656 <validate+0x72>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	889a      	ldrh	r2, [r3, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	88db      	ldrh	r3, [r3, #6]
 8010614:	429a      	cmp	r2, r3
 8010616:	d11e      	bne.n	8010656 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f7fe fae8 	bl	800ebf2 <lock_fs>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d014      	beq.n	8010652 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	785b      	ldrb	r3, [r3, #1]
 801062e:	4618      	mov	r0, r3
 8010630:	f7fe f942 	bl	800e8b8 <disk_status>
 8010634:	4603      	mov	r3, r0
 8010636:	f003 0301 	and.w	r3, r3, #1
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <validate+0x60>
				res = FR_OK;
 801063e:	2300      	movs	r3, #0
 8010640:	73fb      	strb	r3, [r7, #15]
 8010642:	e008      	b.n	8010656 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2100      	movs	r1, #0
 801064a:	4618      	mov	r0, r3
 801064c:	f7fe fae7 	bl	800ec1e <unlock_fs>
 8010650:	e001      	b.n	8010656 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010652:	230f      	movs	r3, #15
 8010654:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010656:	7bfb      	ldrb	r3, [r7, #15]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d102      	bne.n	8010662 <validate+0x7e>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	e000      	b.n	8010664 <validate+0x80>
 8010662:	2300      	movs	r3, #0
 8010664:	683a      	ldr	r2, [r7, #0]
 8010666:	6013      	str	r3, [r2, #0]
	return res;
 8010668:	7bfb      	ldrb	r3, [r7, #15]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
	...

08010674 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b088      	sub	sp, #32
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	4613      	mov	r3, r2
 8010680:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010686:	f107 0310 	add.w	r3, r7, #16
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fcbb 	bl	8010006 <get_ldnumber>
 8010690:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	2b00      	cmp	r3, #0
 8010696:	da01      	bge.n	801069c <f_mount+0x28>
 8010698:	230b      	movs	r3, #11
 801069a:	e048      	b.n	801072e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801069c:	4a26      	ldr	r2, [pc, #152]	; (8010738 <f_mount+0xc4>)
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00f      	beq.n	80106cc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80106ac:	69b8      	ldr	r0, [r7, #24]
 80106ae:	f7fe fc19 	bl	800eee4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f001 f828 	bl	801170c <ff_del_syncobj>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d101      	bne.n	80106c6 <f_mount+0x52>
 80106c2:	2302      	movs	r3, #2
 80106c4:	e033      	b.n	801072e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	2200      	movs	r2, #0
 80106ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d00f      	beq.n	80106f2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2200      	movs	r2, #0
 80106d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	b2da      	uxtb	r2, r3
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	330c      	adds	r3, #12
 80106e0:	4619      	mov	r1, r3
 80106e2:	4610      	mov	r0, r2
 80106e4:	f000 fff7 	bl	80116d6 <ff_cre_syncobj>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <f_mount+0x7e>
 80106ee:	2302      	movs	r3, #2
 80106f0:	e01d      	b.n	801072e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	4910      	ldr	r1, [pc, #64]	; (8010738 <f_mount+0xc4>)
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d002      	beq.n	8010708 <f_mount+0x94>
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d001      	beq.n	801070c <f_mount+0x98>
 8010708:	2300      	movs	r3, #0
 801070a:	e010      	b.n	801072e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801070c:	f107 010c 	add.w	r1, r7, #12
 8010710:	f107 0308 	add.w	r3, r7, #8
 8010714:	2200      	movs	r2, #0
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff fd10 	bl	801013c <find_volume>
 801071c:	4603      	mov	r3, r0
 801071e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	7dfa      	ldrb	r2, [r7, #23]
 8010724:	4611      	mov	r1, r2
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fa79 	bl	800ec1e <unlock_fs>
 801072c:	7dfb      	ldrb	r3, [r7, #23]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3720      	adds	r7, #32
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	200002e4 	.word	0x200002e4

0801073c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b09a      	sub	sp, #104	; 0x68
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4613      	mov	r3, r2
 8010748:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d101      	bne.n	8010754 <f_open+0x18>
 8010750:	2309      	movs	r3, #9
 8010752:	e1b4      	b.n	8010abe <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010754:	79fb      	ldrb	r3, [r7, #7]
 8010756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801075a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801075c:	79fa      	ldrb	r2, [r7, #7]
 801075e:	f107 0114 	add.w	r1, r7, #20
 8010762:	f107 0308 	add.w	r3, r7, #8
 8010766:	4618      	mov	r0, r3
 8010768:	f7ff fce8 	bl	801013c <find_volume>
 801076c:	4603      	mov	r3, r0
 801076e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010772:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010776:	2b00      	cmp	r3, #0
 8010778:	f040 8191 	bne.w	8010a9e <f_open+0x362>
		dj.obj.fs = fs;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	f107 0318 	add.w	r3, r7, #24
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff fbcb 	bl	800ff24 <follow_path>
 801078e:	4603      	mov	r3, r0
 8010790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010798:	2b00      	cmp	r3, #0
 801079a:	d11a      	bne.n	80107d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801079c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80107a0:	b25b      	sxtb	r3, r3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	da03      	bge.n	80107ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80107a6:	2306      	movs	r3, #6
 80107a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80107ac:	e011      	b.n	80107d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	f023 0301 	bic.w	r3, r3, #1
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	bf14      	ite	ne
 80107b8:	2301      	movne	r3, #1
 80107ba:	2300      	moveq	r3, #0
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	461a      	mov	r2, r3
 80107c0:	f107 0318 	add.w	r3, r7, #24
 80107c4:	4611      	mov	r1, r2
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fe fa44 	bl	800ec54 <chk_lock>
 80107cc:	4603      	mov	r3, r0
 80107ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	f003 031c 	and.w	r3, r3, #28
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d07f      	beq.n	80108dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80107dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d017      	beq.n	8010814 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80107e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	d10e      	bne.n	801080a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80107ec:	f7fe fa8e 	bl	800ed0c <enq_lock>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d006      	beq.n	8010804 <f_open+0xc8>
 80107f6:	f107 0318 	add.w	r3, r7, #24
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff f9ca 	bl	800fb94 <dir_register>
 8010800:	4603      	mov	r3, r0
 8010802:	e000      	b.n	8010806 <f_open+0xca>
 8010804:	2312      	movs	r3, #18
 8010806:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801080a:	79fb      	ldrb	r3, [r7, #7]
 801080c:	f043 0308 	orr.w	r3, r3, #8
 8010810:	71fb      	strb	r3, [r7, #7]
 8010812:	e010      	b.n	8010836 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010814:	7fbb      	ldrb	r3, [r7, #30]
 8010816:	f003 0311 	and.w	r3, r3, #17
 801081a:	2b00      	cmp	r3, #0
 801081c:	d003      	beq.n	8010826 <f_open+0xea>
					res = FR_DENIED;
 801081e:	2307      	movs	r3, #7
 8010820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010824:	e007      	b.n	8010836 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010826:	79fb      	ldrb	r3, [r7, #7]
 8010828:	f003 0304 	and.w	r3, r3, #4
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <f_open+0xfa>
 8010830:	2308      	movs	r3, #8
 8010832:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010836:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801083a:	2b00      	cmp	r3, #0
 801083c:	d168      	bne.n	8010910 <f_open+0x1d4>
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	f003 0308 	and.w	r3, r3, #8
 8010844:	2b00      	cmp	r3, #0
 8010846:	d063      	beq.n	8010910 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010848:	f7fc f9b4 	bl	800cbb4 <get_fattime>
 801084c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010850:	330e      	adds	r3, #14
 8010852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010854:	4618      	mov	r0, r3
 8010856:	f7fe f923 	bl	800eaa0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801085a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085c:	3316      	adds	r3, #22
 801085e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010860:	4618      	mov	r0, r3
 8010862:	f7fe f91d 	bl	800eaa0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	330b      	adds	r3, #11
 801086a:	2220      	movs	r2, #32
 801086c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff f89c 	bl	800f9b2 <ld_clust>
 801087a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010880:	2200      	movs	r2, #0
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff f8b4 	bl	800f9f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088a:	331c      	adds	r3, #28
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe f906 	bl	800eaa0 <st_dword>
					fs->wflag = 1;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2201      	movs	r2, #1
 8010898:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801089a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801089c:	2b00      	cmp	r3, #0
 801089e:	d037      	beq.n	8010910 <f_open+0x1d4>
						dw = fs->winsect;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80108a6:	f107 0318 	add.w	r3, r7, #24
 80108aa:	2200      	movs	r2, #0
 80108ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fe fdc7 	bl	800f442 <remove_chain>
 80108b4:	4603      	mov	r3, r0
 80108b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80108ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d126      	bne.n	8010910 <f_open+0x1d4>
							res = move_window(fs, dw);
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe fb74 	bl	800efb4 <move_window>
 80108cc:	4603      	mov	r3, r0
 80108ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108d6:	3a01      	subs	r2, #1
 80108d8:	611a      	str	r2, [r3, #16]
 80108da:	e019      	b.n	8010910 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80108dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d115      	bne.n	8010910 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80108e4:	7fbb      	ldrb	r3, [r7, #30]
 80108e6:	f003 0310 	and.w	r3, r3, #16
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d003      	beq.n	80108f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80108ee:	2304      	movs	r3, #4
 80108f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80108f4:	e00c      	b.n	8010910 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80108f6:	79fb      	ldrb	r3, [r7, #7]
 80108f8:	f003 0302 	and.w	r3, r3, #2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d007      	beq.n	8010910 <f_open+0x1d4>
 8010900:	7fbb      	ldrb	r3, [r7, #30]
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	d002      	beq.n	8010910 <f_open+0x1d4>
						res = FR_DENIED;
 801090a:	2307      	movs	r3, #7
 801090c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010914:	2b00      	cmp	r3, #0
 8010916:	d128      	bne.n	801096a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010918:	79fb      	ldrb	r3, [r7, #7]
 801091a:	f003 0308 	and.w	r3, r3, #8
 801091e:	2b00      	cmp	r3, #0
 8010920:	d003      	beq.n	801092a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010922:	79fb      	ldrb	r3, [r7, #7]
 8010924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010928:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010938:	79fb      	ldrb	r3, [r7, #7]
 801093a:	f023 0301 	bic.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	bf14      	ite	ne
 8010942:	2301      	movne	r3, #1
 8010944:	2300      	moveq	r3, #0
 8010946:	b2db      	uxtb	r3, r3
 8010948:	461a      	mov	r2, r3
 801094a:	f107 0318 	add.w	r3, r7, #24
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7fe f9fd 	bl	800ed50 <inc_lock>
 8010956:	4602      	mov	r2, r0
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d102      	bne.n	801096a <f_open+0x22e>
 8010964:	2302      	movs	r3, #2
 8010966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801096a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801096e:	2b00      	cmp	r3, #0
 8010970:	f040 8095 	bne.w	8010a9e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f7ff f819 	bl	800f9b2 <ld_clust>
 8010980:	4602      	mov	r2, r0
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010988:	331c      	adds	r3, #28
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe f84a 	bl	800ea24 <ld_dword>
 8010990:	4602      	mov	r2, r0
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2200      	movs	r2, #0
 801099a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801099c:	697a      	ldr	r2, [r7, #20]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	88da      	ldrh	r2, [r3, #6]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	79fa      	ldrb	r2, [r7, #7]
 80109ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2200      	movs	r2, #0
 80109ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2200      	movs	r2, #0
 80109c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3330      	adds	r3, #48	; 0x30
 80109c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109ca:	2100      	movs	r1, #0
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe f8b4 	bl	800eb3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80109d2:	79fb      	ldrb	r3, [r7, #7]
 80109d4:	f003 0320 	and.w	r3, r3, #32
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d060      	beq.n	8010a9e <f_open+0x362>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d05c      	beq.n	8010a9e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	68da      	ldr	r2, [r3, #12]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	895b      	ldrh	r3, [r3, #10]
 80109f0:	025b      	lsls	r3, r3, #9
 80109f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a00:	e016      	b.n	8010a30 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe fb8f 	bl	800f12a <get_fat>
 8010a0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d802      	bhi.n	8010a1a <f_open+0x2de>
 8010a14:	2302      	movs	r3, #2
 8010a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a20:	d102      	bne.n	8010a28 <f_open+0x2ec>
 8010a22:	2301      	movs	r3, #1
 8010a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d103      	bne.n	8010a40 <f_open+0x304>
 8010a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d8e0      	bhi.n	8010a02 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d127      	bne.n	8010a9e <f_open+0x362>
 8010a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d022      	beq.n	8010a9e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fe fb45 	bl	800f0ec <clust2sect>
 8010a62:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d103      	bne.n	8010a72 <f_open+0x336>
						res = FR_INT_ERR;
 8010a6a:	2302      	movs	r3, #2
 8010a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010a70:	e015      	b.n	8010a9e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a74:	0a5a      	lsrs	r2, r3, #9
 8010a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a78:	441a      	add	r2, r3
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	7858      	ldrb	r0, [r3, #1]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a1a      	ldr	r2, [r3, #32]
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	f7fd ff53 	bl	800e938 <disk_read>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <f_open+0x362>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d002      	beq.n	8010aac <f_open+0x370>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010ab2:	4611      	mov	r1, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fe f8b2 	bl	800ec1e <unlock_fs>
 8010aba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3768      	adds	r7, #104	; 0x68
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b08c      	sub	sp, #48	; 0x30
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	60f8      	str	r0, [r7, #12]
 8010ace:	60b9      	str	r1, [r7, #8]
 8010ad0:	607a      	str	r2, [r7, #4]
 8010ad2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2200      	movs	r2, #0
 8010adc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f107 0210 	add.w	r2, r7, #16
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7ff fd7c 	bl	80105e4 <validate>
 8010aec:	4603      	mov	r3, r0
 8010aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d107      	bne.n	8010b0a <f_write+0x44>
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	7d5b      	ldrb	r3, [r3, #21]
 8010afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d009      	beq.n	8010b1e <f_write+0x58>
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010b10:	4611      	mov	r1, r2
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe f883 	bl	800ec1e <unlock_fs>
 8010b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b1c:	e173      	b.n	8010e06 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	7d1b      	ldrb	r3, [r3, #20]
 8010b22:	f003 0302 	and.w	r3, r3, #2
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d106      	bne.n	8010b38 <f_write+0x72>
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2107      	movs	r1, #7
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe f875 	bl	800ec1e <unlock_fs>
 8010b34:	2307      	movs	r3, #7
 8010b36:	e166      	b.n	8010e06 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	699a      	ldr	r2, [r3, #24]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	441a      	add	r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	f080 814b 	bcs.w	8010de0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	699b      	ldr	r3, [r3, #24]
 8010b4e:	43db      	mvns	r3, r3
 8010b50:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010b52:	e145      	b.n	8010de0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f040 8101 	bne.w	8010d64 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	699b      	ldr	r3, [r3, #24]
 8010b66:	0a5b      	lsrs	r3, r3, #9
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	8952      	ldrh	r2, [r2, #10]
 8010b6c:	3a01      	subs	r2, #1
 8010b6e:	4013      	ands	r3, r2
 8010b70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d14d      	bne.n	8010c14 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10c      	bne.n	8010b9a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d11a      	bne.n	8010bc2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2100      	movs	r1, #0
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fe fcbb 	bl	800f50c <create_chain>
 8010b96:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b98:	e013      	b.n	8010bc2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d007      	beq.n	8010bb2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f7fe fd47 	bl	800f63c <clmt_clust>
 8010bae:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bb0:	e007      	b.n	8010bc2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	69db      	ldr	r3, [r3, #28]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4610      	mov	r0, r2
 8010bbc:	f7fe fca6 	bl	800f50c <create_chain>
 8010bc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 8110 	beq.w	8010dea <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d109      	bne.n	8010be4 <f_write+0x11e>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2202      	movs	r2, #2
 8010bd4:	755a      	strb	r2, [r3, #21]
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	2102      	movs	r1, #2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe f81f 	bl	800ec1e <unlock_fs>
 8010be0:	2302      	movs	r3, #2
 8010be2:	e110      	b.n	8010e06 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bea:	d109      	bne.n	8010c00 <f_write+0x13a>
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	755a      	strb	r2, [r3, #21]
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2101      	movs	r1, #1
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fe f811 	bl	800ec1e <unlock_fs>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e102      	b.n	8010e06 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d102      	bne.n	8010c14 <f_write+0x14e>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
 8010c18:	b25b      	sxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	da1d      	bge.n	8010c5a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	7858      	ldrb	r0, [r3, #1]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6a1a      	ldr	r2, [r3, #32]
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	f7fd fea3 	bl	800e978 <disk_write>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d009      	beq.n	8010c4c <f_write+0x186>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	755a      	strb	r2, [r3, #21]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2101      	movs	r1, #1
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fd ffeb 	bl	800ec1e <unlock_fs>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e0dc      	b.n	8010e06 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	7d1b      	ldrb	r3, [r3, #20]
 8010c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c5a:	693a      	ldr	r2, [r7, #16]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	69db      	ldr	r3, [r3, #28]
 8010c60:	4619      	mov	r1, r3
 8010c62:	4610      	mov	r0, r2
 8010c64:	f7fe fa42 	bl	800f0ec <clust2sect>
 8010c68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d109      	bne.n	8010c84 <f_write+0x1be>
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2202      	movs	r2, #2
 8010c74:	755a      	strb	r2, [r3, #21]
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	2102      	movs	r1, #2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fd ffcf 	bl	800ec1e <unlock_fs>
 8010c80:	2302      	movs	r3, #2
 8010c82:	e0c0      	b.n	8010e06 <f_write+0x340>
			sect += csect;
 8010c84:	697a      	ldr	r2, [r7, #20]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	4413      	add	r3, r2
 8010c8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	0a5b      	lsrs	r3, r3, #9
 8010c90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d041      	beq.n	8010d1c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c98:	69ba      	ldr	r2, [r7, #24]
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	693a      	ldr	r2, [r7, #16]
 8010ca0:	8952      	ldrh	r2, [r2, #10]
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d905      	bls.n	8010cb2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	895b      	ldrh	r3, [r3, #10]
 8010caa:	461a      	mov	r2, r3
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	7858      	ldrb	r0, [r3, #1]
 8010cb6:	6a3b      	ldr	r3, [r7, #32]
 8010cb8:	697a      	ldr	r2, [r7, #20]
 8010cba:	69f9      	ldr	r1, [r7, #28]
 8010cbc:	f7fd fe5c 	bl	800e978 <disk_write>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d009      	beq.n	8010cda <f_write+0x214>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	755a      	strb	r2, [r3, #21]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	2101      	movs	r1, #1
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fd ffa4 	bl	800ec1e <unlock_fs>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e095      	b.n	8010e06 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6a1a      	ldr	r2, [r3, #32]
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	6a3a      	ldr	r2, [r7, #32]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d915      	bls.n	8010d14 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6a1a      	ldr	r2, [r3, #32]
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	025b      	lsls	r3, r3, #9
 8010cf8:	69fa      	ldr	r2, [r7, #28]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d00:	4619      	mov	r1, r3
 8010d02:	f7fd fef9 	bl	800eaf8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	7d1b      	ldrb	r3, [r3, #20]
 8010d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	025b      	lsls	r3, r3, #9
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010d1a:	e044      	b.n	8010da6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6a1b      	ldr	r3, [r3, #32]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d01b      	beq.n	8010d5e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	699a      	ldr	r2, [r3, #24]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d215      	bcs.n	8010d5e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	7858      	ldrb	r0, [r3, #1]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	697a      	ldr	r2, [r7, #20]
 8010d40:	f7fd fdfa 	bl	800e938 <disk_read>
 8010d44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d009      	beq.n	8010d5e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	755a      	strb	r2, [r3, #21]
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	2101      	movs	r1, #1
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fd ff62 	bl	800ec1e <unlock_fs>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e053      	b.n	8010e06 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d6c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d901      	bls.n	8010d7e <f_write+0x2b8>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	699b      	ldr	r3, [r3, #24]
 8010d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d8c:	4413      	add	r3, r2
 8010d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d90:	69f9      	ldr	r1, [r7, #28]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fd feb0 	bl	800eaf8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	7d1b      	ldrb	r3, [r3, #20]
 8010d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010da6:	69fa      	ldr	r2, [r7, #28]
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	4413      	add	r3, r2
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	699a      	ldr	r2, [r3, #24]
 8010db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db4:	441a      	add	r2, r3
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	619a      	str	r2, [r3, #24]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	699b      	ldr	r3, [r3, #24]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	bf38      	it	cc
 8010dc6:	461a      	movcc	r2, r3
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	60da      	str	r2, [r3, #12]
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	441a      	add	r2, r3
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f47f aeb6 	bne.w	8010b54 <f_write+0x8e>
 8010de8:	e000      	b.n	8010dec <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010dea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	7d1b      	ldrb	r3, [r3, #20]
 8010df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010df4:	b2da      	uxtb	r2, r3
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fd ff0d 	bl	800ec1e <unlock_fs>
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3730      	adds	r7, #48	; 0x30
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b086      	sub	sp, #24
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f107 0208 	add.w	r2, r7, #8
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7ff fbe0 	bl	80105e4 <validate>
 8010e24:	4603      	mov	r3, r0
 8010e26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e28:	7dfb      	ldrb	r3, [r7, #23]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d16d      	bne.n	8010f0a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	7d1b      	ldrb	r3, [r3, #20]
 8010e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d067      	beq.n	8010f0a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7d1b      	ldrb	r3, [r3, #20]
 8010e3e:	b25b      	sxtb	r3, r3
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	da1a      	bge.n	8010e7a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	7858      	ldrb	r0, [r3, #1]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a1a      	ldr	r2, [r3, #32]
 8010e52:	2301      	movs	r3, #1
 8010e54:	f7fd fd90 	bl	800e978 <disk_write>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d006      	beq.n	8010e6c <f_sync+0x5e>
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	2101      	movs	r1, #1
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fd fedb 	bl	800ec1e <unlock_fs>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e055      	b.n	8010f18 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	7d1b      	ldrb	r3, [r3, #20]
 8010e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e7a:	f7fb fe9b 	bl	800cbb4 <get_fattime>
 8010e7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e86:	4619      	mov	r1, r3
 8010e88:	4610      	mov	r0, r2
 8010e8a:	f7fe f893 	bl	800efb4 <move_window>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d138      	bne.n	8010f0a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	330b      	adds	r3, #11
 8010ea2:	781a      	ldrb	r2, [r3, #0]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	330b      	adds	r3, #11
 8010ea8:	f042 0220 	orr.w	r2, r2, #32
 8010eac:	b2d2      	uxtb	r2, r2
 8010eae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6818      	ldr	r0, [r3, #0]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	689b      	ldr	r3, [r3, #8]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	68f9      	ldr	r1, [r7, #12]
 8010ebc:	f7fe fd98 	bl	800f9f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f103 021c 	add.w	r2, r3, #28
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	4610      	mov	r0, r2
 8010ece:	f7fd fde7 	bl	800eaa0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	3316      	adds	r3, #22
 8010ed6:	6939      	ldr	r1, [r7, #16]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fd fde1 	bl	800eaa0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	3312      	adds	r3, #18
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fdc0 	bl	800ea6a <st_word>
					fs->wflag = 1;
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	2201      	movs	r2, #1
 8010eee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fe f88c 	bl	800f010 <sync_fs>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	7d1b      	ldrb	r3, [r3, #20]
 8010f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	7dfa      	ldrb	r2, [r7, #23]
 8010f0e:	4611      	mov	r1, r2
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7fd fe84 	bl	800ec1e <unlock_fs>
 8010f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b090      	sub	sp, #64	; 0x40
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f107 0208 	add.w	r2, r7, #8
 8010f30:	4611      	mov	r1, r2
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff fb56 	bl	80105e4 <validate>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d103      	bne.n	8010f4e <f_lseek+0x2e>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	7d5b      	ldrb	r3, [r3, #21]
 8010f4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d009      	beq.n	8010f6a <f_lseek+0x4a>
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fd fe5d 	bl	800ec1e <unlock_fs>
 8010f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f68:	e229      	b.n	80113be <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f000 80ea 	beq.w	8011148 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f7a:	d164      	bne.n	8011046 <f_lseek+0x126>
			tbl = fp->cltbl;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f80:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f84:	1d1a      	adds	r2, r3, #4
 8010f86:	627a      	str	r2, [r7, #36]	; 0x24
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	2302      	movs	r3, #2
 8010f8e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d044      	beq.n	8011026 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9e:	613b      	str	r3, [r7, #16]
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa6:	3302      	adds	r3, #2
 8010fa8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	60fb      	str	r3, [r7, #12]
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fe f8b6 	bl	800f12a <get_fat>
 8010fbe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d809      	bhi.n	8010fda <f_lseek+0xba>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2202      	movs	r2, #2
 8010fca:	755a      	strb	r2, [r3, #21]
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	2102      	movs	r1, #2
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fd fe24 	bl	800ec1e <unlock_fs>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	e1f1      	b.n	80113be <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe0:	d109      	bne.n	8010ff6 <f_lseek+0xd6>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	755a      	strb	r2, [r3, #21]
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	2101      	movs	r1, #1
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fd fe16 	bl	800ec1e <unlock_fs>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e1e3      	b.n	80113be <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d0d4      	beq.n	8010faa <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	429a      	cmp	r2, r3
 8011006:	d809      	bhi.n	801101c <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	1d1a      	adds	r2, r3, #4
 801100c:	627a      	str	r2, [r7, #36]	; 0x24
 801100e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011010:	601a      	str	r2, [r3, #0]
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	1d1a      	adds	r2, r3, #4
 8011016:	627a      	str	r2, [r7, #36]	; 0x24
 8011018:	693a      	ldr	r2, [r7, #16]
 801101a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	699b      	ldr	r3, [r3, #24]
 8011020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011022:	429a      	cmp	r2, r3
 8011024:	d3ba      	bcc.n	8010f9c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801102c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801102e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	429a      	cmp	r2, r3
 8011034:	d803      	bhi.n	801103e <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	2200      	movs	r2, #0
 801103a:	601a      	str	r2, [r3, #0]
 801103c:	e1b6      	b.n	80113ac <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801103e:	2311      	movs	r3, #17
 8011040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011044:	e1b2      	b.n	80113ac <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	683a      	ldr	r2, [r7, #0]
 801104c:	429a      	cmp	r2, r3
 801104e:	d902      	bls.n	8011056 <f_lseek+0x136>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	f000 81a4 	beq.w	80113ac <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	3b01      	subs	r3, #1
 8011068:	4619      	mov	r1, r3
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7fe fae6 	bl	800f63c <clmt_clust>
 8011070:	4602      	mov	r2, r0
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011076:	68ba      	ldr	r2, [r7, #8]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	69db      	ldr	r3, [r3, #28]
 801107c:	4619      	mov	r1, r3
 801107e:	4610      	mov	r0, r2
 8011080:	f7fe f834 	bl	800f0ec <clust2sect>
 8011084:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d109      	bne.n	80110a0 <f_lseek+0x180>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2202      	movs	r2, #2
 8011090:	755a      	strb	r2, [r3, #21]
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	2102      	movs	r1, #2
 8011096:	4618      	mov	r0, r3
 8011098:	f7fd fdc1 	bl	800ec1e <unlock_fs>
 801109c:	2302      	movs	r3, #2
 801109e:	e18e      	b.n	80113be <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	3b01      	subs	r3, #1
 80110a4:	0a5b      	lsrs	r3, r3, #9
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	8952      	ldrh	r2, [r2, #10]
 80110aa:	3a01      	subs	r2, #1
 80110ac:	4013      	ands	r3, r2
 80110ae:	69ba      	ldr	r2, [r7, #24]
 80110b0:	4413      	add	r3, r2
 80110b2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	699b      	ldr	r3, [r3, #24]
 80110b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 8175 	beq.w	80113ac <f_lseek+0x48c>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6a1b      	ldr	r3, [r3, #32]
 80110c6:	69ba      	ldr	r2, [r7, #24]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	f000 816f 	beq.w	80113ac <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7d1b      	ldrb	r3, [r3, #20]
 80110d2:	b25b      	sxtb	r3, r3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	da1d      	bge.n	8011114 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	7858      	ldrb	r0, [r3, #1]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a1a      	ldr	r2, [r3, #32]
 80110e6:	2301      	movs	r3, #1
 80110e8:	f7fd fc46 	bl	800e978 <disk_write>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d009      	beq.n	8011106 <f_lseek+0x1e6>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2201      	movs	r2, #1
 80110f6:	755a      	strb	r2, [r3, #21]
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2101      	movs	r1, #1
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fd fd8e 	bl	800ec1e <unlock_fs>
 8011102:	2301      	movs	r3, #1
 8011104:	e15b      	b.n	80113be <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7d1b      	ldrb	r3, [r3, #20]
 801110a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801110e:	b2da      	uxtb	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	7858      	ldrb	r0, [r3, #1]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801111e:	2301      	movs	r3, #1
 8011120:	69ba      	ldr	r2, [r7, #24]
 8011122:	f7fd fc09 	bl	800e938 <disk_read>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d009      	beq.n	8011140 <f_lseek+0x220>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2201      	movs	r2, #1
 8011130:	755a      	strb	r2, [r3, #21]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	2101      	movs	r1, #1
 8011136:	4618      	mov	r0, r3
 8011138:	f7fd fd71 	bl	800ec1e <unlock_fs>
 801113c:	2301      	movs	r3, #1
 801113e:	e13e      	b.n	80113be <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	69ba      	ldr	r2, [r7, #24]
 8011144:	621a      	str	r2, [r3, #32]
 8011146:	e131      	b.n	80113ac <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	683a      	ldr	r2, [r7, #0]
 801114e:	429a      	cmp	r2, r3
 8011150:	d908      	bls.n	8011164 <f_lseek+0x244>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	7d1b      	ldrb	r3, [r3, #20]
 8011156:	f003 0302 	and.w	r3, r3, #2
 801115a:	2b00      	cmp	r3, #0
 801115c:	d102      	bne.n	8011164 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	637b      	str	r3, [r7, #52]	; 0x34
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011172:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f000 80c0 	beq.w	80112fc <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	895b      	ldrh	r3, [r3, #10]
 8011180:	025b      	lsls	r3, r3, #9
 8011182:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d01b      	beq.n	80111c2 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	1e5a      	subs	r2, r3, #1
 801118e:	69fb      	ldr	r3, [r7, #28]
 8011190:	fbb2 f2f3 	udiv	r2, r2, r3
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	1e59      	subs	r1, r3, #1
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801119e:	429a      	cmp	r2, r3
 80111a0:	d30f      	bcc.n	80111c2 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	1e5a      	subs	r2, r3, #1
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	425b      	negs	r3, r3
 80111aa:	401a      	ands	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	699b      	ldr	r3, [r3, #24]
 80111b4:	683a      	ldr	r2, [r7, #0]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	69db      	ldr	r3, [r3, #28]
 80111be:	63bb      	str	r3, [r7, #56]	; 0x38
 80111c0:	e02c      	b.n	801121c <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d123      	bne.n	8011216 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2100      	movs	r1, #0
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe f99a 	bl	800f50c <create_chain>
 80111d8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d109      	bne.n	80111f4 <f_lseek+0x2d4>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2202      	movs	r2, #2
 80111e4:	755a      	strb	r2, [r3, #21]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2102      	movs	r1, #2
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fd fd17 	bl	800ec1e <unlock_fs>
 80111f0:	2302      	movs	r3, #2
 80111f2:	e0e4      	b.n	80113be <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111fa:	d109      	bne.n	8011210 <f_lseek+0x2f0>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2201      	movs	r2, #1
 8011200:	755a      	strb	r2, [r3, #21]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2101      	movs	r1, #1
 8011206:	4618      	mov	r0, r3
 8011208:	f7fd fd09 	bl	800ec1e <unlock_fs>
 801120c:	2301      	movs	r3, #1
 801120e:	e0d6      	b.n	80113be <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011214:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801121a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	2b00      	cmp	r3, #0
 8011220:	d06c      	beq.n	80112fc <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011222:	e044      	b.n	80112ae <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	1ad3      	subs	r3, r2, r3
 801122a:	603b      	str	r3, [r7, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	699a      	ldr	r2, [r3, #24]
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	441a      	add	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	7d1b      	ldrb	r3, [r3, #20]
 801123c:	f003 0302 	and.w	r3, r3, #2
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00b      	beq.n	801125c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011248:	4618      	mov	r0, r3
 801124a:	f7fe f95f 	bl	800f50c <create_chain>
 801124e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011252:	2b00      	cmp	r3, #0
 8011254:	d108      	bne.n	8011268 <f_lseek+0x348>
							ofs = 0; break;
 8011256:	2300      	movs	r3, #0
 8011258:	603b      	str	r3, [r7, #0]
 801125a:	e02c      	b.n	80112b6 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011260:	4618      	mov	r0, r3
 8011262:	f7fd ff62 	bl	800f12a <get_fat>
 8011266:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126e:	d109      	bne.n	8011284 <f_lseek+0x364>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	755a      	strb	r2, [r3, #21]
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2101      	movs	r1, #1
 801127a:	4618      	mov	r0, r3
 801127c:	f7fd fccf 	bl	800ec1e <unlock_fs>
 8011280:	2301      	movs	r3, #1
 8011282:	e09c      	b.n	80113be <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011286:	2b01      	cmp	r3, #1
 8011288:	d904      	bls.n	8011294 <f_lseek+0x374>
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	699b      	ldr	r3, [r3, #24]
 801128e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011290:	429a      	cmp	r2, r3
 8011292:	d309      	bcc.n	80112a8 <f_lseek+0x388>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2202      	movs	r2, #2
 8011298:	755a      	strb	r2, [r3, #21]
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	2102      	movs	r1, #2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fd fcbd 	bl	800ec1e <unlock_fs>
 80112a4:	2302      	movs	r3, #2
 80112a6:	e08a      	b.n	80113be <f_lseek+0x49e>
					fp->clust = clst;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d8b6      	bhi.n	8011224 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	699a      	ldr	r2, [r3, #24]
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	441a      	add	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d017      	beq.n	80112fc <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fd ff0b 	bl	800f0ec <clust2sect>
 80112d6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d109      	bne.n	80112f2 <f_lseek+0x3d2>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2202      	movs	r2, #2
 80112e2:	755a      	strb	r2, [r3, #21]
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2102      	movs	r1, #2
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fd fc98 	bl	800ec1e <unlock_fs>
 80112ee:	2302      	movs	r3, #2
 80112f0:	e065      	b.n	80113be <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	0a5b      	lsrs	r3, r3, #9
 80112f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112f8:	4413      	add	r3, r2
 80112fa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	699a      	ldr	r2, [r3, #24]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	429a      	cmp	r2, r3
 8011306:	d90a      	bls.n	801131e <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	699a      	ldr	r2, [r3, #24]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	7d1b      	ldrb	r3, [r3, #20]
 8011314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011318:	b2da      	uxtb	r2, r3
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011326:	2b00      	cmp	r3, #0
 8011328:	d040      	beq.n	80113ac <f_lseek+0x48c>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011330:	429a      	cmp	r2, r3
 8011332:	d03b      	beq.n	80113ac <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	7d1b      	ldrb	r3, [r3, #20]
 8011338:	b25b      	sxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	da1d      	bge.n	801137a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	7858      	ldrb	r0, [r3, #1]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6a1a      	ldr	r2, [r3, #32]
 801134c:	2301      	movs	r3, #1
 801134e:	f7fd fb13 	bl	800e978 <disk_write>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d009      	beq.n	801136c <f_lseek+0x44c>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	755a      	strb	r2, [r3, #21]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	2101      	movs	r1, #1
 8011362:	4618      	mov	r0, r3
 8011364:	f7fd fc5b 	bl	800ec1e <unlock_fs>
 8011368:	2301      	movs	r3, #1
 801136a:	e028      	b.n	80113be <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	7d1b      	ldrb	r3, [r3, #20]
 8011370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011374:	b2da      	uxtb	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	7858      	ldrb	r0, [r3, #1]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011384:	2301      	movs	r3, #1
 8011386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011388:	f7fd fad6 	bl	800e938 <disk_read>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d009      	beq.n	80113a6 <f_lseek+0x486>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2201      	movs	r2, #1
 8011396:	755a      	strb	r2, [r3, #21]
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	2101      	movs	r1, #1
 801139c:	4618      	mov	r0, r3
 801139e:	f7fd fc3e 	bl	800ec1e <unlock_fs>
 80113a2:	2301      	movs	r3, #1
 80113a4:	e00b      	b.n	80113be <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80113b2:	4611      	mov	r1, r2
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fd fc32 	bl	800ec1e <unlock_fs>
 80113ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3740      	adds	r7, #64	; 0x40
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}

080113c6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80113c6:	b580      	push	{r7, lr}
 80113c8:	b086      	sub	sp, #24
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
 80113ce:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d101      	bne.n	80113da <f_opendir+0x14>
 80113d6:	2309      	movs	r3, #9
 80113d8:	e06a      	b.n	80114b0 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80113de:	f107 010c 	add.w	r1, r7, #12
 80113e2:	463b      	mov	r3, r7
 80113e4:	2200      	movs	r2, #0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fe fea8 	bl	801013c <find_volume>
 80113ec:	4603      	mov	r3, r0
 80113ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d14f      	bne.n	8011496 <f_opendir+0xd0>
		obj->fs = fs;
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	4619      	mov	r1, r3
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fe fd8f 	bl	800ff24 <follow_path>
 8011406:	4603      	mov	r3, r0
 8011408:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d13d      	bne.n	801148c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011416:	b25b      	sxtb	r3, r3
 8011418:	2b00      	cmp	r3, #0
 801141a:	db12      	blt.n	8011442 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	799b      	ldrb	r3, [r3, #6]
 8011420:	f003 0310 	and.w	r3, r3, #16
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00a      	beq.n	801143e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011428:	68fa      	ldr	r2, [r7, #12]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	4619      	mov	r1, r3
 8011430:	4610      	mov	r0, r2
 8011432:	f7fe fabe 	bl	800f9b2 <ld_clust>
 8011436:	4602      	mov	r2, r0
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	609a      	str	r2, [r3, #8]
 801143c:	e001      	b.n	8011442 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801143e:	2305      	movs	r3, #5
 8011440:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011442:	7dfb      	ldrb	r3, [r7, #23]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d121      	bne.n	801148c <f_opendir+0xc6>
				obj->id = fs->id;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	88da      	ldrh	r2, [r3, #6]
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011450:	2100      	movs	r1, #0
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f7fe f926 	bl	800f6a4 <dir_sdi>
 8011458:	4603      	mov	r3, r0
 801145a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801145c:	7dfb      	ldrb	r3, [r7, #23]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d114      	bne.n	801148c <f_opendir+0xc6>
					if (obj->sclust) {
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	689b      	ldr	r3, [r3, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00d      	beq.n	8011486 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801146a:	2100      	movs	r1, #0
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7fd fc6f 	bl	800ed50 <inc_lock>
 8011472:	4602      	mov	r2, r0
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d105      	bne.n	801148c <f_opendir+0xc6>
 8011480:	2312      	movs	r3, #18
 8011482:	75fb      	strb	r3, [r7, #23]
 8011484:	e002      	b.n	801148c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	2200      	movs	r2, #0
 801148a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801148c:	7dfb      	ldrb	r3, [r7, #23]
 801148e:	2b04      	cmp	r3, #4
 8011490:	d101      	bne.n	8011496 <f_opendir+0xd0>
 8011492:	2305      	movs	r3, #5
 8011494:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011496:	7dfb      	ldrb	r3, [r7, #23]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <f_opendir+0xdc>
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	7dfa      	ldrb	r2, [r7, #23]
 80114a6:	4611      	mov	r1, r2
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fd fbb8 	bl	800ec1e <unlock_fs>
 80114ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3718      	adds	r7, #24
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f107 0208 	add.w	r2, r7, #8
 80114c6:	4611      	mov	r1, r2
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff f88b 	bl	80105e4 <validate>
 80114ce:	4603      	mov	r3, r0
 80114d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80114d2:	7bfb      	ldrb	r3, [r7, #15]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d115      	bne.n	8011504 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d006      	beq.n	80114ee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fd fcc1 	bl	800ee6c <dec_lock>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	2100      	movs	r1, #0
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fd fb8d 	bl	800ec1e <unlock_fs>
#endif
	}
	return res;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801150e:	b580      	push	{r7, lr}
 8011510:	b084      	sub	sp, #16
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
 8011516:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f107 0208 	add.w	r2, r7, #8
 801151e:	4611      	mov	r1, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f7ff f85f 	bl	80105e4 <validate>
 8011526:	4603      	mov	r3, r0
 8011528:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801152a:	7bfb      	ldrb	r3, [r7, #15]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d126      	bne.n	801157e <f_readdir+0x70>
		if (!fno) {
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d106      	bne.n	8011544 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011536:	2100      	movs	r1, #0
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7fe f8b3 	bl	800f6a4 <dir_sdi>
 801153e:	4603      	mov	r3, r0
 8011540:	73fb      	strb	r3, [r7, #15]
 8011542:	e01c      	b.n	801157e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011544:	2100      	movs	r1, #0
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7fe fa72 	bl	800fa30 <dir_read>
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011550:	7bfb      	ldrb	r3, [r7, #15]
 8011552:	2b04      	cmp	r3, #4
 8011554:	d101      	bne.n	801155a <f_readdir+0x4c>
 8011556:	2300      	movs	r3, #0
 8011558:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d10e      	bne.n	801157e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7fe fb48 	bl	800fbf8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011568:	2100      	movs	r1, #0
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f7fe f915 	bl	800f79a <dir_next>
 8011570:	4603      	mov	r3, r0
 8011572:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011574:	7bfb      	ldrb	r3, [r7, #15]
 8011576:	2b04      	cmp	r3, #4
 8011578:	d101      	bne.n	801157e <f_readdir+0x70>
 801157a:	2300      	movs	r3, #0
 801157c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	7bfa      	ldrb	r2, [r7, #15]
 8011582:	4611      	mov	r1, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7fd fb4a 	bl	800ec1e <unlock_fs>
 801158a:	7bfb      	ldrb	r3, [r7, #15]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7ff ffb4 	bl	801150e <f_readdir>
 80115a6:	4603      	mov	r3, r0
 80115a8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80115aa:	7bfb      	ldrb	r3, [r7, #15]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d114      	bne.n	80115da <f_findnext+0x46>
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d011      	beq.n	80115da <f_findnext+0x46>
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	7a5b      	ldrb	r3, [r3, #9]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00d      	beq.n	80115da <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	f103 0109 	add.w	r1, r3, #9
 80115c8:	2300      	movs	r3, #0
 80115ca:	2200      	movs	r2, #0
 80115cc:	f7fe fb9a 	bl	800fd04 <pattern_matching>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d100      	bne.n	80115d8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80115d6:	e7e2      	b.n	801159e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80115d8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80115da:	7bfb      	ldrb	r3, [r7, #15]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b086      	sub	sp, #24
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
 80115f0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80115f8:	6879      	ldr	r1, [r7, #4]
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff fee3 	bl	80113c6 <f_opendir>
 8011600:	4603      	mov	r3, r0
 8011602:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011604:	7dfb      	ldrb	r3, [r7, #23]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d105      	bne.n	8011616 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801160a:	68b9      	ldr	r1, [r7, #8]
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7ff ffc1 	bl	8011594 <f_findnext>
 8011612:	4603      	mov	r3, r0
 8011614:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8011616:	7dfb      	ldrb	r3, [r7, #23]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011620:	b480      	push	{r7}
 8011622:	b087      	sub	sp, #28
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	4613      	mov	r3, r2
 801162c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801162e:	2301      	movs	r3, #1
 8011630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011636:	4b1f      	ldr	r3, [pc, #124]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011638:	7a5b      	ldrb	r3, [r3, #9]
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d131      	bne.n	80116a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011640:	4b1c      	ldr	r3, [pc, #112]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011642:	7a5b      	ldrb	r3, [r3, #9]
 8011644:	b2db      	uxtb	r3, r3
 8011646:	461a      	mov	r2, r3
 8011648:	4b1a      	ldr	r3, [pc, #104]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 801164a:	2100      	movs	r1, #0
 801164c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801164e:	4b19      	ldr	r3, [pc, #100]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011650:	7a5b      	ldrb	r3, [r3, #9]
 8011652:	b2db      	uxtb	r3, r3
 8011654:	4a17      	ldr	r2, [pc, #92]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	4413      	add	r3, r2
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801165e:	4b15      	ldr	r3, [pc, #84]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011660:	7a5b      	ldrb	r3, [r3, #9]
 8011662:	b2db      	uxtb	r3, r3
 8011664:	461a      	mov	r2, r3
 8011666:	4b13      	ldr	r3, [pc, #76]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011668:	4413      	add	r3, r2
 801166a:	79fa      	ldrb	r2, [r7, #7]
 801166c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801166e:	4b11      	ldr	r3, [pc, #68]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 8011670:	7a5b      	ldrb	r3, [r3, #9]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	b2d1      	uxtb	r1, r2
 8011678:	4a0e      	ldr	r2, [pc, #56]	; (80116b4 <FATFS_LinkDriverEx+0x94>)
 801167a:	7251      	strb	r1, [r2, #9]
 801167c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801167e:	7dbb      	ldrb	r3, [r7, #22]
 8011680:	3330      	adds	r3, #48	; 0x30
 8011682:	b2da      	uxtb	r2, r3
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	3301      	adds	r3, #1
 801168c:	223a      	movs	r2, #58	; 0x3a
 801168e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	3302      	adds	r3, #2
 8011694:	222f      	movs	r2, #47	; 0x2f
 8011696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	3303      	adds	r3, #3
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116a0:	2300      	movs	r3, #0
 80116a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	371c      	adds	r7, #28
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	2000030c 	.word	0x2000030c

080116b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116c2:	2200      	movs	r2, #0
 80116c4:	6839      	ldr	r1, [r7, #0]
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff ffaa 	bl	8011620 <FATFS_LinkDriverEx>
 80116cc:	4603      	mov	r3, r0
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b084      	sub	sp, #16
 80116da:	af00      	add	r7, sp, #0
 80116dc:	4603      	mov	r3, r0
 80116de:	6039      	str	r1, [r7, #0]
 80116e0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80116e2:	2200      	movs	r2, #0
 80116e4:	2101      	movs	r1, #1
 80116e6:	2001      	movs	r0, #1
 80116e8:	f000 fb8e 	bl	8011e08 <osSemaphoreNew>
 80116ec:	4602      	mov	r2, r0
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	bf14      	ite	ne
 80116fa:	2301      	movne	r3, #1
 80116fc:	2300      	moveq	r3, #0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	60fb      	str	r3, [r7, #12]

    return ret;
 8011702:	68fb      	ldr	r3, [r7, #12]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 fcd3 	bl	80120c0 <osSemaphoreDelete>
#endif
    return 1;
 801171a:	2301      	movs	r3, #1
}
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801172c:	2300      	movs	r3, #0
 801172e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 fc05 	bl	8011f44 <osSemaphoreAcquire>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d101      	bne.n	8011744 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011740:	2301      	movs	r3, #1
 8011742:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011744:	68fb      	ldr	r3, [r7, #12]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801174e:	b580      	push	{r7, lr}
 8011750:	b082      	sub	sp, #8
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fc5a 	bl	8012010 <osSemaphoreRelease>
#endif
}
 801175c:	bf00      	nop
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011764:	b480      	push	{r7}
 8011766:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011768:	bf00      	nop
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
	...

08011774 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801177a:	f3ef 8305 	mrs	r3, IPSR
 801177e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011780:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10f      	bne.n	80117a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011786:	f3ef 8310 	mrs	r3, PRIMASK
 801178a:	607b      	str	r3, [r7, #4]
  return(result);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d105      	bne.n	801179e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011792:	f3ef 8311 	mrs	r3, BASEPRI
 8011796:	603b      	str	r3, [r7, #0]
  return(result);
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d007      	beq.n	80117ae <osKernelInitialize+0x3a>
 801179e:	4b0e      	ldr	r3, [pc, #56]	; (80117d8 <osKernelInitialize+0x64>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	d103      	bne.n	80117ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80117a6:	f06f 0305 	mvn.w	r3, #5
 80117aa:	60fb      	str	r3, [r7, #12]
 80117ac:	e00c      	b.n	80117c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80117ae:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <osKernelInitialize+0x64>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d105      	bne.n	80117c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80117b6:	4b08      	ldr	r3, [pc, #32]	; (80117d8 <osKernelInitialize+0x64>)
 80117b8:	2201      	movs	r2, #1
 80117ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80117bc:	2300      	movs	r3, #0
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e002      	b.n	80117c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80117c2:	f04f 33ff 	mov.w	r3, #4294967295
 80117c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80117c8:	68fb      	ldr	r3, [r7, #12]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3714      	adds	r7, #20
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	20000318 	.word	0x20000318

080117dc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80117e2:	f002 fec5 	bl	8014570 <xTaskGetSchedulerState>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d004      	beq.n	80117f6 <osKernelGetState+0x1a>
 80117ec:	2b02      	cmp	r3, #2
 80117ee:	d105      	bne.n	80117fc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80117f0:	2302      	movs	r3, #2
 80117f2:	607b      	str	r3, [r7, #4]
      break;
 80117f4:	e00c      	b.n	8011810 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80117f6:	2303      	movs	r3, #3
 80117f8:	607b      	str	r3, [r7, #4]
      break;
 80117fa:	e009      	b.n	8011810 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80117fc:	4b07      	ldr	r3, [pc, #28]	; (801181c <osKernelGetState+0x40>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d102      	bne.n	801180a <osKernelGetState+0x2e>
        state = osKernelReady;
 8011804:	2301      	movs	r3, #1
 8011806:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011808:	e001      	b.n	801180e <osKernelGetState+0x32>
        state = osKernelInactive;
 801180a:	2300      	movs	r3, #0
 801180c:	607b      	str	r3, [r7, #4]
      break;
 801180e:	bf00      	nop
  }

  return (state);
 8011810:	687b      	ldr	r3, [r7, #4]
}
 8011812:	4618      	mov	r0, r3
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20000318 	.word	0x20000318

08011820 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011826:	f3ef 8305 	mrs	r3, IPSR
 801182a:	60bb      	str	r3, [r7, #8]
  return(result);
 801182c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801182e:	2b00      	cmp	r3, #0
 8011830:	d10f      	bne.n	8011852 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011832:	f3ef 8310 	mrs	r3, PRIMASK
 8011836:	607b      	str	r3, [r7, #4]
  return(result);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d105      	bne.n	801184a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801183e:	f3ef 8311 	mrs	r3, BASEPRI
 8011842:	603b      	str	r3, [r7, #0]
  return(result);
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d007      	beq.n	801185a <osKernelStart+0x3a>
 801184a:	4b0f      	ldr	r3, [pc, #60]	; (8011888 <osKernelStart+0x68>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b02      	cmp	r3, #2
 8011850:	d103      	bne.n	801185a <osKernelStart+0x3a>
    stat = osErrorISR;
 8011852:	f06f 0305 	mvn.w	r3, #5
 8011856:	60fb      	str	r3, [r7, #12]
 8011858:	e010      	b.n	801187c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801185a:	4b0b      	ldr	r3, [pc, #44]	; (8011888 <osKernelStart+0x68>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b01      	cmp	r3, #1
 8011860:	d109      	bne.n	8011876 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011862:	f7ff ff7f 	bl	8011764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011866:	4b08      	ldr	r3, [pc, #32]	; (8011888 <osKernelStart+0x68>)
 8011868:	2202      	movs	r2, #2
 801186a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801186c:	f002 fa12 	bl	8013c94 <vTaskStartScheduler>
      stat = osOK;
 8011870:	2300      	movs	r3, #0
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	e002      	b.n	801187c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011876:	f04f 33ff 	mov.w	r3, #4294967295
 801187a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801187c:	68fb      	ldr	r3, [r7, #12]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	20000318 	.word	0x20000318

0801188c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011892:	f3ef 8305 	mrs	r3, IPSR
 8011896:	60bb      	str	r3, [r7, #8]
  return(result);
 8011898:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10f      	bne.n	80118be <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801189e:	f3ef 8310 	mrs	r3, PRIMASK
 80118a2:	607b      	str	r3, [r7, #4]
  return(result);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d105      	bne.n	80118b6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80118aa:	f3ef 8311 	mrs	r3, BASEPRI
 80118ae:	603b      	str	r3, [r7, #0]
  return(result);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d007      	beq.n	80118c6 <osKernelGetTickCount+0x3a>
 80118b6:	4b08      	ldr	r3, [pc, #32]	; (80118d8 <osKernelGetTickCount+0x4c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b02      	cmp	r3, #2
 80118bc:	d103      	bne.n	80118c6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80118be:	f002 fb0d 	bl	8013edc <xTaskGetTickCountFromISR>
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	e002      	b.n	80118cc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80118c6:	f002 faf9 	bl	8013ebc <xTaskGetTickCount>
 80118ca:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80118cc:	68fb      	ldr	r3, [r7, #12]
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3710      	adds	r7, #16
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	20000318 	.word	0x20000318

080118dc <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80118dc:	b480      	push	{r7}
 80118de:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80118e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
	...

080118f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b090      	sub	sp, #64	; 0x40
 80118f4:	af04      	add	r7, sp, #16
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	60b9      	str	r1, [r7, #8]
 80118fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011900:	f3ef 8305 	mrs	r3, IPSR
 8011904:	61fb      	str	r3, [r7, #28]
  return(result);
 8011906:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011908:	2b00      	cmp	r3, #0
 801190a:	f040 808f 	bne.w	8011a2c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801190e:	f3ef 8310 	mrs	r3, PRIMASK
 8011912:	61bb      	str	r3, [r7, #24]
  return(result);
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d105      	bne.n	8011926 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801191a:	f3ef 8311 	mrs	r3, BASEPRI
 801191e:	617b      	str	r3, [r7, #20]
  return(result);
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d003      	beq.n	801192e <osThreadNew+0x3e>
 8011926:	4b44      	ldr	r3, [pc, #272]	; (8011a38 <osThreadNew+0x148>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b02      	cmp	r3, #2
 801192c:	d07e      	beq.n	8011a2c <osThreadNew+0x13c>
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d07b      	beq.n	8011a2c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011934:	2380      	movs	r3, #128	; 0x80
 8011936:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011938:	2318      	movs	r3, #24
 801193a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801193c:	2300      	movs	r3, #0
 801193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011940:	f04f 33ff 	mov.w	r3, #4294967295
 8011944:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d045      	beq.n	80119d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <osThreadNew+0x6a>
        name = attr->name;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	699b      	ldr	r3, [r3, #24]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	699b      	ldr	r3, [r3, #24]
 8011966:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196a:	2b00      	cmp	r3, #0
 801196c:	d008      	beq.n	8011980 <osThreadNew+0x90>
 801196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011970:	2b38      	cmp	r3, #56	; 0x38
 8011972:	d805      	bhi.n	8011980 <osThreadNew+0x90>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	f003 0301 	and.w	r3, r3, #1
 801197c:	2b00      	cmp	r3, #0
 801197e:	d001      	beq.n	8011984 <osThreadNew+0x94>
        return (NULL);
 8011980:	2300      	movs	r3, #0
 8011982:	e054      	b.n	8011a2e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	695b      	ldr	r3, [r3, #20]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d003      	beq.n	8011994 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	695b      	ldr	r3, [r3, #20]
 8011990:	089b      	lsrs	r3, r3, #2
 8011992:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00e      	beq.n	80119ba <osThreadNew+0xca>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	2b5b      	cmp	r3, #91	; 0x5b
 80119a2:	d90a      	bls.n	80119ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d006      	beq.n	80119ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	695b      	ldr	r3, [r3, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <osThreadNew+0xca>
        mem = 1;
 80119b4:	2301      	movs	r3, #1
 80119b6:	623b      	str	r3, [r7, #32]
 80119b8:	e010      	b.n	80119dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d10c      	bne.n	80119dc <osThreadNew+0xec>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d108      	bne.n	80119dc <osThreadNew+0xec>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d104      	bne.n	80119dc <osThreadNew+0xec>
          mem = 0;
 80119d2:	2300      	movs	r3, #0
 80119d4:	623b      	str	r3, [r7, #32]
 80119d6:	e001      	b.n	80119dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80119d8:	2300      	movs	r3, #0
 80119da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80119dc:	6a3b      	ldr	r3, [r7, #32]
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d110      	bne.n	8011a04 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80119ea:	9202      	str	r2, [sp, #8]
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f001 feef 	bl	80137dc <xTaskCreateStatic>
 80119fe:	4603      	mov	r3, r0
 8011a00:	613b      	str	r3, [r7, #16]
 8011a02:	e013      	b.n	8011a2c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011a04:	6a3b      	ldr	r3, [r7, #32]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d110      	bne.n	8011a2c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	f107 0310 	add.w	r3, r7, #16
 8011a12:	9301      	str	r3, [sp, #4]
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	f001 ff3d 	bl	801389c <xTaskCreate>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d001      	beq.n	8011a2c <osThreadNew+0x13c>
          hTask = NULL;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011a2c:	693b      	ldr	r3, [r7, #16]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3730      	adds	r7, #48	; 0x30
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	20000318 	.word	0x20000318

08011a3c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a44:	f3ef 8305 	mrs	r3, IPSR
 8011a48:	613b      	str	r3, [r7, #16]
  return(result);
 8011a4a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d10f      	bne.n	8011a70 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a50:	f3ef 8310 	mrs	r3, PRIMASK
 8011a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d105      	bne.n	8011a68 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8011a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d007      	beq.n	8011a78 <osDelay+0x3c>
 8011a68:	4b0a      	ldr	r3, [pc, #40]	; (8011a94 <osDelay+0x58>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d103      	bne.n	8011a78 <osDelay+0x3c>
    stat = osErrorISR;
 8011a70:	f06f 0305 	mvn.w	r3, #5
 8011a74:	617b      	str	r3, [r7, #20]
 8011a76:	e007      	b.n	8011a88 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f002 f8d0 	bl	8013c28 <vTaskDelay>
    }
  }

  return (stat);
 8011a88:	697b      	ldr	r3, [r7, #20]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3718      	adds	r7, #24
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	20000318 	.word	0x20000318

08011a98 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b088      	sub	sp, #32
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011aa0:	f3ef 8305 	mrs	r3, IPSR
 8011aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8011aa6:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10f      	bne.n	8011acc <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aac:	f3ef 8310 	mrs	r3, PRIMASK
 8011ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d105      	bne.n	8011ac4 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8011abc:	60fb      	str	r3, [r7, #12]
  return(result);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d007      	beq.n	8011ad4 <osDelayUntil+0x3c>
 8011ac4:	4b13      	ldr	r3, [pc, #76]	; (8011b14 <osDelayUntil+0x7c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b02      	cmp	r3, #2
 8011aca:	d103      	bne.n	8011ad4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8011acc:	f06f 0305 	mvn.w	r3, #5
 8011ad0:	61fb      	str	r3, [r7, #28]
 8011ad2:	e019      	b.n	8011b08 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8011ad8:	f002 f9f0 	bl	8013ebc <xTaskGetTickCount>
 8011adc:	4603      	mov	r3, r0
 8011ade:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d009      	beq.n	8011b02 <osDelayUntil+0x6a>
 8011aee:	69bb      	ldr	r3, [r7, #24]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	db06      	blt.n	8011b02 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8011af4:	f107 0308 	add.w	r3, r7, #8
 8011af8:	69b9      	ldr	r1, [r7, #24]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f002 f814 	bl	8013b28 <vTaskDelayUntil>
 8011b00:	e002      	b.n	8011b08 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8011b02:	f06f 0303 	mvn.w	r3, #3
 8011b06:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8011b08:	69fb      	ldr	r3, [r7, #28]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3720      	adds	r7, #32
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20000318 	.word	0x20000318

08011b18 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b08a      	sub	sp, #40	; 0x28
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011b20:	2300      	movs	r3, #0
 8011b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b24:	f3ef 8305 	mrs	r3, IPSR
 8011b28:	613b      	str	r3, [r7, #16]
  return(result);
 8011b2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	f040 8085 	bne.w	8011c3c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b32:	f3ef 8310 	mrs	r3, PRIMASK
 8011b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d105      	bne.n	8011b4a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8011b42:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d003      	beq.n	8011b52 <osMutexNew+0x3a>
 8011b4a:	4b3f      	ldr	r3, [pc, #252]	; (8011c48 <osMutexNew+0x130>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d074      	beq.n	8011c3c <osMutexNew+0x124>
    if (attr != NULL) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d003      	beq.n	8011b60 <osMutexNew+0x48>
      type = attr->attr_bits;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	623b      	str	r3, [r7, #32]
 8011b5e:	e001      	b.n	8011b64 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8011b60:	2300      	movs	r3, #0
 8011b62:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011b64:	6a3b      	ldr	r3, [r7, #32]
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <osMutexNew+0x5c>
      rmtx = 1U;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	61fb      	str	r3, [r7, #28]
 8011b72:	e001      	b.n	8011b78 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8011b74:	2300      	movs	r3, #0
 8011b76:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011b78:	6a3b      	ldr	r3, [r7, #32]
 8011b7a:	f003 0308 	and.w	r3, r3, #8
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d15c      	bne.n	8011c3c <osMutexNew+0x124>
      mem = -1;
 8011b82:	f04f 33ff 	mov.w	r3, #4294967295
 8011b86:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d015      	beq.n	8011bba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d006      	beq.n	8011ba4 <osMutexNew+0x8c>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	2b4f      	cmp	r3, #79	; 0x4f
 8011b9c:	d902      	bls.n	8011ba4 <osMutexNew+0x8c>
          mem = 1;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	e00c      	b.n	8011bbe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d108      	bne.n	8011bbe <osMutexNew+0xa6>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d104      	bne.n	8011bbe <osMutexNew+0xa6>
            mem = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	61bb      	str	r3, [r7, #24]
 8011bb8:	e001      	b.n	8011bbe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d112      	bne.n	8011bea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d007      	beq.n	8011bda <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	689b      	ldr	r3, [r3, #8]
 8011bce:	4619      	mov	r1, r3
 8011bd0:	2004      	movs	r0, #4
 8011bd2:	f000 fe7c 	bl	80128ce <xQueueCreateMutexStatic>
 8011bd6:	6278      	str	r0, [r7, #36]	; 0x24
 8011bd8:	e016      	b.n	8011c08 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	4619      	mov	r1, r3
 8011be0:	2001      	movs	r0, #1
 8011be2:	f000 fe74 	bl	80128ce <xQueueCreateMutexStatic>
 8011be6:	6278      	str	r0, [r7, #36]	; 0x24
 8011be8:	e00e      	b.n	8011c08 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d10b      	bne.n	8011c08 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d004      	beq.n	8011c00 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8011bf6:	2004      	movs	r0, #4
 8011bf8:	f000 fe51 	bl	801289e <xQueueCreateMutex>
 8011bfc:	6278      	str	r0, [r7, #36]	; 0x24
 8011bfe:	e003      	b.n	8011c08 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8011c00:	2001      	movs	r0, #1
 8011c02:	f000 fe4c 	bl	801289e <xQueueCreateMutex>
 8011c06:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d00c      	beq.n	8011c28 <osMutexNew+0x110>
        if (attr != NULL) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d003      	beq.n	8011c1c <osMutexNew+0x104>
          name = attr->name;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	e001      	b.n	8011c20 <osMutexNew+0x108>
        } else {
          name = NULL;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8011c20:	6979      	ldr	r1, [r7, #20]
 8011c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c24:	f001 fd54 	bl	80136d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d006      	beq.n	8011c3c <osMutexNew+0x124>
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d003      	beq.n	8011c3c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3728      	adds	r7, #40	; 0x28
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20000318 	.word	0x20000318

08011c4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f023 0301 	bic.w	r3, r3, #1
 8011c5c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f003 0301 	and.w	r3, r3, #1
 8011c64:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c6a:	f3ef 8305 	mrs	r3, IPSR
 8011c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8011c70:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d10f      	bne.n	8011c96 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c76:	f3ef 8310 	mrs	r3, PRIMASK
 8011c7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c82:	f3ef 8311 	mrs	r3, BASEPRI
 8011c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d007      	beq.n	8011c9e <osMutexAcquire+0x52>
 8011c8e:	4b1d      	ldr	r3, [pc, #116]	; (8011d04 <osMutexAcquire+0xb8>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d103      	bne.n	8011c9e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8011c96:	f06f 0305 	mvn.w	r3, #5
 8011c9a:	61fb      	str	r3, [r7, #28]
 8011c9c:	e02c      	b.n	8011cf8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d103      	bne.n	8011cac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8011ca4:	f06f 0303 	mvn.w	r3, #3
 8011ca8:	61fb      	str	r3, [r7, #28]
 8011caa:	e025      	b.n	8011cf8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d011      	beq.n	8011cd6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011cb2:	6839      	ldr	r1, [r7, #0]
 8011cb4:	69b8      	ldr	r0, [r7, #24]
 8011cb6:	f000 fe73 	bl	80129a0 <xQueueTakeMutexRecursive>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d01b      	beq.n	8011cf8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d003      	beq.n	8011cce <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8011cc6:	f06f 0301 	mvn.w	r3, #1
 8011cca:	61fb      	str	r3, [r7, #28]
 8011ccc:	e014      	b.n	8011cf8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8011cce:	f06f 0302 	mvn.w	r3, #2
 8011cd2:	61fb      	str	r3, [r7, #28]
 8011cd4:	e010      	b.n	8011cf8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	69b8      	ldr	r0, [r7, #24]
 8011cda:	f001 fa19 	bl	8013110 <xQueueSemaphoreTake>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d009      	beq.n	8011cf8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d003      	beq.n	8011cf2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8011cea:	f06f 0301 	mvn.w	r3, #1
 8011cee:	61fb      	str	r3, [r7, #28]
 8011cf0:	e002      	b.n	8011cf8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8011cf2:	f06f 0302 	mvn.w	r3, #2
 8011cf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011cf8:	69fb      	ldr	r3, [r7, #28]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3720      	adds	r7, #32
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20000318 	.word	0x20000318

08011d08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b088      	sub	sp, #32
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f023 0301 	bic.w	r3, r3, #1
 8011d16:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f003 0301 	and.w	r3, r3, #1
 8011d1e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d24:	f3ef 8305 	mrs	r3, IPSR
 8011d28:	613b      	str	r3, [r7, #16]
  return(result);
 8011d2a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10f      	bne.n	8011d50 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d30:	f3ef 8310 	mrs	r3, PRIMASK
 8011d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d105      	bne.n	8011d48 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8011d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d007      	beq.n	8011d58 <osMutexRelease+0x50>
 8011d48:	4b16      	ldr	r3, [pc, #88]	; (8011da4 <osMutexRelease+0x9c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d103      	bne.n	8011d58 <osMutexRelease+0x50>
    stat = osErrorISR;
 8011d50:	f06f 0305 	mvn.w	r3, #5
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	e01f      	b.n	8011d98 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d103      	bne.n	8011d66 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8011d5e:	f06f 0303 	mvn.w	r3, #3
 8011d62:	61fb      	str	r3, [r7, #28]
 8011d64:	e018      	b.n	8011d98 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d009      	beq.n	8011d80 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011d6c:	69b8      	ldr	r0, [r7, #24]
 8011d6e:	f000 fde2 	bl	8012936 <xQueueGiveMutexRecursive>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d00f      	beq.n	8011d98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8011d78:	f06f 0302 	mvn.w	r3, #2
 8011d7c:	61fb      	str	r3, [r7, #28]
 8011d7e:	e00b      	b.n	8011d98 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011d80:	2300      	movs	r3, #0
 8011d82:	2200      	movs	r2, #0
 8011d84:	2100      	movs	r1, #0
 8011d86:	69b8      	ldr	r0, [r7, #24]
 8011d88:	f000 feb0 	bl	8012aec <xQueueGenericSend>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d002      	beq.n	8011d98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8011d92:	f06f 0302 	mvn.w	r3, #2
 8011d96:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8011d98:	69fb      	ldr	r3, [r7, #28]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3720      	adds	r7, #32
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	20000318 	.word	0x20000318

08011da8 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f023 0301 	bic.w	r3, r3, #1
 8011db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011db8:	f3ef 8305 	mrs	r3, IPSR
 8011dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8011dbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d112      	bne.n	8011dea <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8011dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d105      	bne.n	8011ddc <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8011dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d003      	beq.n	8011de4 <osMutexGetOwner+0x3c>
 8011ddc:	4b09      	ldr	r3, [pc, #36]	; (8011e04 <osMutexGetOwner+0x5c>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d002      	beq.n	8011dea <osMutexGetOwner+0x42>
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d102      	bne.n	8011df0 <osMutexGetOwner+0x48>
    owner = NULL;
 8011dea:	2300      	movs	r3, #0
 8011dec:	61fb      	str	r3, [r7, #28]
 8011dee:	e003      	b.n	8011df8 <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8011df0:	69b8      	ldr	r0, [r7, #24]
 8011df2:	f000 fd87 	bl	8012904 <xQueueGetMutexHolder>
 8011df6:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 8011df8:	69fb      	ldr	r3, [r7, #28]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3720      	adds	r7, #32
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	20000318 	.word	0x20000318

08011e08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b08c      	sub	sp, #48	; 0x30
 8011e0c:	af02      	add	r7, sp, #8
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011e14:	2300      	movs	r3, #0
 8011e16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e18:	f3ef 8305 	mrs	r3, IPSR
 8011e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8011e1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f040 8087 	bne.w	8011f34 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e26:	f3ef 8310 	mrs	r3, PRIMASK
 8011e2a:	617b      	str	r3, [r7, #20]
  return(result);
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d105      	bne.n	8011e3e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e32:	f3ef 8311 	mrs	r3, BASEPRI
 8011e36:	613b      	str	r3, [r7, #16]
  return(result);
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d003      	beq.n	8011e46 <osSemaphoreNew+0x3e>
 8011e3e:	4b40      	ldr	r3, [pc, #256]	; (8011f40 <osSemaphoreNew+0x138>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d076      	beq.n	8011f34 <osSemaphoreNew+0x12c>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d073      	beq.n	8011f34 <osSemaphoreNew+0x12c>
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d86f      	bhi.n	8011f34 <osSemaphoreNew+0x12c>
    mem = -1;
 8011e54:	f04f 33ff 	mov.w	r3, #4294967295
 8011e58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d015      	beq.n	8011e8c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d006      	beq.n	8011e76 <osSemaphoreNew+0x6e>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	2b4f      	cmp	r3, #79	; 0x4f
 8011e6e:	d902      	bls.n	8011e76 <osSemaphoreNew+0x6e>
        mem = 1;
 8011e70:	2301      	movs	r3, #1
 8011e72:	623b      	str	r3, [r7, #32]
 8011e74:	e00c      	b.n	8011e90 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	689b      	ldr	r3, [r3, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d108      	bne.n	8011e90 <osSemaphoreNew+0x88>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d104      	bne.n	8011e90 <osSemaphoreNew+0x88>
          mem = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	623b      	str	r3, [r7, #32]
 8011e8a:	e001      	b.n	8011e90 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011e90:	6a3b      	ldr	r3, [r7, #32]
 8011e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e96:	d04d      	beq.n	8011f34 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d129      	bne.n	8011ef2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d10b      	bne.n	8011ebc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	689a      	ldr	r2, [r3, #8]
 8011ea8:	2303      	movs	r3, #3
 8011eaa:	9300      	str	r3, [sp, #0]
 8011eac:	4613      	mov	r3, r2
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	2001      	movs	r0, #1
 8011eb4:	f000 fbf8 	bl	80126a8 <xQueueGenericCreateStatic>
 8011eb8:	6278      	str	r0, [r7, #36]	; 0x24
 8011eba:	e005      	b.n	8011ec8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	2001      	movs	r0, #1
 8011ec2:	f000 fc6e 	bl	80127a2 <xQueueGenericCreate>
 8011ec6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d022      	beq.n	8011f14 <osSemaphoreNew+0x10c>
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d01f      	beq.n	8011f14 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	2100      	movs	r1, #0
 8011eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011edc:	f000 fe06 	bl	8012aec <xQueueGenericSend>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d016      	beq.n	8011f14 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ee8:	f001 faa5 	bl	8013436 <vQueueDelete>
            hSemaphore = NULL;
 8011eec:	2300      	movs	r3, #0
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
 8011ef0:	e010      	b.n	8011f14 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d108      	bne.n	8011f0a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	461a      	mov	r2, r3
 8011efe:	68b9      	ldr	r1, [r7, #8]
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f000 fd84 	bl	8012a0e <xQueueCreateCountingSemaphoreStatic>
 8011f06:	6278      	str	r0, [r7, #36]	; 0x24
 8011f08:	e004      	b.n	8011f14 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011f0a:	68b9      	ldr	r1, [r7, #8]
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 fdb7 	bl	8012a80 <xQueueCreateCountingSemaphore>
 8011f12:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d00c      	beq.n	8011f34 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d003      	beq.n	8011f28 <osSemaphoreNew+0x120>
          name = attr->name;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	61fb      	str	r3, [r7, #28]
 8011f26:	e001      	b.n	8011f2c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011f2c:	69f9      	ldr	r1, [r7, #28]
 8011f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f30:	f001 fbce 	bl	80136d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3728      	adds	r7, #40	; 0x28
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	20000318 	.word	0x20000318

08011f44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b088      	sub	sp, #32
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011f52:	2300      	movs	r3, #0
 8011f54:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d103      	bne.n	8011f64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011f5c:	f06f 0303 	mvn.w	r3, #3
 8011f60:	61fb      	str	r3, [r7, #28]
 8011f62:	e04b      	b.n	8011ffc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f64:	f3ef 8305 	mrs	r3, IPSR
 8011f68:	617b      	str	r3, [r7, #20]
  return(result);
 8011f6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10f      	bne.n	8011f90 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f70:	f3ef 8310 	mrs	r3, PRIMASK
 8011f74:	613b      	str	r3, [r7, #16]
  return(result);
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d105      	bne.n	8011f88 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8011f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d026      	beq.n	8011fd6 <osSemaphoreAcquire+0x92>
 8011f88:	4b1f      	ldr	r3, [pc, #124]	; (8012008 <osSemaphoreAcquire+0xc4>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	d122      	bne.n	8011fd6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d003      	beq.n	8011f9e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011f96:	f06f 0303 	mvn.w	r3, #3
 8011f9a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011f9c:	e02d      	b.n	8011ffa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011fa2:	f107 0308 	add.w	r3, r7, #8
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	2100      	movs	r1, #0
 8011faa:	69b8      	ldr	r0, [r7, #24]
 8011fac:	f001 f9c0 	bl	8013330 <xQueueReceiveFromISR>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d003      	beq.n	8011fbe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011fb6:	f06f 0302 	mvn.w	r3, #2
 8011fba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011fbc:	e01d      	b.n	8011ffa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01a      	beq.n	8011ffa <osSemaphoreAcquire+0xb6>
 8011fc4:	4b11      	ldr	r3, [pc, #68]	; (801200c <osSemaphoreAcquire+0xc8>)
 8011fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011fd4:	e011      	b.n	8011ffa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011fd6:	6839      	ldr	r1, [r7, #0]
 8011fd8:	69b8      	ldr	r0, [r7, #24]
 8011fda:	f001 f899 	bl	8013110 <xQueueSemaphoreTake>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d00b      	beq.n	8011ffc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d003      	beq.n	8011ff2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011fea:	f06f 0301 	mvn.w	r3, #1
 8011fee:	61fb      	str	r3, [r7, #28]
 8011ff0:	e004      	b.n	8011ffc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011ff2:	f06f 0302 	mvn.w	r3, #2
 8011ff6:	61fb      	str	r3, [r7, #28]
 8011ff8:	e000      	b.n	8011ffc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011ffa:	bf00      	nop
      }
    }
  }

  return (stat);
 8011ffc:	69fb      	ldr	r3, [r7, #28]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3720      	adds	r7, #32
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	20000318 	.word	0x20000318
 801200c:	e000ed04 	.word	0xe000ed04

08012010 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012010:	b580      	push	{r7, lr}
 8012012:	b088      	sub	sp, #32
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801201c:	2300      	movs	r3, #0
 801201e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d103      	bne.n	801202e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012026:	f06f 0303 	mvn.w	r3, #3
 801202a:	61fb      	str	r3, [r7, #28]
 801202c:	e03e      	b.n	80120ac <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801202e:	f3ef 8305 	mrs	r3, IPSR
 8012032:	617b      	str	r3, [r7, #20]
  return(result);
 8012034:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10f      	bne.n	801205a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801203a:	f3ef 8310 	mrs	r3, PRIMASK
 801203e:	613b      	str	r3, [r7, #16]
  return(result);
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d105      	bne.n	8012052 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012046:	f3ef 8311 	mrs	r3, BASEPRI
 801204a:	60fb      	str	r3, [r7, #12]
  return(result);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d01e      	beq.n	8012090 <osSemaphoreRelease+0x80>
 8012052:	4b19      	ldr	r3, [pc, #100]	; (80120b8 <osSemaphoreRelease+0xa8>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b02      	cmp	r3, #2
 8012058:	d11a      	bne.n	8012090 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801205a:	2300      	movs	r3, #0
 801205c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801205e:	f107 0308 	add.w	r3, r7, #8
 8012062:	4619      	mov	r1, r3
 8012064:	69b8      	ldr	r0, [r7, #24]
 8012066:	f000 fedf 	bl	8012e28 <xQueueGiveFromISR>
 801206a:	4603      	mov	r3, r0
 801206c:	2b01      	cmp	r3, #1
 801206e:	d003      	beq.n	8012078 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012070:	f06f 0302 	mvn.w	r3, #2
 8012074:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012076:	e018      	b.n	80120aa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d015      	beq.n	80120aa <osSemaphoreRelease+0x9a>
 801207e:	4b0f      	ldr	r3, [pc, #60]	; (80120bc <osSemaphoreRelease+0xac>)
 8012080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012084:	601a      	str	r2, [r3, #0]
 8012086:	f3bf 8f4f 	dsb	sy
 801208a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801208e:	e00c      	b.n	80120aa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012090:	2300      	movs	r3, #0
 8012092:	2200      	movs	r2, #0
 8012094:	2100      	movs	r1, #0
 8012096:	69b8      	ldr	r0, [r7, #24]
 8012098:	f000 fd28 	bl	8012aec <xQueueGenericSend>
 801209c:	4603      	mov	r3, r0
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d004      	beq.n	80120ac <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80120a2:	f06f 0302 	mvn.w	r3, #2
 80120a6:	61fb      	str	r3, [r7, #28]
 80120a8:	e000      	b.n	80120ac <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80120aa:	bf00      	nop
    }
  }

  return (stat);
 80120ac:	69fb      	ldr	r3, [r7, #28]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3720      	adds	r7, #32
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20000318 	.word	0x20000318
 80120bc:	e000ed04 	.word	0xe000ed04

080120c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b088      	sub	sp, #32
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120cc:	f3ef 8305 	mrs	r3, IPSR
 80120d0:	617b      	str	r3, [r7, #20]
  return(result);
 80120d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d10f      	bne.n	80120f8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120d8:	f3ef 8310 	mrs	r3, PRIMASK
 80120dc:	613b      	str	r3, [r7, #16]
  return(result);
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d105      	bne.n	80120f0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120e4:	f3ef 8311 	mrs	r3, BASEPRI
 80120e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d007      	beq.n	8012100 <osSemaphoreDelete+0x40>
 80120f0:	4b0d      	ldr	r3, [pc, #52]	; (8012128 <osSemaphoreDelete+0x68>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d103      	bne.n	8012100 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80120f8:	f06f 0305 	mvn.w	r3, #5
 80120fc:	61fb      	str	r3, [r7, #28]
 80120fe:	e00e      	b.n	801211e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d103      	bne.n	801210e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012106:	f06f 0303 	mvn.w	r3, #3
 801210a:	61fb      	str	r3, [r7, #28]
 801210c:	e007      	b.n	801211e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801210e:	69b8      	ldr	r0, [r7, #24]
 8012110:	f001 fb06 	bl	8013720 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012114:	2300      	movs	r3, #0
 8012116:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012118:	69b8      	ldr	r0, [r7, #24]
 801211a:	f001 f98c 	bl	8013436 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801211e:	69fb      	ldr	r3, [r7, #28]
}
 8012120:	4618      	mov	r0, r3
 8012122:	3720      	adds	r7, #32
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	20000318 	.word	0x20000318

0801212c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801212c:	b580      	push	{r7, lr}
 801212e:	b08c      	sub	sp, #48	; 0x30
 8012130:	af02      	add	r7, sp, #8
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012138:	2300      	movs	r3, #0
 801213a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801213c:	f3ef 8305 	mrs	r3, IPSR
 8012140:	61bb      	str	r3, [r7, #24]
  return(result);
 8012142:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012144:	2b00      	cmp	r3, #0
 8012146:	d170      	bne.n	801222a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012148:	f3ef 8310 	mrs	r3, PRIMASK
 801214c:	617b      	str	r3, [r7, #20]
  return(result);
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d105      	bne.n	8012160 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012154:	f3ef 8311 	mrs	r3, BASEPRI
 8012158:	613b      	str	r3, [r7, #16]
  return(result);
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d003      	beq.n	8012168 <osMessageQueueNew+0x3c>
 8012160:	4b34      	ldr	r3, [pc, #208]	; (8012234 <osMessageQueueNew+0x108>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b02      	cmp	r3, #2
 8012166:	d060      	beq.n	801222a <osMessageQueueNew+0xfe>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d05d      	beq.n	801222a <osMessageQueueNew+0xfe>
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d05a      	beq.n	801222a <osMessageQueueNew+0xfe>
    mem = -1;
 8012174:	f04f 33ff 	mov.w	r3, #4294967295
 8012178:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d029      	beq.n	80121d4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	689b      	ldr	r3, [r3, #8]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d012      	beq.n	80121ae <osMessageQueueNew+0x82>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	2b4f      	cmp	r3, #79	; 0x4f
 801218e:	d90e      	bls.n	80121ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00a      	beq.n	80121ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	695a      	ldr	r2, [r3, #20]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	68b9      	ldr	r1, [r7, #8]
 80121a0:	fb01 f303 	mul.w	r3, r1, r3
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d302      	bcc.n	80121ae <osMessageQueueNew+0x82>
        mem = 1;
 80121a8:	2301      	movs	r3, #1
 80121aa:	623b      	str	r3, [r7, #32]
 80121ac:	e014      	b.n	80121d8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d110      	bne.n	80121d8 <osMessageQueueNew+0xac>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d10c      	bne.n	80121d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d108      	bne.n	80121d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	695b      	ldr	r3, [r3, #20]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d104      	bne.n	80121d8 <osMessageQueueNew+0xac>
          mem = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	623b      	str	r3, [r7, #32]
 80121d2:	e001      	b.n	80121d8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80121d4:	2300      	movs	r3, #0
 80121d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d10c      	bne.n	80121f8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	691a      	ldr	r2, [r3, #16]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6899      	ldr	r1, [r3, #8]
 80121e6:	2300      	movs	r3, #0
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	460b      	mov	r3, r1
 80121ec:	68b9      	ldr	r1, [r7, #8]
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f000 fa5a 	bl	80126a8 <xQueueGenericCreateStatic>
 80121f4:	6278      	str	r0, [r7, #36]	; 0x24
 80121f6:	e008      	b.n	801220a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d105      	bne.n	801220a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80121fe:	2200      	movs	r2, #0
 8012200:	68b9      	ldr	r1, [r7, #8]
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f000 facd 	bl	80127a2 <xQueueGenericCreate>
 8012208:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00c      	beq.n	801222a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d003      	beq.n	801221e <osMessageQueueNew+0xf2>
        name = attr->name;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	61fb      	str	r3, [r7, #28]
 801221c:	e001      	b.n	8012222 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801221e:	2300      	movs	r3, #0
 8012220:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012222:	69f9      	ldr	r1, [r7, #28]
 8012224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012226:	f001 fa53 	bl	80136d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801222c:	4618      	mov	r0, r3
 801222e:	3728      	adds	r7, #40	; 0x28
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	20000318 	.word	0x20000318

08012238 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012238:	b580      	push	{r7, lr}
 801223a:	b08a      	sub	sp, #40	; 0x28
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	603b      	str	r3, [r7, #0]
 8012244:	4613      	mov	r3, r2
 8012246:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801224c:	2300      	movs	r3, #0
 801224e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012250:	f3ef 8305 	mrs	r3, IPSR
 8012254:	61fb      	str	r3, [r7, #28]
  return(result);
 8012256:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10f      	bne.n	801227c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801225c:	f3ef 8310 	mrs	r3, PRIMASK
 8012260:	61bb      	str	r3, [r7, #24]
  return(result);
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d105      	bne.n	8012274 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012268:	f3ef 8311 	mrs	r3, BASEPRI
 801226c:	617b      	str	r3, [r7, #20]
  return(result);
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d02c      	beq.n	80122ce <osMessageQueuePut+0x96>
 8012274:	4b28      	ldr	r3, [pc, #160]	; (8012318 <osMessageQueuePut+0xe0>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b02      	cmp	r3, #2
 801227a:	d128      	bne.n	80122ce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801227c:	6a3b      	ldr	r3, [r7, #32]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d005      	beq.n	801228e <osMessageQueuePut+0x56>
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d002      	beq.n	801228e <osMessageQueuePut+0x56>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d003      	beq.n	8012296 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801228e:	f06f 0303 	mvn.w	r3, #3
 8012292:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012294:	e039      	b.n	801230a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012296:	2300      	movs	r3, #0
 8012298:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801229a:	f107 0210 	add.w	r2, r7, #16
 801229e:	2300      	movs	r3, #0
 80122a0:	68b9      	ldr	r1, [r7, #8]
 80122a2:	6a38      	ldr	r0, [r7, #32]
 80122a4:	f000 fd24 	bl	8012cf0 <xQueueGenericSendFromISR>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d003      	beq.n	80122b6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80122ae:	f06f 0302 	mvn.w	r3, #2
 80122b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122b4:	e029      	b.n	801230a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d026      	beq.n	801230a <osMessageQueuePut+0xd2>
 80122bc:	4b17      	ldr	r3, [pc, #92]	; (801231c <osMessageQueuePut+0xe4>)
 80122be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122c2:	601a      	str	r2, [r3, #0]
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122cc:	e01d      	b.n	801230a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d002      	beq.n	80122da <osMessageQueuePut+0xa2>
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d103      	bne.n	80122e2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80122da:	f06f 0303 	mvn.w	r3, #3
 80122de:	627b      	str	r3, [r7, #36]	; 0x24
 80122e0:	e014      	b.n	801230c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80122e2:	2300      	movs	r3, #0
 80122e4:	683a      	ldr	r2, [r7, #0]
 80122e6:	68b9      	ldr	r1, [r7, #8]
 80122e8:	6a38      	ldr	r0, [r7, #32]
 80122ea:	f000 fbff 	bl	8012aec <xQueueGenericSend>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d00b      	beq.n	801230c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80122fa:	f06f 0301 	mvn.w	r3, #1
 80122fe:	627b      	str	r3, [r7, #36]	; 0x24
 8012300:	e004      	b.n	801230c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012302:	f06f 0302 	mvn.w	r3, #2
 8012306:	627b      	str	r3, [r7, #36]	; 0x24
 8012308:	e000      	b.n	801230c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801230a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801230e:	4618      	mov	r0, r3
 8012310:	3728      	adds	r7, #40	; 0x28
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	20000318 	.word	0x20000318
 801231c:	e000ed04 	.word	0xe000ed04

08012320 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	; 0x28
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012332:	2300      	movs	r3, #0
 8012334:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012336:	f3ef 8305 	mrs	r3, IPSR
 801233a:	61fb      	str	r3, [r7, #28]
  return(result);
 801233c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10f      	bne.n	8012362 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012342:	f3ef 8310 	mrs	r3, PRIMASK
 8012346:	61bb      	str	r3, [r7, #24]
  return(result);
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d105      	bne.n	801235a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801234e:	f3ef 8311 	mrs	r3, BASEPRI
 8012352:	617b      	str	r3, [r7, #20]
  return(result);
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d02c      	beq.n	80123b4 <osMessageQueueGet+0x94>
 801235a:	4b28      	ldr	r3, [pc, #160]	; (80123fc <osMessageQueueGet+0xdc>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b02      	cmp	r3, #2
 8012360:	d128      	bne.n	80123b4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d005      	beq.n	8012374 <osMessageQueueGet+0x54>
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d002      	beq.n	8012374 <osMessageQueueGet+0x54>
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d003      	beq.n	801237c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012374:	f06f 0303 	mvn.w	r3, #3
 8012378:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801237a:	e038      	b.n	80123ee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801237c:	2300      	movs	r3, #0
 801237e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012380:	f107 0310 	add.w	r3, r7, #16
 8012384:	461a      	mov	r2, r3
 8012386:	68b9      	ldr	r1, [r7, #8]
 8012388:	6a38      	ldr	r0, [r7, #32]
 801238a:	f000 ffd1 	bl	8013330 <xQueueReceiveFromISR>
 801238e:	4603      	mov	r3, r0
 8012390:	2b01      	cmp	r3, #1
 8012392:	d003      	beq.n	801239c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012394:	f06f 0302 	mvn.w	r3, #2
 8012398:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801239a:	e028      	b.n	80123ee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d025      	beq.n	80123ee <osMessageQueueGet+0xce>
 80123a2:	4b17      	ldr	r3, [pc, #92]	; (8012400 <osMessageQueueGet+0xe0>)
 80123a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123a8:	601a      	str	r2, [r3, #0]
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80123b2:	e01c      	b.n	80123ee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d002      	beq.n	80123c0 <osMessageQueueGet+0xa0>
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d103      	bne.n	80123c8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80123c0:	f06f 0303 	mvn.w	r3, #3
 80123c4:	627b      	str	r3, [r7, #36]	; 0x24
 80123c6:	e013      	b.n	80123f0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	68b9      	ldr	r1, [r7, #8]
 80123cc:	6a38      	ldr	r0, [r7, #32]
 80123ce:	f000 fdbd 	bl	8012f4c <xQueueReceive>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d00b      	beq.n	80123f0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d003      	beq.n	80123e6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80123de:	f06f 0301 	mvn.w	r3, #1
 80123e2:	627b      	str	r3, [r7, #36]	; 0x24
 80123e4:	e004      	b.n	80123f0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80123e6:	f06f 0302 	mvn.w	r3, #2
 80123ea:	627b      	str	r3, [r7, #36]	; 0x24
 80123ec:	e000      	b.n	80123f0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80123ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3728      	adds	r7, #40	; 0x28
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	20000318 	.word	0x20000318
 8012400:	e000ed04 	.word	0xe000ed04

08012404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012404:	b480      	push	{r7}
 8012406:	b085      	sub	sp, #20
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	4a07      	ldr	r2, [pc, #28]	; (8012430 <vApplicationGetIdleTaskMemory+0x2c>)
 8012414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	4a06      	ldr	r2, [pc, #24]	; (8012434 <vApplicationGetIdleTaskMemory+0x30>)
 801241a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2280      	movs	r2, #128	; 0x80
 8012420:	601a      	str	r2, [r3, #0]
}
 8012422:	bf00      	nop
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	2000031c 	.word	0x2000031c
 8012434:	20000378 	.word	0x20000378

08012438 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	4a07      	ldr	r2, [pc, #28]	; (8012464 <vApplicationGetTimerTaskMemory+0x2c>)
 8012448:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	4a06      	ldr	r2, [pc, #24]	; (8012468 <vApplicationGetTimerTaskMemory+0x30>)
 801244e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012456:	601a      	str	r2, [r3, #0]
}
 8012458:	bf00      	nop
 801245a:	3714      	adds	r7, #20
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr
 8012464:	20000578 	.word	0x20000578
 8012468:	200005d4 	.word	0x200005d4

0801246c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f103 0208 	add.w	r2, r3, #8
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f04f 32ff 	mov.w	r2, #4294967295
 8012484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f103 0208 	add.w	r2, r3, #8
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f103 0208 	add.w	r2, r3, #8
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80124ba:	bf00      	nop
 80124bc:	370c      	adds	r7, #12
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80124c6:	b480      	push	{r7}
 80124c8:	b085      	sub	sp, #20
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	689a      	ldr	r2, [r3, #8]
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	689b      	ldr	r3, [r3, #8]
 80124e8:	683a      	ldr	r2, [r7, #0]
 80124ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	1c5a      	adds	r2, r3, #1
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	601a      	str	r2, [r3, #0]
}
 8012502:	bf00      	nop
 8012504:	3714      	adds	r7, #20
 8012506:	46bd      	mov	sp, r7
 8012508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250c:	4770      	bx	lr

0801250e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801250e:	b480      	push	{r7}
 8012510:	b085      	sub	sp, #20
 8012512:	af00      	add	r7, sp, #0
 8012514:	6078      	str	r0, [r7, #4]
 8012516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012524:	d103      	bne.n	801252e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	60fb      	str	r3, [r7, #12]
 801252c:	e00c      	b.n	8012548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3308      	adds	r3, #8
 8012532:	60fb      	str	r3, [r7, #12]
 8012534:	e002      	b.n	801253c <vListInsert+0x2e>
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	68ba      	ldr	r2, [r7, #8]
 8012544:	429a      	cmp	r2, r3
 8012546:	d2f6      	bcs.n	8012536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	683a      	ldr	r2, [r7, #0]
 8012556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	683a      	ldr	r2, [r7, #0]
 8012562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	601a      	str	r2, [r3, #0]
}
 8012574:	bf00      	nop
 8012576:	3714      	adds	r7, #20
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012580:	b480      	push	{r7}
 8012582:	b085      	sub	sp, #20
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	691b      	ldr	r3, [r3, #16]
 801258c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	6892      	ldr	r2, [r2, #8]
 8012596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	689b      	ldr	r3, [r3, #8]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	6852      	ldr	r2, [r2, #4]
 80125a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d103      	bne.n	80125b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	689a      	ldr	r2, [r3, #8]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	1e5a      	subs	r2, r3, #1
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3714      	adds	r7, #20
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr

080125d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d10b      	bne.n	8012600 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80125e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ec:	b672      	cpsid	i
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	b662      	cpsie	i
 80125fc:	60bb      	str	r3, [r7, #8]
 80125fe:	e7fe      	b.n	80125fe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8012600:	f002 fdf2 	bl	80151e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801260c:	68f9      	ldr	r1, [r7, #12]
 801260e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012610:	fb01 f303 	mul.w	r3, r1, r3
 8012614:	441a      	add	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2200      	movs	r2, #0
 801261e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012630:	3b01      	subs	r3, #1
 8012632:	68f9      	ldr	r1, [r7, #12]
 8012634:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012636:	fb01 f303 	mul.w	r3, r1, r3
 801263a:	441a      	add	r2, r3
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	22ff      	movs	r2, #255	; 0xff
 8012644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	22ff      	movs	r2, #255	; 0xff
 801264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d114      	bne.n	8012680 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d01a      	beq.n	8012694 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3310      	adds	r3, #16
 8012662:	4618      	mov	r0, r3
 8012664:	f001 fdb6 	bl	80141d4 <xTaskRemoveFromEventList>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d012      	beq.n	8012694 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801266e:	4b0d      	ldr	r3, [pc, #52]	; (80126a4 <xQueueGenericReset+0xd0>)
 8012670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	e009      	b.n	8012694 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	3310      	adds	r3, #16
 8012684:	4618      	mov	r0, r3
 8012686:	f7ff fef1 	bl	801246c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	3324      	adds	r3, #36	; 0x24
 801268e:	4618      	mov	r0, r3
 8012690:	f7ff feec 	bl	801246c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012694:	f002 fdda 	bl	801524c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012698:	2301      	movs	r3, #1
}
 801269a:	4618      	mov	r0, r3
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	e000ed04 	.word	0xe000ed04

080126a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08e      	sub	sp, #56	; 0x38
 80126ac:	af02      	add	r7, sp, #8
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10b      	bne.n	80126d4 <xQueueGenericCreateStatic+0x2c>
 80126bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c0:	b672      	cpsid	i
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	b662      	cpsie	i
 80126d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80126d2:	e7fe      	b.n	80126d2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d10b      	bne.n	80126f2 <xQueueGenericCreateStatic+0x4a>
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	b672      	cpsid	i
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	b662      	cpsie	i
 80126ee:	627b      	str	r3, [r7, #36]	; 0x24
 80126f0:	e7fe      	b.n	80126f0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <xQueueGenericCreateStatic+0x56>
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d001      	beq.n	8012702 <xQueueGenericCreateStatic+0x5a>
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <xQueueGenericCreateStatic+0x5c>
 8012702:	2300      	movs	r3, #0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10b      	bne.n	8012720 <xQueueGenericCreateStatic+0x78>
 8012708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270c:	b672      	cpsid	i
 801270e:	f383 8811 	msr	BASEPRI, r3
 8012712:	f3bf 8f6f 	isb	sy
 8012716:	f3bf 8f4f 	dsb	sy
 801271a:	b662      	cpsie	i
 801271c:	623b      	str	r3, [r7, #32]
 801271e:	e7fe      	b.n	801271e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d102      	bne.n	801272c <xQueueGenericCreateStatic+0x84>
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d101      	bne.n	8012730 <xQueueGenericCreateStatic+0x88>
 801272c:	2301      	movs	r3, #1
 801272e:	e000      	b.n	8012732 <xQueueGenericCreateStatic+0x8a>
 8012730:	2300      	movs	r3, #0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d10b      	bne.n	801274e <xQueueGenericCreateStatic+0xa6>
 8012736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273a:	b672      	cpsid	i
 801273c:	f383 8811 	msr	BASEPRI, r3
 8012740:	f3bf 8f6f 	isb	sy
 8012744:	f3bf 8f4f 	dsb	sy
 8012748:	b662      	cpsie	i
 801274a:	61fb      	str	r3, [r7, #28]
 801274c:	e7fe      	b.n	801274c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801274e:	2350      	movs	r3, #80	; 0x50
 8012750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2b50      	cmp	r3, #80	; 0x50
 8012756:	d00b      	beq.n	8012770 <xQueueGenericCreateStatic+0xc8>
 8012758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275c:	b672      	cpsid	i
 801275e:	f383 8811 	msr	BASEPRI, r3
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	b662      	cpsie	i
 801276c:	61bb      	str	r3, [r7, #24]
 801276e:	e7fe      	b.n	801276e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012770:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00d      	beq.n	8012798 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	2201      	movs	r2, #1
 8012780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012784:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	4613      	mov	r3, r2
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	68b9      	ldr	r1, [r7, #8]
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f000 f846 	bl	8012824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801279a:	4618      	mov	r0, r3
 801279c:	3730      	adds	r7, #48	; 0x30
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b08a      	sub	sp, #40	; 0x28
 80127a6:	af02      	add	r7, sp, #8
 80127a8:	60f8      	str	r0, [r7, #12]
 80127aa:	60b9      	str	r1, [r7, #8]
 80127ac:	4613      	mov	r3, r2
 80127ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d10b      	bne.n	80127ce <xQueueGenericCreate+0x2c>
 80127b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ba:	b672      	cpsid	i
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	b662      	cpsie	i
 80127ca:	613b      	str	r3, [r7, #16]
 80127cc:	e7fe      	b.n	80127cc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d102      	bne.n	80127da <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	61fb      	str	r3, [r7, #28]
 80127d8:	e004      	b.n	80127e4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	fb02 f303 	mul.w	r3, r2, r3
 80127e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	3350      	adds	r3, #80	; 0x50
 80127e8:	4618      	mov	r0, r3
 80127ea:	f002 fe1f 	bl	801542c <pvPortMalloc>
 80127ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d011      	beq.n	801281a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	3350      	adds	r3, #80	; 0x50
 80127fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	2200      	movs	r2, #0
 8012804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012808:	79fa      	ldrb	r2, [r7, #7]
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	4613      	mov	r3, r2
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 f805 	bl	8012824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801281a:	69bb      	ldr	r3, [r7, #24]
	}
 801281c:	4618      	mov	r0, r3
 801281e:	3720      	adds	r7, #32
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
 8012830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d103      	bne.n	8012840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	69ba      	ldr	r2, [r7, #24]
 801283c:	601a      	str	r2, [r3, #0]
 801283e:	e002      	b.n	8012846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	68ba      	ldr	r2, [r7, #8]
 8012850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012852:	2101      	movs	r1, #1
 8012854:	69b8      	ldr	r0, [r7, #24]
 8012856:	f7ff febd 	bl	80125d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	78fa      	ldrb	r2, [r7, #3]
 801285e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012862:	bf00      	nop
 8012864:	3710      	adds	r7, #16
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801286a:	b580      	push	{r7, lr}
 801286c:	b082      	sub	sp, #8
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d00e      	beq.n	8012896 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801288a:	2300      	movs	r3, #0
 801288c:	2200      	movs	r2, #0
 801288e:	2100      	movs	r1, #0
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 f92b 	bl	8012aec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012896:	bf00      	nop
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801289e:	b580      	push	{r7, lr}
 80128a0:	b086      	sub	sp, #24
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	4603      	mov	r3, r0
 80128a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80128a8:	2301      	movs	r3, #1
 80128aa:	617b      	str	r3, [r7, #20]
 80128ac:	2300      	movs	r3, #0
 80128ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80128b0:	79fb      	ldrb	r3, [r7, #7]
 80128b2:	461a      	mov	r2, r3
 80128b4:	6939      	ldr	r1, [r7, #16]
 80128b6:	6978      	ldr	r0, [r7, #20]
 80128b8:	f7ff ff73 	bl	80127a2 <xQueueGenericCreate>
 80128bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80128be:	68f8      	ldr	r0, [r7, #12]
 80128c0:	f7ff ffd3 	bl	801286a <prvInitialiseMutex>

		return xNewQueue;
 80128c4:	68fb      	ldr	r3, [r7, #12]
	}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b088      	sub	sp, #32
 80128d2:	af02      	add	r7, sp, #8
 80128d4:	4603      	mov	r3, r0
 80128d6:	6039      	str	r1, [r7, #0]
 80128d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80128da:	2301      	movs	r3, #1
 80128dc:	617b      	str	r3, [r7, #20]
 80128de:	2300      	movs	r3, #0
 80128e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80128e2:	79fb      	ldrb	r3, [r7, #7]
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2200      	movs	r2, #0
 80128ea:	6939      	ldr	r1, [r7, #16]
 80128ec:	6978      	ldr	r0, [r7, #20]
 80128ee:	f7ff fedb 	bl	80126a8 <xQueueGenericCreateStatic>
 80128f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80128f4:	68f8      	ldr	r0, [r7, #12]
 80128f6:	f7ff ffb8 	bl	801286a <prvInitialiseMutex>

		return xNewQueue;
 80128fa:	68fb      	ldr	r3, [r7, #12]
	}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3718      	adds	r7, #24
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8012910:	f002 fc6a 	bl	80151e8 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d103      	bne.n	8012924 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	60fb      	str	r3, [r7, #12]
 8012922:	e001      	b.n	8012928 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8012924:	2300      	movs	r3, #0
 8012926:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8012928:	f002 fc90 	bl	801524c <vPortExitCritical>

		return pxReturn;
 801292c:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 801292e:	4618      	mov	r0, r3
 8012930:	3710      	adds	r7, #16
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8012936:	b590      	push	{r4, r7, lr}
 8012938:	b087      	sub	sp, #28
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d10b      	bne.n	8012960 <xQueueGiveMutexRecursive+0x2a>
 8012948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294c:	b672      	cpsid	i
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	b662      	cpsie	i
 801295c:	60fb      	str	r3, [r7, #12]
 801295e:	e7fe      	b.n	801295e <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	689c      	ldr	r4, [r3, #8]
 8012964:	f001 fdf4 	bl	8014550 <xTaskGetCurrentTaskHandle>
 8012968:	4603      	mov	r3, r0
 801296a:	429c      	cmp	r4, r3
 801296c:	d111      	bne.n	8012992 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	1e5a      	subs	r2, r3, #1
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d105      	bne.n	801298c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8012980:	2300      	movs	r3, #0
 8012982:	2200      	movs	r2, #0
 8012984:	2100      	movs	r1, #0
 8012986:	6938      	ldr	r0, [r7, #16]
 8012988:	f000 f8b0 	bl	8012aec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801298c:	2301      	movs	r3, #1
 801298e:	617b      	str	r3, [r7, #20]
 8012990:	e001      	b.n	8012996 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8012996:	697b      	ldr	r3, [r7, #20]
	}
 8012998:	4618      	mov	r0, r3
 801299a:	371c      	adds	r7, #28
 801299c:	46bd      	mov	sp, r7
 801299e:	bd90      	pop	{r4, r7, pc}

080129a0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80129a0:	b590      	push	{r4, r7, lr}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10b      	bne.n	80129cc <xQueueTakeMutexRecursive+0x2c>
 80129b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b8:	b672      	cpsid	i
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	b662      	cpsie	i
 80129c8:	60fb      	str	r3, [r7, #12]
 80129ca:	e7fe      	b.n	80129ca <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	689c      	ldr	r4, [r3, #8]
 80129d0:	f001 fdbe 	bl	8014550 <xTaskGetCurrentTaskHandle>
 80129d4:	4603      	mov	r3, r0
 80129d6:	429c      	cmp	r4, r3
 80129d8:	d107      	bne.n	80129ea <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	1c5a      	adds	r2, r3, #1
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80129e4:	2301      	movs	r3, #1
 80129e6:	617b      	str	r3, [r7, #20]
 80129e8:	e00c      	b.n	8012a04 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80129ea:	6839      	ldr	r1, [r7, #0]
 80129ec:	6938      	ldr	r0, [r7, #16]
 80129ee:	f000 fb8f 	bl	8013110 <xQueueSemaphoreTake>
 80129f2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d004      	beq.n	8012a04 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	1c5a      	adds	r2, r3, #1
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8012a04:	697b      	ldr	r3, [r7, #20]
	}
 8012a06:	4618      	mov	r0, r3
 8012a08:	371c      	adds	r7, #28
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd90      	pop	{r4, r7, pc}

08012a0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b08a      	sub	sp, #40	; 0x28
 8012a12:	af02      	add	r7, sp, #8
 8012a14:	60f8      	str	r0, [r7, #12]
 8012a16:	60b9      	str	r1, [r7, #8]
 8012a18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d10b      	bne.n	8012a38 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8012a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a24:	b672      	cpsid	i
 8012a26:	f383 8811 	msr	BASEPRI, r3
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	b662      	cpsie	i
 8012a34:	61bb      	str	r3, [r7, #24]
 8012a36:	e7fe      	b.n	8012a36 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012a38:	68ba      	ldr	r2, [r7, #8]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d90b      	bls.n	8012a58 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8012a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a44:	b672      	cpsid	i
 8012a46:	f383 8811 	msr	BASEPRI, r3
 8012a4a:	f3bf 8f6f 	isb	sy
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	b662      	cpsie	i
 8012a54:	617b      	str	r3, [r7, #20]
 8012a56:	e7fe      	b.n	8012a56 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012a58:	2302      	movs	r3, #2
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	2100      	movs	r1, #0
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f7ff fe20 	bl	80126a8 <xQueueGenericCreateStatic>
 8012a68:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d002      	beq.n	8012a76 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	68ba      	ldr	r2, [r7, #8]
 8012a74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a76:	69fb      	ldr	r3, [r7, #28]
	}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3720      	adds	r7, #32
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b086      	sub	sp, #24
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d10b      	bne.n	8012aa8 <xQueueCreateCountingSemaphore+0x28>
 8012a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a94:	b672      	cpsid	i
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	b662      	cpsie	i
 8012aa4:	613b      	str	r3, [r7, #16]
 8012aa6:	e7fe      	b.n	8012aa6 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012aa8:	683a      	ldr	r2, [r7, #0]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d90b      	bls.n	8012ac8 <xQueueCreateCountingSemaphore+0x48>
 8012ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab4:	b672      	cpsid	i
 8012ab6:	f383 8811 	msr	BASEPRI, r3
 8012aba:	f3bf 8f6f 	isb	sy
 8012abe:	f3bf 8f4f 	dsb	sy
 8012ac2:	b662      	cpsie	i
 8012ac4:	60fb      	str	r3, [r7, #12]
 8012ac6:	e7fe      	b.n	8012ac6 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012ac8:	2202      	movs	r2, #2
 8012aca:	2100      	movs	r1, #0
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7ff fe68 	bl	80127a2 <xQueueGenericCreate>
 8012ad2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d002      	beq.n	8012ae0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012ae0:	697b      	ldr	r3, [r7, #20]
	}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3718      	adds	r7, #24
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
	...

08012aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08e      	sub	sp, #56	; 0x38
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	607a      	str	r2, [r7, #4]
 8012af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012afa:	2300      	movs	r3, #0
 8012afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10b      	bne.n	8012b20 <xQueueGenericSend+0x34>
 8012b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0c:	b672      	cpsid	i
 8012b0e:	f383 8811 	msr	BASEPRI, r3
 8012b12:	f3bf 8f6f 	isb	sy
 8012b16:	f3bf 8f4f 	dsb	sy
 8012b1a:	b662      	cpsie	i
 8012b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b1e:	e7fe      	b.n	8012b1e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d103      	bne.n	8012b2e <xQueueGenericSend+0x42>
 8012b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d101      	bne.n	8012b32 <xQueueGenericSend+0x46>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e000      	b.n	8012b34 <xQueueGenericSend+0x48>
 8012b32:	2300      	movs	r3, #0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10b      	bne.n	8012b50 <xQueueGenericSend+0x64>
 8012b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3c:	b672      	cpsid	i
 8012b3e:	f383 8811 	msr	BASEPRI, r3
 8012b42:	f3bf 8f6f 	isb	sy
 8012b46:	f3bf 8f4f 	dsb	sy
 8012b4a:	b662      	cpsie	i
 8012b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8012b4e:	e7fe      	b.n	8012b4e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d103      	bne.n	8012b5e <xQueueGenericSend+0x72>
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d101      	bne.n	8012b62 <xQueueGenericSend+0x76>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e000      	b.n	8012b64 <xQueueGenericSend+0x78>
 8012b62:	2300      	movs	r3, #0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10b      	bne.n	8012b80 <xQueueGenericSend+0x94>
 8012b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6c:	b672      	cpsid	i
 8012b6e:	f383 8811 	msr	BASEPRI, r3
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	b662      	cpsie	i
 8012b7c:	623b      	str	r3, [r7, #32]
 8012b7e:	e7fe      	b.n	8012b7e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b80:	f001 fcf6 	bl	8014570 <xTaskGetSchedulerState>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d102      	bne.n	8012b90 <xQueueGenericSend+0xa4>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d101      	bne.n	8012b94 <xQueueGenericSend+0xa8>
 8012b90:	2301      	movs	r3, #1
 8012b92:	e000      	b.n	8012b96 <xQueueGenericSend+0xaa>
 8012b94:	2300      	movs	r3, #0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10b      	bne.n	8012bb2 <xQueueGenericSend+0xc6>
 8012b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9e:	b672      	cpsid	i
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	b662      	cpsie	i
 8012bae:	61fb      	str	r3, [r7, #28]
 8012bb0:	e7fe      	b.n	8012bb0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bb2:	f002 fb19 	bl	80151e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d302      	bcc.n	8012bc8 <xQueueGenericSend+0xdc>
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d129      	bne.n	8012c1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	68b9      	ldr	r1, [r7, #8]
 8012bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bce:	f000 fc6e 	bl	80134ae <prvCopyDataToQueue>
 8012bd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d010      	beq.n	8012bfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	3324      	adds	r3, #36	; 0x24
 8012be0:	4618      	mov	r0, r3
 8012be2:	f001 faf7 	bl	80141d4 <xTaskRemoveFromEventList>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d013      	beq.n	8012c14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012bec:	4b3f      	ldr	r3, [pc, #252]	; (8012cec <xQueueGenericSend+0x200>)
 8012bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bf2:	601a      	str	r2, [r3, #0]
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	e00a      	b.n	8012c14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d007      	beq.n	8012c14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c04:	4b39      	ldr	r3, [pc, #228]	; (8012cec <xQueueGenericSend+0x200>)
 8012c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c0a:	601a      	str	r2, [r3, #0]
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c14:	f002 fb1a 	bl	801524c <vPortExitCritical>
				return pdPASS;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e063      	b.n	8012ce4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d103      	bne.n	8012c2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c22:	f002 fb13 	bl	801524c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e05c      	b.n	8012ce4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d106      	bne.n	8012c3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c30:	f107 0314 	add.w	r3, r7, #20
 8012c34:	4618      	mov	r0, r3
 8012c36:	f001 fb31 	bl	801429c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c3e:	f002 fb05 	bl	801524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c42:	f001 f88f 	bl	8013d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c46:	f002 facf 	bl	80151e8 <vPortEnterCritical>
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c50:	b25b      	sxtb	r3, r3
 8012c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c56:	d103      	bne.n	8012c60 <xQueueGenericSend+0x174>
 8012c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c66:	b25b      	sxtb	r3, r3
 8012c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c6c:	d103      	bne.n	8012c76 <xQueueGenericSend+0x18a>
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	2200      	movs	r2, #0
 8012c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c76:	f002 fae9 	bl	801524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c7a:	1d3a      	adds	r2, r7, #4
 8012c7c:	f107 0314 	add.w	r3, r7, #20
 8012c80:	4611      	mov	r1, r2
 8012c82:	4618      	mov	r0, r3
 8012c84:	f001 fb20 	bl	80142c8 <xTaskCheckForTimeOut>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d124      	bne.n	8012cd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c90:	f000 fd05 	bl	801369e <prvIsQueueFull>
 8012c94:	4603      	mov	r3, r0
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d018      	beq.n	8012ccc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	3310      	adds	r3, #16
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f001 fa44 	bl	8014130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012caa:	f000 fc90 	bl	80135ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012cae:	f001 f867 	bl	8013d80 <xTaskResumeAll>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f47f af7c 	bne.w	8012bb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012cba:	4b0c      	ldr	r3, [pc, #48]	; (8012cec <xQueueGenericSend+0x200>)
 8012cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc0:	601a      	str	r2, [r3, #0]
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	e772      	b.n	8012bb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cce:	f000 fc7e 	bl	80135ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012cd2:	f001 f855 	bl	8013d80 <xTaskResumeAll>
 8012cd6:	e76c      	b.n	8012bb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cda:	f000 fc78 	bl	80135ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012cde:	f001 f84f 	bl	8013d80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3738      	adds	r7, #56	; 0x38
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	e000ed04 	.word	0xe000ed04

08012cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b08e      	sub	sp, #56	; 0x38
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10b      	bne.n	8012d20 <xQueueGenericSendFromISR+0x30>
 8012d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0c:	b672      	cpsid	i
 8012d0e:	f383 8811 	msr	BASEPRI, r3
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	f3bf 8f4f 	dsb	sy
 8012d1a:	b662      	cpsie	i
 8012d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d1e:	e7fe      	b.n	8012d1e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d103      	bne.n	8012d2e <xQueueGenericSendFromISR+0x3e>
 8012d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d101      	bne.n	8012d32 <xQueueGenericSendFromISR+0x42>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e000      	b.n	8012d34 <xQueueGenericSendFromISR+0x44>
 8012d32:	2300      	movs	r3, #0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10b      	bne.n	8012d50 <xQueueGenericSendFromISR+0x60>
 8012d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3c:	b672      	cpsid	i
 8012d3e:	f383 8811 	msr	BASEPRI, r3
 8012d42:	f3bf 8f6f 	isb	sy
 8012d46:	f3bf 8f4f 	dsb	sy
 8012d4a:	b662      	cpsie	i
 8012d4c:	623b      	str	r3, [r7, #32]
 8012d4e:	e7fe      	b.n	8012d4e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d103      	bne.n	8012d5e <xQueueGenericSendFromISR+0x6e>
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d101      	bne.n	8012d62 <xQueueGenericSendFromISR+0x72>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e000      	b.n	8012d64 <xQueueGenericSendFromISR+0x74>
 8012d62:	2300      	movs	r3, #0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d10b      	bne.n	8012d80 <xQueueGenericSendFromISR+0x90>
 8012d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6c:	b672      	cpsid	i
 8012d6e:	f383 8811 	msr	BASEPRI, r3
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	f3bf 8f4f 	dsb	sy
 8012d7a:	b662      	cpsie	i
 8012d7c:	61fb      	str	r3, [r7, #28]
 8012d7e:	e7fe      	b.n	8012d7e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d80:	f002 fb12 	bl	80153a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012d84:	f3ef 8211 	mrs	r2, BASEPRI
 8012d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d8c:	b672      	cpsid	i
 8012d8e:	f383 8811 	msr	BASEPRI, r3
 8012d92:	f3bf 8f6f 	isb	sy
 8012d96:	f3bf 8f4f 	dsb	sy
 8012d9a:	b662      	cpsie	i
 8012d9c:	61ba      	str	r2, [r7, #24]
 8012d9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012da0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d302      	bcc.n	8012db6 <xQueueGenericSendFromISR+0xc6>
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	2b02      	cmp	r3, #2
 8012db4:	d12c      	bne.n	8012e10 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012dc0:	683a      	ldr	r2, [r7, #0]
 8012dc2:	68b9      	ldr	r1, [r7, #8]
 8012dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dc6:	f000 fb72 	bl	80134ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012dca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd2:	d112      	bne.n	8012dfa <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d016      	beq.n	8012e0a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dde:	3324      	adds	r3, #36	; 0x24
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 f9f7 	bl	80141d4 <xTaskRemoveFromEventList>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d00e      	beq.n	8012e0a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00b      	beq.n	8012e0a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2201      	movs	r2, #1
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	e007      	b.n	8012e0a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012dfe:	3301      	adds	r3, #1
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	b25a      	sxtb	r2, r3
 8012e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012e0e:	e001      	b.n	8012e14 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e10:	2300      	movs	r3, #0
 8012e12:	637b      	str	r3, [r7, #52]	; 0x34
 8012e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3738      	adds	r7, #56	; 0x38
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08e      	sub	sp, #56	; 0x38
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d10b      	bne.n	8012e54 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e40:	b672      	cpsid	i
 8012e42:	f383 8811 	msr	BASEPRI, r3
 8012e46:	f3bf 8f6f 	isb	sy
 8012e4a:	f3bf 8f4f 	dsb	sy
 8012e4e:	b662      	cpsie	i
 8012e50:	623b      	str	r3, [r7, #32]
 8012e52:	e7fe      	b.n	8012e52 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d00b      	beq.n	8012e74 <xQueueGiveFromISR+0x4c>
 8012e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e60:	b672      	cpsid	i
 8012e62:	f383 8811 	msr	BASEPRI, r3
 8012e66:	f3bf 8f6f 	isb	sy
 8012e6a:	f3bf 8f4f 	dsb	sy
 8012e6e:	b662      	cpsie	i
 8012e70:	61fb      	str	r3, [r7, #28]
 8012e72:	e7fe      	b.n	8012e72 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d103      	bne.n	8012e84 <xQueueGiveFromISR+0x5c>
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <xQueueGiveFromISR+0x60>
 8012e84:	2301      	movs	r3, #1
 8012e86:	e000      	b.n	8012e8a <xQueueGiveFromISR+0x62>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d10b      	bne.n	8012ea6 <xQueueGiveFromISR+0x7e>
 8012e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e92:	b672      	cpsid	i
 8012e94:	f383 8811 	msr	BASEPRI, r3
 8012e98:	f3bf 8f6f 	isb	sy
 8012e9c:	f3bf 8f4f 	dsb	sy
 8012ea0:	b662      	cpsie	i
 8012ea2:	61bb      	str	r3, [r7, #24]
 8012ea4:	e7fe      	b.n	8012ea4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ea6:	f002 fa7f 	bl	80153a8 <vPortValidateInterruptPriority>
	__asm volatile
 8012eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	b672      	cpsid	i
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	b662      	cpsie	i
 8012ec2:	617a      	str	r2, [r7, #20]
 8012ec4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012ec6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d22b      	bcs.n	8012f32 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee6:	1c5a      	adds	r2, r3, #1
 8012ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef4:	d112      	bne.n	8012f1c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d016      	beq.n	8012f2c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f00:	3324      	adds	r3, #36	; 0x24
 8012f02:	4618      	mov	r0, r3
 8012f04:	f001 f966 	bl	80141d4 <xTaskRemoveFromEventList>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00e      	beq.n	8012f2c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d00b      	beq.n	8012f2c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	2201      	movs	r2, #1
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	e007      	b.n	8012f2c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f20:	3301      	adds	r3, #1
 8012f22:	b2db      	uxtb	r3, r3
 8012f24:	b25a      	sxtb	r2, r3
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8012f30:	e001      	b.n	8012f36 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	637b      	str	r3, [r7, #52]	; 0x34
 8012f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3738      	adds	r7, #56	; 0x38
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
	...

08012f4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b08c      	sub	sp, #48	; 0x30
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d10b      	bne.n	8012f7e <xQueueReceive+0x32>
	__asm volatile
 8012f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f6a:	b672      	cpsid	i
 8012f6c:	f383 8811 	msr	BASEPRI, r3
 8012f70:	f3bf 8f6f 	isb	sy
 8012f74:	f3bf 8f4f 	dsb	sy
 8012f78:	b662      	cpsie	i
 8012f7a:	623b      	str	r3, [r7, #32]
 8012f7c:	e7fe      	b.n	8012f7c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d103      	bne.n	8012f8c <xQueueReceive+0x40>
 8012f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d101      	bne.n	8012f90 <xQueueReceive+0x44>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e000      	b.n	8012f92 <xQueueReceive+0x46>
 8012f90:	2300      	movs	r3, #0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10b      	bne.n	8012fae <xQueueReceive+0x62>
 8012f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9a:	b672      	cpsid	i
 8012f9c:	f383 8811 	msr	BASEPRI, r3
 8012fa0:	f3bf 8f6f 	isb	sy
 8012fa4:	f3bf 8f4f 	dsb	sy
 8012fa8:	b662      	cpsie	i
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	e7fe      	b.n	8012fac <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fae:	f001 fadf 	bl	8014570 <xTaskGetSchedulerState>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d102      	bne.n	8012fbe <xQueueReceive+0x72>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <xQueueReceive+0x76>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e000      	b.n	8012fc4 <xQueueReceive+0x78>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d10b      	bne.n	8012fe0 <xQueueReceive+0x94>
 8012fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fcc:	b672      	cpsid	i
 8012fce:	f383 8811 	msr	BASEPRI, r3
 8012fd2:	f3bf 8f6f 	isb	sy
 8012fd6:	f3bf 8f4f 	dsb	sy
 8012fda:	b662      	cpsie	i
 8012fdc:	61bb      	str	r3, [r7, #24]
 8012fde:	e7fe      	b.n	8012fde <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fe0:	f002 f902 	bl	80151e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fe8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d01f      	beq.n	8013030 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ff0:	68b9      	ldr	r1, [r7, #8]
 8012ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ff4:	f000 fac5 	bl	8013582 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	1e5a      	subs	r2, r3, #1
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d00f      	beq.n	8013028 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300a:	3310      	adds	r3, #16
 801300c:	4618      	mov	r0, r3
 801300e:	f001 f8e1 	bl	80141d4 <xTaskRemoveFromEventList>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d007      	beq.n	8013028 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013018:	4b3c      	ldr	r3, [pc, #240]	; (801310c <xQueueReceive+0x1c0>)
 801301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801301e:	601a      	str	r2, [r3, #0]
 8013020:	f3bf 8f4f 	dsb	sy
 8013024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013028:	f002 f910 	bl	801524c <vPortExitCritical>
				return pdPASS;
 801302c:	2301      	movs	r3, #1
 801302e:	e069      	b.n	8013104 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d103      	bne.n	801303e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013036:	f002 f909 	bl	801524c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801303a:	2300      	movs	r3, #0
 801303c:	e062      	b.n	8013104 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013044:	f107 0310 	add.w	r3, r7, #16
 8013048:	4618      	mov	r0, r3
 801304a:	f001 f927 	bl	801429c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801304e:	2301      	movs	r3, #1
 8013050:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013052:	f002 f8fb 	bl	801524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013056:	f000 fe85 	bl	8013d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801305a:	f002 f8c5 	bl	80151e8 <vPortEnterCritical>
 801305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013064:	b25b      	sxtb	r3, r3
 8013066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801306a:	d103      	bne.n	8013074 <xQueueReceive+0x128>
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	2200      	movs	r2, #0
 8013070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801307a:	b25b      	sxtb	r3, r3
 801307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013080:	d103      	bne.n	801308a <xQueueReceive+0x13e>
 8013082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013084:	2200      	movs	r2, #0
 8013086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801308a:	f002 f8df 	bl	801524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801308e:	1d3a      	adds	r2, r7, #4
 8013090:	f107 0310 	add.w	r3, r7, #16
 8013094:	4611      	mov	r1, r2
 8013096:	4618      	mov	r0, r3
 8013098:	f001 f916 	bl	80142c8 <xTaskCheckForTimeOut>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d123      	bne.n	80130ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130a4:	f000 fae5 	bl	8013672 <prvIsQueueEmpty>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d017      	beq.n	80130de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b0:	3324      	adds	r3, #36	; 0x24
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4611      	mov	r1, r2
 80130b6:	4618      	mov	r0, r3
 80130b8:	f001 f83a 	bl	8014130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80130bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130be:	f000 fa86 	bl	80135ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80130c2:	f000 fe5d 	bl	8013d80 <xTaskResumeAll>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d189      	bne.n	8012fe0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80130cc:	4b0f      	ldr	r3, [pc, #60]	; (801310c <xQueueReceive+0x1c0>)
 80130ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	f3bf 8f4f 	dsb	sy
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	e780      	b.n	8012fe0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130e0:	f000 fa75 	bl	80135ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130e4:	f000 fe4c 	bl	8013d80 <xTaskResumeAll>
 80130e8:	e77a      	b.n	8012fe0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80130ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130ec:	f000 fa6f 	bl	80135ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130f0:	f000 fe46 	bl	8013d80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f6:	f000 fabc 	bl	8013672 <prvIsQueueEmpty>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f43f af6f 	beq.w	8012fe0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013102:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013104:	4618      	mov	r0, r3
 8013106:	3730      	adds	r7, #48	; 0x30
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	e000ed04 	.word	0xe000ed04

08013110 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b08e      	sub	sp, #56	; 0x38
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801311a:	2300      	movs	r3, #0
 801311c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013122:	2300      	movs	r3, #0
 8013124:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013128:	2b00      	cmp	r3, #0
 801312a:	d10b      	bne.n	8013144 <xQueueSemaphoreTake+0x34>
 801312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013130:	b672      	cpsid	i
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	b662      	cpsie	i
 8013140:	623b      	str	r3, [r7, #32]
 8013142:	e7fe      	b.n	8013142 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00b      	beq.n	8013164 <xQueueSemaphoreTake+0x54>
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	b672      	cpsid	i
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	b662      	cpsie	i
 8013160:	61fb      	str	r3, [r7, #28]
 8013162:	e7fe      	b.n	8013162 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013164:	f001 fa04 	bl	8014570 <xTaskGetSchedulerState>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d102      	bne.n	8013174 <xQueueSemaphoreTake+0x64>
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <xQueueSemaphoreTake+0x68>
 8013174:	2301      	movs	r3, #1
 8013176:	e000      	b.n	801317a <xQueueSemaphoreTake+0x6a>
 8013178:	2300      	movs	r3, #0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d10b      	bne.n	8013196 <xQueueSemaphoreTake+0x86>
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	b672      	cpsid	i
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	b662      	cpsie	i
 8013192:	61bb      	str	r3, [r7, #24]
 8013194:	e7fe      	b.n	8013194 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013196:	f002 f827 	bl	80151e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801319e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d024      	beq.n	80131f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80131a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a8:	1e5a      	subs	r2, r3, #1
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d104      	bne.n	80131c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80131b6:	f001 fb55 	bl	8014864 <pvTaskIncrementMutexHeldCount>
 80131ba:	4602      	mov	r2, r0
 80131bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00f      	beq.n	80131e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ca:	3310      	adds	r3, #16
 80131cc:	4618      	mov	r0, r3
 80131ce:	f001 f801 	bl	80141d4 <xTaskRemoveFromEventList>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d007      	beq.n	80131e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131d8:	4b54      	ldr	r3, [pc, #336]	; (801332c <xQueueSemaphoreTake+0x21c>)
 80131da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131de:	601a      	str	r2, [r3, #0]
 80131e0:	f3bf 8f4f 	dsb	sy
 80131e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131e8:	f002 f830 	bl	801524c <vPortExitCritical>
				return pdPASS;
 80131ec:	2301      	movs	r3, #1
 80131ee:	e098      	b.n	8013322 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d112      	bne.n	801321c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d00b      	beq.n	8013214 <xQueueSemaphoreTake+0x104>
 80131fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013200:	b672      	cpsid	i
 8013202:	f383 8811 	msr	BASEPRI, r3
 8013206:	f3bf 8f6f 	isb	sy
 801320a:	f3bf 8f4f 	dsb	sy
 801320e:	b662      	cpsie	i
 8013210:	617b      	str	r3, [r7, #20]
 8013212:	e7fe      	b.n	8013212 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013214:	f002 f81a 	bl	801524c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013218:	2300      	movs	r3, #0
 801321a:	e082      	b.n	8013322 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013222:	f107 030c 	add.w	r3, r7, #12
 8013226:	4618      	mov	r0, r3
 8013228:	f001 f838 	bl	801429c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801322c:	2301      	movs	r3, #1
 801322e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013230:	f002 f80c 	bl	801524c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013234:	f000 fd96 	bl	8013d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013238:	f001 ffd6 	bl	80151e8 <vPortEnterCritical>
 801323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013242:	b25b      	sxtb	r3, r3
 8013244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013248:	d103      	bne.n	8013252 <xQueueSemaphoreTake+0x142>
 801324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324c:	2200      	movs	r2, #0
 801324e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013258:	b25b      	sxtb	r3, r3
 801325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801325e:	d103      	bne.n	8013268 <xQueueSemaphoreTake+0x158>
 8013260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013262:	2200      	movs	r2, #0
 8013264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013268:	f001 fff0 	bl	801524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801326c:	463a      	mov	r2, r7
 801326e:	f107 030c 	add.w	r3, r7, #12
 8013272:	4611      	mov	r1, r2
 8013274:	4618      	mov	r0, r3
 8013276:	f001 f827 	bl	80142c8 <xTaskCheckForTimeOut>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d132      	bne.n	80132e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013282:	f000 f9f6 	bl	8013672 <prvIsQueueEmpty>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d026      	beq.n	80132da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d109      	bne.n	80132a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013294:	f001 ffa8 	bl	80151e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	4618      	mov	r0, r3
 801329e:	f001 f985 	bl	80145ac <xTaskPriorityInherit>
 80132a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80132a4:	f001 ffd2 	bl	801524c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132aa:	3324      	adds	r3, #36	; 0x24
 80132ac:	683a      	ldr	r2, [r7, #0]
 80132ae:	4611      	mov	r1, r2
 80132b0:	4618      	mov	r0, r3
 80132b2:	f000 ff3d 	bl	8014130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132b8:	f000 f989 	bl	80135ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132bc:	f000 fd60 	bl	8013d80 <xTaskResumeAll>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	f47f af67 	bne.w	8013196 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80132c8:	4b18      	ldr	r3, [pc, #96]	; (801332c <xQueueSemaphoreTake+0x21c>)
 80132ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	f3bf 8f4f 	dsb	sy
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	e75d      	b.n	8013196 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80132da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132dc:	f000 f977 	bl	80135ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132e0:	f000 fd4e 	bl	8013d80 <xTaskResumeAll>
 80132e4:	e757      	b.n	8013196 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80132e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132e8:	f000 f971 	bl	80135ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132ec:	f000 fd48 	bl	8013d80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132f2:	f000 f9be 	bl	8013672 <prvIsQueueEmpty>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f43f af4c 	beq.w	8013196 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00d      	beq.n	8013320 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013304:	f001 ff70 	bl	80151e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801330a:	f000 f8b8 	bl	801347e <prvGetDisinheritPriorityAfterTimeout>
 801330e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	689b      	ldr	r3, [r3, #8]
 8013314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013316:	4618      	mov	r0, r3
 8013318:	f001 fa20 	bl	801475c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801331c:	f001 ff96 	bl	801524c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013320:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013322:	4618      	mov	r0, r3
 8013324:	3738      	adds	r7, #56	; 0x38
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	e000ed04 	.word	0xe000ed04

08013330 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b08e      	sub	sp, #56	; 0x38
 8013334:	af00      	add	r7, sp, #0
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10b      	bne.n	801335e <xQueueReceiveFromISR+0x2e>
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	b672      	cpsid	i
 801334c:	f383 8811 	msr	BASEPRI, r3
 8013350:	f3bf 8f6f 	isb	sy
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	b662      	cpsie	i
 801335a:	623b      	str	r3, [r7, #32]
 801335c:	e7fe      	b.n	801335c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d103      	bne.n	801336c <xQueueReceiveFromISR+0x3c>
 8013364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013368:	2b00      	cmp	r3, #0
 801336a:	d101      	bne.n	8013370 <xQueueReceiveFromISR+0x40>
 801336c:	2301      	movs	r3, #1
 801336e:	e000      	b.n	8013372 <xQueueReceiveFromISR+0x42>
 8013370:	2300      	movs	r3, #0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10b      	bne.n	801338e <xQueueReceiveFromISR+0x5e>
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	b672      	cpsid	i
 801337c:	f383 8811 	msr	BASEPRI, r3
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	f3bf 8f4f 	dsb	sy
 8013388:	b662      	cpsie	i
 801338a:	61fb      	str	r3, [r7, #28]
 801338c:	e7fe      	b.n	801338c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801338e:	f002 f80b 	bl	80153a8 <vPortValidateInterruptPriority>
	__asm volatile
 8013392:	f3ef 8211 	mrs	r2, BASEPRI
 8013396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339a:	b672      	cpsid	i
 801339c:	f383 8811 	msr	BASEPRI, r3
 80133a0:	f3bf 8f6f 	isb	sy
 80133a4:	f3bf 8f4f 	dsb	sy
 80133a8:	b662      	cpsie	i
 80133aa:	61ba      	str	r2, [r7, #24]
 80133ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d02f      	beq.n	801341e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133c8:	68b9      	ldr	r1, [r7, #8]
 80133ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133cc:	f000 f8d9 	bl	8013582 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d2:	1e5a      	subs	r2, r3, #1
 80133d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80133dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e0:	d112      	bne.n	8013408 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d016      	beq.n	8013418 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ec:	3310      	adds	r3, #16
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 fef0 	bl	80141d4 <xTaskRemoveFromEventList>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00e      	beq.n	8013418 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00b      	beq.n	8013418 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2201      	movs	r2, #1
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	e007      	b.n	8013418 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801340c:	3301      	adds	r3, #1
 801340e:	b2db      	uxtb	r3, r3
 8013410:	b25a      	sxtb	r2, r3
 8013412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013418:	2301      	movs	r3, #1
 801341a:	637b      	str	r3, [r7, #52]	; 0x34
 801341c:	e001      	b.n	8013422 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801341e:	2300      	movs	r3, #0
 8013420:	637b      	str	r3, [r7, #52]	; 0x34
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801342e:	4618      	mov	r0, r3
 8013430:	3738      	adds	r7, #56	; 0x38
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013436:	b580      	push	{r7, lr}
 8013438:	b084      	sub	sp, #16
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10b      	bne.n	8013460 <vQueueDelete+0x2a>
	__asm volatile
 8013448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344c:	b672      	cpsid	i
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	b662      	cpsie	i
 801345c:	60bb      	str	r3, [r7, #8]
 801345e:	e7fe      	b.n	801345e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013460:	68f8      	ldr	r0, [r7, #12]
 8013462:	f000 f95d 	bl	8013720 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f002 f8a3 	bl	80155bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013476:	bf00      	nop
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}

0801347e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801347e:	b480      	push	{r7}
 8013480:	b085      	sub	sp, #20
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	2b00      	cmp	r3, #0
 801348c:	d006      	beq.n	801349c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013498:	60fb      	str	r3, [r7, #12]
 801349a:	e001      	b.n	80134a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801349c:	2300      	movs	r3, #0
 801349e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80134a0:	68fb      	ldr	r3, [r7, #12]
	}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3714      	adds	r7, #20
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr

080134ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b086      	sub	sp, #24
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	60f8      	str	r0, [r7, #12]
 80134b6:	60b9      	str	r1, [r7, #8]
 80134b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134ba:	2300      	movs	r3, #0
 80134bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10d      	bne.n	80134e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d14d      	bne.n	8013570 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	4618      	mov	r0, r3
 80134da:	f001 f8cf 	bl	801467c <xTaskPriorityDisinherit>
 80134de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2200      	movs	r2, #0
 80134e4:	609a      	str	r2, [r3, #8]
 80134e6:	e043      	b.n	8013570 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d119      	bne.n	8013522 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6858      	ldr	r0, [r3, #4]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f6:	461a      	mov	r2, r3
 80134f8:	68b9      	ldr	r1, [r7, #8]
 80134fa:	f002 ff19 	bl	8016330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	685a      	ldr	r2, [r3, #4]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013506:	441a      	add	r2, r3
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	685a      	ldr	r2, [r3, #4]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	429a      	cmp	r2, r3
 8013516:	d32b      	bcc.n	8013570 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	605a      	str	r2, [r3, #4]
 8013520:	e026      	b.n	8013570 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	68d8      	ldr	r0, [r3, #12]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352a:	461a      	mov	r2, r3
 801352c:	68b9      	ldr	r1, [r7, #8]
 801352e:	f002 feff 	bl	8016330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	68da      	ldr	r2, [r3, #12]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353a:	425b      	negs	r3, r3
 801353c:	441a      	add	r2, r3
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	68da      	ldr	r2, [r3, #12]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	429a      	cmp	r2, r3
 801354c:	d207      	bcs.n	801355e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	689a      	ldr	r2, [r3, #8]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013556:	425b      	negs	r3, r3
 8013558:	441a      	add	r2, r3
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b02      	cmp	r3, #2
 8013562:	d105      	bne.n	8013570 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d002      	beq.n	8013570 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	3b01      	subs	r3, #1
 801356e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013578:	697b      	ldr	r3, [r7, #20]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3718      	adds	r7, #24
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}

08013582 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013590:	2b00      	cmp	r3, #0
 8013592:	d018      	beq.n	80135c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	68da      	ldr	r2, [r3, #12]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801359c:	441a      	add	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	68da      	ldr	r2, [r3, #12]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d303      	bcc.n	80135b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	68d9      	ldr	r1, [r3, #12]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135be:	461a      	mov	r2, r3
 80135c0:	6838      	ldr	r0, [r7, #0]
 80135c2:	f002 feb5 	bl	8016330 <memcpy>
	}
}
 80135c6:	bf00      	nop
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}

080135ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135ce:	b580      	push	{r7, lr}
 80135d0:	b084      	sub	sp, #16
 80135d2:	af00      	add	r7, sp, #0
 80135d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135d6:	f001 fe07 	bl	80151e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135e2:	e011      	b.n	8013608 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d012      	beq.n	8013612 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3324      	adds	r3, #36	; 0x24
 80135f0:	4618      	mov	r0, r3
 80135f2:	f000 fdef 	bl	80141d4 <xTaskRemoveFromEventList>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d001      	beq.n	8013600 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80135fc:	f000 fec8 	bl	8014390 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013600:	7bfb      	ldrb	r3, [r7, #15]
 8013602:	3b01      	subs	r3, #1
 8013604:	b2db      	uxtb	r3, r3
 8013606:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801360c:	2b00      	cmp	r3, #0
 801360e:	dce9      	bgt.n	80135e4 <prvUnlockQueue+0x16>
 8013610:	e000      	b.n	8013614 <prvUnlockQueue+0x46>
					break;
 8013612:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	22ff      	movs	r2, #255	; 0xff
 8013618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801361c:	f001 fe16 	bl	801524c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013620:	f001 fde2 	bl	80151e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801362a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801362c:	e011      	b.n	8013652 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	691b      	ldr	r3, [r3, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d012      	beq.n	801365c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	3310      	adds	r3, #16
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fdca 	bl	80141d4 <xTaskRemoveFromEventList>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d001      	beq.n	801364a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013646:	f000 fea3 	bl	8014390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801364a:	7bbb      	ldrb	r3, [r7, #14]
 801364c:	3b01      	subs	r3, #1
 801364e:	b2db      	uxtb	r3, r3
 8013650:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013656:	2b00      	cmp	r3, #0
 8013658:	dce9      	bgt.n	801362e <prvUnlockQueue+0x60>
 801365a:	e000      	b.n	801365e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801365c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	22ff      	movs	r2, #255	; 0xff
 8013662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013666:	f001 fdf1 	bl	801524c <vPortExitCritical>
}
 801366a:	bf00      	nop
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}

08013672 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013672:	b580      	push	{r7, lr}
 8013674:	b084      	sub	sp, #16
 8013676:	af00      	add	r7, sp, #0
 8013678:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801367a:	f001 fdb5 	bl	80151e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013682:	2b00      	cmp	r3, #0
 8013684:	d102      	bne.n	801368c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013686:	2301      	movs	r3, #1
 8013688:	60fb      	str	r3, [r7, #12]
 801368a:	e001      	b.n	8013690 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801368c:	2300      	movs	r3, #0
 801368e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013690:	f001 fddc 	bl	801524c <vPortExitCritical>

	return xReturn;
 8013694:	68fb      	ldr	r3, [r7, #12]
}
 8013696:	4618      	mov	r0, r3
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b084      	sub	sp, #16
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136a6:	f001 fd9f 	bl	80151e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d102      	bne.n	80136bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136b6:	2301      	movs	r3, #1
 80136b8:	60fb      	str	r3, [r7, #12]
 80136ba:	e001      	b.n	80136c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136bc:	2300      	movs	r3, #0
 80136be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136c0:	f001 fdc4 	bl	801524c <vPortExitCritical>

	return xReturn;
 80136c4:	68fb      	ldr	r3, [r7, #12]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
	...

080136d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136da:	2300      	movs	r3, #0
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	e014      	b.n	801370a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80136e0:	4a0e      	ldr	r2, [pc, #56]	; (801371c <vQueueAddToRegistry+0x4c>)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10b      	bne.n	8013704 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80136ec:	490b      	ldr	r1, [pc, #44]	; (801371c <vQueueAddToRegistry+0x4c>)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	683a      	ldr	r2, [r7, #0]
 80136f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80136f6:	4a09      	ldr	r2, [pc, #36]	; (801371c <vQueueAddToRegistry+0x4c>)
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	4413      	add	r3, r2
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013702:	e005      	b.n	8013710 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	3301      	adds	r3, #1
 8013708:	60fb      	str	r3, [r7, #12]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2b07      	cmp	r3, #7
 801370e:	d9e7      	bls.n	80136e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013710:	bf00      	nop
 8013712:	3714      	adds	r7, #20
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr
 801371c:	20015754 	.word	0x20015754

08013720 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013728:	2300      	movs	r3, #0
 801372a:	60fb      	str	r3, [r7, #12]
 801372c:	e016      	b.n	801375c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801372e:	4a10      	ldr	r2, [pc, #64]	; (8013770 <vQueueUnregisterQueue+0x50>)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	00db      	lsls	r3, r3, #3
 8013734:	4413      	add	r3, r2
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	429a      	cmp	r2, r3
 801373c:	d10b      	bne.n	8013756 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801373e:	4a0c      	ldr	r2, [pc, #48]	; (8013770 <vQueueUnregisterQueue+0x50>)
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2100      	movs	r1, #0
 8013744:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013748:	4a09      	ldr	r2, [pc, #36]	; (8013770 <vQueueUnregisterQueue+0x50>)
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	4413      	add	r3, r2
 8013750:	2200      	movs	r2, #0
 8013752:	605a      	str	r2, [r3, #4]
				break;
 8013754:	e005      	b.n	8013762 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	3301      	adds	r3, #1
 801375a:	60fb      	str	r3, [r7, #12]
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2b07      	cmp	r3, #7
 8013760:	d9e5      	bls.n	801372e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013762:	bf00      	nop
 8013764:	3714      	adds	r7, #20
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	20015754 	.word	0x20015754

08013774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013784:	f001 fd30 	bl	80151e8 <vPortEnterCritical>
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801378e:	b25b      	sxtb	r3, r3
 8013790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013794:	d103      	bne.n	801379e <vQueueWaitForMessageRestricted+0x2a>
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	2200      	movs	r2, #0
 801379a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137a4:	b25b      	sxtb	r3, r3
 80137a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137aa:	d103      	bne.n	80137b4 <vQueueWaitForMessageRestricted+0x40>
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	2200      	movs	r2, #0
 80137b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137b4:	f001 fd4a 	bl	801524c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d106      	bne.n	80137ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	3324      	adds	r3, #36	; 0x24
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	68b9      	ldr	r1, [r7, #8]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f000 fcd7 	bl	801417c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80137ce:	6978      	ldr	r0, [r7, #20]
 80137d0:	f7ff fefd 	bl	80135ce <prvUnlockQueue>
	}
 80137d4:	bf00      	nop
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08e      	sub	sp, #56	; 0x38
 80137e0:	af04      	add	r7, sp, #16
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d10b      	bne.n	8013808 <xTaskCreateStatic+0x2c>
 80137f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f4:	b672      	cpsid	i
 80137f6:	f383 8811 	msr	BASEPRI, r3
 80137fa:	f3bf 8f6f 	isb	sy
 80137fe:	f3bf 8f4f 	dsb	sy
 8013802:	b662      	cpsie	i
 8013804:	623b      	str	r3, [r7, #32]
 8013806:	e7fe      	b.n	8013806 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10b      	bne.n	8013826 <xTaskCreateStatic+0x4a>
 801380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013812:	b672      	cpsid	i
 8013814:	f383 8811 	msr	BASEPRI, r3
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	f3bf 8f4f 	dsb	sy
 8013820:	b662      	cpsie	i
 8013822:	61fb      	str	r3, [r7, #28]
 8013824:	e7fe      	b.n	8013824 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013826:	235c      	movs	r3, #92	; 0x5c
 8013828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	2b5c      	cmp	r3, #92	; 0x5c
 801382e:	d00b      	beq.n	8013848 <xTaskCreateStatic+0x6c>
 8013830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013834:	b672      	cpsid	i
 8013836:	f383 8811 	msr	BASEPRI, r3
 801383a:	f3bf 8f6f 	isb	sy
 801383e:	f3bf 8f4f 	dsb	sy
 8013842:	b662      	cpsie	i
 8013844:	61bb      	str	r3, [r7, #24]
 8013846:	e7fe      	b.n	8013846 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384c:	2b00      	cmp	r3, #0
 801384e:	d01e      	beq.n	801388e <xTaskCreateStatic+0xb2>
 8013850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013852:	2b00      	cmp	r3, #0
 8013854:	d01b      	beq.n	801388e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013858:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801385e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	2202      	movs	r2, #2
 8013864:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013868:	2300      	movs	r3, #0
 801386a:	9303      	str	r3, [sp, #12]
 801386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386e:	9302      	str	r3, [sp, #8]
 8013870:	f107 0314 	add.w	r3, r7, #20
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	9300      	str	r3, [sp, #0]
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	68b9      	ldr	r1, [r7, #8]
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	f000 f850 	bl	8013926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013888:	f000 f8de 	bl	8013a48 <prvAddNewTaskToReadyList>
 801388c:	e001      	b.n	8013892 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801388e:	2300      	movs	r3, #0
 8013890:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013892:	697b      	ldr	r3, [r7, #20]
	}
 8013894:	4618      	mov	r0, r3
 8013896:	3728      	adds	r7, #40	; 0x28
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801389c:	b580      	push	{r7, lr}
 801389e:	b08c      	sub	sp, #48	; 0x30
 80138a0:	af04      	add	r7, sp, #16
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	603b      	str	r3, [r7, #0]
 80138a8:	4613      	mov	r3, r2
 80138aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138ac:	88fb      	ldrh	r3, [r7, #6]
 80138ae:	009b      	lsls	r3, r3, #2
 80138b0:	4618      	mov	r0, r3
 80138b2:	f001 fdbb 	bl	801542c <pvPortMalloc>
 80138b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00e      	beq.n	80138dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138be:	205c      	movs	r0, #92	; 0x5c
 80138c0:	f001 fdb4 	bl	801542c <pvPortMalloc>
 80138c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d003      	beq.n	80138d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	697a      	ldr	r2, [r7, #20]
 80138d0:	631a      	str	r2, [r3, #48]	; 0x30
 80138d2:	e005      	b.n	80138e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138d4:	6978      	ldr	r0, [r7, #20]
 80138d6:	f001 fe71 	bl	80155bc <vPortFree>
 80138da:	e001      	b.n	80138e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138dc:	2300      	movs	r3, #0
 80138de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d017      	beq.n	8013916 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	2200      	movs	r2, #0
 80138ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138ee:	88fa      	ldrh	r2, [r7, #6]
 80138f0:	2300      	movs	r3, #0
 80138f2:	9303      	str	r3, [sp, #12]
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	9302      	str	r3, [sp, #8]
 80138f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fa:	9301      	str	r3, [sp, #4]
 80138fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	68b9      	ldr	r1, [r7, #8]
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f000 f80e 	bl	8013926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801390a:	69f8      	ldr	r0, [r7, #28]
 801390c:	f000 f89c 	bl	8013a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013910:	2301      	movs	r3, #1
 8013912:	61bb      	str	r3, [r7, #24]
 8013914:	e002      	b.n	801391c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013916:	f04f 33ff 	mov.w	r3, #4294967295
 801391a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801391c:	69bb      	ldr	r3, [r7, #24]
	}
 801391e:	4618      	mov	r0, r3
 8013920:	3720      	adds	r7, #32
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b088      	sub	sp, #32
 801392a:	af00      	add	r7, sp, #0
 801392c:	60f8      	str	r0, [r7, #12]
 801392e:	60b9      	str	r1, [r7, #8]
 8013930:	607a      	str	r2, [r7, #4]
 8013932:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013936:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	461a      	mov	r2, r3
 801393e:	21a5      	movs	r1, #165	; 0xa5
 8013940:	f002 fd01 	bl	8016346 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013948:	6879      	ldr	r1, [r7, #4]
 801394a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801394e:	440b      	add	r3, r1
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	4413      	add	r3, r2
 8013954:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	f023 0307 	bic.w	r3, r3, #7
 801395c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	f003 0307 	and.w	r3, r3, #7
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00b      	beq.n	8013980 <prvInitialiseNewTask+0x5a>
 8013968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396c:	b672      	cpsid	i
 801396e:	f383 8811 	msr	BASEPRI, r3
 8013972:	f3bf 8f6f 	isb	sy
 8013976:	f3bf 8f4f 	dsb	sy
 801397a:	b662      	cpsie	i
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	e7fe      	b.n	801397e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d01f      	beq.n	80139c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013986:	2300      	movs	r3, #0
 8013988:	61fb      	str	r3, [r7, #28]
 801398a:	e012      	b.n	80139b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	4413      	add	r3, r2
 8013992:	7819      	ldrb	r1, [r3, #0]
 8013994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	4413      	add	r3, r2
 801399a:	3334      	adds	r3, #52	; 0x34
 801399c:	460a      	mov	r2, r1
 801399e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139a0:	68ba      	ldr	r2, [r7, #8]
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	4413      	add	r3, r2
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d006      	beq.n	80139ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	3301      	adds	r3, #1
 80139b0:	61fb      	str	r3, [r7, #28]
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	2b0f      	cmp	r3, #15
 80139b6:	d9e9      	bls.n	801398c <prvInitialiseNewTask+0x66>
 80139b8:	e000      	b.n	80139bc <prvInitialiseNewTask+0x96>
			{
				break;
 80139ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139be:	2200      	movs	r2, #0
 80139c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139c4:	e003      	b.n	80139ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d0:	2b37      	cmp	r3, #55	; 0x37
 80139d2:	d901      	bls.n	80139d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139d4:	2337      	movs	r3, #55	; 0x37
 80139d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e6:	2200      	movs	r2, #0
 80139e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	3304      	adds	r3, #4
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fe fd5c 	bl	80124ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f6:	3318      	adds	r3, #24
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fe fd57 	bl	80124ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a16:	2200      	movs	r2, #0
 8013a18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a22:	683a      	ldr	r2, [r7, #0]
 8013a24:	68f9      	ldr	r1, [r7, #12]
 8013a26:	69b8      	ldr	r0, [r7, #24]
 8013a28:	f001 fad8 	bl	8014fdc <pxPortInitialiseStack>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d002      	beq.n	8013a3e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a3e:	bf00      	nop
 8013a40:	3720      	adds	r7, #32
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
	...

08013a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a50:	f001 fbca 	bl	80151e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a54:	4b2d      	ldr	r3, [pc, #180]	; (8013b0c <prvAddNewTaskToReadyList+0xc4>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	4a2c      	ldr	r2, [pc, #176]	; (8013b0c <prvAddNewTaskToReadyList+0xc4>)
 8013a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a5e:	4b2c      	ldr	r3, [pc, #176]	; (8013b10 <prvAddNewTaskToReadyList+0xc8>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d109      	bne.n	8013a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a66:	4a2a      	ldr	r2, [pc, #168]	; (8013b10 <prvAddNewTaskToReadyList+0xc8>)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a6c:	4b27      	ldr	r3, [pc, #156]	; (8013b0c <prvAddNewTaskToReadyList+0xc4>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d110      	bne.n	8013a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a74:	f000 fcb0 	bl	80143d8 <prvInitialiseTaskLists>
 8013a78:	e00d      	b.n	8013a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a7a:	4b26      	ldr	r3, [pc, #152]	; (8013b14 <prvAddNewTaskToReadyList+0xcc>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d109      	bne.n	8013a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a82:	4b23      	ldr	r3, [pc, #140]	; (8013b10 <prvAddNewTaskToReadyList+0xc8>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d802      	bhi.n	8013a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a90:	4a1f      	ldr	r2, [pc, #124]	; (8013b10 <prvAddNewTaskToReadyList+0xc8>)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a96:	4b20      	ldr	r3, [pc, #128]	; (8013b18 <prvAddNewTaskToReadyList+0xd0>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	4a1e      	ldr	r2, [pc, #120]	; (8013b18 <prvAddNewTaskToReadyList+0xd0>)
 8013a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013aa0:	4b1d      	ldr	r3, [pc, #116]	; (8013b18 <prvAddNewTaskToReadyList+0xd0>)
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aac:	4b1b      	ldr	r3, [pc, #108]	; (8013b1c <prvAddNewTaskToReadyList+0xd4>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d903      	bls.n	8013abc <prvAddNewTaskToReadyList+0x74>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab8:	4a18      	ldr	r2, [pc, #96]	; (8013b1c <prvAddNewTaskToReadyList+0xd4>)
 8013aba:	6013      	str	r3, [r2, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	4413      	add	r3, r2
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4a15      	ldr	r2, [pc, #84]	; (8013b20 <prvAddNewTaskToReadyList+0xd8>)
 8013aca:	441a      	add	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	3304      	adds	r3, #4
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	4610      	mov	r0, r2
 8013ad4:	f7fe fcf7 	bl	80124c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013ad8:	f001 fbb8 	bl	801524c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013adc:	4b0d      	ldr	r3, [pc, #52]	; (8013b14 <prvAddNewTaskToReadyList+0xcc>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00e      	beq.n	8013b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013ae4:	4b0a      	ldr	r3, [pc, #40]	; (8013b10 <prvAddNewTaskToReadyList+0xc8>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d207      	bcs.n	8013b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013af2:	4b0c      	ldr	r3, [pc, #48]	; (8013b24 <prvAddNewTaskToReadyList+0xdc>)
 8013af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	f3bf 8f4f 	dsb	sy
 8013afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b02:	bf00      	nop
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20000ea8 	.word	0x20000ea8
 8013b10:	200009d4 	.word	0x200009d4
 8013b14:	20000eb4 	.word	0x20000eb4
 8013b18:	20000ec4 	.word	0x20000ec4
 8013b1c:	20000eb0 	.word	0x20000eb0
 8013b20:	200009d8 	.word	0x200009d8
 8013b24:	e000ed04 	.word	0xe000ed04

08013b28 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b08a      	sub	sp, #40	; 0x28
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013b32:	2300      	movs	r3, #0
 8013b34:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10b      	bne.n	8013b54 <vTaskDelayUntil+0x2c>
 8013b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b40:	b672      	cpsid	i
 8013b42:	f383 8811 	msr	BASEPRI, r3
 8013b46:	f3bf 8f6f 	isb	sy
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	b662      	cpsie	i
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	e7fe      	b.n	8013b52 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d10b      	bne.n	8013b72 <vTaskDelayUntil+0x4a>
 8013b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5e:	b672      	cpsid	i
 8013b60:	f383 8811 	msr	BASEPRI, r3
 8013b64:	f3bf 8f6f 	isb	sy
 8013b68:	f3bf 8f4f 	dsb	sy
 8013b6c:	b662      	cpsie	i
 8013b6e:	613b      	str	r3, [r7, #16]
 8013b70:	e7fe      	b.n	8013b70 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8013b72:	4b2a      	ldr	r3, [pc, #168]	; (8013c1c <vTaskDelayUntil+0xf4>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00b      	beq.n	8013b92 <vTaskDelayUntil+0x6a>
 8013b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b7e:	b672      	cpsid	i
 8013b80:	f383 8811 	msr	BASEPRI, r3
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	f3bf 8f4f 	dsb	sy
 8013b8c:	b662      	cpsie	i
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	e7fe      	b.n	8013b90 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8013b92:	f000 f8e7 	bl	8013d64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013b96:	4b22      	ldr	r3, [pc, #136]	; (8013c20 <vTaskDelayUntil+0xf8>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6a3a      	ldr	r2, [r7, #32]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d20b      	bcs.n	8013bc8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	69fa      	ldr	r2, [r7, #28]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d211      	bcs.n	8013bde <vTaskDelayUntil+0xb6>
 8013bba:	69fa      	ldr	r2, [r7, #28]
 8013bbc:	6a3b      	ldr	r3, [r7, #32]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d90d      	bls.n	8013bde <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8013bc6:	e00a      	b.n	8013bde <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d303      	bcc.n	8013bda <vTaskDelayUntil+0xb2>
 8013bd2:	69fa      	ldr	r2, [r7, #28]
 8013bd4:	6a3b      	ldr	r3, [r7, #32]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d901      	bls.n	8013bde <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	69fa      	ldr	r2, [r7, #28]
 8013be2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d006      	beq.n	8013bf8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013bea:	69fa      	ldr	r2, [r7, #28]
 8013bec:	6a3b      	ldr	r3, [r7, #32]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f000 fe4a 	bl	801488c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013bf8:	f000 f8c2 	bl	8013d80 <xTaskResumeAll>
 8013bfc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013bfe:	69bb      	ldr	r3, [r7, #24]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d107      	bne.n	8013c14 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013c04:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <vTaskDelayUntil+0xfc>)
 8013c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c0a:	601a      	str	r2, [r3, #0]
 8013c0c:	f3bf 8f4f 	dsb	sy
 8013c10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c14:	bf00      	nop
 8013c16:	3728      	adds	r7, #40	; 0x28
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	20000ed0 	.word	0x20000ed0
 8013c20:	20000eac 	.word	0x20000eac
 8013c24:	e000ed04 	.word	0xe000ed04

08013c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c30:	2300      	movs	r3, #0
 8013c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d018      	beq.n	8013c6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c3a:	4b14      	ldr	r3, [pc, #80]	; (8013c8c <vTaskDelay+0x64>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d00b      	beq.n	8013c5a <vTaskDelay+0x32>
 8013c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c46:	b672      	cpsid	i
 8013c48:	f383 8811 	msr	BASEPRI, r3
 8013c4c:	f3bf 8f6f 	isb	sy
 8013c50:	f3bf 8f4f 	dsb	sy
 8013c54:	b662      	cpsie	i
 8013c56:	60bb      	str	r3, [r7, #8]
 8013c58:	e7fe      	b.n	8013c58 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8013c5a:	f000 f883 	bl	8013d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013c5e:	2100      	movs	r1, #0
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f000 fe13 	bl	801488c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013c66:	f000 f88b 	bl	8013d80 <xTaskResumeAll>
 8013c6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d107      	bne.n	8013c82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013c72:	4b07      	ldr	r3, [pc, #28]	; (8013c90 <vTaskDelay+0x68>)
 8013c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c78:	601a      	str	r2, [r3, #0]
 8013c7a:	f3bf 8f4f 	dsb	sy
 8013c7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c82:	bf00      	nop
 8013c84:	3710      	adds	r7, #16
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	20000ed0 	.word	0x20000ed0
 8013c90:	e000ed04 	.word	0xe000ed04

08013c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b08a      	sub	sp, #40	; 0x28
 8013c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013ca2:	463a      	mov	r2, r7
 8013ca4:	1d39      	adds	r1, r7, #4
 8013ca6:	f107 0308 	add.w	r3, r7, #8
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fe fbaa 	bl	8012404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013cb0:	6839      	ldr	r1, [r7, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	68ba      	ldr	r2, [r7, #8]
 8013cb6:	9202      	str	r2, [sp, #8]
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	2300      	movs	r3, #0
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	460a      	mov	r2, r1
 8013cc2:	4922      	ldr	r1, [pc, #136]	; (8013d4c <vTaskStartScheduler+0xb8>)
 8013cc4:	4822      	ldr	r0, [pc, #136]	; (8013d50 <vTaskStartScheduler+0xbc>)
 8013cc6:	f7ff fd89 	bl	80137dc <xTaskCreateStatic>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	4b21      	ldr	r3, [pc, #132]	; (8013d54 <vTaskStartScheduler+0xc0>)
 8013cce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013cd0:	4b20      	ldr	r3, [pc, #128]	; (8013d54 <vTaskStartScheduler+0xc0>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d002      	beq.n	8013cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	617b      	str	r3, [r7, #20]
 8013cdc:	e001      	b.n	8013ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d102      	bne.n	8013cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013ce8:	f000 fe24 	bl	8014934 <xTimerCreateTimerTask>
 8013cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d117      	bne.n	8013d24 <vTaskStartScheduler+0x90>
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	b672      	cpsid	i
 8013cfa:	f383 8811 	msr	BASEPRI, r3
 8013cfe:	f3bf 8f6f 	isb	sy
 8013d02:	f3bf 8f4f 	dsb	sy
 8013d06:	b662      	cpsie	i
 8013d08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013d0a:	4b13      	ldr	r3, [pc, #76]	; (8013d58 <vTaskStartScheduler+0xc4>)
 8013d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013d12:	4b12      	ldr	r3, [pc, #72]	; (8013d5c <vTaskStartScheduler+0xc8>)
 8013d14:	2201      	movs	r2, #1
 8013d16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013d18:	4b11      	ldr	r3, [pc, #68]	; (8013d60 <vTaskStartScheduler+0xcc>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013d1e:	f001 f9e7 	bl	80150f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013d22:	e00f      	b.n	8013d44 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d2a:	d10b      	bne.n	8013d44 <vTaskStartScheduler+0xb0>
 8013d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d30:	b672      	cpsid	i
 8013d32:	f383 8811 	msr	BASEPRI, r3
 8013d36:	f3bf 8f6f 	isb	sy
 8013d3a:	f3bf 8f4f 	dsb	sy
 8013d3e:	b662      	cpsie	i
 8013d40:	60fb      	str	r3, [r7, #12]
 8013d42:	e7fe      	b.n	8013d42 <vTaskStartScheduler+0xae>
}
 8013d44:	bf00      	nop
 8013d46:	3718      	adds	r7, #24
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	080182ac 	.word	0x080182ac
 8013d50:	080143a9 	.word	0x080143a9
 8013d54:	20000ecc 	.word	0x20000ecc
 8013d58:	20000ec8 	.word	0x20000ec8
 8013d5c:	20000eb4 	.word	0x20000eb4
 8013d60:	20000eac 	.word	0x20000eac

08013d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013d64:	b480      	push	{r7}
 8013d66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013d68:	4b04      	ldr	r3, [pc, #16]	; (8013d7c <vTaskSuspendAll+0x18>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	4a03      	ldr	r2, [pc, #12]	; (8013d7c <vTaskSuspendAll+0x18>)
 8013d70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013d72:	bf00      	nop
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	20000ed0 	.word	0x20000ed0

08013d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013d86:	2300      	movs	r3, #0
 8013d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013d8e:	4b42      	ldr	r3, [pc, #264]	; (8013e98 <xTaskResumeAll+0x118>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d10b      	bne.n	8013dae <xTaskResumeAll+0x2e>
 8013d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9a:	b672      	cpsid	i
 8013d9c:	f383 8811 	msr	BASEPRI, r3
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	b662      	cpsie	i
 8013daa:	603b      	str	r3, [r7, #0]
 8013dac:	e7fe      	b.n	8013dac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013dae:	f001 fa1b 	bl	80151e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013db2:	4b39      	ldr	r3, [pc, #228]	; (8013e98 <xTaskResumeAll+0x118>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	3b01      	subs	r3, #1
 8013db8:	4a37      	ldr	r2, [pc, #220]	; (8013e98 <xTaskResumeAll+0x118>)
 8013dba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dbc:	4b36      	ldr	r3, [pc, #216]	; (8013e98 <xTaskResumeAll+0x118>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d162      	bne.n	8013e8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013dc4:	4b35      	ldr	r3, [pc, #212]	; (8013e9c <xTaskResumeAll+0x11c>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d05e      	beq.n	8013e8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013dcc:	e02f      	b.n	8013e2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dce:	4b34      	ldr	r3, [pc, #208]	; (8013ea0 <xTaskResumeAll+0x120>)
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	3318      	adds	r3, #24
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fe fbd0 	bl	8012580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	3304      	adds	r3, #4
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fbcb 	bl	8012580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dee:	4b2d      	ldr	r3, [pc, #180]	; (8013ea4 <xTaskResumeAll+0x124>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d903      	bls.n	8013dfe <xTaskResumeAll+0x7e>
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dfa:	4a2a      	ldr	r2, [pc, #168]	; (8013ea4 <xTaskResumeAll+0x124>)
 8013dfc:	6013      	str	r3, [r2, #0]
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e02:	4613      	mov	r3, r2
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	4413      	add	r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	4a27      	ldr	r2, [pc, #156]	; (8013ea8 <xTaskResumeAll+0x128>)
 8013e0c:	441a      	add	r2, r3
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	3304      	adds	r3, #4
 8013e12:	4619      	mov	r1, r3
 8013e14:	4610      	mov	r0, r2
 8013e16:	f7fe fb56 	bl	80124c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e1e:	4b23      	ldr	r3, [pc, #140]	; (8013eac <xTaskResumeAll+0x12c>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d302      	bcc.n	8013e2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013e28:	4b21      	ldr	r3, [pc, #132]	; (8013eb0 <xTaskResumeAll+0x130>)
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013e2e:	4b1c      	ldr	r3, [pc, #112]	; (8013ea0 <xTaskResumeAll+0x120>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d1cb      	bne.n	8013dce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013e3c:	f000 fb68 	bl	8014510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013e40:	4b1c      	ldr	r3, [pc, #112]	; (8013eb4 <xTaskResumeAll+0x134>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d010      	beq.n	8013e6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013e4c:	f000 f858 	bl	8013f00 <xTaskIncrementTick>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013e56:	4b16      	ldr	r3, [pc, #88]	; (8013eb0 <xTaskResumeAll+0x130>)
 8013e58:	2201      	movs	r2, #1
 8013e5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	3b01      	subs	r3, #1
 8013e60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1f1      	bne.n	8013e4c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013e68:	4b12      	ldr	r3, [pc, #72]	; (8013eb4 <xTaskResumeAll+0x134>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013e6e:	4b10      	ldr	r3, [pc, #64]	; (8013eb0 <xTaskResumeAll+0x130>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d009      	beq.n	8013e8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013e76:	2301      	movs	r3, #1
 8013e78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013e7a:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <xTaskResumeAll+0x138>)
 8013e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e80:	601a      	str	r2, [r3, #0]
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e8a:	f001 f9df 	bl	801524c <vPortExitCritical>

	return xAlreadyYielded;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3710      	adds	r7, #16
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	20000ed0 	.word	0x20000ed0
 8013e9c:	20000ea8 	.word	0x20000ea8
 8013ea0:	20000e68 	.word	0x20000e68
 8013ea4:	20000eb0 	.word	0x20000eb0
 8013ea8:	200009d8 	.word	0x200009d8
 8013eac:	200009d4 	.word	0x200009d4
 8013eb0:	20000ebc 	.word	0x20000ebc
 8013eb4:	20000eb8 	.word	0x20000eb8
 8013eb8:	e000ed04 	.word	0xe000ed04

08013ebc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013ec2:	4b05      	ldr	r3, [pc, #20]	; (8013ed8 <xTaskGetTickCount+0x1c>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ec8:	687b      	ldr	r3, [r7, #4]
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	20000eac 	.word	0x20000eac

08013edc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ee2:	f001 fa61 	bl	80153a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013eea:	4b04      	ldr	r3, [pc, #16]	; (8013efc <xTaskGetTickCountFromISR+0x20>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ef0:	683b      	ldr	r3, [r7, #0]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3708      	adds	r7, #8
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	20000eac 	.word	0x20000eac

08013f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b086      	sub	sp, #24
 8013f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013f06:	2300      	movs	r3, #0
 8013f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f0a:	4b4f      	ldr	r3, [pc, #316]	; (8014048 <xTaskIncrementTick+0x148>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f040 808a 	bne.w	8014028 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013f14:	4b4d      	ldr	r3, [pc, #308]	; (801404c <xTaskIncrementTick+0x14c>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013f1c:	4a4b      	ldr	r2, [pc, #300]	; (801404c <xTaskIncrementTick+0x14c>)
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d121      	bne.n	8013f6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013f28:	4b49      	ldr	r3, [pc, #292]	; (8014050 <xTaskIncrementTick+0x150>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d00b      	beq.n	8013f4a <xTaskIncrementTick+0x4a>
 8013f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f36:	b672      	cpsid	i
 8013f38:	f383 8811 	msr	BASEPRI, r3
 8013f3c:	f3bf 8f6f 	isb	sy
 8013f40:	f3bf 8f4f 	dsb	sy
 8013f44:	b662      	cpsie	i
 8013f46:	603b      	str	r3, [r7, #0]
 8013f48:	e7fe      	b.n	8013f48 <xTaskIncrementTick+0x48>
 8013f4a:	4b41      	ldr	r3, [pc, #260]	; (8014050 <xTaskIncrementTick+0x150>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	60fb      	str	r3, [r7, #12]
 8013f50:	4b40      	ldr	r3, [pc, #256]	; (8014054 <xTaskIncrementTick+0x154>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4a3e      	ldr	r2, [pc, #248]	; (8014050 <xTaskIncrementTick+0x150>)
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	4a3e      	ldr	r2, [pc, #248]	; (8014054 <xTaskIncrementTick+0x154>)
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6013      	str	r3, [r2, #0]
 8013f5e:	4b3e      	ldr	r3, [pc, #248]	; (8014058 <xTaskIncrementTick+0x158>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3301      	adds	r3, #1
 8013f64:	4a3c      	ldr	r2, [pc, #240]	; (8014058 <xTaskIncrementTick+0x158>)
 8013f66:	6013      	str	r3, [r2, #0]
 8013f68:	f000 fad2 	bl	8014510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013f6c:	4b3b      	ldr	r3, [pc, #236]	; (801405c <xTaskIncrementTick+0x15c>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	693a      	ldr	r2, [r7, #16]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d349      	bcc.n	801400a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f76:	4b36      	ldr	r3, [pc, #216]	; (8014050 <xTaskIncrementTick+0x150>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d104      	bne.n	8013f8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f80:	4b36      	ldr	r3, [pc, #216]	; (801405c <xTaskIncrementTick+0x15c>)
 8013f82:	f04f 32ff 	mov.w	r2, #4294967295
 8013f86:	601a      	str	r2, [r3, #0]
					break;
 8013f88:	e03f      	b.n	801400a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f8a:	4b31      	ldr	r3, [pc, #196]	; (8014050 <xTaskIncrementTick+0x150>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f9a:	693a      	ldr	r2, [r7, #16]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d203      	bcs.n	8013faa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013fa2:	4a2e      	ldr	r2, [pc, #184]	; (801405c <xTaskIncrementTick+0x15c>)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013fa8:	e02f      	b.n	801400a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	3304      	adds	r3, #4
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fe fae6 	bl	8012580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d004      	beq.n	8013fc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	3318      	adds	r3, #24
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fe fadd 	bl	8012580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fca:	4b25      	ldr	r3, [pc, #148]	; (8014060 <xTaskIncrementTick+0x160>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d903      	bls.n	8013fda <xTaskIncrementTick+0xda>
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd6:	4a22      	ldr	r2, [pc, #136]	; (8014060 <xTaskIncrementTick+0x160>)
 8013fd8:	6013      	str	r3, [r2, #0]
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	4613      	mov	r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	4a1f      	ldr	r2, [pc, #124]	; (8014064 <xTaskIncrementTick+0x164>)
 8013fe8:	441a      	add	r2, r3
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	3304      	adds	r3, #4
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4610      	mov	r0, r2
 8013ff2:	f7fe fa68 	bl	80124c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ffa:	4b1b      	ldr	r3, [pc, #108]	; (8014068 <xTaskIncrementTick+0x168>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014000:	429a      	cmp	r2, r3
 8014002:	d3b8      	bcc.n	8013f76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014004:	2301      	movs	r3, #1
 8014006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014008:	e7b5      	b.n	8013f76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801400a:	4b17      	ldr	r3, [pc, #92]	; (8014068 <xTaskIncrementTick+0x168>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014010:	4914      	ldr	r1, [pc, #80]	; (8014064 <xTaskIncrementTick+0x164>)
 8014012:	4613      	mov	r3, r2
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	4413      	add	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	440b      	add	r3, r1
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2b01      	cmp	r3, #1
 8014020:	d907      	bls.n	8014032 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014022:	2301      	movs	r3, #1
 8014024:	617b      	str	r3, [r7, #20]
 8014026:	e004      	b.n	8014032 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014028:	4b10      	ldr	r3, [pc, #64]	; (801406c <xTaskIncrementTick+0x16c>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	3301      	adds	r3, #1
 801402e:	4a0f      	ldr	r2, [pc, #60]	; (801406c <xTaskIncrementTick+0x16c>)
 8014030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014032:	4b0f      	ldr	r3, [pc, #60]	; (8014070 <xTaskIncrementTick+0x170>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d001      	beq.n	801403e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801403a:	2301      	movs	r3, #1
 801403c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801403e:	697b      	ldr	r3, [r7, #20]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3718      	adds	r7, #24
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	20000ed0 	.word	0x20000ed0
 801404c:	20000eac 	.word	0x20000eac
 8014050:	20000e60 	.word	0x20000e60
 8014054:	20000e64 	.word	0x20000e64
 8014058:	20000ec0 	.word	0x20000ec0
 801405c:	20000ec8 	.word	0x20000ec8
 8014060:	20000eb0 	.word	0x20000eb0
 8014064:	200009d8 	.word	0x200009d8
 8014068:	200009d4 	.word	0x200009d4
 801406c:	20000eb8 	.word	0x20000eb8
 8014070:	20000ebc 	.word	0x20000ebc

08014074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801407a:	4b28      	ldr	r3, [pc, #160]	; (801411c <vTaskSwitchContext+0xa8>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d003      	beq.n	801408a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014082:	4b27      	ldr	r3, [pc, #156]	; (8014120 <vTaskSwitchContext+0xac>)
 8014084:	2201      	movs	r2, #1
 8014086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014088:	e042      	b.n	8014110 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 801408a:	4b25      	ldr	r3, [pc, #148]	; (8014120 <vTaskSwitchContext+0xac>)
 801408c:	2200      	movs	r2, #0
 801408e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014090:	4b24      	ldr	r3, [pc, #144]	; (8014124 <vTaskSwitchContext+0xb0>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	60fb      	str	r3, [r7, #12]
 8014096:	e011      	b.n	80140bc <vTaskSwitchContext+0x48>
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d10b      	bne.n	80140b6 <vTaskSwitchContext+0x42>
 801409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a2:	b672      	cpsid	i
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	b662      	cpsie	i
 80140b2:	607b      	str	r3, [r7, #4]
 80140b4:	e7fe      	b.n	80140b4 <vTaskSwitchContext+0x40>
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	3b01      	subs	r3, #1
 80140ba:	60fb      	str	r3, [r7, #12]
 80140bc:	491a      	ldr	r1, [pc, #104]	; (8014128 <vTaskSwitchContext+0xb4>)
 80140be:	68fa      	ldr	r2, [r7, #12]
 80140c0:	4613      	mov	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4413      	add	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	440b      	add	r3, r1
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d0e3      	beq.n	8014098 <vTaskSwitchContext+0x24>
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	4613      	mov	r3, r2
 80140d4:	009b      	lsls	r3, r3, #2
 80140d6:	4413      	add	r3, r2
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	4a13      	ldr	r2, [pc, #76]	; (8014128 <vTaskSwitchContext+0xb4>)
 80140dc:	4413      	add	r3, r2
 80140de:	60bb      	str	r3, [r7, #8]
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	685a      	ldr	r2, [r3, #4]
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	605a      	str	r2, [r3, #4]
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	3308      	adds	r3, #8
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d104      	bne.n	8014100 <vTaskSwitchContext+0x8c>
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	605a      	str	r2, [r3, #4]
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	4a09      	ldr	r2, [pc, #36]	; (801412c <vTaskSwitchContext+0xb8>)
 8014108:	6013      	str	r3, [r2, #0]
 801410a:	4a06      	ldr	r2, [pc, #24]	; (8014124 <vTaskSwitchContext+0xb0>)
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6013      	str	r3, [r2, #0]
}
 8014110:	bf00      	nop
 8014112:	3714      	adds	r7, #20
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr
 801411c:	20000ed0 	.word	0x20000ed0
 8014120:	20000ebc 	.word	0x20000ebc
 8014124:	20000eb0 	.word	0x20000eb0
 8014128:	200009d8 	.word	0x200009d8
 801412c:	200009d4 	.word	0x200009d4

08014130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10b      	bne.n	8014158 <vTaskPlaceOnEventList+0x28>
 8014140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014144:	b672      	cpsid	i
 8014146:	f383 8811 	msr	BASEPRI, r3
 801414a:	f3bf 8f6f 	isb	sy
 801414e:	f3bf 8f4f 	dsb	sy
 8014152:	b662      	cpsie	i
 8014154:	60fb      	str	r3, [r7, #12]
 8014156:	e7fe      	b.n	8014156 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014158:	4b07      	ldr	r3, [pc, #28]	; (8014178 <vTaskPlaceOnEventList+0x48>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	3318      	adds	r3, #24
 801415e:	4619      	mov	r1, r3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f7fe f9d4 	bl	801250e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014166:	2101      	movs	r1, #1
 8014168:	6838      	ldr	r0, [r7, #0]
 801416a:	f000 fb8f 	bl	801488c <prvAddCurrentTaskToDelayedList>
}
 801416e:	bf00      	nop
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	200009d4 	.word	0x200009d4

0801417c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d10b      	bne.n	80141a6 <vTaskPlaceOnEventListRestricted+0x2a>
 801418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014192:	b672      	cpsid	i
 8014194:	f383 8811 	msr	BASEPRI, r3
 8014198:	f3bf 8f6f 	isb	sy
 801419c:	f3bf 8f4f 	dsb	sy
 80141a0:	b662      	cpsie	i
 80141a2:	617b      	str	r3, [r7, #20]
 80141a4:	e7fe      	b.n	80141a4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80141a6:	4b0a      	ldr	r3, [pc, #40]	; (80141d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	3318      	adds	r3, #24
 80141ac:	4619      	mov	r1, r3
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7fe f989 	bl	80124c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d002      	beq.n	80141c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80141ba:	f04f 33ff 	mov.w	r3, #4294967295
 80141be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80141c0:	6879      	ldr	r1, [r7, #4]
 80141c2:	68b8      	ldr	r0, [r7, #8]
 80141c4:	f000 fb62 	bl	801488c <prvAddCurrentTaskToDelayedList>
	}
 80141c8:	bf00      	nop
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	200009d4 	.word	0x200009d4

080141d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	68db      	ldr	r3, [r3, #12]
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d10b      	bne.n	8014202 <xTaskRemoveFromEventList+0x2e>
 80141ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ee:	b672      	cpsid	i
 80141f0:	f383 8811 	msr	BASEPRI, r3
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	f3bf 8f4f 	dsb	sy
 80141fc:	b662      	cpsie	i
 80141fe:	60fb      	str	r3, [r7, #12]
 8014200:	e7fe      	b.n	8014200 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	3318      	adds	r3, #24
 8014206:	4618      	mov	r0, r3
 8014208:	f7fe f9ba 	bl	8012580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801420c:	4b1d      	ldr	r3, [pc, #116]	; (8014284 <xTaskRemoveFromEventList+0xb0>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d11d      	bne.n	8014250 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	3304      	adds	r3, #4
 8014218:	4618      	mov	r0, r3
 801421a:	f7fe f9b1 	bl	8012580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014222:	4b19      	ldr	r3, [pc, #100]	; (8014288 <xTaskRemoveFromEventList+0xb4>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	429a      	cmp	r2, r3
 8014228:	d903      	bls.n	8014232 <xTaskRemoveFromEventList+0x5e>
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801422e:	4a16      	ldr	r2, [pc, #88]	; (8014288 <xTaskRemoveFromEventList+0xb4>)
 8014230:	6013      	str	r3, [r2, #0]
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014236:	4613      	mov	r3, r2
 8014238:	009b      	lsls	r3, r3, #2
 801423a:	4413      	add	r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	4a13      	ldr	r2, [pc, #76]	; (801428c <xTaskRemoveFromEventList+0xb8>)
 8014240:	441a      	add	r2, r3
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	3304      	adds	r3, #4
 8014246:	4619      	mov	r1, r3
 8014248:	4610      	mov	r0, r2
 801424a:	f7fe f93c 	bl	80124c6 <vListInsertEnd>
 801424e:	e005      	b.n	801425c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	3318      	adds	r3, #24
 8014254:	4619      	mov	r1, r3
 8014256:	480e      	ldr	r0, [pc, #56]	; (8014290 <xTaskRemoveFromEventList+0xbc>)
 8014258:	f7fe f935 	bl	80124c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014260:	4b0c      	ldr	r3, [pc, #48]	; (8014294 <xTaskRemoveFromEventList+0xc0>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014266:	429a      	cmp	r2, r3
 8014268:	d905      	bls.n	8014276 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801426a:	2301      	movs	r3, #1
 801426c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801426e:	4b0a      	ldr	r3, [pc, #40]	; (8014298 <xTaskRemoveFromEventList+0xc4>)
 8014270:	2201      	movs	r2, #1
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	e001      	b.n	801427a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014276:	2300      	movs	r3, #0
 8014278:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801427a:	697b      	ldr	r3, [r7, #20]
}
 801427c:	4618      	mov	r0, r3
 801427e:	3718      	adds	r7, #24
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	20000ed0 	.word	0x20000ed0
 8014288:	20000eb0 	.word	0x20000eb0
 801428c:	200009d8 	.word	0x200009d8
 8014290:	20000e68 	.word	0x20000e68
 8014294:	200009d4 	.word	0x200009d4
 8014298:	20000ebc 	.word	0x20000ebc

0801429c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80142a4:	4b06      	ldr	r3, [pc, #24]	; (80142c0 <vTaskInternalSetTimeOutState+0x24>)
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80142ac:	4b05      	ldr	r3, [pc, #20]	; (80142c4 <vTaskInternalSetTimeOutState+0x28>)
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	605a      	str	r2, [r3, #4]
}
 80142b4:	bf00      	nop
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr
 80142c0:	20000ec0 	.word	0x20000ec0
 80142c4:	20000eac 	.word	0x20000eac

080142c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d10b      	bne.n	80142f0 <xTaskCheckForTimeOut+0x28>
 80142d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142dc:	b672      	cpsid	i
 80142de:	f383 8811 	msr	BASEPRI, r3
 80142e2:	f3bf 8f6f 	isb	sy
 80142e6:	f3bf 8f4f 	dsb	sy
 80142ea:	b662      	cpsie	i
 80142ec:	613b      	str	r3, [r7, #16]
 80142ee:	e7fe      	b.n	80142ee <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80142f0:	683b      	ldr	r3, [r7, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d10b      	bne.n	801430e <xTaskCheckForTimeOut+0x46>
 80142f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fa:	b672      	cpsid	i
 80142fc:	f383 8811 	msr	BASEPRI, r3
 8014300:	f3bf 8f6f 	isb	sy
 8014304:	f3bf 8f4f 	dsb	sy
 8014308:	b662      	cpsie	i
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	e7fe      	b.n	801430c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801430e:	f000 ff6b 	bl	80151e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014312:	4b1d      	ldr	r3, [pc, #116]	; (8014388 <xTaskCheckForTimeOut+0xc0>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	69ba      	ldr	r2, [r7, #24]
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801432a:	d102      	bne.n	8014332 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801432c:	2300      	movs	r3, #0
 801432e:	61fb      	str	r3, [r7, #28]
 8014330:	e023      	b.n	801437a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681a      	ldr	r2, [r3, #0]
 8014336:	4b15      	ldr	r3, [pc, #84]	; (801438c <xTaskCheckForTimeOut+0xc4>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	429a      	cmp	r2, r3
 801433c:	d007      	beq.n	801434e <xTaskCheckForTimeOut+0x86>
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	69ba      	ldr	r2, [r7, #24]
 8014344:	429a      	cmp	r2, r3
 8014346:	d302      	bcc.n	801434e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014348:	2301      	movs	r3, #1
 801434a:	61fb      	str	r3, [r7, #28]
 801434c:	e015      	b.n	801437a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	697a      	ldr	r2, [r7, #20]
 8014354:	429a      	cmp	r2, r3
 8014356:	d20b      	bcs.n	8014370 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	1ad2      	subs	r2, r2, r3
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7ff ff99 	bl	801429c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801436a:	2300      	movs	r3, #0
 801436c:	61fb      	str	r3, [r7, #28]
 801436e:	e004      	b.n	801437a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	2200      	movs	r2, #0
 8014374:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014376:	2301      	movs	r3, #1
 8014378:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801437a:	f000 ff67 	bl	801524c <vPortExitCritical>

	return xReturn;
 801437e:	69fb      	ldr	r3, [r7, #28]
}
 8014380:	4618      	mov	r0, r3
 8014382:	3720      	adds	r7, #32
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	20000eac 	.word	0x20000eac
 801438c:	20000ec0 	.word	0x20000ec0

08014390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014390:	b480      	push	{r7}
 8014392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014394:	4b03      	ldr	r3, [pc, #12]	; (80143a4 <vTaskMissedYield+0x14>)
 8014396:	2201      	movs	r2, #1
 8014398:	601a      	str	r2, [r3, #0]
}
 801439a:	bf00      	nop
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr
 80143a4:	20000ebc 	.word	0x20000ebc

080143a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80143b0:	f000 f852 	bl	8014458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80143b4:	4b06      	ldr	r3, [pc, #24]	; (80143d0 <prvIdleTask+0x28>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d9f9      	bls.n	80143b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80143bc:	4b05      	ldr	r3, [pc, #20]	; (80143d4 <prvIdleTask+0x2c>)
 80143be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143c2:	601a      	str	r2, [r3, #0]
 80143c4:	f3bf 8f4f 	dsb	sy
 80143c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80143cc:	e7f0      	b.n	80143b0 <prvIdleTask+0x8>
 80143ce:	bf00      	nop
 80143d0:	200009d8 	.word	0x200009d8
 80143d4:	e000ed04 	.word	0xe000ed04

080143d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80143de:	2300      	movs	r3, #0
 80143e0:	607b      	str	r3, [r7, #4]
 80143e2:	e00c      	b.n	80143fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	4613      	mov	r3, r2
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	4413      	add	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	4a12      	ldr	r2, [pc, #72]	; (8014438 <prvInitialiseTaskLists+0x60>)
 80143f0:	4413      	add	r3, r2
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fe f83a 	bl	801246c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	3301      	adds	r3, #1
 80143fc:	607b      	str	r3, [r7, #4]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b37      	cmp	r3, #55	; 0x37
 8014402:	d9ef      	bls.n	80143e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014404:	480d      	ldr	r0, [pc, #52]	; (801443c <prvInitialiseTaskLists+0x64>)
 8014406:	f7fe f831 	bl	801246c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801440a:	480d      	ldr	r0, [pc, #52]	; (8014440 <prvInitialiseTaskLists+0x68>)
 801440c:	f7fe f82e 	bl	801246c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014410:	480c      	ldr	r0, [pc, #48]	; (8014444 <prvInitialiseTaskLists+0x6c>)
 8014412:	f7fe f82b 	bl	801246c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014416:	480c      	ldr	r0, [pc, #48]	; (8014448 <prvInitialiseTaskLists+0x70>)
 8014418:	f7fe f828 	bl	801246c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801441c:	480b      	ldr	r0, [pc, #44]	; (801444c <prvInitialiseTaskLists+0x74>)
 801441e:	f7fe f825 	bl	801246c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014422:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <prvInitialiseTaskLists+0x78>)
 8014424:	4a05      	ldr	r2, [pc, #20]	; (801443c <prvInitialiseTaskLists+0x64>)
 8014426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014428:	4b0a      	ldr	r3, [pc, #40]	; (8014454 <prvInitialiseTaskLists+0x7c>)
 801442a:	4a05      	ldr	r2, [pc, #20]	; (8014440 <prvInitialiseTaskLists+0x68>)
 801442c:	601a      	str	r2, [r3, #0]
}
 801442e:	bf00      	nop
 8014430:	3708      	adds	r7, #8
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	200009d8 	.word	0x200009d8
 801443c:	20000e38 	.word	0x20000e38
 8014440:	20000e4c 	.word	0x20000e4c
 8014444:	20000e68 	.word	0x20000e68
 8014448:	20000e7c 	.word	0x20000e7c
 801444c:	20000e94 	.word	0x20000e94
 8014450:	20000e60 	.word	0x20000e60
 8014454:	20000e64 	.word	0x20000e64

08014458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801445e:	e019      	b.n	8014494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014460:	f000 fec2 	bl	80151e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014464:	4b0f      	ldr	r3, [pc, #60]	; (80144a4 <prvCheckTasksWaitingTermination+0x4c>)
 8014466:	68db      	ldr	r3, [r3, #12]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	3304      	adds	r3, #4
 8014470:	4618      	mov	r0, r3
 8014472:	f7fe f885 	bl	8012580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014476:	4b0c      	ldr	r3, [pc, #48]	; (80144a8 <prvCheckTasksWaitingTermination+0x50>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	3b01      	subs	r3, #1
 801447c:	4a0a      	ldr	r2, [pc, #40]	; (80144a8 <prvCheckTasksWaitingTermination+0x50>)
 801447e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014480:	4b0a      	ldr	r3, [pc, #40]	; (80144ac <prvCheckTasksWaitingTermination+0x54>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	3b01      	subs	r3, #1
 8014486:	4a09      	ldr	r2, [pc, #36]	; (80144ac <prvCheckTasksWaitingTermination+0x54>)
 8014488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801448a:	f000 fedf 	bl	801524c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 f80e 	bl	80144b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014494:	4b05      	ldr	r3, [pc, #20]	; (80144ac <prvCheckTasksWaitingTermination+0x54>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d1e1      	bne.n	8014460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801449c:	bf00      	nop
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	20000e7c 	.word	0x20000e7c
 80144a8:	20000ea8 	.word	0x20000ea8
 80144ac:	20000e90 	.word	0x20000e90

080144b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d108      	bne.n	80144d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144c6:	4618      	mov	r0, r3
 80144c8:	f001 f878 	bl	80155bc <vPortFree>
				vPortFree( pxTCB );
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f001 f875 	bl	80155bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80144d2:	e019      	b.n	8014508 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d103      	bne.n	80144e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f001 f86c 	bl	80155bc <vPortFree>
	}
 80144e4:	e010      	b.n	8014508 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d00b      	beq.n	8014508 <prvDeleteTCB+0x58>
 80144f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f4:	b672      	cpsid	i
 80144f6:	f383 8811 	msr	BASEPRI, r3
 80144fa:	f3bf 8f6f 	isb	sy
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	b662      	cpsie	i
 8014504:	60fb      	str	r3, [r7, #12]
 8014506:	e7fe      	b.n	8014506 <prvDeleteTCB+0x56>
	}
 8014508:	bf00      	nop
 801450a:	3710      	adds	r7, #16
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014516:	4b0c      	ldr	r3, [pc, #48]	; (8014548 <prvResetNextTaskUnblockTime+0x38>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d104      	bne.n	801452a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014520:	4b0a      	ldr	r3, [pc, #40]	; (801454c <prvResetNextTaskUnblockTime+0x3c>)
 8014522:	f04f 32ff 	mov.w	r2, #4294967295
 8014526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014528:	e008      	b.n	801453c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801452a:	4b07      	ldr	r3, [pc, #28]	; (8014548 <prvResetNextTaskUnblockTime+0x38>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	4a04      	ldr	r2, [pc, #16]	; (801454c <prvResetNextTaskUnblockTime+0x3c>)
 801453a:	6013      	str	r3, [r2, #0]
}
 801453c:	bf00      	nop
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr
 8014548:	20000e60 	.word	0x20000e60
 801454c:	20000ec8 	.word	0x20000ec8

08014550 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014556:	4b05      	ldr	r3, [pc, #20]	; (801456c <xTaskGetCurrentTaskHandle+0x1c>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801455c:	687b      	ldr	r3, [r7, #4]
	}
 801455e:	4618      	mov	r0, r3
 8014560:	370c      	adds	r7, #12
 8014562:	46bd      	mov	sp, r7
 8014564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	200009d4 	.word	0x200009d4

08014570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014576:	4b0b      	ldr	r3, [pc, #44]	; (80145a4 <xTaskGetSchedulerState+0x34>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d102      	bne.n	8014584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801457e:	2301      	movs	r3, #1
 8014580:	607b      	str	r3, [r7, #4]
 8014582:	e008      	b.n	8014596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014584:	4b08      	ldr	r3, [pc, #32]	; (80145a8 <xTaskGetSchedulerState+0x38>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d102      	bne.n	8014592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801458c:	2302      	movs	r3, #2
 801458e:	607b      	str	r3, [r7, #4]
 8014590:	e001      	b.n	8014596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014592:	2300      	movs	r3, #0
 8014594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014596:	687b      	ldr	r3, [r7, #4]
	}
 8014598:	4618      	mov	r0, r3
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr
 80145a4:	20000eb4 	.word	0x20000eb4
 80145a8:	20000ed0 	.word	0x20000ed0

080145ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80145b8:	2300      	movs	r3, #0
 80145ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d051      	beq.n	8014666 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145c6:	4b2a      	ldr	r3, [pc, #168]	; (8014670 <xTaskPriorityInherit+0xc4>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d241      	bcs.n	8014654 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	699b      	ldr	r3, [r3, #24]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	db06      	blt.n	80145e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145d8:	4b25      	ldr	r3, [pc, #148]	; (8014670 <xTaskPriorityInherit+0xc4>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	6959      	ldr	r1, [r3, #20]
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ee:	4613      	mov	r3, r2
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	4413      	add	r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	4a1f      	ldr	r2, [pc, #124]	; (8014674 <xTaskPriorityInherit+0xc8>)
 80145f8:	4413      	add	r3, r2
 80145fa:	4299      	cmp	r1, r3
 80145fc:	d122      	bne.n	8014644 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	3304      	adds	r3, #4
 8014602:	4618      	mov	r0, r3
 8014604:	f7fd ffbc 	bl	8012580 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014608:	4b19      	ldr	r3, [pc, #100]	; (8014670 <xTaskPriorityInherit+0xc4>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014616:	4b18      	ldr	r3, [pc, #96]	; (8014678 <xTaskPriorityInherit+0xcc>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	429a      	cmp	r2, r3
 801461c:	d903      	bls.n	8014626 <xTaskPriorityInherit+0x7a>
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <xTaskPriorityInherit+0xcc>)
 8014624:	6013      	str	r3, [r2, #0]
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801462a:	4613      	mov	r3, r2
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	4413      	add	r3, r2
 8014630:	009b      	lsls	r3, r3, #2
 8014632:	4a10      	ldr	r2, [pc, #64]	; (8014674 <xTaskPriorityInherit+0xc8>)
 8014634:	441a      	add	r2, r3
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	3304      	adds	r3, #4
 801463a:	4619      	mov	r1, r3
 801463c:	4610      	mov	r0, r2
 801463e:	f7fd ff42 	bl	80124c6 <vListInsertEnd>
 8014642:	e004      	b.n	801464e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014644:	4b0a      	ldr	r3, [pc, #40]	; (8014670 <xTaskPriorityInherit+0xc4>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801464e:	2301      	movs	r3, #1
 8014650:	60fb      	str	r3, [r7, #12]
 8014652:	e008      	b.n	8014666 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014658:	4b05      	ldr	r3, [pc, #20]	; (8014670 <xTaskPriorityInherit+0xc4>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801465e:	429a      	cmp	r2, r3
 8014660:	d201      	bcs.n	8014666 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014662:	2301      	movs	r3, #1
 8014664:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014666:	68fb      	ldr	r3, [r7, #12]
	}
 8014668:	4618      	mov	r0, r3
 801466a:	3710      	adds	r7, #16
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}
 8014670:	200009d4 	.word	0x200009d4
 8014674:	200009d8 	.word	0x200009d8
 8014678:	20000eb0 	.word	0x20000eb0

0801467c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801467c:	b580      	push	{r7, lr}
 801467e:	b086      	sub	sp, #24
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014688:	2300      	movs	r3, #0
 801468a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d058      	beq.n	8014744 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014692:	4b2f      	ldr	r3, [pc, #188]	; (8014750 <xTaskPriorityDisinherit+0xd4>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	693a      	ldr	r2, [r7, #16]
 8014698:	429a      	cmp	r2, r3
 801469a:	d00b      	beq.n	80146b4 <xTaskPriorityDisinherit+0x38>
 801469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a0:	b672      	cpsid	i
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	b662      	cpsie	i
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	e7fe      	b.n	80146b2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10b      	bne.n	80146d4 <xTaskPriorityDisinherit+0x58>
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	b672      	cpsid	i
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	b662      	cpsie	i
 80146d0:	60bb      	str	r3, [r7, #8]
 80146d2:	e7fe      	b.n	80146d2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146d8:	1e5a      	subs	r2, r3, #1
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d02c      	beq.n	8014744 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d128      	bne.n	8014744 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	3304      	adds	r3, #4
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fd ff42 	bl	8012580 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014714:	4b0f      	ldr	r3, [pc, #60]	; (8014754 <xTaskPriorityDisinherit+0xd8>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d903      	bls.n	8014724 <xTaskPriorityDisinherit+0xa8>
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014720:	4a0c      	ldr	r2, [pc, #48]	; (8014754 <xTaskPriorityDisinherit+0xd8>)
 8014722:	6013      	str	r3, [r2, #0]
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014728:	4613      	mov	r3, r2
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	4413      	add	r3, r2
 801472e:	009b      	lsls	r3, r3, #2
 8014730:	4a09      	ldr	r2, [pc, #36]	; (8014758 <xTaskPriorityDisinherit+0xdc>)
 8014732:	441a      	add	r2, r3
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	3304      	adds	r3, #4
 8014738:	4619      	mov	r1, r3
 801473a:	4610      	mov	r0, r2
 801473c:	f7fd fec3 	bl	80124c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014740:	2301      	movs	r3, #1
 8014742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014744:	697b      	ldr	r3, [r7, #20]
	}
 8014746:	4618      	mov	r0, r3
 8014748:	3718      	adds	r7, #24
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	200009d4 	.word	0x200009d4
 8014754:	20000eb0 	.word	0x20000eb0
 8014758:	200009d8 	.word	0x200009d8

0801475c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801475c:	b580      	push	{r7, lr}
 801475e:	b088      	sub	sp, #32
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801476a:	2301      	movs	r3, #1
 801476c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d06c      	beq.n	801484e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014778:	2b00      	cmp	r3, #0
 801477a:	d10b      	bne.n	8014794 <vTaskPriorityDisinheritAfterTimeout+0x38>
 801477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014780:	b672      	cpsid	i
 8014782:	f383 8811 	msr	BASEPRI, r3
 8014786:	f3bf 8f6f 	isb	sy
 801478a:	f3bf 8f4f 	dsb	sy
 801478e:	b662      	cpsie	i
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	e7fe      	b.n	8014792 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014798:	683a      	ldr	r2, [r7, #0]
 801479a:	429a      	cmp	r2, r3
 801479c:	d902      	bls.n	80147a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	61fb      	str	r3, [r7, #28]
 80147a2:	e002      	b.n	80147aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ae:	69fa      	ldr	r2, [r7, #28]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d04c      	beq.n	801484e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147b8:	697a      	ldr	r2, [r7, #20]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d147      	bne.n	801484e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80147be:	4b26      	ldr	r3, [pc, #152]	; (8014858 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	69ba      	ldr	r2, [r7, #24]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d10b      	bne.n	80147e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
 80147c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147cc:	b672      	cpsid	i
 80147ce:	f383 8811 	msr	BASEPRI, r3
 80147d2:	f3bf 8f6f 	isb	sy
 80147d6:	f3bf 8f4f 	dsb	sy
 80147da:	b662      	cpsie	i
 80147dc:	60bb      	str	r3, [r7, #8]
 80147de:	e7fe      	b.n	80147de <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80147e0:	69bb      	ldr	r3, [r7, #24]
 80147e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	69fa      	ldr	r2, [r7, #28]
 80147ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	699b      	ldr	r3, [r3, #24]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	db04      	blt.n	80147fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80147fe:	69bb      	ldr	r3, [r7, #24]
 8014800:	6959      	ldr	r1, [r3, #20]
 8014802:	693a      	ldr	r2, [r7, #16]
 8014804:	4613      	mov	r3, r2
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	4413      	add	r3, r2
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	4a13      	ldr	r2, [pc, #76]	; (801485c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801480e:	4413      	add	r3, r2
 8014810:	4299      	cmp	r1, r3
 8014812:	d11c      	bne.n	801484e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014814:	69bb      	ldr	r3, [r7, #24]
 8014816:	3304      	adds	r3, #4
 8014818:	4618      	mov	r0, r3
 801481a:	f7fd feb1 	bl	8012580 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801481e:	69bb      	ldr	r3, [r7, #24]
 8014820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014822:	4b0f      	ldr	r3, [pc, #60]	; (8014860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	429a      	cmp	r2, r3
 8014828:	d903      	bls.n	8014832 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801482e:	4a0c      	ldr	r2, [pc, #48]	; (8014860 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014830:	6013      	str	r3, [r2, #0]
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014836:	4613      	mov	r3, r2
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	4413      	add	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4a07      	ldr	r2, [pc, #28]	; (801485c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014840:	441a      	add	r2, r3
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	3304      	adds	r3, #4
 8014846:	4619      	mov	r1, r3
 8014848:	4610      	mov	r0, r2
 801484a:	f7fd fe3c 	bl	80124c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801484e:	bf00      	nop
 8014850:	3720      	adds	r7, #32
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	200009d4 	.word	0x200009d4
 801485c:	200009d8 	.word	0x200009d8
 8014860:	20000eb0 	.word	0x20000eb0

08014864 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014864:	b480      	push	{r7}
 8014866:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014868:	4b07      	ldr	r3, [pc, #28]	; (8014888 <pvTaskIncrementMutexHeldCount+0x24>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d004      	beq.n	801487a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014870:	4b05      	ldr	r3, [pc, #20]	; (8014888 <pvTaskIncrementMutexHeldCount+0x24>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014876:	3201      	adds	r2, #1
 8014878:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801487a:	4b03      	ldr	r3, [pc, #12]	; (8014888 <pvTaskIncrementMutexHeldCount+0x24>)
 801487c:	681b      	ldr	r3, [r3, #0]
	}
 801487e:	4618      	mov	r0, r3
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr
 8014888:	200009d4 	.word	0x200009d4

0801488c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014896:	4b21      	ldr	r3, [pc, #132]	; (801491c <prvAddCurrentTaskToDelayedList+0x90>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801489c:	4b20      	ldr	r3, [pc, #128]	; (8014920 <prvAddCurrentTaskToDelayedList+0x94>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	3304      	adds	r3, #4
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fd fe6c 	bl	8012580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ae:	d10a      	bne.n	80148c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d007      	beq.n	80148c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148b6:	4b1a      	ldr	r3, [pc, #104]	; (8014920 <prvAddCurrentTaskToDelayedList+0x94>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	3304      	adds	r3, #4
 80148bc:	4619      	mov	r1, r3
 80148be:	4819      	ldr	r0, [pc, #100]	; (8014924 <prvAddCurrentTaskToDelayedList+0x98>)
 80148c0:	f7fd fe01 	bl	80124c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80148c4:	e026      	b.n	8014914 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80148c6:	68fa      	ldr	r2, [r7, #12]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	4413      	add	r3, r2
 80148cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80148ce:	4b14      	ldr	r3, [pc, #80]	; (8014920 <prvAddCurrentTaskToDelayedList+0x94>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	68ba      	ldr	r2, [r7, #8]
 80148d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d209      	bcs.n	80148f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148de:	4b12      	ldr	r3, [pc, #72]	; (8014928 <prvAddCurrentTaskToDelayedList+0x9c>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	4b0f      	ldr	r3, [pc, #60]	; (8014920 <prvAddCurrentTaskToDelayedList+0x94>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	3304      	adds	r3, #4
 80148e8:	4619      	mov	r1, r3
 80148ea:	4610      	mov	r0, r2
 80148ec:	f7fd fe0f 	bl	801250e <vListInsert>
}
 80148f0:	e010      	b.n	8014914 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148f2:	4b0e      	ldr	r3, [pc, #56]	; (801492c <prvAddCurrentTaskToDelayedList+0xa0>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	4b0a      	ldr	r3, [pc, #40]	; (8014920 <prvAddCurrentTaskToDelayedList+0x94>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	3304      	adds	r3, #4
 80148fc:	4619      	mov	r1, r3
 80148fe:	4610      	mov	r0, r2
 8014900:	f7fd fe05 	bl	801250e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014904:	4b0a      	ldr	r3, [pc, #40]	; (8014930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	68ba      	ldr	r2, [r7, #8]
 801490a:	429a      	cmp	r2, r3
 801490c:	d202      	bcs.n	8014914 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801490e:	4a08      	ldr	r2, [pc, #32]	; (8014930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	6013      	str	r3, [r2, #0]
}
 8014914:	bf00      	nop
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20000eac 	.word	0x20000eac
 8014920:	200009d4 	.word	0x200009d4
 8014924:	20000e94 	.word	0x20000e94
 8014928:	20000e64 	.word	0x20000e64
 801492c:	20000e60 	.word	0x20000e60
 8014930:	20000ec8 	.word	0x20000ec8

08014934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	; 0x28
 8014938:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801493a:	2300      	movs	r3, #0
 801493c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801493e:	f000 fb0d 	bl	8014f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014942:	4b1d      	ldr	r3, [pc, #116]	; (80149b8 <xTimerCreateTimerTask+0x84>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d021      	beq.n	801498e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801494a:	2300      	movs	r3, #0
 801494c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801494e:	2300      	movs	r3, #0
 8014950:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014952:	1d3a      	adds	r2, r7, #4
 8014954:	f107 0108 	add.w	r1, r7, #8
 8014958:	f107 030c 	add.w	r3, r7, #12
 801495c:	4618      	mov	r0, r3
 801495e:	f7fd fd6b 	bl	8012438 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014962:	6879      	ldr	r1, [r7, #4]
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	9202      	str	r2, [sp, #8]
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	2302      	movs	r3, #2
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	2300      	movs	r3, #0
 8014972:	460a      	mov	r2, r1
 8014974:	4911      	ldr	r1, [pc, #68]	; (80149bc <xTimerCreateTimerTask+0x88>)
 8014976:	4812      	ldr	r0, [pc, #72]	; (80149c0 <xTimerCreateTimerTask+0x8c>)
 8014978:	f7fe ff30 	bl	80137dc <xTaskCreateStatic>
 801497c:	4602      	mov	r2, r0
 801497e:	4b11      	ldr	r3, [pc, #68]	; (80149c4 <xTimerCreateTimerTask+0x90>)
 8014980:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014982:	4b10      	ldr	r3, [pc, #64]	; (80149c4 <xTimerCreateTimerTask+0x90>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d001      	beq.n	801498e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801498a:	2301      	movs	r3, #1
 801498c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d10b      	bne.n	80149ac <xTimerCreateTimerTask+0x78>
 8014994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014998:	b672      	cpsid	i
 801499a:	f383 8811 	msr	BASEPRI, r3
 801499e:	f3bf 8f6f 	isb	sy
 80149a2:	f3bf 8f4f 	dsb	sy
 80149a6:	b662      	cpsie	i
 80149a8:	613b      	str	r3, [r7, #16]
 80149aa:	e7fe      	b.n	80149aa <xTimerCreateTimerTask+0x76>
	return xReturn;
 80149ac:	697b      	ldr	r3, [r7, #20]
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3718      	adds	r7, #24
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	20000f04 	.word	0x20000f04
 80149bc:	080182b4 	.word	0x080182b4
 80149c0:	08014b01 	.word	0x08014b01
 80149c4:	20000f08 	.word	0x20000f08

080149c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08a      	sub	sp, #40	; 0x28
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
 80149d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80149d6:	2300      	movs	r3, #0
 80149d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d10b      	bne.n	80149f8 <xTimerGenericCommand+0x30>
 80149e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e4:	b672      	cpsid	i
 80149e6:	f383 8811 	msr	BASEPRI, r3
 80149ea:	f3bf 8f6f 	isb	sy
 80149ee:	f3bf 8f4f 	dsb	sy
 80149f2:	b662      	cpsie	i
 80149f4:	623b      	str	r3, [r7, #32]
 80149f6:	e7fe      	b.n	80149f6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80149f8:	4b19      	ldr	r3, [pc, #100]	; (8014a60 <xTimerGenericCommand+0x98>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d02a      	beq.n	8014a56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	2b05      	cmp	r3, #5
 8014a10:	dc18      	bgt.n	8014a44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014a12:	f7ff fdad 	bl	8014570 <xTaskGetSchedulerState>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b02      	cmp	r3, #2
 8014a1a:	d109      	bne.n	8014a30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014a1c:	4b10      	ldr	r3, [pc, #64]	; (8014a60 <xTimerGenericCommand+0x98>)
 8014a1e:	6818      	ldr	r0, [r3, #0]
 8014a20:	f107 0110 	add.w	r1, r7, #16
 8014a24:	2300      	movs	r3, #0
 8014a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a28:	f7fe f860 	bl	8012aec <xQueueGenericSend>
 8014a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8014a2e:	e012      	b.n	8014a56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014a30:	4b0b      	ldr	r3, [pc, #44]	; (8014a60 <xTimerGenericCommand+0x98>)
 8014a32:	6818      	ldr	r0, [r3, #0]
 8014a34:	f107 0110 	add.w	r1, r7, #16
 8014a38:	2300      	movs	r3, #0
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	f7fe f856 	bl	8012aec <xQueueGenericSend>
 8014a40:	6278      	str	r0, [r7, #36]	; 0x24
 8014a42:	e008      	b.n	8014a56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a44:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <xTimerGenericCommand+0x98>)
 8014a46:	6818      	ldr	r0, [r3, #0]
 8014a48:	f107 0110 	add.w	r1, r7, #16
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	683a      	ldr	r2, [r7, #0]
 8014a50:	f7fe f94e 	bl	8012cf0 <xQueueGenericSendFromISR>
 8014a54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3728      	adds	r7, #40	; 0x28
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	20000f04 	.word	0x20000f04

08014a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b088      	sub	sp, #32
 8014a68:	af02      	add	r7, sp, #8
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a6e:	4b23      	ldr	r3, [pc, #140]	; (8014afc <prvProcessExpiredTimer+0x98>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	68db      	ldr	r3, [r3, #12]
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	3304      	adds	r3, #4
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7fd fd7f 	bl	8012580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a88:	f003 0304 	and.w	r3, r3, #4
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d023      	beq.n	8014ad8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	699a      	ldr	r2, [r3, #24]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	18d1      	adds	r1, r2, r3
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	6978      	ldr	r0, [r7, #20]
 8014a9e:	f000 f8d3 	bl	8014c48 <prvInsertTimerInActiveList>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d020      	beq.n	8014aea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	2300      	movs	r3, #0
 8014aae:	687a      	ldr	r2, [r7, #4]
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	6978      	ldr	r0, [r7, #20]
 8014ab4:	f7ff ff88 	bl	80149c8 <xTimerGenericCommand>
 8014ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d114      	bne.n	8014aea <prvProcessExpiredTimer+0x86>
 8014ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac4:	b672      	cpsid	i
 8014ac6:	f383 8811 	msr	BASEPRI, r3
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	f3bf 8f4f 	dsb	sy
 8014ad2:	b662      	cpsie	i
 8014ad4:	60fb      	str	r3, [r7, #12]
 8014ad6:	e7fe      	b.n	8014ad6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ade:	f023 0301 	bic.w	r3, r3, #1
 8014ae2:	b2da      	uxtb	r2, r3
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	6a1b      	ldr	r3, [r3, #32]
 8014aee:	6978      	ldr	r0, [r7, #20]
 8014af0:	4798      	blx	r3
}
 8014af2:	bf00      	nop
 8014af4:	3718      	adds	r7, #24
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	20000efc 	.word	0x20000efc

08014b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b08:	f107 0308 	add.w	r3, r7, #8
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f000 f857 	bl	8014bc0 <prvGetNextExpireTime>
 8014b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	4619      	mov	r1, r3
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f000 f803 	bl	8014b24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014b1e:	f000 f8d5 	bl	8014ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b22:	e7f1      	b.n	8014b08 <prvTimerTask+0x8>

08014b24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014b2e:	f7ff f919 	bl	8013d64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b32:	f107 0308 	add.w	r3, r7, #8
 8014b36:	4618      	mov	r0, r3
 8014b38:	f000 f866 	bl	8014c08 <prvSampleTimeNow>
 8014b3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d130      	bne.n	8014ba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10a      	bne.n	8014b60 <prvProcessTimerOrBlockTask+0x3c>
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d806      	bhi.n	8014b60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014b52:	f7ff f915 	bl	8013d80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014b56:	68f9      	ldr	r1, [r7, #12]
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff ff83 	bl	8014a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014b5e:	e024      	b.n	8014baa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d008      	beq.n	8014b78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014b66:	4b13      	ldr	r3, [pc, #76]	; (8014bb4 <prvProcessTimerOrBlockTask+0x90>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d101      	bne.n	8014b74 <prvProcessTimerOrBlockTask+0x50>
 8014b70:	2301      	movs	r3, #1
 8014b72:	e000      	b.n	8014b76 <prvProcessTimerOrBlockTask+0x52>
 8014b74:	2300      	movs	r3, #0
 8014b76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014b78:	4b0f      	ldr	r3, [pc, #60]	; (8014bb8 <prvProcessTimerOrBlockTask+0x94>)
 8014b7a:	6818      	ldr	r0, [r3, #0]
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	683a      	ldr	r2, [r7, #0]
 8014b84:	4619      	mov	r1, r3
 8014b86:	f7fe fdf5 	bl	8013774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014b8a:	f7ff f8f9 	bl	8013d80 <xTaskResumeAll>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10a      	bne.n	8014baa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014b94:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <prvProcessTimerOrBlockTask+0x98>)
 8014b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b9a:	601a      	str	r2, [r3, #0]
 8014b9c:	f3bf 8f4f 	dsb	sy
 8014ba0:	f3bf 8f6f 	isb	sy
}
 8014ba4:	e001      	b.n	8014baa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014ba6:	f7ff f8eb 	bl	8013d80 <xTaskResumeAll>
}
 8014baa:	bf00      	nop
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	20000f00 	.word	0x20000f00
 8014bb8:	20000f04 	.word	0x20000f04
 8014bbc:	e000ed04 	.word	0xe000ed04

08014bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014bc8:	4b0e      	ldr	r3, [pc, #56]	; (8014c04 <prvGetNextExpireTime+0x44>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d101      	bne.n	8014bd6 <prvGetNextExpireTime+0x16>
 8014bd2:	2201      	movs	r2, #1
 8014bd4:	e000      	b.n	8014bd8 <prvGetNextExpireTime+0x18>
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d105      	bne.n	8014bf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014be4:	4b07      	ldr	r3, [pc, #28]	; (8014c04 <prvGetNextExpireTime+0x44>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	60fb      	str	r3, [r7, #12]
 8014bee:	e001      	b.n	8014bf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3714      	adds	r7, #20
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr
 8014c02:	bf00      	nop
 8014c04:	20000efc 	.word	0x20000efc

08014c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014c10:	f7ff f954 	bl	8013ebc <xTaskGetTickCount>
 8014c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014c16:	4b0b      	ldr	r3, [pc, #44]	; (8014c44 <prvSampleTimeNow+0x3c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d205      	bcs.n	8014c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014c20:	f000 f936 	bl	8014e90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2201      	movs	r2, #1
 8014c28:	601a      	str	r2, [r3, #0]
 8014c2a:	e002      	b.n	8014c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014c32:	4a04      	ldr	r2, [pc, #16]	; (8014c44 <prvSampleTimeNow+0x3c>)
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014c38:	68fb      	ldr	r3, [r7, #12]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3710      	adds	r7, #16
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	20000f0c 	.word	0x20000f0c

08014c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014c56:	2300      	movs	r3, #0
 8014c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	68ba      	ldr	r2, [r7, #8]
 8014c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68fa      	ldr	r2, [r7, #12]
 8014c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014c66:	68ba      	ldr	r2, [r7, #8]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d812      	bhi.n	8014c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	1ad2      	subs	r2, r2, r3
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	699b      	ldr	r3, [r3, #24]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d302      	bcc.n	8014c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	617b      	str	r3, [r7, #20]
 8014c80:	e01b      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014c82:	4b10      	ldr	r3, [pc, #64]	; (8014cc4 <prvInsertTimerInActiveList+0x7c>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3304      	adds	r3, #4
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	4610      	mov	r0, r2
 8014c8e:	f7fd fc3e 	bl	801250e <vListInsert>
 8014c92:	e012      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d206      	bcs.n	8014caa <prvInsertTimerInActiveList+0x62>
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d302      	bcc.n	8014caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	617b      	str	r3, [r7, #20]
 8014ca8:	e007      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014caa:	4b07      	ldr	r3, [pc, #28]	; (8014cc8 <prvInsertTimerInActiveList+0x80>)
 8014cac:	681a      	ldr	r2, [r3, #0]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	3304      	adds	r3, #4
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4610      	mov	r0, r2
 8014cb6:	f7fd fc2a 	bl	801250e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014cba:	697b      	ldr	r3, [r7, #20]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	20000f00 	.word	0x20000f00
 8014cc8:	20000efc 	.word	0x20000efc

08014ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08e      	sub	sp, #56	; 0x38
 8014cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014cd2:	e0cc      	b.n	8014e6e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	da19      	bge.n	8014d0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014cda:	1d3b      	adds	r3, r7, #4
 8014cdc:	3304      	adds	r3, #4
 8014cde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d10b      	bne.n	8014cfe <prvProcessReceivedCommands+0x32>
 8014ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cea:	b672      	cpsid	i
 8014cec:	f383 8811 	msr	BASEPRI, r3
 8014cf0:	f3bf 8f6f 	isb	sy
 8014cf4:	f3bf 8f4f 	dsb	sy
 8014cf8:	b662      	cpsie	i
 8014cfa:	61fb      	str	r3, [r7, #28]
 8014cfc:	e7fe      	b.n	8014cfc <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d04:	6850      	ldr	r0, [r2, #4]
 8014d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d08:	6892      	ldr	r2, [r2, #8]
 8014d0a:	4611      	mov	r1, r2
 8014d0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f2c0 80ab 	blt.w	8014e6c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1c:	695b      	ldr	r3, [r3, #20]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d004      	beq.n	8014d2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d24:	3304      	adds	r3, #4
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fd fc2a 	bl	8012580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014d2c:	463b      	mov	r3, r7
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7ff ff6a 	bl	8014c08 <prvSampleTimeNow>
 8014d34:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2b09      	cmp	r3, #9
 8014d3a:	f200 8098 	bhi.w	8014e6e <prvProcessReceivedCommands+0x1a2>
 8014d3e:	a201      	add	r2, pc, #4	; (adr r2, 8014d44 <prvProcessReceivedCommands+0x78>)
 8014d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d44:	08014d6d 	.word	0x08014d6d
 8014d48:	08014d6d 	.word	0x08014d6d
 8014d4c:	08014d6d 	.word	0x08014d6d
 8014d50:	08014de3 	.word	0x08014de3
 8014d54:	08014df7 	.word	0x08014df7
 8014d58:	08014e43 	.word	0x08014e43
 8014d5c:	08014d6d 	.word	0x08014d6d
 8014d60:	08014d6d 	.word	0x08014d6d
 8014d64:	08014de3 	.word	0x08014de3
 8014d68:	08014df7 	.word	0x08014df7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d72:	f043 0301 	orr.w	r3, r3, #1
 8014d76:	b2da      	uxtb	r2, r3
 8014d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d82:	699b      	ldr	r3, [r3, #24]
 8014d84:	18d1      	adds	r1, r2, r3
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d8c:	f7ff ff5c 	bl	8014c48 <prvInsertTimerInActiveList>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d06b      	beq.n	8014e6e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014da4:	f003 0304 	and.w	r3, r3, #4
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d060      	beq.n	8014e6e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014dac:	68ba      	ldr	r2, [r7, #8]
 8014dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db0:	699b      	ldr	r3, [r3, #24]
 8014db2:	441a      	add	r2, r3
 8014db4:	2300      	movs	r3, #0
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	2300      	movs	r3, #0
 8014dba:	2100      	movs	r1, #0
 8014dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dbe:	f7ff fe03 	bl	80149c8 <xTimerGenericCommand>
 8014dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014dc4:	6a3b      	ldr	r3, [r7, #32]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d151      	bne.n	8014e6e <prvProcessReceivedCommands+0x1a2>
 8014dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dce:	b672      	cpsid	i
 8014dd0:	f383 8811 	msr	BASEPRI, r3
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	b662      	cpsie	i
 8014dde:	61bb      	str	r3, [r7, #24]
 8014de0:	e7fe      	b.n	8014de0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014de8:	f023 0301 	bic.w	r3, r3, #1
 8014dec:	b2da      	uxtb	r2, r3
 8014dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014df4:	e03b      	b.n	8014e6e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dfc:	f043 0301 	orr.w	r3, r3, #1
 8014e00:	b2da      	uxtb	r2, r3
 8014e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014e08:	68ba      	ldr	r2, [r7, #8]
 8014e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e10:	699b      	ldr	r3, [r3, #24]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d10b      	bne.n	8014e2e <prvProcessReceivedCommands+0x162>
 8014e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1a:	b672      	cpsid	i
 8014e1c:	f383 8811 	msr	BASEPRI, r3
 8014e20:	f3bf 8f6f 	isb	sy
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	b662      	cpsie	i
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	e7fe      	b.n	8014e2c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	699a      	ldr	r2, [r3, #24]
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	18d1      	adds	r1, r2, r3
 8014e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e3c:	f7ff ff04 	bl	8014c48 <prvInsertTimerInActiveList>
					break;
 8014e40:	e015      	b.n	8014e6e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e48:	f003 0302 	and.w	r3, r3, #2
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d103      	bne.n	8014e58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e52:	f000 fbb3 	bl	80155bc <vPortFree>
 8014e56:	e00a      	b.n	8014e6e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e5e:	f023 0301 	bic.w	r3, r3, #1
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014e6a:	e000      	b.n	8014e6e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e6e:	4b07      	ldr	r3, [pc, #28]	; (8014e8c <prvProcessReceivedCommands+0x1c0>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	1d39      	adds	r1, r7, #4
 8014e74:	2200      	movs	r2, #0
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fe f868 	bl	8012f4c <xQueueReceive>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	f47f af28 	bne.w	8014cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8014e84:	bf00      	nop
 8014e86:	3730      	adds	r7, #48	; 0x30
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	20000f04 	.word	0x20000f04

08014e90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b088      	sub	sp, #32
 8014e94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014e96:	e049      	b.n	8014f2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e98:	4b2e      	ldr	r3, [pc, #184]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ea2:	4b2c      	ldr	r3, [pc, #176]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	3304      	adds	r3, #4
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fd fb65 	bl	8012580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	6a1b      	ldr	r3, [r3, #32]
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ec4:	f003 0304 	and.w	r3, r3, #4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d02f      	beq.n	8014f2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	693a      	ldr	r2, [r7, #16]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d90e      	bls.n	8014efc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	68fa      	ldr	r2, [r7, #12]
 8014ee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014eea:	4b1a      	ldr	r3, [pc, #104]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	3304      	adds	r3, #4
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	4610      	mov	r0, r2
 8014ef6:	f7fd fb0a 	bl	801250e <vListInsert>
 8014efa:	e017      	b.n	8014f2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014efc:	2300      	movs	r3, #0
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	2300      	movs	r3, #0
 8014f02:	693a      	ldr	r2, [r7, #16]
 8014f04:	2100      	movs	r1, #0
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f7ff fd5e 	bl	80149c8 <xTimerGenericCommand>
 8014f0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10b      	bne.n	8014f2c <prvSwitchTimerLists+0x9c>
 8014f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f18:	b672      	cpsid	i
 8014f1a:	f383 8811 	msr	BASEPRI, r3
 8014f1e:	f3bf 8f6f 	isb	sy
 8014f22:	f3bf 8f4f 	dsb	sy
 8014f26:	b662      	cpsie	i
 8014f28:	603b      	str	r3, [r7, #0]
 8014f2a:	e7fe      	b.n	8014f2a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014f2c:	4b09      	ldr	r3, [pc, #36]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d1b0      	bne.n	8014e98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014f36:	4b07      	ldr	r3, [pc, #28]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014f3c:	4b06      	ldr	r3, [pc, #24]	; (8014f58 <prvSwitchTimerLists+0xc8>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	4a04      	ldr	r2, [pc, #16]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014f42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014f44:	4a04      	ldr	r2, [pc, #16]	; (8014f58 <prvSwitchTimerLists+0xc8>)
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	6013      	str	r3, [r2, #0]
}
 8014f4a:	bf00      	nop
 8014f4c:	3718      	adds	r7, #24
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	20000efc 	.word	0x20000efc
 8014f58:	20000f00 	.word	0x20000f00

08014f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014f62:	f000 f941 	bl	80151e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014f66:	4b15      	ldr	r3, [pc, #84]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d120      	bne.n	8014fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014f6e:	4814      	ldr	r0, [pc, #80]	; (8014fc0 <prvCheckForValidListAndQueue+0x64>)
 8014f70:	f7fd fa7c 	bl	801246c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014f74:	4813      	ldr	r0, [pc, #76]	; (8014fc4 <prvCheckForValidListAndQueue+0x68>)
 8014f76:	f7fd fa79 	bl	801246c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014f7a:	4b13      	ldr	r3, [pc, #76]	; (8014fc8 <prvCheckForValidListAndQueue+0x6c>)
 8014f7c:	4a10      	ldr	r2, [pc, #64]	; (8014fc0 <prvCheckForValidListAndQueue+0x64>)
 8014f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014f80:	4b12      	ldr	r3, [pc, #72]	; (8014fcc <prvCheckForValidListAndQueue+0x70>)
 8014f82:	4a10      	ldr	r2, [pc, #64]	; (8014fc4 <prvCheckForValidListAndQueue+0x68>)
 8014f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014f86:	2300      	movs	r3, #0
 8014f88:	9300      	str	r3, [sp, #0]
 8014f8a:	4b11      	ldr	r3, [pc, #68]	; (8014fd0 <prvCheckForValidListAndQueue+0x74>)
 8014f8c:	4a11      	ldr	r2, [pc, #68]	; (8014fd4 <prvCheckForValidListAndQueue+0x78>)
 8014f8e:	2110      	movs	r1, #16
 8014f90:	200a      	movs	r0, #10
 8014f92:	f7fd fb89 	bl	80126a8 <xQueueGenericCreateStatic>
 8014f96:	4602      	mov	r2, r0
 8014f98:	4b08      	ldr	r3, [pc, #32]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014f9c:	4b07      	ldr	r3, [pc, #28]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d005      	beq.n	8014fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014fa4:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <prvCheckForValidListAndQueue+0x60>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	490b      	ldr	r1, [pc, #44]	; (8014fd8 <prvCheckForValidListAndQueue+0x7c>)
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fe fb90 	bl	80136d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fb0:	f000 f94c 	bl	801524c <vPortExitCritical>
}
 8014fb4:	bf00      	nop
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	20000f04 	.word	0x20000f04
 8014fc0:	20000ed4 	.word	0x20000ed4
 8014fc4:	20000ee8 	.word	0x20000ee8
 8014fc8:	20000efc 	.word	0x20000efc
 8014fcc:	20000f00 	.word	0x20000f00
 8014fd0:	20000fb0 	.word	0x20000fb0
 8014fd4:	20000f10 	.word	0x20000f10
 8014fd8:	080182bc 	.word	0x080182bc

08014fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b085      	sub	sp, #20
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	3b04      	subs	r3, #4
 8014fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	3b04      	subs	r3, #4
 8014ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	f023 0201 	bic.w	r2, r3, #1
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	3b04      	subs	r3, #4
 801500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801500c:	4a0c      	ldr	r2, [pc, #48]	; (8015040 <pxPortInitialiseStack+0x64>)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	3b14      	subs	r3, #20
 8015016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	3b04      	subs	r3, #4
 8015022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f06f 0202 	mvn.w	r2, #2
 801502a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	3b20      	subs	r3, #32
 8015030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015032:	68fb      	ldr	r3, [r7, #12]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3714      	adds	r7, #20
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	08015045 	.word	0x08015045

08015044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015044:	b480      	push	{r7}
 8015046:	b085      	sub	sp, #20
 8015048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801504a:	2300      	movs	r3, #0
 801504c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801504e:	4b13      	ldr	r3, [pc, #76]	; (801509c <prvTaskExitError+0x58>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015056:	d00b      	beq.n	8015070 <prvTaskExitError+0x2c>
 8015058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801505c:	b672      	cpsid	i
 801505e:	f383 8811 	msr	BASEPRI, r3
 8015062:	f3bf 8f6f 	isb	sy
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	b662      	cpsie	i
 801506c:	60fb      	str	r3, [r7, #12]
 801506e:	e7fe      	b.n	801506e <prvTaskExitError+0x2a>
 8015070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015074:	b672      	cpsid	i
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	b662      	cpsie	i
 8015084:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015086:	bf00      	nop
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d0fc      	beq.n	8015088 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801508e:	bf00      	nop
 8015090:	3714      	adds	r7, #20
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	2000011c 	.word	0x2000011c

080150a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80150a0:	4b07      	ldr	r3, [pc, #28]	; (80150c0 <pxCurrentTCBConst2>)
 80150a2:	6819      	ldr	r1, [r3, #0]
 80150a4:	6808      	ldr	r0, [r1, #0]
 80150a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150aa:	f380 8809 	msr	PSP, r0
 80150ae:	f3bf 8f6f 	isb	sy
 80150b2:	f04f 0000 	mov.w	r0, #0
 80150b6:	f380 8811 	msr	BASEPRI, r0
 80150ba:	4770      	bx	lr
 80150bc:	f3af 8000 	nop.w

080150c0 <pxCurrentTCBConst2>:
 80150c0:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80150c4:	bf00      	nop
 80150c6:	bf00      	nop

080150c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80150c8:	4808      	ldr	r0, [pc, #32]	; (80150ec <prvPortStartFirstTask+0x24>)
 80150ca:	6800      	ldr	r0, [r0, #0]
 80150cc:	6800      	ldr	r0, [r0, #0]
 80150ce:	f380 8808 	msr	MSP, r0
 80150d2:	f04f 0000 	mov.w	r0, #0
 80150d6:	f380 8814 	msr	CONTROL, r0
 80150da:	b662      	cpsie	i
 80150dc:	b661      	cpsie	f
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	df00      	svc	0
 80150e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80150ea:	bf00      	nop
 80150ec:	e000ed08 	.word	0xe000ed08

080150f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80150f6:	4b36      	ldr	r3, [pc, #216]	; (80151d0 <xPortStartScheduler+0xe0>)
 80150f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	22ff      	movs	r2, #255	; 0xff
 8015106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	b2db      	uxtb	r3, r3
 801510e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015110:	78fb      	ldrb	r3, [r7, #3]
 8015112:	b2db      	uxtb	r3, r3
 8015114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015118:	b2da      	uxtb	r2, r3
 801511a:	4b2e      	ldr	r3, [pc, #184]	; (80151d4 <xPortStartScheduler+0xe4>)
 801511c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801511e:	4b2e      	ldr	r3, [pc, #184]	; (80151d8 <xPortStartScheduler+0xe8>)
 8015120:	2207      	movs	r2, #7
 8015122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015124:	e009      	b.n	801513a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015126:	4b2c      	ldr	r3, [pc, #176]	; (80151d8 <xPortStartScheduler+0xe8>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	3b01      	subs	r3, #1
 801512c:	4a2a      	ldr	r2, [pc, #168]	; (80151d8 <xPortStartScheduler+0xe8>)
 801512e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015130:	78fb      	ldrb	r3, [r7, #3]
 8015132:	b2db      	uxtb	r3, r3
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	b2db      	uxtb	r3, r3
 8015138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801513a:	78fb      	ldrb	r3, [r7, #3]
 801513c:	b2db      	uxtb	r3, r3
 801513e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015142:	2b80      	cmp	r3, #128	; 0x80
 8015144:	d0ef      	beq.n	8015126 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015146:	4b24      	ldr	r3, [pc, #144]	; (80151d8 <xPortStartScheduler+0xe8>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	f1c3 0307 	rsb	r3, r3, #7
 801514e:	2b04      	cmp	r3, #4
 8015150:	d00b      	beq.n	801516a <xPortStartScheduler+0x7a>
 8015152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015156:	b672      	cpsid	i
 8015158:	f383 8811 	msr	BASEPRI, r3
 801515c:	f3bf 8f6f 	isb	sy
 8015160:	f3bf 8f4f 	dsb	sy
 8015164:	b662      	cpsie	i
 8015166:	60bb      	str	r3, [r7, #8]
 8015168:	e7fe      	b.n	8015168 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801516a:	4b1b      	ldr	r3, [pc, #108]	; (80151d8 <xPortStartScheduler+0xe8>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	021b      	lsls	r3, r3, #8
 8015170:	4a19      	ldr	r2, [pc, #100]	; (80151d8 <xPortStartScheduler+0xe8>)
 8015172:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015174:	4b18      	ldr	r3, [pc, #96]	; (80151d8 <xPortStartScheduler+0xe8>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801517c:	4a16      	ldr	r2, [pc, #88]	; (80151d8 <xPortStartScheduler+0xe8>)
 801517e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	b2da      	uxtb	r2, r3
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015188:	4b14      	ldr	r3, [pc, #80]	; (80151dc <xPortStartScheduler+0xec>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a13      	ldr	r2, [pc, #76]	; (80151dc <xPortStartScheduler+0xec>)
 801518e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015192:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015194:	4b11      	ldr	r3, [pc, #68]	; (80151dc <xPortStartScheduler+0xec>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4a10      	ldr	r2, [pc, #64]	; (80151dc <xPortStartScheduler+0xec>)
 801519a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801519e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80151a0:	f000 f8d4 	bl	801534c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80151a4:	4b0e      	ldr	r3, [pc, #56]	; (80151e0 <xPortStartScheduler+0xf0>)
 80151a6:	2200      	movs	r2, #0
 80151a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80151aa:	f000 f8f3 	bl	8015394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80151ae:	4b0d      	ldr	r3, [pc, #52]	; (80151e4 <xPortStartScheduler+0xf4>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	4a0c      	ldr	r2, [pc, #48]	; (80151e4 <xPortStartScheduler+0xf4>)
 80151b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80151b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80151ba:	f7ff ff85 	bl	80150c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80151be:	f7fe ff59 	bl	8014074 <vTaskSwitchContext>
	prvTaskExitError();
 80151c2:	f7ff ff3f 	bl	8015044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	e000e400 	.word	0xe000e400
 80151d4:	20001000 	.word	0x20001000
 80151d8:	20001004 	.word	0x20001004
 80151dc:	e000ed20 	.word	0xe000ed20
 80151e0:	2000011c 	.word	0x2000011c
 80151e4:	e000ef34 	.word	0xe000ef34

080151e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80151e8:	b480      	push	{r7}
 80151ea:	b083      	sub	sp, #12
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f2:	b672      	cpsid	i
 80151f4:	f383 8811 	msr	BASEPRI, r3
 80151f8:	f3bf 8f6f 	isb	sy
 80151fc:	f3bf 8f4f 	dsb	sy
 8015200:	b662      	cpsie	i
 8015202:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015204:	4b0f      	ldr	r3, [pc, #60]	; (8015244 <vPortEnterCritical+0x5c>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	3301      	adds	r3, #1
 801520a:	4a0e      	ldr	r2, [pc, #56]	; (8015244 <vPortEnterCritical+0x5c>)
 801520c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801520e:	4b0d      	ldr	r3, [pc, #52]	; (8015244 <vPortEnterCritical+0x5c>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b01      	cmp	r3, #1
 8015214:	d110      	bne.n	8015238 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015216:	4b0c      	ldr	r3, [pc, #48]	; (8015248 <vPortEnterCritical+0x60>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00b      	beq.n	8015238 <vPortEnterCritical+0x50>
 8015220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015224:	b672      	cpsid	i
 8015226:	f383 8811 	msr	BASEPRI, r3
 801522a:	f3bf 8f6f 	isb	sy
 801522e:	f3bf 8f4f 	dsb	sy
 8015232:	b662      	cpsie	i
 8015234:	603b      	str	r3, [r7, #0]
 8015236:	e7fe      	b.n	8015236 <vPortEnterCritical+0x4e>
	}
}
 8015238:	bf00      	nop
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	2000011c 	.word	0x2000011c
 8015248:	e000ed04 	.word	0xe000ed04

0801524c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015252:	4b12      	ldr	r3, [pc, #72]	; (801529c <vPortExitCritical+0x50>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10b      	bne.n	8015272 <vPortExitCritical+0x26>
 801525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801525e:	b672      	cpsid	i
 8015260:	f383 8811 	msr	BASEPRI, r3
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	b662      	cpsie	i
 801526e:	607b      	str	r3, [r7, #4]
 8015270:	e7fe      	b.n	8015270 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015272:	4b0a      	ldr	r3, [pc, #40]	; (801529c <vPortExitCritical+0x50>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	3b01      	subs	r3, #1
 8015278:	4a08      	ldr	r2, [pc, #32]	; (801529c <vPortExitCritical+0x50>)
 801527a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801527c:	4b07      	ldr	r3, [pc, #28]	; (801529c <vPortExitCritical+0x50>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d104      	bne.n	801528e <vPortExitCritical+0x42>
 8015284:	2300      	movs	r3, #0
 8015286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801528e:	bf00      	nop
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop
 801529c:	2000011c 	.word	0x2000011c

080152a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80152a0:	f3ef 8009 	mrs	r0, PSP
 80152a4:	f3bf 8f6f 	isb	sy
 80152a8:	4b15      	ldr	r3, [pc, #84]	; (8015300 <pxCurrentTCBConst>)
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	f01e 0f10 	tst.w	lr, #16
 80152b0:	bf08      	it	eq
 80152b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80152b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ba:	6010      	str	r0, [r2, #0]
 80152bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80152c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80152c4:	b672      	cpsid	i
 80152c6:	f380 8811 	msr	BASEPRI, r0
 80152ca:	f3bf 8f4f 	dsb	sy
 80152ce:	f3bf 8f6f 	isb	sy
 80152d2:	b662      	cpsie	i
 80152d4:	f7fe fece 	bl	8014074 <vTaskSwitchContext>
 80152d8:	f04f 0000 	mov.w	r0, #0
 80152dc:	f380 8811 	msr	BASEPRI, r0
 80152e0:	bc09      	pop	{r0, r3}
 80152e2:	6819      	ldr	r1, [r3, #0]
 80152e4:	6808      	ldr	r0, [r1, #0]
 80152e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ea:	f01e 0f10 	tst.w	lr, #16
 80152ee:	bf08      	it	eq
 80152f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80152f4:	f380 8809 	msr	PSP, r0
 80152f8:	f3bf 8f6f 	isb	sy
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop

08015300 <pxCurrentTCBConst>:
 8015300:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015304:	bf00      	nop
 8015306:	bf00      	nop

08015308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
	__asm volatile
 801530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015312:	b672      	cpsid	i
 8015314:	f383 8811 	msr	BASEPRI, r3
 8015318:	f3bf 8f6f 	isb	sy
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	b662      	cpsie	i
 8015322:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015324:	f7fe fdec 	bl	8013f00 <xTaskIncrementTick>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d003      	beq.n	8015336 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801532e:	4b06      	ldr	r3, [pc, #24]	; (8015348 <SysTick_Handler+0x40>)
 8015330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015334:	601a      	str	r2, [r3, #0]
 8015336:	2300      	movs	r3, #0
 8015338:	603b      	str	r3, [r7, #0]
	__asm volatile
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015340:	bf00      	nop
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}
 8015348:	e000ed04 	.word	0xe000ed04

0801534c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801534c:	b480      	push	{r7}
 801534e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015350:	4b0b      	ldr	r3, [pc, #44]	; (8015380 <vPortSetupTimerInterrupt+0x34>)
 8015352:	2200      	movs	r2, #0
 8015354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015356:	4b0b      	ldr	r3, [pc, #44]	; (8015384 <vPortSetupTimerInterrupt+0x38>)
 8015358:	2200      	movs	r2, #0
 801535a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801535c:	4b0a      	ldr	r3, [pc, #40]	; (8015388 <vPortSetupTimerInterrupt+0x3c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a0a      	ldr	r2, [pc, #40]	; (801538c <vPortSetupTimerInterrupt+0x40>)
 8015362:	fba2 2303 	umull	r2, r3, r2, r3
 8015366:	099b      	lsrs	r3, r3, #6
 8015368:	4a09      	ldr	r2, [pc, #36]	; (8015390 <vPortSetupTimerInterrupt+0x44>)
 801536a:	3b01      	subs	r3, #1
 801536c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801536e:	4b04      	ldr	r3, [pc, #16]	; (8015380 <vPortSetupTimerInterrupt+0x34>)
 8015370:	2207      	movs	r2, #7
 8015372:	601a      	str	r2, [r3, #0]
}
 8015374:	bf00      	nop
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop
 8015380:	e000e010 	.word	0xe000e010
 8015384:	e000e018 	.word	0xe000e018
 8015388:	20000000 	.word	0x20000000
 801538c:	10624dd3 	.word	0x10624dd3
 8015390:	e000e014 	.word	0xe000e014

08015394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80153a4 <vPortEnableVFP+0x10>
 8015398:	6801      	ldr	r1, [r0, #0]
 801539a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801539e:	6001      	str	r1, [r0, #0]
 80153a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80153a2:	bf00      	nop
 80153a4:	e000ed88 	.word	0xe000ed88

080153a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80153a8:	b480      	push	{r7}
 80153aa:	b085      	sub	sp, #20
 80153ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80153ae:	f3ef 8305 	mrs	r3, IPSR
 80153b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2b0f      	cmp	r3, #15
 80153b8:	d915      	bls.n	80153e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80153ba:	4a18      	ldr	r2, [pc, #96]	; (801541c <vPortValidateInterruptPriority+0x74>)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	4413      	add	r3, r2
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80153c4:	4b16      	ldr	r3, [pc, #88]	; (8015420 <vPortValidateInterruptPriority+0x78>)
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	7afa      	ldrb	r2, [r7, #11]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d20b      	bcs.n	80153e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80153ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d2:	b672      	cpsid	i
 80153d4:	f383 8811 	msr	BASEPRI, r3
 80153d8:	f3bf 8f6f 	isb	sy
 80153dc:	f3bf 8f4f 	dsb	sy
 80153e0:	b662      	cpsie	i
 80153e2:	607b      	str	r3, [r7, #4]
 80153e4:	e7fe      	b.n	80153e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80153e6:	4b0f      	ldr	r3, [pc, #60]	; (8015424 <vPortValidateInterruptPriority+0x7c>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80153ee:	4b0e      	ldr	r3, [pc, #56]	; (8015428 <vPortValidateInterruptPriority+0x80>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d90b      	bls.n	801540e <vPortValidateInterruptPriority+0x66>
 80153f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fa:	b672      	cpsid	i
 80153fc:	f383 8811 	msr	BASEPRI, r3
 8015400:	f3bf 8f6f 	isb	sy
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	b662      	cpsie	i
 801540a:	603b      	str	r3, [r7, #0]
 801540c:	e7fe      	b.n	801540c <vPortValidateInterruptPriority+0x64>
	}
 801540e:	bf00      	nop
 8015410:	3714      	adds	r7, #20
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	e000e3f0 	.word	0xe000e3f0
 8015420:	20001000 	.word	0x20001000
 8015424:	e000ed0c 	.word	0xe000ed0c
 8015428:	20001004 	.word	0x20001004

0801542c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b08a      	sub	sp, #40	; 0x28
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015434:	2300      	movs	r3, #0
 8015436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015438:	f7fe fc94 	bl	8013d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801543c:	4b5a      	ldr	r3, [pc, #360]	; (80155a8 <pvPortMalloc+0x17c>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d101      	bne.n	8015448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015444:	f000 f916 	bl	8015674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015448:	4b58      	ldr	r3, [pc, #352]	; (80155ac <pvPortMalloc+0x180>)
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	4013      	ands	r3, r2
 8015450:	2b00      	cmp	r3, #0
 8015452:	f040 8090 	bne.w	8015576 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d01e      	beq.n	801549a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801545c:	2208      	movs	r2, #8
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	4413      	add	r3, r2
 8015462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f003 0307 	and.w	r3, r3, #7
 801546a:	2b00      	cmp	r3, #0
 801546c:	d015      	beq.n	801549a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f023 0307 	bic.w	r3, r3, #7
 8015474:	3308      	adds	r3, #8
 8015476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f003 0307 	and.w	r3, r3, #7
 801547e:	2b00      	cmp	r3, #0
 8015480:	d00b      	beq.n	801549a <pvPortMalloc+0x6e>
 8015482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015486:	b672      	cpsid	i
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	b662      	cpsie	i
 8015496:	617b      	str	r3, [r7, #20]
 8015498:	e7fe      	b.n	8015498 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d06a      	beq.n	8015576 <pvPortMalloc+0x14a>
 80154a0:	4b43      	ldr	r3, [pc, #268]	; (80155b0 <pvPortMalloc+0x184>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d865      	bhi.n	8015576 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80154aa:	4b42      	ldr	r3, [pc, #264]	; (80155b4 <pvPortMalloc+0x188>)
 80154ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80154ae:	4b41      	ldr	r3, [pc, #260]	; (80155b4 <pvPortMalloc+0x188>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80154b4:	e004      	b.n	80154c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80154b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80154ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80154c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	687a      	ldr	r2, [r7, #4]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d903      	bls.n	80154d2 <pvPortMalloc+0xa6>
 80154ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d1f1      	bne.n	80154b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80154d2:	4b35      	ldr	r3, [pc, #212]	; (80155a8 <pvPortMalloc+0x17c>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154d8:	429a      	cmp	r2, r3
 80154da:	d04c      	beq.n	8015576 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80154dc:	6a3b      	ldr	r3, [r7, #32]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2208      	movs	r2, #8
 80154e2:	4413      	add	r3, r2
 80154e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80154e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	6a3b      	ldr	r3, [r7, #32]
 80154ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80154ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f0:	685a      	ldr	r2, [r3, #4]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	1ad2      	subs	r2, r2, r3
 80154f6:	2308      	movs	r3, #8
 80154f8:	005b      	lsls	r3, r3, #1
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d920      	bls.n	8015540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80154fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	4413      	add	r3, r2
 8015504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	f003 0307 	and.w	r3, r3, #7
 801550c:	2b00      	cmp	r3, #0
 801550e:	d00b      	beq.n	8015528 <pvPortMalloc+0xfc>
 8015510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015514:	b672      	cpsid	i
 8015516:	f383 8811 	msr	BASEPRI, r3
 801551a:	f3bf 8f6f 	isb	sy
 801551e:	f3bf 8f4f 	dsb	sy
 8015522:	b662      	cpsie	i
 8015524:	613b      	str	r3, [r7, #16]
 8015526:	e7fe      	b.n	8015526 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	685a      	ldr	r2, [r3, #4]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	1ad2      	subs	r2, r2, r3
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801553a:	69b8      	ldr	r0, [r7, #24]
 801553c:	f000 f8fc 	bl	8015738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015540:	4b1b      	ldr	r3, [pc, #108]	; (80155b0 <pvPortMalloc+0x184>)
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	1ad3      	subs	r3, r2, r3
 801554a:	4a19      	ldr	r2, [pc, #100]	; (80155b0 <pvPortMalloc+0x184>)
 801554c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801554e:	4b18      	ldr	r3, [pc, #96]	; (80155b0 <pvPortMalloc+0x184>)
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	4b19      	ldr	r3, [pc, #100]	; (80155b8 <pvPortMalloc+0x18c>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	429a      	cmp	r2, r3
 8015558:	d203      	bcs.n	8015562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801555a:	4b15      	ldr	r3, [pc, #84]	; (80155b0 <pvPortMalloc+0x184>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	4a16      	ldr	r2, [pc, #88]	; (80155b8 <pvPortMalloc+0x18c>)
 8015560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015564:	685a      	ldr	r2, [r3, #4]
 8015566:	4b11      	ldr	r3, [pc, #68]	; (80155ac <pvPortMalloc+0x180>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	431a      	orrs	r2, r3
 801556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	2200      	movs	r2, #0
 8015574:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015576:	f7fe fc03 	bl	8013d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	f003 0307 	and.w	r3, r3, #7
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00b      	beq.n	801559c <pvPortMalloc+0x170>
 8015584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015588:	b672      	cpsid	i
 801558a:	f383 8811 	msr	BASEPRI, r3
 801558e:	f3bf 8f6f 	isb	sy
 8015592:	f3bf 8f4f 	dsb	sy
 8015596:	b662      	cpsie	i
 8015598:	60fb      	str	r3, [r7, #12]
 801559a:	e7fe      	b.n	801559a <pvPortMalloc+0x16e>
	return pvReturn;
 801559c:	69fb      	ldr	r3, [r7, #28]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3728      	adds	r7, #40	; 0x28
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	20008810 	.word	0x20008810
 80155ac:	2000881c 	.word	0x2000881c
 80155b0:	20008814 	.word	0x20008814
 80155b4:	20008808 	.word	0x20008808
 80155b8:	20008818 	.word	0x20008818

080155bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b086      	sub	sp, #24
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d04a      	beq.n	8015664 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80155ce:	2308      	movs	r3, #8
 80155d0:	425b      	negs	r3, r3
 80155d2:	697a      	ldr	r2, [r7, #20]
 80155d4:	4413      	add	r3, r2
 80155d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	685a      	ldr	r2, [r3, #4]
 80155e0:	4b22      	ldr	r3, [pc, #136]	; (801566c <vPortFree+0xb0>)
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	4013      	ands	r3, r2
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d10b      	bne.n	8015602 <vPortFree+0x46>
 80155ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ee:	b672      	cpsid	i
 80155f0:	f383 8811 	msr	BASEPRI, r3
 80155f4:	f3bf 8f6f 	isb	sy
 80155f8:	f3bf 8f4f 	dsb	sy
 80155fc:	b662      	cpsie	i
 80155fe:	60fb      	str	r3, [r7, #12]
 8015600:	e7fe      	b.n	8015600 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00b      	beq.n	8015622 <vPortFree+0x66>
 801560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801560e:	b672      	cpsid	i
 8015610:	f383 8811 	msr	BASEPRI, r3
 8015614:	f3bf 8f6f 	isb	sy
 8015618:	f3bf 8f4f 	dsb	sy
 801561c:	b662      	cpsie	i
 801561e:	60bb      	str	r3, [r7, #8]
 8015620:	e7fe      	b.n	8015620 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	685a      	ldr	r2, [r3, #4]
 8015626:	4b11      	ldr	r3, [pc, #68]	; (801566c <vPortFree+0xb0>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	4013      	ands	r3, r2
 801562c:	2b00      	cmp	r3, #0
 801562e:	d019      	beq.n	8015664 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d115      	bne.n	8015664 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	4b0b      	ldr	r3, [pc, #44]	; (801566c <vPortFree+0xb0>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	43db      	mvns	r3, r3
 8015642:	401a      	ands	r2, r3
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015648:	f7fe fb8c 	bl	8013d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	4b07      	ldr	r3, [pc, #28]	; (8015670 <vPortFree+0xb4>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4413      	add	r3, r2
 8015656:	4a06      	ldr	r2, [pc, #24]	; (8015670 <vPortFree+0xb4>)
 8015658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801565a:	6938      	ldr	r0, [r7, #16]
 801565c:	f000 f86c 	bl	8015738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015660:	f7fe fb8e 	bl	8013d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015664:	bf00      	nop
 8015666:	3718      	adds	r7, #24
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	2000881c 	.word	0x2000881c
 8015670:	20008814 	.word	0x20008814

08015674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015674:	b480      	push	{r7}
 8015676:	b085      	sub	sp, #20
 8015678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801567a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801567e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015680:	4b27      	ldr	r3, [pc, #156]	; (8015720 <prvHeapInit+0xac>)
 8015682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	f003 0307 	and.w	r3, r3, #7
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00c      	beq.n	80156a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	3307      	adds	r3, #7
 8015692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f023 0307 	bic.w	r3, r3, #7
 801569a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	1ad3      	subs	r3, r2, r3
 80156a2:	4a1f      	ldr	r2, [pc, #124]	; (8015720 <prvHeapInit+0xac>)
 80156a4:	4413      	add	r3, r2
 80156a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80156ac:	4a1d      	ldr	r2, [pc, #116]	; (8015724 <prvHeapInit+0xb0>)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80156b2:	4b1c      	ldr	r3, [pc, #112]	; (8015724 <prvHeapInit+0xb0>)
 80156b4:	2200      	movs	r2, #0
 80156b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	68ba      	ldr	r2, [r7, #8]
 80156bc:	4413      	add	r3, r2
 80156be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80156c0:	2208      	movs	r2, #8
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	1a9b      	subs	r3, r3, r2
 80156c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f023 0307 	bic.w	r3, r3, #7
 80156ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	4a15      	ldr	r2, [pc, #84]	; (8015728 <prvHeapInit+0xb4>)
 80156d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80156d6:	4b14      	ldr	r3, [pc, #80]	; (8015728 <prvHeapInit+0xb4>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	2200      	movs	r2, #0
 80156dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80156de:	4b12      	ldr	r3, [pc, #72]	; (8015728 <prvHeapInit+0xb4>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2200      	movs	r2, #0
 80156e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	68fa      	ldr	r2, [r7, #12]
 80156ee:	1ad2      	subs	r2, r2, r3
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80156f4:	4b0c      	ldr	r3, [pc, #48]	; (8015728 <prvHeapInit+0xb4>)
 80156f6:	681a      	ldr	r2, [r3, #0]
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	685b      	ldr	r3, [r3, #4]
 8015700:	4a0a      	ldr	r2, [pc, #40]	; (801572c <prvHeapInit+0xb8>)
 8015702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	4a09      	ldr	r2, [pc, #36]	; (8015730 <prvHeapInit+0xbc>)
 801570a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801570c:	4b09      	ldr	r3, [pc, #36]	; (8015734 <prvHeapInit+0xc0>)
 801570e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015712:	601a      	str	r2, [r3, #0]
}
 8015714:	bf00      	nop
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr
 8015720:	20001008 	.word	0x20001008
 8015724:	20008808 	.word	0x20008808
 8015728:	20008810 	.word	0x20008810
 801572c:	20008818 	.word	0x20008818
 8015730:	20008814 	.word	0x20008814
 8015734:	2000881c 	.word	0x2000881c

08015738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015738:	b480      	push	{r7}
 801573a:	b085      	sub	sp, #20
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015740:	4b28      	ldr	r3, [pc, #160]	; (80157e4 <prvInsertBlockIntoFreeList+0xac>)
 8015742:	60fb      	str	r3, [r7, #12]
 8015744:	e002      	b.n	801574c <prvInsertBlockIntoFreeList+0x14>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	60fb      	str	r3, [r7, #12]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	429a      	cmp	r2, r3
 8015754:	d8f7      	bhi.n	8015746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	68ba      	ldr	r2, [r7, #8]
 8015760:	4413      	add	r3, r2
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	429a      	cmp	r2, r3
 8015766:	d108      	bne.n	801577a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	685a      	ldr	r2, [r3, #4]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	685b      	ldr	r3, [r3, #4]
 8015770:	441a      	add	r2, r3
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	68ba      	ldr	r2, [r7, #8]
 8015784:	441a      	add	r2, r3
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	429a      	cmp	r2, r3
 801578c:	d118      	bne.n	80157c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	4b15      	ldr	r3, [pc, #84]	; (80157e8 <prvInsertBlockIntoFreeList+0xb0>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	429a      	cmp	r2, r3
 8015798:	d00d      	beq.n	80157b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	685a      	ldr	r2, [r3, #4]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	441a      	add	r2, r3
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	601a      	str	r2, [r3, #0]
 80157b4:	e008      	b.n	80157c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80157b6:	4b0c      	ldr	r3, [pc, #48]	; (80157e8 <prvInsertBlockIntoFreeList+0xb0>)
 80157b8:	681a      	ldr	r2, [r3, #0]
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	601a      	str	r2, [r3, #0]
 80157be:	e003      	b.n	80157c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	681a      	ldr	r2, [r3, #0]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80157c8:	68fa      	ldr	r2, [r7, #12]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d002      	beq.n	80157d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80157d6:	bf00      	nop
 80157d8:	3714      	adds	r7, #20
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	20008808 	.word	0x20008808
 80157e8:	20008810 	.word	0x20008810

080157ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80157f0:	2200      	movs	r2, #0
 80157f2:	4912      	ldr	r1, [pc, #72]	; (801583c <MX_USB_DEVICE_Init+0x50>)
 80157f4:	4812      	ldr	r0, [pc, #72]	; (8015840 <MX_USB_DEVICE_Init+0x54>)
 80157f6:	f7f7 ff2f 	bl	800d658 <USBD_Init>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d001      	beq.n	8015804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015800:	f7eb fee2 	bl	80015c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015804:	490f      	ldr	r1, [pc, #60]	; (8015844 <MX_USB_DEVICE_Init+0x58>)
 8015806:	480e      	ldr	r0, [pc, #56]	; (8015840 <MX_USB_DEVICE_Init+0x54>)
 8015808:	f7f7 ff5c 	bl	800d6c4 <USBD_RegisterClass>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015812:	f7eb fed9 	bl	80015c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015816:	490c      	ldr	r1, [pc, #48]	; (8015848 <MX_USB_DEVICE_Init+0x5c>)
 8015818:	4809      	ldr	r0, [pc, #36]	; (8015840 <MX_USB_DEVICE_Init+0x54>)
 801581a:	f7f7 fe81 	bl	800d520 <USBD_CDC_RegisterInterface>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015824:	f7eb fed0 	bl	80015c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015828:	4805      	ldr	r0, [pc, #20]	; (8015840 <MX_USB_DEVICE_Init+0x54>)
 801582a:	f7f7 ff6c 	bl	800d706 <USBD_Start>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d001      	beq.n	8015838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015834:	f7eb fec8 	bl	80015c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015838:	bf00      	nop
 801583a:	bd80      	pop	{r7, pc}
 801583c:	20000134 	.word	0x20000134
 8015840:	20015794 	.word	0x20015794
 8015844:	20000018 	.word	0x20000018
 8015848:	20000120 	.word	0x20000120

0801584c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015850:	2200      	movs	r2, #0
 8015852:	4905      	ldr	r1, [pc, #20]	; (8015868 <CDC_Init_FS+0x1c>)
 8015854:	4805      	ldr	r0, [pc, #20]	; (801586c <CDC_Init_FS+0x20>)
 8015856:	f7f7 fe78 	bl	800d54a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801585a:	4905      	ldr	r1, [pc, #20]	; (8015870 <CDC_Init_FS+0x24>)
 801585c:	4803      	ldr	r0, [pc, #12]	; (801586c <CDC_Init_FS+0x20>)
 801585e:	f7f7 fe8d 	bl	800d57c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015864:	4618      	mov	r0, r3
 8015866:	bd80      	pop	{r7, pc}
 8015868:	20016264 	.word	0x20016264
 801586c:	20015794 	.word	0x20015794
 8015870:	20015a64 	.word	0x20015a64

08015874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015874:	b480      	push	{r7}
 8015876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801587a:	4618      	mov	r0, r3
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	4603      	mov	r3, r0
 801588c:	6039      	str	r1, [r7, #0]
 801588e:	71fb      	strb	r3, [r7, #7]
 8015890:	4613      	mov	r3, r2
 8015892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015894:	79fb      	ldrb	r3, [r7, #7]
 8015896:	2b23      	cmp	r3, #35	; 0x23
 8015898:	d84a      	bhi.n	8015930 <CDC_Control_FS+0xac>
 801589a:	a201      	add	r2, pc, #4	; (adr r2, 80158a0 <CDC_Control_FS+0x1c>)
 801589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158a0:	08015931 	.word	0x08015931
 80158a4:	08015931 	.word	0x08015931
 80158a8:	08015931 	.word	0x08015931
 80158ac:	08015931 	.word	0x08015931
 80158b0:	08015931 	.word	0x08015931
 80158b4:	08015931 	.word	0x08015931
 80158b8:	08015931 	.word	0x08015931
 80158bc:	08015931 	.word	0x08015931
 80158c0:	08015931 	.word	0x08015931
 80158c4:	08015931 	.word	0x08015931
 80158c8:	08015931 	.word	0x08015931
 80158cc:	08015931 	.word	0x08015931
 80158d0:	08015931 	.word	0x08015931
 80158d4:	08015931 	.word	0x08015931
 80158d8:	08015931 	.word	0x08015931
 80158dc:	08015931 	.word	0x08015931
 80158e0:	08015931 	.word	0x08015931
 80158e4:	08015931 	.word	0x08015931
 80158e8:	08015931 	.word	0x08015931
 80158ec:	08015931 	.word	0x08015931
 80158f0:	08015931 	.word	0x08015931
 80158f4:	08015931 	.word	0x08015931
 80158f8:	08015931 	.word	0x08015931
 80158fc:	08015931 	.word	0x08015931
 8015900:	08015931 	.word	0x08015931
 8015904:	08015931 	.word	0x08015931
 8015908:	08015931 	.word	0x08015931
 801590c:	08015931 	.word	0x08015931
 8015910:	08015931 	.word	0x08015931
 8015914:	08015931 	.word	0x08015931
 8015918:	08015931 	.word	0x08015931
 801591c:	08015931 	.word	0x08015931
 8015920:	08015931 	.word	0x08015931
 8015924:	08015931 	.word	0x08015931
 8015928:	08015931 	.word	0x08015931
 801592c:	08015931 	.word	0x08015931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015930:	bf00      	nop
  }

  return (USBD_OK);
 8015932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015934:	4618      	mov	r0, r3
 8015936:	370c      	adds	r7, #12
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr

08015940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801594a:	6879      	ldr	r1, [r7, #4]
 801594c:	4805      	ldr	r0, [pc, #20]	; (8015964 <CDC_Receive_FS+0x24>)
 801594e:	f7f7 fe15 	bl	800d57c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015952:	4804      	ldr	r0, [pc, #16]	; (8015964 <CDC_Receive_FS+0x24>)
 8015954:	f7f7 fe56 	bl	800d604 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801595a:	4618      	mov	r0, r3
 801595c:	3708      	adds	r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	20015794 	.word	0x20015794

08015968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	460b      	mov	r3, r1
 8015972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015978:	4b0d      	ldr	r3, [pc, #52]	; (80159b0 <CDC_Transmit_FS+0x48>)
 801597a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801597e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015986:	2b00      	cmp	r3, #0
 8015988:	d001      	beq.n	801598e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801598a:	2301      	movs	r3, #1
 801598c:	e00b      	b.n	80159a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801598e:	887b      	ldrh	r3, [r7, #2]
 8015990:	461a      	mov	r2, r3
 8015992:	6879      	ldr	r1, [r7, #4]
 8015994:	4806      	ldr	r0, [pc, #24]	; (80159b0 <CDC_Transmit_FS+0x48>)
 8015996:	f7f7 fdd8 	bl	800d54a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801599a:	4805      	ldr	r0, [pc, #20]	; (80159b0 <CDC_Transmit_FS+0x48>)
 801599c:	f7f7 fe02 	bl	800d5a4 <USBD_CDC_TransmitPacket>
 80159a0:	4603      	mov	r3, r0
 80159a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80159a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	20015794 	.word	0x20015794

080159b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80159b4:	b480      	push	{r7}
 80159b6:	b087      	sub	sp, #28
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	60b9      	str	r1, [r7, #8]
 80159be:	4613      	mov	r3, r2
 80159c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80159c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	371c      	adds	r7, #28
 80159ce:	46bd      	mov	sp, r7
 80159d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d4:	4770      	bx	lr
	...

080159d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	4603      	mov	r3, r0
 80159e0:	6039      	str	r1, [r7, #0]
 80159e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	2212      	movs	r2, #18
 80159e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80159ea:	4b03      	ldr	r3, [pc, #12]	; (80159f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	370c      	adds	r7, #12
 80159f0:	46bd      	mov	sp, r7
 80159f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f6:	4770      	bx	lr
 80159f8:	20000154 	.word	0x20000154

080159fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	4603      	mov	r3, r0
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	2204      	movs	r2, #4
 8015a0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015a0e:	4b03      	ldr	r3, [pc, #12]	; (8015a1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr
 8015a1c:	20000174 	.word	0x20000174

08015a20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	4603      	mov	r3, r0
 8015a28:	6039      	str	r1, [r7, #0]
 8015a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a2c:	79fb      	ldrb	r3, [r7, #7]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d105      	bne.n	8015a3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015a32:	683a      	ldr	r2, [r7, #0]
 8015a34:	4907      	ldr	r1, [pc, #28]	; (8015a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8015a36:	4808      	ldr	r0, [pc, #32]	; (8015a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8015a38:	f7f8 fe5d 	bl	800e6f6 <USBD_GetString>
 8015a3c:	e004      	b.n	8015a48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015a3e:	683a      	ldr	r2, [r7, #0]
 8015a40:	4904      	ldr	r1, [pc, #16]	; (8015a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8015a42:	4805      	ldr	r0, [pc, #20]	; (8015a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8015a44:	f7f8 fe57 	bl	800e6f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a48:	4b02      	ldr	r3, [pc, #8]	; (8015a54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3708      	adds	r7, #8
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	20016a64 	.word	0x20016a64
 8015a58:	080182c4 	.word	0x080182c4

08015a5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	4603      	mov	r3, r0
 8015a64:	6039      	str	r1, [r7, #0]
 8015a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015a68:	683a      	ldr	r2, [r7, #0]
 8015a6a:	4904      	ldr	r1, [pc, #16]	; (8015a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015a6c:	4804      	ldr	r0, [pc, #16]	; (8015a80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015a6e:	f7f8 fe42 	bl	800e6f6 <USBD_GetString>
  return USBD_StrDesc;
 8015a72:	4b02      	ldr	r3, [pc, #8]	; (8015a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3708      	adds	r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	20016a64 	.word	0x20016a64
 8015a80:	080182dc 	.word	0x080182dc

08015a84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	6039      	str	r1, [r7, #0]
 8015a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	221a      	movs	r2, #26
 8015a94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015a96:	f000 f855 	bl	8015b44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015a9a:	4b02      	ldr	r3, [pc, #8]	; (8015aa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	20000178 	.word	0x20000178

08015aa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	4603      	mov	r3, r0
 8015ab0:	6039      	str	r1, [r7, #0]
 8015ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ab4:	79fb      	ldrb	r3, [r7, #7]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d105      	bne.n	8015ac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015aba:	683a      	ldr	r2, [r7, #0]
 8015abc:	4907      	ldr	r1, [pc, #28]	; (8015adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8015abe:	4808      	ldr	r0, [pc, #32]	; (8015ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015ac0:	f7f8 fe19 	bl	800e6f6 <USBD_GetString>
 8015ac4:	e004      	b.n	8015ad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	4904      	ldr	r1, [pc, #16]	; (8015adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8015aca:	4805      	ldr	r0, [pc, #20]	; (8015ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015acc:	f7f8 fe13 	bl	800e6f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ad0:	4b02      	ldr	r3, [pc, #8]	; (8015adc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3708      	adds	r7, #8
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop
 8015adc:	20016a64 	.word	0x20016a64
 8015ae0:	080182f0 	.word	0x080182f0

08015ae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	4603      	mov	r3, r0
 8015aec:	6039      	str	r1, [r7, #0]
 8015aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015af0:	79fb      	ldrb	r3, [r7, #7]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d105      	bne.n	8015b02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015af6:	683a      	ldr	r2, [r7, #0]
 8015af8:	4907      	ldr	r1, [pc, #28]	; (8015b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015afa:	4808      	ldr	r0, [pc, #32]	; (8015b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015afc:	f7f8 fdfb 	bl	800e6f6 <USBD_GetString>
 8015b00:	e004      	b.n	8015b0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015b02:	683a      	ldr	r2, [r7, #0]
 8015b04:	4904      	ldr	r1, [pc, #16]	; (8015b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015b06:	4805      	ldr	r0, [pc, #20]	; (8015b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015b08:	f7f8 fdf5 	bl	800e6f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b0c:	4b02      	ldr	r3, [pc, #8]	; (8015b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	20016a64 	.word	0x20016a64
 8015b1c:	080182fc 	.word	0x080182fc

08015b20 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b20:	b480      	push	{r7}
 8015b22:	b083      	sub	sp, #12
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	4603      	mov	r3, r0
 8015b28:	6039      	str	r1, [r7, #0]
 8015b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	220c      	movs	r2, #12
 8015b30:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015b32:	4b03      	ldr	r3, [pc, #12]	; (8015b40 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	370c      	adds	r7, #12
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3e:	4770      	bx	lr
 8015b40:	20000168 	.word	0x20000168

08015b44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b084      	sub	sp, #16
 8015b48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015b4a:	4b0f      	ldr	r3, [pc, #60]	; (8015b88 <Get_SerialNum+0x44>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015b50:	4b0e      	ldr	r3, [pc, #56]	; (8015b8c <Get_SerialNum+0x48>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015b56:	4b0e      	ldr	r3, [pc, #56]	; (8015b90 <Get_SerialNum+0x4c>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	4413      	add	r3, r2
 8015b62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d009      	beq.n	8015b7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015b6a:	2208      	movs	r2, #8
 8015b6c:	4909      	ldr	r1, [pc, #36]	; (8015b94 <Get_SerialNum+0x50>)
 8015b6e:	68f8      	ldr	r0, [r7, #12]
 8015b70:	f000 f814 	bl	8015b9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015b74:	2204      	movs	r2, #4
 8015b76:	4908      	ldr	r1, [pc, #32]	; (8015b98 <Get_SerialNum+0x54>)
 8015b78:	68b8      	ldr	r0, [r7, #8]
 8015b7a:	f000 f80f 	bl	8015b9c <IntToUnicode>
  }
}
 8015b7e:	bf00      	nop
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	1ff0f420 	.word	0x1ff0f420
 8015b8c:	1ff0f424 	.word	0x1ff0f424
 8015b90:	1ff0f428 	.word	0x1ff0f428
 8015b94:	2000017a 	.word	0x2000017a
 8015b98:	2000018a 	.word	0x2000018a

08015b9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b087      	sub	sp, #28
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015bae:	2300      	movs	r3, #0
 8015bb0:	75fb      	strb	r3, [r7, #23]
 8015bb2:	e027      	b.n	8015c04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	0f1b      	lsrs	r3, r3, #28
 8015bb8:	2b09      	cmp	r3, #9
 8015bba:	d80b      	bhi.n	8015bd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	0f1b      	lsrs	r3, r3, #28
 8015bc0:	b2da      	uxtb	r2, r3
 8015bc2:	7dfb      	ldrb	r3, [r7, #23]
 8015bc4:	005b      	lsls	r3, r3, #1
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	440b      	add	r3, r1
 8015bcc:	3230      	adds	r2, #48	; 0x30
 8015bce:	b2d2      	uxtb	r2, r2
 8015bd0:	701a      	strb	r2, [r3, #0]
 8015bd2:	e00a      	b.n	8015bea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	0f1b      	lsrs	r3, r3, #28
 8015bd8:	b2da      	uxtb	r2, r3
 8015bda:	7dfb      	ldrb	r3, [r7, #23]
 8015bdc:	005b      	lsls	r3, r3, #1
 8015bde:	4619      	mov	r1, r3
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	440b      	add	r3, r1
 8015be4:	3237      	adds	r2, #55	; 0x37
 8015be6:	b2d2      	uxtb	r2, r2
 8015be8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	011b      	lsls	r3, r3, #4
 8015bee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015bf0:	7dfb      	ldrb	r3, [r7, #23]
 8015bf2:	005b      	lsls	r3, r3, #1
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	68ba      	ldr	r2, [r7, #8]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015bfe:	7dfb      	ldrb	r3, [r7, #23]
 8015c00:	3301      	adds	r3, #1
 8015c02:	75fb      	strb	r3, [r7, #23]
 8015c04:	7dfa      	ldrb	r2, [r7, #23]
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d3d3      	bcc.n	8015bb4 <IntToUnicode+0x18>
  }
}
 8015c0c:	bf00      	nop
 8015c0e:	371c      	adds	r7, #28
 8015c10:	46bd      	mov	sp, r7
 8015c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c16:	4770      	bx	lr

08015c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b08a      	sub	sp, #40	; 0x28
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c20:	f107 0314 	add.w	r3, r7, #20
 8015c24:	2200      	movs	r2, #0
 8015c26:	601a      	str	r2, [r3, #0]
 8015c28:	605a      	str	r2, [r3, #4]
 8015c2a:	609a      	str	r2, [r3, #8]
 8015c2c:	60da      	str	r2, [r3, #12]
 8015c2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015c38:	d13c      	bne.n	8015cb4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c3a:	4b20      	ldr	r3, [pc, #128]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c3e:	4a1f      	ldr	r2, [pc, #124]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c40:	f043 0301 	orr.w	r3, r3, #1
 8015c44:	6313      	str	r3, [r2, #48]	; 0x30
 8015c46:	4b1d      	ldr	r3, [pc, #116]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	613b      	str	r3, [r7, #16]
 8015c50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015c52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c58:	2302      	movs	r3, #2
 8015c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c60:	2303      	movs	r3, #3
 8015c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015c64:	230a      	movs	r3, #10
 8015c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c68:	f107 0314 	add.w	r3, r7, #20
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	4814      	ldr	r0, [pc, #80]	; (8015cc0 <HAL_PCD_MspInit+0xa8>)
 8015c70:	f7ef f932 	bl	8004ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c74:	4b11      	ldr	r3, [pc, #68]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c78:	4a10      	ldr	r2, [pc, #64]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c7e:	6353      	str	r3, [r2, #52]	; 0x34
 8015c80:	4b0e      	ldr	r3, [pc, #56]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c88:	60fb      	str	r3, [r7, #12]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	4b0b      	ldr	r3, [pc, #44]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c90:	4a0a      	ldr	r2, [pc, #40]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c96:	6453      	str	r3, [r2, #68]	; 0x44
 8015c98:	4b08      	ldr	r3, [pc, #32]	; (8015cbc <HAL_PCD_MspInit+0xa4>)
 8015c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ca0:	60bb      	str	r3, [r7, #8]
 8015ca2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	2105      	movs	r1, #5
 8015ca8:	2043      	movs	r0, #67	; 0x43
 8015caa:	f7ee fd47 	bl	800473c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015cae:	2043      	movs	r0, #67	; 0x43
 8015cb0:	f7ee fd60 	bl	8004774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015cb4:	bf00      	nop
 8015cb6:	3728      	adds	r7, #40	; 0x28
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	40023800 	.word	0x40023800
 8015cc0:	40020000 	.word	0x40020000

08015cc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015cd8:	4619      	mov	r1, r3
 8015cda:	4610      	mov	r0, r2
 8015cdc:	f7f7 fd5e 	bl	800d79c <USBD_LL_SetupStage>
}
 8015ce0:	bf00      	nop
 8015ce2:	3708      	adds	r7, #8
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015cfa:	78fa      	ldrb	r2, [r7, #3]
 8015cfc:	6879      	ldr	r1, [r7, #4]
 8015cfe:	4613      	mov	r3, r2
 8015d00:	00db      	lsls	r3, r3, #3
 8015d02:	1a9b      	subs	r3, r3, r2
 8015d04:	009b      	lsls	r3, r3, #2
 8015d06:	440b      	add	r3, r1
 8015d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	78fb      	ldrb	r3, [r7, #3]
 8015d10:	4619      	mov	r1, r3
 8015d12:	f7f7 fd96 	bl	800d842 <USBD_LL_DataOutStage>
}
 8015d16:	bf00      	nop
 8015d18:	3708      	adds	r7, #8
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b082      	sub	sp, #8
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	6078      	str	r0, [r7, #4]
 8015d26:	460b      	mov	r3, r1
 8015d28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015d30:	78fa      	ldrb	r2, [r7, #3]
 8015d32:	6879      	ldr	r1, [r7, #4]
 8015d34:	4613      	mov	r3, r2
 8015d36:	00db      	lsls	r3, r3, #3
 8015d38:	1a9b      	subs	r3, r3, r2
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	440b      	add	r3, r1
 8015d3e:	3348      	adds	r3, #72	; 0x48
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	78fb      	ldrb	r3, [r7, #3]
 8015d44:	4619      	mov	r1, r3
 8015d46:	f7f7 fddf 	bl	800d908 <USBD_LL_DataInStage>
}
 8015d4a:	bf00      	nop
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}

08015d52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d52:	b580      	push	{r7, lr}
 8015d54:	b082      	sub	sp, #8
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7f7 fee3 	bl	800db2c <USBD_LL_SOF>
}
 8015d66:	bf00      	nop
 8015d68:	3708      	adds	r7, #8
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b084      	sub	sp, #16
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015d76:	2301      	movs	r3, #1
 8015d78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d102      	bne.n	8015d88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015d82:	2300      	movs	r3, #0
 8015d84:	73fb      	strb	r3, [r7, #15]
 8015d86:	e008      	b.n	8015d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	2b02      	cmp	r3, #2
 8015d8e:	d102      	bne.n	8015d96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015d90:	2301      	movs	r3, #1
 8015d92:	73fb      	strb	r3, [r7, #15]
 8015d94:	e001      	b.n	8015d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015d96:	f7eb fc17 	bl	80015c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015da0:	7bfa      	ldrb	r2, [r7, #15]
 8015da2:	4611      	mov	r1, r2
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f7 fe86 	bl	800dab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f7 fe3f 	bl	800da34 <USBD_LL_Reset>
}
 8015db6:	bf00      	nop
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
	...

08015dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7f7 fe81 	bl	800dad6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	6812      	ldr	r2, [r2, #0]
 8015de2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015de6:	f043 0301 	orr.w	r3, r3, #1
 8015dea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6a1b      	ldr	r3, [r3, #32]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d005      	beq.n	8015e00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015df4:	4b04      	ldr	r3, [pc, #16]	; (8015e08 <HAL_PCD_SuspendCallback+0x48>)
 8015df6:	691b      	ldr	r3, [r3, #16]
 8015df8:	4a03      	ldr	r2, [pc, #12]	; (8015e08 <HAL_PCD_SuspendCallback+0x48>)
 8015dfa:	f043 0306 	orr.w	r3, r3, #6
 8015dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015e00:	bf00      	nop
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	e000ed00 	.word	0xe000ed00

08015e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b082      	sub	sp, #8
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f7 fe70 	bl	800db00 <USBD_LL_Resume>
}
 8015e20:	bf00      	nop
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e3a:	78fa      	ldrb	r2, [r7, #3]
 8015e3c:	4611      	mov	r1, r2
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7f7 fe9b 	bl	800db7a <USBD_LL_IsoOUTIncomplete>
}
 8015e44:	bf00      	nop
 8015e46:	3708      	adds	r7, #8
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e5e:	78fa      	ldrb	r2, [r7, #3]
 8015e60:	4611      	mov	r1, r2
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7f7 fe7c 	bl	800db60 <USBD_LL_IsoINIncomplete>
}
 8015e68:	bf00      	nop
 8015e6a:	3708      	adds	r7, #8
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}

08015e70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7f7 fe88 	bl	800db94 <USBD_LL_DevConnected>
}
 8015e84:	bf00      	nop
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7f7 fe85 	bl	800dbaa <USBD_LL_DevDisconnected>
}
 8015ea0:	bf00      	nop
 8015ea2:	3708      	adds	r7, #8
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}

08015ea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d13c      	bne.n	8015f32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015eb8:	4a20      	ldr	r2, [pc, #128]	; (8015f3c <USBD_LL_Init+0x94>)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4a1e      	ldr	r2, [pc, #120]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ec4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ec8:	4b1c      	ldr	r3, [pc, #112]	; (8015f3c <USBD_LL_Init+0x94>)
 8015eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015ed0:	4b1a      	ldr	r3, [pc, #104]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ed2:	2206      	movs	r2, #6
 8015ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015ed6:	4b19      	ldr	r3, [pc, #100]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ed8:	2202      	movs	r2, #2
 8015eda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015edc:	4b17      	ldr	r3, [pc, #92]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ede:	2200      	movs	r2, #0
 8015ee0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015ee2:	4b16      	ldr	r3, [pc, #88]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ee4:	2202      	movs	r2, #2
 8015ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ee8:	4b14      	ldr	r3, [pc, #80]	; (8015f3c <USBD_LL_Init+0x94>)
 8015eea:	2200      	movs	r2, #0
 8015eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015eee:	4b13      	ldr	r3, [pc, #76]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015ef4:	4b11      	ldr	r3, [pc, #68]	; (8015f3c <USBD_LL_Init+0x94>)
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015efa:	4b10      	ldr	r3, [pc, #64]	; (8015f3c <USBD_LL_Init+0x94>)
 8015efc:	2200      	movs	r2, #0
 8015efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015f00:	4b0e      	ldr	r3, [pc, #56]	; (8015f3c <USBD_LL_Init+0x94>)
 8015f02:	2200      	movs	r2, #0
 8015f04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015f06:	480d      	ldr	r0, [pc, #52]	; (8015f3c <USBD_LL_Init+0x94>)
 8015f08:	f7ef f9a9 	bl	800525e <HAL_PCD_Init>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d001      	beq.n	8015f16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015f12:	f7eb fb59 	bl	80015c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015f16:	2180      	movs	r1, #128	; 0x80
 8015f18:	4808      	ldr	r0, [pc, #32]	; (8015f3c <USBD_LL_Init+0x94>)
 8015f1a:	f7f0 fb2a 	bl	8006572 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015f1e:	2240      	movs	r2, #64	; 0x40
 8015f20:	2100      	movs	r1, #0
 8015f22:	4806      	ldr	r0, [pc, #24]	; (8015f3c <USBD_LL_Init+0x94>)
 8015f24:	f7f0 fade 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015f28:	2280      	movs	r2, #128	; 0x80
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	4803      	ldr	r0, [pc, #12]	; (8015f3c <USBD_LL_Init+0x94>)
 8015f2e:	f7f0 fad9 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015f32:	2300      	movs	r3, #0
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3708      	adds	r7, #8
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	20016c64 	.word	0x20016c64

08015f40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7ef faa5 	bl	80054a6 <HAL_PCD_Start>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015f60:	7bfb      	ldrb	r3, [r7, #15]
 8015f62:	4618      	mov	r0, r3
 8015f64:	f000 f97e 	bl	8016264 <USBD_Get_USB_Status>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3710      	adds	r7, #16
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015f76:	b580      	push	{r7, lr}
 8015f78:	b084      	sub	sp, #16
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	4608      	mov	r0, r1
 8015f80:	4611      	mov	r1, r2
 8015f82:	461a      	mov	r2, r3
 8015f84:	4603      	mov	r3, r0
 8015f86:	70fb      	strb	r3, [r7, #3]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	70bb      	strb	r3, [r7, #2]
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f90:	2300      	movs	r3, #0
 8015f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f94:	2300      	movs	r3, #0
 8015f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f9e:	78bb      	ldrb	r3, [r7, #2]
 8015fa0:	883a      	ldrh	r2, [r7, #0]
 8015fa2:	78f9      	ldrb	r1, [r7, #3]
 8015fa4:	f7ef fea5 	bl	8005cf2 <HAL_PCD_EP_Open>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fac:	7bfb      	ldrb	r3, [r7, #15]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f000 f958 	bl	8016264 <USBD_Get_USB_Status>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3710      	adds	r7, #16
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}

08015fc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fc2:	b580      	push	{r7, lr}
 8015fc4:	b084      	sub	sp, #16
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	6078      	str	r0, [r7, #4]
 8015fca:	460b      	mov	r3, r1
 8015fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015fdc:	78fa      	ldrb	r2, [r7, #3]
 8015fde:	4611      	mov	r1, r2
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ef feee 	bl	8005dc2 <HAL_PCD_EP_Close>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015fea:	7bfb      	ldrb	r3, [r7, #15]
 8015fec:	4618      	mov	r0, r3
 8015fee:	f000 f939 	bl	8016264 <USBD_Get_USB_Status>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	460b      	mov	r3, r1
 801600a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801600c:	2300      	movs	r3, #0
 801600e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016010:	2300      	movs	r3, #0
 8016012:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801601a:	78fa      	ldrb	r2, [r7, #3]
 801601c:	4611      	mov	r1, r2
 801601e:	4618      	mov	r0, r3
 8016020:	f7ef ffc6 	bl	8005fb0 <HAL_PCD_EP_SetStall>
 8016024:	4603      	mov	r3, r0
 8016026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016028:	7bfb      	ldrb	r3, [r7, #15]
 801602a:	4618      	mov	r0, r3
 801602c:	f000 f91a 	bl	8016264 <USBD_Get_USB_Status>
 8016030:	4603      	mov	r3, r0
 8016032:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016034:	7bbb      	ldrb	r3, [r7, #14]
}
 8016036:	4618      	mov	r0, r3
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b084      	sub	sp, #16
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
 8016046:	460b      	mov	r3, r1
 8016048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801604a:	2300      	movs	r3, #0
 801604c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801604e:	2300      	movs	r3, #0
 8016050:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016058:	78fa      	ldrb	r2, [r7, #3]
 801605a:	4611      	mov	r1, r2
 801605c:	4618      	mov	r0, r3
 801605e:	f7f0 f80b 	bl	8006078 <HAL_PCD_EP_ClrStall>
 8016062:	4603      	mov	r3, r0
 8016064:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016066:	7bfb      	ldrb	r3, [r7, #15]
 8016068:	4618      	mov	r0, r3
 801606a:	f000 f8fb 	bl	8016264 <USBD_Get_USB_Status>
 801606e:	4603      	mov	r3, r0
 8016070:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016072:	7bbb      	ldrb	r3, [r7, #14]
}
 8016074:	4618      	mov	r0, r3
 8016076:	3710      	adds	r7, #16
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801607c:	b480      	push	{r7}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	460b      	mov	r3, r1
 8016086:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801608e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016094:	2b00      	cmp	r3, #0
 8016096:	da0b      	bge.n	80160b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016098:	78fb      	ldrb	r3, [r7, #3]
 801609a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801609e:	68f9      	ldr	r1, [r7, #12]
 80160a0:	4613      	mov	r3, r2
 80160a2:	00db      	lsls	r3, r3, #3
 80160a4:	1a9b      	subs	r3, r3, r2
 80160a6:	009b      	lsls	r3, r3, #2
 80160a8:	440b      	add	r3, r1
 80160aa:	333e      	adds	r3, #62	; 0x3e
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	e00b      	b.n	80160c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80160b0:	78fb      	ldrb	r3, [r7, #3]
 80160b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80160b6:	68f9      	ldr	r1, [r7, #12]
 80160b8:	4613      	mov	r3, r2
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	1a9b      	subs	r3, r3, r2
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	440b      	add	r3, r1
 80160c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80160c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	460b      	mov	r3, r1
 80160de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160e0:	2300      	movs	r3, #0
 80160e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160e4:	2300      	movs	r3, #0
 80160e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80160ee:	78fa      	ldrb	r2, [r7, #3]
 80160f0:	4611      	mov	r1, r2
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7ef fdd8 	bl	8005ca8 <HAL_PCD_SetAddress>
 80160f8:	4603      	mov	r3, r0
 80160fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80160fc:	7bfb      	ldrb	r3, [r7, #15]
 80160fe:	4618      	mov	r0, r3
 8016100:	f000 f8b0 	bl	8016264 <USBD_Get_USB_Status>
 8016104:	4603      	mov	r3, r0
 8016106:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016108:	7bbb      	ldrb	r3, [r7, #14]
}
 801610a:	4618      	mov	r0, r3
 801610c:	3710      	adds	r7, #16
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b086      	sub	sp, #24
 8016116:	af00      	add	r7, sp, #0
 8016118:	60f8      	str	r0, [r7, #12]
 801611a:	607a      	str	r2, [r7, #4]
 801611c:	603b      	str	r3, [r7, #0]
 801611e:	460b      	mov	r3, r1
 8016120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016122:	2300      	movs	r3, #0
 8016124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016126:	2300      	movs	r3, #0
 8016128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016130:	7af9      	ldrb	r1, [r7, #11]
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	f7ef fef1 	bl	8005f1c <HAL_PCD_EP_Transmit>
 801613a:	4603      	mov	r3, r0
 801613c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801613e:	7dfb      	ldrb	r3, [r7, #23]
 8016140:	4618      	mov	r0, r3
 8016142:	f000 f88f 	bl	8016264 <USBD_Get_USB_Status>
 8016146:	4603      	mov	r3, r0
 8016148:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801614a:	7dbb      	ldrb	r3, [r7, #22]
}
 801614c:	4618      	mov	r0, r3
 801614e:	3718      	adds	r7, #24
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b086      	sub	sp, #24
 8016158:	af00      	add	r7, sp, #0
 801615a:	60f8      	str	r0, [r7, #12]
 801615c:	607a      	str	r2, [r7, #4]
 801615e:	603b      	str	r3, [r7, #0]
 8016160:	460b      	mov	r3, r1
 8016162:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016164:	2300      	movs	r3, #0
 8016166:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016168:	2300      	movs	r3, #0
 801616a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016172:	7af9      	ldrb	r1, [r7, #11]
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	687a      	ldr	r2, [r7, #4]
 8016178:	f7ef fe6d 	bl	8005e56 <HAL_PCD_EP_Receive>
 801617c:	4603      	mov	r3, r0
 801617e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016180:	7dfb      	ldrb	r3, [r7, #23]
 8016182:	4618      	mov	r0, r3
 8016184:	f000 f86e 	bl	8016264 <USBD_Get_USB_Status>
 8016188:	4603      	mov	r3, r0
 801618a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801618c:	7dbb      	ldrb	r3, [r7, #22]
}
 801618e:	4618      	mov	r0, r3
 8016190:	3718      	adds	r7, #24
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016196:	b580      	push	{r7, lr}
 8016198:	b082      	sub	sp, #8
 801619a:	af00      	add	r7, sp, #0
 801619c:	6078      	str	r0, [r7, #4]
 801619e:	460b      	mov	r3, r1
 80161a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161a8:	78fa      	ldrb	r2, [r7, #3]
 80161aa:	4611      	mov	r1, r2
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7ef fe9d 	bl	8005eec <HAL_PCD_EP_GetRxCount>
 80161b2:	4603      	mov	r3, r0
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3708      	adds	r7, #8
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	460b      	mov	r3, r1
 80161c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80161c8:	78fb      	ldrb	r3, [r7, #3]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d002      	beq.n	80161d4 <HAL_PCDEx_LPM_Callback+0x18>
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d01f      	beq.n	8016212 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80161d2:	e03b      	b.n	801624c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6a1b      	ldr	r3, [r3, #32]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d007      	beq.n	80161ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80161dc:	f000 f83c 	bl	8016258 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80161e0:	4b1c      	ldr	r3, [pc, #112]	; (8016254 <HAL_PCDEx_LPM_Callback+0x98>)
 80161e2:	691b      	ldr	r3, [r3, #16]
 80161e4:	4a1b      	ldr	r2, [pc, #108]	; (8016254 <HAL_PCDEx_LPM_Callback+0x98>)
 80161e6:	f023 0306 	bic.w	r3, r3, #6
 80161ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	6812      	ldr	r2, [r2, #0]
 80161fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80161fe:	f023 0301 	bic.w	r3, r3, #1
 8016202:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801620a:	4618      	mov	r0, r3
 801620c:	f7f7 fc78 	bl	800db00 <USBD_LL_Resume>
    break;
 8016210:	e01c      	b.n	801624c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	6812      	ldr	r2, [r2, #0]
 8016220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016224:	f043 0301 	orr.w	r3, r3, #1
 8016228:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016230:	4618      	mov	r0, r3
 8016232:	f7f7 fc50 	bl	800dad6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	6a1b      	ldr	r3, [r3, #32]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d005      	beq.n	801624a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801623e:	4b05      	ldr	r3, [pc, #20]	; (8016254 <HAL_PCDEx_LPM_Callback+0x98>)
 8016240:	691b      	ldr	r3, [r3, #16]
 8016242:	4a04      	ldr	r2, [pc, #16]	; (8016254 <HAL_PCDEx_LPM_Callback+0x98>)
 8016244:	f043 0306 	orr.w	r3, r3, #6
 8016248:	6113      	str	r3, [r2, #16]
    break;   
 801624a:	bf00      	nop
}
 801624c:	bf00      	nop
 801624e:	3708      	adds	r7, #8
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	e000ed00 	.word	0xe000ed00

08016258 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801625c:	f7ea ff7a 	bl	8001154 <SystemClock_Config>
}
 8016260:	bf00      	nop
 8016262:	bd80      	pop	{r7, pc}

08016264 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016264:	b480      	push	{r7}
 8016266:	b085      	sub	sp, #20
 8016268:	af00      	add	r7, sp, #0
 801626a:	4603      	mov	r3, r0
 801626c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801626e:	2300      	movs	r3, #0
 8016270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016272:	79fb      	ldrb	r3, [r7, #7]
 8016274:	2b03      	cmp	r3, #3
 8016276:	d817      	bhi.n	80162a8 <USBD_Get_USB_Status+0x44>
 8016278:	a201      	add	r2, pc, #4	; (adr r2, 8016280 <USBD_Get_USB_Status+0x1c>)
 801627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801627e:	bf00      	nop
 8016280:	08016291 	.word	0x08016291
 8016284:	08016297 	.word	0x08016297
 8016288:	0801629d 	.word	0x0801629d
 801628c:	080162a3 	.word	0x080162a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016290:	2300      	movs	r3, #0
 8016292:	73fb      	strb	r3, [r7, #15]
    break;
 8016294:	e00b      	b.n	80162ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016296:	2303      	movs	r3, #3
 8016298:	73fb      	strb	r3, [r7, #15]
    break;
 801629a:	e008      	b.n	80162ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801629c:	2301      	movs	r3, #1
 801629e:	73fb      	strb	r3, [r7, #15]
    break;
 80162a0:	e005      	b.n	80162ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80162a2:	2303      	movs	r3, #3
 80162a4:	73fb      	strb	r3, [r7, #15]
    break;
 80162a6:	e002      	b.n	80162ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80162a8:	2303      	movs	r3, #3
 80162aa:	73fb      	strb	r3, [r7, #15]
    break;
 80162ac:	bf00      	nop
  }
  return usb_status;
 80162ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <__errno>:
 80162bc:	4b01      	ldr	r3, [pc, #4]	; (80162c4 <__errno+0x8>)
 80162be:	6818      	ldr	r0, [r3, #0]
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop
 80162c4:	20000194 	.word	0x20000194

080162c8 <__libc_init_array>:
 80162c8:	b570      	push	{r4, r5, r6, lr}
 80162ca:	4e0d      	ldr	r6, [pc, #52]	; (8016300 <__libc_init_array+0x38>)
 80162cc:	4c0d      	ldr	r4, [pc, #52]	; (8016304 <__libc_init_array+0x3c>)
 80162ce:	1ba4      	subs	r4, r4, r6
 80162d0:	10a4      	asrs	r4, r4, #2
 80162d2:	2500      	movs	r5, #0
 80162d4:	42a5      	cmp	r5, r4
 80162d6:	d109      	bne.n	80162ec <__libc_init_array+0x24>
 80162d8:	4e0b      	ldr	r6, [pc, #44]	; (8016308 <__libc_init_array+0x40>)
 80162da:	4c0c      	ldr	r4, [pc, #48]	; (801630c <__libc_init_array+0x44>)
 80162dc:	f001 fd56 	bl	8017d8c <_init>
 80162e0:	1ba4      	subs	r4, r4, r6
 80162e2:	10a4      	asrs	r4, r4, #2
 80162e4:	2500      	movs	r5, #0
 80162e6:	42a5      	cmp	r5, r4
 80162e8:	d105      	bne.n	80162f6 <__libc_init_array+0x2e>
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
 80162ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80162f0:	4798      	blx	r3
 80162f2:	3501      	adds	r5, #1
 80162f4:	e7ee      	b.n	80162d4 <__libc_init_array+0xc>
 80162f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80162fa:	4798      	blx	r3
 80162fc:	3501      	adds	r5, #1
 80162fe:	e7f2      	b.n	80162e6 <__libc_init_array+0x1e>
 8016300:	08018540 	.word	0x08018540
 8016304:	08018540 	.word	0x08018540
 8016308:	08018540 	.word	0x08018540
 801630c:	08018544 	.word	0x08018544

08016310 <malloc>:
 8016310:	4b02      	ldr	r3, [pc, #8]	; (801631c <malloc+0xc>)
 8016312:	4601      	mov	r1, r0
 8016314:	6818      	ldr	r0, [r3, #0]
 8016316:	f000 b86d 	b.w	80163f4 <_malloc_r>
 801631a:	bf00      	nop
 801631c:	20000194 	.word	0x20000194

08016320 <free>:
 8016320:	4b02      	ldr	r3, [pc, #8]	; (801632c <free+0xc>)
 8016322:	4601      	mov	r1, r0
 8016324:	6818      	ldr	r0, [r3, #0]
 8016326:	f000 b817 	b.w	8016358 <_free_r>
 801632a:	bf00      	nop
 801632c:	20000194 	.word	0x20000194

08016330 <memcpy>:
 8016330:	b510      	push	{r4, lr}
 8016332:	1e43      	subs	r3, r0, #1
 8016334:	440a      	add	r2, r1
 8016336:	4291      	cmp	r1, r2
 8016338:	d100      	bne.n	801633c <memcpy+0xc>
 801633a:	bd10      	pop	{r4, pc}
 801633c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016344:	e7f7      	b.n	8016336 <memcpy+0x6>

08016346 <memset>:
 8016346:	4402      	add	r2, r0
 8016348:	4603      	mov	r3, r0
 801634a:	4293      	cmp	r3, r2
 801634c:	d100      	bne.n	8016350 <memset+0xa>
 801634e:	4770      	bx	lr
 8016350:	f803 1b01 	strb.w	r1, [r3], #1
 8016354:	e7f9      	b.n	801634a <memset+0x4>
	...

08016358 <_free_r>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	4605      	mov	r5, r0
 801635c:	2900      	cmp	r1, #0
 801635e:	d045      	beq.n	80163ec <_free_r+0x94>
 8016360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016364:	1f0c      	subs	r4, r1, #4
 8016366:	2b00      	cmp	r3, #0
 8016368:	bfb8      	it	lt
 801636a:	18e4      	addlt	r4, r4, r3
 801636c:	f000 f91a 	bl	80165a4 <__malloc_lock>
 8016370:	4a1f      	ldr	r2, [pc, #124]	; (80163f0 <_free_r+0x98>)
 8016372:	6813      	ldr	r3, [r2, #0]
 8016374:	4610      	mov	r0, r2
 8016376:	b933      	cbnz	r3, 8016386 <_free_r+0x2e>
 8016378:	6063      	str	r3, [r4, #4]
 801637a:	6014      	str	r4, [r2, #0]
 801637c:	4628      	mov	r0, r5
 801637e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016382:	f000 b910 	b.w	80165a6 <__malloc_unlock>
 8016386:	42a3      	cmp	r3, r4
 8016388:	d90c      	bls.n	80163a4 <_free_r+0x4c>
 801638a:	6821      	ldr	r1, [r4, #0]
 801638c:	1862      	adds	r2, r4, r1
 801638e:	4293      	cmp	r3, r2
 8016390:	bf04      	itt	eq
 8016392:	681a      	ldreq	r2, [r3, #0]
 8016394:	685b      	ldreq	r3, [r3, #4]
 8016396:	6063      	str	r3, [r4, #4]
 8016398:	bf04      	itt	eq
 801639a:	1852      	addeq	r2, r2, r1
 801639c:	6022      	streq	r2, [r4, #0]
 801639e:	6004      	str	r4, [r0, #0]
 80163a0:	e7ec      	b.n	801637c <_free_r+0x24>
 80163a2:	4613      	mov	r3, r2
 80163a4:	685a      	ldr	r2, [r3, #4]
 80163a6:	b10a      	cbz	r2, 80163ac <_free_r+0x54>
 80163a8:	42a2      	cmp	r2, r4
 80163aa:	d9fa      	bls.n	80163a2 <_free_r+0x4a>
 80163ac:	6819      	ldr	r1, [r3, #0]
 80163ae:	1858      	adds	r0, r3, r1
 80163b0:	42a0      	cmp	r0, r4
 80163b2:	d10b      	bne.n	80163cc <_free_r+0x74>
 80163b4:	6820      	ldr	r0, [r4, #0]
 80163b6:	4401      	add	r1, r0
 80163b8:	1858      	adds	r0, r3, r1
 80163ba:	4282      	cmp	r2, r0
 80163bc:	6019      	str	r1, [r3, #0]
 80163be:	d1dd      	bne.n	801637c <_free_r+0x24>
 80163c0:	6810      	ldr	r0, [r2, #0]
 80163c2:	6852      	ldr	r2, [r2, #4]
 80163c4:	605a      	str	r2, [r3, #4]
 80163c6:	4401      	add	r1, r0
 80163c8:	6019      	str	r1, [r3, #0]
 80163ca:	e7d7      	b.n	801637c <_free_r+0x24>
 80163cc:	d902      	bls.n	80163d4 <_free_r+0x7c>
 80163ce:	230c      	movs	r3, #12
 80163d0:	602b      	str	r3, [r5, #0]
 80163d2:	e7d3      	b.n	801637c <_free_r+0x24>
 80163d4:	6820      	ldr	r0, [r4, #0]
 80163d6:	1821      	adds	r1, r4, r0
 80163d8:	428a      	cmp	r2, r1
 80163da:	bf04      	itt	eq
 80163dc:	6811      	ldreq	r1, [r2, #0]
 80163de:	6852      	ldreq	r2, [r2, #4]
 80163e0:	6062      	str	r2, [r4, #4]
 80163e2:	bf04      	itt	eq
 80163e4:	1809      	addeq	r1, r1, r0
 80163e6:	6021      	streq	r1, [r4, #0]
 80163e8:	605c      	str	r4, [r3, #4]
 80163ea:	e7c7      	b.n	801637c <_free_r+0x24>
 80163ec:	bd38      	pop	{r3, r4, r5, pc}
 80163ee:	bf00      	nop
 80163f0:	20008820 	.word	0x20008820

080163f4 <_malloc_r>:
 80163f4:	b570      	push	{r4, r5, r6, lr}
 80163f6:	1ccd      	adds	r5, r1, #3
 80163f8:	f025 0503 	bic.w	r5, r5, #3
 80163fc:	3508      	adds	r5, #8
 80163fe:	2d0c      	cmp	r5, #12
 8016400:	bf38      	it	cc
 8016402:	250c      	movcc	r5, #12
 8016404:	2d00      	cmp	r5, #0
 8016406:	4606      	mov	r6, r0
 8016408:	db01      	blt.n	801640e <_malloc_r+0x1a>
 801640a:	42a9      	cmp	r1, r5
 801640c:	d903      	bls.n	8016416 <_malloc_r+0x22>
 801640e:	230c      	movs	r3, #12
 8016410:	6033      	str	r3, [r6, #0]
 8016412:	2000      	movs	r0, #0
 8016414:	bd70      	pop	{r4, r5, r6, pc}
 8016416:	f000 f8c5 	bl	80165a4 <__malloc_lock>
 801641a:	4a21      	ldr	r2, [pc, #132]	; (80164a0 <_malloc_r+0xac>)
 801641c:	6814      	ldr	r4, [r2, #0]
 801641e:	4621      	mov	r1, r4
 8016420:	b991      	cbnz	r1, 8016448 <_malloc_r+0x54>
 8016422:	4c20      	ldr	r4, [pc, #128]	; (80164a4 <_malloc_r+0xb0>)
 8016424:	6823      	ldr	r3, [r4, #0]
 8016426:	b91b      	cbnz	r3, 8016430 <_malloc_r+0x3c>
 8016428:	4630      	mov	r0, r6
 801642a:	f000 f83d 	bl	80164a8 <_sbrk_r>
 801642e:	6020      	str	r0, [r4, #0]
 8016430:	4629      	mov	r1, r5
 8016432:	4630      	mov	r0, r6
 8016434:	f000 f838 	bl	80164a8 <_sbrk_r>
 8016438:	1c43      	adds	r3, r0, #1
 801643a:	d124      	bne.n	8016486 <_malloc_r+0x92>
 801643c:	230c      	movs	r3, #12
 801643e:	6033      	str	r3, [r6, #0]
 8016440:	4630      	mov	r0, r6
 8016442:	f000 f8b0 	bl	80165a6 <__malloc_unlock>
 8016446:	e7e4      	b.n	8016412 <_malloc_r+0x1e>
 8016448:	680b      	ldr	r3, [r1, #0]
 801644a:	1b5b      	subs	r3, r3, r5
 801644c:	d418      	bmi.n	8016480 <_malloc_r+0x8c>
 801644e:	2b0b      	cmp	r3, #11
 8016450:	d90f      	bls.n	8016472 <_malloc_r+0x7e>
 8016452:	600b      	str	r3, [r1, #0]
 8016454:	50cd      	str	r5, [r1, r3]
 8016456:	18cc      	adds	r4, r1, r3
 8016458:	4630      	mov	r0, r6
 801645a:	f000 f8a4 	bl	80165a6 <__malloc_unlock>
 801645e:	f104 000b 	add.w	r0, r4, #11
 8016462:	1d23      	adds	r3, r4, #4
 8016464:	f020 0007 	bic.w	r0, r0, #7
 8016468:	1ac3      	subs	r3, r0, r3
 801646a:	d0d3      	beq.n	8016414 <_malloc_r+0x20>
 801646c:	425a      	negs	r2, r3
 801646e:	50e2      	str	r2, [r4, r3]
 8016470:	e7d0      	b.n	8016414 <_malloc_r+0x20>
 8016472:	428c      	cmp	r4, r1
 8016474:	684b      	ldr	r3, [r1, #4]
 8016476:	bf16      	itet	ne
 8016478:	6063      	strne	r3, [r4, #4]
 801647a:	6013      	streq	r3, [r2, #0]
 801647c:	460c      	movne	r4, r1
 801647e:	e7eb      	b.n	8016458 <_malloc_r+0x64>
 8016480:	460c      	mov	r4, r1
 8016482:	6849      	ldr	r1, [r1, #4]
 8016484:	e7cc      	b.n	8016420 <_malloc_r+0x2c>
 8016486:	1cc4      	adds	r4, r0, #3
 8016488:	f024 0403 	bic.w	r4, r4, #3
 801648c:	42a0      	cmp	r0, r4
 801648e:	d005      	beq.n	801649c <_malloc_r+0xa8>
 8016490:	1a21      	subs	r1, r4, r0
 8016492:	4630      	mov	r0, r6
 8016494:	f000 f808 	bl	80164a8 <_sbrk_r>
 8016498:	3001      	adds	r0, #1
 801649a:	d0cf      	beq.n	801643c <_malloc_r+0x48>
 801649c:	6025      	str	r5, [r4, #0]
 801649e:	e7db      	b.n	8016458 <_malloc_r+0x64>
 80164a0:	20008820 	.word	0x20008820
 80164a4:	20008824 	.word	0x20008824

080164a8 <_sbrk_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4c06      	ldr	r4, [pc, #24]	; (80164c4 <_sbrk_r+0x1c>)
 80164ac:	2300      	movs	r3, #0
 80164ae:	4605      	mov	r5, r0
 80164b0:	4608      	mov	r0, r1
 80164b2:	6023      	str	r3, [r4, #0]
 80164b4:	f7ec fc96 	bl	8002de4 <_sbrk>
 80164b8:	1c43      	adds	r3, r0, #1
 80164ba:	d102      	bne.n	80164c2 <_sbrk_r+0x1a>
 80164bc:	6823      	ldr	r3, [r4, #0]
 80164be:	b103      	cbz	r3, 80164c2 <_sbrk_r+0x1a>
 80164c0:	602b      	str	r3, [r5, #0]
 80164c2:	bd38      	pop	{r3, r4, r5, pc}
 80164c4:	20017068 	.word	0x20017068

080164c8 <sniprintf>:
 80164c8:	b40c      	push	{r2, r3}
 80164ca:	b530      	push	{r4, r5, lr}
 80164cc:	4b17      	ldr	r3, [pc, #92]	; (801652c <sniprintf+0x64>)
 80164ce:	1e0c      	subs	r4, r1, #0
 80164d0:	b09d      	sub	sp, #116	; 0x74
 80164d2:	681d      	ldr	r5, [r3, #0]
 80164d4:	da08      	bge.n	80164e8 <sniprintf+0x20>
 80164d6:	238b      	movs	r3, #139	; 0x8b
 80164d8:	602b      	str	r3, [r5, #0]
 80164da:	f04f 30ff 	mov.w	r0, #4294967295
 80164de:	b01d      	add	sp, #116	; 0x74
 80164e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164e4:	b002      	add	sp, #8
 80164e6:	4770      	bx	lr
 80164e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80164ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164f0:	bf14      	ite	ne
 80164f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80164f6:	4623      	moveq	r3, r4
 80164f8:	9304      	str	r3, [sp, #16]
 80164fa:	9307      	str	r3, [sp, #28]
 80164fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016500:	9002      	str	r0, [sp, #8]
 8016502:	9006      	str	r0, [sp, #24]
 8016504:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801650a:	ab21      	add	r3, sp, #132	; 0x84
 801650c:	a902      	add	r1, sp, #8
 801650e:	4628      	mov	r0, r5
 8016510:	9301      	str	r3, [sp, #4]
 8016512:	f000 f8a3 	bl	801665c <_svfiprintf_r>
 8016516:	1c43      	adds	r3, r0, #1
 8016518:	bfbc      	itt	lt
 801651a:	238b      	movlt	r3, #139	; 0x8b
 801651c:	602b      	strlt	r3, [r5, #0]
 801651e:	2c00      	cmp	r4, #0
 8016520:	d0dd      	beq.n	80164de <sniprintf+0x16>
 8016522:	9b02      	ldr	r3, [sp, #8]
 8016524:	2200      	movs	r2, #0
 8016526:	701a      	strb	r2, [r3, #0]
 8016528:	e7d9      	b.n	80164de <sniprintf+0x16>
 801652a:	bf00      	nop
 801652c:	20000194 	.word	0x20000194

08016530 <_vsniprintf_r>:
 8016530:	b530      	push	{r4, r5, lr}
 8016532:	1e14      	subs	r4, r2, #0
 8016534:	4605      	mov	r5, r0
 8016536:	b09b      	sub	sp, #108	; 0x6c
 8016538:	4618      	mov	r0, r3
 801653a:	da05      	bge.n	8016548 <_vsniprintf_r+0x18>
 801653c:	238b      	movs	r3, #139	; 0x8b
 801653e:	602b      	str	r3, [r5, #0]
 8016540:	f04f 30ff 	mov.w	r0, #4294967295
 8016544:	b01b      	add	sp, #108	; 0x6c
 8016546:	bd30      	pop	{r4, r5, pc}
 8016548:	f44f 7302 	mov.w	r3, #520	; 0x208
 801654c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016550:	bf14      	ite	ne
 8016552:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016556:	4623      	moveq	r3, r4
 8016558:	9302      	str	r3, [sp, #8]
 801655a:	9305      	str	r3, [sp, #20]
 801655c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016560:	9100      	str	r1, [sp, #0]
 8016562:	9104      	str	r1, [sp, #16]
 8016564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016568:	4602      	mov	r2, r0
 801656a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801656c:	4669      	mov	r1, sp
 801656e:	4628      	mov	r0, r5
 8016570:	f000 f874 	bl	801665c <_svfiprintf_r>
 8016574:	1c43      	adds	r3, r0, #1
 8016576:	bfbc      	itt	lt
 8016578:	238b      	movlt	r3, #139	; 0x8b
 801657a:	602b      	strlt	r3, [r5, #0]
 801657c:	2c00      	cmp	r4, #0
 801657e:	d0e1      	beq.n	8016544 <_vsniprintf_r+0x14>
 8016580:	9b00      	ldr	r3, [sp, #0]
 8016582:	2200      	movs	r2, #0
 8016584:	701a      	strb	r2, [r3, #0]
 8016586:	e7dd      	b.n	8016544 <_vsniprintf_r+0x14>

08016588 <vsniprintf>:
 8016588:	b507      	push	{r0, r1, r2, lr}
 801658a:	9300      	str	r3, [sp, #0]
 801658c:	4613      	mov	r3, r2
 801658e:	460a      	mov	r2, r1
 8016590:	4601      	mov	r1, r0
 8016592:	4803      	ldr	r0, [pc, #12]	; (80165a0 <vsniprintf+0x18>)
 8016594:	6800      	ldr	r0, [r0, #0]
 8016596:	f7ff ffcb 	bl	8016530 <_vsniprintf_r>
 801659a:	b003      	add	sp, #12
 801659c:	f85d fb04 	ldr.w	pc, [sp], #4
 80165a0:	20000194 	.word	0x20000194

080165a4 <__malloc_lock>:
 80165a4:	4770      	bx	lr

080165a6 <__malloc_unlock>:
 80165a6:	4770      	bx	lr

080165a8 <__ssputs_r>:
 80165a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165ac:	688e      	ldr	r6, [r1, #8]
 80165ae:	429e      	cmp	r6, r3
 80165b0:	4682      	mov	sl, r0
 80165b2:	460c      	mov	r4, r1
 80165b4:	4690      	mov	r8, r2
 80165b6:	4699      	mov	r9, r3
 80165b8:	d837      	bhi.n	801662a <__ssputs_r+0x82>
 80165ba:	898a      	ldrh	r2, [r1, #12]
 80165bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80165c0:	d031      	beq.n	8016626 <__ssputs_r+0x7e>
 80165c2:	6825      	ldr	r5, [r4, #0]
 80165c4:	6909      	ldr	r1, [r1, #16]
 80165c6:	1a6f      	subs	r7, r5, r1
 80165c8:	6965      	ldr	r5, [r4, #20]
 80165ca:	2302      	movs	r3, #2
 80165cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80165d4:	f109 0301 	add.w	r3, r9, #1
 80165d8:	443b      	add	r3, r7
 80165da:	429d      	cmp	r5, r3
 80165dc:	bf38      	it	cc
 80165de:	461d      	movcc	r5, r3
 80165e0:	0553      	lsls	r3, r2, #21
 80165e2:	d530      	bpl.n	8016646 <__ssputs_r+0x9e>
 80165e4:	4629      	mov	r1, r5
 80165e6:	f7ff ff05 	bl	80163f4 <_malloc_r>
 80165ea:	4606      	mov	r6, r0
 80165ec:	b950      	cbnz	r0, 8016604 <__ssputs_r+0x5c>
 80165ee:	230c      	movs	r3, #12
 80165f0:	f8ca 3000 	str.w	r3, [sl]
 80165f4:	89a3      	ldrh	r3, [r4, #12]
 80165f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165fa:	81a3      	strh	r3, [r4, #12]
 80165fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016604:	463a      	mov	r2, r7
 8016606:	6921      	ldr	r1, [r4, #16]
 8016608:	f7ff fe92 	bl	8016330 <memcpy>
 801660c:	89a3      	ldrh	r3, [r4, #12]
 801660e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016616:	81a3      	strh	r3, [r4, #12]
 8016618:	6126      	str	r6, [r4, #16]
 801661a:	6165      	str	r5, [r4, #20]
 801661c:	443e      	add	r6, r7
 801661e:	1bed      	subs	r5, r5, r7
 8016620:	6026      	str	r6, [r4, #0]
 8016622:	60a5      	str	r5, [r4, #8]
 8016624:	464e      	mov	r6, r9
 8016626:	454e      	cmp	r6, r9
 8016628:	d900      	bls.n	801662c <__ssputs_r+0x84>
 801662a:	464e      	mov	r6, r9
 801662c:	4632      	mov	r2, r6
 801662e:	4641      	mov	r1, r8
 8016630:	6820      	ldr	r0, [r4, #0]
 8016632:	f000 fa93 	bl	8016b5c <memmove>
 8016636:	68a3      	ldr	r3, [r4, #8]
 8016638:	1b9b      	subs	r3, r3, r6
 801663a:	60a3      	str	r3, [r4, #8]
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	441e      	add	r6, r3
 8016640:	6026      	str	r6, [r4, #0]
 8016642:	2000      	movs	r0, #0
 8016644:	e7dc      	b.n	8016600 <__ssputs_r+0x58>
 8016646:	462a      	mov	r2, r5
 8016648:	f000 faa1 	bl	8016b8e <_realloc_r>
 801664c:	4606      	mov	r6, r0
 801664e:	2800      	cmp	r0, #0
 8016650:	d1e2      	bne.n	8016618 <__ssputs_r+0x70>
 8016652:	6921      	ldr	r1, [r4, #16]
 8016654:	4650      	mov	r0, sl
 8016656:	f7ff fe7f 	bl	8016358 <_free_r>
 801665a:	e7c8      	b.n	80165ee <__ssputs_r+0x46>

0801665c <_svfiprintf_r>:
 801665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016660:	461d      	mov	r5, r3
 8016662:	898b      	ldrh	r3, [r1, #12]
 8016664:	061f      	lsls	r7, r3, #24
 8016666:	b09d      	sub	sp, #116	; 0x74
 8016668:	4680      	mov	r8, r0
 801666a:	460c      	mov	r4, r1
 801666c:	4616      	mov	r6, r2
 801666e:	d50f      	bpl.n	8016690 <_svfiprintf_r+0x34>
 8016670:	690b      	ldr	r3, [r1, #16]
 8016672:	b96b      	cbnz	r3, 8016690 <_svfiprintf_r+0x34>
 8016674:	2140      	movs	r1, #64	; 0x40
 8016676:	f7ff febd 	bl	80163f4 <_malloc_r>
 801667a:	6020      	str	r0, [r4, #0]
 801667c:	6120      	str	r0, [r4, #16]
 801667e:	b928      	cbnz	r0, 801668c <_svfiprintf_r+0x30>
 8016680:	230c      	movs	r3, #12
 8016682:	f8c8 3000 	str.w	r3, [r8]
 8016686:	f04f 30ff 	mov.w	r0, #4294967295
 801668a:	e0c8      	b.n	801681e <_svfiprintf_r+0x1c2>
 801668c:	2340      	movs	r3, #64	; 0x40
 801668e:	6163      	str	r3, [r4, #20]
 8016690:	2300      	movs	r3, #0
 8016692:	9309      	str	r3, [sp, #36]	; 0x24
 8016694:	2320      	movs	r3, #32
 8016696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801669a:	2330      	movs	r3, #48	; 0x30
 801669c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80166a0:	9503      	str	r5, [sp, #12]
 80166a2:	f04f 0b01 	mov.w	fp, #1
 80166a6:	4637      	mov	r7, r6
 80166a8:	463d      	mov	r5, r7
 80166aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80166ae:	b10b      	cbz	r3, 80166b4 <_svfiprintf_r+0x58>
 80166b0:	2b25      	cmp	r3, #37	; 0x25
 80166b2:	d13e      	bne.n	8016732 <_svfiprintf_r+0xd6>
 80166b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80166b8:	d00b      	beq.n	80166d2 <_svfiprintf_r+0x76>
 80166ba:	4653      	mov	r3, sl
 80166bc:	4632      	mov	r2, r6
 80166be:	4621      	mov	r1, r4
 80166c0:	4640      	mov	r0, r8
 80166c2:	f7ff ff71 	bl	80165a8 <__ssputs_r>
 80166c6:	3001      	adds	r0, #1
 80166c8:	f000 80a4 	beq.w	8016814 <_svfiprintf_r+0x1b8>
 80166cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166ce:	4453      	add	r3, sl
 80166d0:	9309      	str	r3, [sp, #36]	; 0x24
 80166d2:	783b      	ldrb	r3, [r7, #0]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f000 809d 	beq.w	8016814 <_svfiprintf_r+0x1b8>
 80166da:	2300      	movs	r3, #0
 80166dc:	f04f 32ff 	mov.w	r2, #4294967295
 80166e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166e4:	9304      	str	r3, [sp, #16]
 80166e6:	9307      	str	r3, [sp, #28]
 80166e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166ec:	931a      	str	r3, [sp, #104]	; 0x68
 80166ee:	462f      	mov	r7, r5
 80166f0:	2205      	movs	r2, #5
 80166f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80166f6:	4850      	ldr	r0, [pc, #320]	; (8016838 <_svfiprintf_r+0x1dc>)
 80166f8:	f7e9 fd92 	bl	8000220 <memchr>
 80166fc:	9b04      	ldr	r3, [sp, #16]
 80166fe:	b9d0      	cbnz	r0, 8016736 <_svfiprintf_r+0xda>
 8016700:	06d9      	lsls	r1, r3, #27
 8016702:	bf44      	itt	mi
 8016704:	2220      	movmi	r2, #32
 8016706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801670a:	071a      	lsls	r2, r3, #28
 801670c:	bf44      	itt	mi
 801670e:	222b      	movmi	r2, #43	; 0x2b
 8016710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016714:	782a      	ldrb	r2, [r5, #0]
 8016716:	2a2a      	cmp	r2, #42	; 0x2a
 8016718:	d015      	beq.n	8016746 <_svfiprintf_r+0xea>
 801671a:	9a07      	ldr	r2, [sp, #28]
 801671c:	462f      	mov	r7, r5
 801671e:	2000      	movs	r0, #0
 8016720:	250a      	movs	r5, #10
 8016722:	4639      	mov	r1, r7
 8016724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016728:	3b30      	subs	r3, #48	; 0x30
 801672a:	2b09      	cmp	r3, #9
 801672c:	d94d      	bls.n	80167ca <_svfiprintf_r+0x16e>
 801672e:	b1b8      	cbz	r0, 8016760 <_svfiprintf_r+0x104>
 8016730:	e00f      	b.n	8016752 <_svfiprintf_r+0xf6>
 8016732:	462f      	mov	r7, r5
 8016734:	e7b8      	b.n	80166a8 <_svfiprintf_r+0x4c>
 8016736:	4a40      	ldr	r2, [pc, #256]	; (8016838 <_svfiprintf_r+0x1dc>)
 8016738:	1a80      	subs	r0, r0, r2
 801673a:	fa0b f000 	lsl.w	r0, fp, r0
 801673e:	4318      	orrs	r0, r3
 8016740:	9004      	str	r0, [sp, #16]
 8016742:	463d      	mov	r5, r7
 8016744:	e7d3      	b.n	80166ee <_svfiprintf_r+0x92>
 8016746:	9a03      	ldr	r2, [sp, #12]
 8016748:	1d11      	adds	r1, r2, #4
 801674a:	6812      	ldr	r2, [r2, #0]
 801674c:	9103      	str	r1, [sp, #12]
 801674e:	2a00      	cmp	r2, #0
 8016750:	db01      	blt.n	8016756 <_svfiprintf_r+0xfa>
 8016752:	9207      	str	r2, [sp, #28]
 8016754:	e004      	b.n	8016760 <_svfiprintf_r+0x104>
 8016756:	4252      	negs	r2, r2
 8016758:	f043 0302 	orr.w	r3, r3, #2
 801675c:	9207      	str	r2, [sp, #28]
 801675e:	9304      	str	r3, [sp, #16]
 8016760:	783b      	ldrb	r3, [r7, #0]
 8016762:	2b2e      	cmp	r3, #46	; 0x2e
 8016764:	d10c      	bne.n	8016780 <_svfiprintf_r+0x124>
 8016766:	787b      	ldrb	r3, [r7, #1]
 8016768:	2b2a      	cmp	r3, #42	; 0x2a
 801676a:	d133      	bne.n	80167d4 <_svfiprintf_r+0x178>
 801676c:	9b03      	ldr	r3, [sp, #12]
 801676e:	1d1a      	adds	r2, r3, #4
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	9203      	str	r2, [sp, #12]
 8016774:	2b00      	cmp	r3, #0
 8016776:	bfb8      	it	lt
 8016778:	f04f 33ff 	movlt.w	r3, #4294967295
 801677c:	3702      	adds	r7, #2
 801677e:	9305      	str	r3, [sp, #20]
 8016780:	4d2e      	ldr	r5, [pc, #184]	; (801683c <_svfiprintf_r+0x1e0>)
 8016782:	7839      	ldrb	r1, [r7, #0]
 8016784:	2203      	movs	r2, #3
 8016786:	4628      	mov	r0, r5
 8016788:	f7e9 fd4a 	bl	8000220 <memchr>
 801678c:	b138      	cbz	r0, 801679e <_svfiprintf_r+0x142>
 801678e:	2340      	movs	r3, #64	; 0x40
 8016790:	1b40      	subs	r0, r0, r5
 8016792:	fa03 f000 	lsl.w	r0, r3, r0
 8016796:	9b04      	ldr	r3, [sp, #16]
 8016798:	4303      	orrs	r3, r0
 801679a:	3701      	adds	r7, #1
 801679c:	9304      	str	r3, [sp, #16]
 801679e:	7839      	ldrb	r1, [r7, #0]
 80167a0:	4827      	ldr	r0, [pc, #156]	; (8016840 <_svfiprintf_r+0x1e4>)
 80167a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167a6:	2206      	movs	r2, #6
 80167a8:	1c7e      	adds	r6, r7, #1
 80167aa:	f7e9 fd39 	bl	8000220 <memchr>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d038      	beq.n	8016824 <_svfiprintf_r+0x1c8>
 80167b2:	4b24      	ldr	r3, [pc, #144]	; (8016844 <_svfiprintf_r+0x1e8>)
 80167b4:	bb13      	cbnz	r3, 80167fc <_svfiprintf_r+0x1a0>
 80167b6:	9b03      	ldr	r3, [sp, #12]
 80167b8:	3307      	adds	r3, #7
 80167ba:	f023 0307 	bic.w	r3, r3, #7
 80167be:	3308      	adds	r3, #8
 80167c0:	9303      	str	r3, [sp, #12]
 80167c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167c4:	444b      	add	r3, r9
 80167c6:	9309      	str	r3, [sp, #36]	; 0x24
 80167c8:	e76d      	b.n	80166a6 <_svfiprintf_r+0x4a>
 80167ca:	fb05 3202 	mla	r2, r5, r2, r3
 80167ce:	2001      	movs	r0, #1
 80167d0:	460f      	mov	r7, r1
 80167d2:	e7a6      	b.n	8016722 <_svfiprintf_r+0xc6>
 80167d4:	2300      	movs	r3, #0
 80167d6:	3701      	adds	r7, #1
 80167d8:	9305      	str	r3, [sp, #20]
 80167da:	4619      	mov	r1, r3
 80167dc:	250a      	movs	r5, #10
 80167de:	4638      	mov	r0, r7
 80167e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167e4:	3a30      	subs	r2, #48	; 0x30
 80167e6:	2a09      	cmp	r2, #9
 80167e8:	d903      	bls.n	80167f2 <_svfiprintf_r+0x196>
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d0c8      	beq.n	8016780 <_svfiprintf_r+0x124>
 80167ee:	9105      	str	r1, [sp, #20]
 80167f0:	e7c6      	b.n	8016780 <_svfiprintf_r+0x124>
 80167f2:	fb05 2101 	mla	r1, r5, r1, r2
 80167f6:	2301      	movs	r3, #1
 80167f8:	4607      	mov	r7, r0
 80167fa:	e7f0      	b.n	80167de <_svfiprintf_r+0x182>
 80167fc:	ab03      	add	r3, sp, #12
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	4622      	mov	r2, r4
 8016802:	4b11      	ldr	r3, [pc, #68]	; (8016848 <_svfiprintf_r+0x1ec>)
 8016804:	a904      	add	r1, sp, #16
 8016806:	4640      	mov	r0, r8
 8016808:	f3af 8000 	nop.w
 801680c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016810:	4681      	mov	r9, r0
 8016812:	d1d6      	bne.n	80167c2 <_svfiprintf_r+0x166>
 8016814:	89a3      	ldrh	r3, [r4, #12]
 8016816:	065b      	lsls	r3, r3, #25
 8016818:	f53f af35 	bmi.w	8016686 <_svfiprintf_r+0x2a>
 801681c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801681e:	b01d      	add	sp, #116	; 0x74
 8016820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016824:	ab03      	add	r3, sp, #12
 8016826:	9300      	str	r3, [sp, #0]
 8016828:	4622      	mov	r2, r4
 801682a:	4b07      	ldr	r3, [pc, #28]	; (8016848 <_svfiprintf_r+0x1ec>)
 801682c:	a904      	add	r1, sp, #16
 801682e:	4640      	mov	r0, r8
 8016830:	f000 f882 	bl	8016938 <_printf_i>
 8016834:	e7ea      	b.n	801680c <_svfiprintf_r+0x1b0>
 8016836:	bf00      	nop
 8016838:	080184bc 	.word	0x080184bc
 801683c:	080184c2 	.word	0x080184c2
 8016840:	080184c6 	.word	0x080184c6
 8016844:	00000000 	.word	0x00000000
 8016848:	080165a9 	.word	0x080165a9

0801684c <_printf_common>:
 801684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016850:	4691      	mov	r9, r2
 8016852:	461f      	mov	r7, r3
 8016854:	688a      	ldr	r2, [r1, #8]
 8016856:	690b      	ldr	r3, [r1, #16]
 8016858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801685c:	4293      	cmp	r3, r2
 801685e:	bfb8      	it	lt
 8016860:	4613      	movlt	r3, r2
 8016862:	f8c9 3000 	str.w	r3, [r9]
 8016866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801686a:	4606      	mov	r6, r0
 801686c:	460c      	mov	r4, r1
 801686e:	b112      	cbz	r2, 8016876 <_printf_common+0x2a>
 8016870:	3301      	adds	r3, #1
 8016872:	f8c9 3000 	str.w	r3, [r9]
 8016876:	6823      	ldr	r3, [r4, #0]
 8016878:	0699      	lsls	r1, r3, #26
 801687a:	bf42      	ittt	mi
 801687c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016880:	3302      	addmi	r3, #2
 8016882:	f8c9 3000 	strmi.w	r3, [r9]
 8016886:	6825      	ldr	r5, [r4, #0]
 8016888:	f015 0506 	ands.w	r5, r5, #6
 801688c:	d107      	bne.n	801689e <_printf_common+0x52>
 801688e:	f104 0a19 	add.w	sl, r4, #25
 8016892:	68e3      	ldr	r3, [r4, #12]
 8016894:	f8d9 2000 	ldr.w	r2, [r9]
 8016898:	1a9b      	subs	r3, r3, r2
 801689a:	42ab      	cmp	r3, r5
 801689c:	dc28      	bgt.n	80168f0 <_printf_common+0xa4>
 801689e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80168a2:	6822      	ldr	r2, [r4, #0]
 80168a4:	3300      	adds	r3, #0
 80168a6:	bf18      	it	ne
 80168a8:	2301      	movne	r3, #1
 80168aa:	0692      	lsls	r2, r2, #26
 80168ac:	d42d      	bmi.n	801690a <_printf_common+0xbe>
 80168ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80168b2:	4639      	mov	r1, r7
 80168b4:	4630      	mov	r0, r6
 80168b6:	47c0      	blx	r8
 80168b8:	3001      	adds	r0, #1
 80168ba:	d020      	beq.n	80168fe <_printf_common+0xb2>
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	68e5      	ldr	r5, [r4, #12]
 80168c0:	f8d9 2000 	ldr.w	r2, [r9]
 80168c4:	f003 0306 	and.w	r3, r3, #6
 80168c8:	2b04      	cmp	r3, #4
 80168ca:	bf08      	it	eq
 80168cc:	1aad      	subeq	r5, r5, r2
 80168ce:	68a3      	ldr	r3, [r4, #8]
 80168d0:	6922      	ldr	r2, [r4, #16]
 80168d2:	bf0c      	ite	eq
 80168d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168d8:	2500      	movne	r5, #0
 80168da:	4293      	cmp	r3, r2
 80168dc:	bfc4      	itt	gt
 80168de:	1a9b      	subgt	r3, r3, r2
 80168e0:	18ed      	addgt	r5, r5, r3
 80168e2:	f04f 0900 	mov.w	r9, #0
 80168e6:	341a      	adds	r4, #26
 80168e8:	454d      	cmp	r5, r9
 80168ea:	d11a      	bne.n	8016922 <_printf_common+0xd6>
 80168ec:	2000      	movs	r0, #0
 80168ee:	e008      	b.n	8016902 <_printf_common+0xb6>
 80168f0:	2301      	movs	r3, #1
 80168f2:	4652      	mov	r2, sl
 80168f4:	4639      	mov	r1, r7
 80168f6:	4630      	mov	r0, r6
 80168f8:	47c0      	blx	r8
 80168fa:	3001      	adds	r0, #1
 80168fc:	d103      	bne.n	8016906 <_printf_common+0xba>
 80168fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016906:	3501      	adds	r5, #1
 8016908:	e7c3      	b.n	8016892 <_printf_common+0x46>
 801690a:	18e1      	adds	r1, r4, r3
 801690c:	1c5a      	adds	r2, r3, #1
 801690e:	2030      	movs	r0, #48	; 0x30
 8016910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016914:	4422      	add	r2, r4
 8016916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801691a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801691e:	3302      	adds	r3, #2
 8016920:	e7c5      	b.n	80168ae <_printf_common+0x62>
 8016922:	2301      	movs	r3, #1
 8016924:	4622      	mov	r2, r4
 8016926:	4639      	mov	r1, r7
 8016928:	4630      	mov	r0, r6
 801692a:	47c0      	blx	r8
 801692c:	3001      	adds	r0, #1
 801692e:	d0e6      	beq.n	80168fe <_printf_common+0xb2>
 8016930:	f109 0901 	add.w	r9, r9, #1
 8016934:	e7d8      	b.n	80168e8 <_printf_common+0x9c>
	...

08016938 <_printf_i>:
 8016938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801693c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016940:	460c      	mov	r4, r1
 8016942:	7e09      	ldrb	r1, [r1, #24]
 8016944:	b085      	sub	sp, #20
 8016946:	296e      	cmp	r1, #110	; 0x6e
 8016948:	4617      	mov	r7, r2
 801694a:	4606      	mov	r6, r0
 801694c:	4698      	mov	r8, r3
 801694e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016950:	f000 80b3 	beq.w	8016aba <_printf_i+0x182>
 8016954:	d822      	bhi.n	801699c <_printf_i+0x64>
 8016956:	2963      	cmp	r1, #99	; 0x63
 8016958:	d036      	beq.n	80169c8 <_printf_i+0x90>
 801695a:	d80a      	bhi.n	8016972 <_printf_i+0x3a>
 801695c:	2900      	cmp	r1, #0
 801695e:	f000 80b9 	beq.w	8016ad4 <_printf_i+0x19c>
 8016962:	2958      	cmp	r1, #88	; 0x58
 8016964:	f000 8083 	beq.w	8016a6e <_printf_i+0x136>
 8016968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801696c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016970:	e032      	b.n	80169d8 <_printf_i+0xa0>
 8016972:	2964      	cmp	r1, #100	; 0x64
 8016974:	d001      	beq.n	801697a <_printf_i+0x42>
 8016976:	2969      	cmp	r1, #105	; 0x69
 8016978:	d1f6      	bne.n	8016968 <_printf_i+0x30>
 801697a:	6820      	ldr	r0, [r4, #0]
 801697c:	6813      	ldr	r3, [r2, #0]
 801697e:	0605      	lsls	r5, r0, #24
 8016980:	f103 0104 	add.w	r1, r3, #4
 8016984:	d52a      	bpl.n	80169dc <_printf_i+0xa4>
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	6011      	str	r1, [r2, #0]
 801698a:	2b00      	cmp	r3, #0
 801698c:	da03      	bge.n	8016996 <_printf_i+0x5e>
 801698e:	222d      	movs	r2, #45	; 0x2d
 8016990:	425b      	negs	r3, r3
 8016992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016996:	486f      	ldr	r0, [pc, #444]	; (8016b54 <_printf_i+0x21c>)
 8016998:	220a      	movs	r2, #10
 801699a:	e039      	b.n	8016a10 <_printf_i+0xd8>
 801699c:	2973      	cmp	r1, #115	; 0x73
 801699e:	f000 809d 	beq.w	8016adc <_printf_i+0x1a4>
 80169a2:	d808      	bhi.n	80169b6 <_printf_i+0x7e>
 80169a4:	296f      	cmp	r1, #111	; 0x6f
 80169a6:	d020      	beq.n	80169ea <_printf_i+0xb2>
 80169a8:	2970      	cmp	r1, #112	; 0x70
 80169aa:	d1dd      	bne.n	8016968 <_printf_i+0x30>
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	f043 0320 	orr.w	r3, r3, #32
 80169b2:	6023      	str	r3, [r4, #0]
 80169b4:	e003      	b.n	80169be <_printf_i+0x86>
 80169b6:	2975      	cmp	r1, #117	; 0x75
 80169b8:	d017      	beq.n	80169ea <_printf_i+0xb2>
 80169ba:	2978      	cmp	r1, #120	; 0x78
 80169bc:	d1d4      	bne.n	8016968 <_printf_i+0x30>
 80169be:	2378      	movs	r3, #120	; 0x78
 80169c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80169c4:	4864      	ldr	r0, [pc, #400]	; (8016b58 <_printf_i+0x220>)
 80169c6:	e055      	b.n	8016a74 <_printf_i+0x13c>
 80169c8:	6813      	ldr	r3, [r2, #0]
 80169ca:	1d19      	adds	r1, r3, #4
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	6011      	str	r1, [r2, #0]
 80169d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80169d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169d8:	2301      	movs	r3, #1
 80169da:	e08c      	b.n	8016af6 <_printf_i+0x1be>
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	6011      	str	r1, [r2, #0]
 80169e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80169e4:	bf18      	it	ne
 80169e6:	b21b      	sxthne	r3, r3
 80169e8:	e7cf      	b.n	801698a <_printf_i+0x52>
 80169ea:	6813      	ldr	r3, [r2, #0]
 80169ec:	6825      	ldr	r5, [r4, #0]
 80169ee:	1d18      	adds	r0, r3, #4
 80169f0:	6010      	str	r0, [r2, #0]
 80169f2:	0628      	lsls	r0, r5, #24
 80169f4:	d501      	bpl.n	80169fa <_printf_i+0xc2>
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	e002      	b.n	8016a00 <_printf_i+0xc8>
 80169fa:	0668      	lsls	r0, r5, #25
 80169fc:	d5fb      	bpl.n	80169f6 <_printf_i+0xbe>
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	4854      	ldr	r0, [pc, #336]	; (8016b54 <_printf_i+0x21c>)
 8016a02:	296f      	cmp	r1, #111	; 0x6f
 8016a04:	bf14      	ite	ne
 8016a06:	220a      	movne	r2, #10
 8016a08:	2208      	moveq	r2, #8
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016a10:	6865      	ldr	r5, [r4, #4]
 8016a12:	60a5      	str	r5, [r4, #8]
 8016a14:	2d00      	cmp	r5, #0
 8016a16:	f2c0 8095 	blt.w	8016b44 <_printf_i+0x20c>
 8016a1a:	6821      	ldr	r1, [r4, #0]
 8016a1c:	f021 0104 	bic.w	r1, r1, #4
 8016a20:	6021      	str	r1, [r4, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d13d      	bne.n	8016aa2 <_printf_i+0x16a>
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	f040 808e 	bne.w	8016b48 <_printf_i+0x210>
 8016a2c:	4665      	mov	r5, ip
 8016a2e:	2a08      	cmp	r2, #8
 8016a30:	d10b      	bne.n	8016a4a <_printf_i+0x112>
 8016a32:	6823      	ldr	r3, [r4, #0]
 8016a34:	07db      	lsls	r3, r3, #31
 8016a36:	d508      	bpl.n	8016a4a <_printf_i+0x112>
 8016a38:	6923      	ldr	r3, [r4, #16]
 8016a3a:	6862      	ldr	r2, [r4, #4]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	bfde      	ittt	le
 8016a40:	2330      	movle	r3, #48	; 0x30
 8016a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016a4a:	ebac 0305 	sub.w	r3, ip, r5
 8016a4e:	6123      	str	r3, [r4, #16]
 8016a50:	f8cd 8000 	str.w	r8, [sp]
 8016a54:	463b      	mov	r3, r7
 8016a56:	aa03      	add	r2, sp, #12
 8016a58:	4621      	mov	r1, r4
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	f7ff fef6 	bl	801684c <_printf_common>
 8016a60:	3001      	adds	r0, #1
 8016a62:	d14d      	bne.n	8016b00 <_printf_i+0x1c8>
 8016a64:	f04f 30ff 	mov.w	r0, #4294967295
 8016a68:	b005      	add	sp, #20
 8016a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a6e:	4839      	ldr	r0, [pc, #228]	; (8016b54 <_printf_i+0x21c>)
 8016a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016a74:	6813      	ldr	r3, [r2, #0]
 8016a76:	6821      	ldr	r1, [r4, #0]
 8016a78:	1d1d      	adds	r5, r3, #4
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	6015      	str	r5, [r2, #0]
 8016a7e:	060a      	lsls	r2, r1, #24
 8016a80:	d50b      	bpl.n	8016a9a <_printf_i+0x162>
 8016a82:	07ca      	lsls	r2, r1, #31
 8016a84:	bf44      	itt	mi
 8016a86:	f041 0120 	orrmi.w	r1, r1, #32
 8016a8a:	6021      	strmi	r1, [r4, #0]
 8016a8c:	b91b      	cbnz	r3, 8016a96 <_printf_i+0x15e>
 8016a8e:	6822      	ldr	r2, [r4, #0]
 8016a90:	f022 0220 	bic.w	r2, r2, #32
 8016a94:	6022      	str	r2, [r4, #0]
 8016a96:	2210      	movs	r2, #16
 8016a98:	e7b7      	b.n	8016a0a <_printf_i+0xd2>
 8016a9a:	064d      	lsls	r5, r1, #25
 8016a9c:	bf48      	it	mi
 8016a9e:	b29b      	uxthmi	r3, r3
 8016aa0:	e7ef      	b.n	8016a82 <_printf_i+0x14a>
 8016aa2:	4665      	mov	r5, ip
 8016aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8016aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8016aac:	5cc3      	ldrb	r3, [r0, r3]
 8016aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016ab2:	460b      	mov	r3, r1
 8016ab4:	2900      	cmp	r1, #0
 8016ab6:	d1f5      	bne.n	8016aa4 <_printf_i+0x16c>
 8016ab8:	e7b9      	b.n	8016a2e <_printf_i+0xf6>
 8016aba:	6813      	ldr	r3, [r2, #0]
 8016abc:	6825      	ldr	r5, [r4, #0]
 8016abe:	6961      	ldr	r1, [r4, #20]
 8016ac0:	1d18      	adds	r0, r3, #4
 8016ac2:	6010      	str	r0, [r2, #0]
 8016ac4:	0628      	lsls	r0, r5, #24
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	d501      	bpl.n	8016ace <_printf_i+0x196>
 8016aca:	6019      	str	r1, [r3, #0]
 8016acc:	e002      	b.n	8016ad4 <_printf_i+0x19c>
 8016ace:	066a      	lsls	r2, r5, #25
 8016ad0:	d5fb      	bpl.n	8016aca <_printf_i+0x192>
 8016ad2:	8019      	strh	r1, [r3, #0]
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	6123      	str	r3, [r4, #16]
 8016ad8:	4665      	mov	r5, ip
 8016ada:	e7b9      	b.n	8016a50 <_printf_i+0x118>
 8016adc:	6813      	ldr	r3, [r2, #0]
 8016ade:	1d19      	adds	r1, r3, #4
 8016ae0:	6011      	str	r1, [r2, #0]
 8016ae2:	681d      	ldr	r5, [r3, #0]
 8016ae4:	6862      	ldr	r2, [r4, #4]
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	4628      	mov	r0, r5
 8016aea:	f7e9 fb99 	bl	8000220 <memchr>
 8016aee:	b108      	cbz	r0, 8016af4 <_printf_i+0x1bc>
 8016af0:	1b40      	subs	r0, r0, r5
 8016af2:	6060      	str	r0, [r4, #4]
 8016af4:	6863      	ldr	r3, [r4, #4]
 8016af6:	6123      	str	r3, [r4, #16]
 8016af8:	2300      	movs	r3, #0
 8016afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016afe:	e7a7      	b.n	8016a50 <_printf_i+0x118>
 8016b00:	6923      	ldr	r3, [r4, #16]
 8016b02:	462a      	mov	r2, r5
 8016b04:	4639      	mov	r1, r7
 8016b06:	4630      	mov	r0, r6
 8016b08:	47c0      	blx	r8
 8016b0a:	3001      	adds	r0, #1
 8016b0c:	d0aa      	beq.n	8016a64 <_printf_i+0x12c>
 8016b0e:	6823      	ldr	r3, [r4, #0]
 8016b10:	079b      	lsls	r3, r3, #30
 8016b12:	d413      	bmi.n	8016b3c <_printf_i+0x204>
 8016b14:	68e0      	ldr	r0, [r4, #12]
 8016b16:	9b03      	ldr	r3, [sp, #12]
 8016b18:	4298      	cmp	r0, r3
 8016b1a:	bfb8      	it	lt
 8016b1c:	4618      	movlt	r0, r3
 8016b1e:	e7a3      	b.n	8016a68 <_printf_i+0x130>
 8016b20:	2301      	movs	r3, #1
 8016b22:	464a      	mov	r2, r9
 8016b24:	4639      	mov	r1, r7
 8016b26:	4630      	mov	r0, r6
 8016b28:	47c0      	blx	r8
 8016b2a:	3001      	adds	r0, #1
 8016b2c:	d09a      	beq.n	8016a64 <_printf_i+0x12c>
 8016b2e:	3501      	adds	r5, #1
 8016b30:	68e3      	ldr	r3, [r4, #12]
 8016b32:	9a03      	ldr	r2, [sp, #12]
 8016b34:	1a9b      	subs	r3, r3, r2
 8016b36:	42ab      	cmp	r3, r5
 8016b38:	dcf2      	bgt.n	8016b20 <_printf_i+0x1e8>
 8016b3a:	e7eb      	b.n	8016b14 <_printf_i+0x1dc>
 8016b3c:	2500      	movs	r5, #0
 8016b3e:	f104 0919 	add.w	r9, r4, #25
 8016b42:	e7f5      	b.n	8016b30 <_printf_i+0x1f8>
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d1ac      	bne.n	8016aa2 <_printf_i+0x16a>
 8016b48:	7803      	ldrb	r3, [r0, #0]
 8016b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b52:	e76c      	b.n	8016a2e <_printf_i+0xf6>
 8016b54:	080184cd 	.word	0x080184cd
 8016b58:	080184de 	.word	0x080184de

08016b5c <memmove>:
 8016b5c:	4288      	cmp	r0, r1
 8016b5e:	b510      	push	{r4, lr}
 8016b60:	eb01 0302 	add.w	r3, r1, r2
 8016b64:	d807      	bhi.n	8016b76 <memmove+0x1a>
 8016b66:	1e42      	subs	r2, r0, #1
 8016b68:	4299      	cmp	r1, r3
 8016b6a:	d00a      	beq.n	8016b82 <memmove+0x26>
 8016b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016b74:	e7f8      	b.n	8016b68 <memmove+0xc>
 8016b76:	4283      	cmp	r3, r0
 8016b78:	d9f5      	bls.n	8016b66 <memmove+0xa>
 8016b7a:	1881      	adds	r1, r0, r2
 8016b7c:	1ad2      	subs	r2, r2, r3
 8016b7e:	42d3      	cmn	r3, r2
 8016b80:	d100      	bne.n	8016b84 <memmove+0x28>
 8016b82:	bd10      	pop	{r4, pc}
 8016b84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016b8c:	e7f7      	b.n	8016b7e <memmove+0x22>

08016b8e <_realloc_r>:
 8016b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b90:	4607      	mov	r7, r0
 8016b92:	4614      	mov	r4, r2
 8016b94:	460e      	mov	r6, r1
 8016b96:	b921      	cbnz	r1, 8016ba2 <_realloc_r+0x14>
 8016b98:	4611      	mov	r1, r2
 8016b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016b9e:	f7ff bc29 	b.w	80163f4 <_malloc_r>
 8016ba2:	b922      	cbnz	r2, 8016bae <_realloc_r+0x20>
 8016ba4:	f7ff fbd8 	bl	8016358 <_free_r>
 8016ba8:	4625      	mov	r5, r4
 8016baa:	4628      	mov	r0, r5
 8016bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bae:	f000 f814 	bl	8016bda <_malloc_usable_size_r>
 8016bb2:	42a0      	cmp	r0, r4
 8016bb4:	d20f      	bcs.n	8016bd6 <_realloc_r+0x48>
 8016bb6:	4621      	mov	r1, r4
 8016bb8:	4638      	mov	r0, r7
 8016bba:	f7ff fc1b 	bl	80163f4 <_malloc_r>
 8016bbe:	4605      	mov	r5, r0
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d0f2      	beq.n	8016baa <_realloc_r+0x1c>
 8016bc4:	4631      	mov	r1, r6
 8016bc6:	4622      	mov	r2, r4
 8016bc8:	f7ff fbb2 	bl	8016330 <memcpy>
 8016bcc:	4631      	mov	r1, r6
 8016bce:	4638      	mov	r0, r7
 8016bd0:	f7ff fbc2 	bl	8016358 <_free_r>
 8016bd4:	e7e9      	b.n	8016baa <_realloc_r+0x1c>
 8016bd6:	4635      	mov	r5, r6
 8016bd8:	e7e7      	b.n	8016baa <_realloc_r+0x1c>

08016bda <_malloc_usable_size_r>:
 8016bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bde:	1f18      	subs	r0, r3, #4
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	bfbc      	itt	lt
 8016be4:	580b      	ldrlt	r3, [r1, r0]
 8016be6:	18c0      	addlt	r0, r0, r3
 8016be8:	4770      	bx	lr

08016bea <fmax>:
 8016bea:	b508      	push	{r3, lr}
 8016bec:	ed2d 8b04 	vpush	{d8-d9}
 8016bf0:	eeb0 8a40 	vmov.f32	s16, s0
 8016bf4:	eef0 8a60 	vmov.f32	s17, s1
 8016bf8:	eeb0 9a41 	vmov.f32	s18, s2
 8016bfc:	eef0 9a61 	vmov.f32	s19, s3
 8016c00:	f000 f842 	bl	8016c88 <__fpclassifyd>
 8016c04:	b168      	cbz	r0, 8016c22 <fmax+0x38>
 8016c06:	eeb0 0a49 	vmov.f32	s0, s18
 8016c0a:	eef0 0a69 	vmov.f32	s1, s19
 8016c0e:	f000 f83b 	bl	8016c88 <__fpclassifyd>
 8016c12:	b150      	cbz	r0, 8016c2a <fmax+0x40>
 8016c14:	ec53 2b19 	vmov	r2, r3, d9
 8016c18:	ec51 0b18 	vmov	r0, r1, d8
 8016c1c:	f7e9 ff9c 	bl	8000b58 <__aeabi_dcmpgt>
 8016c20:	b918      	cbnz	r0, 8016c2a <fmax+0x40>
 8016c22:	eeb0 8a49 	vmov.f32	s16, s18
 8016c26:	eef0 8a69 	vmov.f32	s17, s19
 8016c2a:	eeb0 0a48 	vmov.f32	s0, s16
 8016c2e:	eef0 0a68 	vmov.f32	s1, s17
 8016c32:	ecbd 8b04 	vpop	{d8-d9}
 8016c36:	bd08      	pop	{r3, pc}

08016c38 <fmin>:
 8016c38:	b508      	push	{r3, lr}
 8016c3a:	ed2d 8b04 	vpush	{d8-d9}
 8016c3e:	eeb0 8a40 	vmov.f32	s16, s0
 8016c42:	eef0 8a60 	vmov.f32	s17, s1
 8016c46:	eeb0 9a41 	vmov.f32	s18, s2
 8016c4a:	eef0 9a61 	vmov.f32	s19, s3
 8016c4e:	f000 f81b 	bl	8016c88 <__fpclassifyd>
 8016c52:	b168      	cbz	r0, 8016c70 <fmin+0x38>
 8016c54:	eeb0 0a49 	vmov.f32	s0, s18
 8016c58:	eef0 0a69 	vmov.f32	s1, s19
 8016c5c:	f000 f814 	bl	8016c88 <__fpclassifyd>
 8016c60:	b150      	cbz	r0, 8016c78 <fmin+0x40>
 8016c62:	ec53 2b19 	vmov	r2, r3, d9
 8016c66:	ec51 0b18 	vmov	r0, r1, d8
 8016c6a:	f7e9 ff57 	bl	8000b1c <__aeabi_dcmplt>
 8016c6e:	b918      	cbnz	r0, 8016c78 <fmin+0x40>
 8016c70:	eeb0 8a49 	vmov.f32	s16, s18
 8016c74:	eef0 8a69 	vmov.f32	s17, s19
 8016c78:	eeb0 0a48 	vmov.f32	s0, s16
 8016c7c:	eef0 0a68 	vmov.f32	s1, s17
 8016c80:	ecbd 8b04 	vpop	{d8-d9}
 8016c84:	bd08      	pop	{r3, pc}
	...

08016c88 <__fpclassifyd>:
 8016c88:	ec51 0b10 	vmov	r0, r1, d0
 8016c8c:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8016c90:	b510      	push	{r4, lr}
 8016c92:	460b      	mov	r3, r1
 8016c94:	d01b      	beq.n	8016cce <__fpclassifyd+0x46>
 8016c96:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8016c9a:	490f      	ldr	r1, [pc, #60]	; (8016cd8 <__fpclassifyd+0x50>)
 8016c9c:	428c      	cmp	r4, r1
 8016c9e:	d910      	bls.n	8016cc2 <__fpclassifyd+0x3a>
 8016ca0:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8016ca4:	490c      	ldr	r1, [pc, #48]	; (8016cd8 <__fpclassifyd+0x50>)
 8016ca6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016caa:	428b      	cmp	r3, r1
 8016cac:	d909      	bls.n	8016cc2 <__fpclassifyd+0x3a>
 8016cae:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8016cb2:	d308      	bcc.n	8016cc6 <__fpclassifyd+0x3e>
 8016cb4:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <__fpclassifyd+0x54>)
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d107      	bne.n	8016cca <__fpclassifyd+0x42>
 8016cba:	fab0 f080 	clz	r0, r0
 8016cbe:	0940      	lsrs	r0, r0, #5
 8016cc0:	bd10      	pop	{r4, pc}
 8016cc2:	2004      	movs	r0, #4
 8016cc4:	e7fc      	b.n	8016cc0 <__fpclassifyd+0x38>
 8016cc6:	2003      	movs	r0, #3
 8016cc8:	e7fa      	b.n	8016cc0 <__fpclassifyd+0x38>
 8016cca:	2000      	movs	r0, #0
 8016ccc:	e7f8      	b.n	8016cc0 <__fpclassifyd+0x38>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d1e6      	bne.n	8016ca0 <__fpclassifyd+0x18>
 8016cd2:	2002      	movs	r0, #2
 8016cd4:	e7f4      	b.n	8016cc0 <__fpclassifyd+0x38>
 8016cd6:	bf00      	nop
 8016cd8:	7fdfffff 	.word	0x7fdfffff
 8016cdc:	7ff00000 	.word	0x7ff00000

08016ce0 <pow>:
 8016ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce4:	ed2d 8b04 	vpush	{d8-d9}
 8016ce8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016fbc <pow+0x2dc>
 8016cec:	b08d      	sub	sp, #52	; 0x34
 8016cee:	ec57 6b10 	vmov	r6, r7, d0
 8016cf2:	ec55 4b11 	vmov	r4, r5, d1
 8016cf6:	f000 f963 	bl	8016fc0 <__ieee754_pow>
 8016cfa:	f999 3000 	ldrsb.w	r3, [r9]
 8016cfe:	9300      	str	r3, [sp, #0]
 8016d00:	3301      	adds	r3, #1
 8016d02:	eeb0 8a40 	vmov.f32	s16, s0
 8016d06:	eef0 8a60 	vmov.f32	s17, s1
 8016d0a:	46c8      	mov	r8, r9
 8016d0c:	d05f      	beq.n	8016dce <pow+0xee>
 8016d0e:	4622      	mov	r2, r4
 8016d10:	462b      	mov	r3, r5
 8016d12:	4620      	mov	r0, r4
 8016d14:	4629      	mov	r1, r5
 8016d16:	f7e9 ff29 	bl	8000b6c <__aeabi_dcmpun>
 8016d1a:	4683      	mov	fp, r0
 8016d1c:	2800      	cmp	r0, #0
 8016d1e:	d156      	bne.n	8016dce <pow+0xee>
 8016d20:	4632      	mov	r2, r6
 8016d22:	463b      	mov	r3, r7
 8016d24:	4630      	mov	r0, r6
 8016d26:	4639      	mov	r1, r7
 8016d28:	f7e9 ff20 	bl	8000b6c <__aeabi_dcmpun>
 8016d2c:	9001      	str	r0, [sp, #4]
 8016d2e:	b1e8      	cbz	r0, 8016d6c <pow+0x8c>
 8016d30:	2200      	movs	r2, #0
 8016d32:	2300      	movs	r3, #0
 8016d34:	4620      	mov	r0, r4
 8016d36:	4629      	mov	r1, r5
 8016d38:	f7e9 fee6 	bl	8000b08 <__aeabi_dcmpeq>
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	d046      	beq.n	8016dce <pow+0xee>
 8016d40:	2301      	movs	r3, #1
 8016d42:	9302      	str	r3, [sp, #8]
 8016d44:	4b96      	ldr	r3, [pc, #600]	; (8016fa0 <pow+0x2c0>)
 8016d46:	9303      	str	r3, [sp, #12]
 8016d48:	4b96      	ldr	r3, [pc, #600]	; (8016fa4 <pow+0x2c4>)
 8016d4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016d4e:	2200      	movs	r2, #0
 8016d50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016d54:	9b00      	ldr	r3, [sp, #0]
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d60:	d033      	beq.n	8016dca <pow+0xea>
 8016d62:	a802      	add	r0, sp, #8
 8016d64:	f000 fefb 	bl	8017b5e <matherr>
 8016d68:	bb48      	cbnz	r0, 8016dbe <pow+0xde>
 8016d6a:	e05d      	b.n	8016e28 <pow+0x148>
 8016d6c:	f04f 0a00 	mov.w	sl, #0
 8016d70:	f04f 0b00 	mov.w	fp, #0
 8016d74:	4652      	mov	r2, sl
 8016d76:	465b      	mov	r3, fp
 8016d78:	4630      	mov	r0, r6
 8016d7a:	4639      	mov	r1, r7
 8016d7c:	f7e9 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8016d80:	ec4b ab19 	vmov	d9, sl, fp
 8016d84:	2800      	cmp	r0, #0
 8016d86:	d054      	beq.n	8016e32 <pow+0x152>
 8016d88:	4652      	mov	r2, sl
 8016d8a:	465b      	mov	r3, fp
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	4629      	mov	r1, r5
 8016d90:	f7e9 feba 	bl	8000b08 <__aeabi_dcmpeq>
 8016d94:	4680      	mov	r8, r0
 8016d96:	b318      	cbz	r0, 8016de0 <pow+0x100>
 8016d98:	2301      	movs	r3, #1
 8016d9a:	9302      	str	r3, [sp, #8]
 8016d9c:	4b80      	ldr	r3, [pc, #512]	; (8016fa0 <pow+0x2c0>)
 8016d9e:	9303      	str	r3, [sp, #12]
 8016da0:	9b01      	ldr	r3, [sp, #4]
 8016da2:	930a      	str	r3, [sp, #40]	; 0x28
 8016da4:	9b00      	ldr	r3, [sp, #0]
 8016da6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016daa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016dae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d0d5      	beq.n	8016d62 <pow+0x82>
 8016db6:	4b7b      	ldr	r3, [pc, #492]	; (8016fa4 <pow+0x2c4>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dc0:	b11b      	cbz	r3, 8016dca <pow+0xea>
 8016dc2:	f7ff fa7b 	bl	80162bc <__errno>
 8016dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dc8:	6003      	str	r3, [r0, #0]
 8016dca:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016dce:	eeb0 0a48 	vmov.f32	s0, s16
 8016dd2:	eef0 0a68 	vmov.f32	s1, s17
 8016dd6:	b00d      	add	sp, #52	; 0x34
 8016dd8:	ecbd 8b04 	vpop	{d8-d9}
 8016ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de0:	ec45 4b10 	vmov	d0, r4, r5
 8016de4:	f000 feb3 	bl	8017b4e <finite>
 8016de8:	2800      	cmp	r0, #0
 8016dea:	d0f0      	beq.n	8016dce <pow+0xee>
 8016dec:	4652      	mov	r2, sl
 8016dee:	465b      	mov	r3, fp
 8016df0:	4620      	mov	r0, r4
 8016df2:	4629      	mov	r1, r5
 8016df4:	f7e9 fe92 	bl	8000b1c <__aeabi_dcmplt>
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	d0e8      	beq.n	8016dce <pow+0xee>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	9302      	str	r3, [sp, #8]
 8016e00:	4b67      	ldr	r3, [pc, #412]	; (8016fa0 <pow+0x2c0>)
 8016e02:	9303      	str	r3, [sp, #12]
 8016e04:	f999 3000 	ldrsb.w	r3, [r9]
 8016e08:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016e0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016e10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016e14:	b913      	cbnz	r3, 8016e1c <pow+0x13c>
 8016e16:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e1a:	e7a2      	b.n	8016d62 <pow+0x82>
 8016e1c:	4962      	ldr	r1, [pc, #392]	; (8016fa8 <pow+0x2c8>)
 8016e1e:	2000      	movs	r0, #0
 8016e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	d19c      	bne.n	8016d62 <pow+0x82>
 8016e28:	f7ff fa48 	bl	80162bc <__errno>
 8016e2c:	2321      	movs	r3, #33	; 0x21
 8016e2e:	6003      	str	r3, [r0, #0]
 8016e30:	e7c5      	b.n	8016dbe <pow+0xde>
 8016e32:	eeb0 0a48 	vmov.f32	s0, s16
 8016e36:	eef0 0a68 	vmov.f32	s1, s17
 8016e3a:	f000 fe88 	bl	8017b4e <finite>
 8016e3e:	9000      	str	r0, [sp, #0]
 8016e40:	2800      	cmp	r0, #0
 8016e42:	f040 8081 	bne.w	8016f48 <pow+0x268>
 8016e46:	ec47 6b10 	vmov	d0, r6, r7
 8016e4a:	f000 fe80 	bl	8017b4e <finite>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d07a      	beq.n	8016f48 <pow+0x268>
 8016e52:	ec45 4b10 	vmov	d0, r4, r5
 8016e56:	f000 fe7a 	bl	8017b4e <finite>
 8016e5a:	2800      	cmp	r0, #0
 8016e5c:	d074      	beq.n	8016f48 <pow+0x268>
 8016e5e:	ec53 2b18 	vmov	r2, r3, d8
 8016e62:	ee18 0a10 	vmov	r0, s16
 8016e66:	4619      	mov	r1, r3
 8016e68:	f7e9 fe80 	bl	8000b6c <__aeabi_dcmpun>
 8016e6c:	f999 9000 	ldrsb.w	r9, [r9]
 8016e70:	4b4b      	ldr	r3, [pc, #300]	; (8016fa0 <pow+0x2c0>)
 8016e72:	b1b0      	cbz	r0, 8016ea2 <pow+0x1c2>
 8016e74:	2201      	movs	r2, #1
 8016e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016e7a:	9b00      	ldr	r3, [sp, #0]
 8016e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016e82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016e86:	f1b9 0f00 	cmp.w	r9, #0
 8016e8a:	d0c4      	beq.n	8016e16 <pow+0x136>
 8016e8c:	4652      	mov	r2, sl
 8016e8e:	465b      	mov	r3, fp
 8016e90:	4650      	mov	r0, sl
 8016e92:	4659      	mov	r1, fp
 8016e94:	f7e9 fcfa 	bl	800088c <__aeabi_ddiv>
 8016e98:	f1b9 0f02 	cmp.w	r9, #2
 8016e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ea0:	e7c1      	b.n	8016e26 <pow+0x146>
 8016ea2:	2203      	movs	r2, #3
 8016ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016ea8:	900a      	str	r0, [sp, #40]	; 0x28
 8016eaa:	4629      	mov	r1, r5
 8016eac:	4620      	mov	r0, r4
 8016eae:	2200      	movs	r2, #0
 8016eb0:	4b3e      	ldr	r3, [pc, #248]	; (8016fac <pow+0x2cc>)
 8016eb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016eb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016eba:	f7e9 fbbd 	bl	8000638 <__aeabi_dmul>
 8016ebe:	4604      	mov	r4, r0
 8016ec0:	460d      	mov	r5, r1
 8016ec2:	f1b9 0f00 	cmp.w	r9, #0
 8016ec6:	d124      	bne.n	8016f12 <pow+0x232>
 8016ec8:	4b39      	ldr	r3, [pc, #228]	; (8016fb0 <pow+0x2d0>)
 8016eca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	4652      	mov	r2, sl
 8016ed6:	465b      	mov	r3, fp
 8016ed8:	4639      	mov	r1, r7
 8016eda:	f7e9 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	d056      	beq.n	8016f90 <pow+0x2b0>
 8016ee2:	ec45 4b10 	vmov	d0, r4, r5
 8016ee6:	f000 fe47 	bl	8017b78 <rint>
 8016eea:	4622      	mov	r2, r4
 8016eec:	462b      	mov	r3, r5
 8016eee:	ec51 0b10 	vmov	r0, r1, d0
 8016ef2:	f7e9 fe09 	bl	8000b08 <__aeabi_dcmpeq>
 8016ef6:	b920      	cbnz	r0, 8016f02 <pow+0x222>
 8016ef8:	4b2e      	ldr	r3, [pc, #184]	; (8016fb4 <pow+0x2d4>)
 8016efa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016efe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016f02:	f998 3000 	ldrsb.w	r3, [r8]
 8016f06:	2b02      	cmp	r3, #2
 8016f08:	d142      	bne.n	8016f90 <pow+0x2b0>
 8016f0a:	f7ff f9d7 	bl	80162bc <__errno>
 8016f0e:	2322      	movs	r3, #34	; 0x22
 8016f10:	e78d      	b.n	8016e2e <pow+0x14e>
 8016f12:	4b29      	ldr	r3, [pc, #164]	; (8016fb8 <pow+0x2d8>)
 8016f14:	2200      	movs	r2, #0
 8016f16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016f1a:	4630      	mov	r0, r6
 8016f1c:	4652      	mov	r2, sl
 8016f1e:	465b      	mov	r3, fp
 8016f20:	4639      	mov	r1, r7
 8016f22:	f7e9 fdfb 	bl	8000b1c <__aeabi_dcmplt>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	d0eb      	beq.n	8016f02 <pow+0x222>
 8016f2a:	ec45 4b10 	vmov	d0, r4, r5
 8016f2e:	f000 fe23 	bl	8017b78 <rint>
 8016f32:	4622      	mov	r2, r4
 8016f34:	462b      	mov	r3, r5
 8016f36:	ec51 0b10 	vmov	r0, r1, d0
 8016f3a:	f7e9 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d1df      	bne.n	8016f02 <pow+0x222>
 8016f42:	2200      	movs	r2, #0
 8016f44:	4b18      	ldr	r3, [pc, #96]	; (8016fa8 <pow+0x2c8>)
 8016f46:	e7da      	b.n	8016efe <pow+0x21e>
 8016f48:	2200      	movs	r2, #0
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	ec51 0b18 	vmov	r0, r1, d8
 8016f50:	f7e9 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	f43f af3a 	beq.w	8016dce <pow+0xee>
 8016f5a:	ec47 6b10 	vmov	d0, r6, r7
 8016f5e:	f000 fdf6 	bl	8017b4e <finite>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	f43f af33 	beq.w	8016dce <pow+0xee>
 8016f68:	ec45 4b10 	vmov	d0, r4, r5
 8016f6c:	f000 fdef 	bl	8017b4e <finite>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f43f af2c 	beq.w	8016dce <pow+0xee>
 8016f76:	2304      	movs	r3, #4
 8016f78:	9302      	str	r3, [sp, #8]
 8016f7a:	4b09      	ldr	r3, [pc, #36]	; (8016fa0 <pow+0x2c0>)
 8016f7c:	9303      	str	r3, [sp, #12]
 8016f7e:	2300      	movs	r3, #0
 8016f80:	930a      	str	r3, [sp, #40]	; 0x28
 8016f82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016f86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016f8a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016f8e:	e7b8      	b.n	8016f02 <pow+0x222>
 8016f90:	a802      	add	r0, sp, #8
 8016f92:	f000 fde4 	bl	8017b5e <matherr>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f47f af11 	bne.w	8016dbe <pow+0xde>
 8016f9c:	e7b5      	b.n	8016f0a <pow+0x22a>
 8016f9e:	bf00      	nop
 8016fa0:	080184ef 	.word	0x080184ef
 8016fa4:	3ff00000 	.word	0x3ff00000
 8016fa8:	fff00000 	.word	0xfff00000
 8016fac:	3fe00000 	.word	0x3fe00000
 8016fb0:	47efffff 	.word	0x47efffff
 8016fb4:	c7efffff 	.word	0xc7efffff
 8016fb8:	7ff00000 	.word	0x7ff00000
 8016fbc:	200001f8 	.word	0x200001f8

08016fc0 <__ieee754_pow>:
 8016fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc4:	b091      	sub	sp, #68	; 0x44
 8016fc6:	ed8d 1b00 	vstr	d1, [sp]
 8016fca:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016fce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016fd2:	ea58 0302 	orrs.w	r3, r8, r2
 8016fd6:	ec57 6b10 	vmov	r6, r7, d0
 8016fda:	f000 84be 	beq.w	801795a <__ieee754_pow+0x99a>
 8016fde:	4b7a      	ldr	r3, [pc, #488]	; (80171c8 <__ieee754_pow+0x208>)
 8016fe0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	463d      	mov	r5, r7
 8016fe8:	ee10 aa10 	vmov	sl, s0
 8016fec:	dc09      	bgt.n	8017002 <__ieee754_pow+0x42>
 8016fee:	d103      	bne.n	8016ff8 <__ieee754_pow+0x38>
 8016ff0:	b93e      	cbnz	r6, 8017002 <__ieee754_pow+0x42>
 8016ff2:	45a0      	cmp	r8, r4
 8016ff4:	dc0d      	bgt.n	8017012 <__ieee754_pow+0x52>
 8016ff6:	e001      	b.n	8016ffc <__ieee754_pow+0x3c>
 8016ff8:	4598      	cmp	r8, r3
 8016ffa:	dc02      	bgt.n	8017002 <__ieee754_pow+0x42>
 8016ffc:	4598      	cmp	r8, r3
 8016ffe:	d10e      	bne.n	801701e <__ieee754_pow+0x5e>
 8017000:	b16a      	cbz	r2, 801701e <__ieee754_pow+0x5e>
 8017002:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017006:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801700a:	ea54 030a 	orrs.w	r3, r4, sl
 801700e:	f000 84a4 	beq.w	801795a <__ieee754_pow+0x99a>
 8017012:	486e      	ldr	r0, [pc, #440]	; (80171cc <__ieee754_pow+0x20c>)
 8017014:	b011      	add	sp, #68	; 0x44
 8017016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801701a:	f000 bda5 	b.w	8017b68 <nan>
 801701e:	2d00      	cmp	r5, #0
 8017020:	da53      	bge.n	80170ca <__ieee754_pow+0x10a>
 8017022:	4b6b      	ldr	r3, [pc, #428]	; (80171d0 <__ieee754_pow+0x210>)
 8017024:	4598      	cmp	r8, r3
 8017026:	dc4d      	bgt.n	80170c4 <__ieee754_pow+0x104>
 8017028:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801702c:	4598      	cmp	r8, r3
 801702e:	dd4c      	ble.n	80170ca <__ieee754_pow+0x10a>
 8017030:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017034:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017038:	2b14      	cmp	r3, #20
 801703a:	dd26      	ble.n	801708a <__ieee754_pow+0xca>
 801703c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017040:	fa22 f103 	lsr.w	r1, r2, r3
 8017044:	fa01 f303 	lsl.w	r3, r1, r3
 8017048:	4293      	cmp	r3, r2
 801704a:	d13e      	bne.n	80170ca <__ieee754_pow+0x10a>
 801704c:	f001 0101 	and.w	r1, r1, #1
 8017050:	f1c1 0b02 	rsb	fp, r1, #2
 8017054:	2a00      	cmp	r2, #0
 8017056:	d15b      	bne.n	8017110 <__ieee754_pow+0x150>
 8017058:	4b5b      	ldr	r3, [pc, #364]	; (80171c8 <__ieee754_pow+0x208>)
 801705a:	4598      	cmp	r8, r3
 801705c:	d124      	bne.n	80170a8 <__ieee754_pow+0xe8>
 801705e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017062:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017066:	ea53 030a 	orrs.w	r3, r3, sl
 801706a:	f000 8476 	beq.w	801795a <__ieee754_pow+0x99a>
 801706e:	4b59      	ldr	r3, [pc, #356]	; (80171d4 <__ieee754_pow+0x214>)
 8017070:	429c      	cmp	r4, r3
 8017072:	dd2d      	ble.n	80170d0 <__ieee754_pow+0x110>
 8017074:	f1b9 0f00 	cmp.w	r9, #0
 8017078:	f280 8473 	bge.w	8017962 <__ieee754_pow+0x9a2>
 801707c:	2000      	movs	r0, #0
 801707e:	2100      	movs	r1, #0
 8017080:	ec41 0b10 	vmov	d0, r0, r1
 8017084:	b011      	add	sp, #68	; 0x44
 8017086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708a:	2a00      	cmp	r2, #0
 801708c:	d13e      	bne.n	801710c <__ieee754_pow+0x14c>
 801708e:	f1c3 0314 	rsb	r3, r3, #20
 8017092:	fa48 f103 	asr.w	r1, r8, r3
 8017096:	fa01 f303 	lsl.w	r3, r1, r3
 801709a:	4543      	cmp	r3, r8
 801709c:	f040 8469 	bne.w	8017972 <__ieee754_pow+0x9b2>
 80170a0:	f001 0101 	and.w	r1, r1, #1
 80170a4:	f1c1 0b02 	rsb	fp, r1, #2
 80170a8:	4b4b      	ldr	r3, [pc, #300]	; (80171d8 <__ieee754_pow+0x218>)
 80170aa:	4598      	cmp	r8, r3
 80170ac:	d118      	bne.n	80170e0 <__ieee754_pow+0x120>
 80170ae:	f1b9 0f00 	cmp.w	r9, #0
 80170b2:	f280 845a 	bge.w	801796a <__ieee754_pow+0x9aa>
 80170b6:	4948      	ldr	r1, [pc, #288]	; (80171d8 <__ieee754_pow+0x218>)
 80170b8:	4632      	mov	r2, r6
 80170ba:	463b      	mov	r3, r7
 80170bc:	2000      	movs	r0, #0
 80170be:	f7e9 fbe5 	bl	800088c <__aeabi_ddiv>
 80170c2:	e7dd      	b.n	8017080 <__ieee754_pow+0xc0>
 80170c4:	f04f 0b02 	mov.w	fp, #2
 80170c8:	e7c4      	b.n	8017054 <__ieee754_pow+0x94>
 80170ca:	f04f 0b00 	mov.w	fp, #0
 80170ce:	e7c1      	b.n	8017054 <__ieee754_pow+0x94>
 80170d0:	f1b9 0f00 	cmp.w	r9, #0
 80170d4:	dad2      	bge.n	801707c <__ieee754_pow+0xbc>
 80170d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80170da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80170de:	e7cf      	b.n	8017080 <__ieee754_pow+0xc0>
 80170e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80170e4:	d106      	bne.n	80170f4 <__ieee754_pow+0x134>
 80170e6:	4632      	mov	r2, r6
 80170e8:	463b      	mov	r3, r7
 80170ea:	4610      	mov	r0, r2
 80170ec:	4619      	mov	r1, r3
 80170ee:	f7e9 faa3 	bl	8000638 <__aeabi_dmul>
 80170f2:	e7c5      	b.n	8017080 <__ieee754_pow+0xc0>
 80170f4:	4b39      	ldr	r3, [pc, #228]	; (80171dc <__ieee754_pow+0x21c>)
 80170f6:	4599      	cmp	r9, r3
 80170f8:	d10a      	bne.n	8017110 <__ieee754_pow+0x150>
 80170fa:	2d00      	cmp	r5, #0
 80170fc:	db08      	blt.n	8017110 <__ieee754_pow+0x150>
 80170fe:	ec47 6b10 	vmov	d0, r6, r7
 8017102:	b011      	add	sp, #68	; 0x44
 8017104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017108:	f000 bc68 	b.w	80179dc <__ieee754_sqrt>
 801710c:	f04f 0b00 	mov.w	fp, #0
 8017110:	ec47 6b10 	vmov	d0, r6, r7
 8017114:	f000 fd12 	bl	8017b3c <fabs>
 8017118:	ec51 0b10 	vmov	r0, r1, d0
 801711c:	f1ba 0f00 	cmp.w	sl, #0
 8017120:	d127      	bne.n	8017172 <__ieee754_pow+0x1b2>
 8017122:	b124      	cbz	r4, 801712e <__ieee754_pow+0x16e>
 8017124:	4b2c      	ldr	r3, [pc, #176]	; (80171d8 <__ieee754_pow+0x218>)
 8017126:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801712a:	429a      	cmp	r2, r3
 801712c:	d121      	bne.n	8017172 <__ieee754_pow+0x1b2>
 801712e:	f1b9 0f00 	cmp.w	r9, #0
 8017132:	da05      	bge.n	8017140 <__ieee754_pow+0x180>
 8017134:	4602      	mov	r2, r0
 8017136:	460b      	mov	r3, r1
 8017138:	2000      	movs	r0, #0
 801713a:	4927      	ldr	r1, [pc, #156]	; (80171d8 <__ieee754_pow+0x218>)
 801713c:	f7e9 fba6 	bl	800088c <__aeabi_ddiv>
 8017140:	2d00      	cmp	r5, #0
 8017142:	da9d      	bge.n	8017080 <__ieee754_pow+0xc0>
 8017144:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017148:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801714c:	ea54 030b 	orrs.w	r3, r4, fp
 8017150:	d108      	bne.n	8017164 <__ieee754_pow+0x1a4>
 8017152:	4602      	mov	r2, r0
 8017154:	460b      	mov	r3, r1
 8017156:	4610      	mov	r0, r2
 8017158:	4619      	mov	r1, r3
 801715a:	f7e9 f8b5 	bl	80002c8 <__aeabi_dsub>
 801715e:	4602      	mov	r2, r0
 8017160:	460b      	mov	r3, r1
 8017162:	e7ac      	b.n	80170be <__ieee754_pow+0xfe>
 8017164:	f1bb 0f01 	cmp.w	fp, #1
 8017168:	d18a      	bne.n	8017080 <__ieee754_pow+0xc0>
 801716a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801716e:	4619      	mov	r1, r3
 8017170:	e786      	b.n	8017080 <__ieee754_pow+0xc0>
 8017172:	0fed      	lsrs	r5, r5, #31
 8017174:	1e6b      	subs	r3, r5, #1
 8017176:	930d      	str	r3, [sp, #52]	; 0x34
 8017178:	ea5b 0303 	orrs.w	r3, fp, r3
 801717c:	d102      	bne.n	8017184 <__ieee754_pow+0x1c4>
 801717e:	4632      	mov	r2, r6
 8017180:	463b      	mov	r3, r7
 8017182:	e7e8      	b.n	8017156 <__ieee754_pow+0x196>
 8017184:	4b16      	ldr	r3, [pc, #88]	; (80171e0 <__ieee754_pow+0x220>)
 8017186:	4598      	cmp	r8, r3
 8017188:	f340 80fe 	ble.w	8017388 <__ieee754_pow+0x3c8>
 801718c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017190:	4598      	cmp	r8, r3
 8017192:	dd0a      	ble.n	80171aa <__ieee754_pow+0x1ea>
 8017194:	4b0f      	ldr	r3, [pc, #60]	; (80171d4 <__ieee754_pow+0x214>)
 8017196:	429c      	cmp	r4, r3
 8017198:	dc0d      	bgt.n	80171b6 <__ieee754_pow+0x1f6>
 801719a:	f1b9 0f00 	cmp.w	r9, #0
 801719e:	f6bf af6d 	bge.w	801707c <__ieee754_pow+0xbc>
 80171a2:	a307      	add	r3, pc, #28	; (adr r3, 80171c0 <__ieee754_pow+0x200>)
 80171a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a8:	e79f      	b.n	80170ea <__ieee754_pow+0x12a>
 80171aa:	4b0e      	ldr	r3, [pc, #56]	; (80171e4 <__ieee754_pow+0x224>)
 80171ac:	429c      	cmp	r4, r3
 80171ae:	ddf4      	ble.n	801719a <__ieee754_pow+0x1da>
 80171b0:	4b09      	ldr	r3, [pc, #36]	; (80171d8 <__ieee754_pow+0x218>)
 80171b2:	429c      	cmp	r4, r3
 80171b4:	dd18      	ble.n	80171e8 <__ieee754_pow+0x228>
 80171b6:	f1b9 0f00 	cmp.w	r9, #0
 80171ba:	dcf2      	bgt.n	80171a2 <__ieee754_pow+0x1e2>
 80171bc:	e75e      	b.n	801707c <__ieee754_pow+0xbc>
 80171be:	bf00      	nop
 80171c0:	8800759c 	.word	0x8800759c
 80171c4:	7e37e43c 	.word	0x7e37e43c
 80171c8:	7ff00000 	.word	0x7ff00000
 80171cc:	080184c1 	.word	0x080184c1
 80171d0:	433fffff 	.word	0x433fffff
 80171d4:	3fefffff 	.word	0x3fefffff
 80171d8:	3ff00000 	.word	0x3ff00000
 80171dc:	3fe00000 	.word	0x3fe00000
 80171e0:	41e00000 	.word	0x41e00000
 80171e4:	3feffffe 	.word	0x3feffffe
 80171e8:	2200      	movs	r2, #0
 80171ea:	4b63      	ldr	r3, [pc, #396]	; (8017378 <__ieee754_pow+0x3b8>)
 80171ec:	f7e9 f86c 	bl	80002c8 <__aeabi_dsub>
 80171f0:	a355      	add	r3, pc, #340	; (adr r3, 8017348 <__ieee754_pow+0x388>)
 80171f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f6:	4604      	mov	r4, r0
 80171f8:	460d      	mov	r5, r1
 80171fa:	f7e9 fa1d 	bl	8000638 <__aeabi_dmul>
 80171fe:	a354      	add	r3, pc, #336	; (adr r3, 8017350 <__ieee754_pow+0x390>)
 8017200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017204:	4606      	mov	r6, r0
 8017206:	460f      	mov	r7, r1
 8017208:	4620      	mov	r0, r4
 801720a:	4629      	mov	r1, r5
 801720c:	f7e9 fa14 	bl	8000638 <__aeabi_dmul>
 8017210:	2200      	movs	r2, #0
 8017212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017216:	4b59      	ldr	r3, [pc, #356]	; (801737c <__ieee754_pow+0x3bc>)
 8017218:	4620      	mov	r0, r4
 801721a:	4629      	mov	r1, r5
 801721c:	f7e9 fa0c 	bl	8000638 <__aeabi_dmul>
 8017220:	4602      	mov	r2, r0
 8017222:	460b      	mov	r3, r1
 8017224:	a14c      	add	r1, pc, #304	; (adr r1, 8017358 <__ieee754_pow+0x398>)
 8017226:	e9d1 0100 	ldrd	r0, r1, [r1]
 801722a:	f7e9 f84d 	bl	80002c8 <__aeabi_dsub>
 801722e:	4622      	mov	r2, r4
 8017230:	462b      	mov	r3, r5
 8017232:	f7e9 fa01 	bl	8000638 <__aeabi_dmul>
 8017236:	4602      	mov	r2, r0
 8017238:	460b      	mov	r3, r1
 801723a:	2000      	movs	r0, #0
 801723c:	4950      	ldr	r1, [pc, #320]	; (8017380 <__ieee754_pow+0x3c0>)
 801723e:	f7e9 f843 	bl	80002c8 <__aeabi_dsub>
 8017242:	4622      	mov	r2, r4
 8017244:	462b      	mov	r3, r5
 8017246:	4680      	mov	r8, r0
 8017248:	4689      	mov	r9, r1
 801724a:	4620      	mov	r0, r4
 801724c:	4629      	mov	r1, r5
 801724e:	f7e9 f9f3 	bl	8000638 <__aeabi_dmul>
 8017252:	4602      	mov	r2, r0
 8017254:	460b      	mov	r3, r1
 8017256:	4640      	mov	r0, r8
 8017258:	4649      	mov	r1, r9
 801725a:	f7e9 f9ed 	bl	8000638 <__aeabi_dmul>
 801725e:	a340      	add	r3, pc, #256	; (adr r3, 8017360 <__ieee754_pow+0x3a0>)
 8017260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017264:	f7e9 f9e8 	bl	8000638 <__aeabi_dmul>
 8017268:	4602      	mov	r2, r0
 801726a:	460b      	mov	r3, r1
 801726c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017270:	f7e9 f82a 	bl	80002c8 <__aeabi_dsub>
 8017274:	4602      	mov	r2, r0
 8017276:	460b      	mov	r3, r1
 8017278:	4604      	mov	r4, r0
 801727a:	460d      	mov	r5, r1
 801727c:	4630      	mov	r0, r6
 801727e:	4639      	mov	r1, r7
 8017280:	f7e9 f824 	bl	80002cc <__adddf3>
 8017284:	2000      	movs	r0, #0
 8017286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801728a:	4632      	mov	r2, r6
 801728c:	463b      	mov	r3, r7
 801728e:	f7e9 f81b 	bl	80002c8 <__aeabi_dsub>
 8017292:	4602      	mov	r2, r0
 8017294:	460b      	mov	r3, r1
 8017296:	4620      	mov	r0, r4
 8017298:	4629      	mov	r1, r5
 801729a:	f7e9 f815 	bl	80002c8 <__aeabi_dsub>
 801729e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80172a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80172a4:	4313      	orrs	r3, r2
 80172a6:	4606      	mov	r6, r0
 80172a8:	460f      	mov	r7, r1
 80172aa:	f040 81eb 	bne.w	8017684 <__ieee754_pow+0x6c4>
 80172ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017368 <__ieee754_pow+0x3a8>
 80172b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80172b6:	2400      	movs	r4, #0
 80172b8:	4622      	mov	r2, r4
 80172ba:	462b      	mov	r3, r5
 80172bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80172c4:	f7e9 f800 	bl	80002c8 <__aeabi_dsub>
 80172c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172cc:	f7e9 f9b4 	bl	8000638 <__aeabi_dmul>
 80172d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172d4:	4680      	mov	r8, r0
 80172d6:	4689      	mov	r9, r1
 80172d8:	4630      	mov	r0, r6
 80172da:	4639      	mov	r1, r7
 80172dc:	f7e9 f9ac 	bl	8000638 <__aeabi_dmul>
 80172e0:	4602      	mov	r2, r0
 80172e2:	460b      	mov	r3, r1
 80172e4:	4640      	mov	r0, r8
 80172e6:	4649      	mov	r1, r9
 80172e8:	f7e8 fff0 	bl	80002cc <__adddf3>
 80172ec:	4622      	mov	r2, r4
 80172ee:	462b      	mov	r3, r5
 80172f0:	4680      	mov	r8, r0
 80172f2:	4689      	mov	r9, r1
 80172f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80172f8:	f7e9 f99e 	bl	8000638 <__aeabi_dmul>
 80172fc:	460b      	mov	r3, r1
 80172fe:	4604      	mov	r4, r0
 8017300:	460d      	mov	r5, r1
 8017302:	4602      	mov	r2, r0
 8017304:	4649      	mov	r1, r9
 8017306:	4640      	mov	r0, r8
 8017308:	e9cd 4500 	strd	r4, r5, [sp]
 801730c:	f7e8 ffde 	bl	80002cc <__adddf3>
 8017310:	4b1c      	ldr	r3, [pc, #112]	; (8017384 <__ieee754_pow+0x3c4>)
 8017312:	4299      	cmp	r1, r3
 8017314:	4606      	mov	r6, r0
 8017316:	460f      	mov	r7, r1
 8017318:	468b      	mov	fp, r1
 801731a:	f340 82f7 	ble.w	801790c <__ieee754_pow+0x94c>
 801731e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017322:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017326:	4303      	orrs	r3, r0
 8017328:	f000 81ea 	beq.w	8017700 <__ieee754_pow+0x740>
 801732c:	a310      	add	r3, pc, #64	; (adr r3, 8017370 <__ieee754_pow+0x3b0>)
 801732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017336:	f7e9 f97f 	bl	8000638 <__aeabi_dmul>
 801733a:	a30d      	add	r3, pc, #52	; (adr r3, 8017370 <__ieee754_pow+0x3b0>)
 801733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017340:	e6d5      	b.n	80170ee <__ieee754_pow+0x12e>
 8017342:	bf00      	nop
 8017344:	f3af 8000 	nop.w
 8017348:	60000000 	.word	0x60000000
 801734c:	3ff71547 	.word	0x3ff71547
 8017350:	f85ddf44 	.word	0xf85ddf44
 8017354:	3e54ae0b 	.word	0x3e54ae0b
 8017358:	55555555 	.word	0x55555555
 801735c:	3fd55555 	.word	0x3fd55555
 8017360:	652b82fe 	.word	0x652b82fe
 8017364:	3ff71547 	.word	0x3ff71547
 8017368:	00000000 	.word	0x00000000
 801736c:	bff00000 	.word	0xbff00000
 8017370:	8800759c 	.word	0x8800759c
 8017374:	7e37e43c 	.word	0x7e37e43c
 8017378:	3ff00000 	.word	0x3ff00000
 801737c:	3fd00000 	.word	0x3fd00000
 8017380:	3fe00000 	.word	0x3fe00000
 8017384:	408fffff 	.word	0x408fffff
 8017388:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801738c:	f04f 0200 	mov.w	r2, #0
 8017390:	da05      	bge.n	801739e <__ieee754_pow+0x3de>
 8017392:	4bd3      	ldr	r3, [pc, #844]	; (80176e0 <__ieee754_pow+0x720>)
 8017394:	f7e9 f950 	bl	8000638 <__aeabi_dmul>
 8017398:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801739c:	460c      	mov	r4, r1
 801739e:	1523      	asrs	r3, r4, #20
 80173a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80173a4:	4413      	add	r3, r2
 80173a6:	9309      	str	r3, [sp, #36]	; 0x24
 80173a8:	4bce      	ldr	r3, [pc, #824]	; (80176e4 <__ieee754_pow+0x724>)
 80173aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80173ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80173b2:	429c      	cmp	r4, r3
 80173b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80173b8:	dd08      	ble.n	80173cc <__ieee754_pow+0x40c>
 80173ba:	4bcb      	ldr	r3, [pc, #812]	; (80176e8 <__ieee754_pow+0x728>)
 80173bc:	429c      	cmp	r4, r3
 80173be:	f340 815e 	ble.w	801767e <__ieee754_pow+0x6be>
 80173c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173c4:	3301      	adds	r3, #1
 80173c6:	9309      	str	r3, [sp, #36]	; 0x24
 80173c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80173cc:	f04f 0a00 	mov.w	sl, #0
 80173d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80173d4:	930c      	str	r3, [sp, #48]	; 0x30
 80173d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173d8:	4bc4      	ldr	r3, [pc, #784]	; (80176ec <__ieee754_pow+0x72c>)
 80173da:	4413      	add	r3, r2
 80173dc:	ed93 7b00 	vldr	d7, [r3]
 80173e0:	4629      	mov	r1, r5
 80173e2:	ec53 2b17 	vmov	r2, r3, d7
 80173e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80173ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173ee:	f7e8 ff6b 	bl	80002c8 <__aeabi_dsub>
 80173f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173f6:	4606      	mov	r6, r0
 80173f8:	460f      	mov	r7, r1
 80173fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173fe:	f7e8 ff65 	bl	80002cc <__adddf3>
 8017402:	4602      	mov	r2, r0
 8017404:	460b      	mov	r3, r1
 8017406:	2000      	movs	r0, #0
 8017408:	49b9      	ldr	r1, [pc, #740]	; (80176f0 <__ieee754_pow+0x730>)
 801740a:	f7e9 fa3f 	bl	800088c <__aeabi_ddiv>
 801740e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017412:	4602      	mov	r2, r0
 8017414:	460b      	mov	r3, r1
 8017416:	4630      	mov	r0, r6
 8017418:	4639      	mov	r1, r7
 801741a:	f7e9 f90d 	bl	8000638 <__aeabi_dmul>
 801741e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017422:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017426:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801742a:	2300      	movs	r3, #0
 801742c:	9302      	str	r3, [sp, #8]
 801742e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017432:	106d      	asrs	r5, r5, #1
 8017434:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017438:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801743c:	2200      	movs	r2, #0
 801743e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017442:	4640      	mov	r0, r8
 8017444:	4649      	mov	r1, r9
 8017446:	4614      	mov	r4, r2
 8017448:	461d      	mov	r5, r3
 801744a:	f7e9 f8f5 	bl	8000638 <__aeabi_dmul>
 801744e:	4602      	mov	r2, r0
 8017450:	460b      	mov	r3, r1
 8017452:	4630      	mov	r0, r6
 8017454:	4639      	mov	r1, r7
 8017456:	f7e8 ff37 	bl	80002c8 <__aeabi_dsub>
 801745a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801745e:	4606      	mov	r6, r0
 8017460:	460f      	mov	r7, r1
 8017462:	4620      	mov	r0, r4
 8017464:	4629      	mov	r1, r5
 8017466:	f7e8 ff2f 	bl	80002c8 <__aeabi_dsub>
 801746a:	4602      	mov	r2, r0
 801746c:	460b      	mov	r3, r1
 801746e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017472:	f7e8 ff29 	bl	80002c8 <__aeabi_dsub>
 8017476:	4642      	mov	r2, r8
 8017478:	464b      	mov	r3, r9
 801747a:	f7e9 f8dd 	bl	8000638 <__aeabi_dmul>
 801747e:	4602      	mov	r2, r0
 8017480:	460b      	mov	r3, r1
 8017482:	4630      	mov	r0, r6
 8017484:	4639      	mov	r1, r7
 8017486:	f7e8 ff1f 	bl	80002c8 <__aeabi_dsub>
 801748a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801748e:	f7e9 f8d3 	bl	8000638 <__aeabi_dmul>
 8017492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017496:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801749a:	4610      	mov	r0, r2
 801749c:	4619      	mov	r1, r3
 801749e:	f7e9 f8cb 	bl	8000638 <__aeabi_dmul>
 80174a2:	a37b      	add	r3, pc, #492	; (adr r3, 8017690 <__ieee754_pow+0x6d0>)
 80174a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a8:	4604      	mov	r4, r0
 80174aa:	460d      	mov	r5, r1
 80174ac:	f7e9 f8c4 	bl	8000638 <__aeabi_dmul>
 80174b0:	a379      	add	r3, pc, #484	; (adr r3, 8017698 <__ieee754_pow+0x6d8>)
 80174b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174b6:	f7e8 ff09 	bl	80002cc <__adddf3>
 80174ba:	4622      	mov	r2, r4
 80174bc:	462b      	mov	r3, r5
 80174be:	f7e9 f8bb 	bl	8000638 <__aeabi_dmul>
 80174c2:	a377      	add	r3, pc, #476	; (adr r3, 80176a0 <__ieee754_pow+0x6e0>)
 80174c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c8:	f7e8 ff00 	bl	80002cc <__adddf3>
 80174cc:	4622      	mov	r2, r4
 80174ce:	462b      	mov	r3, r5
 80174d0:	f7e9 f8b2 	bl	8000638 <__aeabi_dmul>
 80174d4:	a374      	add	r3, pc, #464	; (adr r3, 80176a8 <__ieee754_pow+0x6e8>)
 80174d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174da:	f7e8 fef7 	bl	80002cc <__adddf3>
 80174de:	4622      	mov	r2, r4
 80174e0:	462b      	mov	r3, r5
 80174e2:	f7e9 f8a9 	bl	8000638 <__aeabi_dmul>
 80174e6:	a372      	add	r3, pc, #456	; (adr r3, 80176b0 <__ieee754_pow+0x6f0>)
 80174e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ec:	f7e8 feee 	bl	80002cc <__adddf3>
 80174f0:	4622      	mov	r2, r4
 80174f2:	462b      	mov	r3, r5
 80174f4:	f7e9 f8a0 	bl	8000638 <__aeabi_dmul>
 80174f8:	a36f      	add	r3, pc, #444	; (adr r3, 80176b8 <__ieee754_pow+0x6f8>)
 80174fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fe:	f7e8 fee5 	bl	80002cc <__adddf3>
 8017502:	4622      	mov	r2, r4
 8017504:	4606      	mov	r6, r0
 8017506:	460f      	mov	r7, r1
 8017508:	462b      	mov	r3, r5
 801750a:	4620      	mov	r0, r4
 801750c:	4629      	mov	r1, r5
 801750e:	f7e9 f893 	bl	8000638 <__aeabi_dmul>
 8017512:	4602      	mov	r2, r0
 8017514:	460b      	mov	r3, r1
 8017516:	4630      	mov	r0, r6
 8017518:	4639      	mov	r1, r7
 801751a:	f7e9 f88d 	bl	8000638 <__aeabi_dmul>
 801751e:	4642      	mov	r2, r8
 8017520:	4604      	mov	r4, r0
 8017522:	460d      	mov	r5, r1
 8017524:	464b      	mov	r3, r9
 8017526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801752a:	f7e8 fecf 	bl	80002cc <__adddf3>
 801752e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017532:	f7e9 f881 	bl	8000638 <__aeabi_dmul>
 8017536:	4622      	mov	r2, r4
 8017538:	462b      	mov	r3, r5
 801753a:	f7e8 fec7 	bl	80002cc <__adddf3>
 801753e:	4642      	mov	r2, r8
 8017540:	4606      	mov	r6, r0
 8017542:	460f      	mov	r7, r1
 8017544:	464b      	mov	r3, r9
 8017546:	4640      	mov	r0, r8
 8017548:	4649      	mov	r1, r9
 801754a:	f7e9 f875 	bl	8000638 <__aeabi_dmul>
 801754e:	2200      	movs	r2, #0
 8017550:	4b68      	ldr	r3, [pc, #416]	; (80176f4 <__ieee754_pow+0x734>)
 8017552:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017556:	f7e8 feb9 	bl	80002cc <__adddf3>
 801755a:	4632      	mov	r2, r6
 801755c:	463b      	mov	r3, r7
 801755e:	f7e8 feb5 	bl	80002cc <__adddf3>
 8017562:	9802      	ldr	r0, [sp, #8]
 8017564:	460d      	mov	r5, r1
 8017566:	4604      	mov	r4, r0
 8017568:	4602      	mov	r2, r0
 801756a:	460b      	mov	r3, r1
 801756c:	4640      	mov	r0, r8
 801756e:	4649      	mov	r1, r9
 8017570:	f7e9 f862 	bl	8000638 <__aeabi_dmul>
 8017574:	2200      	movs	r2, #0
 8017576:	4680      	mov	r8, r0
 8017578:	4689      	mov	r9, r1
 801757a:	4b5e      	ldr	r3, [pc, #376]	; (80176f4 <__ieee754_pow+0x734>)
 801757c:	4620      	mov	r0, r4
 801757e:	4629      	mov	r1, r5
 8017580:	f7e8 fea2 	bl	80002c8 <__aeabi_dsub>
 8017584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017588:	f7e8 fe9e 	bl	80002c8 <__aeabi_dsub>
 801758c:	4602      	mov	r2, r0
 801758e:	460b      	mov	r3, r1
 8017590:	4630      	mov	r0, r6
 8017592:	4639      	mov	r1, r7
 8017594:	f7e8 fe98 	bl	80002c8 <__aeabi_dsub>
 8017598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801759c:	f7e9 f84c 	bl	8000638 <__aeabi_dmul>
 80175a0:	4622      	mov	r2, r4
 80175a2:	4606      	mov	r6, r0
 80175a4:	460f      	mov	r7, r1
 80175a6:	462b      	mov	r3, r5
 80175a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80175ac:	f7e9 f844 	bl	8000638 <__aeabi_dmul>
 80175b0:	4602      	mov	r2, r0
 80175b2:	460b      	mov	r3, r1
 80175b4:	4630      	mov	r0, r6
 80175b6:	4639      	mov	r1, r7
 80175b8:	f7e8 fe88 	bl	80002cc <__adddf3>
 80175bc:	4606      	mov	r6, r0
 80175be:	460f      	mov	r7, r1
 80175c0:	4602      	mov	r2, r0
 80175c2:	460b      	mov	r3, r1
 80175c4:	4640      	mov	r0, r8
 80175c6:	4649      	mov	r1, r9
 80175c8:	f7e8 fe80 	bl	80002cc <__adddf3>
 80175cc:	9802      	ldr	r0, [sp, #8]
 80175ce:	a33c      	add	r3, pc, #240	; (adr r3, 80176c0 <__ieee754_pow+0x700>)
 80175d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d4:	4604      	mov	r4, r0
 80175d6:	460d      	mov	r5, r1
 80175d8:	f7e9 f82e 	bl	8000638 <__aeabi_dmul>
 80175dc:	4642      	mov	r2, r8
 80175de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80175e2:	464b      	mov	r3, r9
 80175e4:	4620      	mov	r0, r4
 80175e6:	4629      	mov	r1, r5
 80175e8:	f7e8 fe6e 	bl	80002c8 <__aeabi_dsub>
 80175ec:	4602      	mov	r2, r0
 80175ee:	460b      	mov	r3, r1
 80175f0:	4630      	mov	r0, r6
 80175f2:	4639      	mov	r1, r7
 80175f4:	f7e8 fe68 	bl	80002c8 <__aeabi_dsub>
 80175f8:	a333      	add	r3, pc, #204	; (adr r3, 80176c8 <__ieee754_pow+0x708>)
 80175fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fe:	f7e9 f81b 	bl	8000638 <__aeabi_dmul>
 8017602:	a333      	add	r3, pc, #204	; (adr r3, 80176d0 <__ieee754_pow+0x710>)
 8017604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017608:	4606      	mov	r6, r0
 801760a:	460f      	mov	r7, r1
 801760c:	4620      	mov	r0, r4
 801760e:	4629      	mov	r1, r5
 8017610:	f7e9 f812 	bl	8000638 <__aeabi_dmul>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	4630      	mov	r0, r6
 801761a:	4639      	mov	r1, r7
 801761c:	f7e8 fe56 	bl	80002cc <__adddf3>
 8017620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017622:	4b35      	ldr	r3, [pc, #212]	; (80176f8 <__ieee754_pow+0x738>)
 8017624:	4413      	add	r3, r2
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	f7e8 fe4f 	bl	80002cc <__adddf3>
 801762e:	4604      	mov	r4, r0
 8017630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017632:	460d      	mov	r5, r1
 8017634:	f7e8 ff96 	bl	8000564 <__aeabi_i2d>
 8017638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801763a:	4b30      	ldr	r3, [pc, #192]	; (80176fc <__ieee754_pow+0x73c>)
 801763c:	4413      	add	r3, r2
 801763e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017642:	4606      	mov	r6, r0
 8017644:	460f      	mov	r7, r1
 8017646:	4622      	mov	r2, r4
 8017648:	462b      	mov	r3, r5
 801764a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801764e:	f7e8 fe3d 	bl	80002cc <__adddf3>
 8017652:	4642      	mov	r2, r8
 8017654:	464b      	mov	r3, r9
 8017656:	f7e8 fe39 	bl	80002cc <__adddf3>
 801765a:	4632      	mov	r2, r6
 801765c:	463b      	mov	r3, r7
 801765e:	f7e8 fe35 	bl	80002cc <__adddf3>
 8017662:	9802      	ldr	r0, [sp, #8]
 8017664:	4632      	mov	r2, r6
 8017666:	463b      	mov	r3, r7
 8017668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801766c:	f7e8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8017670:	4642      	mov	r2, r8
 8017672:	464b      	mov	r3, r9
 8017674:	f7e8 fe28 	bl	80002c8 <__aeabi_dsub>
 8017678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801767c:	e607      	b.n	801728e <__ieee754_pow+0x2ce>
 801767e:	f04f 0a01 	mov.w	sl, #1
 8017682:	e6a5      	b.n	80173d0 <__ieee754_pow+0x410>
 8017684:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80176d8 <__ieee754_pow+0x718>
 8017688:	e613      	b.n	80172b2 <__ieee754_pow+0x2f2>
 801768a:	bf00      	nop
 801768c:	f3af 8000 	nop.w
 8017690:	4a454eef 	.word	0x4a454eef
 8017694:	3fca7e28 	.word	0x3fca7e28
 8017698:	93c9db65 	.word	0x93c9db65
 801769c:	3fcd864a 	.word	0x3fcd864a
 80176a0:	a91d4101 	.word	0xa91d4101
 80176a4:	3fd17460 	.word	0x3fd17460
 80176a8:	518f264d 	.word	0x518f264d
 80176ac:	3fd55555 	.word	0x3fd55555
 80176b0:	db6fabff 	.word	0xdb6fabff
 80176b4:	3fdb6db6 	.word	0x3fdb6db6
 80176b8:	33333303 	.word	0x33333303
 80176bc:	3fe33333 	.word	0x3fe33333
 80176c0:	e0000000 	.word	0xe0000000
 80176c4:	3feec709 	.word	0x3feec709
 80176c8:	dc3a03fd 	.word	0xdc3a03fd
 80176cc:	3feec709 	.word	0x3feec709
 80176d0:	145b01f5 	.word	0x145b01f5
 80176d4:	be3e2fe0 	.word	0xbe3e2fe0
 80176d8:	00000000 	.word	0x00000000
 80176dc:	3ff00000 	.word	0x3ff00000
 80176e0:	43400000 	.word	0x43400000
 80176e4:	0003988e 	.word	0x0003988e
 80176e8:	000bb679 	.word	0x000bb679
 80176ec:	080184f8 	.word	0x080184f8
 80176f0:	3ff00000 	.word	0x3ff00000
 80176f4:	40080000 	.word	0x40080000
 80176f8:	08018518 	.word	0x08018518
 80176fc:	08018508 	.word	0x08018508
 8017700:	a3b4      	add	r3, pc, #720	; (adr r3, 80179d4 <__ieee754_pow+0xa14>)
 8017702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017706:	4640      	mov	r0, r8
 8017708:	4649      	mov	r1, r9
 801770a:	f7e8 fddf 	bl	80002cc <__adddf3>
 801770e:	4622      	mov	r2, r4
 8017710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017714:	462b      	mov	r3, r5
 8017716:	4630      	mov	r0, r6
 8017718:	4639      	mov	r1, r7
 801771a:	f7e8 fdd5 	bl	80002c8 <__aeabi_dsub>
 801771e:	4602      	mov	r2, r0
 8017720:	460b      	mov	r3, r1
 8017722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017726:	f7e9 fa17 	bl	8000b58 <__aeabi_dcmpgt>
 801772a:	2800      	cmp	r0, #0
 801772c:	f47f adfe 	bne.w	801732c <__ieee754_pow+0x36c>
 8017730:	4aa3      	ldr	r2, [pc, #652]	; (80179c0 <__ieee754_pow+0xa00>)
 8017732:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017736:	4293      	cmp	r3, r2
 8017738:	f340 810a 	ble.w	8017950 <__ieee754_pow+0x990>
 801773c:	151b      	asrs	r3, r3, #20
 801773e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017742:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017746:	fa4a f303 	asr.w	r3, sl, r3
 801774a:	445b      	add	r3, fp
 801774c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017750:	4e9c      	ldr	r6, [pc, #624]	; (80179c4 <__ieee754_pow+0xa04>)
 8017752:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017756:	4116      	asrs	r6, r2
 8017758:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801775c:	2000      	movs	r0, #0
 801775e:	ea23 0106 	bic.w	r1, r3, r6
 8017762:	f1c2 0214 	rsb	r2, r2, #20
 8017766:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801776a:	fa4a fa02 	asr.w	sl, sl, r2
 801776e:	f1bb 0f00 	cmp.w	fp, #0
 8017772:	4602      	mov	r2, r0
 8017774:	460b      	mov	r3, r1
 8017776:	4620      	mov	r0, r4
 8017778:	4629      	mov	r1, r5
 801777a:	bfb8      	it	lt
 801777c:	f1ca 0a00 	rsblt	sl, sl, #0
 8017780:	f7e8 fda2 	bl	80002c8 <__aeabi_dsub>
 8017784:	e9cd 0100 	strd	r0, r1, [sp]
 8017788:	4642      	mov	r2, r8
 801778a:	464b      	mov	r3, r9
 801778c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017790:	f7e8 fd9c 	bl	80002cc <__adddf3>
 8017794:	2000      	movs	r0, #0
 8017796:	a378      	add	r3, pc, #480	; (adr r3, 8017978 <__ieee754_pow+0x9b8>)
 8017798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779c:	4604      	mov	r4, r0
 801779e:	460d      	mov	r5, r1
 80177a0:	f7e8 ff4a 	bl	8000638 <__aeabi_dmul>
 80177a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177a8:	4606      	mov	r6, r0
 80177aa:	460f      	mov	r7, r1
 80177ac:	4620      	mov	r0, r4
 80177ae:	4629      	mov	r1, r5
 80177b0:	f7e8 fd8a 	bl	80002c8 <__aeabi_dsub>
 80177b4:	4602      	mov	r2, r0
 80177b6:	460b      	mov	r3, r1
 80177b8:	4640      	mov	r0, r8
 80177ba:	4649      	mov	r1, r9
 80177bc:	f7e8 fd84 	bl	80002c8 <__aeabi_dsub>
 80177c0:	a36f      	add	r3, pc, #444	; (adr r3, 8017980 <__ieee754_pow+0x9c0>)
 80177c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c6:	f7e8 ff37 	bl	8000638 <__aeabi_dmul>
 80177ca:	a36f      	add	r3, pc, #444	; (adr r3, 8017988 <__ieee754_pow+0x9c8>)
 80177cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d0:	4680      	mov	r8, r0
 80177d2:	4689      	mov	r9, r1
 80177d4:	4620      	mov	r0, r4
 80177d6:	4629      	mov	r1, r5
 80177d8:	f7e8 ff2e 	bl	8000638 <__aeabi_dmul>
 80177dc:	4602      	mov	r2, r0
 80177de:	460b      	mov	r3, r1
 80177e0:	4640      	mov	r0, r8
 80177e2:	4649      	mov	r1, r9
 80177e4:	f7e8 fd72 	bl	80002cc <__adddf3>
 80177e8:	4604      	mov	r4, r0
 80177ea:	460d      	mov	r5, r1
 80177ec:	4602      	mov	r2, r0
 80177ee:	460b      	mov	r3, r1
 80177f0:	4630      	mov	r0, r6
 80177f2:	4639      	mov	r1, r7
 80177f4:	f7e8 fd6a 	bl	80002cc <__adddf3>
 80177f8:	4632      	mov	r2, r6
 80177fa:	463b      	mov	r3, r7
 80177fc:	4680      	mov	r8, r0
 80177fe:	4689      	mov	r9, r1
 8017800:	f7e8 fd62 	bl	80002c8 <__aeabi_dsub>
 8017804:	4602      	mov	r2, r0
 8017806:	460b      	mov	r3, r1
 8017808:	4620      	mov	r0, r4
 801780a:	4629      	mov	r1, r5
 801780c:	f7e8 fd5c 	bl	80002c8 <__aeabi_dsub>
 8017810:	4642      	mov	r2, r8
 8017812:	4606      	mov	r6, r0
 8017814:	460f      	mov	r7, r1
 8017816:	464b      	mov	r3, r9
 8017818:	4640      	mov	r0, r8
 801781a:	4649      	mov	r1, r9
 801781c:	f7e8 ff0c 	bl	8000638 <__aeabi_dmul>
 8017820:	a35b      	add	r3, pc, #364	; (adr r3, 8017990 <__ieee754_pow+0x9d0>)
 8017822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017826:	4604      	mov	r4, r0
 8017828:	460d      	mov	r5, r1
 801782a:	f7e8 ff05 	bl	8000638 <__aeabi_dmul>
 801782e:	a35a      	add	r3, pc, #360	; (adr r3, 8017998 <__ieee754_pow+0x9d8>)
 8017830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017834:	f7e8 fd48 	bl	80002c8 <__aeabi_dsub>
 8017838:	4622      	mov	r2, r4
 801783a:	462b      	mov	r3, r5
 801783c:	f7e8 fefc 	bl	8000638 <__aeabi_dmul>
 8017840:	a357      	add	r3, pc, #348	; (adr r3, 80179a0 <__ieee754_pow+0x9e0>)
 8017842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017846:	f7e8 fd41 	bl	80002cc <__adddf3>
 801784a:	4622      	mov	r2, r4
 801784c:	462b      	mov	r3, r5
 801784e:	f7e8 fef3 	bl	8000638 <__aeabi_dmul>
 8017852:	a355      	add	r3, pc, #340	; (adr r3, 80179a8 <__ieee754_pow+0x9e8>)
 8017854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017858:	f7e8 fd36 	bl	80002c8 <__aeabi_dsub>
 801785c:	4622      	mov	r2, r4
 801785e:	462b      	mov	r3, r5
 8017860:	f7e8 feea 	bl	8000638 <__aeabi_dmul>
 8017864:	a352      	add	r3, pc, #328	; (adr r3, 80179b0 <__ieee754_pow+0x9f0>)
 8017866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786a:	f7e8 fd2f 	bl	80002cc <__adddf3>
 801786e:	4622      	mov	r2, r4
 8017870:	462b      	mov	r3, r5
 8017872:	f7e8 fee1 	bl	8000638 <__aeabi_dmul>
 8017876:	4602      	mov	r2, r0
 8017878:	460b      	mov	r3, r1
 801787a:	4640      	mov	r0, r8
 801787c:	4649      	mov	r1, r9
 801787e:	f7e8 fd23 	bl	80002c8 <__aeabi_dsub>
 8017882:	4604      	mov	r4, r0
 8017884:	460d      	mov	r5, r1
 8017886:	4602      	mov	r2, r0
 8017888:	460b      	mov	r3, r1
 801788a:	4640      	mov	r0, r8
 801788c:	4649      	mov	r1, r9
 801788e:	f7e8 fed3 	bl	8000638 <__aeabi_dmul>
 8017892:	2200      	movs	r2, #0
 8017894:	e9cd 0100 	strd	r0, r1, [sp]
 8017898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801789c:	4620      	mov	r0, r4
 801789e:	4629      	mov	r1, r5
 80178a0:	f7e8 fd12 	bl	80002c8 <__aeabi_dsub>
 80178a4:	4602      	mov	r2, r0
 80178a6:	460b      	mov	r3, r1
 80178a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178ac:	f7e8 ffee 	bl	800088c <__aeabi_ddiv>
 80178b0:	4632      	mov	r2, r6
 80178b2:	4604      	mov	r4, r0
 80178b4:	460d      	mov	r5, r1
 80178b6:	463b      	mov	r3, r7
 80178b8:	4640      	mov	r0, r8
 80178ba:	4649      	mov	r1, r9
 80178bc:	f7e8 febc 	bl	8000638 <__aeabi_dmul>
 80178c0:	4632      	mov	r2, r6
 80178c2:	463b      	mov	r3, r7
 80178c4:	f7e8 fd02 	bl	80002cc <__adddf3>
 80178c8:	4602      	mov	r2, r0
 80178ca:	460b      	mov	r3, r1
 80178cc:	4620      	mov	r0, r4
 80178ce:	4629      	mov	r1, r5
 80178d0:	f7e8 fcfa 	bl	80002c8 <__aeabi_dsub>
 80178d4:	4642      	mov	r2, r8
 80178d6:	464b      	mov	r3, r9
 80178d8:	f7e8 fcf6 	bl	80002c8 <__aeabi_dsub>
 80178dc:	4602      	mov	r2, r0
 80178de:	460b      	mov	r3, r1
 80178e0:	2000      	movs	r0, #0
 80178e2:	4939      	ldr	r1, [pc, #228]	; (80179c8 <__ieee754_pow+0xa08>)
 80178e4:	f7e8 fcf0 	bl	80002c8 <__aeabi_dsub>
 80178e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80178ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80178f0:	4602      	mov	r2, r0
 80178f2:	460b      	mov	r3, r1
 80178f4:	da2f      	bge.n	8017956 <__ieee754_pow+0x996>
 80178f6:	4650      	mov	r0, sl
 80178f8:	ec43 2b10 	vmov	d0, r2, r3
 80178fc:	f000 f9c0 	bl	8017c80 <scalbn>
 8017900:	ec51 0b10 	vmov	r0, r1, d0
 8017904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017908:	f7ff bbf1 	b.w	80170ee <__ieee754_pow+0x12e>
 801790c:	4b2f      	ldr	r3, [pc, #188]	; (80179cc <__ieee754_pow+0xa0c>)
 801790e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017912:	429e      	cmp	r6, r3
 8017914:	f77f af0c 	ble.w	8017730 <__ieee754_pow+0x770>
 8017918:	4b2d      	ldr	r3, [pc, #180]	; (80179d0 <__ieee754_pow+0xa10>)
 801791a:	440b      	add	r3, r1
 801791c:	4303      	orrs	r3, r0
 801791e:	d00b      	beq.n	8017938 <__ieee754_pow+0x978>
 8017920:	a325      	add	r3, pc, #148	; (adr r3, 80179b8 <__ieee754_pow+0x9f8>)
 8017922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801792a:	f7e8 fe85 	bl	8000638 <__aeabi_dmul>
 801792e:	a322      	add	r3, pc, #136	; (adr r3, 80179b8 <__ieee754_pow+0x9f8>)
 8017930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017934:	f7ff bbdb 	b.w	80170ee <__ieee754_pow+0x12e>
 8017938:	4622      	mov	r2, r4
 801793a:	462b      	mov	r3, r5
 801793c:	f7e8 fcc4 	bl	80002c8 <__aeabi_dsub>
 8017940:	4642      	mov	r2, r8
 8017942:	464b      	mov	r3, r9
 8017944:	f7e9 f8fe 	bl	8000b44 <__aeabi_dcmpge>
 8017948:	2800      	cmp	r0, #0
 801794a:	f43f aef1 	beq.w	8017730 <__ieee754_pow+0x770>
 801794e:	e7e7      	b.n	8017920 <__ieee754_pow+0x960>
 8017950:	f04f 0a00 	mov.w	sl, #0
 8017954:	e718      	b.n	8017788 <__ieee754_pow+0x7c8>
 8017956:	4621      	mov	r1, r4
 8017958:	e7d4      	b.n	8017904 <__ieee754_pow+0x944>
 801795a:	2000      	movs	r0, #0
 801795c:	491a      	ldr	r1, [pc, #104]	; (80179c8 <__ieee754_pow+0xa08>)
 801795e:	f7ff bb8f 	b.w	8017080 <__ieee754_pow+0xc0>
 8017962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017966:	f7ff bb8b 	b.w	8017080 <__ieee754_pow+0xc0>
 801796a:	4630      	mov	r0, r6
 801796c:	4639      	mov	r1, r7
 801796e:	f7ff bb87 	b.w	8017080 <__ieee754_pow+0xc0>
 8017972:	4693      	mov	fp, r2
 8017974:	f7ff bb98 	b.w	80170a8 <__ieee754_pow+0xe8>
 8017978:	00000000 	.word	0x00000000
 801797c:	3fe62e43 	.word	0x3fe62e43
 8017980:	fefa39ef 	.word	0xfefa39ef
 8017984:	3fe62e42 	.word	0x3fe62e42
 8017988:	0ca86c39 	.word	0x0ca86c39
 801798c:	be205c61 	.word	0xbe205c61
 8017990:	72bea4d0 	.word	0x72bea4d0
 8017994:	3e663769 	.word	0x3e663769
 8017998:	c5d26bf1 	.word	0xc5d26bf1
 801799c:	3ebbbd41 	.word	0x3ebbbd41
 80179a0:	af25de2c 	.word	0xaf25de2c
 80179a4:	3f11566a 	.word	0x3f11566a
 80179a8:	16bebd93 	.word	0x16bebd93
 80179ac:	3f66c16c 	.word	0x3f66c16c
 80179b0:	5555553e 	.word	0x5555553e
 80179b4:	3fc55555 	.word	0x3fc55555
 80179b8:	c2f8f359 	.word	0xc2f8f359
 80179bc:	01a56e1f 	.word	0x01a56e1f
 80179c0:	3fe00000 	.word	0x3fe00000
 80179c4:	000fffff 	.word	0x000fffff
 80179c8:	3ff00000 	.word	0x3ff00000
 80179cc:	4090cbff 	.word	0x4090cbff
 80179d0:	3f6f3400 	.word	0x3f6f3400
 80179d4:	652b82fe 	.word	0x652b82fe
 80179d8:	3c971547 	.word	0x3c971547

080179dc <__ieee754_sqrt>:
 80179dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e0:	4955      	ldr	r1, [pc, #340]	; (8017b38 <__ieee754_sqrt+0x15c>)
 80179e2:	ec55 4b10 	vmov	r4, r5, d0
 80179e6:	43a9      	bics	r1, r5
 80179e8:	462b      	mov	r3, r5
 80179ea:	462a      	mov	r2, r5
 80179ec:	d112      	bne.n	8017a14 <__ieee754_sqrt+0x38>
 80179ee:	ee10 2a10 	vmov	r2, s0
 80179f2:	ee10 0a10 	vmov	r0, s0
 80179f6:	4629      	mov	r1, r5
 80179f8:	f7e8 fe1e 	bl	8000638 <__aeabi_dmul>
 80179fc:	4602      	mov	r2, r0
 80179fe:	460b      	mov	r3, r1
 8017a00:	4620      	mov	r0, r4
 8017a02:	4629      	mov	r1, r5
 8017a04:	f7e8 fc62 	bl	80002cc <__adddf3>
 8017a08:	4604      	mov	r4, r0
 8017a0a:	460d      	mov	r5, r1
 8017a0c:	ec45 4b10 	vmov	d0, r4, r5
 8017a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a14:	2d00      	cmp	r5, #0
 8017a16:	ee10 0a10 	vmov	r0, s0
 8017a1a:	4621      	mov	r1, r4
 8017a1c:	dc0f      	bgt.n	8017a3e <__ieee754_sqrt+0x62>
 8017a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017a22:	4330      	orrs	r0, r6
 8017a24:	d0f2      	beq.n	8017a0c <__ieee754_sqrt+0x30>
 8017a26:	b155      	cbz	r5, 8017a3e <__ieee754_sqrt+0x62>
 8017a28:	ee10 2a10 	vmov	r2, s0
 8017a2c:	4620      	mov	r0, r4
 8017a2e:	4629      	mov	r1, r5
 8017a30:	f7e8 fc4a 	bl	80002c8 <__aeabi_dsub>
 8017a34:	4602      	mov	r2, r0
 8017a36:	460b      	mov	r3, r1
 8017a38:	f7e8 ff28 	bl	800088c <__aeabi_ddiv>
 8017a3c:	e7e4      	b.n	8017a08 <__ieee754_sqrt+0x2c>
 8017a3e:	151b      	asrs	r3, r3, #20
 8017a40:	d073      	beq.n	8017b2a <__ieee754_sqrt+0x14e>
 8017a42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017a46:	07dd      	lsls	r5, r3, #31
 8017a48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017a4c:	bf48      	it	mi
 8017a4e:	0fc8      	lsrmi	r0, r1, #31
 8017a50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017a54:	bf44      	itt	mi
 8017a56:	0049      	lslmi	r1, r1, #1
 8017a58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017a5c:	2500      	movs	r5, #0
 8017a5e:	1058      	asrs	r0, r3, #1
 8017a60:	0fcb      	lsrs	r3, r1, #31
 8017a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8017a66:	0049      	lsls	r1, r1, #1
 8017a68:	2316      	movs	r3, #22
 8017a6a:	462c      	mov	r4, r5
 8017a6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017a70:	19a7      	adds	r7, r4, r6
 8017a72:	4297      	cmp	r7, r2
 8017a74:	bfde      	ittt	le
 8017a76:	19bc      	addle	r4, r7, r6
 8017a78:	1bd2      	suble	r2, r2, r7
 8017a7a:	19ad      	addle	r5, r5, r6
 8017a7c:	0fcf      	lsrs	r7, r1, #31
 8017a7e:	3b01      	subs	r3, #1
 8017a80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8017a84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017a88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017a8c:	d1f0      	bne.n	8017a70 <__ieee754_sqrt+0x94>
 8017a8e:	f04f 0c20 	mov.w	ip, #32
 8017a92:	469e      	mov	lr, r3
 8017a94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017a98:	42a2      	cmp	r2, r4
 8017a9a:	eb06 070e 	add.w	r7, r6, lr
 8017a9e:	dc02      	bgt.n	8017aa6 <__ieee754_sqrt+0xca>
 8017aa0:	d112      	bne.n	8017ac8 <__ieee754_sqrt+0xec>
 8017aa2:	428f      	cmp	r7, r1
 8017aa4:	d810      	bhi.n	8017ac8 <__ieee754_sqrt+0xec>
 8017aa6:	2f00      	cmp	r7, #0
 8017aa8:	eb07 0e06 	add.w	lr, r7, r6
 8017aac:	da42      	bge.n	8017b34 <__ieee754_sqrt+0x158>
 8017aae:	f1be 0f00 	cmp.w	lr, #0
 8017ab2:	db3f      	blt.n	8017b34 <__ieee754_sqrt+0x158>
 8017ab4:	f104 0801 	add.w	r8, r4, #1
 8017ab8:	1b12      	subs	r2, r2, r4
 8017aba:	428f      	cmp	r7, r1
 8017abc:	bf88      	it	hi
 8017abe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017ac2:	1bc9      	subs	r1, r1, r7
 8017ac4:	4433      	add	r3, r6
 8017ac6:	4644      	mov	r4, r8
 8017ac8:	0052      	lsls	r2, r2, #1
 8017aca:	f1bc 0c01 	subs.w	ip, ip, #1
 8017ace:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8017ad2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017ad6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017ada:	d1dd      	bne.n	8017a98 <__ieee754_sqrt+0xbc>
 8017adc:	430a      	orrs	r2, r1
 8017ade:	d006      	beq.n	8017aee <__ieee754_sqrt+0x112>
 8017ae0:	1c5c      	adds	r4, r3, #1
 8017ae2:	bf13      	iteet	ne
 8017ae4:	3301      	addne	r3, #1
 8017ae6:	3501      	addeq	r5, #1
 8017ae8:	4663      	moveq	r3, ip
 8017aea:	f023 0301 	bicne.w	r3, r3, #1
 8017aee:	106a      	asrs	r2, r5, #1
 8017af0:	085b      	lsrs	r3, r3, #1
 8017af2:	07e9      	lsls	r1, r5, #31
 8017af4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017af8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017afc:	bf48      	it	mi
 8017afe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017b02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8017b06:	461c      	mov	r4, r3
 8017b08:	e780      	b.n	8017a0c <__ieee754_sqrt+0x30>
 8017b0a:	0aca      	lsrs	r2, r1, #11
 8017b0c:	3815      	subs	r0, #21
 8017b0e:	0549      	lsls	r1, r1, #21
 8017b10:	2a00      	cmp	r2, #0
 8017b12:	d0fa      	beq.n	8017b0a <__ieee754_sqrt+0x12e>
 8017b14:	02d6      	lsls	r6, r2, #11
 8017b16:	d50a      	bpl.n	8017b2e <__ieee754_sqrt+0x152>
 8017b18:	f1c3 0420 	rsb	r4, r3, #32
 8017b1c:	fa21 f404 	lsr.w	r4, r1, r4
 8017b20:	1e5d      	subs	r5, r3, #1
 8017b22:	4099      	lsls	r1, r3
 8017b24:	4322      	orrs	r2, r4
 8017b26:	1b43      	subs	r3, r0, r5
 8017b28:	e78b      	b.n	8017a42 <__ieee754_sqrt+0x66>
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	e7f0      	b.n	8017b10 <__ieee754_sqrt+0x134>
 8017b2e:	0052      	lsls	r2, r2, #1
 8017b30:	3301      	adds	r3, #1
 8017b32:	e7ef      	b.n	8017b14 <__ieee754_sqrt+0x138>
 8017b34:	46a0      	mov	r8, r4
 8017b36:	e7bf      	b.n	8017ab8 <__ieee754_sqrt+0xdc>
 8017b38:	7ff00000 	.word	0x7ff00000

08017b3c <fabs>:
 8017b3c:	ec51 0b10 	vmov	r0, r1, d0
 8017b40:	ee10 2a10 	vmov	r2, s0
 8017b44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017b48:	ec43 2b10 	vmov	d0, r2, r3
 8017b4c:	4770      	bx	lr

08017b4e <finite>:
 8017b4e:	ee10 3a90 	vmov	r3, s1
 8017b52:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017b56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017b5a:	0fc0      	lsrs	r0, r0, #31
 8017b5c:	4770      	bx	lr

08017b5e <matherr>:
 8017b5e:	2000      	movs	r0, #0
 8017b60:	4770      	bx	lr
 8017b62:	0000      	movs	r0, r0
 8017b64:	0000      	movs	r0, r0
	...

08017b68 <nan>:
 8017b68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017b70 <nan+0x8>
 8017b6c:	4770      	bx	lr
 8017b6e:	bf00      	nop
 8017b70:	00000000 	.word	0x00000000
 8017b74:	7ff80000 	.word	0x7ff80000

08017b78 <rint>:
 8017b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b7a:	ec51 0b10 	vmov	r0, r1, d0
 8017b7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017b82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8017b86:	2e13      	cmp	r6, #19
 8017b88:	460b      	mov	r3, r1
 8017b8a:	ee10 4a10 	vmov	r4, s0
 8017b8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017b92:	dc56      	bgt.n	8017c42 <rint+0xca>
 8017b94:	2e00      	cmp	r6, #0
 8017b96:	da2b      	bge.n	8017bf0 <rint+0x78>
 8017b98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017b9c:	4302      	orrs	r2, r0
 8017b9e:	d023      	beq.n	8017be8 <rint+0x70>
 8017ba0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017ba4:	4302      	orrs	r2, r0
 8017ba6:	4254      	negs	r4, r2
 8017ba8:	4314      	orrs	r4, r2
 8017baa:	0c4b      	lsrs	r3, r1, #17
 8017bac:	0b24      	lsrs	r4, r4, #12
 8017bae:	045b      	lsls	r3, r3, #17
 8017bb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8017bb4:	ea44 0103 	orr.w	r1, r4, r3
 8017bb8:	460b      	mov	r3, r1
 8017bba:	492f      	ldr	r1, [pc, #188]	; (8017c78 <rint+0x100>)
 8017bbc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017bc0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	4639      	mov	r1, r7
 8017bc8:	4630      	mov	r0, r6
 8017bca:	f7e8 fb7f 	bl	80002cc <__adddf3>
 8017bce:	e9cd 0100 	strd	r0, r1, [sp]
 8017bd2:	463b      	mov	r3, r7
 8017bd4:	4632      	mov	r2, r6
 8017bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bda:	f7e8 fb75 	bl	80002c8 <__aeabi_dsub>
 8017bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017be2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8017be6:	4639      	mov	r1, r7
 8017be8:	ec41 0b10 	vmov	d0, r0, r1
 8017bec:	b003      	add	sp, #12
 8017bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bf0:	4a22      	ldr	r2, [pc, #136]	; (8017c7c <rint+0x104>)
 8017bf2:	4132      	asrs	r2, r6
 8017bf4:	ea01 0702 	and.w	r7, r1, r2
 8017bf8:	4307      	orrs	r7, r0
 8017bfa:	d0f5      	beq.n	8017be8 <rint+0x70>
 8017bfc:	0852      	lsrs	r2, r2, #1
 8017bfe:	4011      	ands	r1, r2
 8017c00:	430c      	orrs	r4, r1
 8017c02:	d00b      	beq.n	8017c1c <rint+0xa4>
 8017c04:	ea23 0202 	bic.w	r2, r3, r2
 8017c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017c0c:	2e13      	cmp	r6, #19
 8017c0e:	fa43 f306 	asr.w	r3, r3, r6
 8017c12:	bf0c      	ite	eq
 8017c14:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017c18:	2400      	movne	r4, #0
 8017c1a:	4313      	orrs	r3, r2
 8017c1c:	4916      	ldr	r1, [pc, #88]	; (8017c78 <rint+0x100>)
 8017c1e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8017c22:	4622      	mov	r2, r4
 8017c24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017c28:	4620      	mov	r0, r4
 8017c2a:	4629      	mov	r1, r5
 8017c2c:	f7e8 fb4e 	bl	80002cc <__adddf3>
 8017c30:	e9cd 0100 	strd	r0, r1, [sp]
 8017c34:	4622      	mov	r2, r4
 8017c36:	462b      	mov	r3, r5
 8017c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c3c:	f7e8 fb44 	bl	80002c8 <__aeabi_dsub>
 8017c40:	e7d2      	b.n	8017be8 <rint+0x70>
 8017c42:	2e33      	cmp	r6, #51	; 0x33
 8017c44:	dd07      	ble.n	8017c56 <rint+0xde>
 8017c46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017c4a:	d1cd      	bne.n	8017be8 <rint+0x70>
 8017c4c:	ee10 2a10 	vmov	r2, s0
 8017c50:	f7e8 fb3c 	bl	80002cc <__adddf3>
 8017c54:	e7c8      	b.n	8017be8 <rint+0x70>
 8017c56:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c5e:	40f2      	lsrs	r2, r6
 8017c60:	4210      	tst	r0, r2
 8017c62:	d0c1      	beq.n	8017be8 <rint+0x70>
 8017c64:	0852      	lsrs	r2, r2, #1
 8017c66:	4210      	tst	r0, r2
 8017c68:	bf1f      	itttt	ne
 8017c6a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017c6e:	ea20 0202 	bicne.w	r2, r0, r2
 8017c72:	4134      	asrne	r4, r6
 8017c74:	4314      	orrne	r4, r2
 8017c76:	e7d1      	b.n	8017c1c <rint+0xa4>
 8017c78:	08018528 	.word	0x08018528
 8017c7c:	000fffff 	.word	0x000fffff

08017c80 <scalbn>:
 8017c80:	b570      	push	{r4, r5, r6, lr}
 8017c82:	ec55 4b10 	vmov	r4, r5, d0
 8017c86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017c8a:	4606      	mov	r6, r0
 8017c8c:	462b      	mov	r3, r5
 8017c8e:	b9aa      	cbnz	r2, 8017cbc <scalbn+0x3c>
 8017c90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017c94:	4323      	orrs	r3, r4
 8017c96:	d03b      	beq.n	8017d10 <scalbn+0x90>
 8017c98:	4b31      	ldr	r3, [pc, #196]	; (8017d60 <scalbn+0xe0>)
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	ee10 0a10 	vmov	r0, s0
 8017ca2:	f7e8 fcc9 	bl	8000638 <__aeabi_dmul>
 8017ca6:	4b2f      	ldr	r3, [pc, #188]	; (8017d64 <scalbn+0xe4>)
 8017ca8:	429e      	cmp	r6, r3
 8017caa:	4604      	mov	r4, r0
 8017cac:	460d      	mov	r5, r1
 8017cae:	da12      	bge.n	8017cd6 <scalbn+0x56>
 8017cb0:	a327      	add	r3, pc, #156	; (adr r3, 8017d50 <scalbn+0xd0>)
 8017cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb6:	f7e8 fcbf 	bl	8000638 <__aeabi_dmul>
 8017cba:	e009      	b.n	8017cd0 <scalbn+0x50>
 8017cbc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017cc0:	428a      	cmp	r2, r1
 8017cc2:	d10c      	bne.n	8017cde <scalbn+0x5e>
 8017cc4:	ee10 2a10 	vmov	r2, s0
 8017cc8:	4620      	mov	r0, r4
 8017cca:	4629      	mov	r1, r5
 8017ccc:	f7e8 fafe 	bl	80002cc <__adddf3>
 8017cd0:	4604      	mov	r4, r0
 8017cd2:	460d      	mov	r5, r1
 8017cd4:	e01c      	b.n	8017d10 <scalbn+0x90>
 8017cd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017cda:	460b      	mov	r3, r1
 8017cdc:	3a36      	subs	r2, #54	; 0x36
 8017cde:	4432      	add	r2, r6
 8017ce0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017ce4:	428a      	cmp	r2, r1
 8017ce6:	dd0b      	ble.n	8017d00 <scalbn+0x80>
 8017ce8:	ec45 4b11 	vmov	d1, r4, r5
 8017cec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017d58 <scalbn+0xd8>
 8017cf0:	f000 f83c 	bl	8017d6c <copysign>
 8017cf4:	a318      	add	r3, pc, #96	; (adr r3, 8017d58 <scalbn+0xd8>)
 8017cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cfa:	ec51 0b10 	vmov	r0, r1, d0
 8017cfe:	e7da      	b.n	8017cb6 <scalbn+0x36>
 8017d00:	2a00      	cmp	r2, #0
 8017d02:	dd08      	ble.n	8017d16 <scalbn+0x96>
 8017d04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017d08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017d0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017d10:	ec45 4b10 	vmov	d0, r4, r5
 8017d14:	bd70      	pop	{r4, r5, r6, pc}
 8017d16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017d1a:	da0d      	bge.n	8017d38 <scalbn+0xb8>
 8017d1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017d20:	429e      	cmp	r6, r3
 8017d22:	ec45 4b11 	vmov	d1, r4, r5
 8017d26:	dce1      	bgt.n	8017cec <scalbn+0x6c>
 8017d28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017d50 <scalbn+0xd0>
 8017d2c:	f000 f81e 	bl	8017d6c <copysign>
 8017d30:	a307      	add	r3, pc, #28	; (adr r3, 8017d50 <scalbn+0xd0>)
 8017d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d36:	e7e0      	b.n	8017cfa <scalbn+0x7a>
 8017d38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017d3c:	3236      	adds	r2, #54	; 0x36
 8017d3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017d42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017d46:	4620      	mov	r0, r4
 8017d48:	4629      	mov	r1, r5
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	4b06      	ldr	r3, [pc, #24]	; (8017d68 <scalbn+0xe8>)
 8017d4e:	e7b2      	b.n	8017cb6 <scalbn+0x36>
 8017d50:	c2f8f359 	.word	0xc2f8f359
 8017d54:	01a56e1f 	.word	0x01a56e1f
 8017d58:	8800759c 	.word	0x8800759c
 8017d5c:	7e37e43c 	.word	0x7e37e43c
 8017d60:	43500000 	.word	0x43500000
 8017d64:	ffff3cb0 	.word	0xffff3cb0
 8017d68:	3c900000 	.word	0x3c900000

08017d6c <copysign>:
 8017d6c:	ec51 0b10 	vmov	r0, r1, d0
 8017d70:	ee11 0a90 	vmov	r0, s3
 8017d74:	ee10 2a10 	vmov	r2, s0
 8017d78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017d7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017d80:	ea41 0300 	orr.w	r3, r1, r0
 8017d84:	ec43 2b10 	vmov	d0, r2, r3
 8017d88:	4770      	bx	lr
	...

08017d8c <_init>:
 8017d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8e:	bf00      	nop
 8017d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d92:	bc08      	pop	{r3}
 8017d94:	469e      	mov	lr, r3
 8017d96:	4770      	bx	lr

08017d98 <_fini>:
 8017d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d9a:	bf00      	nop
 8017d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9e:	bc08      	pop	{r3}
 8017da0:	469e      	mov	lr, r3
 8017da2:	4770      	bx	lr
